
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef4c  0800ef4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef4c  0800ef4c  0001ef4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef54  0800ef54  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef54  0800ef54  0001ef54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef58  0800ef58  0001ef58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ef5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00005a2c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005aa4  20005aa4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004105f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000790a  00000000  00000000  00061107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e70  00000000  00000000  00068a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003aa0  00000000  00000000  0006c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fa92  00000000  00000000  00070328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003540b  00000000  00000000  0009fdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010cd35  00000000  00000000  000d51c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e1efa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010ff4  00000000  00000000  001e1f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  001f2f40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ea68 	.word	0x0800ea68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800ea68 	.word	0x0800ea68

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20002f48 	.word	0x20002f48
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	619a      	str	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	041a      	lsls	r2, r3, #16
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	619a      	str	r2, [r3, #24]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <u8x8_stm32_gpio_and_delay>:
#define SSD1306_TIMEOUT		100
#define SSD1306_SPIDRV		&spi2drv

// u8g2 gpio & delay control callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	72fb      	strb	r3, [r7, #11]
 800067e:	4613      	mov	r3, r2
 8000680:	72bb      	strb	r3, [r7, #10]
  /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
  switch(msg)
 8000682:	7afb      	ldrb	r3, [r7, #11]
 8000684:	3b28      	subs	r3, #40	; 0x28
 8000686:	2b23      	cmp	r3, #35	; 0x23
 8000688:	d87a      	bhi.n	8000780 <u8x8_stm32_gpio_and_delay+0x110>
 800068a:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <u8x8_stm32_gpio_and_delay+0x20>)
 800068c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000690:	08000781 	.word	0x08000781
 8000694:	08000721 	.word	0x08000721
 8000698:	08000781 	.word	0x08000781
 800069c:	08000781 	.word	0x08000781
 80006a0:	08000781 	.word	0x08000781
 80006a4:	08000781 	.word	0x08000781
 80006a8:	08000781 	.word	0x08000781
 80006ac:	08000781 	.word	0x08000781
 80006b0:	08000781 	.word	0x08000781
 80006b4:	08000781 	.word	0x08000781
 80006b8:	08000781 	.word	0x08000781
 80006bc:	08000781 	.word	0x08000781
 80006c0:	08000781 	.word	0x08000781
 80006c4:	08000781 	.word	0x08000781
 80006c8:	08000781 	.word	0x08000781
 80006cc:	08000781 	.word	0x08000781
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000781 	.word	0x08000781
 80006d8:	08000781 	.word	0x08000781
 80006dc:	08000781 	.word	0x08000781
 80006e0:	08000781 	.word	0x08000781
 80006e4:	08000781 	.word	0x08000781
 80006e8:	08000781 	.word	0x08000781
 80006ec:	08000781 	.word	0x08000781
 80006f0:	08000781 	.word	0x08000781
 80006f4:	08000781 	.word	0x08000781
 80006f8:	08000781 	.word	0x08000781
 80006fc:	08000781 	.word	0x08000781
 8000700:	08000781 	.word	0x08000781
 8000704:	08000781 	.word	0x08000781
 8000708:	08000781 	.word	0x08000781
 800070c:	08000781 	.word	0x08000781
 8000710:	08000781 	.word	0x08000781
 8000714:	08000733 	.word	0x08000733
 8000718:	0800074d 	.word	0x0800074d
 800071c:	08000767 	.word	0x08000767
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    /* Insert codes for initialization */
    break;
  case U8X8_MSG_DELAY_MILLI:
    /* ms Delay */
	hal_delay_us(10*arg_int);
 8000720:	7aba      	ldrb	r2, [r7, #10]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f00a fbbc 	bl	800aea8 <hal_delay_us>
    break;
 8000730:	e026      	b.n	8000780 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_CS:
    /* Insert codes for SS pin control */
    if(arg_int) {
 8000732:	7abb      	ldrb	r3, [r7, #10]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d004      	beq.n	8000742 <u8x8_stm32_gpio_and_delay+0xd2>
      LL_GPIO_SetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000738:	2104      	movs	r1, #4
 800073a:	4814      	ldr	r0, [pc, #80]	; (800078c <u8x8_stm32_gpio_and_delay+0x11c>)
 800073c:	f7ff ff7a 	bl	8000634 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
    }
    break;
 8000740:	e01e      	b.n	8000780 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000742:	2104      	movs	r1, #4
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000746:	f7ff ff83 	bl	8000650 <LL_GPIO_ResetOutputPin>
    break;
 800074a:	e019      	b.n	8000780 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_DC:
    /* Insert codes for DC pin control */
    if(arg_int) {
 800074c:	7abb      	ldrb	r3, [r7, #10]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d004      	beq.n	800075c <u8x8_stm32_gpio_and_delay+0xec>
      LL_GPIO_SetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000752:	2102      	movs	r1, #2
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000756:	f7ff ff6d 	bl	8000634 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
    }
    break;
 800075a:	e011      	b.n	8000780 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 800075c:	2102      	movs	r1, #2
 800075e:	480b      	ldr	r0, [pc, #44]	; (800078c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000760:	f7ff ff76 	bl	8000650 <LL_GPIO_ResetOutputPin>
    break;
 8000764:	e00c      	b.n	8000780 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_RESET:
    /* Insert codes for RST pin control */
    if(arg_int) {
 8000766:	7abb      	ldrb	r3, [r7, #10]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d004      	beq.n	8000776 <u8x8_stm32_gpio_and_delay+0x106>
      LL_GPIO_SetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 800076c:	2101      	movs	r1, #1
 800076e:	4807      	ldr	r0, [pc, #28]	; (800078c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000770:	f7ff ff60 	bl	8000634 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
    }
    break;
 8000774:	e003      	b.n	800077e <u8x8_stm32_gpio_and_delay+0x10e>
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 8000776:	2101      	movs	r1, #1
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <u8x8_stm32_gpio_and_delay+0x11c>)
 800077a:	f7ff ff69 	bl	8000650 <LL_GPIO_ResetOutputPin>
    break;
 800077e:	bf00      	nop
  }
  return 1;
 8000780:	2301      	movs	r3, #1
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40020800 	.word	0x40020800

08000790 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	72fb      	strb	r3, [r7, #11]
 800079e:	4613      	mov	r3, r2
 80007a0:	72bb      	strb	r3, [r7, #10]
  uint8_t* data = arg_ptr;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	617b      	str	r3, [r7, #20]

  switch(msg) {
 80007a6:	7afb      	ldrb	r3, [r7, #11]
 80007a8:	3b14      	subs	r3, #20
 80007aa:	2b0c      	cmp	r3, #12
 80007ac:	d842      	bhi.n	8000834 <u8x8_byte_stm32_hw_spi+0xa4>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <u8x8_byte_stm32_hw_spi+0x24>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	08000839 	.word	0x08000839
 80007b8:	08000835 	.word	0x08000835
 80007bc:	08000835 	.word	0x08000835
 80007c0:	080007e9 	.word	0x080007e9
 80007c4:	08000805 	.word	0x08000805
 80007c8:	0800081d 	.word	0x0800081d
 80007cc:	08000835 	.word	0x08000835
 80007d0:	08000835 	.word	0x08000835
 80007d4:	08000835 	.word	0x08000835
 80007d8:	08000835 	.word	0x08000835
 80007dc:	08000835 	.word	0x08000835
 80007e0:	08000835 	.word	0x08000835
 80007e4:	080007f7 	.word	0x080007f7
  case U8X8_MSG_BYTE_SEND:
    /* Insert codes to transmit data */
	hal_spi_transfer(SSD1306_SPIDRV, data, arg_int, SSD1306_TIMEOUT);
 80007e8:	7aba      	ldrb	r2, [r7, #10]
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	6979      	ldr	r1, [r7, #20]
 80007ee:	4815      	ldr	r0, [pc, #84]	; (8000844 <u8x8_byte_stm32_hw_spi+0xb4>)
 80007f0:	f00c fc7c 	bl	800d0ec <hal_spi_transfer>
    break;
 80007f4:	e021      	b.n	800083a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_INIT:
    /* Insert codes to begin SPI transmission */
    break;
  case U8X8_MSG_BYTE_SET_DC:
    /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
    u8x8_gpio_SetDC(u8x8, arg_int);
 80007f6:	7abb      	ldrb	r3, [r7, #10]
 80007f8:	461a      	mov	r2, r3
 80007fa:	214a      	movs	r1, #74	; 0x4a
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f009 ff42 	bl	800a686 <u8x8_gpio_call>
    break;
 8000802:	e01a      	b.n	800083a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_START_TRANSFER:
    /* Select slave, U8X8_MSG_GPIO_CS will be called */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	2149      	movs	r1, #73	; 0x49
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f009 ff39 	bl	800a686 <u8x8_gpio_call>
    hal_delay_us(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f00a fb47 	bl	800aea8 <hal_delay_us>
    break;
 800081a:	e00e      	b.n	800083a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_END_TRANSFER:
	hal_delay_us(100);
 800081c:	2064      	movs	r0, #100	; 0x64
 800081e:	f00a fb43 	bl	800aea8 <hal_delay_us>
    /* Insert codes to end SPI transmission */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	785b      	ldrb	r3, [r3, #1]
 8000828:	461a      	mov	r2, r3
 800082a:	2149      	movs	r1, #73	; 0x49
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f009 ff2a 	bl	800a686 <u8x8_gpio_call>
    break;
 8000832:	e002      	b.n	800083a <u8x8_byte_stm32_hw_spi+0xaa>
  default:
    return 0;
 8000834:	2300      	movs	r3, #0
 8000836:	e001      	b.n	800083c <u8x8_byte_stm32_hw_spi+0xac>
    break;
 8000838:	bf00      	nop
  }
  return 1;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20005a0c 	.word	0x20005a0c

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_Init+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <HAL_Init+0x40>)
 8000852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_Init+0x40>)
 800085e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x40>)
 800086a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f8fc 	bl	8000a6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	2005      	movs	r0, #5
 8000878:	f00c ff94 	bl	800d7a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f00c ff66 	bl	800d74c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023c00 	.word	0x40023c00

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20000094 	.word	0x20000094

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000094 	.word	0x20000094

080008cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d4:	f7ff ffee 	bl	80008b4 <HAL_GetTick>
 80008d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008e4:	d005      	beq.n	80008f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_Delay+0x44>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008f2:	bf00      	nop
 80008f4:	f7ff ffde 	bl	80008b4 <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	d8f7      	bhi.n	80008f4 <HAL_Delay+0x28>
  {
  }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000004 	.word	0x20000004

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800093c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	db0b      	blt.n	80009a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 021f 	and.w	r2, r3, #31
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <__NVIC_EnableIRQ+0x38>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	2001      	movs	r0, #1
 800099a:	fa00 f202 	lsl.w	r2, r0, r2
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ff4c 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a96:	f7ff ff61 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	68b9      	ldr	r1, [r7, #8]
 8000aa0:	6978      	ldr	r0, [r7, #20]
 8000aa2:	f7ff ffb1 	bl	8000a08 <NVIC_EncodePriority>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff80 	bl	80009b4 <__NVIC_SetPriority>
}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff54 	bl	8000978 <__NVIC_EnableIRQ>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff fee6 	bl	80008b4 <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e099      	b.n	8000c28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2202      	movs	r2, #2
 8000af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0201 	bic.w	r2, r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b14:	e00f      	b.n	8000b36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b16:	f7ff fecd 	bl	80008b4 <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d908      	bls.n	8000b36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2220      	movs	r2, #32
 8000b28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e078      	b.n	8000c28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e8      	bne.n	8000b16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <HAL_DMA_Init+0x158>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d107      	bne.n	8000ba0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f023 0307 	bic.w	r3, r3, #7
 8000bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d117      	bne.n	8000bfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00e      	beq.n	8000bfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fa9d 	bl	800111c <DMA_CheckFifoParam>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d008      	beq.n	8000bfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2240      	movs	r2, #64	; 0x40
 8000bec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e016      	b.n	8000c28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 fa54 	bl	80010b0 <DMA_CalcBaseAndBitshift>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c10:	223f      	movs	r2, #63	; 0x3f
 8000c12:	409a      	lsls	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	f010803f 	.word	0xf010803f

08000c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d101      	bne.n	8000c5a <HAL_DMA_Start_IT+0x26>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e040      	b.n	8000cdc <HAL_DMA_Start_IT+0xa8>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d12f      	bne.n	8000cce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2202      	movs	r2, #2
 8000c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f000 f9e6 	bl	8001054 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c8c:	223f      	movs	r2, #63	; 0x3f
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0216 	orr.w	r2, r2, #22
 8000ca2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d007      	beq.n	8000cbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 0208 	orr.w	r2, r2, #8
 8000cba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	e005      	b.n	8000cda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d004      	beq.n	8000d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00c      	b.n	8000d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2205      	movs	r2, #5
 8000d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0201 	bic.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d34:	4b8e      	ldr	r3, [pc, #568]	; (8000f70 <HAL_DMA_IRQHandler+0x248>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a8e      	ldr	r2, [pc, #568]	; (8000f74 <HAL_DMA_IRQHandler+0x24c>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	0a9b      	lsrs	r3, r3, #10
 8000d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d52:	2208      	movs	r2, #8
 8000d54:	409a      	lsls	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d01a      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d013      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0204 	bic.w	r2, r2, #4
 8000d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d80:	2208      	movs	r2, #8
 8000d82:	409a      	lsls	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8c:	f043 0201 	orr.w	r2, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d98:	2201      	movs	r2, #1
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d012      	beq.n	8000dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db6:	2201      	movs	r2, #1
 8000db8:	409a      	lsls	r2, r3
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc2:	f043 0202 	orr.w	r2, r3, #2
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dce:	2204      	movs	r2, #4
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d012      	beq.n	8000e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00b      	beq.n	8000e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dec:	2204      	movs	r2, #4
 8000dee:	409a      	lsls	r2, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df8:	f043 0204 	orr.w	r2, r3, #4
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e04:	2210      	movs	r2, #16
 8000e06:	409a      	lsls	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d043      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d03c      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e22:	2210      	movs	r2, #16
 8000e24:	409a      	lsls	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d018      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d108      	bne.n	8000e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d024      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	4798      	blx	r3
 8000e56:	e01f      	b.n	8000e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d01b      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	4798      	blx	r3
 8000e68:	e016      	b.n	8000e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d107      	bne.n	8000e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0208 	bic.w	r2, r2, #8
 8000e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 808f 	beq.w	8000fc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8087 	beq.w	8000fc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d136      	bne.n	8000f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0216 	bic.w	r2, r2, #22
 8000ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <HAL_DMA_IRQHandler+0x1da>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0208 	bic.w	r2, r2, #8
 8000f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f16:	223f      	movs	r2, #63	; 0x3f
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d07e      	beq.n	8001034 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	4798      	blx	r3
        }
        return;
 8000f3e:	e079      	b.n	8001034 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01d      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10d      	bne.n	8000f78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d031      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	4798      	blx	r3
 8000f6c:	e02c      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x2a0>
 8000f6e:	bf00      	nop
 8000f70:	20000010 	.word	0x20000010
 8000f74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d023      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
 8000f88:	e01e      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10f      	bne.n	8000fb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0210 	bic.w	r2, r2, #16
 8000fa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d032      	beq.n	8001036 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d022      	beq.n	8001022 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2205      	movs	r2, #5
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d307      	bcc.n	8001010 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f2      	bne.n	8000ff4 <HAL_DMA_IRQHandler+0x2cc>
 800100e:	e000      	b.n	8001012 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001010:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	4798      	blx	r3
 8001032:	e000      	b.n	8001036 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001034:	bf00      	nop
    }
  }
}
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001070:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b40      	cmp	r3, #64	; 0x40
 8001080:	d108      	bne.n	8001094 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001092:	e007      	b.n	80010a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	60da      	str	r2, [r3, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3b10      	subs	r3, #16
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <DMA_CalcBaseAndBitshift+0x64>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <DMA_CalcBaseAndBitshift+0x68>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d909      	bls.n	80010f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	1d1a      	adds	r2, r3, #4
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	659a      	str	r2, [r3, #88]	; 0x58
 80010f0:	e007      	b.n	8001102 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	aaaaaaab 	.word	0xaaaaaaab
 8001118:	0800ed8c 	.word	0x0800ed8c

0800111c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d11f      	bne.n	8001176 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d856      	bhi.n	80011ea <DMA_CheckFifoParam+0xce>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <DMA_CheckFifoParam+0x28>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001155 	.word	0x08001155
 8001148:	08001167 	.word	0x08001167
 800114c:	08001155 	.word	0x08001155
 8001150:	080011eb 	.word	0x080011eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d046      	beq.n	80011ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001164:	e043      	b.n	80011ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800116e:	d140      	bne.n	80011f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001174:	e03d      	b.n	80011f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800117e:	d121      	bne.n	80011c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d837      	bhi.n	80011f6 <DMA_CheckFifoParam+0xda>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <DMA_CheckFifoParam+0x70>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	0800119d 	.word	0x0800119d
 8001190:	080011a3 	.word	0x080011a3
 8001194:	0800119d 	.word	0x0800119d
 8001198:	080011b5 	.word	0x080011b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
      break;
 80011a0:	e030      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011b2:	e022      	b.n	80011fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011bc:	d11f      	bne.n	80011fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80011c2:	e01c      	b.n	80011fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d903      	bls.n	80011d2 <DMA_CheckFifoParam+0xb6>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d003      	beq.n	80011d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80011d0:	e018      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
      break;
 80011d6:	e015      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00e      	beq.n	8001202 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
      break;
 80011e8:	e00b      	b.n	8001202 <DMA_CheckFifoParam+0xe6>
      break;
 80011ea:	bf00      	nop
 80011ec:	e00a      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      break;
 80011ee:	bf00      	nop
 80011f0:	e008      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      break;
 80011f2:	bf00      	nop
 80011f4:	e006      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      break;
 80011f6:	bf00      	nop
 80011f8:	e004      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      break;
 80011fa:	bf00      	nop
 80011fc:	e002      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      break;   
 80011fe:	bf00      	nop
 8001200:	e000      	b.n	8001204 <DMA_CheckFifoParam+0xe8>
      break;
 8001202:	bf00      	nop
    }
  } 
  
  return status; 
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	e177      	b.n	8001520 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8166 	bne.w	800151a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	2b02      	cmp	r3, #2
 8001264:	d130      	bne.n	80012c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 0201 	and.w	r2, r3, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d017      	beq.n	8001304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d123      	bne.n	8001358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	69b9      	ldr	r1, [r7, #24]
 8001354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80c0 	beq.w	800151a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b66      	ldr	r3, [pc, #408]	; (8001538 <HAL_GPIO_Init+0x324>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_GPIO_Init+0x324>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_GPIO_Init+0x324>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b6:	4a61      	ldr	r2, [pc, #388]	; (800153c <HAL_GPIO_Init+0x328>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_GPIO_Init+0x32c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d037      	beq.n	8001452 <HAL_GPIO_Init+0x23e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a57      	ldr	r2, [pc, #348]	; (8001544 <HAL_GPIO_Init+0x330>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d031      	beq.n	800144e <HAL_GPIO_Init+0x23a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a56      	ldr	r2, [pc, #344]	; (8001548 <HAL_GPIO_Init+0x334>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d02b      	beq.n	800144a <HAL_GPIO_Init+0x236>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a55      	ldr	r2, [pc, #340]	; (800154c <HAL_GPIO_Init+0x338>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d025      	beq.n	8001446 <HAL_GPIO_Init+0x232>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a54      	ldr	r2, [pc, #336]	; (8001550 <HAL_GPIO_Init+0x33c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01f      	beq.n	8001442 <HAL_GPIO_Init+0x22e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a53      	ldr	r2, [pc, #332]	; (8001554 <HAL_GPIO_Init+0x340>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x22a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a52      	ldr	r2, [pc, #328]	; (8001558 <HAL_GPIO_Init+0x344>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x226>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a51      	ldr	r2, [pc, #324]	; (800155c <HAL_GPIO_Init+0x348>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x222>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a50      	ldr	r2, [pc, #320]	; (8001560 <HAL_GPIO_Init+0x34c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x21e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <HAL_GPIO_Init+0x350>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x21a>
 800142a:	2309      	movs	r3, #9
 800142c:	e012      	b.n	8001454 <HAL_GPIO_Init+0x240>
 800142e:	230a      	movs	r3, #10
 8001430:	e010      	b.n	8001454 <HAL_GPIO_Init+0x240>
 8001432:	2308      	movs	r3, #8
 8001434:	e00e      	b.n	8001454 <HAL_GPIO_Init+0x240>
 8001436:	2307      	movs	r3, #7
 8001438:	e00c      	b.n	8001454 <HAL_GPIO_Init+0x240>
 800143a:	2306      	movs	r3, #6
 800143c:	e00a      	b.n	8001454 <HAL_GPIO_Init+0x240>
 800143e:	2305      	movs	r3, #5
 8001440:	e008      	b.n	8001454 <HAL_GPIO_Init+0x240>
 8001442:	2304      	movs	r3, #4
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x240>
 8001446:	2303      	movs	r3, #3
 8001448:	e004      	b.n	8001454 <HAL_GPIO_Init+0x240>
 800144a:	2302      	movs	r3, #2
 800144c:	e002      	b.n	8001454 <HAL_GPIO_Init+0x240>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x240>
 8001452:	2300      	movs	r3, #0
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	f002 0203 	and.w	r2, r2, #3
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	4093      	lsls	r3, r2
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001464:	4935      	ldr	r1, [pc, #212]	; (800153c <HAL_GPIO_Init+0x328>)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_GPIO_Init+0x354>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001496:	4a34      	ldr	r2, [pc, #208]	; (8001568 <HAL_GPIO_Init+0x354>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_GPIO_Init+0x354>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c0:	4a29      	ldr	r2, [pc, #164]	; (8001568 <HAL_GPIO_Init+0x354>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_GPIO_Init+0x354>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <HAL_GPIO_Init+0x354>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_GPIO_Init+0x354>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_GPIO_Init+0x354>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	f67f ae84 	bls.w	8001230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40013800 	.word	0x40013800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020400 	.word	0x40020400
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40021000 	.word	0x40021000
 8001554:	40021400 	.word	0x40021400
 8001558:	40021800 	.word	0x40021800
 800155c:	40021c00 	.word	0x40021c00
 8001560:	40022000 	.word	0x40022000
 8001564:	40022400 	.word	0x40022400
 8001568:	40013c00 	.word	0x40013c00

0800156c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_RCC_GetHCLKFreq+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000010 	.word	0x20000010

08001584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001588:	f7ff fff0 	bl	800156c <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	4903      	ldr	r1, [pc, #12]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	0800eea8 	.word	0x0800eea8

080015ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	220f      	movs	r2, #15
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_RCC_GetClockConfig+0x60>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 020f 	and.w	r2, r3, #15
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e022      	b.n	8001668 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d105      	bne.n	800163a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f00b fa09 	bl	800ca4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2203      	movs	r2, #3
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f814 	bl	8001670 <HAL_SD_InitCard>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00a      	b.n	8001668 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af04      	add	r7, sp, #16
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800168c:	2376      	movs	r3, #118	; 0x76
 800168e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681d      	ldr	r5, [r3, #0]
 8001694:	466c      	mov	r4, sp
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800169e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a8:	4628      	mov	r0, r5
 80016aa:	f001 ff87 	bl	80035bc <SDIO_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80016b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e04f      	b.n	8001760 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_SD_InitCard+0xf8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 ffbf 	bl	800364e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_SD_InitCard+0xf8>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80016d6:	2002      	movs	r0, #2
 80016d8:	f7ff f8f8 	bl	80008cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 ff6b 	bl	80025b8 <SD_PowerON>
 80016e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e02e      	b.n	8001760 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fe8a 	bl	800241c <SD_InitCard>
 8001708:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00b      	beq.n	8001728 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e01b      	b.n	8001760 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	4618      	mov	r0, r3
 8001732:	f002 f81e 	bl	8003772 <SDMMC_CmdBlockLength>
 8001736:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00f      	beq.n	800175e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_SD_InitCard+0xfc>)
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	422580a0 	.word	0x422580a0
 800176c:	004005ff 	.word	0x004005ff

08001770 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0c0      	b.n	800191a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	f040 80b9 	bne.w	8001918 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80017ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	441a      	add	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d907      	bls.n	80017ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0a7      	b.n	800191a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2203      	movs	r2, #3
 80017ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80017f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80017fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	2200      	movs	r2, #0
 8001804:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3380      	adds	r3, #128	; 0x80
 8001834:	4619      	mov	r1, r3
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	f7ff f9f9 	bl	8000c34 <HAL_DMA_Start_IT>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d017      	beq.n	8001878 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a33      	ldr	r2, [pc, #204]	; (800192c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800185e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001864:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e050      	b.n	800191a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	2b01      	cmp	r3, #1
 8001884:	d002      	beq.n	800188c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8001886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001890:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	025b      	lsls	r3, r3, #9
 8001896:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001898:	2390      	movs	r3, #144	; 0x90
 800189a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800189c:	2302      	movs	r3, #2
 800189e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80018a4:	2301      	movs	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f107 0210 	add.w	r2, r7, #16
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 ff31 	bl	800371a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d90a      	bls.n	80018d4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2282      	movs	r2, #130	; 0x82
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 ff95 	bl	80037fa <SDMMC_CmdReadMultiBlock>
 80018d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80018d2:	e009      	b.n	80018e8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2281      	movs	r2, #129	; 0x81
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 ff68 	bl	80037b6 <SDMMC_CmdReadSingleBlock>
 80018e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	431a      	orrs	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e002      	b.n	800191a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3730      	adds	r7, #48	; 0x30
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	0800222b 	.word	0x0800222b
 8001928:	0800229d 	.word	0x0800229d
 800192c:	004005ff 	.word	0x004005ff
 8001930:	4225858c 	.word	0x4225858c

08001934 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0c5      	b.n	8001ae8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 80be 	bne.w	8001ae6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	441a      	add	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	429a      	cmp	r2, r3
 800197c:	d907      	bls.n	800198e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0ac      	b.n	8001ae8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80019b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019be:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80019c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c6:	2200      	movs	r2, #0
 80019c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d002      	beq.n	80019d8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d90a      	bls.n	80019f4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	22a0      	movs	r2, #160	; 0xa0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 ff49 	bl	8003882 <SDMMC_CmdWriteMultiBlock>
 80019f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80019f2:	e009      	b.n	8001a08 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2290      	movs	r2, #144	; 0x90
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 ff1c 	bl	800383e <SDMMC_CmdWriteSingleBlock>
 8001a06:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a39      	ldr	r2, [pc, #228]	; (8001af8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e059      	b.n	8001ae8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3380      	adds	r3, #128	; 0x80
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	025b      	lsls	r3, r3, #9
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	f7ff f8df 	bl	8000c34 <HAL_DMA_Start_IT>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01c      	beq.n	8001ab6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8001a8a:	f023 0302 	bic.w	r3, r3, #2
 8001a8e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e018      	b.n	8001ae8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001ac2:	2390      	movs	r3, #144	; 0x90
 8001ac4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f107 0210 	add.w	r2, r7, #16
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fe1c 	bl	800371a <SDIO_ConfigData>

      return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	08002201 	.word	0x08002201
 8001af4:	0800229d 	.word	0x0800229d
 8001af8:	004005ff 	.word	0x004005ff
 8001afc:	4225858c 	.word	0x4225858c

08001b00 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_SD_IRQHandler+0x2e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fdfc 	bl	8002724 <SD_Read_IT>
 8001b2c:	e165      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 808f 	beq.w	8001c5c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001b56:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001b5a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d039      	beq.n	8001bea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <HAL_SD_IRQHandler+0x8a>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d011      	beq.n	8001bae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fe9a 	bl	80038c8 <SDMMC_CmdStopTransfer>
 8001b94:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f92f 	bl	8001e0c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f240 523a 	movw	r2, #1338	; 0x53a
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <HAL_SD_IRQHandler+0xda>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f002 fe1c 	bl	8004818 <HAL_SD_RxCpltCallback>
 8001be0:	e10b      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f002 fe0e 	bl	8004804 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001be8:	e107      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8102 	beq.w	8001dfa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d011      	beq.n	8001c24 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fe5f 	bl	80038c8 <SDMMC_CmdStopTransfer>
 8001c0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8f4 	bl	8001e0c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 80e5 	bne.w	8001dfa <HAL_SD_IRQHandler+0x2fa>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 80df 	bne.w	8001dfa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0208 	bic.w	r2, r2, #8
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f002 fdd5 	bl	8004804 <HAL_SD_TxCpltCallback>
}
 8001c5a:	e0ce      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_SD_IRQHandler+0x17c>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fda6 	bl	80027c6 <SD_Write_IT>
 8001c7a:	e0be      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c82:	f240 233a 	movw	r3, #570	; 0x23a
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80b6 	beq.w	8001dfa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	f043 0202 	orr.w	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	f043 0208 	orr.w	r2, r3, #8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cee:	f043 0210 	orr.w	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	f043 0208 	orr.w	r2, r3, #8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f240 723a 	movw	r2, #1850	; 0x73a
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8001d28:	f023 0302 	bic.w	r3, r3, #2
 8001d2c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fdc8 	bl	80038c8 <SDMMC_CmdStopTransfer>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00a      	beq.n	8001d64 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f855 	bl	8001e0c <HAL_SD_ErrorCallback>
}
 8001d62:	e04a      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d045      	beq.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <HAL_SD_IRQHandler+0x282>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d011      	beq.n	8001da6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_SD_IRQHandler+0x304>)
 8001d88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ffa8 	bl	8000ce4 <HAL_DMA_Abort_IT>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02f      	beq.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 face 	bl	8002340 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001da4:	e029      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d104      	bne.n	8001dba <HAL_SD_IRQHandler+0x2ba>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d011      	beq.n	8001dde <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_SD_IRQHandler+0x308>)
 8001dc0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ff8c 	bl	8000ce4 <HAL_DMA_Abort_IT>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d013      	beq.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fae9 	bl	80023ae <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001ddc:	e00d      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f002 fcfc 	bl	80047f0 <HAL_SD_AbortCallback>
}
 8001df8:	e7ff      	b.n	8001dfa <HAL_SD_IRQHandler+0x2fa>
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	08002341 	.word	0x08002341
 8001e08:	080023af 	.word	0x080023af

08001e0c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e2e:	0f9b      	lsrs	r3, r3, #30
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e4c:	0e1b      	lsrs	r3, r3, #24
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e5e:	0c1b      	lsrs	r3, r3, #16
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e80:	0d1b      	lsrs	r3, r3, #20
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e8c:	0c1b      	lsrs	r3, r3, #16
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e9e:	0bdb      	lsrs	r3, r3, #15
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb0:	0b9b      	lsrs	r3, r3, #14
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec2:	0b5b      	lsrs	r3, r3, #13
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed4:	0b1b      	lsrs	r3, r3, #12
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d163      	bne.n	8001fb8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef4:	009a      	lsls	r2, r3, #2
 8001ef6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001f00:	0f92      	lsrs	r2, r2, #30
 8001f02:	431a      	orrs	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f0c:	0edb      	lsrs	r3, r3, #27
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1e:	0e1b      	lsrs	r3, r3, #24
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f42:	0c9b      	lsrs	r3, r3, #18
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f54:	0bdb      	lsrs	r3, r3, #15
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	7e1b      	ldrb	r3, [r3, #24]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	3302      	adds	r3, #2
 8001f78:	2201      	movs	r2, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f82:	fb03 f202 	mul.w	r2, r3, r2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	7a1b      	ldrb	r3, [r3, #8]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001fa4:	0a52      	lsrs	r2, r2, #9
 8001fa6:	fb03 f202 	mul.w	r2, r3, r2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb4:	661a      	str	r2, [r3, #96]	; 0x60
 8001fb6:	e031      	b.n	800201c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d11d      	bne.n	8001ffc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fce:	0c1b      	lsrs	r3, r3, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	029a      	lsls	r2, r3, #10
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	661a      	str	r2, [r3, #96]	; 0x60
 8001ffa:	e00f      	b.n	800201c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_SD_GetCardCSD+0x344>)
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e09d      	b.n	8002158 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002020:	0b9b      	lsrs	r3, r3, #14
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002032:	09db      	lsrs	r3, r3, #7
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800203a:	b2da      	uxtb	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204a:	b2da      	uxtb	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	0fdb      	lsrs	r3, r3, #31
 8002056:	b2da      	uxtb	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	0f5b      	lsrs	r3, r3, #29
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	b2da      	uxtb	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	b2da      	uxtb	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	0d9b      	lsrs	r3, r3, #22
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	0d5b      	lsrs	r3, r3, #21
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	0bdb      	lsrs	r3, r3, #15
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	0b9b      	lsrs	r3, r3, #14
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	0b1b      	lsrs	r3, r3, #12
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	0a9b      	lsrs	r3, r3, #10
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	b2da      	uxtb	r2, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	b2da      	uxtb	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002146:	b2da      	uxtb	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	004005ff 	.word	0x004005ff

08002168 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa7e 	bl	80026d4 <SD_SendStatus>
 80021d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	0a5b      	lsrs	r3, r3, #9
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80021f6:	693b      	ldr	r3, [r7, #16]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800221c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	2b82      	cmp	r3, #130	; 0x82
 800223e:	d111      	bne.n	8002264 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fb3f 	bl	80038c8 <SDMMC_CmdStopTransfer>
 800224a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff fdd4 	bl	8001e0c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0208 	bic.w	r2, r2, #8
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f240 523a 	movw	r2, #1338	; 0x53a
 800227c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f002 fac3 	bl	8004818 <HAL_SD_RxCpltCallback>
#endif
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fec6 	bl	800103c <HAL_DMA_GetError>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d03e      	beq.n	8002334 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d002      	beq.n	80022d2 <SD_DMAError+0x36>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d12d      	bne.n	800232e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a19      	ldr	r2, [pc, #100]	; (800233c <SD_DMAError+0xa0>)
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff62 	bl	80021c0 <HAL_SD_GetCardState>
 80022fc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b06      	cmp	r3, #6
 8002302:	d002      	beq.n	800230a <SD_DMAError+0x6e>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d10a      	bne.n	8002320 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f001 fada 	bl	80038c8 <SDMMC_CmdStopTransfer>
 8002314:	4602      	mov	r2, r0
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	431a      	orrs	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff fd6c 	bl	8001e0c <HAL_SD_ErrorCallback>
#endif
  }
}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	004005ff 	.word	0x004005ff

08002340 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f240 523a 	movw	r2, #1338	; 0x53a
 8002356:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff ff31 	bl	80021c0 <HAL_SD_GetCardState>
 800235e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d002      	beq.n	800237a <SD_DMATxAbort+0x3a>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b05      	cmp	r3, #5
 8002378:	d10a      	bne.n	8002390 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f001 faa2 	bl	80038c8 <SDMMC_CmdStopTransfer>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f002 fa29 	bl	80047f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800239e:	e002      	b.n	80023a6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7ff fd33 	bl	8001e0c <HAL_SD_ErrorCallback>
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fefa 	bl	80021c0 <HAL_SD_GetCardState>
 80023cc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d002      	beq.n	80023e8 <SD_DMARxAbort+0x3a>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10a      	bne.n	80023fe <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 fa6b 	bl	80038c8 <SDMMC_CmdStopTransfer>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f002 f9f2 	bl	80047f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800240c:	e002      	b.n	8002414 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff fcfc 	bl	8001e0c <HAL_SD_ErrorCallback>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b094      	sub	sp, #80	; 0x50
 8002420:	af04      	add	r7, sp, #16
 8002422:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002424:	2301      	movs	r3, #1
 8002426:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f001 f91c 	bl	800366a <SDIO_GetPowerState>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002438:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800243c:	e0b8      	b.n	80025b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	2b03      	cmp	r3, #3
 8002444:	d02f      	beq.n	80024a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fb03 	bl	8003a56 <SDMMC_CmdSendCID>
 8002450:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <SD_InitCard+0x40>
    {
      return errorstate;
 8002458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245a:	e0a9      	b.n	80025b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f001 f946 	bl	80036f4 <SDIO_GetResponse>
 8002468:	4602      	mov	r2, r0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2104      	movs	r1, #4
 8002474:	4618      	mov	r0, r3
 8002476:	f001 f93d 	bl	80036f4 <SDIO_GetResponse>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2108      	movs	r1, #8
 8002486:	4618      	mov	r0, r3
 8002488:	f001 f934 	bl	80036f4 <SDIO_GetResponse>
 800248c:	4602      	mov	r2, r0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	210c      	movs	r1, #12
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f92b 	bl	80036f4 <SDIO_GetResponse>
 800249e:	4602      	mov	r2, r0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d00d      	beq.n	80024ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f107 020e 	add.w	r2, r7, #14
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 fb09 	bl	8003ad0 <SDMMC_CmdSetRelAdd>
 80024be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SD_InitCard+0xae>
    {
      return errorstate;
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	e072      	b.n	80025b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d036      	beq.n	8002540 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80024d2:	89fb      	ldrh	r3, [r7, #14]
 80024d4:	461a      	mov	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f001 fad3 	bl	8003a92 <SDMMC_CmdSendCSD>
 80024ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80024ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80024f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f6:	e05b      	b.n	80025b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 f8f8 	bl	80036f4 <SDIO_GetResponse>
 8002504:	4602      	mov	r2, r0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2104      	movs	r1, #4
 8002510:	4618      	mov	r0, r3
 8002512:	f001 f8ef 	bl	80036f4 <SDIO_GetResponse>
 8002516:	4602      	mov	r2, r0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2108      	movs	r1, #8
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f8e6 	bl	80036f4 <SDIO_GetResponse>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	210c      	movs	r1, #12
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f8dd 	bl	80036f4 <SDIO_GetResponse>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2104      	movs	r1, #4
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f8d4 	bl	80036f4 <SDIO_GetResponse>
 800254c:	4603      	mov	r3, r0
 800254e:	0d1a      	lsrs	r2, r3, #20
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fc60 	bl	8001e20 <HAL_SD_GetCardCSD>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002566:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800256a:	e021      	b.n	80025b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	2200      	movs	r2, #0
 8002578:	461c      	mov	r4, r3
 800257a:	4615      	mov	r5, r2
 800257c:	4622      	mov	r2, r4
 800257e:	462b      	mov	r3, r5
 8002580:	4608      	mov	r0, r1
 8002582:	f001 f9c3 	bl	800390c <SDMMC_CmdSelDesel>
 8002586:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <SD_InitCard+0x176>
  {
    return errorstate;
 800258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002590:	e00e      	b.n	80025b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681d      	ldr	r5, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	466c      	mov	r4, sp
 800259a:	f103 0210 	add.w	r2, r3, #16
 800259e:	ca07      	ldmia	r2, {r0, r1, r2}
 80025a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025a4:	3304      	adds	r3, #4
 80025a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a8:	4628      	mov	r0, r5
 80025aa:	f001 f807 	bl	80035bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3740      	adds	r7, #64	; 0x40
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bdb0      	pop	{r4, r5, r7, pc}

080025b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f9be 	bl	8003952 <SDMMC_CmdGoIdleState>
 80025d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	e072      	b.n	80026c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 f9d1 	bl	800398e <SDMMC_CmdOperCond>
 80025ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 f9a7 	bl	8003952 <SDMMC_CmdGoIdleState>
 8002604:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <SD_PowerON+0x5e>
    {
      return errorstate;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	e05b      	b.n	80026c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	2b01      	cmp	r3, #1
 800261c:	d137      	bne.n	800268e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f9d1 	bl	80039cc <SDMMC_CmdAppCommand>
 800262a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d02d      	beq.n	800268e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002632:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002636:	e047      	b.n	80026c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f9c4 	bl	80039cc <SDMMC_CmdAppCommand>
 8002644:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <SD_PowerON+0x98>
    {
      return errorstate;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	e03b      	b.n	80026c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	491e      	ldr	r1, [pc, #120]	; (80026d0 <SD_PowerON+0x118>)
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f9da 	bl	8003a10 <SDMMC_CmdAppOperCommand>
 800265c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002668:	e02e      	b.n	80026c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f001 f83f 	bl	80036f4 <SDIO_GetResponse>
 8002676:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	0fdb      	lsrs	r3, r3, #31
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <SD_PowerON+0xcc>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <SD_PowerON+0xce>
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]

    count++;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3301      	adds	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002694:	4293      	cmp	r3, r2
 8002696:	d802      	bhi.n	800269e <SD_PowerON+0xe6>
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0cc      	beq.n	8002638 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d902      	bls.n	80026ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80026a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ac:	e00c      	b.n	80026c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
 80026be:	e002      	b.n	80026c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	c1100000 	.word	0xc1100000

080026d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80026e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026e8:	e018      	b.n	800271c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f001 fa0b 	bl	8003b12 <SDMMC_CmdSendStatus>
 80026fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	e009      	b.n	800271c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fff0 	bl	80036f4 <SDIO_GetResponse>
 8002714:	4602      	mov	r2, r0
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d03f      	beq.n	80027be <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e033      	b.n	80027ac <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 ff62 	bl	8003612 <SDIO_ReadFIFO>
 800274e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	3b01      	subs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3301      	adds	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	3b01      	subs	r3, #1
 8002778:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	3b01      	subs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0e1b      	lsrs	r3, r3, #24
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	701a      	strb	r2, [r3, #0]
      tmp++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b07      	cmp	r3, #7
 80027b0:	d9c8      	bls.n	8002744 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d043      	beq.n	8002868 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e037      	b.n	8002856 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	021a      	lsls	r2, r3, #8
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4313      	orrs	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	3b01      	subs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	3b01      	subs	r3, #1
 8002826:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	061a      	lsls	r2, r3, #24
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4313      	orrs	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	3b01      	subs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f107 0208 	add.w	r2, r7, #8
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f000 feee 	bl	800362c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b07      	cmp	r3, #7
 800285a:	d9c4      	bls.n	80027e6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002868:	bf00      	nop
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f839 	bl	800290e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 f9d8 	bl	8002c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e04e      	b.n	80029da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d022      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002966:	d01d      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_TIM_Base_Start_IT+0xc8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d018      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00e      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_TIM_Base_Start_IT+0xdc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d111      	bne.n	80029c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d010      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c6:	e007      	b.n	80029d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40010400 	.word	0x40010400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40001800 	.word	0x40001800

08002a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0202 	mvn.w	r2, #2
 8002a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8ee 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8e0 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8f1 	bl	8002c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0204 	mvn.w	r2, #4
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8c4 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8b6 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8c7 	bl	8002c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0208 	mvn.w	r2, #8
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2204      	movs	r2, #4
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f89a 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f88c 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f89d 	bl	8002c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0210 	mvn.w	r2, #16
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2208      	movs	r2, #8
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f870 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f862 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f873 	bl	8002c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10e      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0201 	mvn.w	r2, #1
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f00a feaa 	bl	800d8dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d10e      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f902 	bl	8002db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f838 	bl	8002c50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0220 	mvn.w	r2, #32
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8cc 	bl	8002da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <TIM_Base_SetConfig+0x114>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d00f      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3d      	ldr	r2, [pc, #244]	; (8002d7c <TIM_Base_SetConfig+0x118>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3c      	ldr	r2, [pc, #240]	; (8002d80 <TIM_Base_SetConfig+0x11c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <TIM_Base_SetConfig+0x120>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <TIM_Base_SetConfig+0x124>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2f      	ldr	r2, [pc, #188]	; (8002d78 <TIM_Base_SetConfig+0x114>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d02b      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d027      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <TIM_Base_SetConfig+0x118>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d023      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <TIM_Base_SetConfig+0x11c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01f      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <TIM_Base_SetConfig+0x120>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01b      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <TIM_Base_SetConfig+0x124>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d017      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a28      	ldr	r2, [pc, #160]	; (8002d8c <TIM_Base_SetConfig+0x128>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <TIM_Base_SetConfig+0x12c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00f      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <TIM_Base_SetConfig+0x130>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a25      	ldr	r2, [pc, #148]	; (8002d98 <TIM_Base_SetConfig+0x134>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <TIM_Base_SetConfig+0x138>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <TIM_Base_SetConfig+0x13c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d108      	bne.n	8002d28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <TIM_Base_SetConfig+0x114>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <TIM_Base_SetConfig+0x124>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d103      	bne.n	8002d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	615a      	str	r2, [r3, #20]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40000c00 	.word	0x40000c00
 8002d88:	40010400 	.word	0x40010400
 8002d8c:	40014000 	.word	0x40014000
 8002d90:	40014400 	.word	0x40014400
 8002d94:	40014800 	.word	0x40014800
 8002d98:	40001800 	.word	0x40001800
 8002d9c:	40001c00 	.word	0x40001c00
 8002da0:	40002000 	.word	0x40002000

08002da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_GPIO_SetPinMode>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2103      	movs	r1, #3
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	61bb      	str	r3, [r7, #24]
  return result;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_GPIO_SetPinOutputType>:
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_GPIO_SetPinSpeed>:
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b089      	sub	sp, #36	; 0x24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	613b      	str	r3, [r7, #16]
  return result;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2103      	movs	r1, #3
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	61bb      	str	r3, [r7, #24]
  return result;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	3724      	adds	r7, #36	; 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_GPIO_SetPinPull>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	613b      	str	r3, [r7, #16]
  return result;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2103      	movs	r1, #3
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	60da      	str	r2, [r3, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_GPIO_SetAFPin_0_7>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b089      	sub	sp, #36	; 0x24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	613b      	str	r3, [r7, #16]
  return result;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	210f      	movs	r1, #15
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	401a      	ands	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	61bb      	str	r3, [r7, #24]
  return result;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	3724      	adds	r7, #36	; 0x24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_GPIO_SetAFPin_8_15>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	613b      	str	r3, [r7, #16]
  return result;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	210f      	movs	r1, #15
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	61bb      	str	r3, [r7, #24]
  return result;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002fca:	bf00      	nop
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b088      	sub	sp, #32
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	613b      	str	r3, [r7, #16]
  return result;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003000:	e050      	b.n	80030a4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2101      	movs	r1, #1
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d042      	beq.n	800309e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d003      	beq.n	8003028 <LL_GPIO_Init+0x52>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d10d      	bne.n	8003044 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	461a      	mov	r2, r3
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff12 	bl	8002e5a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	461a      	mov	r2, r3
 800303c:	69b9      	ldr	r1, [r7, #24]
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fef3 	bl	8002e2a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	461a      	mov	r2, r3
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff33 	bl	8002eb8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d11a      	bne.n	8003090 <LL_GPIO_Init+0xba>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	60bb      	str	r3, [r7, #8]
  return result;
 8003066:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b07      	cmp	r3, #7
 8003070:	d807      	bhi.n	8003082 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	461a      	mov	r2, r3
 8003078:	69b9      	ldr	r1, [r7, #24]
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff4b 	bl	8002f16 <LL_GPIO_SetAFPin_0_7>
 8003080:	e006      	b.n	8003090 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	461a      	mov	r2, r3
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff72 	bl	8002f74 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	461a      	mov	r2, r3
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fe97 	bl	8002dcc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1a7      	bne.n	8003002 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 0201 	bic.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f023 021f 	bic.w	r2, r3, #31
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	430b      	orrs	r3, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800313c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	430a      	orrs	r2, r1
 8003146:	431a      	orrs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4a42      	ldr	r2, [pc, #264]	; (800327c <LL_I2C_ConfigSpeed+0x124>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	493a      	ldr	r1, [pc, #232]	; (8003280 <LL_I2C_ConfigSpeed+0x128>)
 8003196:	428b      	cmp	r3, r1
 8003198:	d802      	bhi.n	80031a0 <LL_I2C_ConfigSpeed+0x48>
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3301      	adds	r3, #1
 800319e:	e009      	b.n	80031b4 <LL_I2C_ConfigSpeed+0x5c>
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4936      	ldr	r1, [pc, #216]	; (8003284 <LL_I2C_ConfigSpeed+0x12c>)
 80031ac:	fba1 1303 	umull	r1, r3, r1, r3
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	3301      	adds	r3, #1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <LL_I2C_ConfigSpeed+0x128>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d939      	bls.n	8003236 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d117      	bne.n	80031f8 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f0:	e01d      	b.n	800322e <LL_I2C_ConfigSpeed+0xd6>
 80031f2:	f248 0301 	movw	r3, #32769	; 0x8001
 80031f6:	e01a      	b.n	800322e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009a      	lsls	r2, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003228:	e001      	b.n	800322e <LL_I2C_ConfigSpeed+0xd6>
 800322a:	f248 0301 	movw	r3, #32769	; 0x8001
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e011      	b.n	800325a <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003244:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	e000      	b.n	8003258 <LL_I2C_ConfigSpeed+0x100>
 8003256:	2304      	movs	r3, #4
 8003258:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003262:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	61da      	str	r2, [r3, #28]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	431bde83 	.word	0x431bde83
 8003280:	000186a0 	.word	0x000186a0
 8003284:	10624dd3 	.word	0x10624dd3

08003288 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 021a 	bic.w	r2, r3, #26
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fefc 	bl	80030dc <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80032e4:	f107 0308 	add.w	r3, r7, #8
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f89d 	bl	8003428 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68d9      	ldr	r1, [r3, #12]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	461a      	mov	r2, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff feff 	bl	80030fc <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80032fe:	6939      	ldr	r1, [r7, #16]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff25 	bl	8003158 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6959      	ldr	r1, [r3, #20]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	461a      	mov	r2, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff05 	bl	8003128 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffaf 	bl	8003288 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fec6 	bl	80030bc <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffb9 	bl	80032ae <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <LL_RCC_GetSysClkSource+0x18>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 030c 	and.w	r3, r3, #12
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <LL_RCC_GetAHBPrescaler+0x18>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800

08003380 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <LL_RCC_PLL_GetMainSource+0x18>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800

080033d4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <LL_RCC_PLL_GetN+0x18>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40023800 	.word	0x40023800

080033f0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <LL_RCC_PLL_GetP+0x18>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <LL_RCC_PLL_GetDivider+0x18>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003430:	f000 f820 	bl	8003474 <RCC_GetSystemClockFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f840 	bl	80034c4 <RCC_GetHCLKClockFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f84e 	bl	80034f0 <RCC_GetPCLK1ClockFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f85a 	bl	8003518 <RCC_GetPCLK2ClockFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60da      	str	r2, [r3, #12]
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800347e:	f7ff ff63 	bl	8003348 <LL_RCC_GetSysClkSource>
 8003482:	4603      	mov	r3, r0
 8003484:	2b08      	cmp	r3, #8
 8003486:	d00c      	beq.n	80034a2 <RCC_GetSystemClockFreq+0x2e>
 8003488:	2b08      	cmp	r3, #8
 800348a:	d80f      	bhi.n	80034ac <RCC_GetSystemClockFreq+0x38>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <RCC_GetSystemClockFreq+0x22>
 8003490:	2b04      	cmp	r3, #4
 8003492:	d003      	beq.n	800349c <RCC_GetSystemClockFreq+0x28>
 8003494:	e00a      	b.n	80034ac <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <RCC_GetSystemClockFreq+0x48>)
 8003498:	607b      	str	r3, [r7, #4]
      break;
 800349a:	e00a      	b.n	80034b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <RCC_GetSystemClockFreq+0x4c>)
 800349e:	607b      	str	r3, [r7, #4]
      break;
 80034a0:	e007      	b.n	80034b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80034a2:	2008      	movs	r0, #8
 80034a4:	f000 f84c 	bl	8003540 <RCC_PLL_GetFreqDomain_SYS>
 80034a8:	6078      	str	r0, [r7, #4]
      break;
 80034aa:	e002      	b.n	80034b2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <RCC_GetSystemClockFreq+0x48>)
 80034ae:	607b      	str	r3, [r7, #4]
      break;
 80034b0:	bf00      	nop
  }

  return frequency;
 80034b2:	687b      	ldr	r3, [r7, #4]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	007a1200 	.word	0x007a1200

080034c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80034cc:	f7ff ff4a 	bl	8003364 <LL_RCC_GetAHBPrescaler>
 80034d0:	4603      	mov	r3, r0
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <RCC_GetHCLKClockFreq+0x28>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	40d3      	lsrs	r3, r2
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	0800ee98 	.word	0x0800ee98

080034f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80034f8:	f7ff ff42 	bl	8003380 <LL_RCC_GetAPB1Prescaler>
 80034fc:	4603      	mov	r3, r0
 80034fe:	0a9b      	lsrs	r3, r3, #10
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <RCC_GetPCLK1ClockFreq+0x24>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	40d3      	lsrs	r3, r2
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	0800eea8 	.word	0x0800eea8

08003518 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003520:	f7ff ff3c 	bl	800339c <LL_RCC_GetAPB2Prescaler>
 8003524:	4603      	mov	r3, r0
 8003526:	0b5b      	lsrs	r3, r3, #13
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <RCC_GetPCLK2ClockFreq+0x24>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	40d3      	lsrs	r3, r2
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	0800eea8 	.word	0x0800eea8

08003540 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003554:	f7ff ff30 	bl	80033b8 <LL_RCC_PLL_GetMainSource>
 8003558:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003566:	d003      	beq.n	8003570 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003568:	e005      	b.n	8003576 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800356c:	617b      	str	r3, [r7, #20]
      break;
 800356e:	e005      	b.n	800357c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003572:	617b      	str	r3, [r7, #20]
      break;
 8003574:	e002      	b.n	800357c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003578:	617b      	str	r3, [r7, #20]
      break;
 800357a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b08      	cmp	r3, #8
 8003580:	d113      	bne.n	80035aa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003582:	f7ff ff43 	bl	800340c <LL_RCC_PLL_GetDivider>
 8003586:	4602      	mov	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fbb3 f4f2 	udiv	r4, r3, r2
 800358e:	f7ff ff21 	bl	80033d4 <LL_RCC_PLL_GetN>
 8003592:	4603      	mov	r3, r0
 8003594:	fb03 f404 	mul.w	r4, r3, r4
 8003598:	f7ff ff2a 	bl	80033f0 <LL_RCC_PLL_GetP>
 800359c:	4603      	mov	r3, r0
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	3301      	adds	r3, #1
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80035a8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80035aa:	693b      	ldr	r3, [r7, #16]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	00f42400 	.word	0x00f42400
 80035b8:	007a1200 	.word	0x007a1200

080035bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80035bc:	b084      	sub	sp, #16
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	f107 001c 	add.w	r0, r7, #28
 80035ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80035d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80035d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80035d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80035da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80035de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80035e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80035e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80035f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	b004      	add	sp, #16
 8003610:	4770      	bx	lr

08003612 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2203      	movs	r2, #3
 800365a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0303 	and.w	r3, r3, #3
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80036a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80036aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80036b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80036c0:	f023 030f 	bic.w	r3, r3, #15
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	b2db      	uxtb	r3, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3314      	adds	r3, #20
 8003702:	461a      	mov	r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4413      	add	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
}  
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003740:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003746:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800374c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003764:	2300      	movs	r3, #0

}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b088      	sub	sp, #32
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003780:	2310      	movs	r3, #16
 8003782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003784:	2340      	movs	r3, #64	; 0x40
 8003786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800378c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003790:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003792:	f107 0308 	add.w	r3, r7, #8
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff ff74 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	2110      	movs	r1, #16
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f9d7 	bl	8003b58 <SDMMC_GetCmdResp1>
 80037aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037ac:	69fb      	ldr	r3, [r7, #28]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b088      	sub	sp, #32
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80037c4:	2311      	movs	r3, #17
 80037c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037c8:	2340      	movs	r3, #64	; 0x40
 80037ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037d6:	f107 0308 	add.w	r3, r7, #8
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff52 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	2111      	movs	r1, #17
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f9b5 	bl	8003b58 <SDMMC_GetCmdResp1>
 80037ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037f0:	69fb      	ldr	r3, [r7, #28]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b088      	sub	sp, #32
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003808:	2312      	movs	r3, #18
 800380a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800380c:	2340      	movs	r3, #64	; 0x40
 800380e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff30 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	2112      	movs	r1, #18
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f993 	bl	8003b58 <SDMMC_GetCmdResp1>
 8003832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003834:	69fb      	ldr	r3, [r7, #28]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b088      	sub	sp, #32
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800384c:	2318      	movs	r3, #24
 800384e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003850:	2340      	movs	r3, #64	; 0x40
 8003852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff0e 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	2118      	movs	r1, #24
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f971 	bl	8003b58 <SDMMC_GetCmdResp1>
 8003876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003878:	69fb      	ldr	r3, [r7, #28]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003890:	2319      	movs	r3, #25
 8003892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003894:	2340      	movs	r3, #64	; 0x40
 8003896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800389c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff feec 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	2119      	movs	r1, #25
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f94f 	bl	8003b58 <SDMMC_GetCmdResp1>
 80038ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038bc:	69fb      	ldr	r3, [r7, #28]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80038d4:	230c      	movs	r3, #12
 80038d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038d8:	2340      	movs	r3, #64	; 0x40
 80038da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038e6:	f107 0308 	add.w	r3, r7, #8
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff feca 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80038f2:	4a05      	ldr	r2, [pc, #20]	; (8003908 <SDMMC_CmdStopTransfer+0x40>)
 80038f4:	210c      	movs	r1, #12
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f92e 	bl	8003b58 <SDMMC_GetCmdResp1>
 80038fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038fe:	69fb      	ldr	r3, [r7, #28]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	05f5e100 	.word	0x05f5e100

0800390c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800391c:	2307      	movs	r3, #7
 800391e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003920:	2340      	movs	r3, #64	; 0x40
 8003922:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800392c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800392e:	f107 0310 	add.w	r3, r7, #16
 8003932:	4619      	mov	r1, r3
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fea6 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	2107      	movs	r1, #7
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f909 	bl	8003b58 <SDMMC_GetCmdResp1>
 8003946:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800394a:	4618      	mov	r0, r3
 800394c:	3728      	adds	r7, #40	; 0x28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b088      	sub	sp, #32
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800396a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800396e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe85 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fb23 	bl	8003fc8 <SDMMC_GetCmdError>
 8003982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003984:	69fb      	ldr	r3, [r7, #28]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b088      	sub	sp, #32
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003996:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800399a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800399c:	2308      	movs	r3, #8
 800399e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039a0:	2340      	movs	r3, #64	; 0x40
 80039a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fe66 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fab6 	bl	8003f2c <SDMMC_GetCmdResp7>
 80039c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039c2:	69fb      	ldr	r3, [r7, #28]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80039da:	2337      	movs	r3, #55	; 0x37
 80039dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039de:	2340      	movs	r3, #64	; 0x40
 80039e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fe47 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	2137      	movs	r1, #55	; 0x37
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8aa 	bl	8003b58 <SDMMC_GetCmdResp1>
 8003a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a06:	69fb      	ldr	r3, [r7, #28]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003a26:	2329      	movs	r3, #41	; 0x29
 8003a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a2a:	2340      	movs	r3, #64	; 0x40
 8003a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fe21 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f9bd 	bl	8003dc4 <SDMMC_GetCmdResp3>
 8003a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003a62:	2302      	movs	r3, #2
 8003a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a66:	23c0      	movs	r3, #192	; 0xc0
 8003a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a74:	f107 0308 	add.w	r3, r7, #8
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe03 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f957 	bl	8003d34 <SDMMC_GetCmdResp2>
 8003a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a88:	69fb      	ldr	r3, [r7, #28]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b088      	sub	sp, #32
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003aa0:	2309      	movs	r3, #9
 8003aa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003aa4:	23c0      	movs	r3, #192	; 0xc0
 8003aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fde4 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f938 	bl	8003d34 <SDMMC_GetCmdResp2>
 8003ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fdc5 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	2103      	movs	r1, #3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f99d 	bl	8003e40 <SDMMC_GetCmdResp6>
 8003b06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b08:	69fb      	ldr	r3, [r7, #28]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b088      	sub	sp, #32
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003b20:	230d      	movs	r3, #13
 8003b22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b24:	2340      	movs	r3, #64	; 0x40
 8003b26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b32:	f107 0308 	add.w	r3, r7, #8
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fda4 	bl	8003686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	210d      	movs	r1, #13
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f807 	bl	8003b58 <SDMMC_GetCmdResp1>
 8003b4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	460b      	mov	r3, r1
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b66:	4b70      	ldr	r3, [pc, #448]	; (8003d28 <SDMMC_GetCmdResp1+0x1d0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a70      	ldr	r2, [pc, #448]	; (8003d2c <SDMMC_GetCmdResp1+0x1d4>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0a5a      	lsrs	r2, r3, #9
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	1e5a      	subs	r2, r3, #1
 8003b7e:	61fa      	str	r2, [r7, #28]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b88:	e0c9      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ef      	beq.n	8003b7a <SDMMC_GetCmdResp1+0x22>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ea      	bne.n	8003b7a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	e0b1      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0a6      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	22c5      	movs	r2, #197	; 0xc5
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fd7f 	bl	80036da <SDIO_GetCommandResponse>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	7afb      	ldrb	r3, [r7, #11]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d001      	beq.n	8003bea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e099      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003bea:	2100      	movs	r1, #0
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fd81 	bl	80036f4 <SDIO_GetResponse>
 8003bf2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <SDMMC_GetCmdResp1+0x1d8>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e08d      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da02      	bge.n	8003c0e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c0c:	e087      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003c18:	2340      	movs	r3, #64	; 0x40
 8003c1a:	e080      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	e079      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c38:	e071      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c48:	e069      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c58:	e061      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c68:	e059      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c78:	e051      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c88:	e049      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c98:	e041      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca8:	e039      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb8:	e031      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cc8:	e029      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003cd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003cd8:	e021      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ce4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ce8:	e019      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003cf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cf8:	e011      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003d04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d08:	e009      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003d14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003d18:	e001      	b.n	8003d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000010 	.word	0x20000010
 8003d2c:	10624dd3 	.word	0x10624dd3
 8003d30:	fdffe008 	.word	0xfdffe008

08003d34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <SDMMC_GetCmdResp2+0x88>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <SDMMC_GetCmdResp2+0x8c>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0a5b      	lsrs	r3, r3, #9
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	60fa      	str	r2, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d60:	e026      	b.n	8003db0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0ef      	beq.n	8003d52 <SDMMC_GetCmdResp2+0x1e>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ea      	bne.n	8003d52 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	e00e      	b.n	8003db0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e003      	b.n	8003db0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	22c5      	movs	r2, #197	; 0xc5
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000010 	.word	0x20000010
 8003dc0:	10624dd3 	.word	0x10624dd3

08003dc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <SDMMC_GetCmdResp3+0x74>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <SDMMC_GetCmdResp3+0x78>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	0a5b      	lsrs	r3, r3, #9
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	60fa      	str	r2, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003dec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003df0:	e01b      	b.n	8003e2a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0ef      	beq.n	8003de2 <SDMMC_GetCmdResp3+0x1e>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ea      	bne.n	8003de2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e1e:	2304      	movs	r3, #4
 8003e20:	e003      	b.n	8003e2a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	22c5      	movs	r2, #197	; 0xc5
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000010 	.word	0x20000010
 8003e3c:	10624dd3 	.word	0x10624dd3

08003e40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e4e:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <SDMMC_GetCmdResp6+0xe4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a35      	ldr	r2, [pc, #212]	; (8003f28 <SDMMC_GetCmdResp6+0xe8>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	61fa      	str	r2, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e72:	e052      	b.n	8003f1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ef      	beq.n	8003e64 <SDMMC_GetCmdResp6+0x24>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1ea      	bne.n	8003e64 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e03a      	b.n	8003f1a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e02f      	b.n	8003f1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff fc0d 	bl	80036da <SDIO_GetCommandResponse>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d001      	beq.n	8003ece <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e025      	b.n	8003f1a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	22c5      	movs	r2, #197	; 0xc5
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fc0c 	bl	80036f4 <SDIO_GetResponse>
 8003edc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e011      	b.n	8003f1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f04:	e009      	b.n	8003f1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f14:	e001      	b.n	8003f1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000010 	.word	0x20000010
 8003f28:	10624dd3 	.word	0x10624dd3

08003f2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <SDMMC_GetCmdResp7+0x94>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <SDMMC_GetCmdResp7+0x98>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0a5b      	lsrs	r3, r3, #9
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	60fa      	str	r2, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f58:	e02c      	b.n	8003fb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ef      	beq.n	8003f4a <SDMMC_GetCmdResp7+0x1e>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ea      	bne.n	8003f4a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2204      	movs	r2, #4
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f86:	2304      	movs	r3, #4
 8003f88:	e014      	b.n	8003fb4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e009      	b.n	8003fb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003fb2:	2300      	movs	r3, #0
  
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	20000010 	.word	0x20000010
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <SDMMC_GetCmdError+0x50>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a11      	ldr	r2, [pc, #68]	; (800401c <SDMMC_GetCmdError+0x54>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0a5b      	lsrs	r3, r3, #9
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	fb02 f303 	mul.w	r3, r2, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ff4:	e009      	b.n	800400a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f1      	beq.n	8003fe6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	22c5      	movs	r2, #197	; 0xc5
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000010 	.word	0x20000010
 800401c:	10624dd3 	.word	0x10624dd3

08004020 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d101      	bne.n	8004038 <LL_SPI_IsEnabled+0x18>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <LL_SPI_IsEnabled+0x1a>
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ffd3 	bl	8004020 <LL_SPI_IsEnabled>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d139      	bne.n	80040f4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004088:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	6811      	ldr	r1, [r2, #0]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	6852      	ldr	r2, [r2, #4]
 8004094:	4311      	orrs	r1, r2
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	6892      	ldr	r2, [r2, #8]
 800409a:	4311      	orrs	r1, r2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	68d2      	ldr	r2, [r2, #12]
 80040a0:	4311      	orrs	r1, r2
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	6912      	ldr	r2, [r2, #16]
 80040a6:	4311      	orrs	r1, r2
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	6952      	ldr	r2, [r2, #20]
 80040ac:	4311      	orrs	r1, r2
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	6992      	ldr	r2, [r2, #24]
 80040b2:	4311      	orrs	r1, r2
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	69d2      	ldr	r2, [r2, #28]
 80040b8:	4311      	orrs	r1, r2
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	6a12      	ldr	r2, [r2, #32]
 80040be:	430a      	orrs	r2, r1
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f023 0204 	bic.w	r2, r3, #4
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e2:	d105      	bne.n	80040f0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ffab 	bl	8004046 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	61da      	str	r2, [r3, #28]
  return status;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	611a      	str	r2, [r3, #16]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	615a      	str	r2, [r3, #20]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b0c0      	sub	sp, #256	; 0x100
 8004186:	af00      	add	r7, sp, #0
 8004188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800418c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004190:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004194:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	f040 810c 	bne.w	80043bc <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80041a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	1891      	adds	r1, r2, r2
 80041bc:	6639      	str	r1, [r7, #96]	; 0x60
 80041be:	415b      	adcs	r3, r3
 80041c0:	667b      	str	r3, [r7, #100]	; 0x64
 80041c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80041c6:	4621      	mov	r1, r4
 80041c8:	eb12 0801 	adds.w	r8, r2, r1
 80041cc:	4629      	mov	r1, r5
 80041ce:	eb43 0901 	adc.w	r9, r3, r1
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e6:	4690      	mov	r8, r2
 80041e8:	4699      	mov	r9, r3
 80041ea:	4623      	mov	r3, r4
 80041ec:	eb18 0303 	adds.w	r3, r8, r3
 80041f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041f4:	462b      	mov	r3, r5
 80041f6:	eb49 0303 	adc.w	r3, r9, r3
 80041fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004202:	2200      	movs	r2, #0
 8004204:	469a      	mov	sl, r3
 8004206:	4693      	mov	fp, r2
 8004208:	eb1a 030a 	adds.w	r3, sl, sl
 800420c:	65bb      	str	r3, [r7, #88]	; 0x58
 800420e:	eb4b 030b 	adc.w	r3, fp, fp
 8004212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800421c:	f7fc f888 	bl	8000330 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b64      	ldr	r3, [pc, #400]	; (80043b8 <LL_USART_SetBaudRate+0x238>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	b29b      	uxth	r3, r3
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	b29c      	uxth	r4, r3
 8004232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800423c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004240:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	1891      	adds	r1, r2, r2
 800424a:	6539      	str	r1, [r7, #80]	; 0x50
 800424c:	415b      	adcs	r3, r3
 800424e:	657b      	str	r3, [r7, #84]	; 0x54
 8004250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004254:	4641      	mov	r1, r8
 8004256:	1851      	adds	r1, r2, r1
 8004258:	64b9      	str	r1, [r7, #72]	; 0x48
 800425a:	4649      	mov	r1, r9
 800425c:	414b      	adcs	r3, r1
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800426c:	4659      	mov	r1, fp
 800426e:	00cb      	lsls	r3, r1, #3
 8004270:	4651      	mov	r1, sl
 8004272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004276:	4651      	mov	r1, sl
 8004278:	00ca      	lsls	r2, r1, #3
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	4603      	mov	r3, r0
 8004280:	4642      	mov	r2, r8
 8004282:	189b      	adds	r3, r3, r2
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	464b      	mov	r3, r9
 800428a:	460a      	mov	r2, r1
 800428c:	eb42 0303 	adc.w	r3, r2, r3
 8004290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004294:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800429e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80042a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80042a6:	460b      	mov	r3, r1
 80042a8:	18db      	adds	r3, r3, r3
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
 80042ac:	4613      	mov	r3, r2
 80042ae:	eb42 0303 	adc.w	r3, r2, r3
 80042b2:	647b      	str	r3, [r7, #68]	; 0x44
 80042b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042b8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80042bc:	f7fc f838 	bl	8000330 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4611      	mov	r1, r2
 80042c6:	4b3c      	ldr	r3, [pc, #240]	; (80043b8 <LL_USART_SetBaudRate+0x238>)
 80042c8:	fba3 2301 	umull	r2, r3, r3, r1
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	2264      	movs	r2, #100	; 0x64
 80042d0:	fb02 f303 	mul.w	r3, r2, r3
 80042d4:	1acb      	subs	r3, r1, r3
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <LL_USART_SetBaudRate+0x238>)
 80042de:	fba3 2302 	umull	r2, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4423      	add	r3, r4
 80042f2:	b29c      	uxth	r4, r3
 80042f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004302:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	1891      	adds	r1, r2, r2
 800430c:	63b9      	str	r1, [r7, #56]	; 0x38
 800430e:	415b      	adcs	r3, r3
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004312:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004316:	4641      	mov	r1, r8
 8004318:	1851      	adds	r1, r2, r1
 800431a:	6339      	str	r1, [r7, #48]	; 0x30
 800431c:	4649      	mov	r1, r9
 800431e:	414b      	adcs	r3, r1
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800432e:	4659      	mov	r1, fp
 8004330:	00cb      	lsls	r3, r1, #3
 8004332:	4651      	mov	r1, sl
 8004334:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004338:	4651      	mov	r1, sl
 800433a:	00ca      	lsls	r2, r1, #3
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	4603      	mov	r3, r0
 8004342:	4642      	mov	r2, r8
 8004344:	189b      	adds	r3, r3, r2
 8004346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800434a:	464b      	mov	r3, r9
 800434c:	460a      	mov	r2, r1
 800434e:	eb42 0303 	adc.w	r3, r2, r3
 8004352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004356:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004360:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004364:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004368:	460b      	mov	r3, r1
 800436a:	18db      	adds	r3, r3, r3
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
 800436e:	4613      	mov	r3, r2
 8004370:	eb42 0303 	adc.w	r3, r2, r3
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800437a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800437e:	f7fb ffd7 	bl	8000330 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <LL_USART_SetBaudRate+0x238>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	; 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <LL_USART_SetBaudRate+0x238>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	4423      	add	r3, r4
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80043b6:	e107      	b.n	80045c8 <LL_USART_SetBaudRate+0x448>
 80043b8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80043bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043c6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043ca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80043ce:	4642      	mov	r2, r8
 80043d0:	464b      	mov	r3, r9
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	6239      	str	r1, [r7, #32]
 80043d6:	415b      	adcs	r3, r3
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043de:	4641      	mov	r1, r8
 80043e0:	1854      	adds	r4, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0501 	adc.w	r5, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	00eb      	lsls	r3, r5, #3
 80043f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f6:	00e2      	lsls	r2, r4, #3
 80043f8:	4614      	mov	r4, r2
 80043fa:	461d      	mov	r5, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	18e3      	adds	r3, r4, r3
 8004400:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004404:	464b      	mov	r3, r9
 8004406:	eb45 0303 	adc.w	r3, r5, r3
 800440a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800440e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004418:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004428:	4629      	mov	r1, r5
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4621      	mov	r1, r4
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4621      	mov	r1, r4
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800443a:	f7fb ff79 	bl	8000330 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b64      	ldr	r3, [pc, #400]	; (80045d4 <LL_USART_SetBaudRate+0x454>)
 8004444:	fba3 2302 	umull	r2, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	b29b      	uxth	r3, r3
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	b29c      	uxth	r4, r3
 8004450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800445e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004462:	4642      	mov	r2, r8
 8004464:	464b      	mov	r3, r9
 8004466:	1891      	adds	r1, r2, r2
 8004468:	61b9      	str	r1, [r7, #24]
 800446a:	415b      	adcs	r3, r3
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004472:	4641      	mov	r1, r8
 8004474:	1851      	adds	r1, r2, r1
 8004476:	6139      	str	r1, [r7, #16]
 8004478:	4649      	mov	r1, r9
 800447a:	414b      	adcs	r3, r1
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800448a:	4659      	mov	r1, fp
 800448c:	00cb      	lsls	r3, r1, #3
 800448e:	4651      	mov	r1, sl
 8004490:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004494:	4651      	mov	r1, sl
 8004496:	00ca      	lsls	r2, r1, #3
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	4603      	mov	r3, r0
 800449e:	4642      	mov	r2, r8
 80044a0:	189b      	adds	r3, r3, r2
 80044a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044a6:	464b      	mov	r3, r9
 80044a8:	460a      	mov	r2, r1
 80044aa:	eb42 0303 	adc.w	r3, r2, r3
 80044ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80044cc:	4649      	mov	r1, r9
 80044ce:	008b      	lsls	r3, r1, #2
 80044d0:	4641      	mov	r1, r8
 80044d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d6:	4641      	mov	r1, r8
 80044d8:	008a      	lsls	r2, r1, #2
 80044da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80044de:	f7fb ff27 	bl	8000330 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <LL_USART_SetBaudRate+0x454>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	; 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	3332      	adds	r3, #50	; 0x32
 80044fa:	4a36      	ldr	r2, [pc, #216]	; (80045d4 <LL_USART_SetBaudRate+0x454>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	b29b      	uxth	r3, r3
 8004504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004508:	b29b      	uxth	r3, r3
 800450a:	4423      	add	r3, r4
 800450c:	b29c      	uxth	r4, r3
 800450e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004512:	2200      	movs	r2, #0
 8004514:	67bb      	str	r3, [r7, #120]	; 0x78
 8004516:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	1891      	adds	r1, r2, r2
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	415b      	adcs	r3, r3
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800452c:	4641      	mov	r1, r8
 800452e:	1851      	adds	r1, r2, r1
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	4649      	mov	r1, r9
 8004534:	414b      	adcs	r3, r1
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004544:	4659      	mov	r1, fp
 8004546:	00cb      	lsls	r3, r1, #3
 8004548:	4651      	mov	r1, sl
 800454a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454e:	4651      	mov	r1, sl
 8004550:	00ca      	lsls	r2, r1, #3
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4603      	mov	r3, r0
 8004558:	4642      	mov	r2, r8
 800455a:	189b      	adds	r3, r3, r2
 800455c:	673b      	str	r3, [r7, #112]	; 0x70
 800455e:	464b      	mov	r3, r9
 8004560:	460a      	mov	r2, r1
 8004562:	eb42 0303 	adc.w	r3, r2, r3
 8004566:	677b      	str	r3, [r7, #116]	; 0x74
 8004568:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800456c:	2200      	movs	r2, #0
 800456e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004570:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800457e:	4649      	mov	r1, r9
 8004580:	008b      	lsls	r3, r1, #2
 8004582:	4641      	mov	r1, r8
 8004584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004588:	4641      	mov	r1, r8
 800458a:	008a      	lsls	r2, r1, #2
 800458c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004590:	f7fb fece 	bl	8000330 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <LL_USART_SetBaudRate+0x454>)
 800459a:	fba3 1302 	umull	r1, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2164      	movs	r1, #100	; 0x64
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	3332      	adds	r3, #50	; 0x32
 80045ac:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <LL_USART_SetBaudRate+0x454>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4423      	add	r3, r4
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d4:	51eb851f 	.word	0x51eb851f

080045d8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fd8d 	bl	800410a <LL_USART_IsEnabled>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d16c      	bne.n	80046d0 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80045fe:	f023 030c 	bic.w	r3, r3, #12
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	6851      	ldr	r1, [r2, #4]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	68d2      	ldr	r2, [r2, #12]
 800460a:	4311      	orrs	r1, r2
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	6912      	ldr	r2, [r2, #16]
 8004610:	4311      	orrs	r1, r2
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	6992      	ldr	r2, [r2, #24]
 8004616:	430a      	orrs	r2, r1
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fd84 	bl	8004132 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fd91 	bl	8004158 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004636:	f107 0308 	add.w	r3, r7, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fef4 	bl	8003428 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a26      	ldr	r2, [pc, #152]	; (80046dc <LL_USART_Init+0x104>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d102      	bne.n	800464e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e02f      	b.n	80046ae <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <LL_USART_Init+0x108>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d102      	bne.n	800465c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e028      	b.n	80046ae <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <LL_USART_Init+0x10c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d102      	bne.n	800466a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e021      	b.n	80046ae <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <LL_USART_Init+0x110>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d102      	bne.n	8004678 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e01a      	b.n	80046ae <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <LL_USART_Init+0x114>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d102      	bne.n	8004686 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e013      	b.n	80046ae <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <LL_USART_Init+0x118>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d102      	bne.n	8004694 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e00c      	b.n	80046ae <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <LL_USART_Init+0x11c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d102      	bne.n	80046a2 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e005      	b.n	80046ae <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <LL_USART_Init+0x120>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699a      	ldr	r2, [r3, #24]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fd58 	bl	8004180 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80046d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40011000 	.word	0x40011000
 80046e0:	40004400 	.word	0x40004400
 80046e4:	40004800 	.word	0x40004800
 80046e8:	40011400 	.word	0x40011400
 80046ec:	40004c00 	.word	0x40004c00
 80046f0:	40005000 	.word	0x40005000
 80046f4:	40007800 	.word	0x40007800
 80046f8:	40007c00 	.word	0x40007c00

080046fc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004704:	4a04      	ldr	r2, [pc, #16]	; (8004718 <LL_SetSystemCoreClock+0x1c>)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6013      	str	r3, [r2, #0]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000010 	.word	0x20000010

0800471c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004726:	f000 f888 	bl	800483a <BSP_SD_IsDetected>
 800472a:	4603      	mov	r3, r0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e005      	b.n	8004740 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004734:	4804      	ldr	r0, [pc, #16]	; (8004748 <BSP_SD_Init+0x2c>)
 8004736:	f7fc ff6b 	bl	8001610 <HAL_SD_Init>
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800473e:	79fb      	ldrb	r3, [r7, #7]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20005928 	.word	0x20005928

0800474c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	4806      	ldr	r0, [pc, #24]	; (800477c <BSP_SD_ReadBlocks_DMA+0x30>)
 8004764:	f7fd f804 	bl	8001770 <HAL_SD_ReadBlocks_DMA>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20005928 	.word	0x20005928

08004780 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	4806      	ldr	r0, [pc, #24]	; (80047b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004798:	f7fd f8cc 	bl	8001934 <HAL_SD_WriteBlocks_DMA>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20005928 	.word	0x20005928

080047b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80047b8:	4805      	ldr	r0, [pc, #20]	; (80047d0 <BSP_SD_GetCardState+0x1c>)
 80047ba:	f7fd fd01 	bl	80021c0 <HAL_SD_GetCardState>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20005928 	.word	0x20005928

080047d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4803      	ldr	r0, [pc, #12]	; (80047ec <BSP_SD_GetCardInfo+0x18>)
 80047e0:	f7fd fcc2 	bl	8002168 <HAL_SD_GetCardInfo>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20005928 	.word	0x20005928

080047f0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80047f8:	f000 f818 	bl	800482c <BSP_SD_AbortCallback>
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800480c:	f000 f9f8 	bl	8004c00 <BSP_SD_WriteCpltCallback>
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004820:	f000 f9fa 	bl	8004c18 <BSP_SD_ReadCpltCallback>
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0

}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004840:	2301      	movs	r3, #1
 8004842:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	b2db      	uxtb	r3, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004858:	4904      	ldr	r1, [pc, #16]	; (800486c <MX_FATFS_Init+0x18>)
 800485a:	4805      	ldr	r0, [pc, #20]	; (8004870 <MX_FATFS_Init+0x1c>)
 800485c:	f000 f858 	bl	8004910 <FATFS_LinkDriver>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <MX_FATFS_Init+0x20>)
 8004866:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}
 800486c:	2000009c 	.word	0x2000009c
 8004870:	0800ed94 	.word	0x0800ed94
 8004874:	20000098 	.word	0x20000098

08004878 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800488e:	4b1f      	ldr	r3, [pc, #124]	; (800490c <FATFS_LinkDriverEx+0x94>)
 8004890:	7a5b      	ldrb	r3, [r3, #9]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d131      	bne.n	80048fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <FATFS_LinkDriverEx+0x94>)
 800489a:	7a5b      	ldrb	r3, [r3, #9]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <FATFS_LinkDriverEx+0x94>)
 80048a2:	2100      	movs	r1, #0
 80048a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80048a6:	4b19      	ldr	r3, [pc, #100]	; (800490c <FATFS_LinkDriverEx+0x94>)
 80048a8:	7a5b      	ldrb	r3, [r3, #9]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <FATFS_LinkDriverEx+0x94>)
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <FATFS_LinkDriverEx+0x94>)
 80048b8:	7a5b      	ldrb	r3, [r3, #9]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <FATFS_LinkDriverEx+0x94>)
 80048c0:	4413      	add	r3, r2
 80048c2:	79fa      	ldrb	r2, [r7, #7]
 80048c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <FATFS_LinkDriverEx+0x94>)
 80048c8:	7a5b      	ldrb	r3, [r3, #9]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	b2d1      	uxtb	r1, r2
 80048d0:	4a0e      	ldr	r2, [pc, #56]	; (800490c <FATFS_LinkDriverEx+0x94>)
 80048d2:	7251      	strb	r1, [r2, #9]
 80048d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80048d6:	7dbb      	ldrb	r3, [r7, #22]
 80048d8:	3330      	adds	r3, #48	; 0x30
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	223a      	movs	r2, #58	; 0x3a
 80048e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3302      	adds	r3, #2
 80048ec:	222f      	movs	r2, #47	; 0x2f
 80048ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	3303      	adds	r3, #3
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	200000a0 	.word	0x200000a0

08004910 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffaa 	bl	8004878 <FATFS_LinkDriverEx>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004936:	f7fb ffbd 	bl	80008b4 <HAL_GetTick>
 800493a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800493c:	e006      	b.n	800494c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800493e:	f7ff ff39 	bl	80047b4 <BSP_SD_GetCardState>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004948:	2300      	movs	r3, #0
 800494a:	e009      	b.n	8004960 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800494c:	f7fb ffb2 	bl	80008b4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d8f0      	bhi.n	800493e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <SD_CheckStatus+0x38>)
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004978:	f7ff ff1c 	bl	80047b4 <BSP_SD_GetCardState>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <SD_CheckStatus+0x38>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <SD_CheckStatus+0x38>)
 8004990:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004992:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <SD_CheckStatus+0x38>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b2db      	uxtb	r3, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000005 	.word	0x20000005

080049a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80049ae:	f7ff feb5 	bl	800471c <BSP_SD_Init>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ffd4 	bl	8004968 <SD_CheckStatus>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <SD_initialize+0x34>)
 80049c6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <SD_initialize+0x34>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000005 	.word	0x20000005

080049dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ffbd 	bl	8004968 <SD_CheckStatus>
 80049ee:	4603      	mov	r3, r0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004a0c:	f247 5030 	movw	r0, #30000	; 0x7530
 8004a10:	f7ff ff8d 	bl	800492e <SD_CheckStatusWithTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	da01      	bge.n	8004a1e <SD_read+0x26>
  {
    return res;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	e03b      	b.n	8004a96 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f7ff fe92 	bl	800474c <BSP_SD_ReadBlocks_DMA>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d132      	bne.n	8004a94 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <SD_read+0xa8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004a34:	f7fb ff3e 	bl	80008b4 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004a3a:	bf00      	nop
 8004a3c:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <SD_read+0xa8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d108      	bne.n	8004a56 <SD_read+0x5e>
 8004a44:	f7fb ff36 	bl	80008b4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d9f2      	bls.n	8004a3c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <SD_read+0xa8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
 8004a62:	e017      	b.n	8004a94 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <SD_read+0xa8>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004a6a:	f7fb ff23 	bl	80008b4 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a70:	e007      	b.n	8004a82 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004a72:	f7ff fe9f 	bl	80047b4 <BSP_SD_GetCardState>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <SD_read+0x8a>
          {
            res = RES_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004a80:	e008      	b.n	8004a94 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a82:	f7fb ff17 	bl	80008b4 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d9ee      	bls.n	8004a72 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200000b0 	.word	0x200000b0

08004aa4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004ab8:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <SD_write+0xa8>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004abe:	f247 5030 	movw	r0, #30000	; 0x7530
 8004ac2:	f7ff ff34 	bl	800492e <SD_CheckStatusWithTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da01      	bge.n	8004ad0 <SD_write+0x2c>
  {
    return res;
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
 8004ace:	e038      	b.n	8004b42 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	68b8      	ldr	r0, [r7, #8]
 8004ad6:	f7ff fe53 	bl	8004780 <BSP_SD_WriteBlocks_DMA>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d12f      	bne.n	8004b40 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004ae0:	f7fb fee8 	bl	80008b4 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004ae6:	bf00      	nop
 8004ae8:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <SD_write+0xa8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d108      	bne.n	8004b02 <SD_write+0x5e>
 8004af0:	f7fb fee0 	bl	80008b4 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f247 522f 	movw	r2, #29999	; 0x752f
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d9f2      	bls.n	8004ae8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <SD_write+0xa8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
 8004b0e:	e017      	b.n	8004b40 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <SD_write+0xa8>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004b16:	f7fb fecd 	bl	80008b4 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004b1c:	e007      	b.n	8004b2e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004b1e:	f7ff fe49 	bl	80047b4 <BSP_SD_GetCardState>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <SD_write+0x8a>
          {
            res = RES_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	75fb      	strb	r3, [r7, #23]
            break;
 8004b2c:	e008      	b.n	8004b40 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004b2e:	f7fb fec1 	bl	80008b4 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f247 522f 	movw	r2, #29999	; 0x752f
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d9ee      	bls.n	8004b1e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	200000ac 	.word	0x200000ac

08004b50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	603a      	str	r2, [r7, #0]
 8004b5a:	71fb      	strb	r3, [r7, #7]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <SD_ioctl+0xac>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <SD_ioctl+0x28>
 8004b74:	2303      	movs	r3, #3
 8004b76:	e03c      	b.n	8004bf2 <SD_ioctl+0xa2>

  switch (cmd)
 8004b78:	79bb      	ldrb	r3, [r7, #6]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d834      	bhi.n	8004be8 <SD_ioctl+0x98>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <SD_ioctl+0x34>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004b9d 	.word	0x08004b9d
 8004b8c:	08004bb5 	.word	0x08004bb5
 8004b90:	08004bcf 	.word	0x08004bcf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b9a:	e028      	b.n	8004bee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fe17 	bl	80047d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004bb2:	e01c      	b.n	8004bee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004bb4:	f107 030c 	add.w	r3, r7, #12
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fe0b 	bl	80047d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004bcc:	e00f      	b.n	8004bee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fdfe 	bl	80047d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	0a5a      	lsrs	r2, r3, #9
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004be6:	e002      	b.n	8004bee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3730      	adds	r7, #48	; 0x30
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000005 	.word	0x20000005

08004c00 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <BSP_SD_WriteCpltCallback+0x14>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	200000ac 	.word	0x200000ac

08004c18 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004c1c:	4b03      	ldr	r3, [pc, #12]	; (8004c2c <BSP_SD_ReadCpltCallback+0x14>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	200000b0 	.word	0x200000b0

08004c30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004c3c:	f001 ff20 	bl	8006a80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004c40:	4b67      	ldr	r3, [pc, #412]	; (8004de0 <pvPortMalloc+0x1b0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004c48:	f000 f938 	bl	8004ebc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c4c:	4b65      	ldr	r3, [pc, #404]	; (8004de4 <pvPortMalloc+0x1b4>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 80a7 	bne.w	8004da8 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d02d      	beq.n	8004cbc <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004c60:	2208      	movs	r2, #8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d227      	bcs.n	8004cbc <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d021      	beq.n	8004cc2 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f023 0307 	bic.w	r3, r3, #7
 8004c84:	3308      	adds	r3, #8
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d214      	bcs.n	8004cb6 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	3308      	adds	r3, #8
 8004c94:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cba:	e002      	b.n	8004cc2 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	e000      	b.n	8004cc4 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cc2:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d06e      	beq.n	8004da8 <pvPortMalloc+0x178>
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <pvPortMalloc+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d869      	bhi.n	8004da8 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <pvPortMalloc+0x1bc>)
 8004cd6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004cd8:	4b44      	ldr	r3, [pc, #272]	; (8004dec <pvPortMalloc+0x1bc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cde:	e004      	b.n	8004cea <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d903      	bls.n	8004cfc <pvPortMalloc+0xcc>
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f1      	bne.n	8004ce0 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004cfc:	4b38      	ldr	r3, [pc, #224]	; (8004de0 <pvPortMalloc+0x1b0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d050      	beq.n	8004da8 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	4413      	add	r3, r2
 8004d0e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	2308      	movs	r3, #8
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d91f      	bls.n	8004d68 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <pvPortMalloc+0x120>
        __asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	613b      	str	r3, [r7, #16]
    }
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	1ad2      	subs	r2, r2, r3
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d62:	69b8      	ldr	r0, [r7, #24]
 8004d64:	f000 f90c 	bl	8004f80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d68:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <pvPortMalloc+0x1b8>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <pvPortMalloc+0x1b8>)
 8004d74:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <pvPortMalloc+0x1b8>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <pvPortMalloc+0x1c0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d203      	bcs.n	8004d8a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <pvPortMalloc+0x1b8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <pvPortMalloc+0x1c0>)
 8004d88:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <pvPortMalloc+0x1b4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <pvPortMalloc+0x1c4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3301      	adds	r3, #1
 8004da4:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <pvPortMalloc+0x1c4>)
 8004da6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004da8:	f001 fe78 	bl	8006a9c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8004db2:	f006 fd7d 	bl	800b8b0 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <pvPortMalloc+0x1a6>
        __asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
    }
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <pvPortMalloc+0x1a4>
    return pvReturn;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3728      	adds	r7, #40	; 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	200028bc 	.word	0x200028bc
 8004de4:	200028d0 	.word	0x200028d0
 8004de8:	200028c0 	.word	0x200028c0
 8004dec:	200028b4 	.word	0x200028b4
 8004df0:	200028c4 	.word	0x200028c4
 8004df4:	200028c8 	.word	0x200028c8

08004df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04d      	beq.n	8004ea6 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	425b      	negs	r3, r3
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4413      	add	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <vPortFree+0xb8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <vPortFree+0x44>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
    }
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <vPortFree+0x62>
        __asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	60bb      	str	r3, [r7, #8]
    }
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <vPortFree+0xb8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01e      	beq.n	8004ea6 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11a      	bne.n	8004ea6 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <vPortFree+0xb8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004e80:	f001 fdfe 	bl	8006a80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <vPortFree+0xbc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <vPortFree+0xbc>)
 8004e90:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e92:	6938      	ldr	r0, [r7, #16]
 8004e94:	f000 f874 	bl	8004f80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <vPortFree+0xc0>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4a06      	ldr	r2, [pc, #24]	; (8004eb8 <vPortFree+0xc0>)
 8004ea0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ea2:	f001 fdfb 	bl	8006a9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004ea6:	bf00      	nop
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200028d0 	.word	0x200028d0
 8004eb4:	200028c0 	.word	0x200028c0
 8004eb8:	200028cc 	.word	0x200028cc

08004ebc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ec2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004ec6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004ec8:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <prvHeapInit+0xac>)
 8004eca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3307      	adds	r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <prvHeapInit+0xac>)
 8004eec:	4413      	add	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ef4:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <prvHeapInit+0xb0>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004efa:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <prvHeapInit+0xb0>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	4413      	add	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004f08:	2208      	movs	r2, #8
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0307 	bic.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <prvHeapInit+0xb4>)
 8004f1c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004f1e:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <prvHeapInit+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004f26:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <prvHeapInit+0xb4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	1ad2      	subs	r2, r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <prvHeapInit+0xb4>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4a0a      	ldr	r2, [pc, #40]	; (8004f74 <prvHeapInit+0xb8>)
 8004f4a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <prvHeapInit+0xbc>)
 8004f52:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <prvHeapInit+0xc0>)
 8004f56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f5a:	601a      	str	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	200000b4 	.word	0x200000b4
 8004f6c:	200028b4 	.word	0x200028b4
 8004f70:	200028bc 	.word	0x200028bc
 8004f74:	200028c4 	.word	0x200028c4
 8004f78:	200028c0 	.word	0x200028c0
 8004f7c:	200028d0 	.word	0x200028d0

08004f80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f88:	4b28      	ldr	r3, [pc, #160]	; (800502c <prvInsertBlockIntoFreeList+0xac>)
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e002      	b.n	8004f94 <prvInsertBlockIntoFreeList+0x14>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d8f7      	bhi.n	8004f8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4413      	add	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d108      	bne.n	8004fc2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	441a      	add	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d118      	bne.n	8005008 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <prvInsertBlockIntoFreeList+0xb0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d00d      	beq.n	8004ffe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e008      	b.n	8005010 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <prvInsertBlockIntoFreeList+0xb0>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e003      	b.n	8005010 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d002      	beq.n	800501e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	200028b4 	.word	0x200028b4
 8005030:	200028bc 	.word	0x200028bc

08005034 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 0208 	add.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800504c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f103 0208 	add.w	r2, r3, #8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f103 0208 	add.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ec:	d103      	bne.n	80050f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e00c      	b.n	8005110 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3308      	adds	r3, #8
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e002      	b.n	8005104 <vListInsert+0x2e>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	d2f6      	bcs.n	80050fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6892      	ldr	r2, [r2, #8]
 800515e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6852      	ldr	r2, [r2, #4]
 8005168:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d103      	bne.n	800517c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	1e5a      	subs	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3b04      	subs	r3, #4
 80051ac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0201 	bic.w	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b04      	subs	r3, #4
 80051ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80051cc:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <pxPortInitialiseStack+0x64>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3b14      	subs	r3, #20
 80051d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3b04      	subs	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f06f 0202 	mvn.w	r2, #2
 80051ea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b20      	subs	r3, #32
 80051f0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	08005205 	.word	0x08005205

08005204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <prvTaskExitError+0x54>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005216:	d00a      	beq.n	800522e <prvTaskExitError+0x2a>
        __asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	60fb      	str	r3, [r7, #12]
    }
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <prvTaskExitError+0x28>
        __asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60bb      	str	r3, [r7, #8]
    }
 8005240:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005242:	bf00      	nop
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0fc      	beq.n	8005244 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000008 	.word	0x20000008
 800525c:	00000000 	.word	0x00000000

08005260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <pxCurrentTCBConst2>)
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	6808      	ldr	r0, [r1, #0]
 8005266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	f380 8809 	msr	PSP, r0
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8811 	msr	BASEPRI, r0
 800527a:	4770      	bx	lr
 800527c:	f3af 8000 	nop.w

08005280 <pxCurrentTCBConst2>:
 8005280:	2000291c 	.word	0x2000291c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop

08005288 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005288:	4808      	ldr	r0, [pc, #32]	; (80052ac <prvPortStartFirstTask+0x24>)
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	6800      	ldr	r0, [r0, #0]
 800528e:	f380 8808 	msr	MSP, r0
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8814 	msr	CONTROL, r0
 800529a:	b662      	cpsie	i
 800529c:	b661      	cpsie	f
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	df00      	svc	0
 80052a8:	bf00      	nop
 80052aa:	0000      	.short	0x0000
 80052ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop

080052b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <xPortStartScheduler+0x120>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a46      	ldr	r2, [pc, #280]	; (80053d8 <xPortStartScheduler+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10a      	bne.n	80052da <xPortStartScheduler+0x26>
        __asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	613b      	str	r3, [r7, #16]
    }
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052da:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <xPortStartScheduler+0x120>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3f      	ldr	r2, [pc, #252]	; (80053dc <xPortStartScheduler+0x128>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10a      	bne.n	80052fa <xPortStartScheduler+0x46>
        __asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60fb      	str	r3, [r7, #12]
    }
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <xPortStartScheduler+0x12c>)
 80052fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800531c:	b2da      	uxtb	r2, r3
 800531e:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <xPortStartScheduler+0x130>)
 8005320:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <xPortStartScheduler+0x134>)
 8005324:	2207      	movs	r2, #7
 8005326:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005328:	e009      	b.n	800533e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <xPortStartScheduler+0x134>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <xPortStartScheduler+0x134>)
 8005332:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d0ef      	beq.n	800532a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800534a:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <xPortStartScheduler+0x134>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1c3 0307 	rsb	r3, r3, #7
 8005352:	2b04      	cmp	r3, #4
 8005354:	d00a      	beq.n	800536c <xPortStartScheduler+0xb8>
        __asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	60bb      	str	r3, [r7, #8]
    }
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <xPortStartScheduler+0x134>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <xPortStartScheduler+0x134>)
 8005374:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <xPortStartScheduler+0x134>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800537e:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <xPortStartScheduler+0x134>)
 8005380:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800538a:	4b18      	ldr	r3, [pc, #96]	; (80053ec <xPortStartScheduler+0x138>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <xPortStartScheduler+0x138>)
 8005390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005394:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <xPortStartScheduler+0x138>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <xPortStartScheduler+0x138>)
 800539c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80053a2:	f000 f8e3 	bl	800556c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <xPortStartScheduler+0x13c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80053ac:	f000 f902 	bl	80055b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053b0:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <xPortStartScheduler+0x140>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <xPortStartScheduler+0x140>)
 80053b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80053bc:	f7ff ff64 	bl	8005288 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80053c0:	f001 fcee 	bl	8006da0 <vTaskSwitchContext>
    prvTaskExitError();
 80053c4:	f7ff ff1e 	bl	8005204 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	e000ed00 	.word	0xe000ed00
 80053d8:	410fc271 	.word	0x410fc271
 80053dc:	410fc270 	.word	0x410fc270
 80053e0:	e000e400 	.word	0xe000e400
 80053e4:	200028d4 	.word	0x200028d4
 80053e8:	200028d8 	.word	0x200028d8
 80053ec:	e000ed20 	.word	0xe000ed20
 80053f0:	20000008 	.word	0x20000008
 80053f4:	e000ef34 	.word	0xe000ef34

080053f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
        __asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
    }
 8005410:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005412:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <vPortEnterCritical+0x58>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <vPortEnterCritical+0x58>)
 800541a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <vPortEnterCritical+0x58>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10f      	bne.n	8005444 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <vPortEnterCritical+0x5c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <vPortEnterCritical+0x4c>
        __asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	603b      	str	r3, [r7, #0]
    }
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <vPortEnterCritical+0x4a>
    }
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20000008 	.word	0x20000008
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <vPortExitCritical+0x50>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <vPortExitCritical+0x24>
        __asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	607b      	str	r3, [r7, #4]
    }
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <vPortExitCritical+0x50>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <vPortExitCritical+0x50>)
 8005484:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <vPortExitCritical+0x50>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <vPortExitCritical+0x42>
 800548e:	2300      	movs	r3, #0
 8005490:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005498:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000008 	.word	0x20000008
 80054ac:	00000000 	.word	0x00000000

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <pxCurrentTCBConst>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f01e 0f10 	tst.w	lr, #16
 80054c0:	bf08      	it	eq
 80054c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	6010      	str	r0, [r2, #0]
 80054cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054d4:	f380 8811 	msr	BASEPRI, r0
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f001 fc5e 	bl	8006da0 <vTaskSwitchContext>
 80054e4:	f04f 0000 	mov.w	r0, #0
 80054e8:	f380 8811 	msr	BASEPRI, r0
 80054ec:	bc09      	pop	{r0, r3}
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f6:	f01e 0f10 	tst.w	lr, #16
 80054fa:	bf08      	it	eq
 80054fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005500:	f380 8809 	msr	PSP, r0
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	f3af 8000 	nop.w

08005510 <pxCurrentTCBConst>:
 8005510:	2000291c 	.word	0x2000291c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
        __asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
    }
 8005530:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005532:	f003 fd11 	bl	8008f58 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005536:	f001 fb75 	bl	8006c24 <xTaskIncrementTick>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d006      	beq.n	800554e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005540:	f003 fd68 	bl	8009014 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <SysTick_Handler+0x50>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e001      	b.n	8005552 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800554e:	f003 fd45 	bl	8008fdc <SEGGER_SYSVIEW_RecordExitISR>
 8005552:	2300      	movs	r3, #0
 8005554:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f383 8811 	msr	BASEPRI, r3
    }
 800555c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <vPortSetupTimerInterrupt+0x34>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005576:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <vPortSetupTimerInterrupt+0x38>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <vPortSetupTimerInterrupt+0x3c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <vPortSetupTimerInterrupt+0x40>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	099b      	lsrs	r3, r3, #6
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <vPortSetupTimerInterrupt+0x44>)
 800558a:	3b01      	subs	r3, #1
 800558c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <vPortSetupTimerInterrupt+0x34>)
 8005590:	2207      	movs	r2, #7
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000e010 	.word	0xe000e010
 80055a4:	e000e018 	.word	0xe000e018
 80055a8:	20000010 	.word	0x20000010
 80055ac:	10624dd3 	.word	0x10624dd3
 80055b0:	e000e014 	.word	0xe000e014

080055b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80055b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055c4 <vPortEnableVFP+0x10>
 80055b8:	6801      	ldr	r1, [r0, #0]
 80055ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055be:	6001      	str	r1, [r0, #0]
 80055c0:	4770      	bx	lr
 80055c2:	0000      	.short	0x0000
 80055c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop

080055cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 80055d2:	f000 f83b 	bl	800564c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80055d6:	f3ef 8305 	mrs	r3, IPSR
 80055da:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	d914      	bls.n	800560c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <vPortValidateInterruptPriority+0x70>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055ec:	4b14      	ldr	r3, [pc, #80]	; (8005640 <vPortValidateInterruptPriority+0x74>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	7afa      	ldrb	r2, [r7, #11]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d20a      	bcs.n	800560c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	607b      	str	r3, [r7, #4]
    }
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <vPortValidateInterruptPriority+0x78>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <vPortValidateInterruptPriority+0x7c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d90a      	bls.n	8005632 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	603b      	str	r3, [r7, #0]
    }
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <vPortValidateInterruptPriority+0x64>
    }
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000e3f0 	.word	0xe000e3f0
 8005640:	200028d4 	.word	0x200028d4
 8005644:	e000ed0c 	.word	0xe000ed0c
 8005648:	200028d8 	.word	0x200028d8

0800564c <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005652:	4b1f      	ldr	r3, [pc, #124]	; (80056d0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8005654:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005666:	2207      	movs	r2, #7
 8005668:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800566a:	e009      	b.n	8005680 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 800566c:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3b01      	subs	r3, #1
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005674:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d0ef      	beq.n	800566c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f1c3 0307 	rsb	r3, r3, #7
 8005694:	2b04      	cmp	r3, #4
 8005696:	d00a      	beq.n	80056ae <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	60bb      	str	r3, [r7, #8]
    }
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80056b6:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056c0:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80056c2:	6013      	str	r3, [r2, #0]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	e000e400 	.word	0xe000e400
 80056d4:	200028d8 	.word	0x200028d8

080056d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xQueueGenericReset+0x2a>
        __asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	60bb      	str	r3, [r7, #8]
    }
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005702:	f7ff fe79 	bl	80053f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	68f9      	ldr	r1, [r7, #12]
 8005710:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	441a      	add	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	3b01      	subs	r3, #1
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	441a      	add	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	22ff      	movs	r2, #255	; 0xff
 800574e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d114      	bne.n	8005782 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01a      	beq.n	8005796 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3310      	adds	r3, #16
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fbff 	bl	8006f68 <xTaskRemoveFromEventList>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <xQueueGenericReset+0xcc>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	e009      	b.n	8005796 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3310      	adds	r3, #16
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fc54 	bl	8005034 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3324      	adds	r3, #36	; 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fc4f 	bl	8005034 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005796:	f7ff fe5f 	bl	8005458 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800579a:	2301      	movs	r3, #1
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08e      	sub	sp, #56	; 0x38
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xQueueGenericCreateStatic+0x46>
        __asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <xQueueGenericCreateStatic+0x52>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <xQueueGenericCreateStatic+0x56>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueGenericCreateStatic+0x58>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	623b      	str	r3, [r7, #32]
    }
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <xQueueGenericCreateStatic+0x7e>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <xQueueGenericCreateStatic+0x82>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueGenericCreateStatic+0x84>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61fb      	str	r3, [r7, #28]
    }
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8005846:	2350      	movs	r3, #80	; 0x50
 8005848:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b50      	cmp	r3, #80	; 0x50
 800584e:	d00a      	beq.n	8005866 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61bb      	str	r3, [r7, #24]
    }
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005866:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800587a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4613      	mov	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f868 	bl	800595e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005890:	4618      	mov	r0, r3
 8005892:	3730      	adds	r7, #48	; 0x30
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005898:	b580      	push	{r7, lr}
 800589a:	b08c      	sub	sp, #48	; 0x30
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61bb      	str	r3, [r7, #24]
    }
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <xQueueGenericCreate+0x48>
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d101      	bne.n	80058e4 <xQueueGenericCreate+0x4c>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <xQueueGenericCreate+0x4e>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <xQueueGenericCreate+0x68>
        __asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	617b      	str	r3, [r7, #20]
    }
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005906:	d90a      	bls.n	800591e <xQueueGenericCreate+0x86>
        __asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	613b      	str	r3, [r7, #16]
    }
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	3350      	adds	r3, #80	; 0x50
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff f984 	bl	8004c30 <pvPortMalloc>
 8005928:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d011      	beq.n	8005954 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3350      	adds	r3, #80	; 0x50
 8005938:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005942:	79fa      	ldrb	r2, [r7, #7]
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f805 	bl	800595e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005954:	6a3b      	ldr	r3, [r7, #32]
    }
 8005956:	4618      	mov	r0, r3
 8005958:	3728      	adds	r7, #40	; 0x28
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e002      	b.n	8005980 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800598c:	2101      	movs	r1, #1
 800598e:	69b8      	ldr	r0, [r7, #24]
 8005990:	f7ff fea2 	bl	80056d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	68f9      	ldr	r1, [r7, #12]
 80059a2:	2073      	movs	r0, #115	; 0x73
 80059a4:	f002 ff08 	bl	80087b8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00e      	beq.n	80059dc <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80059d0:	2300      	movs	r3, #0
 80059d2:	2200      	movs	r2, #0
 80059d4:	2100      	movs	r1, #0
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f81c 	bl	8005a14 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059ee:	2301      	movs	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	2300      	movs	r3, #0
 80059f4:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6939      	ldr	r1, [r7, #16]
 80059fc:	6978      	ldr	r0, [r7, #20]
 80059fe:	f7ff ff4b 	bl	8005898 <xQueueGenericCreate>
 8005a02:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff ffd3 	bl	80059b0 <prvInitialiseMutex>

        return xNewQueue;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
    }
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b090      	sub	sp, #64	; 0x40
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a22:	2300      	movs	r3, #0
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericSend+0x32>
        __asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <xQueueGenericSend+0x40>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <xQueueGenericSend+0x44>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <xQueueGenericSend+0x46>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <xQueueGenericSend+0x60>
        __asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSend+0x6e>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <xQueueGenericSend+0x72>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <xQueueGenericSend+0x74>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <xQueueGenericSend+0x8e>
        __asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	623b      	str	r3, [r7, #32]
    }
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa2:	f001 fc5b 	bl	800735c <xTaskGetSchedulerState>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <xQueueGenericSend+0x9e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <xQueueGenericSend+0xa2>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <xQueueGenericSend+0xa4>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xQueueGenericSend+0xbe>
        __asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	61fb      	str	r3, [r7, #28]
    }
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005ad2:	f7ff fc91 	bl	80053f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <xQueueGenericSend+0xd4>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d136      	bne.n	8005b56 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	4618      	mov	r0, r3
 8005aec:	f003 fbf0 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	460b      	mov	r3, r1
 8005afa:	4601      	mov	r1, r0
 8005afc:	205a      	movs	r0, #90	; 0x5a
 8005afe:	f002 fed1 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b08:	f000 fbcc 	bl	80062a4 <prvCopyDataToQueue>
 8005b0c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	3324      	adds	r3, #36	; 0x24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 fa24 	bl	8006f68 <xTaskRemoveFromEventList>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d013      	beq.n	8005b4e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005b26:	4b4d      	ldr	r3, [pc, #308]	; (8005c5c <xQueueGenericSend+0x248>)
 8005b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	e00a      	b.n	8005b4e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <xQueueGenericSend+0x248>)
 8005b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005b4e:	f7ff fc83 	bl	8005458 <vPortExitCritical>
                return pdPASS;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e07d      	b.n	8005c52 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d110      	bne.n	8005b7e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005b5c:	f7ff fc7c 	bl	8005458 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	4618      	mov	r0, r3
 8005b64:	f003 fbb4 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	460b      	mov	r3, r1
 8005b72:	4601      	mov	r1, r0
 8005b74:	205a      	movs	r0, #90	; 0x5a
 8005b76:	f002 fe95 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e069      	b.n	8005c52 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fa55 	bl	8007038 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005b92:	f7ff fc61 	bl	8005458 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005b96:	f000 ff73 	bl	8006a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005b9a:	f7ff fc2d 	bl	80053f8 <vPortEnterCritical>
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba4:	b25b      	sxtb	r3, r3
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005baa:	d103      	bne.n	8005bb4 <xQueueGenericSend+0x1a0>
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc0:	d103      	bne.n	8005bca <xQueueGenericSend+0x1b6>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bca:	f7ff fc45 	bl	8005458 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bce:	1d3a      	adds	r2, r7, #4
 8005bd0:	f107 0314 	add.w	r3, r7, #20
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fa44 	bl	8007064 <xTaskCheckForTimeOut>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d124      	bne.n	8005c2c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005be4:	f000 fc56 	bl	8006494 <prvIsQueueFull>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d018      	beq.n	8005c20 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 f964 	bl	8006ec4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfe:	f000 fbe1 	bl	80063c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005c02:	f000 ff4b 	bl	8006a9c <xTaskResumeAll>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f47f af62 	bne.w	8005ad2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005c0e:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <xQueueGenericSend+0x248>)
 8005c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	e758      	b.n	8005ad2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c22:	f000 fbcf 	bl	80063c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005c26:	f000 ff39 	bl	8006a9c <xTaskResumeAll>
 8005c2a:	e752      	b.n	8005ad2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c2e:	f000 fbc9 	bl	80063c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005c32:	f000 ff33 	bl	8006a9c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f003 fb49 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	460b      	mov	r3, r1
 8005c48:	4601      	mov	r1, r0
 8005c4a:	205a      	movs	r0, #90	; 0x5a
 8005c4c:	f002 fe2a 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005c50:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3738      	adds	r7, #56	; 0x38
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b090      	sub	sp, #64	; 0x40
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <xQueueGenericSendFromISR+0x3c>
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <xQueueGenericSendFromISR+0x40>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <xQueueGenericSendFromISR+0x42>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSendFromISR+0x6a>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <xQueueGenericSendFromISR+0x6e>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericSendFromISR+0x70>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	623b      	str	r3, [r7, #32]
    }
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cea:	f7ff fc6f 	bl	80055cc <vPortValidateInterruptPriority>
        __asm volatile
 8005cee:	f3ef 8211 	mrs	r2, BASEPRI
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	61fa      	str	r2, [r7, #28]
 8005d04:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005d06:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d302      	bcc.n	8005d1c <xQueueGenericSendFromISR+0xbc>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d148      	bne.n	8005dae <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f003 face 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005d34:	4601      	mov	r1, r0
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	2060      	movs	r0, #96	; 0x60
 8005d3c:	f002 fce2 	bl	8008704 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d46:	f000 faad 	bl	80062a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005d4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d52:	d112      	bne.n	8005d7a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d025      	beq.n	8005da8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	3324      	adds	r3, #36	; 0x24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f901 	bl	8006f68 <xTaskRemoveFromEventList>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01d      	beq.n	8005da8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01a      	beq.n	8005da8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e016      	b.n	8005da8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005d7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d10a      	bne.n	8005d98 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	617b      	str	r3, [r7, #20]
    }
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	b25a      	sxtb	r2, r3
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005dac:	e00b      	b.n	8005dc6 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	4618      	mov	r0, r3
 8005db2:	f003 fa8d 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005db6:	4601      	mov	r1, r0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2060      	movs	r0, #96	; 0x60
 8005dbe:	f002 fca1 	bl	8008704 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f383 8811 	msr	BASEPRI, r3
    }
 8005dd0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3740      	adds	r7, #64	; 0x40
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b08f      	sub	sp, #60	; 0x3c
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <xQueueReceive+0x30>
        __asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	623b      	str	r3, [r7, #32]
    }
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <xQueueReceive+0x3e>
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <xQueueReceive+0x42>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <xQueueReceive+0x44>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xQueueReceive+0x5e>
        __asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	61fb      	str	r3, [r7, #28]
    }
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e3a:	f001 fa8f 	bl	800735c <xTaskGetSchedulerState>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <xQueueReceive+0x6e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <xQueueReceive+0x72>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <xQueueReceive+0x74>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xQueueReceive+0x8e>
        __asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	61bb      	str	r3, [r7, #24]
    }
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005e6a:	f7ff fac5 	bl	80053f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d02f      	beq.n	8005eda <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e7e:	f000 fa7b 	bl	8006378 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	4618      	mov	r0, r3
 8005e86:	f003 fa23 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f003 fa1f 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005e92:	4602      	mov	r2, r0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2101      	movs	r1, #1
 8005e98:	9100      	str	r1, [sp, #0]
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	205c      	movs	r0, #92	; 0x5c
 8005e9e:	f002 fd01 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	1e5a      	subs	r2, r3, #1
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00f      	beq.n	8005ed2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	3310      	adds	r3, #16
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 f856 	bl	8006f68 <xTaskRemoveFromEventList>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005ec2:	4b4d      	ldr	r3, [pc, #308]	; (8005ff8 <xQueueReceive+0x21c>)
 8005ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005ed2:	f7ff fac1 	bl	8005458 <vPortExitCritical>
                return pdPASS;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e08a      	b.n	8005ff0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d113      	bne.n	8005f08 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005ee0:	f7ff faba 	bl	8005458 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f003 f9f2 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005eec:	4604      	mov	r4, r0
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f003 f9ee 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2101      	movs	r1, #1
 8005efa:	9100      	str	r1, [sp, #0]
 8005efc:	4621      	mov	r1, r4
 8005efe:	205c      	movs	r0, #92	; 0x5c
 8005f00:	f002 fcd0 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e073      	b.n	8005ff0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005f0e:	f107 0310 	add.w	r3, r7, #16
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f890 	bl	8007038 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005f1c:	f7ff fa9c 	bl	8005458 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005f20:	f000 fdae 	bl	8006a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005f24:	f7ff fa68 	bl	80053f8 <vPortEnterCritical>
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f2e:	b25b      	sxtb	r3, r3
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f34:	d103      	bne.n	8005f3e <xQueueReceive+0x162>
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4a:	d103      	bne.n	8005f54 <xQueueReceive+0x178>
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f54:	f7ff fa80 	bl	8005458 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f58:	1d3a      	adds	r2, r7, #4
 8005f5a:	f107 0310 	add.w	r3, r7, #16
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 f87f 	bl	8007064 <xTaskCheckForTimeOut>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d124      	bne.n	8005fb6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f6e:	f000 fa7b 	bl	8006468 <prvIsQueueEmpty>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d018      	beq.n	8005faa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 ff9f 	bl	8006ec4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f88:	f000 fa1c 	bl	80063c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005f8c:	f000 fd86 	bl	8006a9c <xTaskResumeAll>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f47f af69 	bne.w	8005e6a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005f98:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <xQueueReceive+0x21c>)
 8005f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	e75f      	b.n	8005e6a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fac:	f000 fa0a 	bl	80063c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005fb0:	f000 fd74 	bl	8006a9c <xTaskResumeAll>
 8005fb4:	e759      	b.n	8005e6a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	f000 fa04 	bl	80063c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005fbc:	f000 fd6e 	bl	8006a9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc2:	f000 fa51 	bl	8006468 <prvIsQueueEmpty>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f43f af4e 	beq.w	8005e6a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f003 f97d 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f003 f979 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	9100      	str	r1, [sp, #0]
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	205c      	movs	r0, #92	; 0x5c
 8005fea:	f002 fc5b 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005fee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3734      	adds	r7, #52	; 0x34
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd90      	pop	{r4, r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005ffc:	b590      	push	{r4, r7, lr}
 8005ffe:	b091      	sub	sp, #68	; 0x44
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006006:	2300      	movs	r3, #0
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800600e:	2300      	movs	r3, #0
 8006010:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	623b      	str	r3, [r7, #32]
    }
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	61fb      	str	r3, [r7, #28]
    }
 8006048:	bf00      	nop
 800604a:	e7fe      	b.n	800604a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800604c:	f001 f986 	bl	800735c <xTaskGetSchedulerState>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <xQueueSemaphoreTake+0x60>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <xQueueSemaphoreTake+0x64>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <xQueueSemaphoreTake+0x66>
 8006060:	2300      	movs	r3, #0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	61bb      	str	r3, [r7, #24]
    }
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800607c:	f7ff f9bc 	bl	80053f8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	2b00      	cmp	r3, #0
 800608a:	d034      	beq.n	80060f6 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	4618      	mov	r0, r3
 8006090:	f003 f91e 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8006094:	4604      	mov	r4, r0
 8006096:	2000      	movs	r0, #0
 8006098:	f003 f91a 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 800609c:	4602      	mov	r2, r0
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2101      	movs	r1, #1
 80060a2:	9100      	str	r1, [sp, #0]
 80060a4:	4621      	mov	r1, r4
 80060a6:	205c      	movs	r0, #92	; 0x5c
 80060a8:	f002 fbfc 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060bc:	f001 fade 	bl	800767c <pvTaskIncrementMutexHeldCount>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00f      	beq.n	80060ee <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	3310      	adds	r3, #16
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 ff48 	bl	8006f68 <xTaskRemoveFromEventList>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80060de:	4b64      	ldr	r3, [pc, #400]	; (8006270 <xQueueSemaphoreTake+0x274>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80060ee:	f7ff f9b3 	bl	8005458 <vPortExitCritical>
                return pdPASS;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e0b7      	b.n	8006266 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d121      	bne.n	8006140 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	617b      	str	r3, [r7, #20]
    }
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006118:	f7ff f99e 	bl	8005458 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	4618      	mov	r0, r3
 8006120:	f003 f8d6 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8006124:	4604      	mov	r4, r0
 8006126:	2000      	movs	r0, #0
 8006128:	f003 f8d2 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 800612c:	4602      	mov	r2, r0
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2101      	movs	r1, #1
 8006132:	9100      	str	r1, [sp, #0]
 8006134:	4621      	mov	r1, r4
 8006136:	205c      	movs	r0, #92	; 0x5c
 8006138:	f002 fbb4 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800613c:	2300      	movs	r3, #0
 800613e:	e092      	b.n	8006266 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006146:	f107 030c 	add.w	r3, r7, #12
 800614a:	4618      	mov	r0, r3
 800614c:	f000 ff74 	bl	8007038 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006154:	f7ff f980 	bl	8005458 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006158:	f000 fc92 	bl	8006a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800615c:	f7ff f94c 	bl	80053f8 <vPortEnterCritical>
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006166:	b25b      	sxtb	r3, r3
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800616c:	d103      	bne.n	8006176 <xQueueSemaphoreTake+0x17a>
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800617c:	b25b      	sxtb	r3, r3
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006182:	d103      	bne.n	800618c <xQueueSemaphoreTake+0x190>
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800618c:	f7ff f964 	bl	8005458 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006190:	463a      	mov	r2, r7
 8006192:	f107 030c 	add.w	r3, r7, #12
 8006196:	4611      	mov	r1, r2
 8006198:	4618      	mov	r0, r3
 800619a:	f000 ff63 	bl	8007064 <xTaskCheckForTimeOut>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d132      	bne.n	800620a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061a6:	f000 f95f 	bl	8006468 <prvIsQueueEmpty>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d026      	beq.n	80061fe <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 80061b8:	f7ff f91e 	bl	80053f8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f8e9 	bl	8007398 <xTaskPriorityInherit>
 80061c6:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80061c8:	f7ff f946 	bl	8005458 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	3324      	adds	r3, #36	; 0x24
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fe75 	bl	8006ec4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80061da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061dc:	f000 f8f2 	bl	80063c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80061e0:	f000 fc5c 	bl	8006a9c <xTaskResumeAll>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f47f af48 	bne.w	800607c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80061ec:	4b20      	ldr	r3, [pc, #128]	; (8006270 <xQueueSemaphoreTake+0x274>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	e73e      	b.n	800607c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80061fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006200:	f000 f8e0 	bl	80063c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006204:	f000 fc4a 	bl	8006a9c <xTaskResumeAll>
 8006208:	e738      	b.n	800607c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800620a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800620c:	f000 f8da 	bl	80063c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006210:	f000 fc44 	bl	8006a9c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006216:	f000 f927 	bl	8006468 <prvIsQueueEmpty>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	f43f af2d 	beq.w	800607c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8006228:	f7ff f8e6 	bl	80053f8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800622c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800622e:	f000 f821 	bl	8006274 <prvGetDisinheritPriorityAfterTimeout>
 8006232:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800623a:	4618      	mov	r0, r3
 800623c:	f001 f994 	bl	8007568 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006240:	f7ff f90a 	bl	8005458 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	4618      	mov	r0, r3
 8006248:	f003 f842 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 800624c:	4604      	mov	r4, r0
 800624e:	2000      	movs	r0, #0
 8006250:	f003 f83e 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 8006254:	4602      	mov	r2, r0
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2101      	movs	r1, #1
 800625a:	9100      	str	r1, [sp, #0]
 800625c:	4621      	mov	r1, r4
 800625e:	205c      	movs	r0, #92	; 0x5c
 8006260:	f002 fb20 	bl	80088a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006264:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006266:	4618      	mov	r0, r3
 8006268:	373c      	adds	r7, #60	; 0x3c
 800626a:	46bd      	mov	sp, r7
 800626c:	bd90      	pop	{r4, r7, pc}
 800626e:	bf00      	nop
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e001      	b.n	8006296 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006296:	68fb      	ldr	r3, [r7, #12]
    }
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d14d      	bne.n	8006366 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 f8d4 	bl	800747c <xTaskPriorityDisinherit>
 80062d4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	e043      	b.n	8006366 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d119      	bne.n	8006318 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6858      	ldr	r0, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	461a      	mov	r2, r3
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	f007 ff16 	bl	800e120 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	441a      	add	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d32b      	bcc.n	8006366 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	e026      	b.n	8006366 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68d8      	ldr	r0, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	461a      	mov	r2, r3
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	f007 fefc 	bl	800e120 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	425b      	negs	r3, r3
 8006332:	441a      	add	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d207      	bcs.n	8006354 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	425b      	negs	r3, r3
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d105      	bne.n	8006366 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3b01      	subs	r3, #1
 8006364:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800636e:	697b      	ldr	r3, [r7, #20]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	441a      	add	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d303      	bcc.n	80063ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68d9      	ldr	r1, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	461a      	mov	r2, r3
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f007 feb2 	bl	800e120 <memcpy>
    }
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80063cc:	f7ff f814 	bl	80053f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80063d8:	e011      	b.n	80063fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d012      	beq.n	8006408 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3324      	adds	r3, #36	; 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fdbe 	bl	8006f68 <xTaskRemoveFromEventList>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80063f2:	f000 fe9d 	bl	8007130 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80063fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	dce9      	bgt.n	80063da <prvUnlockQueue+0x16>
 8006406:	e000      	b.n	800640a <prvUnlockQueue+0x46>
                        break;
 8006408:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006412:	f7ff f821 	bl	8005458 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006416:	f7fe ffef 	bl	80053f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006420:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006422:	e011      	b.n	8006448 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d012      	beq.n	8006452 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3310      	adds	r3, #16
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fd99 	bl	8006f68 <xTaskRemoveFromEventList>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800643c:	f000 fe78 	bl	8007130 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	3b01      	subs	r3, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dce9      	bgt.n	8006424 <prvUnlockQueue+0x60>
 8006450:	e000      	b.n	8006454 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006452:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	22ff      	movs	r2, #255	; 0xff
 8006458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800645c:	f7fe fffc 	bl	8005458 <vPortExitCritical>
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006470:	f7fe ffc2 	bl	80053f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e001      	b.n	8006486 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006486:	f7fe ffe7 	bl	8005458 <vPortExitCritical>

    return xReturn;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800649c:	f7fe ffac 	bl	80053f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d102      	bne.n	80064b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e001      	b.n	80064b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80064b6:	f7fe ffcf 	bl	8005458 <vPortExitCritical>

    return xReturn;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e01e      	b.n	8006512 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <vQueueAddToRegistry+0x60>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d115      	bne.n	800650c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064e0:	4910      	ldr	r1, [pc, #64]	; (8006524 <vQueueAddToRegistry+0x60>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80064ea:	4a0e      	ldr	r2, [pc, #56]	; (8006524 <vQueueAddToRegistry+0x60>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f002 fee9 	bl	80092d0 <SEGGER_SYSVIEW_ShrinkId>
 80064fe:	4601      	mov	r1, r0
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	2071      	movs	r0, #113	; 0x71
 8006506:	f002 f8fd 	bl	8008704 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800650a:	e006      	b.n	800651a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b07      	cmp	r3, #7
 8006516:	d9dd      	bls.n	80064d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200028dc 	.word	0x200028dc

08006528 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006538:	f7fe ff5e 	bl	80053f8 <vPortEnterCritical>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006542:	b25b      	sxtb	r3, r3
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006548:	d103      	bne.n	8006552 <vQueueWaitForMessageRestricted+0x2a>
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006558:	b25b      	sxtb	r3, r3
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655e:	d103      	bne.n	8006568 <vQueueWaitForMessageRestricted+0x40>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006568:	f7fe ff76 	bl	8005458 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fcc5 	bl	8006f0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006582:	6978      	ldr	r0, [r7, #20]
 8006584:	f7ff ff1e 	bl	80063c4 <prvUnlockQueue>
    }
 8006588:	bf00      	nop
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006590:	b580      	push	{r7, lr}
 8006592:	b08e      	sub	sp, #56	; 0x38
 8006594:	af04      	add	r7, sp, #16
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <xTaskCreateStatic+0x2a>
        __asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	623b      	str	r3, [r7, #32]
    }
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <xTaskCreateStatic+0x46>
        __asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fb      	str	r3, [r7, #28]
    }
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 80065d6:	235c      	movs	r3, #92	; 0x5c
 80065d8:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b5c      	cmp	r3, #92	; 0x5c
 80065de:	d00a      	beq.n	80065f6 <xTaskCreateStatic+0x66>
        __asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	61bb      	str	r3, [r7, #24]
    }
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065f6:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01e      	beq.n	800663c <xTaskCreateStatic+0xac>
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01b      	beq.n	800663c <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800660c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	2202      	movs	r2, #2
 8006612:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006616:	2300      	movs	r3, #0
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	9302      	str	r3, [sp, #8]
 800661e:	f107 0314 	add.w	r3, r7, #20
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f850 	bl	80066d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006636:	f000 f8e3 	bl	8006800 <prvAddNewTaskToReadyList>
 800663a:	e001      	b.n	8006640 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8006640:	697b      	ldr	r3, [r7, #20]
    }
 8006642:	4618      	mov	r0, r3
 8006644:	3728      	adds	r7, #40	; 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800664a:	b580      	push	{r7, lr}
 800664c:	b08c      	sub	sp, #48	; 0x30
 800664e:	af04      	add	r7, sp, #16
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	603b      	str	r3, [r7, #0]
 8006656:	4613      	mov	r3, r2
 8006658:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fae6 	bl	8004c30 <pvPortMalloc>
 8006664:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800666c:	205c      	movs	r0, #92	; 0x5c
 800666e:	f7fe fadf 	bl	8004c30 <pvPortMalloc>
 8006672:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
 8006680:	e005      	b.n	800668e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006682:	6978      	ldr	r0, [r7, #20]
 8006684:	f7fe fbb8 	bl	8004df8 <vPortFree>
 8006688:	e001      	b.n	800668e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800669c:	88fa      	ldrh	r2, [r7, #6]
 800669e:	2300      	movs	r3, #0
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f80e 	bl	80066d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80066b8:	69f8      	ldr	r0, [r7, #28]
 80066ba:	f000 f8a1 	bl	8006800 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80066be:	2301      	movs	r3, #1
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	e002      	b.n	80066ca <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80066ca:	69bb      	ldr	r3, [r7, #24]
    }
 80066cc:	4618      	mov	r0, r3
 80066ce:	3720      	adds	r7, #32
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	461a      	mov	r2, r3
 80066ec:	21a5      	movs	r1, #165	; 0xa5
 80066ee:	f007 fd25 	bl	800e13c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066fc:	3b01      	subs	r3, #1
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f023 0307 	bic.w	r3, r3, #7
 800670a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <prvInitialiseNewTask+0x58>
        __asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	617b      	str	r3, [r7, #20]
    }
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01f      	beq.n	8006772 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	e012      	b.n	800675e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	7819      	ldrb	r1, [r3, #0]
 8006740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	3334      	adds	r3, #52	; 0x34
 8006748:	460a      	mov	r2, r1
 800674a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d006      	beq.n	8006766 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3301      	adds	r3, #1
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b0f      	cmp	r3, #15
 8006762:	d9e9      	bls.n	8006738 <prvInitialiseNewTask+0x64>
 8006764:	e000      	b.n	8006768 <prvInitialiseNewTask+0x94>
            {
                break;
 8006766:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006770:	e003      	b.n	800677a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	2b37      	cmp	r3, #55	; 0x37
 800677e:	d901      	bls.n	8006784 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006780:	2337      	movs	r3, #55	; 0x37
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800678e:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2200      	movs	r2, #0
 8006794:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	3304      	adds	r3, #4
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc6a 	bl	8005074 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	3318      	adds	r3, #24
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe fc65 	bl	8005074 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067be:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	3354      	adds	r3, #84	; 0x54
 80067c4:	2204      	movs	r2, #4
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f007 fcb7 	bl	800e13c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	3358      	adds	r3, #88	; 0x58
 80067d2:	2201      	movs	r2, #1
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f007 fcb0 	bl	800e13c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	69b8      	ldr	r0, [r7, #24]
 80067e2:	f7fe fcdb 	bl	800519c <pxPortInitialiseStack>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80067f8:	bf00      	nop
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006800:	b5b0      	push	{r4, r5, r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af02      	add	r7, sp, #8
 8006806:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006808:	f7fe fdf6 	bl	80053f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800680c:	4b3c      	ldr	r3, [pc, #240]	; (8006900 <prvAddNewTaskToReadyList+0x100>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a3b      	ldr	r2, [pc, #236]	; (8006900 <prvAddNewTaskToReadyList+0x100>)
 8006814:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006816:	4b3b      	ldr	r3, [pc, #236]	; (8006904 <prvAddNewTaskToReadyList+0x104>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800681e:	4a39      	ldr	r2, [pc, #228]	; (8006904 <prvAddNewTaskToReadyList+0x104>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006824:	4b36      	ldr	r3, [pc, #216]	; (8006900 <prvAddNewTaskToReadyList+0x100>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d110      	bne.n	800684e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800682c:	f000 fca4 	bl	8007178 <prvInitialiseTaskLists>
 8006830:	e00d      	b.n	800684e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006832:	4b35      	ldr	r3, [pc, #212]	; (8006908 <prvAddNewTaskToReadyList+0x108>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800683a:	4b32      	ldr	r3, [pc, #200]	; (8006904 <prvAddNewTaskToReadyList+0x104>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	429a      	cmp	r2, r3
 8006846:	d802      	bhi.n	800684e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006848:	4a2e      	ldr	r2, [pc, #184]	; (8006904 <prvAddNewTaskToReadyList+0x104>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800684e:	4b2f      	ldr	r3, [pc, #188]	; (800690c <prvAddNewTaskToReadyList+0x10c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	4a2d      	ldr	r2, [pc, #180]	; (800690c <prvAddNewTaskToReadyList+0x10c>)
 8006856:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006858:	4b2c      	ldr	r3, [pc, #176]	; (800690c <prvAddNewTaskToReadyList+0x10c>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d016      	beq.n	8006894 <prvAddNewTaskToReadyList+0x94>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4618      	mov	r0, r3
 800686a:	f002 fc0b 	bl	8009084 <SEGGER_SYSVIEW_OnTaskCreate>
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	461d      	mov	r5, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461c      	mov	r4, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	1ae3      	subs	r3, r4, r3
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	462b      	mov	r3, r5
 8006890:	f002 ff2c 	bl	80096ec <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4618      	mov	r0, r3
 8006898:	f002 fc78 	bl	800918c <SEGGER_SYSVIEW_OnTaskStartReady>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4b1b      	ldr	r3, [pc, #108]	; (8006910 <prvAddNewTaskToReadyList+0x110>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d903      	bls.n	80068b0 <prvAddNewTaskToReadyList+0xb0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4a18      	ldr	r2, [pc, #96]	; (8006910 <prvAddNewTaskToReadyList+0x110>)
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <prvAddNewTaskToReadyList+0x114>)
 80068be:	441a      	add	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fe fbe1 	bl	800508e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80068cc:	f7fe fdc4 	bl	8005458 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <prvAddNewTaskToReadyList+0x108>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00e      	beq.n	80068f6 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <prvAddNewTaskToReadyList+0x104>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d207      	bcs.n	80068f6 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <prvAddNewTaskToReadyList+0x118>)
 80068e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80068f6:	bf00      	nop
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bdb0      	pop	{r4, r5, r7, pc}
 80068fe:	bf00      	nop
 8006900:	20002df0 	.word	0x20002df0
 8006904:	2000291c 	.word	0x2000291c
 8006908:	20002dfc 	.word	0x20002dfc
 800690c:	20002e0c 	.word	0x20002e0c
 8006910:	20002df8 	.word	0x20002df8
 8006914:	20002920 	.word	0x20002920
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01b      	beq.n	8006966 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <vTaskDelay+0x68>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <vTaskDelay+0x30>
        __asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	60bb      	str	r3, [r7, #8]
    }
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800694c:	f000 f898 	bl	8006a80 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	2023      	movs	r0, #35	; 0x23
 8006954:	f001 fe9a 	bl	800868c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006958:	2100      	movs	r1, #0
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fea2 	bl	80076a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006960:	f000 f89c 	bl	8006a9c <xTaskResumeAll>
 8006964:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d107      	bne.n	800697c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <vTaskDelay+0x6c>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800697c:	bf00      	nop
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20002e18 	.word	0x20002e18
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800699a:	463a      	mov	r2, r7
 800699c:	1d39      	adds	r1, r7, #4
 800699e:	f107 0308 	add.w	r3, r7, #8
 80069a2:	4618      	mov	r0, r3
 80069a4:	f004 ffa2 	bl	800b8ec <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	9202      	str	r2, [sp, #8]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	2300      	movs	r3, #0
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	2300      	movs	r3, #0
 80069b8:	460a      	mov	r2, r1
 80069ba:	4929      	ldr	r1, [pc, #164]	; (8006a60 <vTaskStartScheduler+0xd4>)
 80069bc:	4829      	ldr	r0, [pc, #164]	; (8006a64 <vTaskStartScheduler+0xd8>)
 80069be:	f7ff fde7 	bl	8006590 <xTaskCreateStatic>
 80069c2:	4603      	mov	r3, r0
 80069c4:	4a28      	ldr	r2, [pc, #160]	; (8006a68 <vTaskStartScheduler+0xdc>)
 80069c6:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 80069c8:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <vTaskStartScheduler+0xdc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e001      	b.n	80069da <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d102      	bne.n	80069e6 <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 80069e0:	f000 fec0 	bl	8007764 <xTimerCreateTimerTask>
 80069e4:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d124      	bne.n	8006a36 <vTaskStartScheduler+0xaa>
        __asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	613b      	str	r3, [r7, #16]
    }
 80069fe:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006a00:	4b1a      	ldr	r3, [pc, #104]	; (8006a6c <vTaskStartScheduler+0xe0>)
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a06:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <vTaskStartScheduler+0xe4>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a0e:	4b19      	ldr	r3, [pc, #100]	; (8006a74 <vTaskStartScheduler+0xe8>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006a14:	4b18      	ldr	r3, [pc, #96]	; (8006a78 <vTaskStartScheduler+0xec>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <vTaskStartScheduler+0xdc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d102      	bne.n	8006a26 <vTaskStartScheduler+0x9a>
 8006a20:	f002 fb14 	bl	800904c <SEGGER_SYSVIEW_OnIdle>
 8006a24:	e004      	b.n	8006a30 <vTaskStartScheduler+0xa4>
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <vTaskStartScheduler+0xec>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f002 fb6c 	bl	8009108 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006a30:	f7fe fc40 	bl	80052b4 <xPortStartScheduler>
 8006a34:	e00e      	b.n	8006a54 <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a3c:	d10a      	bne.n	8006a54 <vTaskStartScheduler+0xc8>
        __asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	60fb      	str	r3, [r7, #12]
    }
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006a54:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <vTaskStartScheduler+0xf0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	0800ea80 	.word	0x0800ea80
 8006a64:	08007149 	.word	0x08007149
 8006a68:	20002e14 	.word	0x20002e14
 8006a6c:	20002e10 	.word	0x20002e10
 8006a70:	20002dfc 	.word	0x20002dfc
 8006a74:	20002df4 	.word	0x20002df4
 8006a78:	2000291c 	.word	0x2000291c
 8006a7c:	2000000c 	.word	0x2000000c

08006a80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <vTaskSuspendAll+0x18>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a03      	ldr	r2, [pc, #12]	; (8006a98 <vTaskSuspendAll+0x18>)
 8006a8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006a8e:	bf00      	nop
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	20002e18 	.word	0x20002e18

08006a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006aaa:	4b44      	ldr	r3, [pc, #272]	; (8006bbc <xTaskResumeAll+0x120>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <xTaskResumeAll+0x2c>
        __asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	603b      	str	r3, [r7, #0]
    }
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006ac8:	f7fe fc96 	bl	80053f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006acc:	4b3b      	ldr	r3, [pc, #236]	; (8006bbc <xTaskResumeAll+0x120>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	4a3a      	ldr	r2, [pc, #232]	; (8006bbc <xTaskResumeAll+0x120>)
 8006ad4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad6:	4b39      	ldr	r3, [pc, #228]	; (8006bbc <xTaskResumeAll+0x120>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d166      	bne.n	8006bac <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ade:	4b38      	ldr	r3, [pc, #224]	; (8006bc0 <xTaskResumeAll+0x124>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d062      	beq.n	8006bac <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ae6:	e033      	b.n	8006b50 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae8:	4b36      	ldr	r3, [pc, #216]	; (8006bc4 <xTaskResumeAll+0x128>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3318      	adds	r3, #24
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fb27 	bl	8005148 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fb22 	bl	8005148 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 fb40 	bl	800918c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	4b2d      	ldr	r3, [pc, #180]	; (8006bc8 <xTaskResumeAll+0x12c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d903      	bls.n	8006b20 <xTaskResumeAll+0x84>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	4a2a      	ldr	r2, [pc, #168]	; (8006bc8 <xTaskResumeAll+0x12c>)
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4a27      	ldr	r2, [pc, #156]	; (8006bcc <xTaskResumeAll+0x130>)
 8006b2e:	441a      	add	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f7fe faa9 	bl	800508e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4b23      	ldr	r3, [pc, #140]	; (8006bd0 <xTaskResumeAll+0x134>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d302      	bcc.n	8006b50 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8006b4a:	4b22      	ldr	r3, [pc, #136]	; (8006bd4 <xTaskResumeAll+0x138>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b50:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <xTaskResumeAll+0x128>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1c7      	bne.n	8006ae8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006b5e:	f000 fbe1 	bl	8007324 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <xTaskResumeAll+0x13c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006b6e:	f000 f859 	bl	8006c24 <xTaskIncrementTick>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8006b78:	4b16      	ldr	r3, [pc, #88]	; (8006bd4 <xTaskResumeAll+0x138>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f1      	bne.n	8006b6e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8006b8a:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <xTaskResumeAll+0x13c>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006b90:	4b10      	ldr	r3, [pc, #64]	; (8006bd4 <xTaskResumeAll+0x138>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d009      	beq.n	8006bac <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <xTaskResumeAll+0x140>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006bac:	f7fe fc54 	bl	8005458 <vPortExitCritical>

    return xAlreadyYielded;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20002e18 	.word	0x20002e18
 8006bc0:	20002df0 	.word	0x20002df0
 8006bc4:	20002db0 	.word	0x20002db0
 8006bc8:	20002df8 	.word	0x20002df8
 8006bcc:	20002920 	.word	0x20002920
 8006bd0:	2000291c 	.word	0x2000291c
 8006bd4:	20002e04 	.word	0x20002e04
 8006bd8:	20002e00 	.word	0x20002e00
 8006bdc:	e000ed04 	.word	0xe000ed04

08006be0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006be6:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <xTaskGetTickCount+0x1c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006bec:	687b      	ldr	r3, [r7, #4]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	20002df4 	.word	0x20002df4

08006c00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c06:	f7fe fce1 	bl	80055cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <xTaskGetTickCountFromISR+0x20>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006c14:	683b      	ldr	r3, [r7, #0]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20002df4 	.word	0x20002df4

08006c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c2e:	4b51      	ldr	r3, [pc, #324]	; (8006d74 <xTaskIncrementTick+0x150>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 8093 	bne.w	8006d5e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c38:	4b4f      	ldr	r3, [pc, #316]	; (8006d78 <xTaskIncrementTick+0x154>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006c40:	4a4d      	ldr	r2, [pc, #308]	; (8006d78 <xTaskIncrementTick+0x154>)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d120      	bne.n	8006c8e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006c4c:	4b4b      	ldr	r3, [pc, #300]	; (8006d7c <xTaskIncrementTick+0x158>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <xTaskIncrementTick+0x48>
        __asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	603b      	str	r3, [r7, #0]
    }
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <xTaskIncrementTick+0x46>
 8006c6c:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <xTaskIncrementTick+0x158>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	4b43      	ldr	r3, [pc, #268]	; (8006d80 <xTaskIncrementTick+0x15c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a41      	ldr	r2, [pc, #260]	; (8006d7c <xTaskIncrementTick+0x158>)
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4a41      	ldr	r2, [pc, #260]	; (8006d80 <xTaskIncrementTick+0x15c>)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4b40      	ldr	r3, [pc, #256]	; (8006d84 <xTaskIncrementTick+0x160>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a3f      	ldr	r2, [pc, #252]	; (8006d84 <xTaskIncrementTick+0x160>)
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	f000 fb4b 	bl	8007324 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006c8e:	4b3e      	ldr	r3, [pc, #248]	; (8006d88 <xTaskIncrementTick+0x164>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d34d      	bcc.n	8006d34 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c98:	4b38      	ldr	r3, [pc, #224]	; (8006d7c <xTaskIncrementTick+0x158>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d104      	bne.n	8006cac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca2:	4b39      	ldr	r3, [pc, #228]	; (8006d88 <xTaskIncrementTick+0x164>)
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ca8:	601a      	str	r2, [r3, #0]
                    break;
 8006caa:	e043      	b.n	8006d34 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cac:	4b33      	ldr	r3, [pc, #204]	; (8006d7c <xTaskIncrementTick+0x158>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d203      	bcs.n	8006ccc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006cc4:	4a30      	ldr	r2, [pc, #192]	; (8006d88 <xTaskIncrementTick+0x164>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cca:	e033      	b.n	8006d34 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fa39 	bl	8005148 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	3318      	adds	r3, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fa30 	bl	8005148 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f002 fa4e 	bl	800918c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	4b25      	ldr	r3, [pc, #148]	; (8006d8c <xTaskIncrementTick+0x168>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d903      	bls.n	8006d04 <xTaskIncrementTick+0xe0>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <xTaskIncrementTick+0x168>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <xTaskIncrementTick+0x16c>)
 8006d12:	441a      	add	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe f9b7 	bl	800508e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d24:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <xTaskIncrementTick+0x170>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d3b4      	bcc.n	8006c98 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d32:	e7b1      	b.n	8006c98 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d34:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <xTaskIncrementTick+0x170>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3a:	4915      	ldr	r1, [pc, #84]	; (8006d90 <xTaskIncrementTick+0x16c>)
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	440b      	add	r3, r1
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d901      	bls.n	8006d50 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006d50:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <xTaskIncrementTick+0x174>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d007      	beq.n	8006d68 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e004      	b.n	8006d68 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <xTaskIncrementTick+0x178>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a0d      	ldr	r2, [pc, #52]	; (8006d9c <xTaskIncrementTick+0x178>)
 8006d66:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006d68:	697b      	ldr	r3, [r7, #20]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20002e18 	.word	0x20002e18
 8006d78:	20002df4 	.word	0x20002df4
 8006d7c:	20002da8 	.word	0x20002da8
 8006d80:	20002dac 	.word	0x20002dac
 8006d84:	20002e08 	.word	0x20002e08
 8006d88:	20002e10 	.word	0x20002e10
 8006d8c:	20002df8 	.word	0x20002df8
 8006d90:	20002920 	.word	0x20002920
 8006d94:	2000291c 	.word	0x2000291c
 8006d98:	20002e04 	.word	0x20002e04
 8006d9c:	20002e00 	.word	0x20002e00

08006da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006da6:	4b41      	ldr	r3, [pc, #260]	; (8006eac <vTaskSwitchContext+0x10c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006dae:	4b40      	ldr	r3, [pc, #256]	; (8006eb0 <vTaskSwitchContext+0x110>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006db4:	e076      	b.n	8006ea4 <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <vTaskSwitchContext+0x110>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8006dbc:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <vTaskSwitchContext+0x114>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d111      	bne.n	8006df8 <vTaskSwitchContext+0x58>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d10b      	bne.n	8006df8 <vTaskSwitchContext+0x58>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	3308      	adds	r3, #8
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d105      	bne.n	8006df8 <vTaskSwitchContext+0x58>
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	330c      	adds	r3, #12
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d008      	beq.n	8006e0a <vTaskSwitchContext+0x6a>
 8006df8:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <vTaskSwitchContext+0x114>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b2d      	ldr	r3, [pc, #180]	; (8006eb4 <vTaskSwitchContext+0x114>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3334      	adds	r3, #52	; 0x34
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f004 fd61 	bl	800b8cc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0a:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <vTaskSwitchContext+0x118>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e010      	b.n	8006e34 <vTaskSwitchContext+0x94>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <vTaskSwitchContext+0x8e>
        __asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	607b      	str	r3, [r7, #4]
    }
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <vTaskSwitchContext+0x8c>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	4921      	ldr	r1, [pc, #132]	; (8006ebc <vTaskSwitchContext+0x11c>)
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0e4      	beq.n	8006e12 <vTaskSwitchContext+0x72>
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <vTaskSwitchContext+0x11c>)
 8006e54:	4413      	add	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d104      	bne.n	8006e78 <vTaskSwitchContext+0xd8>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	605a      	str	r2, [r3, #4]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	4a0d      	ldr	r2, [pc, #52]	; (8006eb4 <vTaskSwitchContext+0x114>)
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4a0d      	ldr	r2, [pc, #52]	; (8006eb8 <vTaskSwitchContext+0x118>)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <vTaskSwitchContext+0x114>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <vTaskSwitchContext+0x120>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d102      	bne.n	8006e9a <vTaskSwitchContext+0xfa>
 8006e94:	f002 f8da 	bl	800904c <SEGGER_SYSVIEW_OnIdle>
}
 8006e98:	e004      	b.n	8006ea4 <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <vTaskSwitchContext+0x114>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f002 f932 	bl	8009108 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006ea4:	bf00      	nop
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20002e18 	.word	0x20002e18
 8006eb0:	20002e04 	.word	0x20002e04
 8006eb4:	2000291c 	.word	0x2000291c
 8006eb8:	20002df8 	.word	0x20002df8
 8006ebc:	20002920 	.word	0x20002920
 8006ec0:	20002e14 	.word	0x20002e14

08006ec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	60fb      	str	r3, [r7, #12]
    }
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <vTaskPlaceOnEventList+0x44>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3318      	adds	r3, #24
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe f8ef 	bl	80050d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ef8:	2101      	movs	r1, #1
 8006efa:	6838      	ldr	r0, [r7, #0]
 8006efc:	f000 fbd2 	bl	80076a4 <prvAddCurrentTaskToDelayedList>
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	2000291c 	.word	0x2000291c

08006f0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	617b      	str	r3, [r7, #20]
    }
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f34:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <vTaskPlaceOnEventListRestricted+0x58>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3318      	adds	r3, #24
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7fe f8a6 	bl	800508e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f4c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006f4e:	2024      	movs	r0, #36	; 0x24
 8006f50:	f001 fb7e 	bl	8008650 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	68b8      	ldr	r0, [r7, #8]
 8006f58:	f000 fba4 	bl	80076a4 <prvAddCurrentTaskToDelayedList>
    }
 8006f5c:	bf00      	nop
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	2000291c 	.word	0x2000291c

08006f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60fb      	str	r3, [r7, #12]
    }
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3318      	adds	r3, #24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe f8d5 	bl	8005148 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9e:	4b20      	ldr	r3, [pc, #128]	; (8007020 <xTaskRemoveFromEventList+0xb8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d121      	bne.n	8006fea <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe f8cc 	bl	8005148 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f002 f8ea 	bl	800918c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4b19      	ldr	r3, [pc, #100]	; (8007024 <xTaskRemoveFromEventList+0xbc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d903      	bls.n	8006fcc <xTaskRemoveFromEventList+0x64>
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	4a16      	ldr	r2, [pc, #88]	; (8007024 <xTaskRemoveFromEventList+0xbc>)
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4a13      	ldr	r2, [pc, #76]	; (8007028 <xTaskRemoveFromEventList+0xc0>)
 8006fda:	441a      	add	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fe f853 	bl	800508e <vListInsertEnd>
 8006fe8:	e005      	b.n	8006ff6 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3318      	adds	r3, #24
 8006fee:	4619      	mov	r1, r3
 8006ff0:	480e      	ldr	r0, [pc, #56]	; (800702c <xTaskRemoveFromEventList+0xc4>)
 8006ff2:	f7fe f84c 	bl	800508e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <xTaskRemoveFromEventList+0xc8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	429a      	cmp	r2, r3
 8007002:	d905      	bls.n	8007010 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <xTaskRemoveFromEventList+0xcc>)
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e001      	b.n	8007014 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007014:	697b      	ldr	r3, [r7, #20]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20002e18 	.word	0x20002e18
 8007024:	20002df8 	.word	0x20002df8
 8007028:	20002920 	.word	0x20002920
 800702c:	20002db0 	.word	0x20002db0
 8007030:	2000291c 	.word	0x2000291c
 8007034:	20002e04 	.word	0x20002e04

08007038 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <vTaskInternalSetTimeOutState+0x24>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <vTaskInternalSetTimeOutState+0x28>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	605a      	str	r2, [r3, #4]
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20002e08 	.word	0x20002e08
 8007060:	20002df4 	.word	0x20002df4

08007064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	613b      	str	r3, [r7, #16]
    }
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
    }
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80070a6:	f7fe f9a7 	bl	80053f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80070aa:	4b1f      	ldr	r3, [pc, #124]	; (8007128 <xTaskCheckForTimeOut+0xc4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c2:	d102      	bne.n	80070ca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	e026      	b.n	8007118 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b17      	ldr	r3, [pc, #92]	; (800712c <xTaskCheckForTimeOut+0xc8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d00a      	beq.n	80070ec <xTaskCheckForTimeOut+0x88>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d305      	bcc.n	80070ec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e015      	b.n	8007118 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d20b      	bcs.n	800710e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	1ad2      	subs	r2, r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff ff98 	bl	8007038 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e004      	b.n	8007118 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007118:	f7fe f99e 	bl	8005458 <vPortExitCritical>

    return xReturn;
 800711c:	69fb      	ldr	r3, [r7, #28]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20002df4 	.word	0x20002df4
 800712c:	20002e08 	.word	0x20002e08

08007130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007134:	4b03      	ldr	r3, [pc, #12]	; (8007144 <vTaskMissedYield+0x14>)
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]
}
 800713a:	bf00      	nop
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	20002e04 	.word	0x20002e04

08007148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007150:	f000 f852 	bl	80071f8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <prvIdleTask+0x28>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d9f9      	bls.n	8007150 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <prvIdleTask+0x2c>)
 800715e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800716c:	e7f0      	b.n	8007150 <prvIdleTask+0x8>
 800716e:	bf00      	nop
 8007170:	20002920 	.word	0x20002920
 8007174:	e000ed04 	.word	0xe000ed04

08007178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800717e:	2300      	movs	r3, #0
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	e00c      	b.n	800719e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <prvInitialiseTaskLists+0x60>)
 8007190:	4413      	add	r3, r2
 8007192:	4618      	mov	r0, r3
 8007194:	f7fd ff4e 	bl	8005034 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3301      	adds	r3, #1
 800719c:	607b      	str	r3, [r7, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b37      	cmp	r3, #55	; 0x37
 80071a2:	d9ef      	bls.n	8007184 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80071a4:	480d      	ldr	r0, [pc, #52]	; (80071dc <prvInitialiseTaskLists+0x64>)
 80071a6:	f7fd ff45 	bl	8005034 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80071aa:	480d      	ldr	r0, [pc, #52]	; (80071e0 <prvInitialiseTaskLists+0x68>)
 80071ac:	f7fd ff42 	bl	8005034 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80071b0:	480c      	ldr	r0, [pc, #48]	; (80071e4 <prvInitialiseTaskLists+0x6c>)
 80071b2:	f7fd ff3f 	bl	8005034 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80071b6:	480c      	ldr	r0, [pc, #48]	; (80071e8 <prvInitialiseTaskLists+0x70>)
 80071b8:	f7fd ff3c 	bl	8005034 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80071bc:	480b      	ldr	r0, [pc, #44]	; (80071ec <prvInitialiseTaskLists+0x74>)
 80071be:	f7fd ff39 	bl	8005034 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80071c2:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <prvInitialiseTaskLists+0x78>)
 80071c4:	4a05      	ldr	r2, [pc, #20]	; (80071dc <prvInitialiseTaskLists+0x64>)
 80071c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <prvInitialiseTaskLists+0x7c>)
 80071ca:	4a05      	ldr	r2, [pc, #20]	; (80071e0 <prvInitialiseTaskLists+0x68>)
 80071cc:	601a      	str	r2, [r3, #0]
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20002920 	.word	0x20002920
 80071dc:	20002d80 	.word	0x20002d80
 80071e0:	20002d94 	.word	0x20002d94
 80071e4:	20002db0 	.word	0x20002db0
 80071e8:	20002dc4 	.word	0x20002dc4
 80071ec:	20002ddc 	.word	0x20002ddc
 80071f0:	20002da8 	.word	0x20002da8
 80071f4:	20002dac 	.word	0x20002dac

080071f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071fe:	e019      	b.n	8007234 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007200:	f7fe f8fa 	bl	80053f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007204:	4b10      	ldr	r3, [pc, #64]	; (8007248 <prvCheckTasksWaitingTermination+0x50>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd ff99 	bl	8005148 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <prvCheckTasksWaitingTermination+0x54>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3b01      	subs	r3, #1
 800721c:	4a0b      	ldr	r2, [pc, #44]	; (800724c <prvCheckTasksWaitingTermination+0x54>)
 800721e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <prvCheckTasksWaitingTermination+0x58>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3b01      	subs	r3, #1
 8007226:	4a0a      	ldr	r2, [pc, #40]	; (8007250 <prvCheckTasksWaitingTermination+0x58>)
 8007228:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800722a:	f7fe f915 	bl	8005458 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f848 	bl	80072c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007234:	4b06      	ldr	r3, [pc, #24]	; (8007250 <prvCheckTasksWaitingTermination+0x58>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e1      	bne.n	8007200 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20002dc4 	.word	0x20002dc4
 800724c:	20002df0 	.word	0x20002df0
 8007250:	20002dd8 	.word	0x20002dd8

08007254 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007260:	e005      	b.n	800726e <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3301      	adds	r3, #1
 8007266:	607b      	str	r3, [r7, #4]
            ulCount++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2ba5      	cmp	r3, #165	; 0xa5
 8007274:	d0f5      	beq.n	8007262 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	089b      	lsrs	r3, r3, #2
 800727a:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	b29b      	uxth	r3, r3
    }
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <uxTaskGetStackHighWaterMark+0x14>
 800729a:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <uxTaskGetStackHighWaterMark+0x34>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	e000      	b.n	80072a2 <uxTaskGetStackHighWaterMark+0x16>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80072aa:	6938      	ldr	r0, [r7, #16]
 80072ac:	f7ff ffd2 	bl	8007254 <prvTaskCheckFreeStackSpace>
 80072b0:	4603      	mov	r3, r0
 80072b2:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80072b4:	68fb      	ldr	r3, [r7, #12]
    }
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	2000291c 	.word	0x2000291c

080072c4 <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d108      	bne.n	80072e8 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fd fd8c 	bl	8004df8 <vPortFree>
                    vPortFree( pxTCB );
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7fd fd89 	bl	8004df8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80072e6:	e018      	b.n	800731a <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d103      	bne.n	80072fa <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fd fd80 	bl	8004df8 <vPortFree>
    }
 80072f8:	e00f      	b.n	800731a <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007300:	2b02      	cmp	r3, #2
 8007302:	d00a      	beq.n	800731a <prvDeleteTCB+0x56>
        __asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	60fb      	str	r3, [r7, #12]
    }
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <prvDeleteTCB+0x54>
    }
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007328:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <prvResetNextTaskUnblockTime+0x30>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d104      	bne.n	800733c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <prvResetNextTaskUnblockTime+0x34>)
 8007334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007338:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800733a:	e005      	b.n	8007348 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <prvResetNextTaskUnblockTime+0x30>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a04      	ldr	r2, [pc, #16]	; (8007358 <prvResetNextTaskUnblockTime+0x34>)
 8007346:	6013      	str	r3, [r2, #0]
}
 8007348:	bf00      	nop
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20002da8 	.word	0x20002da8
 8007358:	20002e10 	.word	0x20002e10

0800735c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <xTaskGetSchedulerState+0x34>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d102      	bne.n	8007370 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800736a:	2301      	movs	r3, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	e008      	b.n	8007382 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007370:	4b08      	ldr	r3, [pc, #32]	; (8007394 <xTaskGetSchedulerState+0x38>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007378:	2302      	movs	r3, #2
 800737a:	607b      	str	r3, [r7, #4]
 800737c:	e001      	b.n	8007382 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800737e:	2300      	movs	r3, #0
 8007380:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007382:	687b      	ldr	r3, [r7, #4]
    }
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	20002dfc 	.word	0x20002dfc
 8007394:	20002e18 	.word	0x20002e18

08007398 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d05a      	beq.n	8007464 <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b2:	4b2f      	ldr	r3, [pc, #188]	; (8007470 <xTaskPriorityInherit+0xd8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d24a      	bcs.n	8007452 <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	db06      	blt.n	80073d2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c4:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <xTaskPriorityInherit+0xd8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6959      	ldr	r1, [r3, #20]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4a24      	ldr	r2, [pc, #144]	; (8007474 <xTaskPriorityInherit+0xdc>)
 80073e4:	4413      	add	r3, r2
 80073e6:	4299      	cmp	r1, r3
 80073e8:	d126      	bne.n	8007438 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fd feaa 	bl	8005148 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073f4:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <xTaskPriorityInherit+0xd8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fec3 	bl	800918c <SEGGER_SYSVIEW_OnTaskStartReady>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <xTaskPriorityInherit+0xe0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d903      	bls.n	800741a <xTaskPriorityInherit+0x82>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <xTaskPriorityInherit+0xe0>)
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4a13      	ldr	r2, [pc, #76]	; (8007474 <xTaskPriorityInherit+0xdc>)
 8007428:	441a      	add	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7fd fe2c 	bl	800508e <vListInsertEnd>
 8007436:	e004      	b.n	8007442 <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <xTaskPriorityInherit+0xd8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4619      	mov	r1, r3
 8007446:	2049      	movs	r0, #73	; 0x49
 8007448:	f001 f920 	bl	800868c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e008      	b.n	8007464 <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <xTaskPriorityInherit+0xd8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d201      	bcs.n	8007464 <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007464:	68fb      	ldr	r3, [r7, #12]
    }
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	2000291c 	.word	0x2000291c
 8007474:	20002920 	.word	0x20002920
 8007478:	20002df8 	.word	0x20002df8

0800747c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d05f      	beq.n	8007552 <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007492:	4b32      	ldr	r3, [pc, #200]	; (800755c <xTaskPriorityDisinherit+0xe0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	429a      	cmp	r2, r3
 800749a:	d00a      	beq.n	80074b2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	60fb      	str	r3, [r7, #12]
    }
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60bb      	str	r3, [r7, #8]
    }
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d4:	1e5a      	subs	r2, r3, #1
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d035      	beq.n	8007552 <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d131      	bne.n	8007552 <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd fe28 	bl	8005148 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4619      	mov	r1, r3
 80074fc:	204a      	movs	r0, #74	; 0x4a
 80074fe:	f001 f8c5 	bl	800868c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fe37 	bl	800918c <SEGGER_SYSVIEW_OnTaskStartReady>
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <xTaskPriorityDisinherit+0xe4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <xTaskPriorityDisinherit+0xb6>
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <xTaskPriorityDisinherit+0xe4>)
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <xTaskPriorityDisinherit+0xe8>)
 8007540:	441a      	add	r2, r3
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f7fd fda0 	bl	800508e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800754e:	2301      	movs	r3, #1
 8007550:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007552:	697b      	ldr	r3, [r7, #20]
    }
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	2000291c 	.word	0x2000291c
 8007560:	20002df8 	.word	0x20002df8
 8007564:	20002920 	.word	0x20002920

08007568 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007576:	2301      	movs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d073      	beq.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60fb      	str	r3, [r7, #12]
    }
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d902      	bls.n	80075ae <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e002      	b.n	80075b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b2:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d054      	beq.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d14f      	bne.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80075c8:	4b29      	ldr	r3, [pc, #164]	; (8007670 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d10a      	bne.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60bb      	str	r3, [r7, #8]
    }
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4619      	mov	r1, r3
 80075ec:	204a      	movs	r0, #74	; 0x4a
 80075ee:	f001 f84d 	bl	800868c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db04      	blt.n	8007610 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	6959      	ldr	r1, [r3, #20]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4a15      	ldr	r2, [pc, #84]	; (8007674 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007620:	4413      	add	r3, r2
 8007622:	4299      	cmp	r1, r3
 8007624:	d120      	bne.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3304      	adds	r3, #4
 800762a:	4618      	mov	r0, r3
 800762c:	f7fd fd8c 	bl	8005148 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fdaa 	bl	800918c <SEGGER_SYSVIEW_OnTaskStartReady>
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d903      	bls.n	800764c <vTaskPriorityDisinheritAfterTimeout+0xe4>
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	4a0b      	ldr	r2, [pc, #44]	; (8007678 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4a06      	ldr	r2, [pc, #24]	; (8007674 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800765a:	441a      	add	r2, r3
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	3304      	adds	r3, #4
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	f7fd fd13 	bl	800508e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007668:	bf00      	nop
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000291c 	.word	0x2000291c
 8007674:	20002920 	.word	0x20002920
 8007678:	20002df8 	.word	0x20002df8

0800767c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800768e:	3201      	adds	r2, #1
 8007690:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8007692:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007694:	681b      	ldr	r3, [r3, #0]
    }
 8007696:	4618      	mov	r0, r3
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	2000291c 	.word	0x2000291c

080076a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80076ae:	4b27      	ldr	r3, [pc, #156]	; (800774c <prvAddCurrentTaskToDelayedList+0xa8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076b4:	4b26      	ldr	r3, [pc, #152]	; (8007750 <prvAddCurrentTaskToDelayedList+0xac>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fd fd44 	bl	8005148 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c6:	d10a      	bne.n	80076de <prvAddCurrentTaskToDelayedList+0x3a>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <prvAddCurrentTaskToDelayedList+0xac>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	481f      	ldr	r0, [pc, #124]	; (8007754 <prvAddCurrentTaskToDelayedList+0xb0>)
 80076d8:	f7fd fcd9 	bl	800508e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80076dc:	e032      	b.n	8007744 <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076e6:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <prvAddCurrentTaskToDelayedList+0xac>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d20f      	bcs.n	8007716 <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80076f6:	4b16      	ldr	r3, [pc, #88]	; (8007750 <prvAddCurrentTaskToDelayedList+0xac>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2104      	movs	r1, #4
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fd87 	bl	8009210 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b12      	ldr	r3, [pc, #72]	; (8007750 <prvAddCurrentTaskToDelayedList+0xac>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fd fce1 	bl	80050d6 <vListInsert>
}
 8007714:	e016      	b.n	8007744 <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 8007716:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <prvAddCurrentTaskToDelayedList+0xac>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2104      	movs	r1, #4
 800771c:	4618      	mov	r0, r3
 800771e:	f001 fd77 	bl	8009210 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007722:	4b0e      	ldr	r3, [pc, #56]	; (800775c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <prvAddCurrentTaskToDelayedList+0xac>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3304      	adds	r3, #4
 800772c:	4619      	mov	r1, r3
 800772e:	4610      	mov	r0, r2
 8007730:	f7fd fcd1 	bl	80050d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007734:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	d202      	bcs.n	8007744 <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800773e:	4a08      	ldr	r2, [pc, #32]	; (8007760 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	6013      	str	r3, [r2, #0]
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20002df4 	.word	0x20002df4
 8007750:	2000291c 	.word	0x2000291c
 8007754:	20002ddc 	.word	0x20002ddc
 8007758:	20002dac 	.word	0x20002dac
 800775c:	20002da8 	.word	0x20002da8
 8007760:	20002e10 	.word	0x20002e10

08007764 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800776a:	2300      	movs	r3, #0
 800776c:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800776e:	f000 fb07 	bl	8007d80 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007772:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <xTimerCreateTimerTask+0x80>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d021      	beq.n	80077be <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007782:	1d3a      	adds	r2, r7, #4
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	f107 030c 	add.w	r3, r7, #12
 800778c:	4618      	mov	r0, r3
 800778e:	f004 f8c7 	bl	800b920 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	9202      	str	r2, [sp, #8]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	2302      	movs	r3, #2
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	2300      	movs	r3, #0
 80077a2:	460a      	mov	r2, r1
 80077a4:	4910      	ldr	r1, [pc, #64]	; (80077e8 <xTimerCreateTimerTask+0x84>)
 80077a6:	4811      	ldr	r0, [pc, #68]	; (80077ec <xTimerCreateTimerTask+0x88>)
 80077a8:	f7fe fef2 	bl	8006590 <xTaskCreateStatic>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <xTimerCreateTimerTask+0x8c>)
 80077b0:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80077b2:	4b0f      	ldr	r3, [pc, #60]	; (80077f0 <xTimerCreateTimerTask+0x8c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 80077ba:	2301      	movs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <xTimerCreateTimerTask+0x76>
        __asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	613b      	str	r3, [r7, #16]
    }
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <xTimerCreateTimerTask+0x74>
        return xReturn;
 80077da:	697b      	ldr	r3, [r7, #20]
    }
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20002e4c 	.word	0x20002e4c
 80077e8:	0800ea88 	.word	0x0800ea88
 80077ec:	08007929 	.word	0x08007929
 80077f0:	20002e50 	.word	0x20002e50

080077f4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007802:	2300      	movs	r3, #0
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xTimerGenericCommand+0x2e>
        __asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	623b      	str	r3, [r7, #32]
    }
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007822:	4b1a      	ldr	r3, [pc, #104]	; (800788c <xTimerGenericCommand+0x98>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d02a      	beq.n	8007880 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b05      	cmp	r3, #5
 800783a:	dc18      	bgt.n	800786e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800783c:	f7ff fd8e 	bl	800735c <xTaskGetSchedulerState>
 8007840:	4603      	mov	r3, r0
 8007842:	2b02      	cmp	r3, #2
 8007844:	d109      	bne.n	800785a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007846:	4b11      	ldr	r3, [pc, #68]	; (800788c <xTimerGenericCommand+0x98>)
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	f107 0110 	add.w	r1, r7, #16
 800784e:	2300      	movs	r3, #0
 8007850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007852:	f7fe f8df 	bl	8005a14 <xQueueGenericSend>
 8007856:	6278      	str	r0, [r7, #36]	; 0x24
 8007858:	e012      	b.n	8007880 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <xTimerGenericCommand+0x98>)
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	f107 0110 	add.w	r1, r7, #16
 8007862:	2300      	movs	r3, #0
 8007864:	2200      	movs	r2, #0
 8007866:	f7fe f8d5 	bl	8005a14 <xQueueGenericSend>
 800786a:	6278      	str	r0, [r7, #36]	; 0x24
 800786c:	e008      	b.n	8007880 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <xTimerGenericCommand+0x98>)
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f107 0110 	add.w	r1, r7, #16
 8007876:	2300      	movs	r3, #0
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	f7fe f9f1 	bl	8005c60 <xQueueGenericSendFromISR>
 800787e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007882:	4618      	mov	r0, r3
 8007884:	3728      	adds	r7, #40	; 0x28
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20002e4c 	.word	0x20002e4c

08007890 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789a:	4b22      	ldr	r3, [pc, #136]	; (8007924 <prvProcessExpiredTimer+0x94>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fd fc4d 	bl	8005148 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d022      	beq.n	8007902 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	18d1      	adds	r1, r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	6978      	ldr	r0, [r7, #20]
 80078ca:	f000 f8d1 	bl	8007a70 <prvInsertTimerInActiveList>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01f      	beq.n	8007914 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078d4:	2300      	movs	r3, #0
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	2300      	movs	r3, #0
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	2100      	movs	r1, #0
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f7ff ff88 	bl	80077f4 <xTimerGenericCommand>
 80078e4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d113      	bne.n	8007914 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	60fb      	str	r3, [r7, #12]
    }
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	b2da      	uxtb	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	6978      	ldr	r0, [r7, #20]
 800791a:	4798      	blx	r3
    }
 800791c:	bf00      	nop
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20002e44 	.word	0x20002e44

08007928 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007930:	f107 0308 	add.w	r3, r7, #8
 8007934:	4618      	mov	r0, r3
 8007936:	f000 f857 	bl	80079e8 <prvGetNextExpireTime>
 800793a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4619      	mov	r1, r3
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f803 	bl	800794c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007946:	f000 f8d5 	bl	8007af4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800794a:	e7f1      	b.n	8007930 <prvTimerTask+0x8>

0800794c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007956:	f7ff f893 	bl	8006a80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	4618      	mov	r0, r3
 8007960:	f000 f866 	bl	8007a30 <prvSampleTimeNow>
 8007964:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d130      	bne.n	80079ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <prvProcessTimerOrBlockTask+0x3c>
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	429a      	cmp	r2, r3
 8007978:	d806      	bhi.n	8007988 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800797a:	f7ff f88f 	bl	8006a9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ff85 	bl	8007890 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007986:	e024      	b.n	80079d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d008      	beq.n	80079a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800798e:	4b13      	ldr	r3, [pc, #76]	; (80079dc <prvProcessTimerOrBlockTask+0x90>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <prvProcessTimerOrBlockTask+0x50>
 8007998:	2301      	movs	r3, #1
 800799a:	e000      	b.n	800799e <prvProcessTimerOrBlockTask+0x52>
 800799c:	2300      	movs	r3, #0
 800799e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <prvProcessTimerOrBlockTask+0x94>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f7fe fdbb 	bl	8006528 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80079b2:	f7ff f873 	bl	8006a9c <xTaskResumeAll>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <prvProcessTimerOrBlockTask+0x98>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	f3bf 8f6f 	isb	sy
    }
 80079cc:	e001      	b.n	80079d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80079ce:	f7ff f865 	bl	8006a9c <xTaskResumeAll>
    }
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20002e48 	.word	0x20002e48
 80079e0:	20002e4c 	.word	0x20002e4c
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079f0:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <prvGetNextExpireTime+0x44>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <prvGetNextExpireTime+0x16>
 80079fa:	2201      	movs	r2, #1
 80079fc:	e000      	b.n	8007a00 <prvGetNextExpireTime+0x18>
 80079fe:	2200      	movs	r2, #0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a0c:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <prvGetNextExpireTime+0x44>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	e001      	b.n	8007a1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
    }
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	20002e44 	.word	0x20002e44

08007a30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007a38:	f7ff f8d2 	bl	8006be0 <xTaskGetTickCount>
 8007a3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <prvSampleTimeNow+0x3c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d205      	bcs.n	8007a54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007a48:	f000 f936 	bl	8007cb8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e002      	b.n	8007a5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007a5a:	4a04      	ldr	r2, [pc, #16]	; (8007a6c <prvSampleTimeNow+0x3c>)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007a60:	68fb      	ldr	r3, [r7, #12]
    }
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20002e54 	.word	0x20002e54

08007a70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d812      	bhi.n	8007abc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d302      	bcc.n	8007aaa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e01b      	b.n	8007ae2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007aaa:	4b10      	ldr	r3, [pc, #64]	; (8007aec <prvInsertTimerInActiveList+0x7c>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fd fb0e 	bl	80050d6 <vListInsert>
 8007aba:	e012      	b.n	8007ae2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d206      	bcs.n	8007ad2 <prvInsertTimerInActiveList+0x62>
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d302      	bcc.n	8007ad2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	e007      	b.n	8007ae2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <prvInsertTimerInActiveList+0x80>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fd fafa 	bl	80050d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007ae2:	697b      	ldr	r3, [r7, #20]
    }
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20002e48 	.word	0x20002e48
 8007af0:	20002e44 	.word	0x20002e44

08007af4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	; 0x38
 8007af8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007afa:	e0ca      	b.n	8007c92 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da18      	bge.n	8007b34 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b02:	1d3b      	adds	r3, r7, #4
 8007b04:	3304      	adds	r3, #4
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <prvProcessReceivedCommands+0x30>
        __asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	61fb      	str	r3, [r7, #28]
    }
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2a:	6850      	ldr	r0, [r2, #4]
 8007b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2e:	6892      	ldr	r2, [r2, #8]
 8007b30:	4611      	mov	r1, r2
 8007b32:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f2c0 80aa 	blt.w	8007c90 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd fafb 	bl	8005148 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b52:	463b      	mov	r3, r7
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff ff6b 	bl	8007a30 <prvSampleTimeNow>
 8007b5a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	f200 8097 	bhi.w	8007c92 <prvProcessReceivedCommands+0x19e>
 8007b64:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <prvProcessReceivedCommands+0x78>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007b95 	.word	0x08007b95
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007b95 	.word	0x08007b95
 8007b78:	08007c09 	.word	0x08007c09
 8007b7c:	08007c1d 	.word	0x08007c1d
 8007b80:	08007c67 	.word	0x08007c67
 8007b84:	08007b95 	.word	0x08007b95
 8007b88:	08007b95 	.word	0x08007b95
 8007b8c:	08007c09 	.word	0x08007c09
 8007b90:	08007c1d 	.word	0x08007c1d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	18d1      	adds	r1, r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb4:	f7ff ff5c 	bl	8007a70 <prvInsertTimerInActiveList>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d069      	beq.n	8007c92 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d05e      	beq.n	8007c92 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	441a      	add	r2, r3
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2300      	movs	r3, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be6:	f7ff fe05 	bl	80077f4 <xTimerGenericCommand>
 8007bea:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d14f      	bne.n	8007c92 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61bb      	str	r3, [r7, #24]
    }
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007c1a:	e03a      	b.n	8007c92 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	617b      	str	r3, [r7, #20]
    }
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	18d1      	adds	r1, r2, r3
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c60:	f7ff ff06 	bl	8007a70 <prvInsertTimerInActiveList>
                        break;
 8007c64:	e015      	b.n	8007c92 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 8007c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c76:	f7fd f8bf 	bl	8004df8 <vPortFree>
 8007c7a:	e00a      	b.n	8007c92 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c82:	f023 0301 	bic.w	r3, r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007c8e:	e000      	b.n	8007c92 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007c90:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c92:	4b08      	ldr	r3, [pc, #32]	; (8007cb4 <prvProcessReceivedCommands+0x1c0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	1d39      	adds	r1, r7, #4
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe f89e 	bl	8005ddc <xQueueReceive>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f47f af2a 	bne.w	8007afc <prvProcessReceivedCommands+0x8>
        }
    }
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	3730      	adds	r7, #48	; 0x30
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20002e4c 	.word	0x20002e4c

08007cb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cbe:	e048      	b.n	8007d52 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cc0:	4b2d      	ldr	r3, [pc, #180]	; (8007d78 <prvSwitchTimerLists+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cca:	4b2b      	ldr	r3, [pc, #172]	; (8007d78 <prvSwitchTimerLists+0xc0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fd fa35 	bl	8005148 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d02e      	beq.n	8007d52 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d90e      	bls.n	8007d24 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d12:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <prvSwitchTimerLists+0xc0>)
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f7fd f9da 	bl	80050d6 <vListInsert>
 8007d22:	e016      	b.n	8007d52 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d24:	2300      	movs	r3, #0
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7ff fd60 	bl	80077f4 <xTimerGenericCommand>
 8007d34:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	603b      	str	r3, [r7, #0]
    }
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <prvSwitchTimerLists+0xc0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1b1      	bne.n	8007cc0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <prvSwitchTimerLists+0xc0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007d62:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <prvSwitchTimerLists+0xc4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a04      	ldr	r2, [pc, #16]	; (8007d78 <prvSwitchTimerLists+0xc0>)
 8007d68:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007d6a:	4a04      	ldr	r2, [pc, #16]	; (8007d7c <prvSwitchTimerLists+0xc4>)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	6013      	str	r3, [r2, #0]
    }
 8007d70:	bf00      	nop
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	20002e44 	.word	0x20002e44
 8007d7c:	20002e48 	.word	0x20002e48

08007d80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007d86:	f7fd fb37 	bl	80053f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007d8a:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <prvCheckForValidListAndQueue+0x60>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d120      	bne.n	8007dd4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8007d92:	4814      	ldr	r0, [pc, #80]	; (8007de4 <prvCheckForValidListAndQueue+0x64>)
 8007d94:	f7fd f94e 	bl	8005034 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007d98:	4813      	ldr	r0, [pc, #76]	; (8007de8 <prvCheckForValidListAndQueue+0x68>)
 8007d9a:	f7fd f94b 	bl	8005034 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007d9e:	4b13      	ldr	r3, [pc, #76]	; (8007dec <prvCheckForValidListAndQueue+0x6c>)
 8007da0:	4a10      	ldr	r2, [pc, #64]	; (8007de4 <prvCheckForValidListAndQueue+0x64>)
 8007da2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007da4:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <prvCheckForValidListAndQueue+0x70>)
 8007da6:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <prvCheckForValidListAndQueue+0x68>)
 8007da8:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007daa:	2300      	movs	r3, #0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <prvCheckForValidListAndQueue+0x74>)
 8007db0:	4a11      	ldr	r2, [pc, #68]	; (8007df8 <prvCheckForValidListAndQueue+0x78>)
 8007db2:	2110      	movs	r1, #16
 8007db4:	200a      	movs	r0, #10
 8007db6:	f7fd fcf7 	bl	80057a8 <xQueueGenericCreateStatic>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4a08      	ldr	r2, [pc, #32]	; (8007de0 <prvCheckForValidListAndQueue+0x60>)
 8007dbe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <prvCheckForValidListAndQueue+0x60>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dc8:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <prvCheckForValidListAndQueue+0x60>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	490b      	ldr	r1, [pc, #44]	; (8007dfc <prvCheckForValidListAndQueue+0x7c>)
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fb78 	bl	80064c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007dd4:	f7fd fb40 	bl	8005458 <vPortExitCritical>
    }
 8007dd8:	bf00      	nop
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20002e4c 	.word	0x20002e4c
 8007de4:	20002e1c 	.word	0x20002e1c
 8007de8:	20002e30 	.word	0x20002e30
 8007dec:	20002e44 	.word	0x20002e44
 8007df0:	20002e48 	.word	0x20002e48
 8007df4:	20002ef8 	.word	0x20002ef8
 8007df8:	20002e58 	.word	0x20002e58
 8007dfc:	0800ea90 	.word	0x0800ea90

08007e00 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <_DoInit+0x98>)
 8007e08:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2203      	movs	r2, #3
 8007e14:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a20      	ldr	r2, [pc, #128]	; (8007e9c <_DoInit+0x9c>)
 8007e1a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a20      	ldr	r2, [pc, #128]	; (8007ea0 <_DoInit+0xa0>)
 8007e20:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e28:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <_DoInit+0x9c>)
 8007e40:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a17      	ldr	r2, [pc, #92]	; (8007ea4 <_DoInit+0xa4>)
 8007e46:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2210      	movs	r2, #16
 8007e4c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3307      	adds	r3, #7
 8007e64:	4a10      	ldr	r2, [pc, #64]	; (8007ea8 <_DoInit+0xa8>)
 8007e66:	6810      	ldr	r0, [r2, #0]
 8007e68:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007e6a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a0e      	ldr	r2, [pc, #56]	; (8007eac <_DoInit+0xac>)
 8007e72:	6810      	ldr	r0, [r2, #0]
 8007e74:	6018      	str	r0, [r3, #0]
 8007e76:	8891      	ldrh	r1, [r2, #4]
 8007e78:	7992      	ldrb	r2, [r2, #6]
 8007e7a:	8099      	strh	r1, [r3, #4]
 8007e7c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007e7e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007e88:	f3bf 8f5f 	dmb	sy
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	20002f48 	.word	0x20002f48
 8007e9c:	0800ea98 	.word	0x0800ea98
 8007ea0:	20002ff0 	.word	0x20002ff0
 8007ea4:	20003ff0 	.word	0x20003ff0
 8007ea8:	0800eaa4 	.word	0x0800eaa4
 8007eac:	0800eaa8 	.word	0x0800eaa8

08007eb0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08c      	sub	sp, #48	; 0x30
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007ebc:	4b3e      	ldr	r3, [pc, #248]	; (8007fb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8007ebe:	623b      	str	r3, [r7, #32]
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <SEGGER_RTT_ReadNoLock+0x1e>
 8007eca:	f7ff ff99 	bl	8007e00 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	4413      	add	r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	3360      	adds	r3, #96	; 0x60
 8007eda:	4a37      	ldr	r2, [pc, #220]	; (8007fb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8007edc:	4413      	add	r3, r2
 8007ede:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d92b      	bls.n	8007f54 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	bf28      	it	cs
 8007f0e:	4613      	movcs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	4413      	add	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	6939      	ldr	r1, [r7, #16]
 8007f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f22:	f006 f8fd 	bl	800e120 <memcpy>
    NumBytesRead += NumBytesRem;
 8007f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	4413      	add	r3, r2
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	4413      	add	r3, r2
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d101      	bne.n	8007f54 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8007f50:	2300      	movs	r3, #0
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4293      	cmp	r3, r2
 8007f62:	bf28      	it	cs
 8007f64:	4613      	movcs	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d019      	beq.n	8007fa2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	4413      	add	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	6939      	ldr	r1, [r7, #16]
 8007f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f7e:	f006 f8cf 	bl	800e120 <memcpy>
    NumBytesRead += NumBytesRem;
 8007f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	4413      	add	r3, r2
 8007f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	4413      	add	r3, r2
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3730      	adds	r7, #48	; 0x30
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20002f48 	.word	0x20002f48

08007fbc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007fca:	4b3d      	ldr	r3, [pc, #244]	; (80080c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <SEGGER_RTT_AllocUpBuffer+0x20>
 8007fd8:	f7ff ff12 	bl	8007e00 <_DoInit>
  SEGGER_RTT_LOCK();
 8007fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8007fe0:	f04f 0120 	mov.w	r1, #32
 8007fe4:	f381 8811 	msr	BASEPRI, r1
 8007fe8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007fea:	4b35      	ldr	r3, [pc, #212]	; (80080c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007fec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8007ff2:	6939      	ldr	r1, [r7, #16]
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	440b      	add	r3, r1
 8008002:	3304      	adds	r3, #4
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d008      	beq.n	800801c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	3301      	adds	r3, #1
 800800e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	429a      	cmp	r2, r3
 8008018:	dbeb      	blt.n	8007ff2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800801a:	e000      	b.n	800801e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800801c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	429a      	cmp	r2, r3
 8008026:	da3f      	bge.n	80080a8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008028:	6939      	ldr	r1, [r7, #16]
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	4613      	mov	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	440b      	add	r3, r1
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800803c:	6939      	ldr	r1, [r7, #16]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	4613      	mov	r3, r2
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4413      	add	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	440b      	add	r3, r1
 800804c:	3304      	adds	r3, #4
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008052:	6939      	ldr	r1, [r7, #16]
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	4613      	mov	r3, r2
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4413      	add	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	440b      	add	r3, r1
 8008060:	3320      	adds	r3, #32
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008066:	6939      	ldr	r1, [r7, #16]
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	4613      	mov	r3, r2
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	4413      	add	r3, r2
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	440b      	add	r3, r1
 8008074:	3328      	adds	r3, #40	; 0x28
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800807a:	6939      	ldr	r1, [r7, #16]
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	4613      	mov	r3, r2
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4413      	add	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	440b      	add	r3, r1
 8008088:	3324      	adds	r3, #36	; 0x24
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800808e:	6939      	ldr	r1, [r7, #16]
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	4613      	mov	r3, r2
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	4413      	add	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	440b      	add	r3, r1
 800809c:	332c      	adds	r3, #44	; 0x2c
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80080a2:	f3bf 8f5f 	dmb	sy
 80080a6:	e002      	b.n	80080ae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80080a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80080b4:	69fb      	ldr	r3, [r7, #28]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3720      	adds	r7, #32
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20002f48 	.word	0x20002f48

080080c4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	; 0x28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80080d2:	4b21      	ldr	r3, [pc, #132]	; (8008158 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80080d4:	623b      	str	r3, [r7, #32]
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80080e0:	f7ff fe8e 	bl	8007e00 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80080e4:	4b1c      	ldr	r3, [pc, #112]	; (8008158 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80080e6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d82c      	bhi.n	8008148 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80080ee:	f3ef 8311 	mrs	r3, BASEPRI
 80080f2:	f04f 0120 	mov.w	r1, #32
 80080f6:	f381 8811 	msr	BASEPRI, r1
 80080fa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4613      	mov	r3, r2
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	4413      	add	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	3360      	adds	r3, #96	; 0x60
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00e      	beq.n	8008132 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2200      	movs	r2, #0
 800812a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2200      	movs	r2, #0
 8008130:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008136:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008138:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008142:	2300      	movs	r3, #0
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
 8008146:	e002      	b.n	800814e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8008148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008150:	4618      	mov	r0, r3
 8008152:	3728      	adds	r7, #40	; 0x28
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20002f48 	.word	0x20002f48

0800815c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00f      	beq.n	8008192 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8008172:	e002      	b.n	800817a <_EncodeStr+0x1e>
      Len++;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	3301      	adds	r3, #1
 8008178:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f6      	bne.n	8008174 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	429a      	cmp	r2, r3
 800818c:	d901      	bls.n	8008192 <_EncodeStr+0x36>
      Len = Limit;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2bfe      	cmp	r3, #254	; 0xfe
 8008196:	d806      	bhi.n	80081a6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	60fa      	str	r2, [r7, #12]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	e011      	b.n	80081ca <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	60fa      	str	r2, [r7, #12]
 80081ac:	22ff      	movs	r2, #255	; 0xff
 80081ae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	60fa      	str	r2, [r7, #12]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	0a19      	lsrs	r1, r3, #8
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	60fa      	str	r2, [r7, #12]
 80081c6:	b2ca      	uxtb	r2, r1
 80081c8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80081ce:	e00a      	b.n	80081e6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	1c53      	adds	r3, r2, #1
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	1c59      	adds	r1, r3, #1
 80081da:	60f9      	str	r1, [r7, #12]
 80081dc:	7812      	ldrb	r2, [r2, #0]
 80081de:	701a      	strb	r2, [r3, #0]
    n++;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	3301      	adds	r3, #1
 80081e4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d3f0      	bcc.n	80081d0 <_EncodeStr+0x74>
  }
  return pPayload;
 80081ee:	68fb      	ldr	r3, [r7, #12]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3304      	adds	r3, #4
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800821a:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <_HandleIncomingPacket+0xe0>)
 800821c:	7e1b      	ldrb	r3, [r3, #24]
 800821e:	4618      	mov	r0, r3
 8008220:	1cfb      	adds	r3, r7, #3
 8008222:	2201      	movs	r2, #1
 8008224:	4619      	mov	r1, r3
 8008226:	f7ff fe43 	bl	8007eb0 <SEGGER_RTT_ReadNoLock>
 800822a:	4603      	mov	r3, r0
 800822c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	dd54      	ble.n	80082de <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	2b80      	cmp	r3, #128	; 0x80
 8008238:	d032      	beq.n	80082a0 <_HandleIncomingPacket+0x8c>
 800823a:	2b80      	cmp	r3, #128	; 0x80
 800823c:	dc42      	bgt.n	80082c4 <_HandleIncomingPacket+0xb0>
 800823e:	2b07      	cmp	r3, #7
 8008240:	dc16      	bgt.n	8008270 <_HandleIncomingPacket+0x5c>
 8008242:	2b00      	cmp	r3, #0
 8008244:	dd3e      	ble.n	80082c4 <_HandleIncomingPacket+0xb0>
 8008246:	3b01      	subs	r3, #1
 8008248:	2b06      	cmp	r3, #6
 800824a:	d83b      	bhi.n	80082c4 <_HandleIncomingPacket+0xb0>
 800824c:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <_HandleIncomingPacket+0x40>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	08008277 	.word	0x08008277
 8008258:	0800827d 	.word	0x0800827d
 800825c:	08008283 	.word	0x08008283
 8008260:	08008289 	.word	0x08008289
 8008264:	0800828f 	.word	0x0800828f
 8008268:	08008295 	.word	0x08008295
 800826c:	0800829b 	.word	0x0800829b
 8008270:	2b7f      	cmp	r3, #127	; 0x7f
 8008272:	d036      	beq.n	80082e2 <_HandleIncomingPacket+0xce>
 8008274:	e026      	b.n	80082c4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008276:	f000 fba7 	bl	80089c8 <SEGGER_SYSVIEW_Start>
      break;
 800827a:	e037      	b.n	80082ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800827c:	f000 fc5e 	bl	8008b3c <SEGGER_SYSVIEW_Stop>
      break;
 8008280:	e034      	b.n	80082ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008282:	f000 fe37 	bl	8008ef4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008286:	e031      	b.n	80082ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008288:	f000 fdfc 	bl	8008e84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800828c:	e02e      	b.n	80082ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800828e:	f000 fc7b 	bl	8008b88 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008292:	e02b      	b.n	80082ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008294:	f001 f8ca 	bl	800942c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008298:	e028      	b.n	80082ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800829a:	f001 f8a9 	bl	80093f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800829e:	e025      	b.n	80082ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80082a0:	4b14      	ldr	r3, [pc, #80]	; (80082f4 <_HandleIncomingPacket+0xe0>)
 80082a2:	7e1b      	ldrb	r3, [r3, #24]
 80082a4:	4618      	mov	r0, r3
 80082a6:	1cfb      	adds	r3, r7, #3
 80082a8:	2201      	movs	r2, #1
 80082aa:	4619      	mov	r1, r3
 80082ac:	f7ff fe00 	bl	8007eb0 <SEGGER_RTT_ReadNoLock>
 80082b0:	4603      	mov	r3, r0
 80082b2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dd15      	ble.n	80082e6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 f817 	bl	80092f0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80082c2:	e010      	b.n	80082e6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	b25b      	sxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	da0e      	bge.n	80082ea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <_HandleIncomingPacket+0xe0>)
 80082ce:	7e1b      	ldrb	r3, [r3, #24]
 80082d0:	4618      	mov	r0, r3
 80082d2:	1cfb      	adds	r3, r7, #3
 80082d4:	2201      	movs	r2, #1
 80082d6:	4619      	mov	r1, r3
 80082d8:	f7ff fdea 	bl	8007eb0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80082dc:	e005      	b.n	80082ea <_HandleIncomingPacket+0xd6>
    }
  }
 80082de:	bf00      	nop
 80082e0:	e004      	b.n	80082ec <_HandleIncomingPacket+0xd8>
      break;
 80082e2:	bf00      	nop
 80082e4:	e002      	b.n	80082ec <_HandleIncomingPacket+0xd8>
      break;
 80082e6:	bf00      	nop
 80082e8:	e000      	b.n	80082ec <_HandleIncomingPacket+0xd8>
      break;
 80082ea:	bf00      	nop
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20004408 	.word	0x20004408

080082f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08c      	sub	sp, #48	; 0x30
 80082fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80082fe:	2301      	movs	r3, #1
 8008300:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	3301      	adds	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800830c:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28
 8008312:	e00b      	b.n	800832c <_TrySendOverflowPacket+0x34>
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	1c59      	adds	r1, r3, #1
 800831c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800831e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	09db      	lsrs	r3, r3, #7
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	2b7f      	cmp	r3, #127	; 0x7f
 8008330:	d8f0      	bhi.n	8008314 <_TrySendOverflowPacket+0x1c>
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008342:	4b25      	ldr	r3, [pc, #148]	; (80083d8 <_TrySendOverflowPacket+0xe0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008348:	4b22      	ldr	r3, [pc, #136]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	623b      	str	r3, [r7, #32]
 800835a:	e00b      	b.n	8008374 <_TrySendOverflowPacket+0x7c>
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	1c59      	adds	r1, r3, #1
 8008364:	6279      	str	r1, [r7, #36]	; 0x24
 8008366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	09db      	lsrs	r3, r3, #7
 8008372:	623b      	str	r3, [r7, #32]
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	2b7f      	cmp	r3, #127	; 0x7f
 8008378:	d8f0      	bhi.n	800835c <_TrySendOverflowPacket+0x64>
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	627a      	str	r2, [r7, #36]	; 0x24
 8008380:	6a3a      	ldr	r2, [r7, #32]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	4618      	mov	r0, r3
 8008390:	1d3b      	adds	r3, r7, #4
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	461a      	mov	r2, r3
 8008398:	1d3b      	adds	r3, r7, #4
 800839a:	4619      	mov	r1, r3
 800839c:	f7f7 ff28 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80083a0:	4603      	mov	r3, r0
 80083a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80083aa:	4a0a      	ldr	r2, [pc, #40]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80083b0:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	e004      	b.n	80083c8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	3301      	adds	r3, #1
 80083c4:	4a03      	ldr	r2, [pc, #12]	; (80083d4 <_TrySendOverflowPacket+0xdc>)
 80083c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80083c8:	693b      	ldr	r3, [r7, #16]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3730      	adds	r7, #48	; 0x30
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20004408 	.word	0x20004408
 80083d8:	e0001004 	.word	0xe0001004

080083dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	; 0x28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80083e8:	4b6c      	ldr	r3, [pc, #432]	; (800859c <_SendPacket+0x1c0>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d010      	beq.n	8008412 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80083f0:	4b6a      	ldr	r3, [pc, #424]	; (800859c <_SendPacket+0x1c0>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80a3 	beq.w	8008540 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80083fa:	4b68      	ldr	r3, [pc, #416]	; (800859c <_SendPacket+0x1c0>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d109      	bne.n	8008416 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008402:	f7ff ff79 	bl	80082f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008406:	4b65      	ldr	r3, [pc, #404]	; (800859c <_SendPacket+0x1c0>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b01      	cmp	r3, #1
 800840c:	f040 809a 	bne.w	8008544 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8008410:	e001      	b.n	8008416 <_SendPacket+0x3a>
    goto Send;
 8008412:	bf00      	nop
 8008414:	e000      	b.n	8008418 <_SendPacket+0x3c>
Send:
 8008416:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b1f      	cmp	r3, #31
 800841c:	d809      	bhi.n	8008432 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800841e:	4b5f      	ldr	r3, [pc, #380]	; (800859c <_SendPacket+0x1c0>)
 8008420:	69da      	ldr	r2, [r3, #28]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	fa22 f303 	lsr.w	r3, r2, r3
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 808b 	bne.w	8008548 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b17      	cmp	r3, #23
 8008436:	d807      	bhi.n	8008448 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b01      	subs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	b2da      	uxtb	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e03d      	b.n	80084c4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	2b7f      	cmp	r3, #127	; 0x7f
 8008454:	d912      	bls.n	800847c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	09da      	lsrs	r2, r3, #7
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3b01      	subs	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	3a01      	subs	r2, #1
 800846e:	60fa      	str	r2, [r7, #12]
 8008470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008474:	b2da      	uxtb	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	701a      	strb	r2, [r3, #0]
 800847a:	e006      	b.n	800848a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3b01      	subs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	b2da      	uxtb	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b7f      	cmp	r3, #127	; 0x7f
 800848e:	d912      	bls.n	80084b6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	09da      	lsrs	r2, r3, #7
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3b01      	subs	r3, #1
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	3a01      	subs	r2, #1
 80084a8:	60fa      	str	r2, [r7, #12]
 80084aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	e006      	b.n	80084c4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <_SendPacket+0x1c4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80084ca:	4b34      	ldr	r3, [pc, #208]	; (800859c <_SendPacket+0x1c0>)
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	623b      	str	r3, [r7, #32]
 80084dc:	e00b      	b.n	80084f6 <_SendPacket+0x11a>
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	1c59      	adds	r1, r3, #1
 80084e6:	6279      	str	r1, [r7, #36]	; 0x24
 80084e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	09db      	lsrs	r3, r3, #7
 80084f4:	623b      	str	r3, [r7, #32]
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	2b7f      	cmp	r3, #127	; 0x7f
 80084fa:	d8f0      	bhi.n	80084de <_SendPacket+0x102>
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	627a      	str	r2, [r7, #36]	; 0x24
 8008502:	6a3a      	ldr	r2, [r7, #32]
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800850c:	4b23      	ldr	r3, [pc, #140]	; (800859c <_SendPacket+0x1c0>)
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	4618      	mov	r0, r3
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	461a      	mov	r2, r3
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	f7f7 fe68 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008520:	4603      	mov	r3, r0
 8008522:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800852a:	4a1c      	ldr	r2, [pc, #112]	; (800859c <_SendPacket+0x1c0>)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	60d3      	str	r3, [r2, #12]
 8008530:	e00b      	b.n	800854a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008532:	4b1a      	ldr	r3, [pc, #104]	; (800859c <_SendPacket+0x1c0>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	3301      	adds	r3, #1
 8008538:	b2da      	uxtb	r2, r3
 800853a:	4b18      	ldr	r3, [pc, #96]	; (800859c <_SendPacket+0x1c0>)
 800853c:	701a      	strb	r2, [r3, #0]
 800853e:	e004      	b.n	800854a <_SendPacket+0x16e>
    goto SendDone;
 8008540:	bf00      	nop
 8008542:	e002      	b.n	800854a <_SendPacket+0x16e>
      goto SendDone;
 8008544:	bf00      	nop
 8008546:	e000      	b.n	800854a <_SendPacket+0x16e>
      goto SendDone;
 8008548:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800854a:	4b14      	ldr	r3, [pc, #80]	; (800859c <_SendPacket+0x1c0>)
 800854c:	7e1b      	ldrb	r3, [r3, #24]
 800854e:	4619      	mov	r1, r3
 8008550:	4a14      	ldr	r2, [pc, #80]	; (80085a4 <_SendPacket+0x1c8>)
 8008552:	460b      	mov	r3, r1
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	440b      	add	r3, r1
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	4413      	add	r3, r2
 800855c:	336c      	adds	r3, #108	; 0x6c
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	4b0e      	ldr	r3, [pc, #56]	; (800859c <_SendPacket+0x1c0>)
 8008562:	7e1b      	ldrb	r3, [r3, #24]
 8008564:	4618      	mov	r0, r3
 8008566:	490f      	ldr	r1, [pc, #60]	; (80085a4 <_SendPacket+0x1c8>)
 8008568:	4603      	mov	r3, r0
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	4403      	add	r3, r0
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	440b      	add	r3, r1
 8008572:	3370      	adds	r3, #112	; 0x70
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d00b      	beq.n	8008592 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800857a:	4b08      	ldr	r3, [pc, #32]	; (800859c <_SendPacket+0x1c0>)
 800857c:	789b      	ldrb	r3, [r3, #2]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d107      	bne.n	8008592 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <_SendPacket+0x1c0>)
 8008584:	2201      	movs	r2, #1
 8008586:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008588:	f7ff fe44 	bl	8008214 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800858c:	4b03      	ldr	r3, [pc, #12]	; (800859c <_SendPacket+0x1c0>)
 800858e:	2200      	movs	r2, #0
 8008590:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008592:	bf00      	nop
 8008594:	3728      	adds	r7, #40	; 0x28
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20004408 	.word	0x20004408
 80085a0:	e0001004 	.word	0xe0001004
 80085a4:	20002f48 	.word	0x20002f48

080085a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80085b6:	2300      	movs	r3, #0
 80085b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085bc:	4917      	ldr	r1, [pc, #92]	; (800861c <SEGGER_SYSVIEW_Init+0x74>)
 80085be:	4818      	ldr	r0, [pc, #96]	; (8008620 <SEGGER_SYSVIEW_Init+0x78>)
 80085c0:	f7ff fcfc 	bl	8007fbc <SEGGER_RTT_AllocUpBuffer>
 80085c4:	4603      	mov	r3, r0
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	4b16      	ldr	r3, [pc, #88]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80085cc:	4b15      	ldr	r3, [pc, #84]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085ce:	785a      	ldrb	r2, [r3, #1]
 80085d0:	4b14      	ldr	r3, [pc, #80]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80085d4:	4b13      	ldr	r3, [pc, #76]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085d6:	7e1b      	ldrb	r3, [r3, #24]
 80085d8:	4618      	mov	r0, r3
 80085da:	2300      	movs	r3, #0
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	2308      	movs	r3, #8
 80085e0:	4a11      	ldr	r2, [pc, #68]	; (8008628 <SEGGER_SYSVIEW_Init+0x80>)
 80085e2:	490f      	ldr	r1, [pc, #60]	; (8008620 <SEGGER_SYSVIEW_Init+0x78>)
 80085e4:	f7ff fd6e 	bl	80080c4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80085e8:	4b0e      	ldr	r3, [pc, #56]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <SEGGER_SYSVIEW_Init+0x84>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a0c      	ldr	r2, [pc, #48]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80085f6:	4a0b      	ldr	r2, [pc, #44]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80085fc:	4a09      	ldr	r2, [pc, #36]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008602:	4a08      	ldr	r2, [pc, #32]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008608:	4a06      	ldr	r2, [pc, #24]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <SEGGER_SYSVIEW_Init+0x7c>)
 8008610:	2200      	movs	r2, #0
 8008612:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20004000 	.word	0x20004000
 8008620:	0800eab0 	.word	0x0800eab0
 8008624:	20004408 	.word	0x20004408
 8008628:	20004400 	.word	0x20004400
 800862c:	e0001004 	.word	0xe0001004

08008630 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008638:	4a04      	ldr	r2, [pc, #16]	; (800864c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6113      	str	r3, [r2, #16]
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20004408 	.word	0x20004408

08008650 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008658:	f3ef 8311 	mrs	r3, BASEPRI
 800865c:	f04f 0120 	mov.w	r1, #32
 8008660:	f381 8811 	msr	BASEPRI, r1
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	4808      	ldr	r0, [pc, #32]	; (8008688 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008668:	f7ff fdc8 	bl	80081fc <_PreparePacket>
 800866c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68b8      	ldr	r0, [r7, #8]
 8008674:	f7ff feb2 	bl	80083dc <_SendPacket>
  RECORD_END();
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f383 8811 	msr	BASEPRI, r3
}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20004438 	.word	0x20004438

0800868c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008696:	f3ef 8311 	mrs	r3, BASEPRI
 800869a:	f04f 0120 	mov.w	r1, #32
 800869e:	f381 8811 	msr	BASEPRI, r1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	4816      	ldr	r0, [pc, #88]	; (8008700 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80086a6:	f7ff fda9 	bl	80081fc <_PreparePacket>
 80086aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	61fb      	str	r3, [r7, #28]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	e00b      	b.n	80086d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	61f9      	str	r1, [r7, #28]
 80086c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	09db      	lsrs	r3, r3, #7
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	2b7f      	cmp	r3, #127	; 0x7f
 80086d6:	d8f0      	bhi.n	80086ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	61fa      	str	r2, [r7, #28]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	6938      	ldr	r0, [r7, #16]
 80086ee:	f7ff fe75 	bl	80083dc <_SendPacket>
  RECORD_END();
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f383 8811 	msr	BASEPRI, r3
}
 80086f8:	bf00      	nop
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20004438 	.word	0x20004438

08008704 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b08c      	sub	sp, #48	; 0x30
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008710:	f3ef 8311 	mrs	r3, BASEPRI
 8008714:	f04f 0120 	mov.w	r1, #32
 8008718:	f381 8811 	msr	BASEPRI, r1
 800871c:	61fb      	str	r3, [r7, #28]
 800871e:	4825      	ldr	r0, [pc, #148]	; (80087b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008720:	f7ff fd6c 	bl	80081fc <_PreparePacket>
 8008724:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
 8008732:	e00b      	b.n	800874c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	b2da      	uxtb	r2, r3
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	1c59      	adds	r1, r3, #1
 800873c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800873e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	701a      	strb	r2, [r3, #0]
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	09db      	lsrs	r3, r3, #7
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	2b7f      	cmp	r3, #127	; 0x7f
 8008750:	d8f0      	bhi.n	8008734 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	623b      	str	r3, [r7, #32]
 800876a:	e00b      	b.n	8008784 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	b2da      	uxtb	r2, r3
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	1c59      	adds	r1, r3, #1
 8008774:	6279      	str	r1, [r7, #36]	; 0x24
 8008776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	09db      	lsrs	r3, r3, #7
 8008782:	623b      	str	r3, [r7, #32]
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	2b7f      	cmp	r3, #127	; 0x7f
 8008788:	d8f0      	bhi.n	800876c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	627a      	str	r2, [r7, #36]	; 0x24
 8008790:	6a3a      	ldr	r2, [r7, #32]
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	6979      	ldr	r1, [r7, #20]
 800879e:	69b8      	ldr	r0, [r7, #24]
 80087a0:	f7ff fe1c 	bl	80083dc <_SendPacket>
  RECORD_END();
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f383 8811 	msr	BASEPRI, r3
}
 80087aa:	bf00      	nop
 80087ac:	3730      	adds	r7, #48	; 0x30
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20004438 	.word	0x20004438

080087b8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08e      	sub	sp, #56	; 0x38
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80087c6:	f3ef 8311 	mrs	r3, BASEPRI
 80087ca:	f04f 0120 	mov.w	r1, #32
 80087ce:	f381 8811 	msr	BASEPRI, r1
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	4832      	ldr	r0, [pc, #200]	; (80088a0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80087d6:	f7ff fd11 	bl	80081fc <_PreparePacket>
 80087da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	633b      	str	r3, [r7, #48]	; 0x30
 80087e8:	e00b      	b.n	8008802 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	1c59      	adds	r1, r3, #1
 80087f2:	6379      	str	r1, [r7, #52]	; 0x34
 80087f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	09db      	lsrs	r3, r3, #7
 8008800:	633b      	str	r3, [r7, #48]	; 0x30
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	2b7f      	cmp	r3, #127	; 0x7f
 8008806:	d8f0      	bhi.n	80087ea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8008808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	637a      	str	r2, [r7, #52]	; 0x34
 800880e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008820:	e00b      	b.n	800883a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	b2da      	uxtb	r2, r3
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	1c59      	adds	r1, r3, #1
 800882a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800882c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	09db      	lsrs	r3, r3, #7
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	2b7f      	cmp	r3, #127	; 0x7f
 800883e:	d8f0      	bhi.n	8008822 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	623b      	str	r3, [r7, #32]
 8008858:	e00b      	b.n	8008872 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	b2da      	uxtb	r2, r3
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	1c59      	adds	r1, r3, #1
 8008862:	6279      	str	r1, [r7, #36]	; 0x24
 8008864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	09db      	lsrs	r3, r3, #7
 8008870:	623b      	str	r3, [r7, #32]
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	2b7f      	cmp	r3, #127	; 0x7f
 8008876:	d8f0      	bhi.n	800885a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	627a      	str	r2, [r7, #36]	; 0x24
 800887e:	6a3a      	ldr	r2, [r7, #32]
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	6979      	ldr	r1, [r7, #20]
 800888c:	69b8      	ldr	r0, [r7, #24]
 800888e:	f7ff fda5 	bl	80083dc <_SendPacket>
  RECORD_END();
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	f383 8811 	msr	BASEPRI, r3
}
 8008898:	bf00      	nop
 800889a:	3738      	adds	r7, #56	; 0x38
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20004438 	.word	0x20004438

080088a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b090      	sub	sp, #64	; 0x40
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80088b2:	f3ef 8311 	mrs	r3, BASEPRI
 80088b6:	f04f 0120 	mov.w	r1, #32
 80088ba:	f381 8811 	msr	BASEPRI, r1
 80088be:	61fb      	str	r3, [r7, #28]
 80088c0:	4840      	ldr	r0, [pc, #256]	; (80089c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80088c2:	f7ff fc9b 	bl	80081fc <_PreparePacket>
 80088c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088d4:	e00b      	b.n	80088ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088dc:	1c59      	adds	r1, r3, #1
 80088de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80088e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088e4:	b2d2      	uxtb	r2, r2
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	09db      	lsrs	r3, r3, #7
 80088ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b7f      	cmp	r3, #127	; 0x7f
 80088f2:	d8f0      	bhi.n	80088d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80088f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80088fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088fc:	b2d2      	uxtb	r2, r2
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008902:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	637b      	str	r3, [r7, #52]	; 0x34
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	633b      	str	r3, [r7, #48]	; 0x30
 800890c:	e00b      	b.n	8008926 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	b2da      	uxtb	r2, r3
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	1c59      	adds	r1, r3, #1
 8008916:	6379      	str	r1, [r7, #52]	; 0x34
 8008918:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800891c:	b2d2      	uxtb	r2, r2
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	09db      	lsrs	r3, r3, #7
 8008924:	633b      	str	r3, [r7, #48]	; 0x30
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	2b7f      	cmp	r3, #127	; 0x7f
 800892a:	d8f0      	bhi.n	800890e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800892c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	637a      	str	r2, [r7, #52]	; 0x34
 8008932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008934:	b2d2      	uxtb	r2, r2
 8008936:	701a      	strb	r2, [r3, #0]
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	62bb      	str	r3, [r7, #40]	; 0x28
 8008944:	e00b      	b.n	800895e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	b2da      	uxtb	r2, r3
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	1c59      	adds	r1, r3, #1
 800894e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	701a      	strb	r2, [r3, #0]
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	09db      	lsrs	r3, r3, #7
 800895c:	62bb      	str	r3, [r7, #40]	; 0x28
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	2b7f      	cmp	r3, #127	; 0x7f
 8008962:	d8f0      	bhi.n	8008946 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800896a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
 8008978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800897a:	623b      	str	r3, [r7, #32]
 800897c:	e00b      	b.n	8008996 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	b2da      	uxtb	r2, r3
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	1c59      	adds	r1, r3, #1
 8008986:	6279      	str	r1, [r7, #36]	; 0x24
 8008988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	09db      	lsrs	r3, r3, #7
 8008994:	623b      	str	r3, [r7, #32]
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	2b7f      	cmp	r3, #127	; 0x7f
 800899a:	d8f0      	bhi.n	800897e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	627a      	str	r2, [r7, #36]	; 0x24
 80089a2:	6a3a      	ldr	r2, [r7, #32]
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	6979      	ldr	r1, [r7, #20]
 80089b0:	69b8      	ldr	r0, [r7, #24]
 80089b2:	f7ff fd13 	bl	80083dc <_SendPacket>
  RECORD_END();
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f383 8811 	msr	BASEPRI, r3
}
 80089bc:	bf00      	nop
 80089be:	3740      	adds	r7, #64	; 0x40
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20004438 	.word	0x20004438

080089c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08c      	sub	sp, #48	; 0x30
 80089cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80089ce:	4b58      	ldr	r3, [pc, #352]	; (8008b30 <SEGGER_SYSVIEW_Start+0x168>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80089d4:	f3ef 8311 	mrs	r3, BASEPRI
 80089d8:	f04f 0120 	mov.w	r1, #32
 80089dc:	f381 8811 	msr	BASEPRI, r1
 80089e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80089e2:	4b53      	ldr	r3, [pc, #332]	; (8008b30 <SEGGER_SYSVIEW_Start+0x168>)
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	220a      	movs	r2, #10
 80089e8:	4952      	ldr	r1, [pc, #328]	; (8008b34 <SEGGER_SYSVIEW_Start+0x16c>)
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7f7 fc00 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80089f6:	200a      	movs	r0, #10
 80089f8:	f7ff fe2a 	bl	8008650 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80089fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008a00:	f04f 0120 	mov.w	r1, #32
 8008a04:	f381 8811 	msr	BASEPRI, r1
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	484b      	ldr	r0, [pc, #300]	; (8008b38 <SEGGER_SYSVIEW_Start+0x170>)
 8008a0c:	f7ff fbf6 	bl	80081fc <_PreparePacket>
 8008a10:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a1a:	4b45      	ldr	r3, [pc, #276]	; (8008b30 <SEGGER_SYSVIEW_Start+0x168>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a20:	e00b      	b.n	8008a3a <SEGGER_SYSVIEW_Start+0x72>
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	1c59      	adds	r1, r3, #1
 8008a2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	09db      	lsrs	r3, r3, #7
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8008a3e:	d8f0      	bhi.n	8008a22 <SEGGER_SYSVIEW_Start+0x5a>
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	627b      	str	r3, [r7, #36]	; 0x24
 8008a54:	4b36      	ldr	r3, [pc, #216]	; (8008b30 <SEGGER_SYSVIEW_Start+0x168>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	623b      	str	r3, [r7, #32]
 8008a5a:	e00b      	b.n	8008a74 <SEGGER_SYSVIEW_Start+0xac>
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	1c59      	adds	r1, r3, #1
 8008a64:	6279      	str	r1, [r7, #36]	; 0x24
 8008a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	09db      	lsrs	r3, r3, #7
 8008a72:	623b      	str	r3, [r7, #32]
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	2b7f      	cmp	r3, #127	; 0x7f
 8008a78:	d8f0      	bhi.n	8008a5c <SEGGER_SYSVIEW_Start+0x94>
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8008a80:	6a3a      	ldr	r2, [r7, #32]
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	4b28      	ldr	r3, [pc, #160]	; (8008b30 <SEGGER_SYSVIEW_Start+0x168>)
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	e00b      	b.n	8008aae <SEGGER_SYSVIEW_Start+0xe6>
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	1c59      	adds	r1, r3, #1
 8008a9e:	61f9      	str	r1, [r7, #28]
 8008aa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008aa4:	b2d2      	uxtb	r2, r2
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	09db      	lsrs	r3, r3, #7
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8008ab2:	d8f0      	bhi.n	8008a96 <SEGGER_SYSVIEW_Start+0xce>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	61fa      	str	r2, [r7, #28]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	e00b      	b.n	8008ae6 <SEGGER_SYSVIEW_Start+0x11e>
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	1c59      	adds	r1, r3, #1
 8008ad6:	6179      	str	r1, [r7, #20]
 8008ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008adc:	b2d2      	uxtb	r2, r2
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	09db      	lsrs	r3, r3, #7
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8008aea:	d8f0      	bhi.n	8008ace <SEGGER_SYSVIEW_Start+0x106>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	617a      	str	r2, [r7, #20]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	701a      	strb	r2, [r3, #0]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008afc:	2218      	movs	r2, #24
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fc6b 	bl	80083dc <_SendPacket>
      RECORD_END();
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <SEGGER_SYSVIEW_Start+0x168>)
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008b14:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <SEGGER_SYSVIEW_Start+0x168>)
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008b1a:	f000 f9eb 	bl	8008ef4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008b1e:	f000 f9b1 	bl	8008e84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008b22:	f000 fc83 	bl	800942c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008b26:	bf00      	nop
 8008b28:	3730      	adds	r7, #48	; 0x30
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20004408 	.word	0x20004408
 8008b34:	0800eda8 	.word	0x0800eda8
 8008b38:	20004438 	.word	0x20004438

08008b3c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008b42:	f3ef 8311 	mrs	r3, BASEPRI
 8008b46:	f04f 0120 	mov.w	r1, #32
 8008b4a:	f381 8811 	msr	BASEPRI, r1
 8008b4e:	607b      	str	r3, [r7, #4]
 8008b50:	480b      	ldr	r0, [pc, #44]	; (8008b80 <SEGGER_SYSVIEW_Stop+0x44>)
 8008b52:	f7ff fb53 	bl	80081fc <_PreparePacket>
 8008b56:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008b58:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <SEGGER_SYSVIEW_Stop+0x48>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008b60:	220b      	movs	r2, #11
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6838      	ldr	r0, [r7, #0]
 8008b66:	f7ff fc39 	bl	80083dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008b6a:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <SEGGER_SYSVIEW_Stop+0x48>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f383 8811 	msr	BASEPRI, r3
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20004438 	.word	0x20004438
 8008b84:	20004408 	.word	0x20004408

08008b88 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	; 0x30
 8008b8c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008b92:	f04f 0120 	mov.w	r1, #32
 8008b96:	f381 8811 	msr	BASEPRI, r1
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	4845      	ldr	r0, [pc, #276]	; (8008cb4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008b9e:	f7ff fb2d 	bl	80081fc <_PreparePacket>
 8008ba2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bac:	4b42      	ldr	r3, [pc, #264]	; (8008cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb2:	e00b      	b.n	8008bcc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	1c59      	adds	r1, r3, #1
 8008bbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	09db      	lsrs	r3, r3, #7
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	2b7f      	cmp	r3, #127	; 0x7f
 8008bd0:	d8f0      	bhi.n	8008bb4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
 8008be6:	4b34      	ldr	r3, [pc, #208]	; (8008cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	623b      	str	r3, [r7, #32]
 8008bec:	e00b      	b.n	8008c06 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1c59      	adds	r1, r3, #1
 8008bf6:	6279      	str	r1, [r7, #36]	; 0x24
 8008bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	09db      	lsrs	r3, r3, #7
 8008c04:	623b      	str	r3, [r7, #32]
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	2b7f      	cmp	r3, #127	; 0x7f
 8008c0a:	d8f0      	bhi.n	8008bee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	627a      	str	r2, [r7, #36]	; 0x24
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	e00b      	b.n	8008c40 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	1c59      	adds	r1, r3, #1
 8008c30:	61f9      	str	r1, [r7, #28]
 8008c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c36:	b2d2      	uxtb	r2, r2
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	09db      	lsrs	r3, r3, #7
 8008c3e:	61bb      	str	r3, [r7, #24]
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b7f      	cmp	r3, #127	; 0x7f
 8008c44:	d8f0      	bhi.n	8008c28 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	61fa      	str	r2, [r7, #28]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	e00b      	b.n	8008c78 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	1c59      	adds	r1, r3, #1
 8008c68:	6179      	str	r1, [r7, #20]
 8008c6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	09db      	lsrs	r3, r3, #7
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c7c:	d8f0      	bhi.n	8008c60 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	617a      	str	r2, [r7, #20]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008c8e:	2218      	movs	r2, #24
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	68b8      	ldr	r0, [r7, #8]
 8008c94:	f7ff fba2 	bl	80083dc <_SendPacket>
  RECORD_END();
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008c9e:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008ca6:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008caa:	4798      	blx	r3
  }
}
 8008cac:	bf00      	nop
 8008cae:	3730      	adds	r7, #48	; 0x30
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20004438 	.word	0x20004438
 8008cb8:	20004408 	.word	0x20004408

08008cbc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b092      	sub	sp, #72	; 0x48
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8008cc8:	f04f 0120 	mov.w	r1, #32
 8008ccc:	f381 8811 	msr	BASEPRI, r1
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	486a      	ldr	r0, [pc, #424]	; (8008e7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008cd4:	f7ff fa92 	bl	80081fc <_PreparePacket>
 8008cd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4b66      	ldr	r3, [pc, #408]	; (8008e80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	643b      	str	r3, [r7, #64]	; 0x40
 8008cee:	e00b      	b.n	8008d08 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf6:	1c59      	adds	r1, r3, #1
 8008cf8:	6479      	str	r1, [r7, #68]	; 0x44
 8008cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d04:	09db      	lsrs	r3, r3, #7
 8008d06:	643b      	str	r3, [r7, #64]	; 0x40
 8008d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8008d0c:	d8f0      	bhi.n	8008cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	647a      	str	r2, [r7, #68]	; 0x44
 8008d14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d16:	b2d2      	uxtb	r2, r2
 8008d18:	701a      	strb	r2, [r3, #0]
 8008d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d28:	e00b      	b.n	8008d42 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d30:	1c59      	adds	r1, r3, #1
 8008d32:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d38:	b2d2      	uxtb	r2, r2
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	09db      	lsrs	r3, r3, #7
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b7f      	cmp	r3, #127	; 0x7f
 8008d46:	d8f0      	bhi.n	8008d2a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d56:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7ff f9fb 	bl	800815c <_EncodeStr>
 8008d66:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008d68:	2209      	movs	r2, #9
 8008d6a:	68f9      	ldr	r1, [r7, #12]
 8008d6c:	6938      	ldr	r0, [r7, #16]
 8008d6e:	f7ff fb35 	bl	80083dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b40      	ldr	r3, [pc, #256]	; (8008e80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	633b      	str	r3, [r7, #48]	; 0x30
 8008d86:	e00b      	b.n	8008da0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	1c59      	adds	r1, r3, #1
 8008d90:	6379      	str	r1, [r7, #52]	; 0x34
 8008d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	09db      	lsrs	r3, r3, #7
 8008d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	2b7f      	cmp	r3, #127	; 0x7f
 8008da4:	d8f0      	bhi.n	8008d88 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	637a      	str	r2, [r7, #52]	; 0x34
 8008dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	701a      	strb	r2, [r3, #0]
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dc0:	e00b      	b.n	8008dda <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	1c59      	adds	r1, r3, #1
 8008dca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008dd0:	b2d2      	uxtb	r2, r2
 8008dd2:	701a      	strb	r2, [r3, #0]
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	09db      	lsrs	r3, r3, #7
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8008dde:	d8f0      	bhi.n	8008dc2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	701a      	strb	r2, [r3, #0]
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	623b      	str	r3, [r7, #32]
 8008dfa:	e00b      	b.n	8008e14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	1c59      	adds	r1, r3, #1
 8008e04:	6279      	str	r1, [r7, #36]	; 0x24
 8008e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	09db      	lsrs	r3, r3, #7
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b7f      	cmp	r3, #127	; 0x7f
 8008e18:	d8f0      	bhi.n	8008dfc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e20:	6a3a      	ldr	r2, [r7, #32]
 8008e22:	b2d2      	uxtb	r2, r2
 8008e24:	701a      	strb	r2, [r3, #0]
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	61fb      	str	r3, [r7, #28]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e00b      	b.n	8008e4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	1c59      	adds	r1, r3, #1
 8008e3c:	61f9      	str	r1, [r7, #28]
 8008e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	09db      	lsrs	r3, r3, #7
 8008e4a:	61bb      	str	r3, [r7, #24]
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e50:	d8f0      	bhi.n	8008e34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	61fa      	str	r2, [r7, #28]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008e62:	2215      	movs	r2, #21
 8008e64:	68f9      	ldr	r1, [r7, #12]
 8008e66:	6938      	ldr	r0, [r7, #16]
 8008e68:	f7ff fab8 	bl	80083dc <_SendPacket>
  RECORD_END();
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f383 8811 	msr	BASEPRI, r3
}
 8008e72:	bf00      	nop
 8008e74:	3748      	adds	r7, #72	; 0x48
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20004438 	.word	0x20004438
 8008e80:	20004408 	.word	0x20004408

08008e84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d008      	beq.n	8008ea2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008e90:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008e9a:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	4798      	blx	r3
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20004408 	.word	0x20004408

08008eac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8008eb8:	f04f 0120 	mov.w	r1, #32
 8008ebc:	f381 8811 	msr	BASEPRI, r1
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	480b      	ldr	r0, [pc, #44]	; (8008ef0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008ec4:	f7ff f99a 	bl	80081fc <_PreparePacket>
 8008ec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008eca:	2280      	movs	r2, #128	; 0x80
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	6938      	ldr	r0, [r7, #16]
 8008ed0:	f7ff f944 	bl	800815c <_EncodeStr>
 8008ed4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008ed6:	220e      	movs	r2, #14
 8008ed8:	68f9      	ldr	r1, [r7, #12]
 8008eda:	6938      	ldr	r0, [r7, #16]
 8008edc:	f7ff fa7e 	bl	80083dc <_SendPacket>
  RECORD_END();
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f383 8811 	msr	BASEPRI, r3
}
 8008ee6:	bf00      	nop
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20004438 	.word	0x20004438

08008ef4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008efa:	4b15      	ldr	r3, [pc, #84]	; (8008f50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01a      	beq.n	8008f38 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008f02:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d015      	beq.n	8008f38 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008f0c:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4798      	blx	r3
 8008f14:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008f18:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	f04f 0300 	mov.w	r3, #0
 8008f26:	000a      	movs	r2, r1
 8008f28:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4621      	mov	r1, r4
 8008f30:	200d      	movs	r0, #13
 8008f32:	f7ff fbe7 	bl	8008704 <SEGGER_SYSVIEW_RecordU32x2>
 8008f36:	e006      	b.n	8008f46 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008f38:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	200c      	movs	r0, #12
 8008f40:	f7ff fba4 	bl	800868c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd90      	pop	{r4, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20004408 	.word	0x20004408
 8008f54:	e0001004 	.word	0xe0001004

08008f58 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8008f62:	f04f 0120 	mov.w	r1, #32
 8008f66:	f381 8811 	msr	BASEPRI, r1
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	4819      	ldr	r0, [pc, #100]	; (8008fd4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008f6e:	f7ff f945 	bl	80081fc <_PreparePacket>
 8008f72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008f78:	4b17      	ldr	r3, [pc, #92]	; (8008fd8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f80:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	613b      	str	r3, [r7, #16]
 8008f8a:	e00b      	b.n	8008fa4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	1c59      	adds	r1, r3, #1
 8008f94:	6179      	str	r1, [r7, #20]
 8008f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	09db      	lsrs	r3, r3, #7
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8008fa8:	d8f0      	bhi.n	8008f8c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	617a      	str	r2, [r7, #20]
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008fba:	2202      	movs	r2, #2
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	68b8      	ldr	r0, [r7, #8]
 8008fc0:	f7ff fa0c 	bl	80083dc <_SendPacket>
  RECORD_END();
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f383 8811 	msr	BASEPRI, r3
}
 8008fca:	bf00      	nop
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20004438 	.word	0x20004438
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8008fe6:	f04f 0120 	mov.w	r1, #32
 8008fea:	f381 8811 	msr	BASEPRI, r1
 8008fee:	607b      	str	r3, [r7, #4]
 8008ff0:	4807      	ldr	r0, [pc, #28]	; (8009010 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008ff2:	f7ff f903 	bl	80081fc <_PreparePacket>
 8008ff6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6838      	ldr	r0, [r7, #0]
 8008ffe:	f7ff f9ed 	bl	80083dc <_SendPacket>
  RECORD_END();
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f383 8811 	msr	BASEPRI, r3
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20004438 	.word	0x20004438

08009014 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800901a:	f3ef 8311 	mrs	r3, BASEPRI
 800901e:	f04f 0120 	mov.w	r1, #32
 8009022:	f381 8811 	msr	BASEPRI, r1
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	4807      	ldr	r0, [pc, #28]	; (8009048 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800902a:	f7ff f8e7 	bl	80081fc <_PreparePacket>
 800902e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009030:	2212      	movs	r2, #18
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6838      	ldr	r0, [r7, #0]
 8009036:	f7ff f9d1 	bl	80083dc <_SendPacket>
  RECORD_END();
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f383 8811 	msr	BASEPRI, r3
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20004438 	.word	0x20004438

0800904c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009052:	f3ef 8311 	mrs	r3, BASEPRI
 8009056:	f04f 0120 	mov.w	r1, #32
 800905a:	f381 8811 	msr	BASEPRI, r1
 800905e:	607b      	str	r3, [r7, #4]
 8009060:	4807      	ldr	r0, [pc, #28]	; (8009080 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009062:	f7ff f8cb 	bl	80081fc <_PreparePacket>
 8009066:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009068:	2211      	movs	r2, #17
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6838      	ldr	r0, [r7, #0]
 800906e:	f7ff f9b5 	bl	80083dc <_SendPacket>
  RECORD_END();
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f383 8811 	msr	BASEPRI, r3
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20004438 	.word	0x20004438

08009084 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800908c:	f3ef 8311 	mrs	r3, BASEPRI
 8009090:	f04f 0120 	mov.w	r1, #32
 8009094:	f381 8811 	msr	BASEPRI, r1
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	4819      	ldr	r0, [pc, #100]	; (8009100 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800909c:	f7ff f8ae 	bl	80081fc <_PreparePacket>
 80090a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80090a6:	4b17      	ldr	r3, [pc, #92]	; (8009104 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	61fb      	str	r3, [r7, #28]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	e00b      	b.n	80090d2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	1c59      	adds	r1, r3, #1
 80090c2:	61f9      	str	r1, [r7, #28]
 80090c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090c8:	b2d2      	uxtb	r2, r2
 80090ca:	701a      	strb	r2, [r3, #0]
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	09db      	lsrs	r3, r3, #7
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b7f      	cmp	r3, #127	; 0x7f
 80090d6:	d8f0      	bhi.n	80090ba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	61fa      	str	r2, [r7, #28]
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	b2d2      	uxtb	r2, r2
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80090e8:	2208      	movs	r2, #8
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	6938      	ldr	r0, [r7, #16]
 80090ee:	f7ff f975 	bl	80083dc <_SendPacket>
  RECORD_END();
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f383 8811 	msr	BASEPRI, r3
}
 80090f8:	bf00      	nop
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20004438 	.word	0x20004438
 8009104:	20004408 	.word	0x20004408

08009108 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009108:	b580      	push	{r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009110:	f3ef 8311 	mrs	r3, BASEPRI
 8009114:	f04f 0120 	mov.w	r1, #32
 8009118:	f381 8811 	msr	BASEPRI, r1
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	4819      	ldr	r0, [pc, #100]	; (8009184 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009120:	f7ff f86c 	bl	80081fc <_PreparePacket>
 8009124:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800912a:	4b17      	ldr	r3, [pc, #92]	; (8009188 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	61fb      	str	r3, [r7, #28]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	61bb      	str	r3, [r7, #24]
 800913c:	e00b      	b.n	8009156 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	b2da      	uxtb	r2, r3
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	1c59      	adds	r1, r3, #1
 8009146:	61f9      	str	r1, [r7, #28]
 8009148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800914c:	b2d2      	uxtb	r2, r2
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	09db      	lsrs	r3, r3, #7
 8009154:	61bb      	str	r3, [r7, #24]
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b7f      	cmp	r3, #127	; 0x7f
 800915a:	d8f0      	bhi.n	800913e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	61fa      	str	r2, [r7, #28]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800916c:	2204      	movs	r2, #4
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	6938      	ldr	r0, [r7, #16]
 8009172:	f7ff f933 	bl	80083dc <_SendPacket>
  RECORD_END();
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f383 8811 	msr	BASEPRI, r3
}
 800917c:	bf00      	nop
 800917e:	3720      	adds	r7, #32
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20004438 	.word	0x20004438
 8009188:	20004408 	.word	0x20004408

0800918c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009194:	f3ef 8311 	mrs	r3, BASEPRI
 8009198:	f04f 0120 	mov.w	r1, #32
 800919c:	f381 8811 	msr	BASEPRI, r1
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	4819      	ldr	r0, [pc, #100]	; (8009208 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80091a4:	f7ff f82a 	bl	80081fc <_PreparePacket>
 80091a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80091ae:	4b17      	ldr	r3, [pc, #92]	; (800920c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	61bb      	str	r3, [r7, #24]
 80091c0:	e00b      	b.n	80091da <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	1c59      	adds	r1, r3, #1
 80091ca:	61f9      	str	r1, [r7, #28]
 80091cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	09db      	lsrs	r3, r3, #7
 80091d8:	61bb      	str	r3, [r7, #24]
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b7f      	cmp	r3, #127	; 0x7f
 80091de:	d8f0      	bhi.n	80091c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	61fa      	str	r2, [r7, #28]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	b2d2      	uxtb	r2, r2
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80091f0:	2206      	movs	r2, #6
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	6938      	ldr	r0, [r7, #16]
 80091f6:	f7ff f8f1 	bl	80083dc <_SendPacket>
  RECORD_END();
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f383 8811 	msr	BASEPRI, r3
}
 8009200:	bf00      	nop
 8009202:	3720      	adds	r7, #32
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20004438 	.word	0x20004438
 800920c:	20004408 	.word	0x20004408

08009210 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8009210:	b580      	push	{r7, lr}
 8009212:	b08a      	sub	sp, #40	; 0x28
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800921a:	f3ef 8311 	mrs	r3, BASEPRI
 800921e:	f04f 0120 	mov.w	r1, #32
 8009222:	f381 8811 	msr	BASEPRI, r1
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	4827      	ldr	r0, [pc, #156]	; (80092c8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800922a:	f7fe ffe7 	bl	80081fc <_PreparePacket>
 800922e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009234:	4b25      	ldr	r3, [pc, #148]	; (80092cc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	623b      	str	r3, [r7, #32]
 8009246:	e00b      	b.n	8009260 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	b2da      	uxtb	r2, r3
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	1c59      	adds	r1, r3, #1
 8009250:	6279      	str	r1, [r7, #36]	; 0x24
 8009252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	09db      	lsrs	r3, r3, #7
 800925e:	623b      	str	r3, [r7, #32]
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	2b7f      	cmp	r3, #127	; 0x7f
 8009264:	d8f0      	bhi.n	8009248 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	627a      	str	r2, [r7, #36]	; 0x24
 800926c:	6a3a      	ldr	r2, [r7, #32]
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	701a      	strb	r2, [r3, #0]
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	61fb      	str	r3, [r7, #28]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	e00b      	b.n	8009298 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	b2da      	uxtb	r2, r3
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	1c59      	adds	r1, r3, #1
 8009288:	61f9      	str	r1, [r7, #28]
 800928a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	09db      	lsrs	r3, r3, #7
 8009296:	61bb      	str	r3, [r7, #24]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b7f      	cmp	r3, #127	; 0x7f
 800929c:	d8f0      	bhi.n	8009280 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	61fa      	str	r2, [r7, #28]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	701a      	strb	r2, [r3, #0]
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80092ae:	2207      	movs	r2, #7
 80092b0:	68f9      	ldr	r1, [r7, #12]
 80092b2:	6938      	ldr	r0, [r7, #16]
 80092b4:	f7ff f892 	bl	80083dc <_SendPacket>
  RECORD_END();
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f383 8811 	msr	BASEPRI, r3
}
 80092be:	bf00      	nop
 80092c0:	3728      	adds	r7, #40	; 0x28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20004438 	.word	0x20004438
 80092cc:	20004408 	.word	0x20004408

080092d0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	1ad3      	subs	r3, r2, r3
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20004408 	.word	0x20004408

080092f0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08c      	sub	sp, #48	; 0x30
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80092fa:	4b3b      	ldr	r3, [pc, #236]	; (80093e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d06d      	beq.n	80093de <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8009302:	4b39      	ldr	r3, [pc, #228]	; (80093e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009308:	2300      	movs	r3, #0
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
 800930c:	e008      	b.n	8009320 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	3301      	adds	r3, #1
 800931e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009324:	429a      	cmp	r2, r3
 8009326:	d3f2      	bcc.n	800930e <SEGGER_SYSVIEW_SendModule+0x1e>
 8009328:	e000      	b.n	800932c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800932a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d055      	beq.n	80093de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009332:	f3ef 8311 	mrs	r3, BASEPRI
 8009336:	f04f 0120 	mov.w	r1, #32
 800933a:	f381 8811 	msr	BASEPRI, r1
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	482a      	ldr	r0, [pc, #168]	; (80093ec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009342:	f7fe ff5b 	bl	80081fc <_PreparePacket>
 8009346:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	623b      	str	r3, [r7, #32]
 8009354:	e00b      	b.n	800936e <SEGGER_SYSVIEW_SendModule+0x7e>
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	b2da      	uxtb	r2, r3
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	1c59      	adds	r1, r3, #1
 800935e:	6279      	str	r1, [r7, #36]	; 0x24
 8009360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	09db      	lsrs	r3, r3, #7
 800936c:	623b      	str	r3, [r7, #32]
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	2b7f      	cmp	r3, #127	; 0x7f
 8009372:	d8f0      	bhi.n	8009356 <SEGGER_SYSVIEW_SendModule+0x66>
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	627a      	str	r2, [r7, #36]	; 0x24
 800937a:	6a3a      	ldr	r2, [r7, #32]
 800937c:	b2d2      	uxtb	r2, r2
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	61bb      	str	r3, [r7, #24]
 800938e:	e00b      	b.n	80093a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	b2da      	uxtb	r2, r3
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	1c59      	adds	r1, r3, #1
 8009398:	61f9      	str	r1, [r7, #28]
 800939a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800939e:	b2d2      	uxtb	r2, r2
 80093a0:	701a      	strb	r2, [r3, #0]
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	09db      	lsrs	r3, r3, #7
 80093a6:	61bb      	str	r3, [r7, #24]
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b7f      	cmp	r3, #127	; 0x7f
 80093ac:	d8f0      	bhi.n	8009390 <SEGGER_SYSVIEW_SendModule+0xa0>
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	61fa      	str	r2, [r7, #28]
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	701a      	strb	r2, [r3, #0]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2280      	movs	r2, #128	; 0x80
 80093c4:	4619      	mov	r1, r3
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7fe fec8 	bl	800815c <_EncodeStr>
 80093cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80093ce:	2216      	movs	r2, #22
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	6938      	ldr	r0, [r7, #16]
 80093d4:	f7ff f802 	bl	80083dc <_SendPacket>
      RECORD_END();
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80093de:	bf00      	nop
 80093e0:	3730      	adds	r7, #48	; 0x30
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20004430 	.word	0x20004430
 80093ec:	20004438 	.word	0x20004438

080093f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80093f6:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00f      	beq.n	800941e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80093fe:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f2      	bne.n	8009404 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20004430 	.word	0x20004430

0800942c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009432:	f3ef 8311 	mrs	r3, BASEPRI
 8009436:	f04f 0120 	mov.w	r1, #32
 800943a:	f381 8811 	msr	BASEPRI, r1
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	4817      	ldr	r0, [pc, #92]	; (80094a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009442:	f7fe fedb 	bl	80081fc <_PreparePacket>
 8009446:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	4b14      	ldr	r3, [pc, #80]	; (80094a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	e00b      	b.n	8009470 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	b2da      	uxtb	r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	1c59      	adds	r1, r3, #1
 8009460:	6179      	str	r1, [r7, #20]
 8009462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	09db      	lsrs	r3, r3, #7
 800946e:	613b      	str	r3, [r7, #16]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b7f      	cmp	r3, #127	; 0x7f
 8009474:	d8f0      	bhi.n	8009458 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	617a      	str	r2, [r7, #20]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009486:	221b      	movs	r2, #27
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	68b8      	ldr	r0, [r7, #8]
 800948c:	f7fe ffa6 	bl	80083dc <_SendPacket>
  RECORD_END();
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f383 8811 	msr	BASEPRI, r3
}
 8009496:	bf00      	nop
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20004438 	.word	0x20004438
 80094a4:	20004434 	.word	0x20004434

080094a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	; 0x28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80094b0:	f3ef 8311 	mrs	r3, BASEPRI
 80094b4:	f04f 0120 	mov.w	r1, #32
 80094b8:	f381 8811 	msr	BASEPRI, r1
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	4827      	ldr	r0, [pc, #156]	; (800955c <SEGGER_SYSVIEW_Warn+0xb4>)
 80094c0:	f7fe fe9c 	bl	80081fc <_PreparePacket>
 80094c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80094c6:	2280      	movs	r2, #128	; 0x80
 80094c8:	6879      	ldr	r1, [r7, #4]
 80094ca:	6938      	ldr	r0, [r7, #16]
 80094cc:	f7fe fe46 	bl	800815c <_EncodeStr>
 80094d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
 80094d6:	2301      	movs	r3, #1
 80094d8:	623b      	str	r3, [r7, #32]
 80094da:	e00b      	b.n	80094f4 <SEGGER_SYSVIEW_Warn+0x4c>
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	1c59      	adds	r1, r3, #1
 80094e4:	6279      	str	r1, [r7, #36]	; 0x24
 80094e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094ea:	b2d2      	uxtb	r2, r2
 80094ec:	701a      	strb	r2, [r3, #0]
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	09db      	lsrs	r3, r3, #7
 80094f2:	623b      	str	r3, [r7, #32]
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	2b7f      	cmp	r3, #127	; 0x7f
 80094f8:	d8f0      	bhi.n	80094dc <SEGGER_SYSVIEW_Warn+0x34>
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	627a      	str	r2, [r7, #36]	; 0x24
 8009500:	6a3a      	ldr	r2, [r7, #32]
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	61fb      	str	r3, [r7, #28]
 800950e:	2300      	movs	r3, #0
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	e00b      	b.n	800952c <SEGGER_SYSVIEW_Warn+0x84>
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	b2da      	uxtb	r2, r3
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	1c59      	adds	r1, r3, #1
 800951c:	61f9      	str	r1, [r7, #28]
 800951e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009522:	b2d2      	uxtb	r2, r2
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	09db      	lsrs	r3, r3, #7
 800952a:	61bb      	str	r3, [r7, #24]
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2b7f      	cmp	r3, #127	; 0x7f
 8009530:	d8f0      	bhi.n	8009514 <SEGGER_SYSVIEW_Warn+0x6c>
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	61fa      	str	r2, [r7, #28]
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009542:	221a      	movs	r2, #26
 8009544:	68f9      	ldr	r1, [r7, #12]
 8009546:	6938      	ldr	r0, [r7, #16]
 8009548:	f7fe ff48 	bl	80083dc <_SendPacket>
  RECORD_END();
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f383 8811 	msr	BASEPRI, r3
}
 8009552:	bf00      	nop
 8009554:	3728      	adds	r7, #40	; 0x28
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20004438 	.word	0x20004438

08009560 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009564:	4803      	ldr	r0, [pc, #12]	; (8009574 <_cbSendSystemDesc+0x14>)
 8009566:	f7ff fca1 	bl	8008eac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800956a:	4803      	ldr	r0, [pc, #12]	; (8009578 <_cbSendSystemDesc+0x18>)
 800956c:	f7ff fc9e 	bl	8008eac <SEGGER_SYSVIEW_SendSysDesc>
}
 8009570:	bf00      	nop
 8009572:	bd80      	pop	{r7, pc}
 8009574:	0800eab8 	.word	0x0800eab8
 8009578:	0800eaec 	.word	0x0800eaec

0800957c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <SEGGER_SYSVIEW_Conf+0x20>)
 8009582:	6818      	ldr	r0, [r3, #0]
 8009584:	4b05      	ldr	r3, [pc, #20]	; (800959c <SEGGER_SYSVIEW_Conf+0x20>)
 8009586:	6819      	ldr	r1, [r3, #0]
 8009588:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800958a:	4a06      	ldr	r2, [pc, #24]	; (80095a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800958c:	f7ff f80c 	bl	80085a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009590:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009594:	f7ff f84c 	bl	8008630 <SEGGER_SYSVIEW_SetRAMBase>
}
 8009598:	bf00      	nop
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20000010 	.word	0x20000010
 80095a0:	08009561 	.word	0x08009561
 80095a4:	0800edb4 	.word	0x0800edb4

080095a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80095ae:	2300      	movs	r3, #0
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	e048      	b.n	8009646 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80095b4:	4929      	ldr	r1, [pc, #164]	; (800965c <_cbSendTaskList+0xb4>)
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	440b      	add	r3, r1
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fd fe61 	bl	800728c <uxTaskGetStackHighWaterMark>
 80095ca:	4601      	mov	r1, r0
 80095cc:	4823      	ldr	r0, [pc, #140]	; (800965c <_cbSendTaskList+0xb4>)
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4403      	add	r3, r0
 80095da:	3310      	adds	r3, #16
 80095dc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80095de:	491f      	ldr	r1, [pc, #124]	; (800965c <_cbSendTaskList+0xb4>)
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	491b      	ldr	r1, [pc, #108]	; (800965c <_cbSendTaskList+0xb4>)
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	3304      	adds	r3, #4
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	4c16      	ldr	r4, [pc, #88]	; (800965c <_cbSendTaskList+0xb4>)
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4423      	add	r3, r4
 800960e:	3308      	adds	r3, #8
 8009610:	681c      	ldr	r4, [r3, #0]
 8009612:	4d12      	ldr	r5, [pc, #72]	; (800965c <_cbSendTaskList+0xb4>)
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	442b      	add	r3, r5
 8009620:	330c      	adds	r3, #12
 8009622:	681d      	ldr	r5, [r3, #0]
 8009624:	4e0d      	ldr	r6, [pc, #52]	; (800965c <_cbSendTaskList+0xb4>)
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4433      	add	r3, r6
 8009632:	3310      	adds	r3, #16
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	462b      	mov	r3, r5
 800963a:	4622      	mov	r2, r4
 800963c:	f000 f8be 	bl	80097bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3301      	adds	r3, #1
 8009644:	607b      	str	r3, [r7, #4]
 8009646:	4b06      	ldr	r3, [pc, #24]	; (8009660 <_cbSendTaskList+0xb8>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d3b1      	bcc.n	80095b4 <_cbSendTaskList+0xc>
  }
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965a:	bf00      	nop
 800965c:	2000451c 	.word	0x2000451c
 8009660:	200045bc 	.word	0x200045bc

08009664 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800966c:	f7fd fac8 	bl	8006c00 <xTaskGetTickCountFromISR>
 8009670:	4603      	mov	r3, r0
 8009672:	2200      	movs	r2, #0
 8009674:	469a      	mov	sl, r3
 8009676:	4693      	mov	fp, r2
 8009678:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800967c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	f04f 0a00 	mov.w	sl, #0
 8009688:	f04f 0b00 	mov.w	fp, #0
 800968c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009690:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009694:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009698:	4652      	mov	r2, sl
 800969a:	465b      	mov	r3, fp
 800969c:	1a14      	subs	r4, r2, r0
 800969e:	eb63 0501 	sbc.w	r5, r3, r1
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	00ab      	lsls	r3, r5, #2
 80096ac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80096b0:	00a2      	lsls	r2, r4, #2
 80096b2:	4614      	mov	r4, r2
 80096b4:	461d      	mov	r5, r3
 80096b6:	eb14 0800 	adds.w	r8, r4, r0
 80096ba:	eb45 0901 	adc.w	r9, r5, r1
 80096be:	f04f 0200 	mov.w	r2, #0
 80096c2:	f04f 0300 	mov.w	r3, #0
 80096c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096d2:	4690      	mov	r8, r2
 80096d4:	4699      	mov	r9, r3
 80096d6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80096da:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80096de:	4610      	mov	r0, r2
 80096e0:	4619      	mov	r1, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080096ec <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80096fa:	2205      	movs	r2, #5
 80096fc:	492b      	ldr	r1, [pc, #172]	; (80097ac <SYSVIEW_AddTask+0xc0>)
 80096fe:	68b8      	ldr	r0, [r7, #8]
 8009700:	f004 fcfe 	bl	800e100 <memcmp>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d04b      	beq.n	80097a2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800970a:	4b29      	ldr	r3, [pc, #164]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b07      	cmp	r3, #7
 8009710:	d903      	bls.n	800971a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009712:	4828      	ldr	r0, [pc, #160]	; (80097b4 <SYSVIEW_AddTask+0xc8>)
 8009714:	f7ff fec8 	bl	80094a8 <SEGGER_SYSVIEW_Warn>
    return;
 8009718:	e044      	b.n	80097a4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800971a:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	4926      	ldr	r1, [pc, #152]	; (80097b8 <SYSVIEW_AddTask+0xcc>)
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800972e:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4921      	ldr	r1, [pc, #132]	; (80097b8 <SYSVIEW_AddTask+0xcc>)
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	3304      	adds	r3, #4
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009744:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	491b      	ldr	r1, [pc, #108]	; (80097b8 <SYSVIEW_AddTask+0xcc>)
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	440b      	add	r3, r1
 8009754:	3308      	adds	r3, #8
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800975a:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	4916      	ldr	r1, [pc, #88]	; (80097b8 <SYSVIEW_AddTask+0xcc>)
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	330c      	adds	r3, #12
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009770:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4910      	ldr	r1, [pc, #64]	; (80097b8 <SYSVIEW_AddTask+0xcc>)
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	3310      	adds	r3, #16
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009786:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	4a08      	ldr	r2, [pc, #32]	; (80097b0 <SYSVIEW_AddTask+0xc4>)
 800978e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f80e 	bl	80097bc <SYSVIEW_SendTaskInfo>
 80097a0:	e000      	b.n	80097a4 <SYSVIEW_AddTask+0xb8>
    return;
 80097a2:	bf00      	nop

}
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	0800eafc 	.word	0x0800eafc
 80097b0:	200045bc 	.word	0x200045bc
 80097b4:	0800eb04 	.word	0x0800eb04
 80097b8:	2000451c 	.word	0x2000451c

080097bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	; 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80097ca:	f107 0314 	add.w	r3, r7, #20
 80097ce:	2214      	movs	r2, #20
 80097d0:	2100      	movs	r1, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f004 fcb2 	bl	800e13c <memset>
  TaskInfo.TaskID     = TaskID;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80097ec:	f107 0314 	add.w	r3, r7, #20
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff fa63 	bl	8008cbc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80097f6:	bf00      	nop
 80097f8:	3728      	adds	r7, #40	; 0x28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	7c1b      	ldrb	r3, [r3, #16]
 800980c:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009814:	461a      	mov	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	fb02 f303 	mul.w	r3, r2, r3
 800981c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f004 fc85 	bl	800e13c <memset>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b086      	sub	sp, #24
 800983e:	af02      	add	r7, sp, #8
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	70fb      	strb	r3, [r7, #3]
 8009846:	4613      	mov	r3, r2
 8009848:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	7c1b      	ldrb	r3, [r3, #16]
 8009850:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	b29b      	uxth	r3, r3
 8009860:	89ba      	ldrh	r2, [r7, #12]
 8009862:	fb12 f303 	smulbb	r3, r2, r3
 8009866:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8009868:	89bb      	ldrh	r3, [r7, #12]
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800986e:	89bb      	ldrh	r3, [r7, #12]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	4413      	add	r3, r2
 8009874:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8009876:	7bf9      	ldrb	r1, [r7, #15]
 8009878:	78ba      	ldrb	r2, [r7, #2]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	460b      	mov	r3, r1
 8009880:	2100      	movs	r1, #0
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fe9f 	bl	800a5c6 <u8x8_DrawTile>
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a2:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098aa:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	7c5b      	ldrb	r3, [r3, #17]
 80098b2:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80098b4:	7bba      	ldrb	r2, [r7, #14]
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ffbd 	bl	800983a <u8g2_send_tile_row>
    src_row++;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	3301      	adds	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
 80098c8:	3301      	adds	r3, #1
 80098ca:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80098cc:	7bfa      	ldrb	r2, [r7, #15]
 80098ce:	7b7b      	ldrb	r3, [r7, #13]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d203      	bcs.n	80098dc <u8g2_send_buffer+0x4c>
 80098d4:	7bba      	ldrb	r2, [r7, #14]
 80098d6:	7b3b      	ldrb	r3, [r7, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d3eb      	bcc.n	80098b4 <u8g2_send_buffer+0x24>
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff ffcf 	bl	8009890 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 feb8 	bl	800a668 <u8x8_RefreshDisplay>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
}
 8009928:	bf00      	nop
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff ff5b 	bl	80097fe <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff ffd8 	bl	8009900 <u8g2_SetBufferCurrTileRow>
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2208      	movs	r2, #8
 8009964:	701a      	strb	r2, [r3, #0]
  return buf;
 8009966:	4b03      	ldr	r3, [pc, #12]	; (8009974 <u8g2_m_16_8_f+0x1c>)
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	200045c0 	.word	0x200045c0

08009978 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af02      	add	r7, sp, #8
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a0b      	ldr	r2, [pc, #44]	; (80099bc <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800998e:	490c      	ldr	r1, [pc, #48]	; (80099c0 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fecd 	bl	800a730 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8009996:	f107 0313 	add.w	r3, r7, #19
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff ffdc 	bl	8009958 <u8g2_m_16_8_f>
 80099a0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80099a2:	7cfa      	ldrb	r2, [r7, #19]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 80099aa:	6979      	ldr	r1, [r7, #20]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fa68 	bl	8009e82 <u8g2_SetupBuffer>
}
 80099b2:	bf00      	nop
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	0800a2e9 	.word	0x0800a2e9
 80099c0:	0800a4c1 	.word	0x0800a4c1
 80099c4:	08009d07 	.word	0x08009d07

080099c8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  return 0;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a04      	ldr	r2, [pc, #16]	; (80099fc <u8g2_SetFontPosBaseline+0x1c>)
 80099ec:	655a      	str	r2, [r3, #84]	; 0x54
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	080099c9 	.word	0x080099c9

08009a00 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	460b      	mov	r3, r1
 8009a10:	71fb      	strb	r3, [r7, #7]
 8009a12:	4613      	mov	r3, r2
 8009a14:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	781a      	ldrb	r2, [r3, #0]
 8009a24:	7dbb      	ldrb	r3, [r7, #22]
 8009a26:	4413      	add	r3, r2
 8009a28:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8009a2a:	7dfa      	ldrb	r2, [r7, #23]
 8009a2c:	7dbb      	ldrb	r3, [r7, #22]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d90b      	bls.n	8009a4a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8009a32:	7dfa      	ldrb	r2, [r7, #23]
 8009a34:	79bb      	ldrb	r3, [r7, #6]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d205      	bcs.n	8009a46 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8009a3a:	79bb      	ldrb	r3, [r7, #6]
 8009a3c:	75bb      	strb	r3, [r7, #22]
      b--;
 8009a3e:	7dbb      	ldrb	r3, [r7, #22]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	75bb      	strb	r3, [r7, #22]
 8009a44:	e001      	b.n	8009a4a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8009a4a:	7dfa      	ldrb	r2, [r7, #23]
 8009a4c:	79bb      	ldrb	r3, [r7, #6]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d301      	bcc.n	8009a56 <u8g2_clip_intersection2+0x56>
    return 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e01c      	b.n	8009a90 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8009a56:	7dba      	ldrb	r2, [r7, #22]
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d801      	bhi.n	8009a62 <u8g2_clip_intersection2+0x62>
    return 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e016      	b.n	8009a90 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8009a62:	7dfa      	ldrb	r2, [r7, #23]
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d201      	bcs.n	8009a6e <u8g2_clip_intersection2+0x6e>
    a = c;
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8009a6e:	7dba      	ldrb	r2, [r7, #22]
 8009a70:	79bb      	ldrb	r3, [r7, #6]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d901      	bls.n	8009a7a <u8g2_clip_intersection2+0x7a>
    b = d;
 8009a76:	79bb      	ldrb	r3, [r7, #6]
 8009a78:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	7dfa      	ldrb	r2, [r7, #23]
 8009a7e:	701a      	strb	r2, [r3, #0]
  b -= a;
 8009a80:	7dba      	ldrb	r2, [r7, #22]
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	7dba      	ldrb	r2, [r7, #22]
 8009a8c:	701a      	strb	r2, [r3, #0]
  return 1;
 8009a8e:	2301      	movs	r3, #1
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	70fb      	strb	r3, [r7, #3]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70bb      	strb	r3, [r7, #2]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009abc:	78ba      	ldrb	r2, [r7, #2]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009ac6:	7878      	ldrb	r0, [r7, #1]
 8009ac8:	78ba      	ldrb	r2, [r7, #2]
 8009aca:	78f9      	ldrb	r1, [r7, #3]
 8009acc:	7e3b      	ldrb	r3, [r7, #24]
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	47a0      	blx	r4
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd90      	pop	{r4, r7, pc}

08009ade <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8009ade:	b590      	push	{r4, r7, lr}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af02      	add	r7, sp, #8
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4611      	mov	r1, r2
 8009aea:	461a      	mov	r2, r3
 8009aec:	4603      	mov	r3, r0
 8009aee:	70fb      	strb	r3, [r7, #3]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70bb      	strb	r3, [r7, #2]
 8009af4:	4613      	mov	r3, r2
 8009af6:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d06d      	beq.n	8009bde <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8009b02:	787b      	ldrb	r3, [r7, #1]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d06a      	beq.n	8009bde <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8009b08:	787b      	ldrb	r3, [r7, #1]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d918      	bls.n	8009b40 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8009b0e:	7e3b      	ldrb	r3, [r7, #24]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d109      	bne.n	8009b28 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	787b      	ldrb	r3, [r7, #1]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	70fb      	strb	r3, [r7, #3]
	  x++;
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	3301      	adds	r3, #1
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	70fb      	strb	r3, [r7, #3]
 8009b26:	e00b      	b.n	8009b40 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8009b28:	7e3b      	ldrb	r3, [r7, #24]
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d108      	bne.n	8009b40 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8009b2e:	78ba      	ldrb	r2, [r7, #2]
 8009b30:	787b      	ldrb	r3, [r7, #1]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	70bb      	strb	r3, [r7, #2]
	  y++;
 8009b38:	78bb      	ldrb	r3, [r7, #2]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8009b40:	7e3b      	ldrb	r3, [r7, #24]
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8009b48:	7e3b      	ldrb	r3, [r7, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d119      	bne.n	8009b82 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8009b54:	78bb      	ldrb	r3, [r7, #2]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d838      	bhi.n	8009bcc <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009b60:	78bb      	ldrb	r3, [r7, #2]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d934      	bls.n	8009bd0 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009b72:	1c79      	adds	r1, r7, #1
 8009b74:	1cf8      	adds	r0, r7, #3
 8009b76:	f7ff ff43 	bl	8009a00 <u8g2_clip_intersection2>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d119      	bne.n	8009bb4 <u8g2_DrawHVLine+0xd6>
	  return;
 8009b80:	e02d      	b.n	8009bde <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d822      	bhi.n	8009bd4 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d91e      	bls.n	8009bd8 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009ba6:	1c79      	adds	r1, r7, #1
 8009ba8:	1cb8      	adds	r0, r7, #2
 8009baa:	f7ff ff29 	bl	8009a00 <u8g2_clip_intersection2>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d013      	beq.n	8009bdc <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb8:	689c      	ldr	r4, [r3, #8]
 8009bba:	78f9      	ldrb	r1, [r7, #3]
 8009bbc:	78ba      	ldrb	r2, [r7, #2]
 8009bbe:	7878      	ldrb	r0, [r7, #1]
 8009bc0:	7e3b      	ldrb	r3, [r7, #24]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	47a0      	blx	r4
 8009bca:	e008      	b.n	8009bde <u8g2_DrawHVLine+0x100>
	  return;
 8009bcc:	bf00      	nop
 8009bce:	e006      	b.n	8009bde <u8g2_DrawHVLine+0x100>
	  return;
 8009bd0:	bf00      	nop
 8009bd2:	e004      	b.n	8009bde <u8g2_DrawHVLine+0x100>
	  return;
 8009bd4:	bf00      	nop
 8009bd6:	e002      	b.n	8009bde <u8g2_DrawHVLine+0x100>
	  return;
 8009bd8:	bf00      	nop
 8009bda:	e000      	b.n	8009bde <u8g2_DrawHVLine+0x100>
	  return;
 8009bdc:	bf00      	nop
    }
}
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd90      	pop	{r4, r7, pc}

08009be4 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009bfa:	78ba      	ldrb	r2, [r7, #2]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d31a      	bcc.n	8009c36 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009c06:	78ba      	ldrb	r2, [r7, #2]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d216      	bcs.n	8009c3a <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c12:	78fa      	ldrb	r2, [r7, #3]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d312      	bcc.n	8009c3e <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d20e      	bcs.n	8009c42 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8009c24:	78ba      	ldrb	r2, [r7, #2]
 8009c26:	78f9      	ldrb	r1, [r7, #3]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff ff55 	bl	8009ade <u8g2_DrawHVLine>
 8009c34:	e006      	b.n	8009c44 <u8g2_DrawPixel+0x60>
    return;
 8009c36:	bf00      	nop
 8009c38:	e004      	b.n	8009c44 <u8g2_DrawPixel+0x60>
    return;
 8009c3a:	bf00      	nop
 8009c3c:	e002      	b.n	8009c44 <u8g2_DrawPixel+0x60>
    return;
 8009c3e:	bf00      	nop
 8009c40:	e000      	b.n	8009c44 <u8g2_DrawPixel+0x60>
    return;
 8009c42:	bf00      	nop
}
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8009c4a:	b490      	push	{r4, r7}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	4604      	mov	r4, r0
 8009c52:	4608      	mov	r0, r1
 8009c54:	4611      	mov	r1, r2
 8009c56:	461a      	mov	r2, r3
 8009c58:	4623      	mov	r3, r4
 8009c5a:	71fb      	strb	r3, [r7, #7]
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	71bb      	strb	r3, [r7, #6]
 8009c60:	460b      	mov	r3, r1
 8009c62:	717b      	strb	r3, [r7, #5]
 8009c64:	4613      	mov	r3, r2
 8009c66:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8009c68:	797a      	ldrb	r2, [r7, #5]
 8009c6a:	79bb      	ldrb	r3, [r7, #6]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d20d      	bcs.n	8009c8c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8009c70:	793a      	ldrb	r2, [r7, #4]
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d901      	bls.n	8009c7c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e014      	b.n	8009ca6 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8009c7c:	797a      	ldrb	r2, [r7, #5]
 8009c7e:	793b      	ldrb	r3, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d901      	bls.n	8009c88 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e00e      	b.n	8009ca6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e00c      	b.n	8009ca6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8009c8c:	793a      	ldrb	r2, [r7, #4]
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d907      	bls.n	8009ca4 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8009c94:	797a      	ldrb	r2, [r7, #5]
 8009c96:	793b      	ldrb	r3, [r7, #4]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d901      	bls.n	8009ca0 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e002      	b.n	8009ca6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8009ca4:	2300      	movs	r3, #0
    }
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bc90      	pop	{r4, r7}
 8009cae:	4770      	bx	lr

08009cb0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	4608      	mov	r0, r1
 8009cba:	4611      	mov	r1, r2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	70fb      	strb	r3, [r7, #3]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70bb      	strb	r3, [r7, #2]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8009cd6:	7c3b      	ldrb	r3, [r7, #16]
 8009cd8:	78ba      	ldrb	r2, [r7, #2]
 8009cda:	f7ff ffb6 	bl	8009c4a <u8g2_is_intersection_decision_tree>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <u8g2_IsIntersection+0x38>
    return 0; 
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	e00a      	b.n	8009cfe <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8009cf4:	787b      	ldrb	r3, [r7, #1]
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	f7ff ffa7 	bl	8009c4a <u8g2_is_intersection_decision_tree>
 8009cfc:	4603      	mov	r3, r0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b087      	sub	sp, #28
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	4608      	mov	r0, r1
 8009d10:	4611      	mov	r1, r2
 8009d12:	461a      	mov	r2, r3
 8009d14:	4603      	mov	r3, r0
 8009d16:	70fb      	strb	r3, [r7, #3]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70bb      	strb	r3, [r7, #2]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8009d20:	78bb      	ldrb	r3, [r7, #2]
 8009d22:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8009d24:	7cfb      	ldrb	r3, [r7, #19]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8009d30:	7c3a      	ldrb	r2, [r7, #16]
 8009d32:	7cfb      	ldrb	r3, [r7, #19]
 8009d34:	fa02 f303 	lsl.w	r3, r2, r3
 8009d38:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d801      	bhi.n	8009d50 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8009d4c:	7c3b      	ldrb	r3, [r7, #16]
 8009d4e:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d001      	beq.n	8009d5e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8009d5a:	7c3b      	ldrb	r3, [r7, #16]
 8009d5c:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8009d5e:	78bb      	ldrb	r3, [r7, #2]
 8009d60:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8009d62:	89fb      	ldrh	r3, [r7, #14]
 8009d64:	f023 0307 	bic.w	r3, r3, #7
 8009d68:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	7c1b      	ldrb	r3, [r3, #16]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	89fa      	ldrh	r2, [r7, #14]
 8009d74:	fb12 f303 	smulbb	r3, r2, r3
 8009d78:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7e:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8009d80:	89fb      	ldrh	r3, [r7, #14]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	4413      	add	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]
  ptr += x;
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8009d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d117      	bne.n	8009dc8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	7cbb      	ldrb	r3, [r7, #18]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	7c7b      	ldrb	r3, [r7, #17]
 8009dac:	4053      	eors	r3, r2
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	701a      	strb	r2, [r3, #0]
	ptr++;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	3301      	adds	r3, #1
 8009db8:	617b      	str	r3, [r7, #20]
	len--;
 8009dba:	787b      	ldrb	r3, [r7, #1]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8009dc0:	787b      	ldrb	r3, [r7, #1]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1e8      	bne.n	8009d98 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8009dc6:	e039      	b.n	8009e3c <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	7cbb      	ldrb	r3, [r7, #18]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	781a      	ldrb	r2, [r3, #0]
 8009dda:	7c7b      	ldrb	r3, [r7, #17]
 8009ddc:	4053      	eors	r3, r2
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8009de4:	7cfb      	ldrb	r3, [r7, #19]
 8009de6:	3301      	adds	r3, #1
 8009de8:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8009dea:	7cfb      	ldrb	r3, [r7, #19]
 8009dec:	f003 0307 	and.w	r3, r3, #7
 8009df0:	74fb      	strb	r3, [r7, #19]
      len--;
 8009df2:	787b      	ldrb	r3, [r7, #1]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8009df8:	7cfb      	ldrb	r3, [r7, #19]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d115      	bne.n	8009e2a <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e04:	461a      	mov	r2, r3
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	4413      	add	r3, r2
 8009e0a:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d801      	bhi.n	8009e1a <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8009e16:	2301      	movs	r3, #1
 8009e18:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d008      	beq.n	8009e36 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8009e24:	2301      	movs	r3, #1
 8009e26:	747b      	strb	r3, [r7, #17]
 8009e28:	e005      	b.n	8009e36 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8009e2a:	7cbb      	ldrb	r3, [r7, #18]
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8009e30:	7c7b      	ldrb	r3, [r7, #17]
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8009e36:	787b      	ldrb	r3, [r7, #1]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1c5      	bne.n	8009dc8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	22ff      	movs	r2, #255	; 0xff
 8009e64:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	22ff      	movs	r2, #255	; 0xff
 8009e6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	4798      	blx	r3
}
 8009e7a:	bf00      	nop
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	603b      	str	r3, [r7, #0]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	79fa      	ldrb	r2, [r7, #7]
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff ffaf 	bl	8009e48 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7ff fd78 	bl	80099e0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f14:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7bfa      	ldrb	r2, [r7, #15]
 8009f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	7c1b      	ldrb	r3, [r3, #16]
 8009f28:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b1f      	cmp	r3, #31
 8009f2e:	d901      	bls.n	8009f34 <u8g2_update_dimension_common+0x34>
    t = 31;
 8009f30:	231f      	movs	r3, #31
 8009f32:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7bfa      	ldrb	r2, [r7, #15]
 8009f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f48:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	00db      	lsls	r3, r3, #3
 8009f4e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7bfa      	ldrb	r2, [r7, #15]
 8009f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f5e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8009f68:	4413      	add	r3, r2
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	7c52      	ldrb	r2, [r2, #17]
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	dd06      	ble.n	8009f80 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	7c5a      	ldrb	r2, [r3, #17]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	22f0      	movs	r2, #240	; 0xf0
 8009fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	8a9b      	ldrh	r3, [r3, #20]
 8009fbc:	2bf0      	cmp	r3, #240	; 0xf0
 8009fbe:	d805      	bhi.n	8009fcc <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	8a9b      	ldrh	r3, [r3, #20]
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	8adb      	ldrh	r3, [r3, #22]
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8009fd8:	bf00      	nop
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	4603      	mov	r3, r0
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff fe51 	bl	8009cb0 <u8g2_IsIntersection>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d104      	bne.n	800a01e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800a01c:	e03b      	b.n	800a096 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a032:	429a      	cmp	r2, r3
 800a034:	d205      	bcs.n	800a042 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a04e:	429a      	cmp	r2, r3
 800a050:	d905      	bls.n	800a05e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d205      	bcs.n	800a07a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a086:	429a      	cmp	r2, r3
 800a088:	d905      	bls.n	800a096 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff ff2a 	bl	8009f00 <u8g2_update_dimension_common>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff ff7b 	bl	8009fe4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af02      	add	r7, sp, #8
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	4608      	mov	r0, r1
 800a100:	4611      	mov	r1, r2
 800a102:	461a      	mov	r2, r3
 800a104:	4603      	mov	r3, r0
 800a106:	70fb      	strb	r3, [r7, #3]
 800a108:	460b      	mov	r3, r1
 800a10a:	70bb      	strb	r3, [r7, #2]
 800a10c:	4613      	mov	r3, r2
 800a10e:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800a110:	7878      	ldrb	r0, [r7, #1]
 800a112:	78ba      	ldrb	r2, [r7, #2]
 800a114:	78f9      	ldrb	r1, [r7, #3]
 800a116:	7c3b      	ldrb	r3, [r7, #16]
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	4603      	mov	r3, r0
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff fcbd 	bl	8009a9c <u8g2_draw_hv_line_2dir>
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800a12a:	b590      	push	{r4, r7, lr}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691c      	ldr	r4, [r3, #16]
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	2300      	movs	r3, #0
 800a13e:	2120      	movs	r1, #32
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	47a0      	blx	r4
 800a144:	4603      	mov	r3, r0
}
 800a146:	4618      	mov	r0, r3
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd90      	pop	{r4, r7, pc}

0800a14e <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800a14e:	b590      	push	{r4, r7, lr}
 800a150:	b085      	sub	sp, #20
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	460b      	mov	r3, r1
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	691c      	ldr	r4, [r3, #16]
 800a160:	7afa      	ldrb	r2, [r7, #11]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2117      	movs	r1, #23
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	47a0      	blx	r4
 800a16a:	4603      	mov	r3, r0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	bd90      	pop	{r4, r7, pc}

0800a174 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800a180:	1cfb      	adds	r3, r7, #3
 800a182:	461a      	mov	r2, r3
 800a184:	2101      	movs	r1, #1
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff ffe1 	bl	800a14e <u8x8_byte_SendBytes>
 800a18c:	4603      	mov	r3, r0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800a196:	b590      	push	{r4, r7, lr}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68dc      	ldr	r4, [r3, #12]
 800a1a6:	78fa      	ldrb	r2, [r7, #3]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2115      	movs	r1, #21
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	47a0      	blx	r4
 800a1b0:	4603      	mov	r3, r0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd90      	pop	{r4, r7, pc}

0800a1ba <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800a1ba:	b590      	push	{r4, r7, lr}
 800a1bc:	b083      	sub	sp, #12
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68dc      	ldr	r4, [r3, #12]
 800a1ca:	78fa      	ldrb	r2, [r7, #3]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	2116      	movs	r1, #22
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	47a0      	blx	r4
 800a1d4:	4603      	mov	r3, r0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd90      	pop	{r4, r7, pc}

0800a1de <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800a1de:	b590      	push	{r4, r7, lr}
 800a1e0:	b085      	sub	sp, #20
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68dc      	ldr	r4, [r3, #12]
 800a1f0:	7afa      	ldrb	r2, [r7, #11]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2117      	movs	r1, #23
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	47a0      	blx	r4
 800a1fa:	4603      	mov	r3, r0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	bd90      	pop	{r4, r7, pc}

0800a204 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68dc      	ldr	r4, [r3, #12]
 800a210:	2300      	movs	r3, #0
 800a212:	2200      	movs	r2, #0
 800a214:	2118      	movs	r1, #24
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	47a0      	blx	r4
 800a21a:	4603      	mov	r3, r0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	bd90      	pop	{r4, r7, pc}

0800a224 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68dc      	ldr	r4, [r3, #12]
 800a230:	2300      	movs	r3, #0
 800a232:	2200      	movs	r2, #0
 800a234:	2119      	movs	r1, #25
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	47a0      	blx	r4
 800a23a:	4603      	mov	r3, r0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	bd90      	pop	{r4, r7, pc}

0800a244 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	73fb      	strb	r3, [r7, #15]
    data++;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	3301      	adds	r3, #1
 800a258:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	2bfe      	cmp	r3, #254	; 0xfe
 800a25e:	d031      	beq.n	800a2c4 <u8x8_cad_SendSequence+0x80>
 800a260:	2bfe      	cmp	r3, #254	; 0xfe
 800a262:	dc3d      	bgt.n	800a2e0 <u8x8_cad_SendSequence+0x9c>
 800a264:	2b19      	cmp	r3, #25
 800a266:	dc3b      	bgt.n	800a2e0 <u8x8_cad_SendSequence+0x9c>
 800a268:	2b18      	cmp	r3, #24
 800a26a:	da23      	bge.n	800a2b4 <u8x8_cad_SendSequence+0x70>
 800a26c:	2b16      	cmp	r3, #22
 800a26e:	dc02      	bgt.n	800a276 <u8x8_cad_SendSequence+0x32>
 800a270:	2b15      	cmp	r3, #21
 800a272:	da03      	bge.n	800a27c <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800a274:	e034      	b.n	800a2e0 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800a276:	2b17      	cmp	r3, #23
 800a278:	d00e      	beq.n	800a298 <u8x8_cad_SendSequence+0x54>
	return;
 800a27a:	e031      	b.n	800a2e0 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68dc      	ldr	r4, [r3, #12]
 800a286:	7bba      	ldrb	r2, [r7, #14]
 800a288:	7bf9      	ldrb	r1, [r7, #15]
 800a28a:	2300      	movs	r3, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	47a0      	blx	r4
	  data++;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	3301      	adds	r3, #1
 800a294:	603b      	str	r3, [r7, #0]
	  break;
 800a296:	e022      	b.n	800a2de <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800a29e:	f107 030e 	add.w	r3, r7, #14
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff ff99 	bl	800a1de <u8x8_cad_SendData>
	  data++;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	603b      	str	r3, [r7, #0]
	  break;
 800a2b2:	e014      	b.n	800a2de <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68dc      	ldr	r4, [r3, #12]
 800a2b8:	7bf9      	ldrb	r1, [r7, #15]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2200      	movs	r2, #0
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	47a0      	blx	r4
	  break;
 800a2c2:	e00c      	b.n	800a2de <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800a2ca:	7bbb      	ldrb	r3, [r7, #14]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	2129      	movs	r1, #41	; 0x29
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f9d8 	bl	800a686 <u8x8_gpio_call>
	  data++;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	603b      	str	r3, [r7, #0]
	  break;
 800a2dc:	bf00      	nop
    cmd = *data;
 800a2de:	e7b6      	b.n	800a24e <u8x8_cad_SendSequence+0xa>
	return;
 800a2e0:	bf00      	nop
    }
  }
}
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd90      	pop	{r4, r7, pc}

0800a2e8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a2e8:	b590      	push	{r4, r7, lr}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	607b      	str	r3, [r7, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	72fb      	strb	r3, [r7, #11]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800a2fa:	7afb      	ldrb	r3, [r7, #11]
 800a2fc:	3b14      	subs	r3, #20
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d82f      	bhi.n	800a362 <u8x8_cad_001+0x7a>
 800a302:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <u8x8_cad_001+0x20>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a351 	.word	0x0800a351
 800a30c:	0800a321 	.word	0x0800a321
 800a310:	0800a335 	.word	0x0800a335
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a351 	.word	0x0800a351
 800a31c:	0800a351 	.word	0x0800a351
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800a320:	2100      	movs	r1, #0
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f7ff ff01 	bl	800a12a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800a328:	7abb      	ldrb	r3, [r7, #10]
 800a32a:	4619      	mov	r1, r3
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f7ff ff21 	bl	800a174 <u8x8_byte_SendByte>
      break;
 800a332:	e018      	b.n	800a366 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800a334:	2100      	movs	r1, #0
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7ff fef7 	bl	800a12a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800a33c:	7abb      	ldrb	r3, [r7, #10]
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff ff17 	bl	800a174 <u8x8_byte_SendByte>
      break;
 800a346:	e00e      	b.n	800a366 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800a348:	2101      	movs	r1, #1
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff feed 	bl	800a12a <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	691c      	ldr	r4, [r3, #16]
 800a354:	7aba      	ldrb	r2, [r7, #10]
 800a356:	7af9      	ldrb	r1, [r7, #11]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	47a0      	blx	r4
 800a35e:	4603      	mov	r3, r0
 800a360:	e002      	b.n	800a368 <u8x8_cad_001+0x80>
    default:
      return 0;
 800a362:	2300      	movs	r3, #0
 800a364:	e000      	b.n	800a368 <u8x8_cad_001+0x80>
  }
  return 1;
 800a366:	2301      	movs	r3, #1
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd90      	pop	{r4, r7, pc}

0800a370 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	607b      	str	r3, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	72fb      	strb	r3, [r7, #11]
 800a37e:	4613      	mov	r3, r2
 800a380:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800a382:	7afb      	ldrb	r3, [r7, #11]
 800a384:	3b0b      	subs	r3, #11
 800a386:	2b04      	cmp	r3, #4
 800a388:	f200 808a 	bhi.w	800a4a0 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800a38c:	a201      	add	r2, pc, #4	; (adr r2, 800a394 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a4a1 	.word	0x0800a4a1
 800a39c:	0800a3c3 	.word	0x0800a3c3
 800a3a0:	0800a3f5 	.word	0x0800a3f5
 800a3a4:	0800a415 	.word	0x0800a415
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800a3a8:	7abb      	ldrb	r3, [r7, #10]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d104      	bne.n	800a3b8 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800a3ae:	4940      	ldr	r1, [pc, #256]	; (800a4b0 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7ff ff47 	bl	800a244 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800a3b6:	e075      	b.n	800a4a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800a3b8:	493e      	ldr	r1, [pc, #248]	; (800a4b4 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff ff42 	bl	800a244 <u8x8_cad_SendSequence>
      break;
 800a3c0:	e070      	b.n	800a4a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800a3c2:	7abb      	ldrb	r3, [r7, #10]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800a3c8:	493b      	ldr	r1, [pc, #236]	; (800a4b8 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7ff ff3a 	bl	800a244 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	7c9a      	ldrb	r2, [r3, #18]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800a3dc:	e062      	b.n	800a4a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800a3de:	4937      	ldr	r1, [pc, #220]	; (800a4bc <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f7ff ff2f 	bl	800a244 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	7cda      	ldrb	r2, [r3, #19]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800a3f2:	e057      	b.n	800a4a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7ff ff05 	bl	800a204 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800a3fa:	2181      	movs	r1, #129	; 0x81
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff feca 	bl	800a196 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800a402:	7abb      	ldrb	r3, [r7, #10]
 800a404:	4619      	mov	r1, r3
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff fed7 	bl	800a1ba <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff ff09 	bl	800a224 <u8x8_cad_EndTransfer>
      break;
 800a412:	e047      	b.n	800a4a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff fef5 	bl	800a204 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	795b      	ldrb	r3, [r3, #5]
 800a41e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	4413      	add	r3, r2
 800a430:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800a432:	2140      	movs	r1, #64	; 0x40
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f7ff feae 	bl	800a196 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	091b      	lsrs	r3, r3, #4
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f043 0310 	orr.w	r3, r3, #16
 800a444:	b2db      	uxtb	r3, r3
 800a446:	4619      	mov	r1, r3
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f7ff fea4 	bl	800a196 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	f003 030f 	and.w	r3, r3, #15
 800a454:	b2db      	uxtb	r3, r3
 800a456:	4619      	mov	r1, r3
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f7ff feae 	bl	800a1ba <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	799b      	ldrb	r3, [r3, #6]
 800a462:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800a466:	b2db      	uxtb	r3, r3
 800a468:	4619      	mov	r1, r3
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fea5 	bl	800a1ba <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	791b      	ldrb	r3, [r3, #4]
 800a474:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800a47c:	7dbb      	ldrb	r3, [r7, #22]
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	b2db      	uxtb	r3, r3
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	4619      	mov	r1, r3
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7ff fea9 	bl	800a1de <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800a48c:	7abb      	ldrb	r3, [r7, #10]
 800a48e:	3b01      	subs	r3, #1
 800a490:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800a492:	7abb      	ldrb	r3, [r7, #10]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1eb      	bne.n	800a470 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff fec3 	bl	800a224 <u8x8_cad_EndTransfer>
      break;
 800a49e:	e001      	b.n	800a4a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e000      	b.n	800a4a6 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800a4a4:	2301      	movs	r3, #1
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3718      	adds	r7, #24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800ee00 	.word	0x0800ee00
 800a4b4:	0800ee08 	.word	0x0800ee08
 800a4b8:	0800ee10 	.word	0x0800ee10
 800a4bc:	0800ee18 	.word	0x0800ee18

0800a4c0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	607b      	str	r3, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	72fb      	strb	r3, [r7, #11]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800a4d2:	7aba      	ldrb	r2, [r7, #10]
 800a4d4:	7af9      	ldrb	r1, [r7, #11]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7ff ff49 	bl	800a370 <u8x8_d_ssd1306_sh1106_generic>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e014      	b.n	800a512 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	2b09      	cmp	r3, #9
 800a4ec:	d009      	beq.n	800a502 <u8x8_d_ssd1306_128x64_noname+0x42>
 800a4ee:	2b0a      	cmp	r3, #10
 800a4f0:	d10c      	bne.n	800a50c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f82a 	bl	800a54c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800a4f8:	4908      	ldr	r1, [pc, #32]	; (800a51c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f7ff fea2 	bl	800a244 <u8x8_cad_SendSequence>
      break;
 800a500:	e006      	b.n	800a510 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800a502:	4907      	ldr	r1, [pc, #28]	; (800a520 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 f80d 	bl	800a524 <u8x8_d_helper_display_setup_memory>
      break;
 800a50a:	e001      	b.n	800a510 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e000      	b.n	800a512 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800a510:	2301      	movs	r3, #1
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	0800edc8 	.word	0x0800edc8
 800a520:	0800ee20 	.word	0x0800ee20

0800a524 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	7c9a      	ldrb	r2, [r3, #18]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800a54c:	b590      	push	{r4, r7, lr}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	695c      	ldr	r4, [r3, #20]
 800a558:	2300      	movs	r3, #0
 800a55a:	2200      	movs	r2, #0
 800a55c:	2128      	movs	r1, #40	; 0x28
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68dc      	ldr	r4, [r3, #12]
 800a566:	2300      	movs	r3, #0
 800a568:	2200      	movs	r2, #0
 800a56a:	2114      	movs	r1, #20
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800a570:	2201      	movs	r2, #1
 800a572:	214b      	movs	r1, #75	; 0x4b
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f886 	bl	800a686 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	791b      	ldrb	r3, [r3, #4]
 800a580:	461a      	mov	r2, r3
 800a582:	2129      	movs	r1, #41	; 0x29
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f87e 	bl	800a686 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800a58a:	2200      	movs	r2, #0
 800a58c:	214b      	movs	r1, #75	; 0x4b
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f879 	bl	800a686 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	791b      	ldrb	r3, [r3, #4]
 800a59a:	461a      	mov	r2, r3
 800a59c:	2129      	movs	r1, #41	; 0x29
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f871 	bl	800a686 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	214b      	movs	r1, #75	; 0x4b
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f86c 	bl	800a686 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	795b      	ldrb	r3, [r3, #5]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	2129      	movs	r1, #41	; 0x29
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f864 	bl	800a686 <u8x8_gpio_call>
}    
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd90      	pop	{r4, r7, pc}

0800a5c6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800a5c6:	b590      	push	{r4, r7, lr}
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	70fb      	strb	r3, [r7, #3]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70bb      	strb	r3, [r7, #2]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800a5e4:	78bb      	ldrb	r3, [r7, #2]
 800a5e6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800a5e8:	787b      	ldrb	r3, [r7, #1]
 800a5ea:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689c      	ldr	r4, [r3, #8]
 800a5f4:	f107 0308 	add.w	r3, r7, #8
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	210f      	movs	r1, #15
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	47a0      	blx	r4
 800a600:	4603      	mov	r3, r0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	bd90      	pop	{r4, r7, pc}

0800a60a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800a60a:	b590      	push	{r4, r7, lr}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	689c      	ldr	r4, [r3, #8]
 800a616:	2300      	movs	r3, #0
 800a618:	2200      	movs	r2, #0
 800a61a:	2109      	movs	r1, #9
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	47a0      	blx	r4
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	bd90      	pop	{r4, r7, pc}

0800a628 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800a628:	b590      	push	{r4, r7, lr}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689c      	ldr	r4, [r3, #8]
 800a634:	2300      	movs	r3, #0
 800a636:	2200      	movs	r2, #0
 800a638:	210a      	movs	r1, #10
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	47a0      	blx	r4
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	bd90      	pop	{r4, r7, pc}

0800a646 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800a646:	b590      	push	{r4, r7, lr}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689c      	ldr	r4, [r3, #8]
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	2300      	movs	r3, #0
 800a65a:	210b      	movs	r1, #11
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	47a0      	blx	r4
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	bd90      	pop	{r4, r7, pc}

0800a668 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689c      	ldr	r4, [r3, #8]
 800a674:	2300      	movs	r3, #0
 800a676:	2200      	movs	r2, #0
 800a678:	2110      	movs	r1, #16
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	47a0      	blx	r4
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	bd90      	pop	{r4, r7, pc}

0800a686 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800a686:	b590      	push	{r4, r7, lr}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
 800a692:	4613      	mov	r3, r2
 800a694:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	695c      	ldr	r4, [r3, #20]
 800a69a:	78ba      	ldrb	r2, [r7, #2]
 800a69c:	78f9      	ldrb	r1, [r7, #3]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	47a0      	blx	r4
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd90      	pop	{r4, r7, pc}

0800a6ac <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	72fb      	strb	r3, [r7, #11]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a13      	ldr	r2, [pc, #76]	; (800a72c <u8x8_SetupDefaults+0x60>)
 800a6de:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a12      	ldr	r2, [pc, #72]	; (800a72c <u8x8_SetupDefaults+0x60>)
 800a6e4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a10      	ldr	r2, [pc, #64]	; (800a72c <u8x8_SetupDefaults+0x60>)
 800a6ea:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a0f      	ldr	r2, [pc, #60]	; (800a72c <u8x8_SetupDefaults+0x60>)
 800a6f0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	22ff      	movs	r2, #255	; 0xff
 800a714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	22ff      	movs	r2, #255	; 0xff
 800a71c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	0800a6ad 	.word	0x0800a6ad

0800a730 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f7ff ffc4 	bl	800a6cc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7ff ff54 	bl	800a60a <u8x8_SetupMemory>
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b089      	sub	sp, #36	; 0x24
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	330c      	adds	r3, #12
 800a776:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	e853 3f00 	ldrex	r3, [r3]
 800a77e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f043 0310 	orr.w	r3, r3, #16
 800a786:	61fb      	str	r3, [r7, #28]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	330c      	adds	r3, #12
 800a78c:	69fa      	ldr	r2, [r7, #28]
 800a78e:	61ba      	str	r2, [r7, #24]
 800a790:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	6979      	ldr	r1, [r7, #20]
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	613b      	str	r3, [r7, #16]
   return(result);
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e7      	bne.n	800a772 <LL_USART_EnableIT_IDLE+0x8>
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	3724      	adds	r7, #36	; 0x24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b089      	sub	sp, #36	; 0x24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3314      	adds	r3, #20
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	61ba      	str	r2, [r7, #24]
 800a7d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d8:	6979      	ldr	r1, [r7, #20]
 800a7da:	69ba      	ldr	r2, [r7, #24]
 800a7dc:	e841 2300 	strex	r3, r2, [r1]
 800a7e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e7      	bne.n	800a7b8 <LL_USART_EnableDMAReq_RX+0x8>
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	3724      	adds	r7, #36	; 0x24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
	...

0800a7f8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800a802:	4a0c      	ldr	r2, [pc, #48]	; (800a834 <LL_DMA_EnableStream+0x3c>)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	4413      	add	r3, r2
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4413      	add	r3, r2
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4908      	ldr	r1, [pc, #32]	; (800a834 <LL_DMA_EnableStream+0x3c>)
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	440a      	add	r2, r1
 800a818:	7812      	ldrb	r2, [r2, #0]
 800a81a:	4611      	mov	r1, r2
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	440a      	add	r2, r1
 800a820:	f043 0301 	orr.w	r3, r3, #1
 800a824:	6013      	str	r3, [r2, #0]
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	0800ee38 	.word	0x0800ee38

0800a838 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800a844:	4a0d      	ldr	r2, [pc, #52]	; (800a87c <LL_DMA_SetDataLength+0x44>)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	4413      	add	r3, r2
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4413      	add	r3, r2
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	0c1b      	lsrs	r3, r3, #16
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	4908      	ldr	r1, [pc, #32]	; (800a87c <LL_DMA_SetDataLength+0x44>)
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	440a      	add	r2, r1
 800a85e:	7812      	ldrb	r2, [r2, #0]
 800a860:	4611      	mov	r1, r2
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	440a      	add	r2, r1
 800a866:	4611      	mov	r1, r2
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	604b      	str	r3, [r1, #4]
}
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	0800ee38 	.word	0x0800ee38

0800a880 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800a88c:	4a07      	ldr	r2, [pc, #28]	; (800a8ac <LL_DMA_SetMemoryAddress+0x2c>)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	4413      	add	r3, r2
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	461a      	mov	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4413      	add	r3, r2
 800a89a:	461a      	mov	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60d3      	str	r3, [r2, #12]
}
 800a8a0:	bf00      	nop
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	0800ee38 	.word	0x0800ee38

0800a8b0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800a8bc:	4a07      	ldr	r2, [pc, #28]	; (800a8dc <LL_DMA_SetPeriphAddress+0x2c>)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6093      	str	r3, [r2, #8]
}
 800a8d0:	bf00      	nop
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	0800ee38 	.word	0x0800ee38

0800a8e0 <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 800a8e6:	f7fc f97b 	bl	8006be0 <xTaskGetTickCount>
 800a8ea:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4a10      	ldr	r2, [pc, #64]	; (800a930 <print_boottime+0x50>)
 800a8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f4:	099b      	lsrs	r3, r3, #6
 800a8f6:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4a0d      	ldr	r2, [pc, #52]	; (800a930 <print_boottime+0x50>)
 800a8fc:	fba2 1203 	umull	r1, r2, r2, r3
 800a900:	0992      	lsrs	r2, r2, #6
 800a902:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a906:	fb01 f202 	mul.w	r2, r1, r2
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	4908      	ldr	r1, [pc, #32]	; (800a934 <print_boottime+0x54>)
 800a914:	4808      	ldr	r0, [pc, #32]	; (800a938 <print_boottime+0x58>)
 800a916:	f003 fc19 	bl	800e14c <siprintf>
 800a91a:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	4905      	ldr	r1, [pc, #20]	; (800a938 <print_boottime+0x58>)
 800a922:	2000      	movs	r0, #0
 800a924:	f003 fb26 	bl	800df74 <hal_uart_transfer>
}
 800a928:	bf00      	nop
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	10624dd3 	.word	0x10624dd3
 800a934:	0800eb54 	.word	0x0800eb54
 800a938:	200049c4 	.word	0x200049c4

0800a93c <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 800a93c:	b40f      	push	{r0, r1, r2, r3}
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 800a944:	4b17      	ldr	r3, [pc, #92]	; (800a9a4 <hal_cli_printf+0x68>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fb fb55 	bl	8005ffc <xQueueSemaphoreTake>
 800a952:	4603      	mov	r3, r0
 800a954:	2b01      	cmp	r3, #1
 800a956:	d11d      	bne.n	800a994 <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 800a958:	f7ff ffc2 	bl	800a8e0 <print_boottime>

	va_start(valist, fmt);
 800a95c:	f107 0314 	add.w	r3, r7, #20
 800a960:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	6939      	ldr	r1, [r7, #16]
 800a966:	4810      	ldr	r0, [pc, #64]	; (800a9a8 <hal_cli_printf+0x6c>)
 800a968:	f003 fc26 	bl	800e1b8 <vsiprintf>
 800a96c:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	461a      	mov	r2, r3
 800a972:	490d      	ldr	r1, [pc, #52]	; (800a9a8 <hal_cli_printf+0x6c>)
 800a974:	2000      	movs	r0, #0
 800a976:	f003 fafd 	bl	800df74 <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 800a97a:	2202      	movs	r2, #2
 800a97c:	490b      	ldr	r1, [pc, #44]	; (800a9ac <hal_cli_printf+0x70>)
 800a97e:	2000      	movs	r0, #0
 800a980:	f003 faf8 	bl	800df74 <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 800a984:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <hal_cli_printf+0x68>)
 800a986:	6818      	ldr	r0, [r3, #0]
 800a988:	2300      	movs	r3, #0
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	f7fb f841 	bl	8005a14 <xQueueGenericSend>
 800a992:	e000      	b.n	800a996 <hal_cli_printf+0x5a>
		return;
 800a994:	bf00      	nop
}
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a99e:	b004      	add	sp, #16
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	200049c0 	.word	0x200049c0
 800a9a8:	200049c4 	.word	0x200049c4
 800a9ac:	0800eb60 	.word	0x0800eb60

0800a9b0 <hal_cli_init>:

void hal_cli_init(void) {
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 800a9b4:	4b17      	ldr	r3, [pc, #92]	; (800aa14 <hal_cli_init+0x64>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 800a9bc:	4b15      	ldr	r3, [pc, #84]	; (800aa14 <hal_cli_init+0x64>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 800a9c4:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <hal_cli_init+0x64>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7fb f809 	bl	80059e4 <xQueueCreateMutex>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	4a10      	ldr	r2, [pc, #64]	; (800aa18 <hal_cli_init+0x68>)
 800a9d6:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 800a9d8:	4b10      	ldr	r3, [pc, #64]	; (800aa1c <hal_cli_init+0x6c>)
 800a9da:	461a      	mov	r2, r3
 800a9dc:	2102      	movs	r1, #2
 800a9de:	4810      	ldr	r0, [pc, #64]	; (800aa20 <hal_cli_init+0x70>)
 800a9e0:	f7ff ff4e 	bl	800a880 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800a9e4:	4a0f      	ldr	r2, [pc, #60]	; (800aa24 <hal_cli_init+0x74>)
 800a9e6:	2102      	movs	r1, #2
 800a9e8:	480d      	ldr	r0, [pc, #52]	; (800aa20 <hal_cli_init+0x70>)
 800a9ea:	f7ff ff61 	bl	800a8b0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 800a9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9f2:	2102      	movs	r1, #2
 800a9f4:	480a      	ldr	r0, [pc, #40]	; (800aa20 <hal_cli_init+0x70>)
 800a9f6:	f7ff ff1f 	bl	800a838 <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 800a9fa:	480b      	ldr	r0, [pc, #44]	; (800aa28 <hal_cli_init+0x78>)
 800a9fc:	f7ff fed8 	bl	800a7b0 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800aa00:	2102      	movs	r1, #2
 800aa02:	4807      	ldr	r0, [pc, #28]	; (800aa20 <hal_cli_init+0x70>)
 800aa04:	f7ff fef8 	bl	800a7f8 <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 800aa08:	4807      	ldr	r0, [pc, #28]	; (800aa28 <hal_cli_init+0x78>)
 800aa0a:	f7ff feae 	bl	800a76a <LL_USART_EnableIT_IDLE>
}
 800aa0e:	bf00      	nop
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	200049c4 	.word	0x200049c4
 800aa18:	200049c0 	.word	0x200049c0
 800aa1c:	20004ac4 	.word	0x20004ac4
 800aa20:	40026400 	.word	0x40026400
 800aa24:	40011004 	.word	0x40011004
 800aa28:	40011000 	.word	0x40011000

0800aa2c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800aa34:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800aa36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa38:	4907      	ldr	r1, [pc, #28]	; (800aa58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800aa42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4013      	ands	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
}
 800aa4c:	bf00      	nop
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	40023800 	.word	0x40023800

0800aa5c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800aa64:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <LL_APB1_GRP1_EnableClock+0x2c>)
 800aa66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa68:	4907      	ldr	r1, [pc, #28]	; (800aa88 <LL_APB1_GRP1_EnableClock+0x2c>)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800aa70:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <LL_APB1_GRP1_EnableClock+0x2c>)
 800aa72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4013      	ands	r3, r2
 800aa78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
}
 800aa7c:	bf00      	nop
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	40023800 	.word	0x40023800

0800aa8c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800aa94:	4b08      	ldr	r3, [pc, #32]	; (800aab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800aa96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa98:	4907      	ldr	r1, [pc, #28]	; (800aab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800aaa0:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800aaa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
}
 800aaac:	bf00      	nop
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	40023800 	.word	0x40023800

0800aabc <LL_RCC_HSE_Enable>:
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <LL_RCC_HSE_Enable+0x1c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a04      	ldr	r2, [pc, #16]	; (800aad8 <LL_RCC_HSE_Enable+0x1c>)
 800aac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaca:	6013      	str	r3, [r2, #0]
}
 800aacc:	bf00      	nop
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	40023800 	.word	0x40023800

0800aadc <LL_RCC_HSE_IsReady>:
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800aae0:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <LL_RCC_HSE_IsReady+0x24>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaec:	bf0c      	ite	eq
 800aaee:	2301      	moveq	r3, #1
 800aaf0:	2300      	movne	r3, #0
 800aaf2:	b2db      	uxtb	r3, r3
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	40023800 	.word	0x40023800

0800ab04 <LL_RCC_SetSysClkSource>:
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ab0c:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <LL_RCC_SetSysClkSource+0x24>)
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f023 0203 	bic.w	r2, r3, #3
 800ab14:	4904      	ldr	r1, [pc, #16]	; (800ab28 <LL_RCC_SetSysClkSource+0x24>)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	608b      	str	r3, [r1, #8]
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	40023800 	.word	0x40023800

0800ab2c <LL_RCC_GetSysClkSource>:
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <LL_RCC_GetSysClkSource+0x18>)
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	f003 030c 	and.w	r3, r3, #12
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	40023800 	.word	0x40023800

0800ab48 <LL_RCC_SetAHBPrescaler>:
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ab50:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <LL_RCC_SetAHBPrescaler+0x24>)
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab58:	4904      	ldr	r1, [pc, #16]	; (800ab6c <LL_RCC_SetAHBPrescaler+0x24>)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	608b      	str	r3, [r1, #8]
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	40023800 	.word	0x40023800

0800ab70 <LL_RCC_SetAPB1Prescaler>:
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ab78:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <LL_RCC_SetAPB1Prescaler+0x24>)
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab80:	4904      	ldr	r1, [pc, #16]	; (800ab94 <LL_RCC_SetAPB1Prescaler+0x24>)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	608b      	str	r3, [r1, #8]
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	40023800 	.word	0x40023800

0800ab98 <LL_RCC_SetAPB2Prescaler>:
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <LL_RCC_SetAPB2Prescaler+0x24>)
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aba8:	4904      	ldr	r1, [pc, #16]	; (800abbc <LL_RCC_SetAPB2Prescaler+0x24>)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4313      	orrs	r3, r2
 800abae:	608b      	str	r3, [r1, #8]
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	40023800 	.word	0x40023800

0800abc0 <LL_RCC_SetTIMPrescaler>:
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <LL_RCC_SetTIMPrescaler+0x28>)
 800abca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800abd2:	4905      	ldr	r1, [pc, #20]	; (800abe8 <LL_RCC_SetTIMPrescaler+0x28>)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	40023800 	.word	0x40023800

0800abec <LL_RCC_PLL_Enable>:
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800abf0:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <LL_RCC_PLL_Enable+0x1c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a04      	ldr	r2, [pc, #16]	; (800ac08 <LL_RCC_PLL_Enable+0x1c>)
 800abf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abfa:	6013      	str	r3, [r2, #0]
}
 800abfc:	bf00      	nop
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40023800 	.word	0x40023800

0800ac0c <LL_RCC_PLL_IsReady>:
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800ac10:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <LL_RCC_PLL_IsReady+0x24>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2301      	moveq	r3, #1
 800ac20:	2300      	movne	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	40023800 	.word	0x40023800

0800ac34 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800ac42:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	68f9      	ldr	r1, [r7, #12]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	4311      	orrs	r1, r2
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	0192      	lsls	r2, r2, #6
 800ac54:	430a      	orrs	r2, r1
 800ac56:	4908      	ldr	r1, [pc, #32]	; (800ac78 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800ac5c:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac64:	4904      	ldr	r1, [pc, #16]	; (800ac78 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	604b      	str	r3, [r1, #4]
}
 800ac6c:	bf00      	nop
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	40023800 	.word	0x40023800
 800ac7c:	ffbf8000 	.word	0xffbf8000

0800ac80 <LL_RCC_PLL_ConfigDomain_48M>:
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800ac8e:	4b0a      	ldr	r3, [pc, #40]	; (800acb8 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 800ac94:	4013      	ands	r3, r2
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	4311      	orrs	r1, r2
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	0192      	lsls	r2, r2, #6
 800aca0:	4311      	orrs	r1, r2
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	430a      	orrs	r2, r1
 800aca6:	4904      	ldr	r1, [pc, #16]	; (800acb8 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	604b      	str	r3, [r1, #4]
}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	40023800 	.word	0x40023800
 800acbc:	f0bf8000 	.word	0xf0bf8000

0800acc0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800acc8:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <LL_FLASH_SetLatency+0x24>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f023 020f 	bic.w	r2, r3, #15
 800acd0:	4904      	ldr	r1, [pc, #16]	; (800ace4 <LL_FLASH_SetLatency+0x24>)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	600b      	str	r3, [r1, #0]
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	40023c00 	.word	0x40023c00

0800ace8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800ace8:	b480      	push	{r7}
 800acea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800acec:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <LL_FLASH_GetLatency+0x18>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 030f 	and.w	r3, r3, #15
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	40023c00 	.word	0x40023c00

0800ad04 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800ad04:	b480      	push	{r7}
 800ad06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <LL_PWR_EnableOverDriveMode+0x1c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a04      	ldr	r2, [pc, #16]	; (800ad20 <LL_PWR_EnableOverDriveMode+0x1c>)
 800ad0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad12:	6013      	str	r3, [r2, #0]
}
 800ad14:	bf00      	nop
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	40007000 	.word	0x40007000

0800ad24 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800ad2c:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad34:	4904      	ldr	r1, [pc, #16]	; (800ad48 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	600b      	str	r3, [r1, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	40007000 	.word	0x40007000

0800ad4c <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800ad50:	2001      	movs	r0, #1
 800ad52:	f7ff fe6b 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800ad56:	2002      	movs	r0, #2
 800ad58:	f7ff fe68 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800ad5c:	2004      	movs	r0, #4
 800ad5e:	f7ff fe65 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800ad62:	2008      	movs	r0, #8
 800ad64:	f7ff fe62 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800ad68:	2010      	movs	r0, #16
 800ad6a:	f7ff fe5f 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800ad6e:	2020      	movs	r0, #32
 800ad70:	f7ff fe5c 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800ad74:	2040      	movs	r0, #64	; 0x40
 800ad76:	f7ff fe59 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800ad7a:	2080      	movs	r0, #128	; 0x80
 800ad7c:	f7ff fe56 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800ad80:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ad84:	f7ff fe52 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800ad88:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800ad8c:	f7ff fe4e 	bl	800aa2c <LL_AHB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800ad90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ad94:	f7ff fe62 	bl	800aa5c <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800ad98:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ad9c:	f7ff fe5e 	bl	800aa5c <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800ada0:	2010      	movs	r0, #16
 800ada2:	f7ff fe73 	bl	800aa8c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800ada6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800adaa:	f7ff fe57 	bl	800aa5c <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800adae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800adb2:	f7ff fe53 	bl	800aa5c <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 800adb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800adba:	f7ff fe67 	bl	800aa8c <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 800adbe:	bf00      	nop
 800adc0:	bd80      	pop	{r7, pc}
	...

0800adc4 <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800adca:	2005      	movs	r0, #5
 800adcc:	f7ff ff78 	bl	800acc0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800add0:	bf00      	nop
 800add2:	f7ff ff89 	bl	800ace8 <LL_FLASH_GetLatency>
 800add6:	4603      	mov	r3, r0
 800add8:	2b05      	cmp	r3, #5
 800adda:	d1fa      	bne.n	800add2 <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800addc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800ade0:	f7ff ffa0 	bl	800ad24 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800ade4:	f7ff ff8e 	bl	800ad04 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800ade8:	f7ff fe68 	bl	800aabc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800adec:	bf00      	nop
 800adee:	f7ff fe75 	bl	800aadc <LL_RCC_HSE_IsReady>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d1fa      	bne.n	800adee <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800adf8:	2300      	movs	r3, #0
 800adfa:	22b4      	movs	r2, #180	; 0xb4
 800adfc:	2104      	movs	r1, #4
 800adfe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800ae02:	f7ff ff17 	bl	800ac34 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 800ae06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae0a:	22b4      	movs	r2, #180	; 0xb4
 800ae0c:	2104      	movs	r1, #4
 800ae0e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800ae12:	f7ff ff35 	bl	800ac80 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 800ae16:	f7ff fee9 	bl	800abec <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800ae1a:	bf00      	nop
 800ae1c:	f7ff fef6 	bl	800ac0c <LL_RCC_PLL_IsReady>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d1fa      	bne.n	800ae1c <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800ae26:	2000      	movs	r0, #0
 800ae28:	f7ff fe8e 	bl	800ab48 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800ae2c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800ae30:	f7ff fe9e 	bl	800ab70 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800ae34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ae38:	f7ff feae 	bl	800ab98 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800ae3c:	2002      	movs	r0, #2
 800ae3e:	f7ff fe61 	bl	800ab04 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800ae42:	bf00      	nop
 800ae44:	f7ff fe72 	bl	800ab2c <LL_RCC_GetSysClkSource>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b08      	cmp	r3, #8
 800ae4c:	d1fa      	bne.n	800ae44 <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 800ae4e:	4808      	ldr	r0, [pc, #32]	; (800ae70 <hal_clock_init_early+0xac>)
 800ae50:	f7f9 fc54 	bl	80046fc <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800ae54:	463b      	mov	r3, r7
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f8 fae6 	bl	8003428 <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800ae5c:	2005      	movs	r0, #5
 800ae5e:	f002 fca1 	bl	800d7a4 <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800ae62:	2000      	movs	r0, #0
 800ae64:	f7ff feac 	bl	800abc0 <LL_RCC_SetTIMPrescaler>
}
 800ae68:	bf00      	nop
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0aba9500 	.word	0x0aba9500

0800ae74 <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 800ae74:	b480      	push	{r7}
 800ae76:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ae78:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <hal_dwt_init_early+0x2c>)
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	4a08      	ldr	r2, [pc, #32]	; (800aea0 <hal_dwt_init_early+0x2c>)
 800ae7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae82:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800ae84:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <hal_dwt_init_early+0x30>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a06      	ldr	r2, [pc, #24]	; (800aea4 <hal_dwt_init_early+0x30>)
 800ae8a:	f043 0301 	orr.w	r3, r3, #1
 800ae8e:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 800ae90:	4b04      	ldr	r3, [pc, #16]	; (800aea4 <hal_dwt_init_early+0x30>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	605a      	str	r2, [r3, #4]
}
 800ae96:	bf00      	nop
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	e000edf0 	.word	0xe000edf0
 800aea4:	e0001000 	.word	0xe0001000

0800aea8 <hal_delay_us>:
#include "delay.h"
#include <stdbool.h>

void hal_delay_us(uint32_t microseconds) {
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800aeb0:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <hal_delay_us+0x40>)
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	60fb      	str	r3, [r7, #12]
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <hal_delay_us+0x44>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a0d      	ldr	r2, [pc, #52]	; (800aef0 <hal_delay_us+0x48>)
 800aebc:	fba2 2303 	umull	r2, r3, r2, r3
 800aec0:	0c9a      	lsrs	r2, r3, #18
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	fb02 f303 	mul.w	r3, r2, r3
 800aec8:	60bb      	str	r3, [r7, #8]
    while((DWT->CYCCNT - start) < time_ticks) {
 800aeca:	bf00      	nop
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <hal_delay_us+0x40>)
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d8f8      	bhi.n	800aecc <hal_delay_us+0x24>
    };
}
 800aeda:	bf00      	nop
 800aedc:	bf00      	nop
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	e0001000 	.word	0xe0001000
 800aeec:	20000010 	.word	0x20000010
 800aef0:	431bde83 	.word	0x431bde83

0800aef4 <hal_get_delay_timer>:

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 800aefe:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <hal_get_delay_timer+0x40>)
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000000) * timeout;
 800af04:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <hal_get_delay_timer+0x44>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a0c      	ldr	r2, [pc, #48]	; (800af3c <hal_get_delay_timer+0x48>)
 800af0a:	fba2 2303 	umull	r2, r3, r2, r3
 800af0e:	0c9b      	lsrs	r3, r3, #18
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	fb02 f303 	mul.w	r3, r2, r3
 800af16:	60fb      	str	r3, [r7, #12]
	return tmp;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	461a      	mov	r2, r3
 800af1c:	f107 0308 	add.w	r3, r7, #8
 800af20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af24:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	e0001000 	.word	0xe0001000
 800af38:	20000010 	.word	0x20000010
 800af3c:	431bde83 	.word	0x431bde83

0800af40 <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 800af48:	4b08      	ldr	r3, [pc, #32]	; (800af6c <hal_delay_timer_is_expired+0x2c>)
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	1ad2      	subs	r2, r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	bf2c      	ite	cs
 800af5a:	2301      	movcs	r3, #1
 800af5c:	2300      	movcc	r3, #0
 800af5e:	b2db      	uxtb	r3, r3
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	e0001000 	.word	0xe0001000

0800af70 <LL_GPIO_SetPinMode>:
{
 800af70:	b480      	push	{r7}
 800af72:	b089      	sub	sp, #36	; 0x24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	fa93 f3a3 	rbit	r3, r3
 800af8a:	613b      	str	r3, [r7, #16]
  return result;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	fab3 f383 	clz	r3, r3
 800af92:	b2db      	uxtb	r3, r3
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	2103      	movs	r1, #3
 800af98:	fa01 f303 	lsl.w	r3, r1, r3
 800af9c:	43db      	mvns	r3, r3
 800af9e:	401a      	ands	r2, r3
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	fa93 f3a3 	rbit	r3, r3
 800afaa:	61bb      	str	r3, [r7, #24]
  return result;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	fab3 f383 	clz	r3, r3
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	fa01 f303 	lsl.w	r3, r1, r3
 800afbc:	431a      	orrs	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	601a      	str	r2, [r3, #0]
}
 800afc2:	bf00      	nop
 800afc4:	3724      	adds	r7, #36	; 0x24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <LL_GPIO_SetPinOutputType>:
{
 800afce:	b480      	push	{r7}
 800afd0:	b085      	sub	sp, #20
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	43db      	mvns	r3, r3
 800afe2:	401a      	ands	r2, r3
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	fb01 f303 	mul.w	r3, r1, r3
 800afec:	431a      	orrs	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	605a      	str	r2, [r3, #4]
}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <LL_GPIO_SetPinSpeed>:
{
 800affe:	b480      	push	{r7}
 800b000:	b089      	sub	sp, #36	; 0x24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	fa93 f3a3 	rbit	r3, r3
 800b018:	613b      	str	r3, [r7, #16]
  return result;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	fab3 f383 	clz	r3, r3
 800b020:	b2db      	uxtb	r3, r3
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	2103      	movs	r1, #3
 800b026:	fa01 f303 	lsl.w	r3, r1, r3
 800b02a:	43db      	mvns	r3, r3
 800b02c:	401a      	ands	r2, r3
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	fa93 f3a3 	rbit	r3, r3
 800b038:	61bb      	str	r3, [r7, #24]
  return result;
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	fab3 f383 	clz	r3, r3
 800b040:	b2db      	uxtb	r3, r3
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	fa01 f303 	lsl.w	r3, r1, r3
 800b04a:	431a      	orrs	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	609a      	str	r2, [r3, #8]
}
 800b050:	bf00      	nop
 800b052:	3724      	adds	r7, #36	; 0x24
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <LL_GPIO_SetPinPull>:
{
 800b05c:	b480      	push	{r7}
 800b05e:	b089      	sub	sp, #36	; 0x24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	68da      	ldr	r2, [r3, #12]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	fa93 f3a3 	rbit	r3, r3
 800b076:	613b      	str	r3, [r7, #16]
  return result;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	fab3 f383 	clz	r3, r3
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	2103      	movs	r1, #3
 800b084:	fa01 f303 	lsl.w	r3, r1, r3
 800b088:	43db      	mvns	r3, r3
 800b08a:	401a      	ands	r2, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	fa93 f3a3 	rbit	r3, r3
 800b096:	61bb      	str	r3, [r7, #24]
  return result;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	fab3 f383 	clz	r3, r3
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	6879      	ldr	r1, [r7, #4]
 800b0a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	60da      	str	r2, [r3, #12]
}
 800b0ae:	bf00      	nop
 800b0b0:	3724      	adds	r7, #36	; 0x24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <LL_GPIO_SetAFPin_0_7>:
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b089      	sub	sp, #36	; 0x24
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1a      	ldr	r2, [r3, #32]
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	fa93 f3a3 	rbit	r3, r3
 800b0d4:	613b      	str	r3, [r7, #16]
  return result;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	fab3 f383 	clz	r3, r3
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	210f      	movs	r1, #15
 800b0e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0e6:	43db      	mvns	r3, r3
 800b0e8:	401a      	ands	r2, r3
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	fa93 f3a3 	rbit	r3, r3
 800b0f4:	61bb      	str	r3, [r7, #24]
  return result;
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	fab3 f383 	clz	r3, r3
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	fa01 f303 	lsl.w	r3, r1, r3
 800b106:	431a      	orrs	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	621a      	str	r2, [r3, #32]
}
 800b10c:	bf00      	nop
 800b10e:	3724      	adds	r7, #36	; 0x24
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <LL_GPIO_SetAFPin_8_15>:
{
 800b118:	b480      	push	{r7}
 800b11a:	b089      	sub	sp, #36	; 0x24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	0a1b      	lsrs	r3, r3, #8
 800b12c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	fa93 f3a3 	rbit	r3, r3
 800b134:	613b      	str	r3, [r7, #16]
  return result;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	fab3 f383 	clz	r3, r3
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	210f      	movs	r1, #15
 800b142:	fa01 f303 	lsl.w	r3, r1, r3
 800b146:	43db      	mvns	r3, r3
 800b148:	401a      	ands	r2, r3
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	0a1b      	lsrs	r3, r3, #8
 800b14e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	fa93 f3a3 	rbit	r3, r3
 800b156:	61bb      	str	r3, [r7, #24]
  return result;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	fab3 f383 	clz	r3, r3
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	fa01 f303 	lsl.w	r3, r1, r3
 800b168:	431a      	orrs	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b16e:	bf00      	nop
 800b170:	3724      	adds	r7, #36	; 0x24
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
	...

0800b17c <LL_SYSCFG_SetEXTISource>:
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800b186:	4a13      	ldr	r2, [pc, #76]	; (800b1d4 <LL_SYSCFG_SetEXTISource+0x58>)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	3302      	adds	r3, #2
 800b18e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	43db      	mvns	r3, r3
 800b198:	ea02 0103 	and.w	r1, r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	0c1b      	lsrs	r3, r3, #16
 800b1a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	fa93 f3a3 	rbit	r3, r3
 800b1a8:	60bb      	str	r3, [r7, #8]
  return result;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	fab3 f383 	clz	r3, r3
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	fa03 f202 	lsl.w	r2, r3, r2
 800b1ba:	4806      	ldr	r0, [pc, #24]	; (800b1d4 <LL_SYSCFG_SetEXTISource+0x58>)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	3302      	adds	r3, #2
 800b1c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800b1c8:	bf00      	nop
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	40013800 	.word	0x40013800

0800b1d8 <LL_SYSCFG_GetEXTISource>:
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800b1e0:	4a0d      	ldr	r2, [pc, #52]	; (800b218 <LL_SYSCFG_GetEXTISource+0x40>)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	3302      	adds	r3, #2
 800b1e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	0c12      	lsrs	r2, r2, #16
 800b1f6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	fa92 f2a2 	rbit	r2, r2
 800b1fe:	60ba      	str	r2, [r7, #8]
  return result;
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	fab2 f282 	clz	r2, r2
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	40d3      	lsrs	r3, r2
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	40013800 	.word	0x40013800

0800b21c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <LL_EXTI_EnableIT_0_31+0x20>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	4904      	ldr	r1, [pc, #16]	; (800b23c <LL_EXTI_EnableIT_0_31+0x20>)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	600b      	str	r3, [r1, #0]
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	40013c00 	.word	0x40013c00

0800b240 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800b248:	4b06      	ldr	r3, [pc, #24]	; (800b264 <LL_EXTI_DisableIT_0_31+0x24>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	43db      	mvns	r3, r3
 800b250:	4904      	ldr	r1, [pc, #16]	; (800b264 <LL_EXTI_DisableIT_0_31+0x24>)
 800b252:	4013      	ands	r3, r2
 800b254:	600b      	str	r3, [r1, #0]
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	40013c00 	.word	0x40013c00

0800b268 <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <LL_EXTI_IsEnabledIT_0_31+0x28>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4013      	ands	r3, r2
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	bf0c      	ite	eq
 800b27e:	2301      	moveq	r3, #1
 800b280:	2300      	movne	r3, #0
 800b282:	b2db      	uxtb	r3, r3
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	40013c00 	.word	0x40013c00

0800b294 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800b29c:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	4904      	ldr	r1, [pc, #16]	; (800b2b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	604b      	str	r3, [r1, #4]

}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	40013c00 	.word	0x40013c00

0800b2b8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800b2c0:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	4904      	ldr	r1, [pc, #16]	; (800b2d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	608b      	str	r3, [r1, #8]

}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	40013c00 	.word	0x40013c00

0800b2dc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800b2e4:	4b06      	ldr	r3, [pc, #24]	; (800b300 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	43db      	mvns	r3, r3
 800b2ec:	4904      	ldr	r1, [pc, #16]	; (800b300 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	608b      	str	r3, [r1, #8]

}
 800b2f2:	bf00      	nop
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	40013c00 	.word	0x40013c00

0800b304 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800b30c:	4b05      	ldr	r3, [pc, #20]	; (800b324 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4313      	orrs	r3, r2
 800b316:	60cb      	str	r3, [r1, #12]
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	40013c00 	.word	0x40013c00

0800b328 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800b330:	4b06      	ldr	r3, [pc, #24]	; (800b34c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b332:	68da      	ldr	r2, [r3, #12]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	43db      	mvns	r3, r3
 800b338:	4904      	ldr	r1, [pc, #16]	; (800b34c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b33a:	4013      	ands	r3, r2
 800b33c:	60cb      	str	r3, [r1, #12]
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	40013c00 	.word	0x40013c00

0800b350 <hal_gpio_get_pin_number>:
#define GET_SYSCFG_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_SYSCFG_EXTI_LINE)
#define GET_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_EXTI_LINE_)

static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
 800b35c:	e00c      	b.n	800b378 <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	889b      	ldrh	r3, [r3, #4]
 800b362:	461a      	mov	r2, r3
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	fa42 f303 	asr.w	r3, r2, r3
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	3301      	adds	r3, #1
 800b376:	73fb      	strb	r3, [r7, #15]
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	2b0f      	cmp	r3, #15
 800b37c:	d9ef      	bls.n	800b35e <hal_gpio_get_pin_number+0xe>
 800b37e:	e000      	b.n	800b382 <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 800b380:	bf00      	nop
	}
	return pin_number;
 800b382:	7bfb      	ldrb	r3, [r7, #15]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af02      	add	r7, sp, #8
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	461a      	mov	r2, r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	70fb      	strb	r3, [r7, #3]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	70bb      	strb	r3, [r7, #2]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 800b3aa:	787b      	ldrb	r3, [r7, #1]
 800b3ac:	78ba      	ldrb	r2, [r7, #2]
 800b3ae:	78f9      	ldrb	r1, [r7, #3]
 800b3b0:	2010      	movs	r0, #16
 800b3b2:	9000      	str	r0, [sp, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f805 	bl	800b3c4 <hal_gpio_init_alt>
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	70fb      	strb	r3, [r7, #3]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	70bb      	strb	r3, [r7, #2]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a8d      	ldr	r2, [pc, #564]	; (800b618 <hal_gpio_init_alt+0x254>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d02b      	beq.n	800b440 <hal_gpio_init_alt+0x7c>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a8b      	ldr	r2, [pc, #556]	; (800b61c <hal_gpio_init_alt+0x258>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d024      	beq.n	800b43c <hal_gpio_init_alt+0x78>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a8a      	ldr	r2, [pc, #552]	; (800b620 <hal_gpio_init_alt+0x25c>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d01d      	beq.n	800b438 <hal_gpio_init_alt+0x74>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a88      	ldr	r2, [pc, #544]	; (800b624 <hal_gpio_init_alt+0x260>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d016      	beq.n	800b434 <hal_gpio_init_alt+0x70>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a87      	ldr	r2, [pc, #540]	; (800b628 <hal_gpio_init_alt+0x264>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d00f      	beq.n	800b430 <hal_gpio_init_alt+0x6c>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a85      	ldr	r2, [pc, #532]	; (800b62c <hal_gpio_init_alt+0x268>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d008      	beq.n	800b42c <hal_gpio_init_alt+0x68>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a84      	ldr	r2, [pc, #528]	; (800b630 <hal_gpio_init_alt+0x26c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d101      	bne.n	800b428 <hal_gpio_init_alt+0x64>
 800b424:	2306      	movs	r3, #6
 800b426:	e00c      	b.n	800b442 <hal_gpio_init_alt+0x7e>
 800b428:	2307      	movs	r3, #7
 800b42a:	e00a      	b.n	800b442 <hal_gpio_init_alt+0x7e>
 800b42c:	2305      	movs	r3, #5
 800b42e:	e008      	b.n	800b442 <hal_gpio_init_alt+0x7e>
 800b430:	2304      	movs	r3, #4
 800b432:	e006      	b.n	800b442 <hal_gpio_init_alt+0x7e>
 800b434:	2303      	movs	r3, #3
 800b436:	e004      	b.n	800b442 <hal_gpio_init_alt+0x7e>
 800b438:	2302      	movs	r3, #2
 800b43a:	e002      	b.n	800b442 <hal_gpio_init_alt+0x7e>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e000      	b.n	800b442 <hal_gpio_init_alt+0x7e>
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	889b      	ldrh	r3, [r3, #4]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d05f      	beq.n	800b50c <hal_gpio_init_alt+0x148>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	889b      	ldrh	r3, [r3, #4]
 800b450:	2b02      	cmp	r3, #2
 800b452:	d058      	beq.n	800b506 <hal_gpio_init_alt+0x142>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	889b      	ldrh	r3, [r3, #4]
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d051      	beq.n	800b500 <hal_gpio_init_alt+0x13c>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	889b      	ldrh	r3, [r3, #4]
 800b460:	2b08      	cmp	r3, #8
 800b462:	d04a      	beq.n	800b4fa <hal_gpio_init_alt+0x136>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	889b      	ldrh	r3, [r3, #4]
 800b468:	2b10      	cmp	r3, #16
 800b46a:	d044      	beq.n	800b4f6 <hal_gpio_init_alt+0x132>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	889b      	ldrh	r3, [r3, #4]
 800b470:	2b20      	cmp	r3, #32
 800b472:	d03e      	beq.n	800b4f2 <hal_gpio_init_alt+0x12e>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	889b      	ldrh	r3, [r3, #4]
 800b478:	2b40      	cmp	r3, #64	; 0x40
 800b47a:	d038      	beq.n	800b4ee <hal_gpio_init_alt+0x12a>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	889b      	ldrh	r3, [r3, #4]
 800b480:	2b80      	cmp	r3, #128	; 0x80
 800b482:	d032      	beq.n	800b4ea <hal_gpio_init_alt+0x126>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	889b      	ldrh	r3, [r3, #4]
 800b488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b48c:	d02b      	beq.n	800b4e6 <hal_gpio_init_alt+0x122>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	889b      	ldrh	r3, [r3, #4]
 800b492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b496:	d024      	beq.n	800b4e2 <hal_gpio_init_alt+0x11e>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	889b      	ldrh	r3, [r3, #4]
 800b49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4a0:	d01d      	beq.n	800b4de <hal_gpio_init_alt+0x11a>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	889b      	ldrh	r3, [r3, #4]
 800b4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4aa:	d016      	beq.n	800b4da <hal_gpio_init_alt+0x116>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	889b      	ldrh	r3, [r3, #4]
 800b4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b4:	d00f      	beq.n	800b4d6 <hal_gpio_init_alt+0x112>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	889b      	ldrh	r3, [r3, #4]
 800b4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4be:	d008      	beq.n	800b4d2 <hal_gpio_init_alt+0x10e>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	889b      	ldrh	r3, [r3, #4]
 800b4c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4c8:	d101      	bne.n	800b4ce <hal_gpio_init_alt+0x10a>
 800b4ca:	4b5a      	ldr	r3, [pc, #360]	; (800b634 <hal_gpio_init_alt+0x270>)
 800b4cc:	e020      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4ce:	4b5a      	ldr	r3, [pc, #360]	; (800b638 <hal_gpio_init_alt+0x274>)
 800b4d0:	e01e      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4d2:	4b5a      	ldr	r3, [pc, #360]	; (800b63c <hal_gpio_init_alt+0x278>)
 800b4d4:	e01c      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4d6:	4b5a      	ldr	r3, [pc, #360]	; (800b640 <hal_gpio_init_alt+0x27c>)
 800b4d8:	e01a      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4da:	4b5a      	ldr	r3, [pc, #360]	; (800b644 <hal_gpio_init_alt+0x280>)
 800b4dc:	e018      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4de:	4b5a      	ldr	r3, [pc, #360]	; (800b648 <hal_gpio_init_alt+0x284>)
 800b4e0:	e016      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4e2:	4b5a      	ldr	r3, [pc, #360]	; (800b64c <hal_gpio_init_alt+0x288>)
 800b4e4:	e014      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4e6:	4b5a      	ldr	r3, [pc, #360]	; (800b650 <hal_gpio_init_alt+0x28c>)
 800b4e8:	e012      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4ea:	4b5a      	ldr	r3, [pc, #360]	; (800b654 <hal_gpio_init_alt+0x290>)
 800b4ec:	e010      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4ee:	4b5a      	ldr	r3, [pc, #360]	; (800b658 <hal_gpio_init_alt+0x294>)
 800b4f0:	e00e      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4f2:	4b5a      	ldr	r3, [pc, #360]	; (800b65c <hal_gpio_init_alt+0x298>)
 800b4f4:	e00c      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4f6:	4b5a      	ldr	r3, [pc, #360]	; (800b660 <hal_gpio_init_alt+0x29c>)
 800b4f8:	e00a      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b4fa:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800b4fe:	e007      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b500:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800b504:	e004      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b506:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800b50a:	e001      	b.n	800b510 <hal_gpio_init_alt+0x14c>
 800b50c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800b510:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	889b      	ldrh	r3, [r3, #4]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d064      	beq.n	800b5e4 <hal_gpio_init_alt+0x220>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	889b      	ldrh	r3, [r3, #4]
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d05e      	beq.n	800b5e0 <hal_gpio_init_alt+0x21c>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	889b      	ldrh	r3, [r3, #4]
 800b526:	2b04      	cmp	r3, #4
 800b528:	d058      	beq.n	800b5dc <hal_gpio_init_alt+0x218>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	889b      	ldrh	r3, [r3, #4]
 800b52e:	2b08      	cmp	r3, #8
 800b530:	d052      	beq.n	800b5d8 <hal_gpio_init_alt+0x214>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	889b      	ldrh	r3, [r3, #4]
 800b536:	2b10      	cmp	r3, #16
 800b538:	d04c      	beq.n	800b5d4 <hal_gpio_init_alt+0x210>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	889b      	ldrh	r3, [r3, #4]
 800b53e:	2b20      	cmp	r3, #32
 800b540:	d046      	beq.n	800b5d0 <hal_gpio_init_alt+0x20c>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	889b      	ldrh	r3, [r3, #4]
 800b546:	2b40      	cmp	r3, #64	; 0x40
 800b548:	d040      	beq.n	800b5cc <hal_gpio_init_alt+0x208>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	889b      	ldrh	r3, [r3, #4]
 800b54e:	2b80      	cmp	r3, #128	; 0x80
 800b550:	d03a      	beq.n	800b5c8 <hal_gpio_init_alt+0x204>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	889b      	ldrh	r3, [r3, #4]
 800b556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b55a:	d032      	beq.n	800b5c2 <hal_gpio_init_alt+0x1fe>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	889b      	ldrh	r3, [r3, #4]
 800b560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b564:	d02a      	beq.n	800b5bc <hal_gpio_init_alt+0x1f8>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	889b      	ldrh	r3, [r3, #4]
 800b56a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b56e:	d022      	beq.n	800b5b6 <hal_gpio_init_alt+0x1f2>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	889b      	ldrh	r3, [r3, #4]
 800b574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b578:	d01a      	beq.n	800b5b0 <hal_gpio_init_alt+0x1ec>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	889b      	ldrh	r3, [r3, #4]
 800b57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b582:	d012      	beq.n	800b5aa <hal_gpio_init_alt+0x1e6>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	889b      	ldrh	r3, [r3, #4]
 800b588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b58c:	d00a      	beq.n	800b5a4 <hal_gpio_init_alt+0x1e0>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	889b      	ldrh	r3, [r3, #4]
 800b592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b596:	d102      	bne.n	800b59e <hal_gpio_init_alt+0x1da>
 800b598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b59c:	e023      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a2:	e020      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5a8:	e01d      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ae:	e01a      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5b4:	e017      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ba:	e014      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5c0:	e011      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c6:	e00e      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5c8:	2380      	movs	r3, #128	; 0x80
 800b5ca:	e00c      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5cc:	2340      	movs	r3, #64	; 0x40
 800b5ce:	e00a      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5d0:	2320      	movs	r3, #32
 800b5d2:	e008      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5d4:	2310      	movs	r3, #16
 800b5d6:	e006      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5d8:	2308      	movs	r3, #8
 800b5da:	e004      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5dc:	2304      	movs	r3, #4
 800b5de:	e002      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	e000      	b.n	800b5e6 <hal_gpio_init_alt+0x222>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 800b5e8:	787b      	ldrb	r3, [r7, #1]
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d855      	bhi.n	800b69a <hal_gpio_init_alt+0x2d6>
 800b5ee:	a201      	add	r2, pc, #4	; (adr r2, 800b5f4 <hal_gpio_init_alt+0x230>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b605 	.word	0x0800b605
 800b5f8:	0800b665 	.word	0x0800b665
 800b5fc:	0800b677 	.word	0x0800b677
 800b600:	0800b689 	.word	0x0800b689
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	889b      	ldrh	r3, [r3, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	4619      	mov	r1, r3
 800b610:	f7ff fcf5 	bl	800affe <LL_GPIO_SetPinSpeed>
		break;
 800b614:	e041      	b.n	800b69a <hal_gpio_init_alt+0x2d6>
 800b616:	bf00      	nop
 800b618:	40020000 	.word	0x40020000
 800b61c:	40020400 	.word	0x40020400
 800b620:	40020800 	.word	0x40020800
 800b624:	40020c00 	.word	0x40020c00
 800b628:	40021000 	.word	0x40021000
 800b62c:	40021400 	.word	0x40021400
 800b630:	40021800 	.word	0x40021800
 800b634:	0f000003 	.word	0x0f000003
 800b638:	f0000003 	.word	0xf0000003
 800b63c:	00f00003 	.word	0x00f00003
 800b640:	000f0003 	.word	0x000f0003
 800b644:	f0000002 	.word	0xf0000002
 800b648:	0f000002 	.word	0x0f000002
 800b64c:	00f00002 	.word	0x00f00002
 800b650:	000f0002 	.word	0x000f0002
 800b654:	f0000001 	.word	0xf0000001
 800b658:	0f000001 	.word	0x0f000001
 800b65c:	00f00001 	.word	0x00f00001
 800b660:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	889b      	ldrh	r3, [r3, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	4619      	mov	r1, r3
 800b670:	f7ff fcc5 	bl	800affe <LL_GPIO_SetPinSpeed>
		break;
 800b674:	e011      	b.n	800b69a <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	889b      	ldrh	r3, [r3, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	4619      	mov	r1, r3
 800b682:	f7ff fcbc 	bl	800affe <LL_GPIO_SetPinSpeed>
		break;
 800b686:	e008      	b.n	800b69a <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6818      	ldr	r0, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	889b      	ldrh	r3, [r3, #4]
 800b690:	2203      	movs	r2, #3
 800b692:	4619      	mov	r1, r3
 800b694:	f7ff fcb3 	bl	800affe <LL_GPIO_SetPinSpeed>
		break;
 800b698:	bf00      	nop
	}

	switch(pull) {
 800b69a:	78bb      	ldrb	r3, [r7, #2]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d018      	beq.n	800b6d2 <hal_gpio_init_alt+0x30e>
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	dc1f      	bgt.n	800b6e4 <hal_gpio_init_alt+0x320>
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d002      	beq.n	800b6ae <hal_gpio_init_alt+0x2ea>
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d009      	beq.n	800b6c0 <hal_gpio_init_alt+0x2fc>
 800b6ac:	e01a      	b.n	800b6e4 <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	889b      	ldrh	r3, [r3, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7ff fccf 	bl	800b05c <LL_GPIO_SetPinPull>
		break;
 800b6be:	e011      	b.n	800b6e4 <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	889b      	ldrh	r3, [r3, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	f7ff fcc6 	bl	800b05c <LL_GPIO_SetPinPull>
		break;
 800b6d0:	e008      	b.n	800b6e4 <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6818      	ldr	r0, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	889b      	ldrh	r3, [r3, #4]
 800b6da:	2202      	movs	r2, #2
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f7ff fcbd 	bl	800b05c <LL_GPIO_SetPinPull>
		break;
 800b6e2:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	2b05      	cmp	r3, #5
 800b6e8:	d93d      	bls.n	800b766 <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	889b      	ldrh	r3, [r3, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	f7ff fc3b 	bl	800af70 <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 800b6fa:	6939      	ldr	r1, [r7, #16]
 800b6fc:	6978      	ldr	r0, [r7, #20]
 800b6fe:	f7ff fd3d 	bl	800b17c <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 800b702:	78fb      	ldrb	r3, [r7, #3]
 800b704:	2b06      	cmp	r3, #6
 800b706:	d002      	beq.n	800b70e <hal_gpio_init_alt+0x34a>
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	2b08      	cmp	r3, #8
 800b70c:	d105      	bne.n	800b71a <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fd84 	bl	800b21c <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff fdcf 	bl	800b2b8 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 800b71a:	78fb      	ldrb	r3, [r7, #3]
 800b71c:	2b07      	cmp	r3, #7
 800b71e:	d002      	beq.n	800b726 <hal_gpio_init_alt+0x362>
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	2b08      	cmp	r3, #8
 800b724:	d105      	bne.n	800b732 <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff fd78 	bl	800b21c <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7ff fde9 	bl	800b304 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 800b732:	78fb      	ldrb	r3, [r7, #3]
 800b734:	2b09      	cmp	r3, #9
 800b736:	d002      	beq.n	800b73e <hal_gpio_init_alt+0x37a>
 800b738:	78fb      	ldrb	r3, [r7, #3]
 800b73a:	2b0b      	cmp	r3, #11
 800b73c:	d105      	bne.n	800b74a <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fda8 	bl	800b294 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fdb7 	bl	800b2b8 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 800b74a:	78fb      	ldrb	r3, [r7, #3]
 800b74c:	2b0a      	cmp	r3, #10
 800b74e:	d003      	beq.n	800b758 <hal_gpio_init_alt+0x394>
 800b750:	78fb      	ldrb	r3, [r7, #3]
 800b752:	2b0b      	cmp	r3, #11
 800b754:	f040 80a7 	bne.w	800b8a6 <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff fd5f 	bl	800b21c <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fdd0 	bl	800b304 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 800b764:	e09f      	b.n	800b8a6 <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800b766:	6938      	ldr	r0, [r7, #16]
 800b768:	f7ff fd36 	bl	800b1d8 <LL_SYSCFG_GetEXTISource>
 800b76c:	4602      	mov	r2, r0
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	4293      	cmp	r3, r2
 800b772:	d10e      	bne.n	800b792 <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f7ff fd77 	bl	800b268 <LL_EXTI_IsEnabledIT_0_31>
 800b77a:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d008      	beq.n	800b792 <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f7ff fd5d 	bl	800b240 <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f7ff fdce 	bl	800b328 <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f7ff fda5 	bl	800b2dc <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 800b792:	78fb      	ldrb	r3, [r7, #3]
 800b794:	2b03      	cmp	r3, #3
 800b796:	d002      	beq.n	800b79e <hal_gpio_init_alt+0x3da>
 800b798:	78fb      	ldrb	r3, [r7, #3]
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d11a      	bne.n	800b7d4 <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fdd6 	bl	800b350 <hal_gpio_get_pin_number>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b07      	cmp	r3, #7
 800b7a8:	d80a      	bhi.n	800b7c0 <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6818      	ldr	r0, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	889b      	ldrh	r3, [r3, #4]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	f7ff fc7e 	bl	800b0ba <LL_GPIO_SetAFPin_0_7>
 800b7be:	e009      	b.n	800b7d4 <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	889b      	ldrh	r3, [r3, #4]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f7ff fca2 	bl	800b118 <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	2b05      	cmp	r3, #5
 800b7d8:	d864      	bhi.n	800b8a4 <hal_gpio_init_alt+0x4e0>
 800b7da:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <hal_gpio_init_alt+0x41c>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b7f9 	.word	0x0800b7f9
 800b7e4:	0800b80b 	.word	0x0800b80b
 800b7e8:	0800b82d 	.word	0x0800b82d
 800b7ec:	0800b84f 	.word	0x0800b84f
 800b7f0:	0800b871 	.word	0x0800b871
 800b7f4:	0800b893 	.word	0x0800b893
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6818      	ldr	r0, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	889b      	ldrh	r3, [r3, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	4619      	mov	r1, r3
 800b804:	f7ff fbb4 	bl	800af70 <LL_GPIO_SetPinMode>
			break;
 800b808:	e04d      	b.n	800b8a6 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	889b      	ldrh	r3, [r3, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	4619      	mov	r1, r3
 800b816:	f7ff fbab 	bl	800af70 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	889b      	ldrh	r3, [r3, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	4619      	mov	r1, r3
 800b826:	f7ff fbd2 	bl	800afce <LL_GPIO_SetPinOutputType>
			break;
 800b82a:	e03c      	b.n	800b8a6 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	889b      	ldrh	r3, [r3, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	4619      	mov	r1, r3
 800b838:	f7ff fb9a 	bl	800af70 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6818      	ldr	r0, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	889b      	ldrh	r3, [r3, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	4619      	mov	r1, r3
 800b848:	f7ff fbc1 	bl	800afce <LL_GPIO_SetPinOutputType>
			break;
 800b84c:	e02b      	b.n	800b8a6 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	889b      	ldrh	r3, [r3, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	4619      	mov	r1, r3
 800b85a:	f7ff fb89 	bl	800af70 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6818      	ldr	r0, [r3, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	889b      	ldrh	r3, [r3, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	4619      	mov	r1, r3
 800b86a:	f7ff fbb0 	bl	800afce <LL_GPIO_SetPinOutputType>
			break;
 800b86e:	e01a      	b.n	800b8a6 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6818      	ldr	r0, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	889b      	ldrh	r3, [r3, #4]
 800b878:	2202      	movs	r2, #2
 800b87a:	4619      	mov	r1, r3
 800b87c:	f7ff fb78 	bl	800af70 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6818      	ldr	r0, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	889b      	ldrh	r3, [r3, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	4619      	mov	r1, r3
 800b88c:	f7ff fb9f 	bl	800afce <LL_GPIO_SetPinOutputType>
			break;
 800b890:	e009      	b.n	800b8a6 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	889b      	ldrh	r3, [r3, #4]
 800b89a:	2203      	movs	r2, #3
 800b89c:	4619      	mov	r1, r3
 800b89e:	f7ff fb67 	bl	800af70 <LL_GPIO_SetPinMode>
			break;
 800b8a2:	e000      	b.n	800b8a6 <hal_gpio_init_alt+0x4e2>
			break;
 800b8a4:	bf00      	nop
}
 800b8a6:	bf00      	nop
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop

0800b8b0 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
        __asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	607b      	str	r3, [r7, #4]
    }
 800b8c8:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800b8ca:	e7fe      	b.n	800b8ca <vApplicationMallocFailedHook+0x1a>

0800b8cc <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
        __asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	60fb      	str	r3, [r7, #12]
    }
 800b8e8:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800b8ea:	e7fe      	b.n	800b8ea <vApplicationStackOverflowHook+0x1e>

0800b8ec <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4a07      	ldr	r2, [pc, #28]	; (800b918 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8fc:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	4a06      	ldr	r2, [pc, #24]	; (800b91c <vApplicationGetIdleTaskMemory+0x30>)
 800b902:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b90a:	601a      	str	r2, [r3, #0]
}
 800b90c:	bf00      	nop
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	20004bd8 	.word	0x20004bd8
 800b91c:	20004c34 	.word	0x20004c34

0800b920 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	4a07      	ldr	r2, [pc, #28]	; (800b94c <vApplicationGetTimerTaskMemory+0x2c>)
 800b930:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	4a06      	ldr	r2, [pc, #24]	; (800b950 <vApplicationGetTimerTaskMemory+0x30>)
 800b936:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b93e:	601a      	str	r2, [r3, #0]
}
 800b940:	bf00      	nop
 800b942:	3714      	adds	r7, #20
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	20005434 	.word	0x20005434
 800b950:	20005490 	.word	0x20005490

0800b954 <__NVIC_GetPriorityGrouping>:
{
 800b954:	b480      	push	{r7}
 800b956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b958:	4b04      	ldr	r3, [pc, #16]	; (800b96c <__NVIC_GetPriorityGrouping+0x18>)
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	0a1b      	lsrs	r3, r3, #8
 800b95e:	f003 0307 	and.w	r3, r3, #7
}
 800b962:	4618      	mov	r0, r3
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	e000ed00 	.word	0xe000ed00

0800b970 <__NVIC_EnableIRQ>:
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	db0b      	blt.n	800b99a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b982:	79fb      	ldrb	r3, [r7, #7]
 800b984:	f003 021f 	and.w	r2, r3, #31
 800b988:	4907      	ldr	r1, [pc, #28]	; (800b9a8 <__NVIC_EnableIRQ+0x38>)
 800b98a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b98e:	095b      	lsrs	r3, r3, #5
 800b990:	2001      	movs	r0, #1
 800b992:	fa00 f202 	lsl.w	r2, r0, r2
 800b996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b99a:	bf00      	nop
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	e000e100 	.word	0xe000e100

0800b9ac <__NVIC_SetPriority>:
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	6039      	str	r1, [r7, #0]
 800b9b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	db0a      	blt.n	800b9d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	490c      	ldr	r1, [pc, #48]	; (800b9f8 <__NVIC_SetPriority+0x4c>)
 800b9c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ca:	0112      	lsls	r2, r2, #4
 800b9cc:	b2d2      	uxtb	r2, r2
 800b9ce:	440b      	add	r3, r1
 800b9d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b9d4:	e00a      	b.n	800b9ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	4908      	ldr	r1, [pc, #32]	; (800b9fc <__NVIC_SetPriority+0x50>)
 800b9dc:	79fb      	ldrb	r3, [r7, #7]
 800b9de:	f003 030f 	and.w	r3, r3, #15
 800b9e2:	3b04      	subs	r3, #4
 800b9e4:	0112      	lsls	r2, r2, #4
 800b9e6:	b2d2      	uxtb	r2, r2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	761a      	strb	r2, [r3, #24]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	e000e100 	.word	0xe000e100
 800b9fc:	e000ed00 	.word	0xe000ed00

0800ba00 <NVIC_EncodePriority>:
{
 800ba00:	b480      	push	{r7}
 800ba02:	b089      	sub	sp, #36	; 0x24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f003 0307 	and.w	r3, r3, #7
 800ba12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	f1c3 0307 	rsb	r3, r3, #7
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	bf28      	it	cs
 800ba1e:	2304      	movcs	r3, #4
 800ba20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	3304      	adds	r3, #4
 800ba26:	2b06      	cmp	r3, #6
 800ba28:	d902      	bls.n	800ba30 <NVIC_EncodePriority+0x30>
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	3b03      	subs	r3, #3
 800ba2e:	e000      	b.n	800ba32 <NVIC_EncodePriority+0x32>
 800ba30:	2300      	movs	r3, #0
 800ba32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba3e:	43da      	mvns	r2, r3
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	401a      	ands	r2, r3
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba52:	43d9      	mvns	r1, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba58:	4313      	orrs	r3, r2
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3724      	adds	r7, #36	; 0x24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <LL_I2C_EnableClockStretching>:
{
 800ba66:	b480      	push	{r7}
 800ba68:	b083      	sub	sp, #12
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <LL_I2C_DisableGeneralCall>:
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
}
 800ba9a:	bf00      	nop
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <LL_I2C_SetOwnAddress2>:
{
 800baa6:	b480      	push	{r7}
 800baa8:	b083      	sub	sp, #12
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	431a      	orrs	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	60da      	str	r2, [r3, #12]
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <LL_I2C_DisableOwnAddress2>:
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	f023 0201 	bic.w	r2, r3, #1
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60da      	str	r2, [r3, #12]
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <LL_I2C_IsActiveFlag_TXE>:
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafc:	2b80      	cmp	r3, #128	; 0x80
 800bafe:	bf0c      	ite	eq
 800bb00:	2301      	moveq	r3, #1
 800bb02:	2300      	movne	r3, #0
 800bb04:	b2db      	uxtb	r3, r3
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <LL_I2C_IsActiveFlag_BTF>:
{
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	bf0c      	ite	eq
 800bb26:	2301      	moveq	r3, #1
 800bb28:	2300      	movne	r3, #0
 800bb2a:	b2db      	uxtb	r3, r3
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <LL_I2C_IsActiveFlag_RXNE>:
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb48:	2b40      	cmp	r3, #64	; 0x40
 800bb4a:	bf0c      	ite	eq
 800bb4c:	2301      	moveq	r3, #1
 800bb4e:	2300      	movne	r3, #0
 800bb50:	b2db      	uxtb	r3, r3
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <LL_I2C_IsActiveFlag_SB>:
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b083      	sub	sp, #12
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	bf0c      	ite	eq
 800bb72:	2301      	moveq	r3, #1
 800bb74:	2300      	movne	r3, #0
 800bb76:	b2db      	uxtb	r3, r3
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <LL_I2C_IsActiveFlag_ADDR>:
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	f003 0302 	and.w	r3, r3, #2
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	bf0c      	ite	eq
 800bb98:	2301      	moveq	r3, #1
 800bb9a:	2300      	movne	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	370c      	adds	r7, #12
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <LL_I2C_IsActiveFlag_BUSY>:
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	f003 0302 	and.w	r3, r3, #2
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	bf0c      	ite	eq
 800bbbe:	2301      	moveq	r3, #1
 800bbc0:	2300      	movne	r3, #0
 800bbc2:	b2db      	uxtb	r3, r3
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <LL_I2C_ClearFlag_ADDR>:
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800bbde:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
}
 800bbe8:	bf00      	nop
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <LL_I2C_AcknowledgeNextData>:
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	601a      	str	r2, [r3, #0]
}
 800bc0e:	bf00      	nop
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b083      	sub	sp, #12
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	601a      	str	r2, [r3, #0]
}
 800bc2e:	bf00      	nop
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	b2db      	uxtb	r3, r3
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc88:	78fb      	ldrb	r3, [r7, #3]
 800bc8a:	431a      	orrs	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	611a      	str	r2, [r3, #16]
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <LL_DMA_SetDataTransferDirection>:
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800bca8:	4a0d      	ldr	r2, [pc, #52]	; (800bce0 <LL_DMA_SetDataTransferDirection+0x44>)
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	4413      	add	r3, r2
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bcbc:	4908      	ldr	r1, [pc, #32]	; (800bce0 <LL_DMA_SetDataTransferDirection+0x44>)
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	440b      	add	r3, r1
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	440b      	add	r3, r1
 800bcca:	4619      	mov	r1, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	600b      	str	r3, [r1, #0]
}
 800bcd2:	bf00      	nop
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	0800ee40 	.word	0x0800ee40

0800bce4 <LL_DMA_SetMode>:
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800bcf0:	4a0d      	ldr	r2, [pc, #52]	; (800bd28 <LL_DMA_SetMode+0x44>)
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800bd04:	4908      	ldr	r1, [pc, #32]	; (800bd28 <LL_DMA_SetMode+0x44>)
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	440b      	add	r3, r1
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	440b      	add	r3, r1
 800bd12:	4619      	mov	r1, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	600b      	str	r3, [r1, #0]
}
 800bd1a:	bf00      	nop
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	0800ee40 	.word	0x0800ee40

0800bd2c <LL_DMA_SetPeriphIncMode>:
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800bd38:	4a0d      	ldr	r2, [pc, #52]	; (800bd70 <LL_DMA_SetPeriphIncMode+0x44>)
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	461a      	mov	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	4413      	add	r3, r2
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd4c:	4908      	ldr	r1, [pc, #32]	; (800bd70 <LL_DMA_SetPeriphIncMode+0x44>)
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	440b      	add	r3, r1
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	4619      	mov	r1, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	440b      	add	r3, r1
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	600b      	str	r3, [r1, #0]
}
 800bd62:	bf00      	nop
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	0800ee40 	.word	0x0800ee40

0800bd74 <LL_DMA_SetMemoryIncMode>:
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800bd80:	4a0d      	ldr	r2, [pc, #52]	; (800bdb8 <LL_DMA_SetMemoryIncMode+0x44>)
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	4413      	add	r3, r2
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bd94:	4908      	ldr	r1, [pc, #32]	; (800bdb8 <LL_DMA_SetMemoryIncMode+0x44>)
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	440b      	add	r3, r1
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	440b      	add	r3, r1
 800bda2:	4619      	mov	r1, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	600b      	str	r3, [r1, #0]
}
 800bdaa:	bf00      	nop
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	0800ee40 	.word	0x0800ee40

0800bdbc <LL_DMA_SetPeriphSize>:
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800bdc8:	4a0d      	ldr	r2, [pc, #52]	; (800be00 <LL_DMA_SetPeriphSize+0x44>)
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	4413      	add	r3, r2
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bddc:	4908      	ldr	r1, [pc, #32]	; (800be00 <LL_DMA_SetPeriphSize+0x44>)
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	440b      	add	r3, r1
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	4619      	mov	r1, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	440b      	add	r3, r1
 800bdea:	4619      	mov	r1, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	600b      	str	r3, [r1, #0]
}
 800bdf2:	bf00      	nop
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	0800ee40 	.word	0x0800ee40

0800be04 <LL_DMA_SetMemorySize>:
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800be10:	4a0d      	ldr	r2, [pc, #52]	; (800be48 <LL_DMA_SetMemorySize+0x44>)
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	4413      	add	r3, r2
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	4413      	add	r3, r2
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800be24:	4908      	ldr	r1, [pc, #32]	; (800be48 <LL_DMA_SetMemorySize+0x44>)
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	440b      	add	r3, r1
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	4619      	mov	r1, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	440b      	add	r3, r1
 800be32:	4619      	mov	r1, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4313      	orrs	r3, r2
 800be38:	600b      	str	r3, [r1, #0]
}
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	0800ee40 	.word	0x0800ee40

0800be4c <LL_DMA_SetStreamPriorityLevel>:
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800be58:	4a0d      	ldr	r2, [pc, #52]	; (800be90 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	4413      	add	r3, r2
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	461a      	mov	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	4413      	add	r3, r2
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be6c:	4908      	ldr	r1, [pc, #32]	; (800be90 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	440b      	add	r3, r1
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	4619      	mov	r1, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	440b      	add	r3, r1
 800be7a:	4619      	mov	r1, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4313      	orrs	r3, r2
 800be80:	600b      	str	r3, [r1, #0]
}
 800be82:	bf00      	nop
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	0800ee40 	.word	0x0800ee40

0800be94 <LL_DMA_SetChannelSelection>:
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800bea0:	4a0d      	ldr	r2, [pc, #52]	; (800bed8 <LL_DMA_SetChannelSelection+0x44>)
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	4413      	add	r3, r2
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	4413      	add	r3, r2
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800beb4:	4908      	ldr	r1, [pc, #32]	; (800bed8 <LL_DMA_SetChannelSelection+0x44>)
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	440b      	add	r3, r1
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	4619      	mov	r1, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	440b      	add	r3, r1
 800bec2:	4619      	mov	r1, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	600b      	str	r3, [r1, #0]
}
 800beca:	bf00      	nop
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	0800ee40 	.word	0x0800ee40

0800bedc <LL_DMA_DisableFifoMode>:
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800bee6:	4a0c      	ldr	r2, [pc, #48]	; (800bf18 <LL_DMA_DisableFifoMode+0x3c>)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	4413      	add	r3, r2
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4413      	add	r3, r2
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	4908      	ldr	r1, [pc, #32]	; (800bf18 <LL_DMA_DisableFifoMode+0x3c>)
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	440a      	add	r2, r1
 800befc:	7812      	ldrb	r2, [r2, #0]
 800befe:	4611      	mov	r1, r2
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	440a      	add	r2, r1
 800bf04:	f023 0304 	bic.w	r3, r3, #4
 800bf08:	6153      	str	r3, [r2, #20]
}
 800bf0a:	bf00      	nop
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	0800ee40 	.word	0x0800ee40

0800bf1c <i2c_init>:
#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */
#define I2C_POLLING_TIMEOUT 1000000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 800bf26:	f7f9 fa67 	bl	80053f8 <vPortEnterCritical>

	switch(i2c_id) {
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d002      	beq.n	800bf36 <i2c_init+0x1a>
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d00f      	beq.n	800bf54 <i2c_init+0x38>
 800bf34:	e01d      	b.n	800bf72 <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 800bf36:	f000 faad 	bl	800c494 <i2c1_init>
		i2c1drv.i2c = I2C1;
 800bf3a:	4b13      	ldr	r3, [pc, #76]	; (800bf88 <i2c_init+0x6c>)
 800bf3c:	4a13      	ldr	r2, [pc, #76]	; (800bf8c <i2c_init+0x70>)
 800bf3e:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 800bf40:	2001      	movs	r0, #1
 800bf42:	f7f9 fd4f 	bl	80059e4 <xQueueCreateMutex>
 800bf46:	4603      	mov	r3, r0
 800bf48:	4a0f      	ldr	r2, [pc, #60]	; (800bf88 <i2c_init+0x6c>)
 800bf4a:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 800bf4c:	4810      	ldr	r0, [pc, #64]	; (800bf90 <i2c_init+0x74>)
 800bf4e:	f7fe fcf5 	bl	800a93c <hal_cli_printf>
		break;
 800bf52:	e012      	b.n	800bf7a <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 800bf54:	f000 fb66 	bl	800c624 <i2c3_init>
		i2c3drv.i2c = I2C3;
 800bf58:	4b0e      	ldr	r3, [pc, #56]	; (800bf94 <i2c_init+0x78>)
 800bf5a:	4a0f      	ldr	r2, [pc, #60]	; (800bf98 <i2c_init+0x7c>)
 800bf5c:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 800bf5e:	2001      	movs	r0, #1
 800bf60:	f7f9 fd40 	bl	80059e4 <xQueueCreateMutex>
 800bf64:	4603      	mov	r3, r0
 800bf66:	4a0b      	ldr	r2, [pc, #44]	; (800bf94 <i2c_init+0x78>)
 800bf68:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 800bf6a:	480c      	ldr	r0, [pc, #48]	; (800bf9c <i2c_init+0x80>)
 800bf6c:	f7fe fce6 	bl	800a93c <hal_cli_printf>
		break;
 800bf70:	e003      	b.n	800bf7a <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 800bf72:	480b      	ldr	r0, [pc, #44]	; (800bfa0 <i2c_init+0x84>)
 800bf74:	f7fe fce2 	bl	800a93c <hal_cli_printf>
		break;
 800bf78:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 800bf7a:	f7f9 fa6d 	bl	8005458 <vPortExitCritical>
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20005890 	.word	0x20005890
 800bf8c:	40005400 	.word	0x40005400
 800bf90:	0800eb64 	.word	0x0800eb64
 800bf94:	20005898 	.word	0x20005898
 800bf98:	40005c00 	.word	0x40005c00
 800bf9c:	0800eb70 	.word	0x0800eb70
 800bfa0:	0800eb7c 	.word	0x0800eb7c

0800bfa4 <hal_i2c_transfer>:

bool hal_i2c_transfer(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08a      	sub	sp, #40	; 0x28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6178      	str	r0, [r7, #20]
 800bfac:	60fa      	str	r2, [r7, #12]
 800bfae:	60bb      	str	r3, [r7, #8]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24

	timeout *= 1000;
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfbe:	fb02 f303 	mul.w	r3, r2, r3
 800bfc2:	637b      	str	r3, [r7, #52]	; 0x34

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7fa f815 	bl	8005ffc <xQueueSemaphoreTake>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d004      	beq.n	800bfe2 <hal_i2c_transfer+0x3e>
		hal_cli_printf("i2c semaphore take timeout");
 800bfd8:	4899      	ldr	r0, [pc, #612]	; (800c240 <hal_i2c_transfer+0x29c>)
 800bfda:	f7fe fcaf 	bl	800a93c <hal_cli_printf>
		return false;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e129      	b.n	800c236 <hal_i2c_transfer+0x292>
	}

	timer = hal_get_delay_timer(timeout);
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe ff84 	bl	800aef4 <hal_get_delay_timer>
 800bfec:	f107 031c 	add.w	r3, r7, #28
 800bff0:	463a      	mov	r2, r7
 800bff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bff6:	e883 0003 	stmia.w	r3, {r0, r1}

	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 800bffa:	e013      	b.n	800c024 <hal_i2c_transfer+0x80>
		if(hal_delay_timer_is_expired(&timer)) {
 800bffc:	f107 031c 	add.w	r3, r7, #28
 800c000:	4618      	mov	r0, r3
 800c002:	f7fe ff9d 	bl	800af40 <hal_delay_timer_is_expired>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <hal_i2c_transfer+0x80>
			xSemaphoreGive(drv->mutex);
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	6858      	ldr	r0, [r3, #4]
 800c010:	2300      	movs	r3, #0
 800c012:	2200      	movs	r2, #0
 800c014:	2100      	movs	r1, #0
 800c016:	f7f9 fcfd 	bl	8005a14 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 800c01a:	488a      	ldr	r0, [pc, #552]	; (800c244 <hal_i2c_transfer+0x2a0>)
 800c01c:	f7fe fc8e 	bl	800a93c <hal_cli_printf>
			return false;
 800c020:	2300      	movs	r3, #0
 800c022:	e108      	b.n	800c236 <hal_i2c_transfer+0x292>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff fdbe 	bl	800bbaa <LL_I2C_IsActiveFlag_BUSY>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e3      	bne.n	800bffc <hal_i2c_transfer+0x58>
		}
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff fdee 	bl	800bc1a <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 800c03e:	e018      	b.n	800c072 <hal_i2c_transfer+0xce>
		if(hal_delay_timer_is_expired(&timer)) {
 800c040:	f107 031c 	add.w	r3, r7, #28
 800c044:	4618      	mov	r0, r3
 800c046:	f7fe ff7b 	bl	800af40 <hal_delay_timer_is_expired>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d010      	beq.n	800c072 <hal_i2c_transfer+0xce>
			xSemaphoreGive(drv->mutex);
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	6858      	ldr	r0, [r3, #4]
 800c054:	2300      	movs	r3, #0
 800c056:	2200      	movs	r2, #0
 800c058:	2100      	movs	r1, #0
 800c05a:	f7f9 fcdb 	bl	8005a14 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff fde9 	bl	800bc3a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 800c068:	4877      	ldr	r0, [pc, #476]	; (800c248 <hal_i2c_transfer+0x2a4>)
 800c06a:	f7fe fc67 	bl	800a93c <hal_cli_printf>
			return false;
 800c06e:	2300      	movs	r3, #0
 800c070:	e0e1      	b.n	800c236 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff fd71 	bl	800bb5e <LL_I2C_IsActiveFlag_SB>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d0de      	beq.n	800c040 <hal_i2c_transfer+0x9c>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	7cfa      	ldrb	r2, [r7, #19]
 800c088:	4611      	mov	r1, r2
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff fdf2 	bl	800bc74 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 800c090:	e018      	b.n	800c0c4 <hal_i2c_transfer+0x120>
		if(hal_delay_timer_is_expired(&timer)) {
 800c092:	f107 031c 	add.w	r3, r7, #28
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe ff52 	bl	800af40 <hal_delay_timer_is_expired>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d010      	beq.n	800c0c4 <hal_i2c_transfer+0x120>
			xSemaphoreGive(drv->mutex);
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	6858      	ldr	r0, [r3, #4]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	f7f9 fcb2 	bl	8005a14 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff fdc0 	bl	800bc3a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 800c0ba:	4864      	ldr	r0, [pc, #400]	; (800c24c <hal_i2c_transfer+0x2a8>)
 800c0bc:	f7fe fc3e 	bl	800a93c <hal_cli_printf>
			return false;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	e0b8      	b.n	800c236 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff fd5b 	bl	800bb84 <LL_I2C_IsActiveFlag_ADDR>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0de      	beq.n	800c092 <hal_i2c_transfer+0xee>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff fd79 	bl	800bbd0 <LL_I2C_ClearFlag_ADDR>

	/* register address transfer */
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 800c0de:	e018      	b.n	800c112 <hal_i2c_transfer+0x16e>
		if(hal_delay_timer_is_expired(&timer)) {
 800c0e0:	f107 031c 	add.w	r3, r7, #28
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fe ff2b 	bl	800af40 <hal_delay_timer_is_expired>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d010      	beq.n	800c112 <hal_i2c_transfer+0x16e>
			xSemaphoreGive(drv->mutex);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	6858      	ldr	r0, [r3, #4]
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	f7f9 fc8b 	bl	8005a14 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4618      	mov	r0, r3
 800c104:	f7ff fd99 	bl	800bc3a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c register address transmit timeout");
 800c108:	4851      	ldr	r0, [pc, #324]	; (800c250 <hal_i2c_transfer+0x2ac>)
 800c10a:	f7fe fc17 	bl	800a93c <hal_cli_printf>
			return false;
 800c10e:	2300      	movs	r3, #0
 800c110:	e091      	b.n	800c236 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fce8 	bl	800baec <LL_I2C_IsActiveFlag_TXE>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0de      	beq.n	800c0e0 <hal_i2c_transfer+0x13c>
		}
	}
	LL_I2C_TransmitData8(drv->i2c, regaddr);
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	4611      	mov	r1, r2
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff fda1 	bl	800bc74 <LL_I2C_TransmitData8>


	while(index < size) {
 800c132:	e02b      	b.n	800c18c <hal_i2c_transfer+0x1e8>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 800c134:	f107 031c 	add.w	r3, r7, #28
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe ff01 	bl	800af40 <hal_delay_timer_is_expired>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d010      	beq.n	800c166 <hal_i2c_transfer+0x1c2>
				xSemaphoreGive(drv->mutex);
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	6858      	ldr	r0, [r3, #4]
 800c148:	2300      	movs	r3, #0
 800c14a:	2200      	movs	r2, #0
 800c14c:	2100      	movs	r1, #0
 800c14e:	f7f9 fc61 	bl	8005a14 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4618      	mov	r0, r3
 800c158:	f7ff fd6f 	bl	800bc3a <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c TXE flag timeout");
 800c15c:	483d      	ldr	r0, [pc, #244]	; (800c254 <hal_i2c_transfer+0x2b0>)
 800c15e:	f7fe fbed 	bl	800a93c <hal_cli_printf>
				return false;
 800c162:	2300      	movs	r3, #0
 800c164:	e067      	b.n	800c236 <hal_i2c_transfer+0x292>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fcbe 	bl	800baec <LL_I2C_IsActiveFlag_TXE>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0de      	beq.n	800c134 <hal_i2c_transfer+0x190>
			}
		}

		LL_I2C_TransmitData8(drv->i2c, buf[index++]);
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	1c5a      	adds	r2, r3, #1
 800c17e:	627a      	str	r2, [r7, #36]	; 0x24
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	4413      	add	r3, r2
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	4619      	mov	r1, r3
 800c188:	f7ff fd74 	bl	800bc74 <LL_I2C_TransmitData8>
	while(index < size) {
 800c18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	429a      	cmp	r2, r3
 800c192:	d3e8      	bcc.n	800c166 <hal_i2c_transfer+0x1c2>
	}


	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 800c194:	e018      	b.n	800c1c8 <hal_i2c_transfer+0x224>
		if(hal_delay_timer_is_expired(&timer)) {
 800c196:	f107 031c 	add.w	r3, r7, #28
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fe fed0 	bl	800af40 <hal_delay_timer_is_expired>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d010      	beq.n	800c1c8 <hal_i2c_transfer+0x224>
			xSemaphoreGive(drv->mutex);
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	6858      	ldr	r0, [r3, #4]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	f7f9 fc30 	bl	8005a14 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff fd3e 	bl	800bc3a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c TXE flag timeout");
 800c1be:	4825      	ldr	r0, [pc, #148]	; (800c254 <hal_i2c_transfer+0x2b0>)
 800c1c0:	f7fe fbbc 	bl	800a93c <hal_cli_printf>
			return false;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e036      	b.n	800c236 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7ff fc8d 	bl	800baec <LL_I2C_IsActiveFlag_TXE>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0de      	beq.n	800c196 <hal_i2c_transfer+0x1f2>
		}
	}

	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 800c1d8:	e018      	b.n	800c20c <hal_i2c_transfer+0x268>
		if(hal_delay_timer_is_expired(&timer)) {
 800c1da:	f107 031c 	add.w	r3, r7, #28
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe feae 	bl	800af40 <hal_delay_timer_is_expired>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d010      	beq.n	800c20c <hal_i2c_transfer+0x268>
			xSemaphoreGive(drv->mutex);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	6858      	ldr	r0, [r3, #4]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	f7f9 fc0e 	bl	8005a14 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff fd1c 	bl	800bc3a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c BTF flag timeout");
 800c202:	4815      	ldr	r0, [pc, #84]	; (800c258 <hal_i2c_transfer+0x2b4>)
 800c204:	f7fe fb9a 	bl	800a93c <hal_cli_printf>
			return false;
 800c208:	2300      	movs	r3, #0
 800c20a:	e014      	b.n	800c236 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff fc7e 	bl	800bb12 <LL_I2C_IsActiveFlag_BTF>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d0de      	beq.n	800c1da <hal_i2c_transfer+0x236>
		}
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fd0a 	bl	800bc3a <LL_I2C_GenerateStopCondition>
	xSemaphoreGive(drv->mutex);
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	6858      	ldr	r0, [r3, #4]
 800c22a:	2300      	movs	r3, #0
 800c22c:	2200      	movs	r2, #0
 800c22e:	2100      	movs	r1, #0
 800c230:	f7f9 fbf0 	bl	8005a14 <xQueueGenericSend>

	return true;
 800c234:	2301      	movs	r3, #1
}
 800c236:	4618      	mov	r0, r3
 800c238:	3728      	adds	r7, #40	; 0x28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	0800eb90 	.word	0x0800eb90
 800c244:	0800ebac 	.word	0x0800ebac
 800c248:	0800ebc4 	.word	0x0800ebc4
 800c24c:	0800ebe0 	.word	0x0800ebe0
 800c250:	0800ec00 	.word	0x0800ec00
 800c254:	0800ec28 	.word	0x0800ec28
 800c258:	0800ec40 	.word	0x0800ec40

0800c25c <hal_i2c_receive>:


bool hal_i2c_receive(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 800c25c:	b590      	push	{r4, r7, lr}
 800c25e:	b08d      	sub	sp, #52	; 0x34
 800c260:	af02      	add	r7, sp, #8
 800c262:	6178      	str	r0, [r7, #20]
 800c264:	60fa      	str	r2, [r7, #12]
 800c266:	60bb      	str	r3, [r7, #8]
 800c268:	460b      	mov	r3, r1
 800c26a:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	627b      	str	r3, [r7, #36]	; 0x24

	if(hal_i2c_transfer(drv,addr,regaddr,NULL,0,timeout) == false) {
 800c270:	7cf9      	ldrb	r1, [r7, #19]
 800c272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c274:	9301      	str	r3, [sp, #4]
 800c276:	2300      	movs	r3, #0
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	2300      	movs	r3, #0
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	6978      	ldr	r0, [r7, #20]
 800c280:	f7ff fe90 	bl	800bfa4 <hal_i2c_transfer>
 800c284:	4603      	mov	r3, r0
 800c286:	f083 0301 	eor.w	r3, r3, #1
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d004      	beq.n	800c29a <hal_i2c_receive+0x3e>
		hal_cli_printf("i2c transfer error");
 800c290:	4879      	ldr	r0, [pc, #484]	; (800c478 <hal_i2c_receive+0x21c>)
 800c292:	f7fe fb53 	bl	800a93c <hal_cli_printf>
		return false;
 800c296:	2300      	movs	r3, #0
 800c298:	e0ea      	b.n	800c470 <hal_i2c_receive+0x214>
	}

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f9 feaa 	bl	8005ffc <xQueueSemaphoreTake>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d004      	beq.n	800c2b8 <hal_i2c_receive+0x5c>
		hal_cli_printf("i2c semaphore take timeout");
 800c2ae:	4873      	ldr	r0, [pc, #460]	; (800c47c <hal_i2c_receive+0x220>)
 800c2b0:	f7fe fb44 	bl	800a93c <hal_cli_printf>
		return false;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	e0db      	b.n	800c470 <hal_i2c_receive+0x214>
	}

	timer = hal_get_delay_timer(I2C_POLLING_TIMEOUT);
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	4971      	ldr	r1, [pc, #452]	; (800c480 <hal_i2c_receive+0x224>)
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fe fe19 	bl	800aef4 <hal_get_delay_timer>
 800c2c2:	f107 031c 	add.w	r3, r7, #28
 800c2c6:	463a      	mov	r2, r7
 800c2c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2cc:	e883 0003 	stmia.w	r3, {r0, r1}


	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 800c2d0:	e013      	b.n	800c2fa <hal_i2c_receive+0x9e>
		if(hal_delay_timer_is_expired(&timer)) {
 800c2d2:	f107 031c 	add.w	r3, r7, #28
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe fe32 	bl	800af40 <hal_delay_timer_is_expired>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00b      	beq.n	800c2fa <hal_i2c_receive+0x9e>
			xSemaphoreGive(drv->mutex);
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	6858      	ldr	r0, [r3, #4]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	f7f9 fb92 	bl	8005a14 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 800c2f0:	4864      	ldr	r0, [pc, #400]	; (800c484 <hal_i2c_receive+0x228>)
 800c2f2:	f7fe fb23 	bl	800a93c <hal_cli_printf>
			return false;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e0ba      	b.n	800c470 <hal_i2c_receive+0x214>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff fc53 	bl	800bbaa <LL_I2C_IsActiveFlag_BUSY>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e3      	bne.n	800c2d2 <hal_i2c_receive+0x76>
		}
	}

	if(size == 1) {
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d106      	bne.n	800c31e <hal_i2c_receive+0xc2>
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2100      	movs	r1, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff fc6c 	bl	800bbf4 <LL_I2C_AcknowledgeNextData>
 800c31c:	e006      	b.n	800c32c <hal_i2c_receive+0xd0>
	} else {
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_ACK);
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fc64 	bl	800bbf4 <LL_I2C_AcknowledgeNextData>
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fc72 	bl	800bc1a <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 800c336:	e018      	b.n	800c36a <hal_i2c_receive+0x10e>
		if(hal_delay_timer_is_expired(&timer)) {
 800c338:	f107 031c 	add.w	r3, r7, #28
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fe fdff 	bl	800af40 <hal_delay_timer_is_expired>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d010      	beq.n	800c36a <hal_i2c_receive+0x10e>
			xSemaphoreGive(drv->mutex);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	6858      	ldr	r0, [r3, #4]
 800c34c:	2300      	movs	r3, #0
 800c34e:	2200      	movs	r2, #0
 800c350:	2100      	movs	r1, #0
 800c352:	f7f9 fb5f 	bl	8005a14 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7ff fc6d 	bl	800bc3a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 800c360:	4849      	ldr	r0, [pc, #292]	; (800c488 <hal_i2c_receive+0x22c>)
 800c362:	f7fe faeb 	bl	800a93c <hal_cli_printf>
			return false;
 800c366:	2300      	movs	r3, #0
 800c368:	e082      	b.n	800c470 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff fbf5 	bl	800bb5e <LL_I2C_IsActiveFlag_SB>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0de      	beq.n	800c338 <hal_i2c_receive+0xdc>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr | 0x01);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	7cfb      	ldrb	r3, [r7, #19]
 800c380:	f043 0301 	orr.w	r3, r3, #1
 800c384:	b2db      	uxtb	r3, r3
 800c386:	4619      	mov	r1, r3
 800c388:	4610      	mov	r0, r2
 800c38a:	f7ff fc73 	bl	800bc74 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 800c38e:	e018      	b.n	800c3c2 <hal_i2c_receive+0x166>
		if(hal_delay_timer_is_expired(&timer)) {
 800c390:	f107 031c 	add.w	r3, r7, #28
 800c394:	4618      	mov	r0, r3
 800c396:	f7fe fdd3 	bl	800af40 <hal_delay_timer_is_expired>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d010      	beq.n	800c3c2 <hal_i2c_receive+0x166>
			xSemaphoreGive(drv->mutex);
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	6858      	ldr	r0, [r3, #4]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	f7f9 fb33 	bl	8005a14 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff fc41 	bl	800bc3a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 800c3b8:	4834      	ldr	r0, [pc, #208]	; (800c48c <hal_i2c_receive+0x230>)
 800c3ba:	f7fe fabf 	bl	800a93c <hal_cli_printf>
			return false;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e056      	b.n	800c470 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff fbdc 	bl	800bb84 <LL_I2C_IsActiveFlag_ADDR>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d0de      	beq.n	800c390 <hal_i2c_receive+0x134>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fbfa 	bl	800bbd0 <LL_I2C_ClearFlag_ADDR>

	while(index < size) {
 800c3dc:	e037      	b.n	800c44e <hal_i2c_receive+0x1f2>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 800c3de:	f107 031c 	add.w	r3, r7, #28
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fdac 	bl	800af40 <hal_delay_timer_is_expired>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d010      	beq.n	800c410 <hal_i2c_receive+0x1b4>
				xSemaphoreGive(drv->mutex);
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	6858      	ldr	r0, [r3, #4]
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	f7f9 fb0c 	bl	8005a14 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff fc1a 	bl	800bc3a <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c RXNE flag timeout");
 800c406:	4822      	ldr	r0, [pc, #136]	; (800c490 <hal_i2c_receive+0x234>)
 800c408:	f7fe fa98 	bl	800a93c <hal_cli_printf>
				return false;
 800c40c:	2300      	movs	r3, #0
 800c40e:	e02f      	b.n	800c470 <hal_i2c_receive+0x214>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff fb8f 	bl	800bb38 <LL_I2C_IsActiveFlag_RXNE>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d0de      	beq.n	800c3de <hal_i2c_receive+0x182>
			}
		}
		buf[index++] = LL_I2C_ReceiveData8(drv->i2c);
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	627a      	str	r2, [r7, #36]	; 0x24
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	18d4      	adds	r4, r2, r3
 800c42e:	4608      	mov	r0, r1
 800c430:	f7ff fc13 	bl	800bc5a <LL_I2C_ReceiveData8>
 800c434:	4603      	mov	r3, r0
 800c436:	7023      	strb	r3, [r4, #0]

		if(index == size - 1)
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	3b01      	subs	r3, #1
 800c43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c43e:	429a      	cmp	r2, r3
 800c440:	d105      	bne.n	800c44e <hal_i2c_receive+0x1f2>
			LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2100      	movs	r1, #0
 800c448:	4618      	mov	r0, r3
 800c44a:	f7ff fbd3 	bl	800bbf4 <LL_I2C_AcknowledgeNextData>
	while(index < size) {
 800c44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	429a      	cmp	r2, r3
 800c454:	d3dc      	bcc.n	800c410 <hal_i2c_receive+0x1b4>
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff fbed 	bl	800bc3a <LL_I2C_GenerateStopCondition>

	xSemaphoreGive(drv->mutex);
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	6858      	ldr	r0, [r3, #4]
 800c464:	2300      	movs	r3, #0
 800c466:	2200      	movs	r2, #0
 800c468:	2100      	movs	r1, #0
 800c46a:	f7f9 fad3 	bl	8005a14 <xQueueGenericSend>

	return true;
 800c46e:	2301      	movs	r3, #1
}
 800c470:	4618      	mov	r0, r3
 800c472:	372c      	adds	r7, #44	; 0x2c
 800c474:	46bd      	mov	sp, r7
 800c476:	bd90      	pop	{r4, r7, pc}
 800c478:	0800ec58 	.word	0x0800ec58
 800c47c:	0800eb90 	.word	0x0800eb90
 800c480:	000f4240 	.word	0x000f4240
 800c484:	0800ebac 	.word	0x0800ebac
 800c488:	0800ebc4 	.word	0x0800ebc4
 800c48c:	0800ebe0 	.word	0x0800ebe0
 800c490:	0800ec6c 	.word	0x0800ec6c

0800c494 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08a      	sub	sp, #40	; 0x28
 800c498:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800c49a:	463b      	mov	r3, r7
 800c49c:	2220      	movs	r2, #32
 800c49e:	2100      	movs	r1, #0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f001 fe4b 	bl	800e13c <memset>

	hal_gpio_init_alt(
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2104      	movs	r1, #4
 800c4b0:	4857      	ldr	r0, [pc, #348]	; (800c610 <i2c1_init+0x17c>)
 800c4b2:	f7fe ff87 	bl	800b3c4 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 800c4b6:	2304      	movs	r3, #4
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	2200      	movs	r2, #0
 800c4be:	2104      	movs	r1, #4
 800c4c0:	4854      	ldr	r0, [pc, #336]	; (800c614 <i2c1_init+0x180>)
 800c4c2:	f7fe ff7f 	bl	800b3c4 <hal_gpio_init_alt>
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1 DMA Init */
  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_1);
 800c4c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c4ca:	2106      	movs	r1, #6
 800c4cc:	4852      	ldr	r0, [pc, #328]	; (800c618 <i2c1_init+0x184>)
 800c4ce:	f7ff fce1 	bl	800be94 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800c4d2:	2240      	movs	r2, #64	; 0x40
 800c4d4:	2106      	movs	r1, #6
 800c4d6:	4850      	ldr	r0, [pc, #320]	; (800c618 <i2c1_init+0x184>)
 800c4d8:	f7ff fbe0 	bl	800bc9c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2106      	movs	r1, #6
 800c4e0:	484d      	ldr	r0, [pc, #308]	; (800c618 <i2c1_init+0x184>)
 800c4e2:	f7ff fcb3 	bl	800be4c <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2106      	movs	r1, #6
 800c4ea:	484b      	ldr	r0, [pc, #300]	; (800c618 <i2c1_init+0x184>)
 800c4ec:	f7ff fbfa 	bl	800bce4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2106      	movs	r1, #6
 800c4f4:	4848      	ldr	r0, [pc, #288]	; (800c618 <i2c1_init+0x184>)
 800c4f6:	f7ff fc19 	bl	800bd2c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 800c4fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c4fe:	2106      	movs	r1, #6
 800c500:	4845      	ldr	r0, [pc, #276]	; (800c618 <i2c1_init+0x184>)
 800c502:	f7ff fc37 	bl	800bd74 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 800c506:	2200      	movs	r2, #0
 800c508:	2106      	movs	r1, #6
 800c50a:	4843      	ldr	r0, [pc, #268]	; (800c618 <i2c1_init+0x184>)
 800c50c:	f7ff fc56 	bl	800bdbc <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 800c510:	2200      	movs	r2, #0
 800c512:	2106      	movs	r1, #6
 800c514:	4840      	ldr	r0, [pc, #256]	; (800c618 <i2c1_init+0x184>)
 800c516:	f7ff fc75 	bl	800be04 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 800c51a:	2106      	movs	r1, #6
 800c51c:	483e      	ldr	r0, [pc, #248]	; (800c618 <i2c1_init+0x184>)
 800c51e:	f7ff fcdd 	bl	800bedc <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_0, LL_DMA_CHANNEL_1);
 800c522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c526:	2100      	movs	r1, #0
 800c528:	483b      	ldr	r0, [pc, #236]	; (800c618 <i2c1_init+0x184>)
 800c52a:	f7ff fcb3 	bl	800be94 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800c52e:	2200      	movs	r2, #0
 800c530:	2100      	movs	r1, #0
 800c532:	4839      	ldr	r0, [pc, #228]	; (800c618 <i2c1_init+0x184>)
 800c534:	f7ff fbb2 	bl	800bc9c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 800c538:	2200      	movs	r2, #0
 800c53a:	2100      	movs	r1, #0
 800c53c:	4836      	ldr	r0, [pc, #216]	; (800c618 <i2c1_init+0x184>)
 800c53e:	f7ff fc85 	bl	800be4c <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 800c542:	2200      	movs	r2, #0
 800c544:	2100      	movs	r1, #0
 800c546:	4834      	ldr	r0, [pc, #208]	; (800c618 <i2c1_init+0x184>)
 800c548:	f7ff fbcc 	bl	800bce4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800c54c:	2200      	movs	r2, #0
 800c54e:	2100      	movs	r1, #0
 800c550:	4831      	ldr	r0, [pc, #196]	; (800c618 <i2c1_init+0x184>)
 800c552:	f7ff fbeb 	bl	800bd2c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800c556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c55a:	2100      	movs	r1, #0
 800c55c:	482e      	ldr	r0, [pc, #184]	; (800c618 <i2c1_init+0x184>)
 800c55e:	f7ff fc09 	bl	800bd74 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 800c562:	2200      	movs	r2, #0
 800c564:	2100      	movs	r1, #0
 800c566:	482c      	ldr	r0, [pc, #176]	; (800c618 <i2c1_init+0x184>)
 800c568:	f7ff fc28 	bl	800bdbc <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 800c56c:	2200      	movs	r2, #0
 800c56e:	2100      	movs	r1, #0
 800c570:	4829      	ldr	r0, [pc, #164]	; (800c618 <i2c1_init+0x184>)
 800c572:	f7ff fc47 	bl	800be04 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 800c576:	2100      	movs	r1, #0
 800c578:	4827      	ldr	r0, [pc, #156]	; (800c618 <i2c1_init+0x184>)
 800c57a:	f7ff fcaf 	bl	800bedc <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800c57e:	f7ff f9e9 	bl	800b954 <__NVIC_GetPriorityGrouping>
 800c582:	4603      	mov	r3, r0
 800c584:	2200      	movs	r2, #0
 800c586:	2105      	movs	r1, #5
 800c588:	4618      	mov	r0, r3
 800c58a:	f7ff fa39 	bl	800ba00 <NVIC_EncodePriority>
 800c58e:	4603      	mov	r3, r0
 800c590:	4619      	mov	r1, r3
 800c592:	201f      	movs	r0, #31
 800c594:	f7ff fa0a 	bl	800b9ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800c598:	201f      	movs	r0, #31
 800c59a:	f7ff f9e9 	bl	800b970 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800c59e:	f7ff f9d9 	bl	800b954 <__NVIC_GetPriorityGrouping>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2105      	movs	r1, #5
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff fa29 	bl	800ba00 <NVIC_EncodePriority>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	2020      	movs	r0, #32
 800c5b4:	f7ff f9fa 	bl	800b9ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 800c5b8:	2020      	movs	r0, #32
 800c5ba:	f7ff f9d9 	bl	800b970 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800c5be:	4817      	ldr	r0, [pc, #92]	; (800c61c <i2c1_init+0x188>)
 800c5c0:	f7ff fa84 	bl	800bacc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800c5c4:	4815      	ldr	r0, [pc, #84]	; (800c61c <i2c1_init+0x188>)
 800c5c6:	f7ff fa5e 	bl	800ba86 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800c5ca:	4814      	ldr	r0, [pc, #80]	; (800c61c <i2c1_init+0x188>)
 800c5cc:	f7ff fa4b 	bl	800ba66 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 800c5d4:	4b12      	ldr	r3, [pc, #72]	; (800c620 <i2c1_init+0x18c>)
 800c5d6:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800c5e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ec:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800c5ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c5f2:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4808      	ldr	r0, [pc, #32]	; (800c61c <i2c1_init+0x188>)
 800c5fa:	f7f6 fe6b 	bl	80032d4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800c5fe:	2100      	movs	r1, #0
 800c600:	4806      	ldr	r0, [pc, #24]	; (800c61c <i2c1_init+0x188>)
 800c602:	f7ff fa50 	bl	800baa6 <LL_I2C_SetOwnAddress2>
}
 800c606:	bf00      	nop
 800c608:	3720      	adds	r7, #32
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	0800ee68 	.word	0x0800ee68
 800c614:	0800ee70 	.word	0x0800ee70
 800c618:	40026000 	.word	0x40026000
 800c61c:	40005400 	.word	0x40005400
 800c620:	000186a0 	.word	0x000186a0

0800c624 <i2c3_init>:

static void i2c3_init(void)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08e      	sub	sp, #56	; 0x38
 800c628:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800c62a:	f107 0318 	add.w	r3, r7, #24
 800c62e:	2220      	movs	r2, #32
 800c630:	2100      	movs	r1, #0
 800c632:	4618      	mov	r0, r3
 800c634:	f001 fd82 	bl	800e13c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c638:	463b      	mov	r3, r7
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	605a      	str	r2, [r3, #4]
 800c640:	609a      	str	r2, [r3, #8]
 800c642:	60da      	str	r2, [r3, #12]
 800c644:	611a      	str	r2, [r3, #16]
 800c646:	615a      	str	r2, [r3, #20]

  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800c648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c64c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c64e:	2302      	movs	r3, #2
 800c650:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c652:	2303      	movs	r3, #3
 800c654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800c656:	2301      	movs	r3, #1
 800c658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c65a:	2300      	movs	r3, #0
 800c65c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800c65e:	2304      	movs	r3, #4
 800c660:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c662:	463b      	mov	r3, r7
 800c664:	4619      	mov	r1, r3
 800c666:	482f      	ldr	r0, [pc, #188]	; (800c724 <i2c3_init+0x100>)
 800c668:	f7f6 fcb5 	bl	8002fd6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800c66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c670:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c672:	2302      	movs	r3, #2
 800c674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c676:	2303      	movs	r3, #3
 800c678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800c67a:	2301      	movs	r3, #1
 800c67c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c67e:	2300      	movs	r3, #0
 800c680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800c682:	2304      	movs	r3, #4
 800c684:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c686:	463b      	mov	r3, r7
 800c688:	4619      	mov	r1, r3
 800c68a:	4827      	ldr	r0, [pc, #156]	; (800c728 <i2c3_init+0x104>)
 800c68c:	f7f6 fca3 	bl	8002fd6 <LL_GPIO_Init>


  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800c690:	f7ff f960 	bl	800b954 <__NVIC_GetPriorityGrouping>
 800c694:	4603      	mov	r3, r0
 800c696:	2200      	movs	r2, #0
 800c698:	2105      	movs	r1, #5
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7ff f9b0 	bl	800ba00 <NVIC_EncodePriority>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	2048      	movs	r0, #72	; 0x48
 800c6a6:	f7ff f981 	bl	800b9ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 800c6aa:	2048      	movs	r0, #72	; 0x48
 800c6ac:	f7ff f960 	bl	800b970 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800c6b0:	f7ff f950 	bl	800b954 <__NVIC_GetPriorityGrouping>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	2105      	movs	r1, #5
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7ff f9a0 	bl	800ba00 <NVIC_EncodePriority>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	2049      	movs	r0, #73	; 0x49
 800c6c6:	f7ff f971 	bl	800b9ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 800c6ca:	2049      	movs	r0, #73	; 0x49
 800c6cc:	f7ff f950 	bl	800b970 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 800c6d0:	4816      	ldr	r0, [pc, #88]	; (800c72c <i2c3_init+0x108>)
 800c6d2:	f7ff f9fb 	bl	800bacc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800c6d6:	4815      	ldr	r0, [pc, #84]	; (800c72c <i2c3_init+0x108>)
 800c6d8:	f7ff f9d5 	bl	800ba86 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800c6dc:	4813      	ldr	r0, [pc, #76]	; (800c72c <i2c3_init+0x108>)
 800c6de:	f7ff f9c2 	bl	800ba66 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800c6e6:	4b12      	ldr	r3, [pc, #72]	; (800c730 <i2c3_init+0x10c>)
 800c6e8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800c6fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6fe:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800c700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800c706:	f107 0318 	add.w	r3, r7, #24
 800c70a:	4619      	mov	r1, r3
 800c70c:	4807      	ldr	r0, [pc, #28]	; (800c72c <i2c3_init+0x108>)
 800c70e:	f7f6 fde1 	bl	80032d4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800c712:	2100      	movs	r1, #0
 800c714:	4805      	ldr	r0, [pc, #20]	; (800c72c <i2c3_init+0x108>)
 800c716:	f7ff f9c6 	bl	800baa6 <LL_I2C_SetOwnAddress2>
}
 800c71a:	bf00      	nop
 800c71c:	3738      	adds	r7, #56	; 0x38
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	40020800 	.word	0x40020800
 800c728:	40020000 	.word	0x40020000
 800c72c:	40005c00 	.word	0x40005c00
 800c730:	000186a0 	.word	0x000186a0

0800c734 <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 800c734:	b480      	push	{r7}
 800c736:	af00      	add	r7, sp, #0

}
 800c738:	bf00      	nop
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800c742:	b480      	push	{r7}
 800c744:	af00      	add	r7, sp, #0

}
 800c746:	bf00      	nop
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 800c750:	b480      	push	{r7}
 800c752:	af00      	add	r7, sp, #0

}
 800c754:	bf00      	nop
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 800c75e:	b480      	push	{r7}
 800c760:	af00      	add	r7, sp, #0

}
 800c762:	bf00      	nop
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0

}
 800c770:	bf00      	nop
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 800c77a:	b480      	push	{r7}
 800c77c:	af00      	add	r7, sp, #0

}
 800c77e:	bf00      	nop
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <hal_gpio_toggle>:
	} else {
		return false;
	}
}

static inline void hal_gpio_toggle(const GpioPin* gpio) {
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
	uint32_t odr = gpio->port->ODR;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	60fb      	str	r3, [r7, #12]
	gpio->port->BSRR = ((odr & gpio->pin) << 16u) | (~odr & gpio->pin);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	889b      	ldrh	r3, [r3, #4]
 800c79c:	461a      	mov	r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	0419      	lsls	r1, r3, #16
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	43db      	mvns	r3, r3
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	8892      	ldrh	r2, [r2, #4]
 800c7ac:	401a      	ands	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	619a      	str	r2, [r3, #24]
}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
	...

0800c7c4 <mainThread>:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void mainThread(void* param) {
 800c7c4:	b590      	push	{r4, r7, lr}
 800c7c6:	b089      	sub	sp, #36	; 0x24
 800c7c8:	af02      	add	r7, sp, #8
 800c7ca:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter mainthread");
 800c7cc:	483b      	ldr	r0, [pc, #236]	; (800c8bc <mainThread+0xf8>)
 800c7ce:	f7fe f8b5 	bl	800a93c <hal_cli_printf>

	sdio_init();
 800c7d2:	f000 f91b 	bl	800ca0c <sdio_init>
	MX_FATFS_Init();
 800c7d6:	f7f8 f83d 	bl	8004854 <MX_FATFS_Init>

	i2c_init(I2cId1);
 800c7da:	2001      	movs	r0, #1
 800c7dc:	f7ff fb9e 	bl	800bf1c <i2c_init>
	i2c_init(I2cId3);
 800c7e0:	2003      	movs	r0, #3
 800c7e2:	f7ff fb9b 	bl	800bf1c <i2c_init>

	spi_init(SpiId2);
 800c7e6:	2002      	movs	r0, #2
 800c7e8:	f000 fc42 	bl	800d070 <spi_init>
	spi_init(SpiId4);
 800c7ec:	2004      	movs	r0, #4
 800c7ee:	f000 fc3f 	bl	800d070 <spi_init>

	hal_resources_init();
 800c7f2:	f000 f8e3 	bl	800c9bc <hal_resources_init>

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 800c7f6:	4b32      	ldr	r3, [pc, #200]	; (800c8c0 <mainThread+0xfc>)
 800c7f8:	4a32      	ldr	r2, [pc, #200]	; (800c8c4 <mainThread+0x100>)
 800c7fa:	4933      	ldr	r1, [pc, #204]	; (800c8c8 <mainThread+0x104>)
 800c7fc:	4833      	ldr	r0, [pc, #204]	; (800c8cc <mainThread+0x108>)
 800c7fe:	f7fd f8bb 	bl	8009978 <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2);
 800c802:	4832      	ldr	r0, [pc, #200]	; (800c8cc <mainThread+0x108>)
 800c804:	f7fd ff10 	bl	800a628 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 800c808:	2100      	movs	r1, #0
 800c80a:	4830      	ldr	r0, [pc, #192]	; (800c8cc <mainThread+0x108>)
 800c80c:	f7fd ff1b 	bl	800a646 <u8x8_SetPowerSave>

	uint8_t buffer[5]={0x11,0x22,0x22,0x22,0x11};
 800c810:	4a2f      	ldr	r2, [pc, #188]	; (800c8d0 <mainThread+0x10c>)
 800c812:	f107 0308 	add.w	r3, r7, #8
 800c816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c81a:	6018      	str	r0, [r3, #0]
 800c81c:	3304      	adds	r3, #4
 800c81e:	7019      	strb	r1, [r3, #0]

    u8g2_FirstPage(&u8g2);
 800c820:	482a      	ldr	r0, [pc, #168]	; (800c8cc <mainThread+0x108>)
 800c822:	f7fd f885 	bl	8009930 <u8g2_FirstPage>

    for(int i =0; i< 64; i++)
 800c826:	2300      	movs	r3, #0
 800c828:	617b      	str	r3, [r7, #20]
 800c82a:	e013      	b.n	800c854 <mainThread+0x90>
    	for(int j =0; j< 128;j++)
 800c82c:	2300      	movs	r3, #0
 800c82e:	613b      	str	r3, [r7, #16]
 800c830:	e00a      	b.n	800c848 <mainThread+0x84>
    		u8g2_DrawPixel(&u8g2, i, j);
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	b2d2      	uxtb	r2, r2
 800c83a:	4619      	mov	r1, r3
 800c83c:	4823      	ldr	r0, [pc, #140]	; (800c8cc <mainThread+0x108>)
 800c83e:	f7fd f9d1 	bl	8009be4 <u8g2_DrawPixel>
    	for(int j =0; j< 128;j++)
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	3301      	adds	r3, #1
 800c846:	613b      	str	r3, [r7, #16]
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	2b7f      	cmp	r3, #127	; 0x7f
 800c84c:	ddf1      	ble.n	800c832 <mainThread+0x6e>
    for(int i =0; i< 64; i++)
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	3301      	adds	r3, #1
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	2b3f      	cmp	r3, #63	; 0x3f
 800c858:	dde8      	ble.n	800c82c <mainThread+0x68>
	//u8g2_DrawStr(&u8g2, 30, 30, "hello");
	u8g2_SendBuffer(&u8g2);
 800c85a:	481c      	ldr	r0, [pc, #112]	; (800c8cc <mainThread+0x108>)
 800c85c:	f7fd f842 	bl	80098e4 <u8g2_SendBuffer>

    } while (u8g2_NextPage(&u8g2));
#endif

	while(1) {
		hal_gpio_toggle(&gpio_led_red);
 800c860:	481c      	ldr	r0, [pc, #112]	; (800c8d4 <mainThread+0x110>)
 800c862:	f7ff ff91 	bl	800c788 <hal_gpio_toggle>
		hal_gpio_toggle(&gpio_led_green);
 800c866:	481c      	ldr	r0, [pc, #112]	; (800c8d8 <mainThread+0x114>)
 800c868:	f7ff ff8e 	bl	800c788 <hal_gpio_toggle>
		hal_cli_printf("hello world");
 800c86c:	481b      	ldr	r0, [pc, #108]	; (800c8dc <mainThread+0x118>)
 800c86e:	f7fe f865 	bl	800a93c <hal_cli_printf>
		hal_i2c_receive(&i2c1drv, 0x68<<1, 0x00, buffer, 5, 1000);
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c87a:	9201      	str	r2, [sp, #4]
 800c87c:	2205      	movs	r2, #5
 800c87e:	9200      	str	r2, [sp, #0]
 800c880:	2200      	movs	r2, #0
 800c882:	21d0      	movs	r1, #208	; 0xd0
 800c884:	4816      	ldr	r0, [pc, #88]	; (800c8e0 <mainThread+0x11c>)
 800c886:	f7ff fce9 	bl	800c25c <hal_i2c_receive>
		hal_cli_printf("%d %d %d %d %d", buffer[0],buffer[1],buffer[2],buffer[3],buffer[4]);
 800c88a:	7a3b      	ldrb	r3, [r7, #8]
 800c88c:	4619      	mov	r1, r3
 800c88e:	7a7b      	ldrb	r3, [r7, #9]
 800c890:	4618      	mov	r0, r3
 800c892:	7abb      	ldrb	r3, [r7, #10]
 800c894:	461c      	mov	r4, r3
 800c896:	7afb      	ldrb	r3, [r7, #11]
 800c898:	7b3a      	ldrb	r2, [r7, #12]
 800c89a:	9201      	str	r2, [sp, #4]
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	4623      	mov	r3, r4
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	4810      	ldr	r0, [pc, #64]	; (800c8e4 <mainThread+0x120>)
 800c8a4:	f7fe f84a 	bl	800a93c <hal_cli_printf>
		hal_cli_printf("%s %d", __FILE__, __LINE__);
 800c8a8:	2284      	movs	r2, #132	; 0x84
 800c8aa:	490f      	ldr	r1, [pc, #60]	; (800c8e8 <mainThread+0x124>)
 800c8ac:	480f      	ldr	r0, [pc, #60]	; (800c8ec <mainThread+0x128>)
 800c8ae:	f7fe f845 	bl	800a93c <hal_cli_printf>
		vTaskDelay(1000);
 800c8b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c8b6:	f7fa f831 	bl	800691c <vTaskDelay>
		hal_gpio_toggle(&gpio_led_red);
 800c8ba:	e7d1      	b.n	800c860 <mainThread+0x9c>
 800c8bc:	0800ec84 	.word	0x0800ec84
 800c8c0:	08000671 	.word	0x08000671
 800c8c4:	08000791 	.word	0x08000791
 800c8c8:	0800edbc 	.word	0x0800edbc
 800c8cc:	200058a0 	.word	0x200058a0
 800c8d0:	0800eccc 	.word	0x0800eccc
 800c8d4:	0800ee50 	.word	0x0800ee50
 800c8d8:	0800ee48 	.word	0x0800ee48
 800c8dc:	0800ec98 	.word	0x0800ec98
 800c8e0:	20005890 	.word	0x20005890
 800c8e4:	0800eca4 	.word	0x0800eca4
 800c8e8:	0800ecb4 	.word	0x0800ecb4
 800c8ec:	0800ecc4 	.word	0x0800ecc4

0800c8f0 <main>:

	}
}

int main(void) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af02      	add	r7, sp, #8
	HAL_Init();
 800c8f6:	f7f3 ffa7 	bl	8000848 <HAL_Init>

	hal_bus_init_early();
 800c8fa:	f7fe fa27 	bl	800ad4c <hal_bus_init_early>
	hal_clock_init_early();
 800c8fe:	f7fe fa61 	bl	800adc4 <hal_clock_init_early>
	hal_dwt_init_early();
 800c902:	f7fe fab7 	bl	800ae74 <hal_dwt_init_early>

	hal_resources_init_early();
 800c906:	f000 f83d 	bl	800c984 <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 800c90a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800c90e:	2000      	movs	r0, #0
 800c910:	f001 fb20 	bl	800df54 <hal_uart_init>
	hal_cli_init();
 800c914:	f7fe f84c 	bl	800a9b0 <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 800c918:	4809      	ldr	r0, [pc, #36]	; (800c940 <main+0x50>)
 800c91a:	f7fe f80f 	bl	800a93c <hal_cli_printf>

	traceSTART();
 800c91e:	f7fc fe2d 	bl	800957c <SEGGER_SYSVIEW_Conf>
	xTaskCreate(mainThread, "main", 256, NULL, 3, NULL);
 800c922:	2300      	movs	r3, #0
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	2303      	movs	r3, #3
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	2300      	movs	r3, #0
 800c92c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c930:	4904      	ldr	r1, [pc, #16]	; (800c944 <main+0x54>)
 800c932:	4805      	ldr	r0, [pc, #20]	; (800c948 <main+0x58>)
 800c934:	f7f9 fe89 	bl	800664a <xTaskCreate>
	vTaskStartScheduler();
 800c938:	f7fa f828 	bl	800698c <vTaskStartScheduler>

	for(;;);
 800c93c:	e7fe      	b.n	800c93c <main+0x4c>
 800c93e:	bf00      	nop
 800c940:	0800ecd4 	.word	0x0800ecd4
 800c944:	0800ecec 	.word	0x0800ecec
 800c948:	0800c7c5 	.word	0x0800c7c5

0800c94c <hal_gpio_write>:
static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 800c958:	78fb      	ldrb	r3, [r7, #3]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d005      	beq.n	800c96a <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	889a      	ldrh	r2, [r3, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	619a      	str	r2, [r3, #24]
}
 800c968:	e006      	b.n	800c978 <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	889b      	ldrh	r3, [r3, #4]
 800c96e:	461a      	mov	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	0412      	lsls	r2, r2, #16
 800c976:	619a      	str	r2, [r3, #24]
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <hal_resources_init_early>:
const GpioPin gpio_ssd1306_reset = {.port = SSD1306_RESET_GPIO_PORT, .pin = SSD1306_RESET_PIN};
const GpioPin gpio_ssd1306_dc = {.port = SSD1306_DC_GPIO_PORT, .pin = SSD1306_DC_PIN};
const GpioPin gpio_ssd1306_cs = {.port = SSD1306_CS_GPIO_PORT, .pin = SSD1306_CS_PIN};


void hal_resources_init_early(void) {
 800c984:	b580      	push	{r7, lr}
 800c986:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800c988:	2300      	movs	r3, #0
 800c98a:	2201      	movs	r2, #1
 800c98c:	2101      	movs	r1, #1
 800c98e:	4809      	ldr	r0, [pc, #36]	; (800c9b4 <hal_resources_init_early+0x30>)
 800c990:	f7fe fcfe 	bl	800b390 <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 800c994:	2101      	movs	r1, #1
 800c996:	4807      	ldr	r0, [pc, #28]	; (800c9b4 <hal_resources_init_early+0x30>)
 800c998:	f7ff ffd8 	bl	800c94c <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800c99c:	2300      	movs	r3, #0
 800c99e:	2201      	movs	r2, #1
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	4805      	ldr	r0, [pc, #20]	; (800c9b8 <hal_resources_init_early+0x34>)
 800c9a4:	f7fe fcf4 	bl	800b390 <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	4803      	ldr	r0, [pc, #12]	; (800c9b8 <hal_resources_init_early+0x34>)
 800c9ac:	f7ff ffce 	bl	800c94c <hal_gpio_write>
}
 800c9b0:	bf00      	nop
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	0800ee48 	.word	0x0800ee48
 800c9b8:	0800ee50 	.word	0x0800ee50

0800c9bc <hal_resources_init>:

void hal_resources_init(void) {
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	480e      	ldr	r0, [pc, #56]	; (800ca00 <hal_resources_init+0x44>)
 800c9c8:	f7fe fce2 	bl	800b390 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	480c      	ldr	r0, [pc, #48]	; (800ca00 <hal_resources_init+0x44>)
 800c9d0:	f7ff ffbc 	bl	800c94c <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	2101      	movs	r1, #1
 800c9da:	480a      	ldr	r0, [pc, #40]	; (800ca04 <hal_resources_init+0x48>)
 800c9dc:	f7fe fcd8 	bl	800b390 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	4808      	ldr	r0, [pc, #32]	; (800ca04 <hal_resources_init+0x48>)
 800c9e4:	f7ff ffb2 	bl	800c94c <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	2101      	movs	r1, #1
 800c9ee:	4806      	ldr	r0, [pc, #24]	; (800ca08 <hal_resources_init+0x4c>)
 800c9f0:	f7fe fcce 	bl	800b390 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	4804      	ldr	r0, [pc, #16]	; (800ca08 <hal_resources_init+0x4c>)
 800c9f8:	f7ff ffa8 	bl	800c94c <hal_gpio_write>
}
 800c9fc:	bf00      	nop
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	0800ee78 	.word	0x0800ee78
 800ca04:	0800ee80 	.word	0x0800ee80
 800ca08:	0800ee88 	.word	0x0800ee88

0800ca0c <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 800ca10:	4b0c      	ldr	r3, [pc, #48]	; (800ca44 <sdio_init+0x38>)
 800ca12:	4a0d      	ldr	r2, [pc, #52]	; (800ca48 <sdio_init+0x3c>)
 800ca14:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800ca16:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <sdio_init+0x38>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800ca1c:	4b09      	ldr	r3, [pc, #36]	; (800ca44 <sdio_init+0x38>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ca22:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <sdio_init+0x38>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800ca28:	4b06      	ldr	r3, [pc, #24]	; (800ca44 <sdio_init+0x38>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ca2e:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <sdio_init+0x38>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 800ca34:	4b03      	ldr	r3, [pc, #12]	; (800ca44 <sdio_init+0x38>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	619a      	str	r2, [r3, #24]
}
 800ca3a:	bf00      	nop
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	20005928 	.word	0x20005928
 800ca48:	40012c00 	.word	0x40012c00

0800ca4c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08c      	sub	sp, #48	; 0x30
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800ca54:	2300      	movs	r3, #0
 800ca56:	61bb      	str	r3, [r7, #24]
 800ca58:	4b60      	ldr	r3, [pc, #384]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800ca5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5c:	4a5f      	ldr	r2, [pc, #380]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800ca5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ca62:	6313      	str	r3, [r2, #48]	; 0x30
 800ca64:	4b5d      	ldr	r3, [pc, #372]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800ca66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca6c:	61bb      	str	r3, [r7, #24]
 800ca6e:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800ca70:	2200      	movs	r2, #0
 800ca72:	2100      	movs	r1, #0
 800ca74:	203b      	movs	r0, #59	; 0x3b
 800ca76:	f7f4 f805 	bl	8000a84 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800ca7a:	203b      	movs	r0, #59	; 0x3b
 800ca7c:	f7f4 f81e 	bl	8000abc <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca80:	f107 031c 	add.w	r3, r7, #28
 800ca84:	2200      	movs	r2, #0
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	605a      	str	r2, [r3, #4]
 800ca8a:	609a      	str	r2, [r3, #8]
 800ca8c:	60da      	str	r2, [r3, #12]
 800ca8e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a52      	ldr	r2, [pc, #328]	; (800cbe0 <HAL_SD_MspInit+0x194>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	f040 809c 	bne.w	800cbd4 <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	4b4e      	ldr	r3, [pc, #312]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800caa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa4:	4a4d      	ldr	r2, [pc, #308]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800caa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800caaa:	6453      	str	r3, [r2, #68]	; 0x44
 800caac:	4b4b      	ldr	r3, [pc, #300]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800caae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cab4:	617b      	str	r3, [r7, #20]
 800cab6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cab8:	2300      	movs	r3, #0
 800caba:	613b      	str	r3, [r7, #16]
 800cabc:	4b47      	ldr	r3, [pc, #284]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800cabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac0:	4a46      	ldr	r2, [pc, #280]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800cac2:	f043 0304 	orr.w	r3, r3, #4
 800cac6:	6313      	str	r3, [r2, #48]	; 0x30
 800cac8:	4b44      	ldr	r3, [pc, #272]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800caca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cacc:	f003 0304 	and.w	r3, r3, #4
 800cad0:	613b      	str	r3, [r7, #16]
 800cad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cad4:	2300      	movs	r3, #0
 800cad6:	60fb      	str	r3, [r7, #12]
 800cad8:	4b40      	ldr	r3, [pc, #256]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800cada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cadc:	4a3f      	ldr	r2, [pc, #252]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800cade:	f043 0308 	orr.w	r3, r3, #8
 800cae2:	6313      	str	r3, [r2, #48]	; 0x30
 800cae4:	4b3d      	ldr	r3, [pc, #244]	; (800cbdc <HAL_SD_MspInit+0x190>)
 800cae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae8:	f003 0308 	and.w	r3, r3, #8
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800caf0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800caf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caf6:	2302      	movs	r3, #2
 800caf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cafe:	2303      	movs	r3, #3
 800cb00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800cb02:	230c      	movs	r3, #12
 800cb04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cb06:	f107 031c 	add.w	r3, r7, #28
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	4835      	ldr	r0, [pc, #212]	; (800cbe4 <HAL_SD_MspInit+0x198>)
 800cb0e:	f7f4 fb81 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cb12:	2304      	movs	r3, #4
 800cb14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb16:	2302      	movs	r3, #2
 800cb18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800cb22:	230c      	movs	r3, #12
 800cb24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cb26:	f107 031c 	add.w	r3, r7, #28
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	482e      	ldr	r0, [pc, #184]	; (800cbe8 <HAL_SD_MspInit+0x19c>)
 800cb2e:	f7f4 fb71 	bl	8001214 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800cb32:	2200      	movs	r2, #0
 800cb34:	2105      	movs	r1, #5
 800cb36:	203b      	movs	r0, #59	; 0x3b
 800cb38:	f7f3 ffa4 	bl	8000a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800cb3c:	203b      	movs	r0, #59	; 0x3b
 800cb3e:	f7f3 ffbd 	bl	8000abc <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 800cb42:	4b2a      	ldr	r3, [pc, #168]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb44:	4a2a      	ldr	r2, [pc, #168]	; (800cbf0 <HAL_SD_MspInit+0x1a4>)
 800cb46:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 800cb48:	4b28      	ldr	r3, [pc, #160]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cb4e:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb50:	4b26      	ldr	r3, [pc, #152]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb56:	4b25      	ldr	r3, [pc, #148]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 800cb5c:	4b23      	ldr	r3, [pc, #140]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb62:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cb64:	4b21      	ldr	r3, [pc, #132]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cb6a:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cb6c:	4b1f      	ldr	r3, [pc, #124]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cb72:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 800cb74:	4b1d      	ldr	r3, [pc, #116]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb76:	2220      	movs	r2, #32
 800cb78:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 800cb7a:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800cb80:	4b1a      	ldr	r3, [pc, #104]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb82:	2204      	movs	r2, #4
 800cb84:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800cb86:	4b19      	ldr	r3, [pc, #100]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb88:	2203      	movs	r2, #3
 800cb8a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 800cb8c:	4b17      	ldr	r3, [pc, #92]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800cb92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 800cb94:	4b15      	ldr	r3, [pc, #84]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cb9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 800cb9c:	4813      	ldr	r0, [pc, #76]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cb9e:	f7f3 ff9b 	bl	8000ad8 <HAL_DMA_Init>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 800cba8:	f001 fa52 	bl	800e050 <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a0f      	ldr	r2, [pc, #60]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cbb0:	641a      	str	r2, [r3, #64]	; 0x40
 800cbb2:	4a0e      	ldr	r2, [pc, #56]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a0c      	ldr	r2, [pc, #48]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cbbc:	63da      	str	r2, [r3, #60]	; 0x3c
 800cbbe:	4a0b      	ldr	r2, [pc, #44]	; (800cbec <HAL_SD_MspInit+0x1a0>)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2105      	movs	r1, #5
 800cbc8:	2031      	movs	r0, #49	; 0x31
 800cbca:	f7f3 ff5b 	bl	8000a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800cbce:	2031      	movs	r0, #49	; 0x31
 800cbd0:	f7f3 ff74 	bl	8000abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800cbd4:	bf00      	nop
 800cbd6:	3730      	adds	r7, #48	; 0x30
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	40023800 	.word	0x40023800
 800cbe0:	40012c00 	.word	0x40012c00
 800cbe4:	40020800 	.word	0x40020800
 800cbe8:	40020c00 	.word	0x40020c00
 800cbec:	200059ac 	.word	0x200059ac
 800cbf0:	40026458 	.word	0x40026458

0800cbf4 <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 800cbf8:	4802      	ldr	r0, [pc, #8]	; (800cc04 <DMA2_Stream3_IRQHandler+0x10>)
 800cbfa:	f7f4 f895 	bl	8000d28 <HAL_DMA_IRQHandler>
}
 800cbfe:	bf00      	nop
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	200059ac 	.word	0x200059ac

0800cc08 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 800cc0c:	4802      	ldr	r0, [pc, #8]	; (800cc18 <SDIO_IRQHandler+0x10>)
 800cc0e:	f7f4 ff77 	bl	8001b00 <HAL_SD_IRQHandler>
}
 800cc12:	bf00      	nop
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20005928 	.word	0x20005928

0800cc1c <__NVIC_GetPriorityGrouping>:
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cc20:	4b04      	ldr	r3, [pc, #16]	; (800cc34 <__NVIC_GetPriorityGrouping+0x18>)
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	0a1b      	lsrs	r3, r3, #8
 800cc26:	f003 0307 	and.w	r3, r3, #7
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	e000ed00 	.word	0xe000ed00

0800cc38 <__NVIC_EnableIRQ>:
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	db0b      	blt.n	800cc62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	f003 021f 	and.w	r2, r3, #31
 800cc50:	4907      	ldr	r1, [pc, #28]	; (800cc70 <__NVIC_EnableIRQ+0x38>)
 800cc52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc56:	095b      	lsrs	r3, r3, #5
 800cc58:	2001      	movs	r0, #1
 800cc5a:	fa00 f202 	lsl.w	r2, r0, r2
 800cc5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cc62:	bf00      	nop
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	e000e100 	.word	0xe000e100

0800cc74 <__NVIC_SetPriority>:
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	db0a      	blt.n	800cc9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	490c      	ldr	r1, [pc, #48]	; (800ccc0 <__NVIC_SetPriority+0x4c>)
 800cc8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc92:	0112      	lsls	r2, r2, #4
 800cc94:	b2d2      	uxtb	r2, r2
 800cc96:	440b      	add	r3, r1
 800cc98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc9c:	e00a      	b.n	800ccb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	4908      	ldr	r1, [pc, #32]	; (800ccc4 <__NVIC_SetPriority+0x50>)
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	f003 030f 	and.w	r3, r3, #15
 800ccaa:	3b04      	subs	r3, #4
 800ccac:	0112      	lsls	r2, r2, #4
 800ccae:	b2d2      	uxtb	r2, r2
 800ccb0:	440b      	add	r3, r1
 800ccb2:	761a      	strb	r2, [r3, #24]
}
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	e000e100 	.word	0xe000e100
 800ccc4:	e000ed00 	.word	0xe000ed00

0800ccc8 <NVIC_EncodePriority>:
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b089      	sub	sp, #36	; 0x24
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	f1c3 0307 	rsb	r3, r3, #7
 800cce2:	2b04      	cmp	r3, #4
 800cce4:	bf28      	it	cs
 800cce6:	2304      	movcs	r3, #4
 800cce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	3304      	adds	r3, #4
 800ccee:	2b06      	cmp	r3, #6
 800ccf0:	d902      	bls.n	800ccf8 <NVIC_EncodePriority+0x30>
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	3b03      	subs	r3, #3
 800ccf6:	e000      	b.n	800ccfa <NVIC_EncodePriority+0x32>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ccfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	fa02 f303 	lsl.w	r3, r2, r3
 800cd06:	43da      	mvns	r2, r3
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	401a      	ands	r2, r3
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cd10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	fa01 f303 	lsl.w	r3, r1, r3
 800cd1a:	43d9      	mvns	r1, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cd20:	4313      	orrs	r3, r2
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3724      	adds	r7, #36	; 0x24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <LL_SPI_Enable>:
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	bf00      	nop
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <LL_SPI_SetStandard>:
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	f023 0210 	bic.w	r2, r3, #16
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	431a      	orrs	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	605a      	str	r2, [r3, #4]
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f003 0302 	and.w	r3, r3, #2
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d101      	bne.n	800cd8c <LL_SPI_IsActiveFlag_TXE+0x18>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e000      	b.n	800cd8e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	330c      	adds	r3, #12
 800cdaa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	78fa      	ldrb	r2, [r7, #3]
 800cdb0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800cdb2:	bf00      	nop
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <LL_DMA_SetDataTransferDirection>:
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800cdcc:	4a0d      	ldr	r2, [pc, #52]	; (800ce04 <LL_DMA_SetDataTransferDirection+0x44>)
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	4413      	add	r3, r2
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cde0:	4908      	ldr	r1, [pc, #32]	; (800ce04 <LL_DMA_SetDataTransferDirection+0x44>)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	440b      	add	r3, r1
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	4619      	mov	r1, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	440b      	add	r3, r1
 800cdee:	4619      	mov	r1, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	600b      	str	r3, [r1, #0]
}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	0800ee90 	.word	0x0800ee90

0800ce08 <LL_DMA_SetMode>:
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800ce14:	4a0d      	ldr	r2, [pc, #52]	; (800ce4c <LL_DMA_SetMode+0x44>)
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	4413      	add	r3, r2
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	4413      	add	r3, r2
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800ce28:	4908      	ldr	r1, [pc, #32]	; (800ce4c <LL_DMA_SetMode+0x44>)
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	440b      	add	r3, r1
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	4619      	mov	r1, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	440b      	add	r3, r1
 800ce36:	4619      	mov	r1, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	600b      	str	r3, [r1, #0]
}
 800ce3e:	bf00      	nop
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	0800ee90 	.word	0x0800ee90

0800ce50 <LL_DMA_SetPeriphIncMode>:
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800ce5c:	4a0d      	ldr	r2, [pc, #52]	; (800ce94 <LL_DMA_SetPeriphIncMode+0x44>)
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	4413      	add	r3, r2
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	461a      	mov	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce70:	4908      	ldr	r1, [pc, #32]	; (800ce94 <LL_DMA_SetPeriphIncMode+0x44>)
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	440b      	add	r3, r1
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	440b      	add	r3, r1
 800ce7e:	4619      	mov	r1, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	600b      	str	r3, [r1, #0]
}
 800ce86:	bf00      	nop
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	0800ee90 	.word	0x0800ee90

0800ce98 <LL_DMA_SetMemoryIncMode>:
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800cea4:	4a0d      	ldr	r2, [pc, #52]	; (800cedc <LL_DMA_SetMemoryIncMode+0x44>)
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	4413      	add	r3, r2
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	461a      	mov	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ceb8:	4908      	ldr	r1, [pc, #32]	; (800cedc <LL_DMA_SetMemoryIncMode+0x44>)
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	440b      	add	r3, r1
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	4619      	mov	r1, r3
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	440b      	add	r3, r1
 800cec6:	4619      	mov	r1, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	600b      	str	r3, [r1, #0]
}
 800cece:	bf00      	nop
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	0800ee90 	.word	0x0800ee90

0800cee0 <LL_DMA_SetPeriphSize>:
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800ceec:	4a0d      	ldr	r2, [pc, #52]	; (800cf24 <LL_DMA_SetPeriphSize+0x44>)
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	4413      	add	r3, r2
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	4413      	add	r3, r2
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cf00:	4908      	ldr	r1, [pc, #32]	; (800cf24 <LL_DMA_SetPeriphSize+0x44>)
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	440b      	add	r3, r1
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	440b      	add	r3, r1
 800cf0e:	4619      	mov	r1, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	600b      	str	r3, [r1, #0]
}
 800cf16:	bf00      	nop
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	0800ee90 	.word	0x0800ee90

0800cf28 <LL_DMA_SetMemorySize>:
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800cf34:	4a0d      	ldr	r2, [pc, #52]	; (800cf6c <LL_DMA_SetMemorySize+0x44>)
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	4413      	add	r3, r2
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	4413      	add	r3, r2
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800cf48:	4908      	ldr	r1, [pc, #32]	; (800cf6c <LL_DMA_SetMemorySize+0x44>)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	440b      	add	r3, r1
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	4619      	mov	r1, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	440b      	add	r3, r1
 800cf56:	4619      	mov	r1, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	600b      	str	r3, [r1, #0]
}
 800cf5e:	bf00      	nop
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	0800ee90 	.word	0x0800ee90

0800cf70 <LL_DMA_SetStreamPriorityLevel>:
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800cf7c:	4a0d      	ldr	r2, [pc, #52]	; (800cfb4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	4413      	add	r3, r2
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	461a      	mov	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4413      	add	r3, r2
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf90:	4908      	ldr	r1, [pc, #32]	; (800cfb4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	440b      	add	r3, r1
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	440b      	add	r3, r1
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	600b      	str	r3, [r1, #0]
}
 800cfa6:	bf00      	nop
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	0800ee90 	.word	0x0800ee90

0800cfb8 <LL_DMA_SetChannelSelection>:
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800cfc4:	4a0d      	ldr	r2, [pc, #52]	; (800cffc <LL_DMA_SetChannelSelection+0x44>)
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	4413      	add	r3, r2
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800cfd8:	4908      	ldr	r1, [pc, #32]	; (800cffc <LL_DMA_SetChannelSelection+0x44>)
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	440b      	add	r3, r1
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	440b      	add	r3, r1
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	600b      	str	r3, [r1, #0]
}
 800cfee:	bf00      	nop
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	0800ee90 	.word	0x0800ee90

0800d000 <LL_DMA_DisableFifoMode>:
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800d00a:	4a0c      	ldr	r2, [pc, #48]	; (800d03c <LL_DMA_DisableFifoMode+0x3c>)
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	4413      	add	r3, r2
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	461a      	mov	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4413      	add	r3, r2
 800d018:	695b      	ldr	r3, [r3, #20]
 800d01a:	4908      	ldr	r1, [pc, #32]	; (800d03c <LL_DMA_DisableFifoMode+0x3c>)
 800d01c:	683a      	ldr	r2, [r7, #0]
 800d01e:	440a      	add	r2, r1
 800d020:	7812      	ldrb	r2, [r2, #0]
 800d022:	4611      	mov	r1, r2
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	440a      	add	r2, r1
 800d028:	f023 0304 	bic.w	r3, r3, #4
 800d02c:	6153      	str	r3, [r2, #20]
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	0800ee90 	.word	0x0800ee90

0800d040 <LL_APB2_GRP1_EnableClock>:
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800d048:	4b08      	ldr	r3, [pc, #32]	; (800d06c <LL_APB2_GRP1_EnableClock+0x2c>)
 800d04a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d04c:	4907      	ldr	r1, [pc, #28]	; (800d06c <LL_APB2_GRP1_EnableClock+0x2c>)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4313      	orrs	r3, r2
 800d052:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800d054:	4b05      	ldr	r3, [pc, #20]	; (800d06c <LL_APB2_GRP1_EnableClock+0x2c>)
 800d056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4013      	ands	r3, r2
 800d05c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d05e:	68fb      	ldr	r3, [r7, #12]
}
 800d060:	bf00      	nop
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	40023800 	.word	0x40023800

0800d070 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	4603      	mov	r3, r0
 800d078:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 800d07a:	f7f8 f9bd 	bl	80053f8 <vPortEnterCritical>

	switch(spi_id) {
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	2b05      	cmp	r3, #5
 800d082:	d014      	beq.n	800d0ae <spi_init+0x3e>
 800d084:	2b05      	cmp	r3, #5
 800d086:	dc19      	bgt.n	800d0bc <spi_init+0x4c>
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d002      	beq.n	800d092 <spi_init+0x22>
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	d007      	beq.n	800d0a0 <spi_init+0x30>
 800d090:	e014      	b.n	800d0bc <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 800d092:	480f      	ldr	r0, [pc, #60]	; (800d0d0 <spi_init+0x60>)
 800d094:	f000 f86c 	bl	800d170 <spi2_init>
		hal_cli_printf("spi2 init");
 800d098:	480e      	ldr	r0, [pc, #56]	; (800d0d4 <spi_init+0x64>)
 800d09a:	f7fd fc4f 	bl	800a93c <hal_cli_printf>
		break;
 800d09e:	e011      	b.n	800d0c4 <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 800d0a0:	480d      	ldr	r0, [pc, #52]	; (800d0d8 <spi_init+0x68>)
 800d0a2:	f000 f88d 	bl	800d1c0 <spi4_init>
		hal_cli_printf("spi4 init");
 800d0a6:	480d      	ldr	r0, [pc, #52]	; (800d0dc <spi_init+0x6c>)
 800d0a8:	f7fd fc48 	bl	800a93c <hal_cli_printf>
		break;
 800d0ac:	e00a      	b.n	800d0c4 <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 800d0ae:	480c      	ldr	r0, [pc, #48]	; (800d0e0 <spi_init+0x70>)
 800d0b0:	f000 f8ae 	bl	800d210 <spi5_init>
		hal_cli_printf("spi5 init");
 800d0b4:	480b      	ldr	r0, [pc, #44]	; (800d0e4 <spi_init+0x74>)
 800d0b6:	f7fd fc41 	bl	800a93c <hal_cli_printf>
		break;
 800d0ba:	e003      	b.n	800d0c4 <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 800d0bc:	480a      	ldr	r0, [pc, #40]	; (800d0e8 <spi_init+0x78>)
 800d0be:	f7fd fc3d 	bl	800a93c <hal_cli_printf>
		break;
 800d0c2:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 800d0c4:	f7f8 f9c8 	bl	8005458 <vPortExitCritical>
}
 800d0c8:	bf00      	nop
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	20005a0c 	.word	0x20005a0c
 800d0d4:	0800ecf4 	.word	0x0800ecf4
 800d0d8:	20005a20 	.word	0x20005a20
 800d0dc:	0800ed00 	.word	0x0800ed00
 800d0e0:	20005a34 	.word	0x20005a34
 800d0e4:	0800ed0c 	.word	0x0800ed0c
 800d0e8:	0800ed18 	.word	0x0800ed18

0800d0ec <hal_spi_transfer>:

bool hal_spi_transfer(spidrv_t* drv, uint8_t* data, uint32_t size, uint32_t timeout)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6178      	str	r0, [r7, #20]
 800d0f4:	6139      	str	r1, [r7, #16]
 800d0f6:	60fa      	str	r2, [r7, #12]
 800d0f8:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fd fef8 	bl	800aef4 <hal_get_delay_timer>
 800d104:	f107 0318 	add.w	r3, r7, #24
 800d108:	463a      	mov	r2, r7
 800d10a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d10e:	e883 0003 	stmia.w	r3, {r0, r1}

	while(size > 0) {
 800d112:	e023      	b.n	800d15c <hal_spi_transfer+0x70>
		LL_SPI_TransmitData8(drv->spi, *data);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	4619      	mov	r1, r3
 800d11e:	4610      	mov	r0, r2
 800d120:	f7ff fe3b 	bl	800cd9a <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 800d124:	e00c      	b.n	800d140 <hal_spi_transfer+0x54>
			if(hal_delay_timer_is_expired(&timer)) {
 800d126:	f107 0318 	add.w	r3, r7, #24
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fd ff08 	bl	800af40 <hal_delay_timer_is_expired>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d004      	beq.n	800d140 <hal_spi_transfer+0x54>
				hal_cli_printf("spi txe flag failed");
 800d136:	480d      	ldr	r0, [pc, #52]	; (800d16c <hal_spi_transfer+0x80>)
 800d138:	f7fd fc00 	bl	800a93c <hal_cli_printf>
				return false;
 800d13c:	2300      	movs	r3, #0
 800d13e:	e011      	b.n	800d164 <hal_spi_transfer+0x78>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff fe15 	bl	800cd74 <LL_SPI_IsActiveFlag_TXE>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0ea      	beq.n	800d126 <hal_spi_transfer+0x3a>
			}
		}
		size--;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	3b01      	subs	r3, #1
 800d154:	60fb      	str	r3, [r7, #12]
		data++;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	3301      	adds	r3, #1
 800d15a:	613b      	str	r3, [r7, #16]
	while(size > 0) {
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1d8      	bne.n	800d114 <hal_spi_transfer+0x28>
	}

	return true;
 800d162:	2301      	movs	r3, #1
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	0800ed2c 	.word	0x0800ed2c

0800d170 <spi2_init>:
	return true;
}


static void spi2_init(spidrv_t* drv)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 800d178:	f000 f872 	bl	800d260 <spi2_pin_conf>
	spi2_dma_init();
 800d17c:	f000 f8a6 	bl	800d2cc <spi2_dma_init>
	spi2_config();
 800d180:	f000 f8e8 	bl	800d354 <spi2_config>

	LL_SPI_Enable(SPI2);
 800d184:	480c      	ldr	r0, [pc, #48]	; (800d1b8 <spi2_init+0x48>)
 800d186:	f7ff fdd2 	bl	800cd2e <LL_SPI_Enable>

	drv->spi = SPI2;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a0a      	ldr	r2, [pc, #40]	; (800d1b8 <spi2_init+0x48>)
 800d18e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a0a      	ldr	r2, [pc, #40]	; (800d1bc <spi2_init+0x4c>)
 800d194:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2204      	movs	r2, #4
 800d19a:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	f7f8 fc1e 	bl	80059e4 <xQueueCreateMutex>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	605a      	str	r2, [r3, #4]
}
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	40003800 	.word	0x40003800
 800d1bc:	40026000 	.word	0x40026000

0800d1c0 <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 800d1c8:	f000 f902 	bl	800d3d0 <spi4_pin_conf>
	spi4_dma_init();
 800d1cc:	f000 f922 	bl	800d414 <spi4_dma_init>
	spi4_config();
 800d1d0:	f000 f9a2 	bl	800d518 <spi4_config>

	LL_SPI_Enable(SPI4);
 800d1d4:	480c      	ldr	r0, [pc, #48]	; (800d208 <spi4_init+0x48>)
 800d1d6:	f7ff fdaa 	bl	800cd2e <LL_SPI_Enable>

	drv->spi = SPI4;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4a0a      	ldr	r2, [pc, #40]	; (800d208 <spi4_init+0x48>)
 800d1de:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a0a      	ldr	r2, [pc, #40]	; (800d20c <spi4_init+0x4c>)
 800d1e4:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	f7f8 fbf6 	bl	80059e4 <xQueueCreateMutex>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	605a      	str	r2, [r3, #4]
}
 800d1fe:	bf00      	nop
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	40013400 	.word	0x40013400
 800d20c:	40026400 	.word	0x40026400

0800d210 <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 800d218:	f000 f9bc 	bl	800d594 <spi5_pin_conf>
	spi5_dma_init();
 800d21c:	f000 f9de 	bl	800d5dc <spi5_dma_init>
	spi5_config();
 800d220:	f000 fa20 	bl	800d664 <spi5_config>

	LL_SPI_Enable(SPI5);
 800d224:	480c      	ldr	r0, [pc, #48]	; (800d258 <spi5_init+0x48>)
 800d226:	f7ff fd82 	bl	800cd2e <LL_SPI_Enable>

	drv->spi = SPI5;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a0a      	ldr	r2, [pc, #40]	; (800d258 <spi5_init+0x48>)
 800d22e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a0a      	ldr	r2, [pc, #40]	; (800d25c <spi5_init+0x4c>)
 800d234:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2204      	movs	r2, #4
 800d23a:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800d242:	2001      	movs	r0, #1
 800d244:	f7f8 fbce 	bl	80059e4 <xQueueCreateMutex>
 800d248:	4602      	mov	r2, r0
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	605a      	str	r2, [r3, #4]
}
 800d24e:	bf00      	nop
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	40015000 	.word	0x40015000
 800d25c:	40026400 	.word	0x40026400

0800d260 <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d266:	463b      	mov	r3, r7
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	605a      	str	r2, [r3, #4]
 800d26e:	609a      	str	r2, [r3, #8]
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	611a      	str	r2, [r3, #16]
 800d274:	615a      	str	r2, [r3, #20]

	/**SPI2 GPIO Configuration
	PC3   ------> SPI2_MOSI
	PB10   ------> SPI2_SCK
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800d276:	2308      	movs	r3, #8
 800d278:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800d27a:	2302      	movs	r3, #2
 800d27c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800d27e:	2303      	movs	r3, #3
 800d280:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800d282:	2300      	movs	r3, #0
 800d284:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800d286:	2300      	movs	r3, #0
 800d288:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800d28a:	2305      	movs	r3, #5
 800d28c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d28e:	463b      	mov	r3, r7
 800d290:	4619      	mov	r1, r3
 800d292:	480c      	ldr	r0, [pc, #48]	; (800d2c4 <spi2_pin_conf+0x64>)
 800d294:	f7f5 fe9f 	bl	8002fd6 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800d298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d29c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800d29e:	2302      	movs	r3, #2
 800d2a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800d2ae:	2305      	movs	r3, #5
 800d2b0:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2b2:	463b      	mov	r3, r7
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4804      	ldr	r0, [pc, #16]	; (800d2c8 <spi2_pin_conf+0x68>)
 800d2b8:	f7f5 fe8d 	bl	8002fd6 <LL_GPIO_Init>
}
 800d2bc:	bf00      	nop
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	40020800 	.word	0x40020800
 800d2c8:	40020400 	.word	0x40020400

0800d2cc <spi2_dma_init>:

static void spi2_dma_init(void)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800d2d0:	f7ff fca4 	bl	800cc1c <__NVIC_GetPriorityGrouping>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	2105      	movs	r1, #5
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff fcf4 	bl	800ccc8 <NVIC_EncodePriority>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	200f      	movs	r0, #15
 800d2e6:	f7ff fcc5 	bl	800cc74 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800d2ea:	200f      	movs	r0, #15
 800d2ec:	f7ff fca4 	bl	800cc38 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_0);
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2104      	movs	r1, #4
 800d2f4:	4816      	ldr	r0, [pc, #88]	; (800d350 <spi2_dma_init+0x84>)
 800d2f6:	f7ff fe5f 	bl	800cfb8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800d2fa:	2240      	movs	r2, #64	; 0x40
 800d2fc:	2104      	movs	r1, #4
 800d2fe:	4814      	ldr	r0, [pc, #80]	; (800d350 <spi2_dma_init+0x84>)
 800d300:	f7ff fd5e 	bl	800cdc0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 800d304:	2200      	movs	r2, #0
 800d306:	2104      	movs	r1, #4
 800d308:	4811      	ldr	r0, [pc, #68]	; (800d350 <spi2_dma_init+0x84>)
 800d30a:	f7ff fe31 	bl	800cf70 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800d30e:	2200      	movs	r2, #0
 800d310:	2104      	movs	r1, #4
 800d312:	480f      	ldr	r0, [pc, #60]	; (800d350 <spi2_dma_init+0x84>)
 800d314:	f7ff fd78 	bl	800ce08 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 800d318:	2200      	movs	r2, #0
 800d31a:	2104      	movs	r1, #4
 800d31c:	480c      	ldr	r0, [pc, #48]	; (800d350 <spi2_dma_init+0x84>)
 800d31e:	f7ff fd97 	bl	800ce50 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 800d322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d326:	2104      	movs	r1, #4
 800d328:	4809      	ldr	r0, [pc, #36]	; (800d350 <spi2_dma_init+0x84>)
 800d32a:	f7ff fdb5 	bl	800ce98 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800d32e:	2200      	movs	r2, #0
 800d330:	2104      	movs	r1, #4
 800d332:	4807      	ldr	r0, [pc, #28]	; (800d350 <spi2_dma_init+0x84>)
 800d334:	f7ff fdd4 	bl	800cee0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 800d338:	2200      	movs	r2, #0
 800d33a:	2104      	movs	r1, #4
 800d33c:	4804      	ldr	r0, [pc, #16]	; (800d350 <spi2_dma_init+0x84>)
 800d33e:	f7ff fdf3 	bl	800cf28 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 800d342:	2104      	movs	r1, #4
 800d344:	4802      	ldr	r0, [pc, #8]	; (800d350 <spi2_dma_init+0x84>)
 800d346:	f7ff fe5b 	bl	800d000 <LL_DMA_DisableFifoMode>
}
 800d34a:	bf00      	nop
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	40026000 	.word	0x40026000

0800d354 <spi2_config>:

static void spi2_config(void)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800d35a:	463b      	mov	r3, r7
 800d35c:	2228      	movs	r2, #40	; 0x28
 800d35e:	2100      	movs	r1, #0
 800d360:	4618      	mov	r0, r3
 800d362:	f000 feeb 	bl	800e13c <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800d366:	f7ff fc59 	bl	800cc1c <__NVIC_GetPriorityGrouping>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2200      	movs	r2, #0
 800d36e:	2105      	movs	r1, #5
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff fca9 	bl	800ccc8 <NVIC_EncodePriority>
 800d376:	4603      	mov	r3, r0
 800d378:	4619      	mov	r1, r3
 800d37a:	2024      	movs	r0, #36	; 0x24
 800d37c:	f7ff fc7a 	bl	800cc74 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 800d380:	2024      	movs	r0, #36	; 0x24
 800d382:	f7ff fc59 	bl	800cc38 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800d386:	2300      	movs	r3, #0
 800d388:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800d38a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d38e:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800d390:	2300      	movs	r3, #0
 800d392:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800d394:	2300      	movs	r3, #0
 800d396:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800d398:	2300      	movs	r3, #0
 800d39a:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800d39c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3a0:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800d3a2:	2318      	movs	r3, #24
 800d3a4:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 800d3ae:	230a      	movs	r3, #10
 800d3b0:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 800d3b2:	463b      	mov	r3, r7
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4805      	ldr	r0, [pc, #20]	; (800d3cc <spi2_config+0x78>)
 800d3b8:	f7f6 fe55 	bl	8004066 <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800d3bc:	2100      	movs	r1, #0
 800d3be:	4803      	ldr	r0, [pc, #12]	; (800d3cc <spi2_config+0x78>)
 800d3c0:	f7ff fcc5 	bl	800cd4e <LL_SPI_SetStandard>
}
 800d3c4:	bf00      	nop
 800d3c6:	3728      	adds	r7, #40	; 0x28
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	40003800 	.word	0x40003800

0800d3d0 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
	/**SPI4 GPIO Configuration
	 PE2   ------> SPI4_SCK
	 PE5   ------> SPI4_MISO
	 E6   ------> SPI4_MOSI
	*/
	 LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3d6:	463b      	mov	r3, r7
 800d3d8:	2200      	movs	r2, #0
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	605a      	str	r2, [r3, #4]
 800d3de:	609a      	str	r2, [r3, #8]
 800d3e0:	60da      	str	r2, [r3, #12]
 800d3e2:	611a      	str	r2, [r3, #16]
 800d3e4:	615a      	str	r2, [r3, #20]

	 GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 800d3e6:	2364      	movs	r3, #100	; 0x64
 800d3e8:	603b      	str	r3, [r7, #0]
	 GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800d3fa:	2305      	movs	r3, #5
 800d3fc:	617b      	str	r3, [r7, #20]
	 LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d3fe:	463b      	mov	r3, r7
 800d400:	4619      	mov	r1, r3
 800d402:	4803      	ldr	r0, [pc, #12]	; (800d410 <spi4_pin_conf+0x40>)
 800d404:	f7f5 fde7 	bl	8002fd6 <LL_GPIO_Init>
}
 800d408:	bf00      	nop
 800d40a:	3718      	adds	r7, #24
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	40021000 	.word	0x40021000

0800d414 <spi4_dma_init>:

static void spi4_dma_init(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800d418:	f7ff fc00 	bl	800cc1c <__NVIC_GetPriorityGrouping>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2200      	movs	r2, #0
 800d420:	2105      	movs	r1, #5
 800d422:	4618      	mov	r0, r3
 800d424:	f7ff fc50 	bl	800ccc8 <NVIC_EncodePriority>
 800d428:	4603      	mov	r3, r0
 800d42a:	4619      	mov	r1, r3
 800d42c:	2038      	movs	r0, #56	; 0x38
 800d42e:	f7ff fc21 	bl	800cc74 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800d432:	2038      	movs	r0, #56	; 0x38
 800d434:	f7ff fc00 	bl	800cc38 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800d438:	f7ff fbf0 	bl	800cc1c <__NVIC_GetPriorityGrouping>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2200      	movs	r2, #0
 800d440:	2105      	movs	r1, #5
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff fc40 	bl	800ccc8 <NVIC_EncodePriority>
 800d448:	4603      	mov	r3, r0
 800d44a:	4619      	mov	r1, r3
 800d44c:	2039      	movs	r0, #57	; 0x39
 800d44e:	f7ff fc11 	bl	800cc74 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800d452:	2039      	movs	r0, #57	; 0x39
 800d454:	f7ff fbf0 	bl	800cc38 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_4);
 800d458:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d45c:	2100      	movs	r1, #0
 800d45e:	482d      	ldr	r0, [pc, #180]	; (800d514 <spi4_dma_init+0x100>)
 800d460:	f7ff fdaa 	bl	800cfb8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800d464:	2200      	movs	r2, #0
 800d466:	2100      	movs	r1, #0
 800d468:	482a      	ldr	r0, [pc, #168]	; (800d514 <spi4_dma_init+0x100>)
 800d46a:	f7ff fca9 	bl	800cdc0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 800d46e:	2200      	movs	r2, #0
 800d470:	2100      	movs	r1, #0
 800d472:	4828      	ldr	r0, [pc, #160]	; (800d514 <spi4_dma_init+0x100>)
 800d474:	f7ff fd7c 	bl	800cf70 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	4825      	ldr	r0, [pc, #148]	; (800d514 <spi4_dma_init+0x100>)
 800d47e:	f7ff fcc3 	bl	800ce08 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800d482:	2200      	movs	r2, #0
 800d484:	2100      	movs	r1, #0
 800d486:	4823      	ldr	r0, [pc, #140]	; (800d514 <spi4_dma_init+0x100>)
 800d488:	f7ff fce2 	bl	800ce50 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800d48c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d490:	2100      	movs	r1, #0
 800d492:	4820      	ldr	r0, [pc, #128]	; (800d514 <spi4_dma_init+0x100>)
 800d494:	f7ff fd00 	bl	800ce98 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 800d498:	2200      	movs	r2, #0
 800d49a:	2100      	movs	r1, #0
 800d49c:	481d      	ldr	r0, [pc, #116]	; (800d514 <spi4_dma_init+0x100>)
 800d49e:	f7ff fd1f 	bl	800cee0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	481b      	ldr	r0, [pc, #108]	; (800d514 <spi4_dma_init+0x100>)
 800d4a8:	f7ff fd3e 	bl	800cf28 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	4819      	ldr	r0, [pc, #100]	; (800d514 <spi4_dma_init+0x100>)
 800d4b0:	f7ff fda6 	bl	800d000 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 800d4b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d4b8:	2101      	movs	r1, #1
 800d4ba:	4816      	ldr	r0, [pc, #88]	; (800d514 <spi4_dma_init+0x100>)
 800d4bc:	f7ff fd7c 	bl	800cfb8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800d4c0:	2240      	movs	r2, #64	; 0x40
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	4813      	ldr	r0, [pc, #76]	; (800d514 <spi4_dma_init+0x100>)
 800d4c6:	f7ff fc7b 	bl	800cdc0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	4811      	ldr	r0, [pc, #68]	; (800d514 <spi4_dma_init+0x100>)
 800d4d0:	f7ff fd4e 	bl	800cf70 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	480e      	ldr	r0, [pc, #56]	; (800d514 <spi4_dma_init+0x100>)
 800d4da:	f7ff fc95 	bl	800ce08 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	480c      	ldr	r0, [pc, #48]	; (800d514 <spi4_dma_init+0x100>)
 800d4e4:	f7ff fcb4 	bl	800ce50 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 800d4e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4ec:	2101      	movs	r1, #1
 800d4ee:	4809      	ldr	r0, [pc, #36]	; (800d514 <spi4_dma_init+0x100>)
 800d4f0:	f7ff fcd2 	bl	800ce98 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2101      	movs	r1, #1
 800d4f8:	4806      	ldr	r0, [pc, #24]	; (800d514 <spi4_dma_init+0x100>)
 800d4fa:	f7ff fcf1 	bl	800cee0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 800d4fe:	2200      	movs	r2, #0
 800d500:	2101      	movs	r1, #1
 800d502:	4804      	ldr	r0, [pc, #16]	; (800d514 <spi4_dma_init+0x100>)
 800d504:	f7ff fd10 	bl	800cf28 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 800d508:	2101      	movs	r1, #1
 800d50a:	4802      	ldr	r0, [pc, #8]	; (800d514 <spi4_dma_init+0x100>)
 800d50c:	f7ff fd78 	bl	800d000 <LL_DMA_DisableFifoMode>
}
 800d510:	bf00      	nop
 800d512:	bd80      	pop	{r7, pc}
 800d514:	40026400 	.word	0x40026400

0800d518 <spi4_config>:

static void spi4_config(void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08a      	sub	sp, #40	; 0x28
 800d51c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800d51e:	463b      	mov	r3, r7
 800d520:	2228      	movs	r2, #40	; 0x28
 800d522:	2100      	movs	r1, #0
 800d524:	4618      	mov	r0, r3
 800d526:	f000 fe09 	bl	800e13c <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800d52a:	f7ff fb77 	bl	800cc1c <__NVIC_GetPriorityGrouping>
 800d52e:	4603      	mov	r3, r0
 800d530:	2200      	movs	r2, #0
 800d532:	2105      	movs	r1, #5
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff fbc7 	bl	800ccc8 <NVIC_EncodePriority>
 800d53a:	4603      	mov	r3, r0
 800d53c:	4619      	mov	r1, r3
 800d53e:	2054      	movs	r0, #84	; 0x54
 800d540:	f7ff fb98 	bl	800cc74 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 800d544:	2054      	movs	r0, #84	; 0x54
 800d546:	f7ff fb77 	bl	800cc38 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800d54a:	2300      	movs	r3, #0
 800d54c:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800d54e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d552:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800d554:	2300      	movs	r3, #0
 800d556:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800d558:	2302      	movs	r3, #2
 800d55a:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800d55c:	2301      	movs	r3, #1
 800d55e:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800d560:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d564:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 800d566:	2328      	movs	r3, #40	; 0x28
 800d568:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800d56a:	2300      	movs	r3, #0
 800d56c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800d56e:	2300      	movs	r3, #0
 800d570:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 800d572:	230a      	movs	r3, #10
 800d574:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 800d576:	463b      	mov	r3, r7
 800d578:	4619      	mov	r1, r3
 800d57a:	4805      	ldr	r0, [pc, #20]	; (800d590 <spi4_config+0x78>)
 800d57c:	f7f6 fd73 	bl	8004066 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 800d580:	2100      	movs	r1, #0
 800d582:	4803      	ldr	r0, [pc, #12]	; (800d590 <spi4_config+0x78>)
 800d584:	f7ff fbe3 	bl	800cd4e <LL_SPI_SetStandard>
}
 800d588:	bf00      	nop
 800d58a:	3728      	adds	r7, #40	; 0x28
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	40013400 	.word	0x40013400

0800d594 <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d59a:	463b      	mov	r3, r7
 800d59c:	2200      	movs	r2, #0
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	605a      	str	r2, [r3, #4]
 800d5a2:	609a      	str	r2, [r3, #8]
 800d5a4:	60da      	str	r2, [r3, #12]
 800d5a6:	611a      	str	r2, [r3, #16]
 800d5a8:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800d5aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 800d5ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800d5c0:	2305      	movs	r3, #5
 800d5c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d5c4:	463b      	mov	r3, r7
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4803      	ldr	r0, [pc, #12]	; (800d5d8 <spi5_pin_conf+0x44>)
 800d5ca:	f7f5 fd04 	bl	8002fd6 <LL_GPIO_Init>
}
 800d5ce:	bf00      	nop
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	40021400 	.word	0x40021400

0800d5dc <spi5_dma_init>:

static void spi5_dma_init(void)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800d5e0:	f7ff fb1c 	bl	800cc1c <__NVIC_GetPriorityGrouping>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	2105      	movs	r1, #5
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff fb6c 	bl	800ccc8 <NVIC_EncodePriority>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	203c      	movs	r0, #60	; 0x3c
 800d5f6:	f7ff fb3d 	bl	800cc74 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800d5fa:	203c      	movs	r0, #60	; 0x3c
 800d5fc:	f7ff fb1c 	bl	800cc38 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 800d600:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d604:	2104      	movs	r1, #4
 800d606:	4816      	ldr	r0, [pc, #88]	; (800d660 <spi5_dma_init+0x84>)
 800d608:	f7ff fcd6 	bl	800cfb8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800d60c:	2240      	movs	r2, #64	; 0x40
 800d60e:	2104      	movs	r1, #4
 800d610:	4813      	ldr	r0, [pc, #76]	; (800d660 <spi5_dma_init+0x84>)
 800d612:	f7ff fbd5 	bl	800cdc0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 800d616:	2200      	movs	r2, #0
 800d618:	2104      	movs	r1, #4
 800d61a:	4811      	ldr	r0, [pc, #68]	; (800d660 <spi5_dma_init+0x84>)
 800d61c:	f7ff fca8 	bl	800cf70 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800d620:	2200      	movs	r2, #0
 800d622:	2104      	movs	r1, #4
 800d624:	480e      	ldr	r0, [pc, #56]	; (800d660 <spi5_dma_init+0x84>)
 800d626:	f7ff fbef 	bl	800ce08 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 800d62a:	2200      	movs	r2, #0
 800d62c:	2104      	movs	r1, #4
 800d62e:	480c      	ldr	r0, [pc, #48]	; (800d660 <spi5_dma_init+0x84>)
 800d630:	f7ff fc0e 	bl	800ce50 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 800d634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d638:	2104      	movs	r1, #4
 800d63a:	4809      	ldr	r0, [pc, #36]	; (800d660 <spi5_dma_init+0x84>)
 800d63c:	f7ff fc2c 	bl	800ce98 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800d640:	2200      	movs	r2, #0
 800d642:	2104      	movs	r1, #4
 800d644:	4806      	ldr	r0, [pc, #24]	; (800d660 <spi5_dma_init+0x84>)
 800d646:	f7ff fc4b 	bl	800cee0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 800d64a:	2200      	movs	r2, #0
 800d64c:	2104      	movs	r1, #4
 800d64e:	4804      	ldr	r0, [pc, #16]	; (800d660 <spi5_dma_init+0x84>)
 800d650:	f7ff fc6a 	bl	800cf28 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 800d654:	2104      	movs	r1, #4
 800d656:	4802      	ldr	r0, [pc, #8]	; (800d660 <spi5_dma_init+0x84>)
 800d658:	f7ff fcd2 	bl	800d000 <LL_DMA_DisableFifoMode>
}
 800d65c:	bf00      	nop
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	40026400 	.word	0x40026400

0800d664 <spi5_config>:

static void spi5_config(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08a      	sub	sp, #40	; 0x28
 800d668:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800d66a:	463b      	mov	r3, r7
 800d66c:	2228      	movs	r2, #40	; 0x28
 800d66e:	2100      	movs	r1, #0
 800d670:	4618      	mov	r0, r3
 800d672:	f000 fd63 	bl	800e13c <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 800d676:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d67a:	f7ff fce1 	bl	800d040 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800d67e:	f7ff facd 	bl	800cc1c <__NVIC_GetPriorityGrouping>
 800d682:	4603      	mov	r3, r0
 800d684:	2200      	movs	r2, #0
 800d686:	2105      	movs	r1, #5
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff fb1d 	bl	800ccc8 <NVIC_EncodePriority>
 800d68e:	4603      	mov	r3, r0
 800d690:	4619      	mov	r1, r3
 800d692:	2055      	movs	r0, #85	; 0x55
 800d694:	f7ff faee 	bl	800cc74 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 800d698:	2055      	movs	r0, #85	; 0x55
 800d69a:	f7ff facd 	bl	800cc38 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800d6a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d6a6:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800d6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6b8:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800d6ba:	2318      	movs	r3, #24
 800d6bc:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 800d6c6:	230a      	movs	r3, #10
 800d6c8:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 800d6ca:	463b      	mov	r3, r7
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4805      	ldr	r0, [pc, #20]	; (800d6e4 <spi5_config+0x80>)
 800d6d0:	f7f6 fcc9 	bl	8004066 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	4803      	ldr	r0, [pc, #12]	; (800d6e4 <spi5_config+0x80>)
 800d6d8:	f7ff fb39 	bl	800cd4e <LL_SPI_SetStandard>
}
 800d6dc:	bf00      	nop
 800d6de:	3728      	adds	r7, #40	; 0x28
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	40015000 	.word	0x40015000

0800d6e8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	af00      	add	r7, sp, #0

}
 800d6ec:	bf00      	nop
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 800d6f6:	b480      	push	{r7}
 800d6f8:	af00      	add	r7, sp, #0

}
 800d6fa:	bf00      	nop
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 800d704:	b480      	push	{r7}
 800d706:	af00      	add	r7, sp, #0

}
 800d708:	bf00      	nop
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 800d712:	b480      	push	{r7}
 800d714:	af00      	add	r7, sp, #0

}
 800d716:	bf00      	nop
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 800d720:	b480      	push	{r7}
 800d722:	af00      	add	r7, sp, #0

}
 800d724:	bf00      	nop
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 800d72e:	b480      	push	{r7}
 800d730:	af00      	add	r7, sp, #0

}
 800d732:	bf00      	nop
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 800d73c:	b480      	push	{r7}
 800d73e:	af00      	add	r7, sp, #0

}
 800d740:	bf00      	nop
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
	...

0800d74c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d752:	2300      	movs	r3, #0
 800d754:	607b      	str	r3, [r7, #4]
 800d756:	4b12      	ldr	r3, [pc, #72]	; (800d7a0 <HAL_MspInit+0x54>)
 800d758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d75a:	4a11      	ldr	r2, [pc, #68]	; (800d7a0 <HAL_MspInit+0x54>)
 800d75c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d760:	6453      	str	r3, [r2, #68]	; 0x44
 800d762:	4b0f      	ldr	r3, [pc, #60]	; (800d7a0 <HAL_MspInit+0x54>)
 800d764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d76a:	607b      	str	r3, [r7, #4]
 800d76c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d76e:	2300      	movs	r3, #0
 800d770:	603b      	str	r3, [r7, #0]
 800d772:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <HAL_MspInit+0x54>)
 800d774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d776:	4a0a      	ldr	r2, [pc, #40]	; (800d7a0 <HAL_MspInit+0x54>)
 800d778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d77c:	6413      	str	r3, [r2, #64]	; 0x40
 800d77e:	4b08      	ldr	r3, [pc, #32]	; (800d7a0 <HAL_MspInit+0x54>)
 800d780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d78a:	2200      	movs	r2, #0
 800d78c:	210f      	movs	r1, #15
 800d78e:	f06f 0001 	mvn.w	r0, #1
 800d792:	f7f3 f977 	bl	8000a84 <HAL_NVIC_SetPriority>
}
 800d796:	bf00      	nop
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	40023800 	.word	0x40023800

0800d7a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b08e      	sub	sp, #56	; 0x38
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	4b33      	ldr	r3, [pc, #204]	; (800d888 <HAL_InitTick+0xe4>)
 800d7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7bc:	4a32      	ldr	r2, [pc, #200]	; (800d888 <HAL_InitTick+0xe4>)
 800d7be:	f043 0310 	orr.w	r3, r3, #16
 800d7c2:	6413      	str	r3, [r2, #64]	; 0x40
 800d7c4:	4b30      	ldr	r3, [pc, #192]	; (800d888 <HAL_InitTick+0xe4>)
 800d7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c8:	f003 0310 	and.w	r3, r3, #16
 800d7cc:	60fb      	str	r3, [r7, #12]
 800d7ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d7d0:	f107 0210 	add.w	r2, r7, #16
 800d7d4:	f107 0314 	add.w	r3, r7, #20
 800d7d8:	4611      	mov	r1, r2
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f3 fee6 	bl	80015ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d103      	bne.n	800d7f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d7ea:	f7f3 fecb 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 800d7ee:	6378      	str	r0, [r7, #52]	; 0x34
 800d7f0:	e004      	b.n	800d7fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d7f2:	f7f3 fec7 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7fe:	4a23      	ldr	r2, [pc, #140]	; (800d88c <HAL_InitTick+0xe8>)
 800d800:	fba2 2303 	umull	r2, r3, r2, r3
 800d804:	0c9b      	lsrs	r3, r3, #18
 800d806:	3b01      	subs	r3, #1
 800d808:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800d80a:	4b21      	ldr	r3, [pc, #132]	; (800d890 <HAL_InitTick+0xec>)
 800d80c:	4a21      	ldr	r2, [pc, #132]	; (800d894 <HAL_InitTick+0xf0>)
 800d80e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800d810:	4b1f      	ldr	r3, [pc, #124]	; (800d890 <HAL_InitTick+0xec>)
 800d812:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d816:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800d818:	4a1d      	ldr	r2, [pc, #116]	; (800d890 <HAL_InitTick+0xec>)
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800d81e:	4b1c      	ldr	r3, [pc, #112]	; (800d890 <HAL_InitTick+0xec>)
 800d820:	2200      	movs	r2, #0
 800d822:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d824:	4b1a      	ldr	r3, [pc, #104]	; (800d890 <HAL_InitTick+0xec>)
 800d826:	2200      	movs	r2, #0
 800d828:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d82a:	4b19      	ldr	r3, [pc, #100]	; (800d890 <HAL_InitTick+0xec>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800d830:	4817      	ldr	r0, [pc, #92]	; (800d890 <HAL_InitTick+0xec>)
 800d832:	f7f5 f81d 	bl	8002870 <HAL_TIM_Base_Init>
 800d836:	4603      	mov	r3, r0
 800d838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800d83c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d840:	2b00      	cmp	r3, #0
 800d842:	d11b      	bne.n	800d87c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800d844:	4812      	ldr	r0, [pc, #72]	; (800d890 <HAL_InitTick+0xec>)
 800d846:	f7f5 f86d 	bl	8002924 <HAL_TIM_Base_Start_IT>
 800d84a:	4603      	mov	r3, r0
 800d84c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800d850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d854:	2b00      	cmp	r3, #0
 800d856:	d111      	bne.n	800d87c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d858:	2036      	movs	r0, #54	; 0x36
 800d85a:	f7f3 f92f 	bl	8000abc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b0f      	cmp	r3, #15
 800d862:	d808      	bhi.n	800d876 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800d864:	2200      	movs	r2, #0
 800d866:	6879      	ldr	r1, [r7, #4]
 800d868:	2036      	movs	r0, #54	; 0x36
 800d86a:	f7f3 f90b 	bl	8000a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d86e:	4a0a      	ldr	r2, [pc, #40]	; (800d898 <HAL_InitTick+0xf4>)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6013      	str	r3, [r2, #0]
 800d874:	e002      	b.n	800d87c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800d87c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800d880:	4618      	mov	r0, r3
 800d882:	3738      	adds	r7, #56	; 0x38
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	40023800 	.word	0x40023800
 800d88c:	431bde83 	.word	0x431bde83
 800d890:	20005a48 	.word	0x20005a48
 800d894:	40001000 	.word	0x40001000
 800d898:	20000000 	.word	0x20000000

0800d89c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d89c:	b480      	push	{r7}
 800d89e:	af00      	add	r7, sp, #0
  while (1)
 800d8a0:	e7fe      	b.n	800d8a0 <NMI_Handler+0x4>

0800d8a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	af00      	add	r7, sp, #0
  while (1)
 800d8a6:	e7fe      	b.n	800d8a6 <HardFault_Handler+0x4>

0800d8a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	af00      	add	r7, sp, #0
  while (1)
 800d8ac:	e7fe      	b.n	800d8ac <MemManage_Handler+0x4>

0800d8ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	af00      	add	r7, sp, #0
  while (1)
 800d8b2:	e7fe      	b.n	800d8b2 <BusFault_Handler+0x4>

0800d8b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	af00      	add	r7, sp, #0
  while (1)
 800d8b8:	e7fe      	b.n	800d8b8 <UsageFault_Handler+0x4>

0800d8ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d8ba:	b480      	push	{r7}
 800d8bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d8be:	bf00      	nop
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d8cc:	4802      	ldr	r0, [pc, #8]	; (800d8d8 <TIM6_DAC_IRQHandler+0x10>)
 800d8ce:	f7f5 f899 	bl	8002a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d8d2:	bf00      	nop
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20005a48 	.word	0x20005a48

0800d8dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a04      	ldr	r2, [pc, #16]	; (800d8fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d101      	bne.n	800d8f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800d8ee:	f7f2 ffcd 	bl	800088c <HAL_IncTick>
  }
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	40001000 	.word	0x40001000

0800d900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d900:	b480      	push	{r7}
 800d902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d904:	4b06      	ldr	r3, [pc, #24]	; (800d920 <SystemInit+0x20>)
 800d906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d90a:	4a05      	ldr	r2, [pc, #20]	; (800d920 <SystemInit+0x20>)
 800d90c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d914:	bf00      	nop
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	e000ed00 	.word	0xe000ed00

0800d924 <__NVIC_GetPriorityGrouping>:
{
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d928:	4b04      	ldr	r3, [pc, #16]	; (800d93c <__NVIC_GetPriorityGrouping+0x18>)
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	0a1b      	lsrs	r3, r3, #8
 800d92e:	f003 0307 	and.w	r3, r3, #7
}
 800d932:	4618      	mov	r0, r3
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	e000ed00 	.word	0xe000ed00

0800d940 <__NVIC_EnableIRQ>:
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d94a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	db0b      	blt.n	800d96a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	f003 021f 	and.w	r2, r3, #31
 800d958:	4907      	ldr	r1, [pc, #28]	; (800d978 <__NVIC_EnableIRQ+0x38>)
 800d95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d95e:	095b      	lsrs	r3, r3, #5
 800d960:	2001      	movs	r0, #1
 800d962:	fa00 f202 	lsl.w	r2, r0, r2
 800d966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d96a:	bf00      	nop
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	e000e100 	.word	0xe000e100

0800d97c <__NVIC_SetPriority>:
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	6039      	str	r1, [r7, #0]
 800d986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	db0a      	blt.n	800d9a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	b2da      	uxtb	r2, r3
 800d994:	490c      	ldr	r1, [pc, #48]	; (800d9c8 <__NVIC_SetPriority+0x4c>)
 800d996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d99a:	0112      	lsls	r2, r2, #4
 800d99c:	b2d2      	uxtb	r2, r2
 800d99e:	440b      	add	r3, r1
 800d9a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d9a4:	e00a      	b.n	800d9bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	4908      	ldr	r1, [pc, #32]	; (800d9cc <__NVIC_SetPriority+0x50>)
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	f003 030f 	and.w	r3, r3, #15
 800d9b2:	3b04      	subs	r3, #4
 800d9b4:	0112      	lsls	r2, r2, #4
 800d9b6:	b2d2      	uxtb	r2, r2
 800d9b8:	440b      	add	r3, r1
 800d9ba:	761a      	strb	r2, [r3, #24]
}
 800d9bc:	bf00      	nop
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	e000e100 	.word	0xe000e100
 800d9cc:	e000ed00 	.word	0xe000ed00

0800d9d0 <NVIC_EncodePriority>:
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b089      	sub	sp, #36	; 0x24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	f1c3 0307 	rsb	r3, r3, #7
 800d9ea:	2b04      	cmp	r3, #4
 800d9ec:	bf28      	it	cs
 800d9ee:	2304      	movcs	r3, #4
 800d9f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	2b06      	cmp	r3, #6
 800d9f8:	d902      	bls.n	800da00 <NVIC_EncodePriority+0x30>
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	3b03      	subs	r3, #3
 800d9fe:	e000      	b.n	800da02 <NVIC_EncodePriority+0x32>
 800da00:	2300      	movs	r3, #0
 800da02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	fa02 f303 	lsl.w	r3, r2, r3
 800da0e:	43da      	mvns	r2, r3
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	401a      	ands	r2, r3
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800da18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	fa01 f303 	lsl.w	r3, r1, r3
 800da22:	43d9      	mvns	r1, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da28:	4313      	orrs	r3, r2
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3724      	adds	r7, #36	; 0x24
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <LL_USART_Enable>:
{
 800da36:	b480      	push	{r7}
 800da38:	b083      	sub	sp, #12
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	60da      	str	r2, [r3, #12]
}
 800da4a:	bf00      	nop
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr

0800da56 <LL_USART_IsEnabled>:
{
 800da56:	b480      	push	{r7}
 800da58:	b083      	sub	sp, #12
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da6a:	bf0c      	ite	eq
 800da6c:	2301      	moveq	r3, #1
 800da6e:	2300      	movne	r3, #0
 800da70:	b2db      	uxtb	r3, r3
}
 800da72:	4618      	mov	r0, r3
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <LL_USART_ConfigAsyncMode>:
{
 800da7e:	b480      	push	{r7}
 800da80:	b083      	sub	sp, #12
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	691b      	ldr	r3, [r3, #16]
 800da8a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	615a      	str	r2, [r3, #20]
}
 800da9e:	bf00      	nop
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <LL_USART_IsActiveFlag_IDLE>:
{
 800daaa:	b480      	push	{r7}
 800daac:	b083      	sub	sp, #12
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 0310 	and.w	r3, r3, #16
 800daba:	2b10      	cmp	r3, #16
 800dabc:	bf0c      	ite	eq
 800dabe:	2301      	moveq	r3, #1
 800dac0:	2300      	movne	r3, #0
 800dac2:	b2db      	uxtb	r3, r3
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <LL_USART_IsActiveFlag_TXE>:
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae0:	2b80      	cmp	r3, #128	; 0x80
 800dae2:	bf0c      	ite	eq
 800dae4:	2301      	moveq	r3, #1
 800dae6:	2300      	movne	r3, #0
 800dae8:	b2db      	uxtb	r3, r3
}
 800daea:	4618      	mov	r0, r3
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <LL_USART_ClearFlag_IDLE>:
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800db04:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800db0c:	68fb      	ldr	r3, [r7, #12]
}
 800db0e:	bf00      	nop
 800db10:	3714      	adds	r7, #20
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
 800db22:	460b      	mov	r3, r1
 800db24:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800db26:	78fa      	ldrb	r2, [r7, #3]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	605a      	str	r2, [r3, #4]
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <LL_DMA_SetDataTransferDirection>:
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800db44:	4a0d      	ldr	r2, [pc, #52]	; (800db7c <LL_DMA_SetDataTransferDirection+0x44>)
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	4413      	add	r3, r2
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	461a      	mov	r2, r3
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4413      	add	r3, r2
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800db58:	4908      	ldr	r1, [pc, #32]	; (800db7c <LL_DMA_SetDataTransferDirection+0x44>)
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	440b      	add	r3, r1
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	4619      	mov	r1, r3
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	440b      	add	r3, r1
 800db66:	4619      	mov	r1, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	600b      	str	r3, [r1, #0]
}
 800db6e:	bf00      	nop
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	0800eeb0 	.word	0x0800eeb0

0800db80 <LL_DMA_SetMode>:
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800db8c:	4a0d      	ldr	r2, [pc, #52]	; (800dbc4 <LL_DMA_SetMode+0x44>)
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	4413      	add	r3, r2
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	461a      	mov	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	4413      	add	r3, r2
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800dba0:	4908      	ldr	r1, [pc, #32]	; (800dbc4 <LL_DMA_SetMode+0x44>)
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	440b      	add	r3, r1
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	440b      	add	r3, r1
 800dbae:	4619      	mov	r1, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	600b      	str	r3, [r1, #0]
}
 800dbb6:	bf00      	nop
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	0800eeb0 	.word	0x0800eeb0

0800dbc8 <LL_DMA_SetPeriphIncMode>:
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800dbd4:	4a0d      	ldr	r2, [pc, #52]	; (800dc0c <LL_DMA_SetPeriphIncMode+0x44>)
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	4413      	add	r3, r2
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dbe8:	4908      	ldr	r1, [pc, #32]	; (800dc0c <LL_DMA_SetPeriphIncMode+0x44>)
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	440b      	add	r3, r1
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	440b      	add	r3, r1
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	600b      	str	r3, [r1, #0]
}
 800dbfe:	bf00      	nop
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	0800eeb0 	.word	0x0800eeb0

0800dc10 <LL_DMA_SetMemoryIncMode>:
{
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800dc1c:	4a0d      	ldr	r2, [pc, #52]	; (800dc54 <LL_DMA_SetMemoryIncMode+0x44>)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	4413      	add	r3, r2
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	461a      	mov	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	4413      	add	r3, r2
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc30:	4908      	ldr	r1, [pc, #32]	; (800dc54 <LL_DMA_SetMemoryIncMode+0x44>)
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	440b      	add	r3, r1
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	440b      	add	r3, r1
 800dc3e:	4619      	mov	r1, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	600b      	str	r3, [r1, #0]
}
 800dc46:	bf00      	nop
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	0800eeb0 	.word	0x0800eeb0

0800dc58 <LL_DMA_SetPeriphSize>:
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800dc64:	4a0d      	ldr	r2, [pc, #52]	; (800dc9c <LL_DMA_SetPeriphSize+0x44>)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	4413      	add	r3, r2
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	4413      	add	r3, r2
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc78:	4908      	ldr	r1, [pc, #32]	; (800dc9c <LL_DMA_SetPeriphSize+0x44>)
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	440b      	add	r3, r1
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	4619      	mov	r1, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	440b      	add	r3, r1
 800dc86:	4619      	mov	r1, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	600b      	str	r3, [r1, #0]
}
 800dc8e:	bf00      	nop
 800dc90:	3714      	adds	r7, #20
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	0800eeb0 	.word	0x0800eeb0

0800dca0 <LL_DMA_SetMemorySize>:
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800dcac:	4a0d      	ldr	r2, [pc, #52]	; (800dce4 <LL_DMA_SetMemorySize+0x44>)
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	4413      	add	r3, r2
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800dcc0:	4908      	ldr	r1, [pc, #32]	; (800dce4 <LL_DMA_SetMemorySize+0x44>)
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	440b      	add	r3, r1
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	440b      	add	r3, r1
 800dcce:	4619      	mov	r1, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	600b      	str	r3, [r1, #0]
}
 800dcd6:	bf00      	nop
 800dcd8:	3714      	adds	r7, #20
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop
 800dce4:	0800eeb0 	.word	0x0800eeb0

0800dce8 <LL_DMA_SetStreamPriorityLevel>:
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800dcf4:	4a0d      	ldr	r2, [pc, #52]	; (800dd2c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	4413      	add	r3, r2
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dd08:	4908      	ldr	r1, [pc, #32]	; (800dd2c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	440b      	add	r3, r1
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	4619      	mov	r1, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	440b      	add	r3, r1
 800dd16:	4619      	mov	r1, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	600b      	str	r3, [r1, #0]
}
 800dd1e:	bf00      	nop
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	0800eeb0 	.word	0x0800eeb0

0800dd30 <LL_DMA_GetDataLength>:
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 800dd3a:	4a07      	ldr	r2, [pc, #28]	; (800dd58 <LL_DMA_GetDataLength+0x28>)
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	4413      	add	r3, r2
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4413      	add	r3, r2
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	b29b      	uxth	r3, r3
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	0800eeb0 	.word	0x0800eeb0

0800dd5c <LL_DMA_SetChannelSelection>:
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800dd68:	4a0d      	ldr	r2, [pc, #52]	; (800dda0 <LL_DMA_SetChannelSelection+0x44>)
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	461a      	mov	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800dd7c:	4908      	ldr	r1, [pc, #32]	; (800dda0 <LL_DMA_SetChannelSelection+0x44>)
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	440b      	add	r3, r1
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	4619      	mov	r1, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	440b      	add	r3, r1
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	600b      	str	r3, [r1, #0]
}
 800dd92:	bf00      	nop
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	0800eeb0 	.word	0x0800eeb0

0800dda4 <LL_DMA_DisableFifoMode>:
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800ddae:	4a0c      	ldr	r2, [pc, #48]	; (800dde0 <LL_DMA_DisableFifoMode+0x3c>)
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4413      	add	r3, r2
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	4908      	ldr	r1, [pc, #32]	; (800dde0 <LL_DMA_DisableFifoMode+0x3c>)
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	440a      	add	r2, r1
 800ddc4:	7812      	ldrb	r2, [r2, #0]
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	440a      	add	r2, r1
 800ddcc:	f023 0304 	bic.w	r3, r3, #4
 800ddd0:	6153      	str	r3, [r2, #20]
}
 800ddd2:	bf00      	nop
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	0800eeb0 	.word	0x0800eeb0

0800dde4 <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08c      	sub	sp, #48	; 0x30
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 800ddec:	2307      	movs	r3, #7
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	2103      	movs	r1, #3
 800ddf6:	4853      	ldr	r0, [pc, #332]	; (800df44 <hal_uart1_init+0x160>)
 800ddf8:	f7fd fae4 	bl	800b3c4 <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 800ddfc:	2307      	movs	r3, #7
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	2303      	movs	r3, #3
 800de02:	2200      	movs	r2, #0
 800de04:	2103      	movs	r1, #3
 800de06:	4850      	ldr	r0, [pc, #320]	; (800df48 <hal_uart1_init+0x164>)
 800de08:	f7fd fadc 	bl	800b3c4 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800de0c:	2200      	movs	r2, #0
 800de0e:	2105      	movs	r1, #5
 800de10:	203a      	movs	r0, #58	; 0x3a
 800de12:	f7f2 fe37 	bl	8000a84 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800de16:	203a      	movs	r0, #58	; 0x3a
 800de18:	f7f2 fe50 	bl	8000abc <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800de1c:	2200      	movs	r2, #0
 800de1e:	2105      	movs	r1, #5
 800de20:	2046      	movs	r0, #70	; 0x46
 800de22:	f7f2 fe2f 	bl	8000a84 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800de26:	2046      	movs	r0, #70	; 0x46
 800de28:	f7f2 fe48 	bl	8000abc <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 800de2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800de30:	2102      	movs	r1, #2
 800de32:	4846      	ldr	r0, [pc, #280]	; (800df4c <hal_uart1_init+0x168>)
 800de34:	f7ff ff92 	bl	800dd5c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800de38:	2200      	movs	r2, #0
 800de3a:	2102      	movs	r1, #2
 800de3c:	4843      	ldr	r0, [pc, #268]	; (800df4c <hal_uart1_init+0x168>)
 800de3e:	f7ff fe7b 	bl	800db38 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 800de42:	2200      	movs	r2, #0
 800de44:	2102      	movs	r1, #2
 800de46:	4841      	ldr	r0, [pc, #260]	; (800df4c <hal_uart1_init+0x168>)
 800de48:	f7ff ff4e 	bl	800dce8 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 800de4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de50:	2102      	movs	r1, #2
 800de52:	483e      	ldr	r0, [pc, #248]	; (800df4c <hal_uart1_init+0x168>)
 800de54:	f7ff fe94 	bl	800db80 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800de58:	2200      	movs	r2, #0
 800de5a:	2102      	movs	r1, #2
 800de5c:	483b      	ldr	r0, [pc, #236]	; (800df4c <hal_uart1_init+0x168>)
 800de5e:	f7ff feb3 	bl	800dbc8 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800de62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de66:	2102      	movs	r1, #2
 800de68:	4838      	ldr	r0, [pc, #224]	; (800df4c <hal_uart1_init+0x168>)
 800de6a:	f7ff fed1 	bl	800dc10 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800de6e:	2200      	movs	r2, #0
 800de70:	2102      	movs	r1, #2
 800de72:	4836      	ldr	r0, [pc, #216]	; (800df4c <hal_uart1_init+0x168>)
 800de74:	f7ff fef0 	bl	800dc58 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800de78:	2200      	movs	r2, #0
 800de7a:	2102      	movs	r1, #2
 800de7c:	4833      	ldr	r0, [pc, #204]	; (800df4c <hal_uart1_init+0x168>)
 800de7e:	f7ff ff0f 	bl	800dca0 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 800de82:	2102      	movs	r1, #2
 800de84:	4831      	ldr	r0, [pc, #196]	; (800df4c <hal_uart1_init+0x168>)
 800de86:	f7ff ff8d 	bl	800dda4 <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 800de8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800de8e:	2107      	movs	r1, #7
 800de90:	482e      	ldr	r0, [pc, #184]	; (800df4c <hal_uart1_init+0x168>)
 800de92:	f7ff ff63 	bl	800dd5c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800de96:	2240      	movs	r2, #64	; 0x40
 800de98:	2107      	movs	r1, #7
 800de9a:	482c      	ldr	r0, [pc, #176]	; (800df4c <hal_uart1_init+0x168>)
 800de9c:	f7ff fe4c 	bl	800db38 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800dea0:	2200      	movs	r2, #0
 800dea2:	2107      	movs	r1, #7
 800dea4:	4829      	ldr	r0, [pc, #164]	; (800df4c <hal_uart1_init+0x168>)
 800dea6:	f7ff ff1f 	bl	800dce8 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 800deaa:	2200      	movs	r2, #0
 800deac:	2107      	movs	r1, #7
 800deae:	4827      	ldr	r0, [pc, #156]	; (800df4c <hal_uart1_init+0x168>)
 800deb0:	f7ff fe66 	bl	800db80 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800deb4:	2200      	movs	r2, #0
 800deb6:	2107      	movs	r1, #7
 800deb8:	4824      	ldr	r0, [pc, #144]	; (800df4c <hal_uart1_init+0x168>)
 800deba:	f7ff fe85 	bl	800dbc8 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800debe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dec2:	2107      	movs	r1, #7
 800dec4:	4821      	ldr	r0, [pc, #132]	; (800df4c <hal_uart1_init+0x168>)
 800dec6:	f7ff fea3 	bl	800dc10 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800deca:	2200      	movs	r2, #0
 800decc:	2107      	movs	r1, #7
 800dece:	481f      	ldr	r0, [pc, #124]	; (800df4c <hal_uart1_init+0x168>)
 800ded0:	f7ff fec2 	bl	800dc58 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800ded4:	2200      	movs	r2, #0
 800ded6:	2107      	movs	r1, #7
 800ded8:	481c      	ldr	r0, [pc, #112]	; (800df4c <hal_uart1_init+0x168>)
 800deda:	f7ff fee1 	bl	800dca0 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 800dede:	2107      	movs	r1, #7
 800dee0:	481a      	ldr	r0, [pc, #104]	; (800df4c <hal_uart1_init+0x168>)
 800dee2:	f7ff ff5f 	bl	800dda4 <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800deea:	2300      	movs	r3, #0
 800deec:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800deee:	2300      	movs	r3, #0
 800def0:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800def2:	2300      	movs	r3, #0
 800def4:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800def6:	230c      	movs	r3, #12
 800def8:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800defa:	2300      	movs	r3, #0
 800defc:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800defe:	2300      	movs	r3, #0
 800df00:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 800df02:	f107 030c 	add.w	r3, r7, #12
 800df06:	4619      	mov	r1, r3
 800df08:	4811      	ldr	r0, [pc, #68]	; (800df50 <hal_uart1_init+0x16c>)
 800df0a:	f7f6 fb65 	bl	80045d8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 800df0e:	4810      	ldr	r0, [pc, #64]	; (800df50 <hal_uart1_init+0x16c>)
 800df10:	f7ff fdb5 	bl	800da7e <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 800df14:	480e      	ldr	r0, [pc, #56]	; (800df50 <hal_uart1_init+0x16c>)
 800df16:	f7ff fd8e 	bl	800da36 <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800df1a:	f7ff fd03 	bl	800d924 <__NVIC_GetPriorityGrouping>
 800df1e:	4603      	mov	r3, r0
 800df20:	2200      	movs	r2, #0
 800df22:	2105      	movs	r1, #5
 800df24:	4618      	mov	r0, r3
 800df26:	f7ff fd53 	bl	800d9d0 <NVIC_EncodePriority>
 800df2a:	4603      	mov	r3, r0
 800df2c:	4619      	mov	r1, r3
 800df2e:	2025      	movs	r0, #37	; 0x25
 800df30:	f7ff fd24 	bl	800d97c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800df34:	2025      	movs	r0, #37	; 0x25
 800df36:	f7ff fd03 	bl	800d940 <__NVIC_EnableIRQ>
}
 800df3a:	bf00      	nop
 800df3c:	3728      	adds	r7, #40	; 0x28
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	0800ee58 	.word	0x0800ee58
 800df48:	0800ee60 	.word	0x0800ee60
 800df4c:	40026400 	.word	0x40026400
 800df50:	40011000 	.word	0x40011000

0800df54 <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	4603      	mov	r3, r0
 800df5c:	6039      	str	r1, [r7, #0]
 800df5e:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d102      	bne.n	800df6c <hal_uart_init+0x18>
		hal_uart1_init(baud);
 800df66:	6838      	ldr	r0, [r7, #0]
 800df68:	f7ff ff3c 	bl	800dde4 <hal_uart1_init>
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	4603      	mov	r3, r0
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
 800df80:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 800df82:	7bfb      	ldrb	r3, [r7, #15]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d11e      	bne.n	800dfc6 <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 800df88:	4810      	ldr	r0, [pc, #64]	; (800dfcc <hal_uart_transfer+0x58>)
 800df8a:	f7ff fd64 	bl	800da56 <LL_USART_IsEnabled>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d017      	beq.n	800dfc4 <hal_uart_transfer+0x50>

        while(size > 0) {
 800df94:	e012      	b.n	800dfbc <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 800df96:	bf00      	nop
 800df98:	480c      	ldr	r0, [pc, #48]	; (800dfcc <hal_uart_transfer+0x58>)
 800df9a:	f7ff fd99 	bl	800dad0 <LL_USART_IsActiveFlag_TXE>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d0f9      	beq.n	800df98 <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4808      	ldr	r0, [pc, #32]	; (800dfcc <hal_uart_transfer+0x58>)
 800dfac:	f7ff fdb5 	bl	800db1a <LL_USART_TransmitData8>
            buf++;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	60bb      	str	r3, [r7, #8]
            size--;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1e9      	bne.n	800df96 <hal_uart_transfer+0x22>
 800dfc2:	e000      	b.n	800dfc6 <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 800dfc4:	bf00      	nop
        }
    }
}
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	40011000 	.word	0x40011000

0800dfd0 <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 800dfd0:	b590      	push	{r4, r7, lr}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 800dfda:	4813      	ldr	r0, [pc, #76]	; (800e028 <USART1_IRQHandler+0x58>)
 800dfdc:	f7ff fd65 	bl	800daaa <LL_USART_IsActiveFlag_IDLE>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d01c      	beq.n	800e020 <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 800dfe6:	4810      	ldr	r0, [pc, #64]	; (800e028 <USART1_IRQHandler+0x58>)
 800dfe8:	f7ff fd85 	bl	800daf6 <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 800dfec:	4b0f      	ldr	r3, [pc, #60]	; (800e02c <USART1_IRQHandler+0x5c>)
 800dfee:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800dff2:	2102      	movs	r1, #2
 800dff4:	480e      	ldr	r0, [pc, #56]	; (800e030 <USART1_IRQHandler+0x60>)
 800dff6:	f7ff fe9b 	bl	800dd30 <LL_DMA_GetDataLength>
 800dffa:	4603      	mov	r3, r0
 800dffc:	4423      	add	r3, r4
 800dffe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e002:	2b00      	cmp	r3, #0
 800e004:	bfb8      	it	lt
 800e006:	425b      	neglt	r3, r3
 800e008:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 800e00a:	4b08      	ldr	r3, [pc, #32]	; (800e02c <USART1_IRQHandler+0x5c>)
 800e00c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4413      	add	r3, r2
 800e014:	2bff      	cmp	r3, #255	; 0xff
 800e016:	d903      	bls.n	800e020 <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 800e018:	4b04      	ldr	r3, [pc, #16]	; (800e02c <USART1_IRQHandler+0x5c>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	bd90      	pop	{r4, r7, pc}
 800e028:	40011000 	.word	0x40011000
 800e02c:	200049c4 	.word	0x200049c4
 800e030:	40026400 	.word	0x40026400

0800e034 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800e034:	b480      	push	{r7}
 800e036:	af00      	add	r7, sp, #0

}
 800e038:	bf00      	nop
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 800e042:	b480      	push	{r7}
 800e044:	af00      	add	r7, sp, #0

}
 800e046:	bf00      	nop
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e054:	b672      	cpsid	i
}
 800e056:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 800e058:	4801      	ldr	r0, [pc, #4]	; (800e060 <ErrorHandler+0x10>)
 800e05a:	f7fc fc6f 	bl	800a93c <hal_cli_printf>
  while (1)
 800e05e:	e7fe      	b.n	800e05e <ErrorHandler+0xe>
 800e060:	0800ed78 	.word	0x0800ed78

0800e064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e064:	480d      	ldr	r0, [pc, #52]	; (800e09c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e066:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e068:	f7ff fc4a 	bl	800d900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e06c:	480c      	ldr	r0, [pc, #48]	; (800e0a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800e06e:	490d      	ldr	r1, [pc, #52]	; (800e0a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e070:	4a0d      	ldr	r2, [pc, #52]	; (800e0a8 <LoopForever+0xe>)
  movs r3, #0
 800e072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e074:	e002      	b.n	800e07c <LoopCopyDataInit>

0800e076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e07a:	3304      	adds	r3, #4

0800e07c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e07c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e07e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e080:	d3f9      	bcc.n	800e076 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e082:	4a0a      	ldr	r2, [pc, #40]	; (800e0ac <LoopForever+0x12>)
  ldr r4, =_ebss
 800e084:	4c0a      	ldr	r4, [pc, #40]	; (800e0b0 <LoopForever+0x16>)
  movs r3, #0
 800e086:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e088:	e001      	b.n	800e08e <LoopFillZerobss>

0800e08a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e08a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e08c:	3204      	adds	r2, #4

0800e08e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e08e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e090:	d3fb      	bcc.n	800e08a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e092:	f000 f811 	bl	800e0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e096:	f7fe fc2b 	bl	800c8f0 <main>

0800e09a <LoopForever>:

LoopForever:
    b LoopForever
 800e09a:	e7fe      	b.n	800e09a <LoopForever>
  ldr   r0, =_estack
 800e09c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800e0a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e0a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800e0a8:	0800ef5c 	.word	0x0800ef5c
  ldr r2, =_sbss
 800e0ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800e0b0:	20005aa4 	.word	0x20005aa4

0800e0b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e0b4:	e7fe      	b.n	800e0b4 <ADC_IRQHandler>
	...

0800e0b8 <__libc_init_array>:
 800e0b8:	b570      	push	{r4, r5, r6, lr}
 800e0ba:	4d0d      	ldr	r5, [pc, #52]	; (800e0f0 <__libc_init_array+0x38>)
 800e0bc:	4c0d      	ldr	r4, [pc, #52]	; (800e0f4 <__libc_init_array+0x3c>)
 800e0be:	1b64      	subs	r4, r4, r5
 800e0c0:	10a4      	asrs	r4, r4, #2
 800e0c2:	2600      	movs	r6, #0
 800e0c4:	42a6      	cmp	r6, r4
 800e0c6:	d109      	bne.n	800e0dc <__libc_init_array+0x24>
 800e0c8:	4d0b      	ldr	r5, [pc, #44]	; (800e0f8 <__libc_init_array+0x40>)
 800e0ca:	4c0c      	ldr	r4, [pc, #48]	; (800e0fc <__libc_init_array+0x44>)
 800e0cc:	f000 fccc 	bl	800ea68 <_init>
 800e0d0:	1b64      	subs	r4, r4, r5
 800e0d2:	10a4      	asrs	r4, r4, #2
 800e0d4:	2600      	movs	r6, #0
 800e0d6:	42a6      	cmp	r6, r4
 800e0d8:	d105      	bne.n	800e0e6 <__libc_init_array+0x2e>
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0e0:	4798      	blx	r3
 800e0e2:	3601      	adds	r6, #1
 800e0e4:	e7ee      	b.n	800e0c4 <__libc_init_array+0xc>
 800e0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ea:	4798      	blx	r3
 800e0ec:	3601      	adds	r6, #1
 800e0ee:	e7f2      	b.n	800e0d6 <__libc_init_array+0x1e>
 800e0f0:	0800ef54 	.word	0x0800ef54
 800e0f4:	0800ef54 	.word	0x0800ef54
 800e0f8:	0800ef54 	.word	0x0800ef54
 800e0fc:	0800ef58 	.word	0x0800ef58

0800e100 <memcmp>:
 800e100:	b510      	push	{r4, lr}
 800e102:	3901      	subs	r1, #1
 800e104:	4402      	add	r2, r0
 800e106:	4290      	cmp	r0, r2
 800e108:	d101      	bne.n	800e10e <memcmp+0xe>
 800e10a:	2000      	movs	r0, #0
 800e10c:	e005      	b.n	800e11a <memcmp+0x1a>
 800e10e:	7803      	ldrb	r3, [r0, #0]
 800e110:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e114:	42a3      	cmp	r3, r4
 800e116:	d001      	beq.n	800e11c <memcmp+0x1c>
 800e118:	1b18      	subs	r0, r3, r4
 800e11a:	bd10      	pop	{r4, pc}
 800e11c:	3001      	adds	r0, #1
 800e11e:	e7f2      	b.n	800e106 <memcmp+0x6>

0800e120 <memcpy>:
 800e120:	440a      	add	r2, r1
 800e122:	4291      	cmp	r1, r2
 800e124:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e128:	d100      	bne.n	800e12c <memcpy+0xc>
 800e12a:	4770      	bx	lr
 800e12c:	b510      	push	{r4, lr}
 800e12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e132:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e136:	4291      	cmp	r1, r2
 800e138:	d1f9      	bne.n	800e12e <memcpy+0xe>
 800e13a:	bd10      	pop	{r4, pc}

0800e13c <memset>:
 800e13c:	4402      	add	r2, r0
 800e13e:	4603      	mov	r3, r0
 800e140:	4293      	cmp	r3, r2
 800e142:	d100      	bne.n	800e146 <memset+0xa>
 800e144:	4770      	bx	lr
 800e146:	f803 1b01 	strb.w	r1, [r3], #1
 800e14a:	e7f9      	b.n	800e140 <memset+0x4>

0800e14c <siprintf>:
 800e14c:	b40e      	push	{r1, r2, r3}
 800e14e:	b500      	push	{lr}
 800e150:	b09c      	sub	sp, #112	; 0x70
 800e152:	ab1d      	add	r3, sp, #116	; 0x74
 800e154:	9002      	str	r0, [sp, #8]
 800e156:	9006      	str	r0, [sp, #24]
 800e158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e15c:	4809      	ldr	r0, [pc, #36]	; (800e184 <siprintf+0x38>)
 800e15e:	9107      	str	r1, [sp, #28]
 800e160:	9104      	str	r1, [sp, #16]
 800e162:	4909      	ldr	r1, [pc, #36]	; (800e188 <siprintf+0x3c>)
 800e164:	f853 2b04 	ldr.w	r2, [r3], #4
 800e168:	9105      	str	r1, [sp, #20]
 800e16a:	6800      	ldr	r0, [r0, #0]
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	a902      	add	r1, sp, #8
 800e170:	f000 f91e 	bl	800e3b0 <_svfiprintf_r>
 800e174:	9b02      	ldr	r3, [sp, #8]
 800e176:	2200      	movs	r2, #0
 800e178:	701a      	strb	r2, [r3, #0]
 800e17a:	b01c      	add	sp, #112	; 0x70
 800e17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e180:	b003      	add	sp, #12
 800e182:	4770      	bx	lr
 800e184:	20000014 	.word	0x20000014
 800e188:	ffff0208 	.word	0xffff0208

0800e18c <_vsiprintf_r>:
 800e18c:	b500      	push	{lr}
 800e18e:	b09b      	sub	sp, #108	; 0x6c
 800e190:	9100      	str	r1, [sp, #0]
 800e192:	9104      	str	r1, [sp, #16]
 800e194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e198:	9105      	str	r1, [sp, #20]
 800e19a:	9102      	str	r1, [sp, #8]
 800e19c:	4905      	ldr	r1, [pc, #20]	; (800e1b4 <_vsiprintf_r+0x28>)
 800e19e:	9103      	str	r1, [sp, #12]
 800e1a0:	4669      	mov	r1, sp
 800e1a2:	f000 f905 	bl	800e3b0 <_svfiprintf_r>
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	b01b      	add	sp, #108	; 0x6c
 800e1ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1b2:	bf00      	nop
 800e1b4:	ffff0208 	.word	0xffff0208

0800e1b8 <vsiprintf>:
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	460a      	mov	r2, r1
 800e1bc:	4601      	mov	r1, r0
 800e1be:	4802      	ldr	r0, [pc, #8]	; (800e1c8 <vsiprintf+0x10>)
 800e1c0:	6800      	ldr	r0, [r0, #0]
 800e1c2:	f7ff bfe3 	b.w	800e18c <_vsiprintf_r>
 800e1c6:	bf00      	nop
 800e1c8:	20000014 	.word	0x20000014

0800e1cc <__retarget_lock_acquire_recursive>:
 800e1cc:	4770      	bx	lr

0800e1ce <__retarget_lock_release_recursive>:
 800e1ce:	4770      	bx	lr

0800e1d0 <sbrk_aligned>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	4e0e      	ldr	r6, [pc, #56]	; (800e20c <sbrk_aligned+0x3c>)
 800e1d4:	460c      	mov	r4, r1
 800e1d6:	6831      	ldr	r1, [r6, #0]
 800e1d8:	4605      	mov	r5, r0
 800e1da:	b911      	cbnz	r1, 800e1e2 <sbrk_aligned+0x12>
 800e1dc:	f000 fb7c 	bl	800e8d8 <_sbrk_r>
 800e1e0:	6030      	str	r0, [r6, #0]
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f000 fb77 	bl	800e8d8 <_sbrk_r>
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	d00a      	beq.n	800e204 <sbrk_aligned+0x34>
 800e1ee:	1cc4      	adds	r4, r0, #3
 800e1f0:	f024 0403 	bic.w	r4, r4, #3
 800e1f4:	42a0      	cmp	r0, r4
 800e1f6:	d007      	beq.n	800e208 <sbrk_aligned+0x38>
 800e1f8:	1a21      	subs	r1, r4, r0
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f000 fb6c 	bl	800e8d8 <_sbrk_r>
 800e200:	3001      	adds	r0, #1
 800e202:	d101      	bne.n	800e208 <sbrk_aligned+0x38>
 800e204:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e208:	4620      	mov	r0, r4
 800e20a:	bd70      	pop	{r4, r5, r6, pc}
 800e20c:	20005a98 	.word	0x20005a98

0800e210 <_malloc_r>:
 800e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e214:	1ccd      	adds	r5, r1, #3
 800e216:	f025 0503 	bic.w	r5, r5, #3
 800e21a:	3508      	adds	r5, #8
 800e21c:	2d0c      	cmp	r5, #12
 800e21e:	bf38      	it	cc
 800e220:	250c      	movcc	r5, #12
 800e222:	2d00      	cmp	r5, #0
 800e224:	4607      	mov	r7, r0
 800e226:	db01      	blt.n	800e22c <_malloc_r+0x1c>
 800e228:	42a9      	cmp	r1, r5
 800e22a:	d905      	bls.n	800e238 <_malloc_r+0x28>
 800e22c:	230c      	movs	r3, #12
 800e22e:	603b      	str	r3, [r7, #0]
 800e230:	2600      	movs	r6, #0
 800e232:	4630      	mov	r0, r6
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	4e2e      	ldr	r6, [pc, #184]	; (800e2f4 <_malloc_r+0xe4>)
 800e23a:	f000 fb77 	bl	800e92c <__malloc_lock>
 800e23e:	6833      	ldr	r3, [r6, #0]
 800e240:	461c      	mov	r4, r3
 800e242:	bb34      	cbnz	r4, 800e292 <_malloc_r+0x82>
 800e244:	4629      	mov	r1, r5
 800e246:	4638      	mov	r0, r7
 800e248:	f7ff ffc2 	bl	800e1d0 <sbrk_aligned>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	4604      	mov	r4, r0
 800e250:	d14d      	bne.n	800e2ee <_malloc_r+0xde>
 800e252:	6834      	ldr	r4, [r6, #0]
 800e254:	4626      	mov	r6, r4
 800e256:	2e00      	cmp	r6, #0
 800e258:	d140      	bne.n	800e2dc <_malloc_r+0xcc>
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	4631      	mov	r1, r6
 800e25e:	4638      	mov	r0, r7
 800e260:	eb04 0803 	add.w	r8, r4, r3
 800e264:	f000 fb38 	bl	800e8d8 <_sbrk_r>
 800e268:	4580      	cmp	r8, r0
 800e26a:	d13a      	bne.n	800e2e2 <_malloc_r+0xd2>
 800e26c:	6821      	ldr	r1, [r4, #0]
 800e26e:	3503      	adds	r5, #3
 800e270:	1a6d      	subs	r5, r5, r1
 800e272:	f025 0503 	bic.w	r5, r5, #3
 800e276:	3508      	adds	r5, #8
 800e278:	2d0c      	cmp	r5, #12
 800e27a:	bf38      	it	cc
 800e27c:	250c      	movcc	r5, #12
 800e27e:	4629      	mov	r1, r5
 800e280:	4638      	mov	r0, r7
 800e282:	f7ff ffa5 	bl	800e1d0 <sbrk_aligned>
 800e286:	3001      	adds	r0, #1
 800e288:	d02b      	beq.n	800e2e2 <_malloc_r+0xd2>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	442b      	add	r3, r5
 800e28e:	6023      	str	r3, [r4, #0]
 800e290:	e00e      	b.n	800e2b0 <_malloc_r+0xa0>
 800e292:	6822      	ldr	r2, [r4, #0]
 800e294:	1b52      	subs	r2, r2, r5
 800e296:	d41e      	bmi.n	800e2d6 <_malloc_r+0xc6>
 800e298:	2a0b      	cmp	r2, #11
 800e29a:	d916      	bls.n	800e2ca <_malloc_r+0xba>
 800e29c:	1961      	adds	r1, r4, r5
 800e29e:	42a3      	cmp	r3, r4
 800e2a0:	6025      	str	r5, [r4, #0]
 800e2a2:	bf18      	it	ne
 800e2a4:	6059      	strne	r1, [r3, #4]
 800e2a6:	6863      	ldr	r3, [r4, #4]
 800e2a8:	bf08      	it	eq
 800e2aa:	6031      	streq	r1, [r6, #0]
 800e2ac:	5162      	str	r2, [r4, r5]
 800e2ae:	604b      	str	r3, [r1, #4]
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	f104 060b 	add.w	r6, r4, #11
 800e2b6:	f000 fb3f 	bl	800e938 <__malloc_unlock>
 800e2ba:	f026 0607 	bic.w	r6, r6, #7
 800e2be:	1d23      	adds	r3, r4, #4
 800e2c0:	1af2      	subs	r2, r6, r3
 800e2c2:	d0b6      	beq.n	800e232 <_malloc_r+0x22>
 800e2c4:	1b9b      	subs	r3, r3, r6
 800e2c6:	50a3      	str	r3, [r4, r2]
 800e2c8:	e7b3      	b.n	800e232 <_malloc_r+0x22>
 800e2ca:	6862      	ldr	r2, [r4, #4]
 800e2cc:	42a3      	cmp	r3, r4
 800e2ce:	bf0c      	ite	eq
 800e2d0:	6032      	streq	r2, [r6, #0]
 800e2d2:	605a      	strne	r2, [r3, #4]
 800e2d4:	e7ec      	b.n	800e2b0 <_malloc_r+0xa0>
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	6864      	ldr	r4, [r4, #4]
 800e2da:	e7b2      	b.n	800e242 <_malloc_r+0x32>
 800e2dc:	4634      	mov	r4, r6
 800e2de:	6876      	ldr	r6, [r6, #4]
 800e2e0:	e7b9      	b.n	800e256 <_malloc_r+0x46>
 800e2e2:	230c      	movs	r3, #12
 800e2e4:	603b      	str	r3, [r7, #0]
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f000 fb26 	bl	800e938 <__malloc_unlock>
 800e2ec:	e7a1      	b.n	800e232 <_malloc_r+0x22>
 800e2ee:	6025      	str	r5, [r4, #0]
 800e2f0:	e7de      	b.n	800e2b0 <_malloc_r+0xa0>
 800e2f2:	bf00      	nop
 800e2f4:	20005a94 	.word	0x20005a94

0800e2f8 <__ssputs_r>:
 800e2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fc:	688e      	ldr	r6, [r1, #8]
 800e2fe:	429e      	cmp	r6, r3
 800e300:	4682      	mov	sl, r0
 800e302:	460c      	mov	r4, r1
 800e304:	4690      	mov	r8, r2
 800e306:	461f      	mov	r7, r3
 800e308:	d838      	bhi.n	800e37c <__ssputs_r+0x84>
 800e30a:	898a      	ldrh	r2, [r1, #12]
 800e30c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e310:	d032      	beq.n	800e378 <__ssputs_r+0x80>
 800e312:	6825      	ldr	r5, [r4, #0]
 800e314:	6909      	ldr	r1, [r1, #16]
 800e316:	eba5 0901 	sub.w	r9, r5, r1
 800e31a:	6965      	ldr	r5, [r4, #20]
 800e31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e324:	3301      	adds	r3, #1
 800e326:	444b      	add	r3, r9
 800e328:	106d      	asrs	r5, r5, #1
 800e32a:	429d      	cmp	r5, r3
 800e32c:	bf38      	it	cc
 800e32e:	461d      	movcc	r5, r3
 800e330:	0553      	lsls	r3, r2, #21
 800e332:	d531      	bpl.n	800e398 <__ssputs_r+0xa0>
 800e334:	4629      	mov	r1, r5
 800e336:	f7ff ff6b 	bl	800e210 <_malloc_r>
 800e33a:	4606      	mov	r6, r0
 800e33c:	b950      	cbnz	r0, 800e354 <__ssputs_r+0x5c>
 800e33e:	230c      	movs	r3, #12
 800e340:	f8ca 3000 	str.w	r3, [sl]
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e34a:	81a3      	strh	r3, [r4, #12]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e354:	6921      	ldr	r1, [r4, #16]
 800e356:	464a      	mov	r2, r9
 800e358:	f7ff fee2 	bl	800e120 <memcpy>
 800e35c:	89a3      	ldrh	r3, [r4, #12]
 800e35e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e366:	81a3      	strh	r3, [r4, #12]
 800e368:	6126      	str	r6, [r4, #16]
 800e36a:	6165      	str	r5, [r4, #20]
 800e36c:	444e      	add	r6, r9
 800e36e:	eba5 0509 	sub.w	r5, r5, r9
 800e372:	6026      	str	r6, [r4, #0]
 800e374:	60a5      	str	r5, [r4, #8]
 800e376:	463e      	mov	r6, r7
 800e378:	42be      	cmp	r6, r7
 800e37a:	d900      	bls.n	800e37e <__ssputs_r+0x86>
 800e37c:	463e      	mov	r6, r7
 800e37e:	6820      	ldr	r0, [r4, #0]
 800e380:	4632      	mov	r2, r6
 800e382:	4641      	mov	r1, r8
 800e384:	f000 fab8 	bl	800e8f8 <memmove>
 800e388:	68a3      	ldr	r3, [r4, #8]
 800e38a:	1b9b      	subs	r3, r3, r6
 800e38c:	60a3      	str	r3, [r4, #8]
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	4433      	add	r3, r6
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	2000      	movs	r0, #0
 800e396:	e7db      	b.n	800e350 <__ssputs_r+0x58>
 800e398:	462a      	mov	r2, r5
 800e39a:	f000 fb1f 	bl	800e9dc <_realloc_r>
 800e39e:	4606      	mov	r6, r0
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d1e1      	bne.n	800e368 <__ssputs_r+0x70>
 800e3a4:	6921      	ldr	r1, [r4, #16]
 800e3a6:	4650      	mov	r0, sl
 800e3a8:	f000 facc 	bl	800e944 <_free_r>
 800e3ac:	e7c7      	b.n	800e33e <__ssputs_r+0x46>
	...

0800e3b0 <_svfiprintf_r>:
 800e3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b4:	4698      	mov	r8, r3
 800e3b6:	898b      	ldrh	r3, [r1, #12]
 800e3b8:	061b      	lsls	r3, r3, #24
 800e3ba:	b09d      	sub	sp, #116	; 0x74
 800e3bc:	4607      	mov	r7, r0
 800e3be:	460d      	mov	r5, r1
 800e3c0:	4614      	mov	r4, r2
 800e3c2:	d50e      	bpl.n	800e3e2 <_svfiprintf_r+0x32>
 800e3c4:	690b      	ldr	r3, [r1, #16]
 800e3c6:	b963      	cbnz	r3, 800e3e2 <_svfiprintf_r+0x32>
 800e3c8:	2140      	movs	r1, #64	; 0x40
 800e3ca:	f7ff ff21 	bl	800e210 <_malloc_r>
 800e3ce:	6028      	str	r0, [r5, #0]
 800e3d0:	6128      	str	r0, [r5, #16]
 800e3d2:	b920      	cbnz	r0, 800e3de <_svfiprintf_r+0x2e>
 800e3d4:	230c      	movs	r3, #12
 800e3d6:	603b      	str	r3, [r7, #0]
 800e3d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3dc:	e0d1      	b.n	800e582 <_svfiprintf_r+0x1d2>
 800e3de:	2340      	movs	r3, #64	; 0x40
 800e3e0:	616b      	str	r3, [r5, #20]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e6:	2320      	movs	r3, #32
 800e3e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3f0:	2330      	movs	r3, #48	; 0x30
 800e3f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e59c <_svfiprintf_r+0x1ec>
 800e3f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3fa:	f04f 0901 	mov.w	r9, #1
 800e3fe:	4623      	mov	r3, r4
 800e400:	469a      	mov	sl, r3
 800e402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e406:	b10a      	cbz	r2, 800e40c <_svfiprintf_r+0x5c>
 800e408:	2a25      	cmp	r2, #37	; 0x25
 800e40a:	d1f9      	bne.n	800e400 <_svfiprintf_r+0x50>
 800e40c:	ebba 0b04 	subs.w	fp, sl, r4
 800e410:	d00b      	beq.n	800e42a <_svfiprintf_r+0x7a>
 800e412:	465b      	mov	r3, fp
 800e414:	4622      	mov	r2, r4
 800e416:	4629      	mov	r1, r5
 800e418:	4638      	mov	r0, r7
 800e41a:	f7ff ff6d 	bl	800e2f8 <__ssputs_r>
 800e41e:	3001      	adds	r0, #1
 800e420:	f000 80aa 	beq.w	800e578 <_svfiprintf_r+0x1c8>
 800e424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e426:	445a      	add	r2, fp
 800e428:	9209      	str	r2, [sp, #36]	; 0x24
 800e42a:	f89a 3000 	ldrb.w	r3, [sl]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 80a2 	beq.w	800e578 <_svfiprintf_r+0x1c8>
 800e434:	2300      	movs	r3, #0
 800e436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e43a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e43e:	f10a 0a01 	add.w	sl, sl, #1
 800e442:	9304      	str	r3, [sp, #16]
 800e444:	9307      	str	r3, [sp, #28]
 800e446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e44a:	931a      	str	r3, [sp, #104]	; 0x68
 800e44c:	4654      	mov	r4, sl
 800e44e:	2205      	movs	r2, #5
 800e450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e454:	4851      	ldr	r0, [pc, #324]	; (800e59c <_svfiprintf_r+0x1ec>)
 800e456:	f7f1 ff1b 	bl	8000290 <memchr>
 800e45a:	9a04      	ldr	r2, [sp, #16]
 800e45c:	b9d8      	cbnz	r0, 800e496 <_svfiprintf_r+0xe6>
 800e45e:	06d0      	lsls	r0, r2, #27
 800e460:	bf44      	itt	mi
 800e462:	2320      	movmi	r3, #32
 800e464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e468:	0711      	lsls	r1, r2, #28
 800e46a:	bf44      	itt	mi
 800e46c:	232b      	movmi	r3, #43	; 0x2b
 800e46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e472:	f89a 3000 	ldrb.w	r3, [sl]
 800e476:	2b2a      	cmp	r3, #42	; 0x2a
 800e478:	d015      	beq.n	800e4a6 <_svfiprintf_r+0xf6>
 800e47a:	9a07      	ldr	r2, [sp, #28]
 800e47c:	4654      	mov	r4, sl
 800e47e:	2000      	movs	r0, #0
 800e480:	f04f 0c0a 	mov.w	ip, #10
 800e484:	4621      	mov	r1, r4
 800e486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e48a:	3b30      	subs	r3, #48	; 0x30
 800e48c:	2b09      	cmp	r3, #9
 800e48e:	d94e      	bls.n	800e52e <_svfiprintf_r+0x17e>
 800e490:	b1b0      	cbz	r0, 800e4c0 <_svfiprintf_r+0x110>
 800e492:	9207      	str	r2, [sp, #28]
 800e494:	e014      	b.n	800e4c0 <_svfiprintf_r+0x110>
 800e496:	eba0 0308 	sub.w	r3, r0, r8
 800e49a:	fa09 f303 	lsl.w	r3, r9, r3
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	9304      	str	r3, [sp, #16]
 800e4a2:	46a2      	mov	sl, r4
 800e4a4:	e7d2      	b.n	800e44c <_svfiprintf_r+0x9c>
 800e4a6:	9b03      	ldr	r3, [sp, #12]
 800e4a8:	1d19      	adds	r1, r3, #4
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	9103      	str	r1, [sp, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	bfbb      	ittet	lt
 800e4b2:	425b      	neglt	r3, r3
 800e4b4:	f042 0202 	orrlt.w	r2, r2, #2
 800e4b8:	9307      	strge	r3, [sp, #28]
 800e4ba:	9307      	strlt	r3, [sp, #28]
 800e4bc:	bfb8      	it	lt
 800e4be:	9204      	strlt	r2, [sp, #16]
 800e4c0:	7823      	ldrb	r3, [r4, #0]
 800e4c2:	2b2e      	cmp	r3, #46	; 0x2e
 800e4c4:	d10c      	bne.n	800e4e0 <_svfiprintf_r+0x130>
 800e4c6:	7863      	ldrb	r3, [r4, #1]
 800e4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ca:	d135      	bne.n	800e538 <_svfiprintf_r+0x188>
 800e4cc:	9b03      	ldr	r3, [sp, #12]
 800e4ce:	1d1a      	adds	r2, r3, #4
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	9203      	str	r2, [sp, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	bfb8      	it	lt
 800e4d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e4dc:	3402      	adds	r4, #2
 800e4de:	9305      	str	r3, [sp, #20]
 800e4e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e5ac <_svfiprintf_r+0x1fc>
 800e4e4:	7821      	ldrb	r1, [r4, #0]
 800e4e6:	2203      	movs	r2, #3
 800e4e8:	4650      	mov	r0, sl
 800e4ea:	f7f1 fed1 	bl	8000290 <memchr>
 800e4ee:	b140      	cbz	r0, 800e502 <_svfiprintf_r+0x152>
 800e4f0:	2340      	movs	r3, #64	; 0x40
 800e4f2:	eba0 000a 	sub.w	r0, r0, sl
 800e4f6:	fa03 f000 	lsl.w	r0, r3, r0
 800e4fa:	9b04      	ldr	r3, [sp, #16]
 800e4fc:	4303      	orrs	r3, r0
 800e4fe:	3401      	adds	r4, #1
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e506:	4826      	ldr	r0, [pc, #152]	; (800e5a0 <_svfiprintf_r+0x1f0>)
 800e508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e50c:	2206      	movs	r2, #6
 800e50e:	f7f1 febf 	bl	8000290 <memchr>
 800e512:	2800      	cmp	r0, #0
 800e514:	d038      	beq.n	800e588 <_svfiprintf_r+0x1d8>
 800e516:	4b23      	ldr	r3, [pc, #140]	; (800e5a4 <_svfiprintf_r+0x1f4>)
 800e518:	bb1b      	cbnz	r3, 800e562 <_svfiprintf_r+0x1b2>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	3307      	adds	r3, #7
 800e51e:	f023 0307 	bic.w	r3, r3, #7
 800e522:	3308      	adds	r3, #8
 800e524:	9303      	str	r3, [sp, #12]
 800e526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e528:	4433      	add	r3, r6
 800e52a:	9309      	str	r3, [sp, #36]	; 0x24
 800e52c:	e767      	b.n	800e3fe <_svfiprintf_r+0x4e>
 800e52e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e532:	460c      	mov	r4, r1
 800e534:	2001      	movs	r0, #1
 800e536:	e7a5      	b.n	800e484 <_svfiprintf_r+0xd4>
 800e538:	2300      	movs	r3, #0
 800e53a:	3401      	adds	r4, #1
 800e53c:	9305      	str	r3, [sp, #20]
 800e53e:	4619      	mov	r1, r3
 800e540:	f04f 0c0a 	mov.w	ip, #10
 800e544:	4620      	mov	r0, r4
 800e546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e54a:	3a30      	subs	r2, #48	; 0x30
 800e54c:	2a09      	cmp	r2, #9
 800e54e:	d903      	bls.n	800e558 <_svfiprintf_r+0x1a8>
 800e550:	2b00      	cmp	r3, #0
 800e552:	d0c5      	beq.n	800e4e0 <_svfiprintf_r+0x130>
 800e554:	9105      	str	r1, [sp, #20]
 800e556:	e7c3      	b.n	800e4e0 <_svfiprintf_r+0x130>
 800e558:	fb0c 2101 	mla	r1, ip, r1, r2
 800e55c:	4604      	mov	r4, r0
 800e55e:	2301      	movs	r3, #1
 800e560:	e7f0      	b.n	800e544 <_svfiprintf_r+0x194>
 800e562:	ab03      	add	r3, sp, #12
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	462a      	mov	r2, r5
 800e568:	4b0f      	ldr	r3, [pc, #60]	; (800e5a8 <_svfiprintf_r+0x1f8>)
 800e56a:	a904      	add	r1, sp, #16
 800e56c:	4638      	mov	r0, r7
 800e56e:	f3af 8000 	nop.w
 800e572:	1c42      	adds	r2, r0, #1
 800e574:	4606      	mov	r6, r0
 800e576:	d1d6      	bne.n	800e526 <_svfiprintf_r+0x176>
 800e578:	89ab      	ldrh	r3, [r5, #12]
 800e57a:	065b      	lsls	r3, r3, #25
 800e57c:	f53f af2c 	bmi.w	800e3d8 <_svfiprintf_r+0x28>
 800e580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e582:	b01d      	add	sp, #116	; 0x74
 800e584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e588:	ab03      	add	r3, sp, #12
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	462a      	mov	r2, r5
 800e58e:	4b06      	ldr	r3, [pc, #24]	; (800e5a8 <_svfiprintf_r+0x1f8>)
 800e590:	a904      	add	r1, sp, #16
 800e592:	4638      	mov	r0, r7
 800e594:	f000 f87a 	bl	800e68c <_printf_i>
 800e598:	e7eb      	b.n	800e572 <_svfiprintf_r+0x1c2>
 800e59a:	bf00      	nop
 800e59c:	0800ef18 	.word	0x0800ef18
 800e5a0:	0800ef22 	.word	0x0800ef22
 800e5a4:	00000000 	.word	0x00000000
 800e5a8:	0800e2f9 	.word	0x0800e2f9
 800e5ac:	0800ef1e 	.word	0x0800ef1e

0800e5b0 <_printf_common>:
 800e5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b4:	4616      	mov	r6, r2
 800e5b6:	4699      	mov	r9, r3
 800e5b8:	688a      	ldr	r2, [r1, #8]
 800e5ba:	690b      	ldr	r3, [r1, #16]
 800e5bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	bfb8      	it	lt
 800e5c4:	4613      	movlt	r3, r2
 800e5c6:	6033      	str	r3, [r6, #0]
 800e5c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5cc:	4607      	mov	r7, r0
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	b10a      	cbz	r2, 800e5d6 <_printf_common+0x26>
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	6033      	str	r3, [r6, #0]
 800e5d6:	6823      	ldr	r3, [r4, #0]
 800e5d8:	0699      	lsls	r1, r3, #26
 800e5da:	bf42      	ittt	mi
 800e5dc:	6833      	ldrmi	r3, [r6, #0]
 800e5de:	3302      	addmi	r3, #2
 800e5e0:	6033      	strmi	r3, [r6, #0]
 800e5e2:	6825      	ldr	r5, [r4, #0]
 800e5e4:	f015 0506 	ands.w	r5, r5, #6
 800e5e8:	d106      	bne.n	800e5f8 <_printf_common+0x48>
 800e5ea:	f104 0a19 	add.w	sl, r4, #25
 800e5ee:	68e3      	ldr	r3, [r4, #12]
 800e5f0:	6832      	ldr	r2, [r6, #0]
 800e5f2:	1a9b      	subs	r3, r3, r2
 800e5f4:	42ab      	cmp	r3, r5
 800e5f6:	dc26      	bgt.n	800e646 <_printf_common+0x96>
 800e5f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5fc:	1e13      	subs	r3, r2, #0
 800e5fe:	6822      	ldr	r2, [r4, #0]
 800e600:	bf18      	it	ne
 800e602:	2301      	movne	r3, #1
 800e604:	0692      	lsls	r2, r2, #26
 800e606:	d42b      	bmi.n	800e660 <_printf_common+0xb0>
 800e608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e60c:	4649      	mov	r1, r9
 800e60e:	4638      	mov	r0, r7
 800e610:	47c0      	blx	r8
 800e612:	3001      	adds	r0, #1
 800e614:	d01e      	beq.n	800e654 <_printf_common+0xa4>
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	68e5      	ldr	r5, [r4, #12]
 800e61a:	6832      	ldr	r2, [r6, #0]
 800e61c:	f003 0306 	and.w	r3, r3, #6
 800e620:	2b04      	cmp	r3, #4
 800e622:	bf08      	it	eq
 800e624:	1aad      	subeq	r5, r5, r2
 800e626:	68a3      	ldr	r3, [r4, #8]
 800e628:	6922      	ldr	r2, [r4, #16]
 800e62a:	bf0c      	ite	eq
 800e62c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e630:	2500      	movne	r5, #0
 800e632:	4293      	cmp	r3, r2
 800e634:	bfc4      	itt	gt
 800e636:	1a9b      	subgt	r3, r3, r2
 800e638:	18ed      	addgt	r5, r5, r3
 800e63a:	2600      	movs	r6, #0
 800e63c:	341a      	adds	r4, #26
 800e63e:	42b5      	cmp	r5, r6
 800e640:	d11a      	bne.n	800e678 <_printf_common+0xc8>
 800e642:	2000      	movs	r0, #0
 800e644:	e008      	b.n	800e658 <_printf_common+0xa8>
 800e646:	2301      	movs	r3, #1
 800e648:	4652      	mov	r2, sl
 800e64a:	4649      	mov	r1, r9
 800e64c:	4638      	mov	r0, r7
 800e64e:	47c0      	blx	r8
 800e650:	3001      	adds	r0, #1
 800e652:	d103      	bne.n	800e65c <_printf_common+0xac>
 800e654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e65c:	3501      	adds	r5, #1
 800e65e:	e7c6      	b.n	800e5ee <_printf_common+0x3e>
 800e660:	18e1      	adds	r1, r4, r3
 800e662:	1c5a      	adds	r2, r3, #1
 800e664:	2030      	movs	r0, #48	; 0x30
 800e666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e66a:	4422      	add	r2, r4
 800e66c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e674:	3302      	adds	r3, #2
 800e676:	e7c7      	b.n	800e608 <_printf_common+0x58>
 800e678:	2301      	movs	r3, #1
 800e67a:	4622      	mov	r2, r4
 800e67c:	4649      	mov	r1, r9
 800e67e:	4638      	mov	r0, r7
 800e680:	47c0      	blx	r8
 800e682:	3001      	adds	r0, #1
 800e684:	d0e6      	beq.n	800e654 <_printf_common+0xa4>
 800e686:	3601      	adds	r6, #1
 800e688:	e7d9      	b.n	800e63e <_printf_common+0x8e>
	...

0800e68c <_printf_i>:
 800e68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e690:	7e0f      	ldrb	r7, [r1, #24]
 800e692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e694:	2f78      	cmp	r7, #120	; 0x78
 800e696:	4691      	mov	r9, r2
 800e698:	4680      	mov	r8, r0
 800e69a:	460c      	mov	r4, r1
 800e69c:	469a      	mov	sl, r3
 800e69e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6a2:	d807      	bhi.n	800e6b4 <_printf_i+0x28>
 800e6a4:	2f62      	cmp	r7, #98	; 0x62
 800e6a6:	d80a      	bhi.n	800e6be <_printf_i+0x32>
 800e6a8:	2f00      	cmp	r7, #0
 800e6aa:	f000 80d8 	beq.w	800e85e <_printf_i+0x1d2>
 800e6ae:	2f58      	cmp	r7, #88	; 0x58
 800e6b0:	f000 80a3 	beq.w	800e7fa <_printf_i+0x16e>
 800e6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6bc:	e03a      	b.n	800e734 <_printf_i+0xa8>
 800e6be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6c2:	2b15      	cmp	r3, #21
 800e6c4:	d8f6      	bhi.n	800e6b4 <_printf_i+0x28>
 800e6c6:	a101      	add	r1, pc, #4	; (adr r1, 800e6cc <_printf_i+0x40>)
 800e6c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6cc:	0800e725 	.word	0x0800e725
 800e6d0:	0800e739 	.word	0x0800e739
 800e6d4:	0800e6b5 	.word	0x0800e6b5
 800e6d8:	0800e6b5 	.word	0x0800e6b5
 800e6dc:	0800e6b5 	.word	0x0800e6b5
 800e6e0:	0800e6b5 	.word	0x0800e6b5
 800e6e4:	0800e739 	.word	0x0800e739
 800e6e8:	0800e6b5 	.word	0x0800e6b5
 800e6ec:	0800e6b5 	.word	0x0800e6b5
 800e6f0:	0800e6b5 	.word	0x0800e6b5
 800e6f4:	0800e6b5 	.word	0x0800e6b5
 800e6f8:	0800e845 	.word	0x0800e845
 800e6fc:	0800e769 	.word	0x0800e769
 800e700:	0800e827 	.word	0x0800e827
 800e704:	0800e6b5 	.word	0x0800e6b5
 800e708:	0800e6b5 	.word	0x0800e6b5
 800e70c:	0800e867 	.word	0x0800e867
 800e710:	0800e6b5 	.word	0x0800e6b5
 800e714:	0800e769 	.word	0x0800e769
 800e718:	0800e6b5 	.word	0x0800e6b5
 800e71c:	0800e6b5 	.word	0x0800e6b5
 800e720:	0800e82f 	.word	0x0800e82f
 800e724:	682b      	ldr	r3, [r5, #0]
 800e726:	1d1a      	adds	r2, r3, #4
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	602a      	str	r2, [r5, #0]
 800e72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e734:	2301      	movs	r3, #1
 800e736:	e0a3      	b.n	800e880 <_printf_i+0x1f4>
 800e738:	6820      	ldr	r0, [r4, #0]
 800e73a:	6829      	ldr	r1, [r5, #0]
 800e73c:	0606      	lsls	r6, r0, #24
 800e73e:	f101 0304 	add.w	r3, r1, #4
 800e742:	d50a      	bpl.n	800e75a <_printf_i+0xce>
 800e744:	680e      	ldr	r6, [r1, #0]
 800e746:	602b      	str	r3, [r5, #0]
 800e748:	2e00      	cmp	r6, #0
 800e74a:	da03      	bge.n	800e754 <_printf_i+0xc8>
 800e74c:	232d      	movs	r3, #45	; 0x2d
 800e74e:	4276      	negs	r6, r6
 800e750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e754:	485e      	ldr	r0, [pc, #376]	; (800e8d0 <_printf_i+0x244>)
 800e756:	230a      	movs	r3, #10
 800e758:	e019      	b.n	800e78e <_printf_i+0x102>
 800e75a:	680e      	ldr	r6, [r1, #0]
 800e75c:	602b      	str	r3, [r5, #0]
 800e75e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e762:	bf18      	it	ne
 800e764:	b236      	sxthne	r6, r6
 800e766:	e7ef      	b.n	800e748 <_printf_i+0xbc>
 800e768:	682b      	ldr	r3, [r5, #0]
 800e76a:	6820      	ldr	r0, [r4, #0]
 800e76c:	1d19      	adds	r1, r3, #4
 800e76e:	6029      	str	r1, [r5, #0]
 800e770:	0601      	lsls	r1, r0, #24
 800e772:	d501      	bpl.n	800e778 <_printf_i+0xec>
 800e774:	681e      	ldr	r6, [r3, #0]
 800e776:	e002      	b.n	800e77e <_printf_i+0xf2>
 800e778:	0646      	lsls	r6, r0, #25
 800e77a:	d5fb      	bpl.n	800e774 <_printf_i+0xe8>
 800e77c:	881e      	ldrh	r6, [r3, #0]
 800e77e:	4854      	ldr	r0, [pc, #336]	; (800e8d0 <_printf_i+0x244>)
 800e780:	2f6f      	cmp	r7, #111	; 0x6f
 800e782:	bf0c      	ite	eq
 800e784:	2308      	moveq	r3, #8
 800e786:	230a      	movne	r3, #10
 800e788:	2100      	movs	r1, #0
 800e78a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e78e:	6865      	ldr	r5, [r4, #4]
 800e790:	60a5      	str	r5, [r4, #8]
 800e792:	2d00      	cmp	r5, #0
 800e794:	bfa2      	ittt	ge
 800e796:	6821      	ldrge	r1, [r4, #0]
 800e798:	f021 0104 	bicge.w	r1, r1, #4
 800e79c:	6021      	strge	r1, [r4, #0]
 800e79e:	b90e      	cbnz	r6, 800e7a4 <_printf_i+0x118>
 800e7a0:	2d00      	cmp	r5, #0
 800e7a2:	d04d      	beq.n	800e840 <_printf_i+0x1b4>
 800e7a4:	4615      	mov	r5, r2
 800e7a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7aa:	fb03 6711 	mls	r7, r3, r1, r6
 800e7ae:	5dc7      	ldrb	r7, [r0, r7]
 800e7b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e7b4:	4637      	mov	r7, r6
 800e7b6:	42bb      	cmp	r3, r7
 800e7b8:	460e      	mov	r6, r1
 800e7ba:	d9f4      	bls.n	800e7a6 <_printf_i+0x11a>
 800e7bc:	2b08      	cmp	r3, #8
 800e7be:	d10b      	bne.n	800e7d8 <_printf_i+0x14c>
 800e7c0:	6823      	ldr	r3, [r4, #0]
 800e7c2:	07de      	lsls	r6, r3, #31
 800e7c4:	d508      	bpl.n	800e7d8 <_printf_i+0x14c>
 800e7c6:	6923      	ldr	r3, [r4, #16]
 800e7c8:	6861      	ldr	r1, [r4, #4]
 800e7ca:	4299      	cmp	r1, r3
 800e7cc:	bfde      	ittt	le
 800e7ce:	2330      	movle	r3, #48	; 0x30
 800e7d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e7d8:	1b52      	subs	r2, r2, r5
 800e7da:	6122      	str	r2, [r4, #16]
 800e7dc:	f8cd a000 	str.w	sl, [sp]
 800e7e0:	464b      	mov	r3, r9
 800e7e2:	aa03      	add	r2, sp, #12
 800e7e4:	4621      	mov	r1, r4
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	f7ff fee2 	bl	800e5b0 <_printf_common>
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	d14c      	bne.n	800e88a <_printf_i+0x1fe>
 800e7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7f4:	b004      	add	sp, #16
 800e7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fa:	4835      	ldr	r0, [pc, #212]	; (800e8d0 <_printf_i+0x244>)
 800e7fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e800:	6829      	ldr	r1, [r5, #0]
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	f851 6b04 	ldr.w	r6, [r1], #4
 800e808:	6029      	str	r1, [r5, #0]
 800e80a:	061d      	lsls	r5, r3, #24
 800e80c:	d514      	bpl.n	800e838 <_printf_i+0x1ac>
 800e80e:	07df      	lsls	r7, r3, #31
 800e810:	bf44      	itt	mi
 800e812:	f043 0320 	orrmi.w	r3, r3, #32
 800e816:	6023      	strmi	r3, [r4, #0]
 800e818:	b91e      	cbnz	r6, 800e822 <_printf_i+0x196>
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	f023 0320 	bic.w	r3, r3, #32
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	2310      	movs	r3, #16
 800e824:	e7b0      	b.n	800e788 <_printf_i+0xfc>
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	f043 0320 	orr.w	r3, r3, #32
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	2378      	movs	r3, #120	; 0x78
 800e830:	4828      	ldr	r0, [pc, #160]	; (800e8d4 <_printf_i+0x248>)
 800e832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e836:	e7e3      	b.n	800e800 <_printf_i+0x174>
 800e838:	0659      	lsls	r1, r3, #25
 800e83a:	bf48      	it	mi
 800e83c:	b2b6      	uxthmi	r6, r6
 800e83e:	e7e6      	b.n	800e80e <_printf_i+0x182>
 800e840:	4615      	mov	r5, r2
 800e842:	e7bb      	b.n	800e7bc <_printf_i+0x130>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	6826      	ldr	r6, [r4, #0]
 800e848:	6961      	ldr	r1, [r4, #20]
 800e84a:	1d18      	adds	r0, r3, #4
 800e84c:	6028      	str	r0, [r5, #0]
 800e84e:	0635      	lsls	r5, r6, #24
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	d501      	bpl.n	800e858 <_printf_i+0x1cc>
 800e854:	6019      	str	r1, [r3, #0]
 800e856:	e002      	b.n	800e85e <_printf_i+0x1d2>
 800e858:	0670      	lsls	r0, r6, #25
 800e85a:	d5fb      	bpl.n	800e854 <_printf_i+0x1c8>
 800e85c:	8019      	strh	r1, [r3, #0]
 800e85e:	2300      	movs	r3, #0
 800e860:	6123      	str	r3, [r4, #16]
 800e862:	4615      	mov	r5, r2
 800e864:	e7ba      	b.n	800e7dc <_printf_i+0x150>
 800e866:	682b      	ldr	r3, [r5, #0]
 800e868:	1d1a      	adds	r2, r3, #4
 800e86a:	602a      	str	r2, [r5, #0]
 800e86c:	681d      	ldr	r5, [r3, #0]
 800e86e:	6862      	ldr	r2, [r4, #4]
 800e870:	2100      	movs	r1, #0
 800e872:	4628      	mov	r0, r5
 800e874:	f7f1 fd0c 	bl	8000290 <memchr>
 800e878:	b108      	cbz	r0, 800e87e <_printf_i+0x1f2>
 800e87a:	1b40      	subs	r0, r0, r5
 800e87c:	6060      	str	r0, [r4, #4]
 800e87e:	6863      	ldr	r3, [r4, #4]
 800e880:	6123      	str	r3, [r4, #16]
 800e882:	2300      	movs	r3, #0
 800e884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e888:	e7a8      	b.n	800e7dc <_printf_i+0x150>
 800e88a:	6923      	ldr	r3, [r4, #16]
 800e88c:	462a      	mov	r2, r5
 800e88e:	4649      	mov	r1, r9
 800e890:	4640      	mov	r0, r8
 800e892:	47d0      	blx	sl
 800e894:	3001      	adds	r0, #1
 800e896:	d0ab      	beq.n	800e7f0 <_printf_i+0x164>
 800e898:	6823      	ldr	r3, [r4, #0]
 800e89a:	079b      	lsls	r3, r3, #30
 800e89c:	d413      	bmi.n	800e8c6 <_printf_i+0x23a>
 800e89e:	68e0      	ldr	r0, [r4, #12]
 800e8a0:	9b03      	ldr	r3, [sp, #12]
 800e8a2:	4298      	cmp	r0, r3
 800e8a4:	bfb8      	it	lt
 800e8a6:	4618      	movlt	r0, r3
 800e8a8:	e7a4      	b.n	800e7f4 <_printf_i+0x168>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	4632      	mov	r2, r6
 800e8ae:	4649      	mov	r1, r9
 800e8b0:	4640      	mov	r0, r8
 800e8b2:	47d0      	blx	sl
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	d09b      	beq.n	800e7f0 <_printf_i+0x164>
 800e8b8:	3501      	adds	r5, #1
 800e8ba:	68e3      	ldr	r3, [r4, #12]
 800e8bc:	9903      	ldr	r1, [sp, #12]
 800e8be:	1a5b      	subs	r3, r3, r1
 800e8c0:	42ab      	cmp	r3, r5
 800e8c2:	dcf2      	bgt.n	800e8aa <_printf_i+0x21e>
 800e8c4:	e7eb      	b.n	800e89e <_printf_i+0x212>
 800e8c6:	2500      	movs	r5, #0
 800e8c8:	f104 0619 	add.w	r6, r4, #25
 800e8cc:	e7f5      	b.n	800e8ba <_printf_i+0x22e>
 800e8ce:	bf00      	nop
 800e8d0:	0800ef29 	.word	0x0800ef29
 800e8d4:	0800ef3a 	.word	0x0800ef3a

0800e8d8 <_sbrk_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d06      	ldr	r5, [pc, #24]	; (800e8f4 <_sbrk_r+0x1c>)
 800e8dc:	2300      	movs	r3, #0
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	602b      	str	r3, [r5, #0]
 800e8e4:	f000 f8b2 	bl	800ea4c <_sbrk>
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	d102      	bne.n	800e8f2 <_sbrk_r+0x1a>
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	b103      	cbz	r3, 800e8f2 <_sbrk_r+0x1a>
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	bd38      	pop	{r3, r4, r5, pc}
 800e8f4:	20005a9c 	.word	0x20005a9c

0800e8f8 <memmove>:
 800e8f8:	4288      	cmp	r0, r1
 800e8fa:	b510      	push	{r4, lr}
 800e8fc:	eb01 0402 	add.w	r4, r1, r2
 800e900:	d902      	bls.n	800e908 <memmove+0x10>
 800e902:	4284      	cmp	r4, r0
 800e904:	4623      	mov	r3, r4
 800e906:	d807      	bhi.n	800e918 <memmove+0x20>
 800e908:	1e43      	subs	r3, r0, #1
 800e90a:	42a1      	cmp	r1, r4
 800e90c:	d008      	beq.n	800e920 <memmove+0x28>
 800e90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e916:	e7f8      	b.n	800e90a <memmove+0x12>
 800e918:	4402      	add	r2, r0
 800e91a:	4601      	mov	r1, r0
 800e91c:	428a      	cmp	r2, r1
 800e91e:	d100      	bne.n	800e922 <memmove+0x2a>
 800e920:	bd10      	pop	{r4, pc}
 800e922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e92a:	e7f7      	b.n	800e91c <memmove+0x24>

0800e92c <__malloc_lock>:
 800e92c:	4801      	ldr	r0, [pc, #4]	; (800e934 <__malloc_lock+0x8>)
 800e92e:	f7ff bc4d 	b.w	800e1cc <__retarget_lock_acquire_recursive>
 800e932:	bf00      	nop
 800e934:	20005a90 	.word	0x20005a90

0800e938 <__malloc_unlock>:
 800e938:	4801      	ldr	r0, [pc, #4]	; (800e940 <__malloc_unlock+0x8>)
 800e93a:	f7ff bc48 	b.w	800e1ce <__retarget_lock_release_recursive>
 800e93e:	bf00      	nop
 800e940:	20005a90 	.word	0x20005a90

0800e944 <_free_r>:
 800e944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e946:	2900      	cmp	r1, #0
 800e948:	d044      	beq.n	800e9d4 <_free_r+0x90>
 800e94a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e94e:	9001      	str	r0, [sp, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	f1a1 0404 	sub.w	r4, r1, #4
 800e956:	bfb8      	it	lt
 800e958:	18e4      	addlt	r4, r4, r3
 800e95a:	f7ff ffe7 	bl	800e92c <__malloc_lock>
 800e95e:	4a1e      	ldr	r2, [pc, #120]	; (800e9d8 <_free_r+0x94>)
 800e960:	9801      	ldr	r0, [sp, #4]
 800e962:	6813      	ldr	r3, [r2, #0]
 800e964:	b933      	cbnz	r3, 800e974 <_free_r+0x30>
 800e966:	6063      	str	r3, [r4, #4]
 800e968:	6014      	str	r4, [r2, #0]
 800e96a:	b003      	add	sp, #12
 800e96c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e970:	f7ff bfe2 	b.w	800e938 <__malloc_unlock>
 800e974:	42a3      	cmp	r3, r4
 800e976:	d908      	bls.n	800e98a <_free_r+0x46>
 800e978:	6825      	ldr	r5, [r4, #0]
 800e97a:	1961      	adds	r1, r4, r5
 800e97c:	428b      	cmp	r3, r1
 800e97e:	bf01      	itttt	eq
 800e980:	6819      	ldreq	r1, [r3, #0]
 800e982:	685b      	ldreq	r3, [r3, #4]
 800e984:	1949      	addeq	r1, r1, r5
 800e986:	6021      	streq	r1, [r4, #0]
 800e988:	e7ed      	b.n	800e966 <_free_r+0x22>
 800e98a:	461a      	mov	r2, r3
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	b10b      	cbz	r3, 800e994 <_free_r+0x50>
 800e990:	42a3      	cmp	r3, r4
 800e992:	d9fa      	bls.n	800e98a <_free_r+0x46>
 800e994:	6811      	ldr	r1, [r2, #0]
 800e996:	1855      	adds	r5, r2, r1
 800e998:	42a5      	cmp	r5, r4
 800e99a:	d10b      	bne.n	800e9b4 <_free_r+0x70>
 800e99c:	6824      	ldr	r4, [r4, #0]
 800e99e:	4421      	add	r1, r4
 800e9a0:	1854      	adds	r4, r2, r1
 800e9a2:	42a3      	cmp	r3, r4
 800e9a4:	6011      	str	r1, [r2, #0]
 800e9a6:	d1e0      	bne.n	800e96a <_free_r+0x26>
 800e9a8:	681c      	ldr	r4, [r3, #0]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	6053      	str	r3, [r2, #4]
 800e9ae:	4421      	add	r1, r4
 800e9b0:	6011      	str	r1, [r2, #0]
 800e9b2:	e7da      	b.n	800e96a <_free_r+0x26>
 800e9b4:	d902      	bls.n	800e9bc <_free_r+0x78>
 800e9b6:	230c      	movs	r3, #12
 800e9b8:	6003      	str	r3, [r0, #0]
 800e9ba:	e7d6      	b.n	800e96a <_free_r+0x26>
 800e9bc:	6825      	ldr	r5, [r4, #0]
 800e9be:	1961      	adds	r1, r4, r5
 800e9c0:	428b      	cmp	r3, r1
 800e9c2:	bf04      	itt	eq
 800e9c4:	6819      	ldreq	r1, [r3, #0]
 800e9c6:	685b      	ldreq	r3, [r3, #4]
 800e9c8:	6063      	str	r3, [r4, #4]
 800e9ca:	bf04      	itt	eq
 800e9cc:	1949      	addeq	r1, r1, r5
 800e9ce:	6021      	streq	r1, [r4, #0]
 800e9d0:	6054      	str	r4, [r2, #4]
 800e9d2:	e7ca      	b.n	800e96a <_free_r+0x26>
 800e9d4:	b003      	add	sp, #12
 800e9d6:	bd30      	pop	{r4, r5, pc}
 800e9d8:	20005a94 	.word	0x20005a94

0800e9dc <_realloc_r>:
 800e9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e0:	4680      	mov	r8, r0
 800e9e2:	4614      	mov	r4, r2
 800e9e4:	460e      	mov	r6, r1
 800e9e6:	b921      	cbnz	r1, 800e9f2 <_realloc_r+0x16>
 800e9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	f7ff bc0f 	b.w	800e210 <_malloc_r>
 800e9f2:	b92a      	cbnz	r2, 800ea00 <_realloc_r+0x24>
 800e9f4:	f7ff ffa6 	bl	800e944 <_free_r>
 800e9f8:	4625      	mov	r5, r4
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea00:	f000 f81b 	bl	800ea3a <_malloc_usable_size_r>
 800ea04:	4284      	cmp	r4, r0
 800ea06:	4607      	mov	r7, r0
 800ea08:	d802      	bhi.n	800ea10 <_realloc_r+0x34>
 800ea0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea0e:	d812      	bhi.n	800ea36 <_realloc_r+0x5a>
 800ea10:	4621      	mov	r1, r4
 800ea12:	4640      	mov	r0, r8
 800ea14:	f7ff fbfc 	bl	800e210 <_malloc_r>
 800ea18:	4605      	mov	r5, r0
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d0ed      	beq.n	800e9fa <_realloc_r+0x1e>
 800ea1e:	42bc      	cmp	r4, r7
 800ea20:	4622      	mov	r2, r4
 800ea22:	4631      	mov	r1, r6
 800ea24:	bf28      	it	cs
 800ea26:	463a      	movcs	r2, r7
 800ea28:	f7ff fb7a 	bl	800e120 <memcpy>
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4640      	mov	r0, r8
 800ea30:	f7ff ff88 	bl	800e944 <_free_r>
 800ea34:	e7e1      	b.n	800e9fa <_realloc_r+0x1e>
 800ea36:	4635      	mov	r5, r6
 800ea38:	e7df      	b.n	800e9fa <_realloc_r+0x1e>

0800ea3a <_malloc_usable_size_r>:
 800ea3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea3e:	1f18      	subs	r0, r3, #4
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	bfbc      	itt	lt
 800ea44:	580b      	ldrlt	r3, [r1, r0]
 800ea46:	18c0      	addlt	r0, r0, r3
 800ea48:	4770      	bx	lr
	...

0800ea4c <_sbrk>:
 800ea4c:	4a04      	ldr	r2, [pc, #16]	; (800ea60 <_sbrk+0x14>)
 800ea4e:	6811      	ldr	r1, [r2, #0]
 800ea50:	4603      	mov	r3, r0
 800ea52:	b909      	cbnz	r1, 800ea58 <_sbrk+0xc>
 800ea54:	4903      	ldr	r1, [pc, #12]	; (800ea64 <_sbrk+0x18>)
 800ea56:	6011      	str	r1, [r2, #0]
 800ea58:	6810      	ldr	r0, [r2, #0]
 800ea5a:	4403      	add	r3, r0
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	4770      	bx	lr
 800ea60:	20005aa0 	.word	0x20005aa0
 800ea64:	20005aa8 	.word	0x20005aa8

0800ea68 <_init>:
 800ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6a:	bf00      	nop
 800ea6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea6e:	bc08      	pop	{r3}
 800ea70:	469e      	mov	lr, r3
 800ea72:	4770      	bx	lr

0800ea74 <_fini>:
 800ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea76:	bf00      	nop
 800ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7a:	bc08      	pop	{r3}
 800ea7c:	469e      	mov	lr, r3
 800ea7e:	4770      	bx	lr
