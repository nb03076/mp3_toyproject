
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012dc  08015250  08015250  00025250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801652c  0801652c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801652c  0801652c  0002652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016534  08016534  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016534  08016534  00026534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016538  08016538  00026538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801653c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00008ef4  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008f70  20008f70  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005e08a  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009b48  00000000  00000000  0008e136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004850  00000000  00000000  00097c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004350  00000000  00000000  0009c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000355cc  00000000  00000000  000a0820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044f61  00000000  00000000  000d5dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001246fe  00000000  00000000  0011ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0023f44b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000137d0  00000000  00000000  0023f49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  00252c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015238 	.word	0x08015238

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08015238 	.word	0x08015238

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20002f7c 	.word	0x20002f7c
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <ds3231_register_driver>:
static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size);

static inline uint8_t B2D(uint8_t bcd);
static inline uint8_t D2B(uint8_t decimal);

void ds3231_register_driver(i2cdrv_t* drv) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	ds3231i2cdrv = drv;
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <ds3231_register_driver+0x1c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000098 	.word	0x20000098

08000654 <ds3231_get_time>:

bool ds3231_get_time(ds3231_time_t *info) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t data[7];

	if(ds3231_read_reg(DS3231_REG_SEC, data, 7) != true) {
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2207      	movs	r2, #7
 8000662:	4619      	mov	r1, r3
 8000664:	2000      	movs	r0, #0
 8000666:	f000 f89d 	bl	80007a4 <ds3231_read_reg>
 800066a:	4603      	mov	r3, r0
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d004      	beq.n	8000680 <ds3231_get_time+0x2c>
		hal_cli_printf("ds3231 read register failed");
 8000676:	482a      	ldr	r0, [pc, #168]	; (8000720 <ds3231_get_time+0xcc>)
 8000678:	f00f fb92 	bl	800fda0 <hal_cli_printf>
		return false;
 800067c:	2300      	movs	r3, #0
 800067e:	e04a      	b.n	8000716 <ds3231_get_time+0xc2>
	}

	info->sec = B2D(data[0] & 0x7F);
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f8a5 	bl	80007d8 <B2D>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	701a      	strb	r2, [r3, #0]
	info->min = B2D(data[1] & 0x7F);
 8000696:	7a7b      	ldrb	r3, [r7, #9]
 8000698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f89a 	bl	80007d8 <B2D>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	705a      	strb	r2, [r3, #1]
	info->hour = B2D(data[2] & 0x3F);
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f88f 	bl	80007d8 <B2D>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	709a      	strb	r2, [r3, #2]
	info->day = B2D(data[3] & 0x07);
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f884 	bl	80007d8 <B2D>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	70da      	strb	r2, [r3, #3]
	info->date = B2D(data[4] & 0x3F);
 80006d8:	7b3b      	ldrb	r3, [r7, #12]
 80006da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f879 	bl	80007d8 <B2D>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	711a      	strb	r2, [r3, #4]
	info->month = B2D(data[5] & 0x1F);
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f86e 	bl	80007d8 <B2D>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	715a      	strb	r2, [r3, #5]
	info->year = B2D(data[6] & 0xFF);
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f866 	bl	80007d8 <B2D>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	719a      	strb	r2, [r3, #6]

	return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08015250 	.word	0x08015250

08000724 <ds3231_day_to_string>:
void ds3231_print_time(ds3231_time_t *info) {
	hal_cli_printf("hms : %d %d %d",info->hour, info->min, info->sec);
	hal_cli_printf("ymdd : %d %d %d %s", info->year, info->month, info->date, ds3231_day_to_string(info->day));
}

char* ds3231_day_to_string(ds3231_day_t day) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	switch(day) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3b01      	subs	r3, #1
 8000732:	2b06      	cmp	r3, #6
 8000734:	d81e      	bhi.n	8000774 <ds3231_day_to_string+0x50>
 8000736:	a201      	add	r2, pc, #4	; (adr r2, 800073c <ds3231_day_to_string+0x18>)
 8000738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073c:	08000759 	.word	0x08000759
 8000740:	0800075d 	.word	0x0800075d
 8000744:	08000761 	.word	0x08000761
 8000748:	08000765 	.word	0x08000765
 800074c:	08000769 	.word	0x08000769
 8000750:	0800076d 	.word	0x0800076d
 8000754:	08000771 	.word	0x08000771
	case DS3231_DAY_SUN:
		return "Sun";
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <ds3231_day_to_string+0x60>)
 800075a:	e00f      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_MON:
		return "Mon";
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <ds3231_day_to_string+0x64>)
 800075e:	e00d      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_TUE:
		return "Tue";
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <ds3231_day_to_string+0x68>)
 8000762:	e00b      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_WED:
		return "Wed";
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <ds3231_day_to_string+0x6c>)
 8000766:	e009      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_THU:
		return "Thu";
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <ds3231_day_to_string+0x70>)
 800076a:	e007      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_FRI:
		return "Fri";
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <ds3231_day_to_string+0x74>)
 800076e:	e005      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_SAT:
		return "Sat";
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <ds3231_day_to_string+0x78>)
 8000772:	e003      	b.n	800077c <ds3231_day_to_string+0x58>
	default:
		hal_cli_printf("ds3231 day to string argument error");
 8000774:	480a      	ldr	r0, [pc, #40]	; (80007a0 <ds3231_day_to_string+0x7c>)
 8000776:	f00f fb13 	bl	800fda0 <hal_cli_printf>
		return 0;
 800077a:	2300      	movs	r3, #0
	}
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	08015290 	.word	0x08015290
 8000788:	08015294 	.word	0x08015294
 800078c:	08015298 	.word	0x08015298
 8000790:	0801529c 	.word	0x0801529c
 8000794:	080152a0 	.word	0x080152a0
 8000798:	080152a4 	.word	0x080152a4
 800079c:	080152a8 	.word	0x080152a8
 80007a0:	080152ac 	.word	0x080152ac

080007a4 <ds3231_read_reg>:

static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	73fb      	strb	r3, [r7, #15]
	return hal_i2c_receive(
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <ds3231_read_reg+0x30>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	21d0      	movs	r1, #208	; 0xd0
 80007c4:	f011 f86e 	bl	80118a4 <hal_i2c_receive>
 80007c8:	4603      	mov	r3, r0
			DS3231_DEV_ADDR,
			reg,
			data,
			size,
			DS3231_I2C_TIMEOUT);
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000098 	.word	0x20000098

080007d8 <B2D>:

static inline uint8_t B2D(uint8_t bcd) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	091b      	lsrs	r3, r3, #4
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	0092      	lsls	r2, r2, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <icon_draw_pause>:
    u8g2_SetBitmapMode(handle,1);
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_play);
    u8g2_SendBuffer(handle);
}

void icon_draw_pause(u8g2_t* handle, u8g2_uint_t x, u8g2_uint_t y) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af02      	add	r7, sp, #8
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(handle,1);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f00e fa6e 	bl	800ed00 <u8g2_SetDrawColor>
    u8g2_SetBitmapMode(handle,1);
 8000824:	2101      	movs	r1, #1
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f00d fa97 	bl	800dd5a <u8g2_SetBitmapMode>
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_pause);
 800082c:	78ba      	ldrb	r2, [r7, #2]
 800082e:	78f9      	ldrb	r1, [r7, #3]
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <icon_draw_pause+0x44>)
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	2308      	movs	r3, #8
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f00d fb0b 	bl	800de56 <u8g2_DrawBitmap>
    u8g2_SendBuffer(handle);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f00d fb9d 	bl	800df80 <u8g2_SendBuffer>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	08015778 	.word	0x08015778

08000854 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	619a      	str	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	041a      	lsls	r2, r3, #16
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	619a      	str	r2, [r3, #24]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <u8x8_stm32_gpio_and_delay>:
#define SSD1306_TIMEOUT		100
#define SSD1306_SPIDRV		&spi2drv

// u8g2 gpio & delay control callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	72fb      	strb	r3, [r7, #11]
 800089e:	4613      	mov	r3, r2
 80008a0:	72bb      	strb	r3, [r7, #10]
  /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
  switch(msg)
 80008a2:	7afb      	ldrb	r3, [r7, #11]
 80008a4:	3b28      	subs	r3, #40	; 0x28
 80008a6:	2b23      	cmp	r3, #35	; 0x23
 80008a8:	d87a      	bhi.n	80009a0 <u8x8_stm32_gpio_and_delay+0x110>
 80008aa:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <u8x8_stm32_gpio_and_delay+0x20>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	080009a1 	.word	0x080009a1
 80008b4:	08000941 	.word	0x08000941
 80008b8:	080009a1 	.word	0x080009a1
 80008bc:	080009a1 	.word	0x080009a1
 80008c0:	080009a1 	.word	0x080009a1
 80008c4:	080009a1 	.word	0x080009a1
 80008c8:	080009a1 	.word	0x080009a1
 80008cc:	080009a1 	.word	0x080009a1
 80008d0:	080009a1 	.word	0x080009a1
 80008d4:	080009a1 	.word	0x080009a1
 80008d8:	080009a1 	.word	0x080009a1
 80008dc:	080009a1 	.word	0x080009a1
 80008e0:	080009a1 	.word	0x080009a1
 80008e4:	080009a1 	.word	0x080009a1
 80008e8:	080009a1 	.word	0x080009a1
 80008ec:	080009a1 	.word	0x080009a1
 80008f0:	080009a1 	.word	0x080009a1
 80008f4:	080009a1 	.word	0x080009a1
 80008f8:	080009a1 	.word	0x080009a1
 80008fc:	080009a1 	.word	0x080009a1
 8000900:	080009a1 	.word	0x080009a1
 8000904:	080009a1 	.word	0x080009a1
 8000908:	080009a1 	.word	0x080009a1
 800090c:	080009a1 	.word	0x080009a1
 8000910:	080009a1 	.word	0x080009a1
 8000914:	080009a1 	.word	0x080009a1
 8000918:	080009a1 	.word	0x080009a1
 800091c:	080009a1 	.word	0x080009a1
 8000920:	080009a1 	.word	0x080009a1
 8000924:	080009a1 	.word	0x080009a1
 8000928:	080009a1 	.word	0x080009a1
 800092c:	080009a1 	.word	0x080009a1
 8000930:	080009a1 	.word	0x080009a1
 8000934:	08000953 	.word	0x08000953
 8000938:	0800096d 	.word	0x0800096d
 800093c:	08000987 	.word	0x08000987
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    /* Insert codes for initialization */
    break;
  case U8X8_MSG_DELAY_MILLI:
    /* ms Delay */
	hal_delay_us(10*arg_int);
 8000940:	7aba      	ldrb	r2, [r7, #10]
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f00f fce4 	bl	8010318 <hal_delay_us>
    break;
 8000950:	e026      	b.n	80009a0 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_CS:
    /* Insert codes for SS pin control */
    if(arg_int) {
 8000952:	7abb      	ldrb	r3, [r7, #10]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <u8x8_stm32_gpio_and_delay+0xd2>
      LL_GPIO_SetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000958:	2104      	movs	r1, #4
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <u8x8_stm32_gpio_and_delay+0x11c>)
 800095c:	f7ff ff7a 	bl	8000854 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
    }
    break;
 8000960:	e01e      	b.n	80009a0 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000962:	2104      	movs	r1, #4
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <u8x8_stm32_gpio_and_delay+0x11c>)
 8000966:	f7ff ff83 	bl	8000870 <LL_GPIO_ResetOutputPin>
    break;
 800096a:	e019      	b.n	80009a0 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_DC:
    /* Insert codes for DC pin control */
    if(arg_int) {
 800096c:	7abb      	ldrb	r3, [r7, #10]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <u8x8_stm32_gpio_and_delay+0xec>
      LL_GPIO_SetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000972:	2102      	movs	r1, #2
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <u8x8_stm32_gpio_and_delay+0x11c>)
 8000976:	f7ff ff6d 	bl	8000854 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
    }
    break;
 800097a:	e011      	b.n	80009a0 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 800097c:	2102      	movs	r1, #2
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <u8x8_stm32_gpio_and_delay+0x11c>)
 8000980:	f7ff ff76 	bl	8000870 <LL_GPIO_ResetOutputPin>
    break;
 8000984:	e00c      	b.n	80009a0 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_RESET:
    /* Insert codes for RST pin control */
    if(arg_int) {
 8000986:	7abb      	ldrb	r3, [r7, #10]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d004      	beq.n	8000996 <u8x8_stm32_gpio_and_delay+0x106>
      LL_GPIO_SetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 800098c:	2101      	movs	r1, #1
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <u8x8_stm32_gpio_and_delay+0x11c>)
 8000990:	f7ff ff60 	bl	8000854 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
    }
    break;
 8000994:	e003      	b.n	800099e <u8x8_stm32_gpio_and_delay+0x10e>
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 8000996:	2101      	movs	r1, #1
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <u8x8_stm32_gpio_and_delay+0x11c>)
 800099a:	f7ff ff69 	bl	8000870 <LL_GPIO_ResetOutputPin>
    break;
 800099e:	bf00      	nop
  }
  return 1;
 80009a0:	2301      	movs	r3, #1
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020800 	.word	0x40020800

080009b0 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	72fb      	strb	r3, [r7, #11]
 80009be:	4613      	mov	r3, r2
 80009c0:	72bb      	strb	r3, [r7, #10]
  uint8_t* data = arg_ptr;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	617b      	str	r3, [r7, #20]

  switch(msg) {
 80009c6:	7afb      	ldrb	r3, [r7, #11]
 80009c8:	3b14      	subs	r3, #20
 80009ca:	2b0c      	cmp	r3, #12
 80009cc:	d842      	bhi.n	8000a54 <u8x8_byte_stm32_hw_spi+0xa4>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <u8x8_byte_stm32_hw_spi+0x24>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	08000a59 	.word	0x08000a59
 80009d8:	08000a55 	.word	0x08000a55
 80009dc:	08000a55 	.word	0x08000a55
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	08000a25 	.word	0x08000a25
 80009e8:	08000a3d 	.word	0x08000a3d
 80009ec:	08000a55 	.word	0x08000a55
 80009f0:	08000a55 	.word	0x08000a55
 80009f4:	08000a55 	.word	0x08000a55
 80009f8:	08000a55 	.word	0x08000a55
 80009fc:	08000a55 	.word	0x08000a55
 8000a00:	08000a55 	.word	0x08000a55
 8000a04:	08000a17 	.word	0x08000a17
  case U8X8_MSG_BYTE_SEND:
    /* Insert codes to transmit data */
	hal_spi_transfer(SSD1306_SPIDRV, data, arg_int, SSD1306_TIMEOUT);
 8000a08:	7aba      	ldrb	r2, [r7, #10]
 8000a0a:	2364      	movs	r3, #100	; 0x64
 8000a0c:	6979      	ldr	r1, [r7, #20]
 8000a0e:	4815      	ldr	r0, [pc, #84]	; (8000a64 <u8x8_byte_stm32_hw_spi+0xb4>)
 8000a10:	f011 ff8c 	bl	801292c <hal_spi_transfer>
    break;
 8000a14:	e021      	b.n	8000a5a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_INIT:
    /* Insert codes to begin SPI transmission */
    break;
  case U8X8_MSG_BYTE_SET_DC:
    /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
    u8x8_gpio_SetDC(u8x8, arg_int);
 8000a16:	7abb      	ldrb	r3, [r7, #10]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	214a      	movs	r1, #74	; 0x4a
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f00e feca 	bl	800f7b6 <u8x8_gpio_call>
    break;
 8000a22:	e01a      	b.n	8000a5a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_START_TRANSFER:
    /* Select slave, U8X8_MSG_GPIO_CS will be called */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2149      	movs	r1, #73	; 0x49
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f00e fec1 	bl	800f7b6 <u8x8_gpio_call>
    hal_delay_us(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f00f fc6f 	bl	8010318 <hal_delay_us>
    break;
 8000a3a:	e00e      	b.n	8000a5a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_END_TRANSFER:
	hal_delay_us(100);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f00f fc6b 	bl	8010318 <hal_delay_us>
    /* Insert codes to end SPI transmission */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	785b      	ldrb	r3, [r3, #1]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	2149      	movs	r1, #73	; 0x49
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f00e feb2 	bl	800f7b6 <u8x8_gpio_call>
    break;
 8000a52:	e002      	b.n	8000a5a <u8x8_byte_stm32_hw_spi+0xaa>
  default:
    return 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	e001      	b.n	8000a5c <u8x8_byte_stm32_hw_spi+0xac>
    break;
 8000a58:	bf00      	nop
  }
  return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20005a78 	.word	0x20005a78

08000a68 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	601a      	str	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_GPIO_IsInputPinSet>:
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2301      	moveq	r3, #1
 8000aa8:	2300      	movne	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	889a      	ldrh	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8000ad4:	e006      	b.n	8000ae4 <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	0412      	lsls	r2, r2, #16
 8000ae2:	619a      	str	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <hal_gpio_readpin>:
	} else {
		return false;
	}
}

static inline uint32_t hal_gpio_readpin(const GpioPin* gpio) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	return LL_GPIO_IsInputPinSet(gpio->port, gpio->pin);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	889b      	ldrh	r3, [r3, #4]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff ffc3 	bl	8000a8e <LL_GPIO_IsInputPinSet>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <VS1053_Init>:
/* endFill byte is required to stop playing */
uint8_t endFillByte;

/* Initialize VS1053 */
bool VS1053_Init()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	XCS_HIGH;		    /* XCS High */
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4841      	ldr	r0, [pc, #260]	; (8000c24 <VS1053_Init+0x110>)
 8000b1e:	f7ff ffcb 	bl	8000ab8 <hal_gpio_write>
	XDCS_HIGH;		    /* XDCS High */
 8000b22:	2101      	movs	r1, #1
 8000b24:	4840      	ldr	r0, [pc, #256]	; (8000c28 <VS1053_Init+0x114>)
 8000b26:	f7ff ffc7 	bl	8000ab8 <hal_gpio_write>
	VS1053_Reset();     /* Hard Reset */
 8000b2a:	f000 f883 	bl	8000c34 <VS1053_Reset>

	/* MP3 Mode GPIO configuration */
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC017)) return false; /* GPIO direction */
 8000b2e:	2307      	movs	r3, #7
 8000b30:	f24c 0117 	movw	r1, #49175	; 0xc017
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f999 	bl	8000e6c <VS1053_SciWrite>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f083 0301 	eor.w	r3, r3, #1
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <VS1053_Init+0x36>
 8000b46:	2300      	movs	r3, #0
 8000b48:	e067      	b.n	8000c1a <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 3)) return false;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f98c 	bl	8000e6c <VS1053_SciWrite>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f083 0301 	eor.w	r3, r3, #1
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <VS1053_Init+0x50>
 8000b60:	2300      	movs	r3, #0
 8000b62:	e05a      	b.n	8000c1a <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC019)) return false; /* GPIO output */
 8000b64:	2307      	movs	r3, #7
 8000b66:	f24c 0119 	movw	r1, #49177	; 0xc019
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f97e 	bl	8000e6c <VS1053_SciWrite>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f083 0301 	eor.w	r3, r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <VS1053_Init+0x6c>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e04c      	b.n	8000c1a <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000b80:	2306      	movs	r3, #6
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f971 	bl	8000e6c <VS1053_SciWrite>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <VS1053_Init+0x86>
 8000b96:	2300      	movs	r3, #0
 8000b98:	e03f      	b.n	8000c1a <VS1053_Init+0x106>

	/* Soft reset */
	if(!VS1053_SoftReset()) return false;
 8000b9a:	f000 f86d 	bl	8000c78 <VS1053_SoftReset>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f083 0301 	eor.w	r3, r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <VS1053_Init+0x9a>
 8000baa:	2300      	movs	r3, #0
 8000bac:	e035      	b.n	8000c1a <VS1053_Init+0x106>

	/* x4.0 Clock */
	if(!VS1053_SciWrite(VS1053_REG_CLOCKF, 0x8000)) return false;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f959 	bl	8000e6c <VS1053_SciWrite>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <VS1053_Init+0xb6>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e027      	b.n	8000c1a <VS1053_Init+0x106>

	LL_SPI_SetBaudRatePrescaler(vs1053spidrv->spi, LL_SPI_BAUDRATEPRESCALER_DIV32); /* 90MHz / 16 = about 5.6mhz */
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <VS1053_Init+0x118>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff48 	bl	8000a68 <LL_SPI_SetBaudRatePrescaler>

	/* Read endFill Byte */
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000bd8:	2307      	movs	r3, #7
 8000bda:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f944 	bl	8000e6c <VS1053_SciWrite>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f083 0301 	eor.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <VS1053_Init+0xe0>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e012      	b.n	8000c1a <VS1053_Init+0x106>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000bf4:	2206      	movs	r2, #6
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f000 f97c 	bl	8000ef8 <VS1053_SciRead>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <VS1053_Init+0xfc>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e004      	b.n	8000c1a <VS1053_Init+0x106>
	endFillByte = regVal & 0xFF;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <VS1053_Init+0x11c>)
 8000c16:	701a      	strb	r2, [r3, #0]

	return true;
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08016428 	.word	0x08016428
 8000c28:	08016430 	.word	0x08016430
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	2000009c 	.word	0x2000009c

08000c34 <VS1053_Reset>:

/* Hard reset */
void VS1053_Reset()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8000c3a:	23ff      	movs	r3, #255	; 0xff
 8000c3c:	71fb      	strb	r3, [r7, #7]
	XRST_LOW;		                                    /* XRST Low */
 8000c3e:	2100      	movs	r1, #0
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <VS1053_Reset+0x3c>)
 8000c42:	f7ff ff39 	bl	8000ab8 <hal_gpio_write>
	hal_spi_transfer(vs1053spidrv, &dummy, 1, VS1053_SPI_TIMEOUT); /* Tx Dummy */
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <VS1053_Reset+0x40>)
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	1df9      	adds	r1, r7, #7
 8000c4c:	2364      	movs	r3, #100	; 0x64
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f011 fe6c 	bl	801292c <hal_spi_transfer>
	LL_mDelay(10);										/* 10ms Delay */
 8000c54:	200a      	movs	r0, #10
 8000c56:	f004 fb2b 	bl	80052b0 <LL_mDelay>
	XRST_HIGH;			                                /* XRST High */
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <VS1053_Reset+0x3c>)
 8000c5e:	f7ff ff2b 	bl	8000ab8 <hal_gpio_write>
	LL_mDelay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f004 fb24 	bl	80052b0 <LL_mDelay>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	08016438 	.word	0x08016438
 8000c74:	20000000 	.word	0x20000000

08000c78 <VS1053_SoftReset>:

/* Soft reset */
bool VS1053_SoftReset()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_MODE, 0x4804)) return false;	/* SM LINE1 | SM SDINEW | SM RESET */
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f644 0104 	movw	r1, #18436	; 0x4804
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f8f2 	bl	8000e6c <VS1053_SciWrite>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <VS1053_SoftReset+0x20>
 8000c94:	2300      	movs	r3, #0
 8000c96:	e003      	b.n	8000ca0 <VS1053_SoftReset+0x28>
	LL_mDelay(100);
 8000c98:	2064      	movs	r0, #100	; 0x64
 8000c9a:	f004 fb09 	bl	80052b0 <LL_mDelay>
	return true;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <VS1053_SetVolume>:

/* Volume control */
bool VS1053_SetVolume(uint8_t volumeLeft, uint8_t volumeRight)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	71bb      	strb	r3, [r7, #6]
    uint16_t volume;
    volume = ( volumeLeft << 8 ) + volumeRight;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	81fb      	strh	r3, [r7, #14]

    if(!VS1053_SciWrite(VS1053_REG_VOL, volume)) return false;
 8000cc4:	220b      	movs	r2, #11
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4610      	mov	r0, r2
 8000ccc:	f000 f8ce 	bl	8000e6c <VS1053_SciWrite>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f083 0301 	eor.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <VS1053_SetVolume+0x3c>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e000      	b.n	8000ce2 <VS1053_SetVolume+0x3e>
    return true;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <VS1053_SetMode>:


/* Mode control */
bool VS1053_SetMode(uint16_t mode)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_MODE, mode)) return false;
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	f000 f8b6 	bl	8000e6c <VS1053_SciWrite>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f083 0301 	eor.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <VS1053_SetMode+0x26>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e000      	b.n	8000d12 <VS1053_SetMode+0x28>
	return true;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <VS1053_GetMode>:

bool VS1053_GetMode(uint16_t *mode)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	if(!VS1053_SciRead(VS1053_REG_MODE, mode)) return false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f8e6 	bl	8000ef8 <VS1053_SciRead>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <VS1053_GetMode+0x22>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e000      	b.n	8000d3e <VS1053_GetMode+0x24>
	return true;
 8000d3c:	2301      	movs	r3, #1
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <VS1053_AutoResync>:

/* Resync control */
bool VS1053_AutoResync()
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E29)) return false; /* Auto Resync */
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	f641 6129 	movw	r1, #7721	; 0x1e29
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f88b 	bl	8000e6c <VS1053_SciWrite>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f083 0301 	eor.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <VS1053_AutoResync+0x20>
 8000d62:	2300      	movs	r3, #0
 8000d64:	e00d      	b.n	8000d82 <VS1053_AutoResync+0x3c>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000d66:	2306      	movs	r3, #6
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f87e 	bl	8000e6c <VS1053_SciWrite>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f083 0301 	eor.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <VS1053_AutoResync+0x3a>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e000      	b.n	8000d82 <VS1053_AutoResync+0x3c>
	return true;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <VS1053_SetDecodeTime>:

/* Set decode time */
bool VS1053_SetDecodeTime(uint16_t time)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000d90:	2204      	movs	r2, #4
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4619      	mov	r1, r3
 8000d96:	4610      	mov	r0, r2
 8000d98:	f000 f868 	bl	8000e6c <VS1053_SciWrite>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f083 0301 	eor.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <VS1053_SetDecodeTime+0x26>
 8000da8:	2300      	movs	r3, #0
 8000daa:	e00e      	b.n	8000dca <VS1053_SetDecodeTime+0x44>
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000dac:	2204      	movs	r2, #4
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4610      	mov	r0, r2
 8000db4:	f000 f85a 	bl	8000e6c <VS1053_SciWrite>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f083 0301 	eor.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <VS1053_SetDecodeTime+0x42>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e000      	b.n	8000dca <VS1053_SetDecodeTime+0x44>
	return true;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <VS1053_SendEndFill>:
	return time;
}

/* Send endfill bytes */
bool VS1053_SendEndFill(uint16_t num)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000dde:	2307      	movs	r3, #7
 8000de0:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f841 	bl	8000e6c <VS1053_SciWrite>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f083 0301 	eor.w	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <VS1053_SendEndFill+0x26>
 8000df6:	2300      	movs	r3, #0
 8000df8:	e022      	b.n	8000e40 <VS1053_SendEndFill+0x6c>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000dfa:	2206      	movs	r2, #6
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	4610      	mov	r0, r2
 8000e04:	f000 f878 	bl	8000ef8 <VS1053_SciRead>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f083 0301 	eor.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <VS1053_SendEndFill+0x44>
 8000e14:	2300      	movs	r3, #0
 8000e16:	e013      	b.n	8000e40 <VS1053_SendEndFill+0x6c>
	endFillByte = regVal & 0xFF;
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <VS1053_SendEndFill+0x74>)
 8000e1e:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < num; i++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	81fb      	strh	r3, [r7, #14]
 8000e24:	e007      	b.n	8000e36 <VS1053_SendEndFill+0x62>
	{
		VS1053_SdiWrite(endFillByte);
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <VS1053_SendEndFill+0x74>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f8da 	bl	8000fe4 <VS1053_SdiWrite>
	for(uint16_t i = 0; i < num; i++)
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	3301      	adds	r3, #1
 8000e34:	81fb      	strh	r3, [r7, #14]
 8000e36:	89fa      	ldrh	r2, [r7, #14]
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3f3      	bcc.n	8000e26 <VS1053_SendEndFill+0x52>
	}
	return true;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000009c 	.word	0x2000009c

08000e4c <VS1053_IsBusy>:

/* Check DREQ pin */
bool VS1053_IsBusy()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	if(hal_gpio_readpin(&gpio_vs1053_dreq) == 1) return false;
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <VS1053_IsBusy+0x1c>)
 8000e52:	f7ff fe4d 	bl	8000af0 <hal_gpio_readpin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <VS1053_IsBusy+0x14>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e000      	b.n	8000e62 <VS1053_IsBusy+0x16>
	else return true; // busy
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08016440 	.word	0x08016440

08000e6c <VS1053_SciWrite>:

/* SCI Tx */
bool VS1053_SciWrite( uint8_t address, uint16_t input )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	buffer[0] = VS1053_WRITE_CMD;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	737b      	strb	r3, [r7, #13]
	buffer[2] = input >> 8;			/* Input MSB */
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = input & 0x00FF;		/* Input LSB */
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	73fb      	strb	r3, [r7, #15]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000e94:	bf00      	nop
 8000e96:	4815      	ldr	r0, [pc, #84]	; (8000eec <VS1053_SciWrite+0x80>)
 8000e98:	f7ff fe2a 	bl	8000af0 <hal_gpio_readpin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f9      	beq.n	8000e96 <VS1053_SciWrite+0x2a>

	XCS_LOW;			/* XCS Low */
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <VS1053_SciWrite+0x84>)
 8000ea6:	f7ff fe07 	bl	8000ab8 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, buffer, sizeof(buffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <VS1053_SciWrite+0x88>)
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	f107 010c 	add.w	r1, r7, #12
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	f011 fd39 	bl	801292c <hal_spi_transfer>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f083 0301 	eor.w	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <VS1053_SciWrite+0x5e>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e00b      	b.n	8000ee2 <VS1053_SciWrite+0x76>
	XCS_HIGH;			/* XCS High */
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <VS1053_SciWrite+0x84>)
 8000ece:	f7ff fdf3 	bl	8000ab8 <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000ed2:	bf00      	nop
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <VS1053_SciWrite+0x80>)
 8000ed6:	f7ff fe0b 	bl	8000af0 <hal_gpio_readpin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f9      	beq.n	8000ed4 <VS1053_SciWrite+0x68>

	return true;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08016440 	.word	0x08016440
 8000ef0:	08016428 	.word	0x08016428
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <VS1053_SciRead>:

/* SCI TxRx */
bool VS1053_SciRead( uint8_t address, uint16_t *res)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8000f04:	23ff      	movs	r3, #255	; 0xff
 8000f06:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];

	txBuffer[0] = VS1053_READ_CMD;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = address;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	737b      	strb	r3, [r7, #13]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000f10:	bf00      	nop
 8000f12:	4831      	ldr	r0, [pc, #196]	; (8000fd8 <VS1053_SciRead+0xe0>)
 8000f14:	f7ff fdec 	bl	8000af0 <hal_gpio_readpin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f9      	beq.n	8000f12 <VS1053_SciRead+0x1a>

	XCS_LOW;        /* XCS Low */
 8000f1e:	2100      	movs	r1, #0
 8000f20:	482e      	ldr	r0, [pc, #184]	; (8000fdc <VS1053_SciRead+0xe4>)
 8000f22:	f7ff fdc9 	bl	8000ab8 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, txBuffer, sizeof(txBuffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <VS1053_SciRead+0xe8>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	f107 010c 	add.w	r1, r7, #12
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	2202      	movs	r2, #2
 8000f32:	f011 fcfb 	bl	801292c <hal_spi_transfer>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f083 0301 	eor.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <VS1053_SciRead+0x4e>
 8000f42:	2300      	movs	r3, #0
 8000f44:	e044      	b.n	8000fd0 <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[0], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <VS1053_SciRead+0xe8>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	f107 010f 	add.w	r1, r7, #15
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	f011 fd42 	bl	80129e0 <hal_spi_txrx>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f083 0301 	eor.w	r3, r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <VS1053_SciRead+0x74>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e031      	b.n	8000fd0 <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[1], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <VS1053_SciRead+0xe8>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	f107 010f 	add.w	r1, r7, #15
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f011 fd2e 	bl	80129e0 <hal_spi_txrx>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <VS1053_SciRead+0x9c>
 8000f90:	2300      	movs	r3, #0
 8000f92:	e01d      	b.n	8000fd0 <VS1053_SciRead+0xd8>
	XCS_HIGH;       /* XCS High */
 8000f94:	2101      	movs	r1, #1
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <VS1053_SciRead+0xe4>)
 8000f98:	f7ff fd8e 	bl	8000ab8 <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000f9c:	bf00      	nop
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <VS1053_SciRead+0xe0>)
 8000fa0:	f7ff fda6 	bl	8000af0 <hal_gpio_readpin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f9      	beq.n	8000f9e <VS1053_SciRead+0xa6>

	*res = rxBuffer[0];     /* Received data */
 8000faa:	7a3b      	ldrb	r3, [r7, #8]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	801a      	strh	r2, [r3, #0]
	*res <<= 8;				/* MSB */
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	801a      	strh	r2, [r3, #0]
	*res |= rxBuffer[1];	/* LSB */
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	7a7b      	ldrb	r3, [r7, #9]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	801a      	strh	r2, [r3, #0]

	return true;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	08016440 	.word	0x08016440
 8000fdc:	08016428 	.word	0x08016428
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <VS1053_SdiWrite>:

/* SDI Tx */
bool VS1053_SdiWrite( uint8_t input )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000fee:	bf00      	nop
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <VS1053_SdiWrite+0x50>)
 8000ff2:	f7ff fd7d 	bl	8000af0 <hal_gpio_readpin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f9      	beq.n	8000ff0 <VS1053_SdiWrite+0xc>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <VS1053_SdiWrite+0x54>)
 8001000:	f7ff fd5a 	bl	8000ab8 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, &input, 1, VS1053_SPI_TIMEOUT) != true) return false;		/* SPI Tx 1 byte */
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <VS1053_SdiWrite+0x58>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	1df9      	adds	r1, r7, #7
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	2201      	movs	r2, #1
 800100e:	f011 fc8d 	bl	801292c <hal_spi_transfer>
 8001012:	4603      	mov	r3, r0
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <VS1053_SdiWrite+0x3e>
 800101e:	2300      	movs	r3, #0
 8001020:	e004      	b.n	800102c <VS1053_SdiWrite+0x48>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8001022:	2101      	movs	r1, #1
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <VS1053_SdiWrite+0x54>)
 8001026:	f7ff fd47 	bl	8000ab8 <hal_gpio_write>

	return true;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	08016440 	.word	0x08016440
 8001038:	08016430 	.word	0x08016430
 800103c:	20000000 	.word	0x20000000

08001040 <VS1053_SdiWrite32>:

/* SDI Tx 32 bytes */
bool VS1053_SdiWrite32( uint8_t *input32 )
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8001048:	bf00      	nop
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <VS1053_SdiWrite32+0x50>)
 800104c:	f7ff fd50 	bl	8000af0 <hal_gpio_readpin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f9      	beq.n	800104a <VS1053_SdiWrite32+0xa>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8001056:	2100      	movs	r1, #0
 8001058:	480e      	ldr	r0, [pc, #56]	; (8001094 <VS1053_SdiWrite32+0x54>)
 800105a:	f7ff fd2d 	bl	8000ab8 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, input32, 32, VS1053_SPI_TIMEOUT) != true) return false; /* SPI Tx 32 bytes */
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <VS1053_SdiWrite32+0x58>)
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	2220      	movs	r2, #32
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f011 fc60 	bl	801292c <hal_spi_transfer>
 800106c:	4603      	mov	r3, r0
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <VS1053_SdiWrite32+0x3c>
 8001078:	2300      	movs	r3, #0
 800107a:	e004      	b.n	8001086 <VS1053_SdiWrite32+0x46>
	XDCS_HIGH;			/* XDCS High(SDI) */
 800107c:	2101      	movs	r1, #1
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <VS1053_SdiWrite32+0x54>)
 8001080:	f7ff fd1a 	bl	8000ab8 <hal_gpio_write>

	return true;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	08016440 	.word	0x08016440
 8001094:	08016430 	.word	0x08016430
 8001098:	20000000 	.word	0x20000000

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f8fc 	bl	80012c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2005      	movs	r0, #5
 80010cc:	f012 f804 	bl	80130d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f011 ffd6 	bl	8013080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	200000a0 	.word	0x200000a0

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200000a0 	.word	0x200000a0

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff4c 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ea:	f7ff ff61 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 80012ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff ffb1 	bl	800125c <NVIC_EncodePriority>
 80012fa:	4602      	mov	r2, r0
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff80 	bl	8001208 <__NVIC_SetPriority>
}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff54 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff fee6 	bl	8001108 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e099      	b.n	800147c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2202      	movs	r2, #2
 800134c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001368:	e00f      	b.n	800138a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800136a:	f7ff fecd 	bl	8001108 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b05      	cmp	r3, #5
 8001376:	d908      	bls.n	800138a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2220      	movs	r2, #32
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2203      	movs	r2, #3
 8001382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e078      	b.n	800147c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e8      	bne.n	800136a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_DMA_Init+0x158>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d107      	bne.n	80013f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4313      	orrs	r3, r2
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f023 0307 	bic.w	r3, r3, #7
 800140a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	4313      	orrs	r3, r2
 8001414:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	2b04      	cmp	r3, #4
 800141c:	d117      	bne.n	800144e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00e      	beq.n	800144e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fa9d 	bl	8001970 <DMA_CheckFifoParam>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2240      	movs	r2, #64	; 0x40
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800144a:	2301      	movs	r3, #1
 800144c:	e016      	b.n	800147c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fa54 	bl	8001904 <DMA_CalcBaseAndBitshift>
 800145c:	4603      	mov	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	223f      	movs	r2, #63	; 0x3f
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	f010803f 	.word	0xf010803f

08001488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_DMA_Start_IT+0x26>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e040      	b.n	8001530 <HAL_DMA_Start_IT+0xa8>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d12f      	bne.n	8001522 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2202      	movs	r2, #2
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f9e6 	bl	80018a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	223f      	movs	r2, #63	; 0x3f
 80014e2:	409a      	lsls	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0216 	orr.w	r2, r2, #22
 80014f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0208 	orr.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e005      	b.n	800152e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800152a:	2302      	movs	r3, #2
 800152c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800152e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d004      	beq.n	8001556 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00c      	b.n	8001570 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2205      	movs	r2, #5
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001588:	4b8e      	ldr	r3, [pc, #568]	; (80017c4 <HAL_DMA_IRQHandler+0x248>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a8e      	ldr	r2, [pc, #568]	; (80017c8 <HAL_DMA_IRQHandler+0x24c>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	2208      	movs	r2, #8
 80015a8:	409a      	lsls	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01a      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0204 	bic.w	r2, r2, #4
 80015ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2208      	movs	r2, #8
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2201      	movs	r2, #1
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d012      	beq.n	800161e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2201      	movs	r2, #1
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f043 0202 	orr.w	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2204      	movs	r2, #4
 8001624:	409a      	lsls	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d012      	beq.n	8001654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2204      	movs	r2, #4
 8001642:	409a      	lsls	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2210      	movs	r2, #16
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d043      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03c      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2210      	movs	r2, #16
 8001678:	409a      	lsls	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d018      	beq.n	80016be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d024      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
 80016aa:	e01f      	b.n	80016ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01b      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e016      	b.n	80016ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0208 	bic.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2220      	movs	r2, #32
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 808f 	beq.w	800181c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8087 	beq.w	800181c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2220      	movs	r2, #32
 8001714:	409a      	lsls	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b05      	cmp	r3, #5
 8001724:	d136      	bne.n	8001794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0216 	bic.w	r2, r2, #22
 8001734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <HAL_DMA_IRQHandler+0x1da>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0208 	bic.w	r2, r2, #8
 8001764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	223f      	movs	r2, #63	; 0x3f
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001786:	2b00      	cmp	r3, #0
 8001788:	d07e      	beq.n	8001888 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
        }
        return;
 8001792:	e079      	b.n	8001888 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01d      	beq.n	80017de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d031      	beq.n	800181c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
 80017c0:	e02c      	b.n	800181c <HAL_DMA_IRQHandler+0x2a0>
 80017c2:	bf00      	nop
 80017c4:	20000014 	.word	0x20000014
 80017c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
 80017dc:	e01e      	b.n	800181c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0210 	bic.w	r2, r2, #16
 80017fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001820:	2b00      	cmp	r3, #0
 8001822:	d032      	beq.n	800188a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d022      	beq.n	8001876 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2205      	movs	r2, #5
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	3301      	adds	r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	d307      	bcc.n	8001864 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f2      	bne.n	8001848 <HAL_DMA_IRQHandler+0x2cc>
 8001862:	e000      	b.n	8001866 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001864:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
 8001886:	e000      	b.n	800188a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001888:	bf00      	nop
    }
  }
}
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b40      	cmp	r3, #64	; 0x40
 80018d4:	d108      	bne.n	80018e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018e6:	e007      	b.n	80018f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3b10      	subs	r3, #16
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <DMA_CalcBaseAndBitshift+0x64>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <DMA_CalcBaseAndBitshift+0x68>)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d909      	bls.n	8001946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58
 8001944:	e007      	b.n	8001956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	aaaaaaab 	.word	0xaaaaaaab
 800196c:	08015780 	.word	0x08015780

08001970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d856      	bhi.n	8001a3e <DMA_CheckFifoParam+0xce>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <DMA_CheckFifoParam+0x28>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019bb 	.word	0x080019bb
 80019a0:	080019a9 	.word	0x080019a9
 80019a4:	08001a3f 	.word	0x08001a3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d046      	beq.n	8001a42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b8:	e043      	b.n	8001a42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c2:	d140      	bne.n	8001a46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c8:	e03d      	b.n	8001a46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d2:	d121      	bne.n	8001a18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d837      	bhi.n	8001a4a <DMA_CheckFifoParam+0xda>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <DMA_CheckFifoParam+0x70>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	080019f7 	.word	0x080019f7
 80019e8:	080019f1 	.word	0x080019f1
 80019ec:	08001a09 	.word	0x08001a09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
      break;
 80019f4:	e030      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d025      	beq.n	8001a4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a06:	e022      	b.n	8001a4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a10:	d11f      	bne.n	8001a52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a16:	e01c      	b.n	8001a52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d903      	bls.n	8001a26 <DMA_CheckFifoParam+0xb6>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d003      	beq.n	8001a2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a24:	e018      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2a:	e015      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e00b      	b.n	8001a56 <DMA_CheckFifoParam+0xe6>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e00a      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e008      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e006      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e004      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e002      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
    }
  } 
  
  return status; 
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e177      	b.n	8001d74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8166 	bne.w	8001d6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80c0 	beq.w	8001d6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0a:	4a61      	ldr	r2, [pc, #388]	; (8001d90 <HAL_GPIO_Init+0x328>)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_GPIO_Init+0x32c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d037      	beq.n	8001ca6 <HAL_GPIO_Init+0x23e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a57      	ldr	r2, [pc, #348]	; (8001d98 <HAL_GPIO_Init+0x330>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d031      	beq.n	8001ca2 <HAL_GPIO_Init+0x23a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x236>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_GPIO_Init+0x338>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x232>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_GPIO_Init+0x33c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x22e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a53      	ldr	r2, [pc, #332]	; (8001da8 <HAL_GPIO_Init+0x340>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x22a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_GPIO_Init+0x344>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x226>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_GPIO_Init+0x348>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x222>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_GPIO_Init+0x34c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x21e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_GPIO_Init+0x350>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x21a>
 8001c7e:	2309      	movs	r3, #9
 8001c80:	e012      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c82:	230a      	movs	r3, #10
 8001c84:	e010      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c86:	2308      	movs	r3, #8
 8001c88:	e00e      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x328>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a34      	ldr	r2, [pc, #208]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f ae84 	bls.w	8001a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40021c00 	.word	0x40021c00
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40022400 	.word	0x40022400
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000014 	.word	0x20000014

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0a9b      	lsrs	r3, r3, #10
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4903      	ldr	r1, [pc, #12]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08016488 	.word	0x08016488

08001e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_RCC_GetClockConfig+0x60>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e022      	b.n	8001ebc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f010 f9cb 	bl	8012224 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2203      	movs	r2, #3
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f814 	bl	8001ec4 <HAL_SD_InitCard>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00a      	b.n	8001ebc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b08e      	sub	sp, #56	; 0x38
 8001ec8:	af04      	add	r7, sp, #16
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001ee0:	2376      	movs	r3, #118	; 0x76
 8001ee2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681d      	ldr	r5, [r3, #0]
 8001ee8:	466c      	mov	r4, sp
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efc:	4628      	mov	r0, r5
 8001efe:	f002 f863 	bl	8003fc8 <SDIO_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e04f      	b.n	8001fb4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_SD_InitCard+0xf8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 f89b 	bl	800405a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_SD_InitCard+0xf8>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f7ff f8f8 	bl	8001120 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 ff6b 	bl	8002e0c <SD_PowerON>
 8001f36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e02e      	b.n	8001fb4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fe8a 	bl	8002c70 <SD_InitCard>
 8001f5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e01b      	b.n	8001fb4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 f8fa 	bl	800417e <SDMMC_CmdBlockLength>
 8001f8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00f      	beq.n	8001fb2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_SD_InitCard+0xfc>)
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	422580a0 	.word	0x422580a0
 8001fc0:	004005ff 	.word	0x004005ff

08001fc4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0c0      	b.n	800216e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f040 80b9 	bne.w	800216c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	441a      	add	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	429a      	cmp	r2, r3
 800200c:	d907      	bls.n	800201e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0a7      	b.n	800216e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a4b      	ldr	r2, [pc, #300]	; (800217c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002050:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2200      	movs	r2, #0
 8002058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3380      	adds	r3, #128	; 0x80
 8002088:	4619      	mov	r1, r3
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	f7ff f9f9 	bl	8001488 <HAL_DMA_Start_IT>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d017      	beq.n	80020cc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80020aa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e050      	b.n	800216e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d002      	beq.n	80020e0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	025b      	lsls	r3, r3, #9
 80020ea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020ec:	2390      	movs	r3, #144	; 0x90
 80020ee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80020f8:	2301      	movs	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f107 0210 	add.w	r2, r7, #16
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f002 f80d 	bl	8004126 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d90a      	bls.n	8002128 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2282      	movs	r2, #130	; 0x82
 8002116:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800211e:	4618      	mov	r0, r3
 8002120:	f002 f871 	bl	8004206 <SDMMC_CmdReadMultiBlock>
 8002124:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002126:	e009      	b.n	800213c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2281      	movs	r2, #129	; 0x81
 800212c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002134:	4618      	mov	r0, r3
 8002136:	f002 f844 	bl	80041c2 <SDMMC_CmdReadSingleBlock>
 800213a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e002      	b.n	800216e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e000      	b.n	800216e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3730      	adds	r7, #48	; 0x30
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	08002a7f 	.word	0x08002a7f
 800217c:	08002af1 	.word	0x08002af1
 8002180:	004005ff 	.word	0x004005ff
 8002184:	4225858c 	.word	0x4225858c

08002188 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0c5      	b.n	800233c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	f040 80be 	bne.w	800233a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80021c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	441a      	add	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d907      	bls.n	80021e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0ac      	b.n	800233c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2203      	movs	r2, #3
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800220c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002214:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	2200      	movs	r2, #0
 800221c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	2b01      	cmp	r3, #1
 8002224:	d002      	beq.n	800222c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d90a      	bls.n	8002248 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	22a0      	movs	r2, #160	; 0xa0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223e:	4618      	mov	r0, r3
 8002240:	f002 f825 	bl	800428e <SDMMC_CmdWriteMultiBlock>
 8002244:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002246:	e009      	b.n	800225c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2290      	movs	r2, #144	; 0x90
 800224c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002254:	4618      	mov	r0, r3
 8002256:	f001 fff8 	bl	800424a <SDMMC_CmdWriteSingleBlock>
 800225a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d012      	beq.n	8002288 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	431a      	orrs	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e059      	b.n	800233c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002288:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3380      	adds	r3, #128	; 0x80
 80022be:	461a      	mov	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	f7ff f8df 	bl	8001488 <HAL_DMA_Start_IT>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80022de:	f023 0302 	bic.w	r3, r3, #2
 80022e2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80022ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e018      	b.n	800233c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002316:	2390      	movs	r3, #144	; 0x90
 8002318:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f107 0210 	add.w	r2, r7, #16
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f001 fef8 	bl	8004126 <SDIO_ConfigData>

      return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	08002a55 	.word	0x08002a55
 8002348:	08002af1 	.word	0x08002af1
 800234c:	004005ff 	.word	0x004005ff
 8002350:	4225858c 	.word	0x4225858c

08002354 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_SD_IRQHandler+0x2e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fdfc 	bl	8002f78 <SD_Read_IT>
 8002380:	e165      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 808f 	beq.w	80024b0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800239a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80023aa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80023ae:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d039      	beq.n	800243e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_SD_IRQHandler+0x8a>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d011      	beq.n	8002402 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 ff76 	bl	80042d4 <SDMMC_CmdStopTransfer>
 80023e8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f92f 	bl	8002660 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f240 523a 	movw	r2, #1338	; 0x53a
 800240a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_SD_IRQHandler+0xda>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f002 fff2 	bl	8005418 <HAL_SD_RxCpltCallback>
 8002434:	e10b      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f002 ffe4 	bl	8005404 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800243c:	e107      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8102 	beq.w	800264e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d011      	beq.n	8002478 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f001 ff3b 	bl	80042d4 <SDMMC_CmdStopTransfer>
 800245e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8f4 	bl	8002660 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 80e5 	bne.w	800264e <HAL_SD_IRQHandler+0x2fa>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 80df 	bne.w	800264e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0208 	bic.w	r2, r2, #8
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f002 ffab 	bl	8005404 <HAL_SD_TxCpltCallback>
}
 80024ae:	e0ce      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_SD_IRQHandler+0x17c>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fda6 	bl	800301a <SD_Write_IT>
 80024ce:	e0be      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d6:	f240 233a 	movw	r3, #570	; 0x23a
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80b6 	beq.w	800264e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	f043 0202 	orr.w	r2, r3, #2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	f043 0208 	orr.w	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	f043 0220 	orr.w	r2, r3, #32
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	f043 0208 	orr.w	r2, r3, #8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f240 723a 	movw	r2, #1850	; 0x73a
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800257c:	f023 0302 	bic.w	r3, r3, #2
 8002580:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fea4 	bl	80042d4 <SDMMC_CmdStopTransfer>
 800258c:	4602      	mov	r2, r0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f855 	bl	8002660 <HAL_SD_ErrorCallback>
}
 80025b6:	e04a      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d045      	beq.n	800264e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d104      	bne.n	80025d6 <HAL_SD_IRQHandler+0x282>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d011      	beq.n	80025fa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_SD_IRQHandler+0x304>)
 80025dc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe ffa8 	bl	8001538 <HAL_DMA_Abort_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d02f      	beq.n	800264e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 face 	bl	8002b94 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80025f8:	e029      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <HAL_SD_IRQHandler+0x2ba>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d011      	beq.n	8002632 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <HAL_SD_IRQHandler+0x308>)
 8002614:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe ff8c 	bl	8001538 <HAL_DMA_Abort_IT>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d013      	beq.n	800264e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fae9 	bl	8002c02 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002630:	e00d      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f002 fed2 	bl	80053f0 <HAL_SD_AbortCallback>
}
 800264c:	e7ff      	b.n	800264e <HAL_SD_IRQHandler+0x2fa>
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	08002b95 	.word	0x08002b95
 800265c:	08002c03 	.word	0x08002c03

08002660 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002682:	0f9b      	lsrs	r3, r3, #30
 8002684:	b2da      	uxtb	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	b2da      	uxtb	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a0:	0e1b      	lsrs	r3, r3, #24
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b2:	0c1b      	lsrs	r3, r3, #16
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d4:	0d1b      	lsrs	r3, r3, #20
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f2:	0bdb      	lsrs	r3, r3, #15
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002704:	0b9b      	lsrs	r3, r3, #14
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002716:	0b5b      	lsrs	r3, r3, #13
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002728:	0b1b      	lsrs	r3, r3, #12
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	2b00      	cmp	r3, #0
 8002742:	d163      	bne.n	800280c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002748:	009a      	lsls	r2, r3, #2
 800274a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002754:	0f92      	lsrs	r2, r2, #30
 8002756:	431a      	orrs	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002760:	0edb      	lsrs	r3, r3, #27
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	b2da      	uxtb	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002772:	0e1b      	lsrs	r3, r3, #24
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	b2da      	uxtb	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	b2da      	uxtb	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002796:	0c9b      	lsrs	r3, r3, #18
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a8:	0bdb      	lsrs	r3, r3, #15
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	7e1b      	ldrb	r3, [r3, #24]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	3302      	adds	r3, #2
 80027cc:	2201      	movs	r2, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80027d6:	fb03 f202 	mul.w	r2, r3, r2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7a1b      	ldrb	r3, [r3, #8]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027f8:	0a52      	lsrs	r2, r2, #9
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002808:	661a      	str	r2, [r3, #96]	; 0x60
 800280a:	e031      	b.n	8002870 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	2b01      	cmp	r3, #1
 8002812:	d11d      	bne.n	8002850 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	3301      	adds	r3, #1
 8002830:	029a      	lsls	r2, r3, #10
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002844:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	661a      	str	r2, [r3, #96]	; 0x60
 800284e:	e00f      	b.n	8002870 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_SD_GetCardCSD+0x344>)
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e09d      	b.n	80029ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002874:	0b9b      	lsrs	r3, r3, #14
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	b2da      	uxtb	r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002886:	09db      	lsrs	r3, r3, #7
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800288e:	b2da      	uxtb	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	0fdb      	lsrs	r3, r3, #31
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	0f5b      	lsrs	r3, r3, #29
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	0d9b      	lsrs	r3, r3, #22
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	0d5b      	lsrs	r3, r3, #21
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	0bdb      	lsrs	r3, r3, #15
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	0b9b      	lsrs	r3, r3, #14
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	0b5b      	lsrs	r3, r3, #13
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	0b1b      	lsrs	r3, r3, #12
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	0a9b      	lsrs	r3, r3, #10
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	b2da      	uxtb	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	b2da      	uxtb	r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800299a:	b2da      	uxtb	r2, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	004005ff 	.word	0x004005ff

080029bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa7e 	bl	8002f28 <SD_SendStatus>
 8002a2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	0a5b      	lsrs	r3, r3, #9
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002a4a:	693b      	ldr	r3, [r7, #16]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	2b82      	cmp	r3, #130	; 0x82
 8002a92:	d111      	bne.n	8002ab8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fc1b 	bl	80042d4 <SDMMC_CmdStopTransfer>
 8002a9e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff fdd4 	bl	8002660 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0208 	bic.w	r2, r2, #8
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f240 523a 	movw	r2, #1338	; 0x53a
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f002 fc99 	bl	8005418 <HAL_SD_RxCpltCallback>
#endif
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fec6 	bl	8001890 <HAL_DMA_GetError>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d03e      	beq.n	8002b88 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d002      	beq.n	8002b26 <SD_DMAError+0x36>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d12d      	bne.n	8002b82 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <SD_DMAError+0xa0>)
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002b3c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff62 	bl	8002a14 <HAL_SD_GetCardState>
 8002b50:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b06      	cmp	r3, #6
 8002b56:	d002      	beq.n	8002b5e <SD_DMAError+0x6e>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d10a      	bne.n	8002b74 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fbb6 	bl	80042d4 <SDMMC_CmdStopTransfer>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff fd6c 	bl	8002660 <HAL_SD_ErrorCallback>
#endif
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	004005ff 	.word	0x004005ff

08002b94 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f240 523a 	movw	r2, #1338	; 0x53a
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff ff31 	bl	8002a14 <HAL_SD_GetCardState>
 8002bb2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d002      	beq.n	8002bce <SD_DMATxAbort+0x3a>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10a      	bne.n	8002be4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fb7e 	bl	80042d4 <SDMMC_CmdStopTransfer>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	431a      	orrs	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f002 fbff 	bl	80053f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002bf2:	e002      	b.n	8002bfa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff fd33 	bl	8002660 <HAL_SD_ErrorCallback>
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fefa 	bl	8002a14 <HAL_SD_GetCardState>
 8002c20:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d002      	beq.n	8002c3c <SD_DMARxAbort+0x3a>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d10a      	bne.n	8002c52 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fb47 	bl	80042d4 <SDMMC_CmdStopTransfer>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f002 fbc8 	bl	80053f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002c60:	e002      	b.n	8002c68 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff fcfc 	bl	8002660 <HAL_SD_ErrorCallback>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b094      	sub	sp, #80	; 0x50
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 f9f8 	bl	8004076 <SDIO_GetPowerState>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c90:	e0b8      	b.n	8002e04 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d02f      	beq.n	8002cfa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 fbdf 	bl	8004462 <SDMMC_CmdSendCID>
 8002ca4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <SD_InitCard+0x40>
    {
      return errorstate;
 8002cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cae:	e0a9      	b.n	8002e04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fa22 	bl	8004100 <SDIO_GetResponse>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fa19 	bl	8004100 <SDIO_GetResponse>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2108      	movs	r1, #8
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fa10 	bl	8004100 <SDIO_GetResponse>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	210c      	movs	r1, #12
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fa07 	bl	8004100 <SDIO_GetResponse>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d00d      	beq.n	8002d1e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f107 020e 	add.w	r2, r7, #14
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fbe5 	bl	80044dc <SDMMC_CmdSetRelAdd>
 8002d12:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <SD_InitCard+0xae>
    {
      return errorstate;
 8002d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1c:	e072      	b.n	8002e04 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d036      	beq.n	8002d94 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f001 fbaf 	bl	800449e <SDMMC_CmdSendCSD>
 8002d40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4a:	e05b      	b.n	8002e04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 f9d4 	bl	8004100 <SDIO_GetResponse>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2104      	movs	r1, #4
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f9cb 	bl	8004100 <SDIO_GetResponse>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2108      	movs	r1, #8
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 f9c2 	bl	8004100 <SDIO_GetResponse>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	210c      	movs	r1, #12
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f9b9 	bl	8004100 <SDIO_GetResponse>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2104      	movs	r1, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f9b0 	bl	8004100 <SDIO_GetResponse>
 8002da0:	4603      	mov	r3, r0
 8002da2:	0d1a      	lsrs	r2, r3, #20
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fc60 	bl	8002674 <HAL_SD_GetCardCSD>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dbe:	e021      	b.n	8002e04 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	2200      	movs	r2, #0
 8002dcc:	461c      	mov	r4, r3
 8002dce:	4615      	mov	r5, r2
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	4608      	mov	r0, r1
 8002dd6:	f001 fa9f 	bl	8004318 <SDMMC_CmdSelDesel>
 8002dda:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <SD_InitCard+0x176>
  {
    return errorstate;
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	e00e      	b.n	8002e04 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681d      	ldr	r5, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	466c      	mov	r4, sp
 8002dee:	f103 0210 	add.w	r2, r3, #16
 8002df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002df8:	3304      	adds	r3, #4
 8002dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f001 f8e3 	bl	8003fc8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3740      	adds	r7, #64	; 0x40
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bdb0      	pop	{r4, r5, r7, pc}

08002e0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 fa9a 	bl	800435e <SDMMC_CmdGoIdleState>
 8002e2a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	e072      	b.n	8002f1c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 faad 	bl	800439a <SDMMC_CmdOperCond>
 8002e40:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 fa83 	bl	800435e <SDMMC_CmdGoIdleState>
 8002e58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <SD_PowerON+0x5e>
    {
      return errorstate;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	e05b      	b.n	8002f1c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d137      	bne.n	8002ee2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 faad 	bl	80043d8 <SDMMC_CmdAppCommand>
 8002e7e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d02d      	beq.n	8002ee2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e8a:	e047      	b.n	8002f1c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 faa0 	bl	80043d8 <SDMMC_CmdAppCommand>
 8002e98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SD_PowerON+0x98>
    {
      return errorstate;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	e03b      	b.n	8002f1c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	491e      	ldr	r1, [pc, #120]	; (8002f24 <SD_PowerON+0x118>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fab6 	bl	800441c <SDMMC_CmdAppOperCommand>
 8002eb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002eb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ebc:	e02e      	b.n	8002f1c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f91b 	bl	8004100 <SDIO_GetResponse>
 8002eca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	0fdb      	lsrs	r3, r3, #31
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <SD_PowerON+0xcc>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <SD_PowerON+0xce>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]

    count++;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d802      	bhi.n	8002ef2 <SD_PowerON+0xe6>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0cc      	beq.n	8002e8c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d902      	bls.n	8002f02 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f00:	e00c      	b.n	8002f1c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
 8002f12:	e002      	b.n	8002f1a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	c1100000 	.word	0xc1100000

08002f28 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002f38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f3c:	e018      	b.n	8002f70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f001 fae7 	bl	800451e <SDMMC_CmdSendStatus>
 8002f50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	e009      	b.n	8002f70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 f8cc 	bl	8004100 <SDIO_GetResponse>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03f      	beq.n	8003012 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e033      	b.n	8003000 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f83e 	bl	800401e <SDIO_ReadFIFO>
 8002fa2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0e1b      	lsrs	r3, r3, #24
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b07      	cmp	r3, #7
 8003004:	d9c8      	bls.n	8002f98 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d043      	beq.n	80030bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e037      	b.n	80030aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3b01      	subs	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3b01      	subs	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	041a      	lsls	r2, r3, #16
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4313      	orrs	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3301      	adds	r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	3b01      	subs	r3, #1
 800307a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	061a      	lsls	r2, r3, #24
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3b01      	subs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f107 0208 	add.w	r2, r7, #8
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 ffca 	bl	8004038 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	d9c4      	bls.n	800303a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e041      	b.n	800315a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f839 	bl	8003162 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 f9d8 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e04e      	b.n	800322e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a23      	ldr	r2, [pc, #140]	; (800323c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d022      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x80>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d01d      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x80>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_TIM_Base_Start_IT+0xc8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d018      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x80>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_TIM_Base_Start_IT+0xcc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x80>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_TIM_Base_Start_IT+0xd0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00e      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x80>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <HAL_TIM_Base_Start_IT+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d009      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x80>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a19      	ldr	r2, [pc, #100]	; (8003250 <HAL_TIM_Base_Start_IT+0xd8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x80>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <HAL_TIM_Base_Start_IT+0xdc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d111      	bne.n	800321c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d010      	beq.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321a:	e007      	b.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40010000 	.word	0x40010000
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40010400 	.word	0x40010400
 8003250:	40014000 	.word	0x40014000
 8003254:	40001800 	.word	0x40001800

08003258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d122      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0202 	mvn.w	r2, #2
 8003284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8ee 	bl	800347c <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8e0 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f8f1 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d122      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11b      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0204 	mvn.w	r2, #4
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8c4 	bl	800347c <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8b6 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f8c7 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b08      	cmp	r3, #8
 8003314:	d122      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b08      	cmp	r3, #8
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0208 	mvn.w	r2, #8
 800332c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2204      	movs	r2, #4
 8003332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f89a 	bl	800347c <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f88c 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f89d 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b10      	cmp	r3, #16
 8003368:	d122      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d11b      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0210 	mvn.w	r2, #16
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2208      	movs	r2, #8
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f870 	bl	800347c <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f862 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f873 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0201 	mvn.w	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f00f ff1a 	bl	8013210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f902 	bl	800360c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f838 	bl	80034a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b20      	cmp	r3, #32
 8003440:	d10e      	bne.n	8003460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b20      	cmp	r3, #32
 800344e:	d107      	bne.n	8003460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0220 	mvn.w	r2, #32
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8cc 	bl	80035f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a40      	ldr	r2, [pc, #256]	; (80035cc <TIM_Base_SetConfig+0x114>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3d      	ldr	r2, [pc, #244]	; (80035d0 <TIM_Base_SetConfig+0x118>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <TIM_Base_SetConfig+0x11c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3b      	ldr	r2, [pc, #236]	; (80035d8 <TIM_Base_SetConfig+0x120>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <TIM_Base_SetConfig+0x124>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2f      	ldr	r2, [pc, #188]	; (80035cc <TIM_Base_SetConfig+0x114>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02b      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d027      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <TIM_Base_SetConfig+0x118>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d023      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2b      	ldr	r2, [pc, #172]	; (80035d4 <TIM_Base_SetConfig+0x11c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <TIM_Base_SetConfig+0x120>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01b      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a29      	ldr	r2, [pc, #164]	; (80035dc <TIM_Base_SetConfig+0x124>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d017      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <TIM_Base_SetConfig+0x128>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <TIM_Base_SetConfig+0x12c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <TIM_Base_SetConfig+0x130>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <TIM_Base_SetConfig+0x134>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <TIM_Base_SetConfig+0x138>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <TIM_Base_SetConfig+0x13c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <TIM_Base_SetConfig+0x114>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0xf8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <TIM_Base_SetConfig+0x124>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d103      	bne.n	80035b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	615a      	str	r2, [r3, #20]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40010400 	.word	0x40010400
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40014400 	.word	0x40014400
 80035e8:	40014800 	.word	0x40014800
 80035ec:	40001800 	.word	0x40001800
 80035f0:	40001c00 	.word	0x40001c00
 80035f4:	40002000 	.word	0x40002000

080035f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800367a:	481c      	ldr	r0, [pc, #112]	; (80036ec <LL_ADC_CommonInit+0x80>)
 800367c:	f7ff ffe3 	bl	8003646 <LL_ADC_IsEnabled>
 8003680:	4604      	mov	r4, r0
 8003682:	481b      	ldr	r0, [pc, #108]	; (80036f0 <LL_ADC_CommonInit+0x84>)
 8003684:	f7ff ffdf 	bl	8003646 <LL_ADC_IsEnabled>
 8003688:	4603      	mov	r3, r0
 800368a:	431c      	orrs	r4, r3
 800368c:	4819      	ldr	r0, [pc, #100]	; (80036f4 <LL_ADC_CommonInit+0x88>)
 800368e:	f7ff ffda 	bl	8003646 <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	4323      	orrs	r3, r4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d120      	bne.n	80036dc <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d012      	beq.n	80036c8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <LL_ADC_CommonInit+0x8c>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6811      	ldr	r1, [r2, #0]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	6852      	ldr	r2, [r2, #4]
 80036b2:	4311      	orrs	r1, r2
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	4311      	orrs	r1, r2
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68d2      	ldr	r2, [r2, #12]
 80036be:	430a      	orrs	r2, r1
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	e00b      	b.n	80036e0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <LL_ADC_CommonInit+0x8c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	e001      	b.n	80036e0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40012000 	.word	0x40012000
 80036f0:	40012100 	.word	0x40012100
 80036f4:	40012200 	.word	0x40012200
 80036f8:	fffc10e0 	.word	0xfffc10e0

080036fc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff9b 	bl	8003646 <LL_ADC_IsEnabled>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d117      	bne.n	8003746 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800371e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	6811      	ldr	r1, [r2, #0]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	430a      	orrs	r2, r1
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e001      	b.n	800374a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ff6f 	bl	8003646 <LL_ADC_IsEnabled>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d12b      	bne.n	80037c6 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	e005      	b.n	8003796 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <LL_ADC_REG_Init+0x80>)
 800379c:	4013      	ands	r3, r2
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	6912      	ldr	r2, [r2, #16]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff2e 	bl	8003620 <LL_ADC_REG_SetSequencerLength>
 80037c4:	e001      	b.n	80037ca <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	c0fffcfd 	.word	0xc0fffcfd

080037d8 <LL_GPIO_SetPinMode>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2103      	movs	r1, #3
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	401a      	ands	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61bb      	str	r3, [r7, #24]
  return result;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_GPIO_SetPinOutputType>:
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	43db      	mvns	r3, r3
 800384a:	401a      	ands	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	605a      	str	r2, [r3, #4]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_GPIO_SetPinSpeed>:
{
 8003866:	b480      	push	{r7}
 8003868:	b089      	sub	sp, #36	; 0x24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	613b      	str	r3, [r7, #16]
  return result;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	fab3 f383 	clz	r3, r3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2103      	movs	r1, #3
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	401a      	ands	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	61bb      	str	r3, [r7, #24]
  return result;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	431a      	orrs	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	3724      	adds	r7, #36	; 0x24
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_GPIO_SetPinPull>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	613b      	str	r3, [r7, #16]
  return result;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2103      	movs	r1, #3
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	401a      	ands	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	431a      	orrs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	60da      	str	r2, [r3, #12]
}
 8003916:	bf00      	nop
 8003918:	3724      	adds	r7, #36	; 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_GPIO_SetAFPin_0_7>:
{
 8003922:	b480      	push	{r7}
 8003924:	b089      	sub	sp, #36	; 0x24
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	613b      	str	r3, [r7, #16]
  return result;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	210f      	movs	r1, #15
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	401a      	ands	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	61bb      	str	r3, [r7, #24]
  return result;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	431a      	orrs	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	3724      	adds	r7, #36	; 0x24
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_GPIO_SetAFPin_8_15>:
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	613b      	str	r3, [r7, #16]
  return result;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	210f      	movs	r1, #15
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	401a      	ands	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	61bb      	str	r3, [r7, #24]
  return result;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039d6:	bf00      	nop
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b088      	sub	sp, #32
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	613b      	str	r3, [r7, #16]
  return result;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a0c:	e050      	b.n	8003ab0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d042      	beq.n	8003aaa <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d003      	beq.n	8003a34 <LL_GPIO_Init+0x52>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d10d      	bne.n	8003a50 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff12 	bl	8003866 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	461a      	mov	r2, r3
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fef3 	bl	8003836 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	461a      	mov	r2, r3
 8003a56:	69b9      	ldr	r1, [r7, #24]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff33 	bl	80038c4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d11a      	bne.n	8003a9c <LL_GPIO_Init+0xba>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	60bb      	str	r3, [r7, #8]
  return result;
 8003a72:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b07      	cmp	r3, #7
 8003a7c:	d807      	bhi.n	8003a8e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	461a      	mov	r2, r3
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff4b 	bl	8003922 <LL_GPIO_SetAFPin_0_7>
 8003a8c:	e006      	b.n	8003a9c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	461a      	mov	r2, r3
 8003a94:	69b9      	ldr	r1, [r7, #24]
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff72 	bl	8003980 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	69b9      	ldr	r1, [r7, #24]
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fe97 	bl	80037d8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1a7      	bne.n	8003a0e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 0201 	bic.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f023 021f 	bic.w	r2, r3, #31
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	431a      	orrs	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	; (8003c88 <LL_I2C_ConfigSpeed+0x124>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0c9b      	lsrs	r3, r3, #18
 8003b84:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	493a      	ldr	r1, [pc, #232]	; (8003c8c <LL_I2C_ConfigSpeed+0x128>)
 8003ba2:	428b      	cmp	r3, r1
 8003ba4:	d802      	bhi.n	8003bac <LL_I2C_ConfigSpeed+0x48>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	e009      	b.n	8003bc0 <LL_I2C_ConfigSpeed+0x5c>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4936      	ldr	r1, [pc, #216]	; (8003c90 <LL_I2C_ConfigSpeed+0x12c>)
 8003bb8:	fba1 1303 	umull	r1, r3, r1, r3
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <LL_I2C_ConfigSpeed+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d939      	bls.n	8003c42 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d117      	bne.n	8003c04 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfc:	e01d      	b.n	8003c3a <LL_I2C_ConfigSpeed+0xd6>
 8003bfe:	f248 0301 	movw	r3, #32769	; 0x8001
 8003c02:	e01a      	b.n	8003c3a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009a      	lsls	r2, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c34:	e001      	b.n	8003c3a <LL_I2C_ConfigSpeed+0xd6>
 8003c36:	f248 0301 	movw	r3, #32769	; 0x8001
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e011      	b.n	8003c66 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c50:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	e000      	b.n	8003c64 <LL_I2C_ConfigSpeed+0x100>
 8003c62:	2304      	movs	r3, #4
 8003c64:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	61da      	str	r2, [r3, #28]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	431bde83 	.word	0x431bde83
 8003c8c:	000186a0 	.word	0x000186a0
 8003c90:	10624dd3 	.word	0x10624dd3

08003c94 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 021a 	bic.w	r2, r3, #26
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	601a      	str	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fefc 	bl	8003ae8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f89d 	bl	8003e34 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff feff 	bl	8003b08 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003d0a:	6939      	ldr	r1, [r7, #16]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff25 	bl	8003b64 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6959      	ldr	r1, [r3, #20]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff05 	bl	8003b34 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ffaf 	bl	8003c94 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fec6 	bl	8003ac8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4619      	mov	r1, r3
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ffb9 	bl	8003cba <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <LL_RCC_GetSysClkSource+0x18>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800

08003d70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <LL_RCC_GetAHBPrescaler+0x18>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800

08003da8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <LL_RCC_PLL_GetMainSource+0x18>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <LL_RCC_PLL_GetN+0x18>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40023800 	.word	0x40023800

08003dfc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <LL_RCC_PLL_GetP+0x18>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <LL_RCC_PLL_GetDivider+0x18>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800

08003e34 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e3c:	f000 f820 	bl	8003e80 <RCC_GetSystemClockFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f840 	bl	8003ed0 <RCC_GetHCLKClockFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f84e 	bl	8003efc <RCC_GetPCLK1ClockFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f85a 	bl	8003f24 <RCC_GetPCLK2ClockFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	60da      	str	r2, [r3, #12]
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e8a:	f7ff ff63 	bl	8003d54 <LL_RCC_GetSysClkSource>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d00c      	beq.n	8003eae <RCC_GetSystemClockFreq+0x2e>
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d80f      	bhi.n	8003eb8 <RCC_GetSystemClockFreq+0x38>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <RCC_GetSystemClockFreq+0x22>
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d003      	beq.n	8003ea8 <RCC_GetSystemClockFreq+0x28>
 8003ea0:	e00a      	b.n	8003eb8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <RCC_GetSystemClockFreq+0x48>)
 8003ea4:	607b      	str	r3, [r7, #4]
      break;
 8003ea6:	e00a      	b.n	8003ebe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <RCC_GetSystemClockFreq+0x4c>)
 8003eaa:	607b      	str	r3, [r7, #4]
      break;
 8003eac:	e007      	b.n	8003ebe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003eae:	2008      	movs	r0, #8
 8003eb0:	f000 f84c 	bl	8003f4c <RCC_PLL_GetFreqDomain_SYS>
 8003eb4:	6078      	str	r0, [r7, #4]
      break;
 8003eb6:	e002      	b.n	8003ebe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <RCC_GetSystemClockFreq+0x48>)
 8003eba:	607b      	str	r3, [r7, #4]
      break;
 8003ebc:	bf00      	nop
  }

  return frequency;
 8003ebe:	687b      	ldr	r3, [r7, #4]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	007a1200 	.word	0x007a1200

08003ed0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ed8:	f7ff ff4a 	bl	8003d70 <LL_RCC_GetAHBPrescaler>
 8003edc:	4603      	mov	r3, r0
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <RCC_GetHCLKClockFreq+0x28>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	40d3      	lsrs	r3, r2
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	08016478 	.word	0x08016478

08003efc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003f04:	f7ff ff42 	bl	8003d8c <LL_RCC_GetAPB1Prescaler>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	0a9b      	lsrs	r3, r3, #10
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <RCC_GetPCLK1ClockFreq+0x24>)
 8003f0e:	5cd3      	ldrb	r3, [r2, r3]
 8003f10:	461a      	mov	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	40d3      	lsrs	r3, r2
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	08016488 	.word	0x08016488

08003f24 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f2c:	f7ff ff3c 	bl	8003da8 <LL_RCC_GetAPB2Prescaler>
 8003f30:	4603      	mov	r3, r0
 8003f32:	0b5b      	lsrs	r3, r3, #13
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	40d3      	lsrs	r3, r2
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	08016488 	.word	0x08016488

08003f4c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f60:	f7ff ff30 	bl	8003dc4 <LL_RCC_PLL_GetMainSource>
 8003f64:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f72:	d003      	beq.n	8003f7c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003f74:	e005      	b.n	8003f82 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f78:	617b      	str	r3, [r7, #20]
      break;
 8003f7a:	e005      	b.n	8003f88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f7e:	617b      	str	r3, [r7, #20]
      break;
 8003f80:	e002      	b.n	8003f88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f84:	617b      	str	r3, [r7, #20]
      break;
 8003f86:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d113      	bne.n	8003fb6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f8e:	f7ff ff43 	bl	8003e18 <LL_RCC_PLL_GetDivider>
 8003f92:	4602      	mov	r2, r0
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f9a:	f7ff ff21 	bl	8003de0 <LL_RCC_PLL_GetN>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	fb03 f404 	mul.w	r4, r3, r4
 8003fa4:	f7ff ff2a 	bl	8003dfc <LL_RCC_PLL_GetP>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	3301      	adds	r3, #1
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	fbb4 f3f3 	udiv	r3, r4, r3
 8003fb4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003fb6:	693b      	ldr	r3, [r7, #16]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd90      	pop	{r4, r7, pc}
 8003fc0:	00f42400 	.word	0x00f42400
 8003fc4:	007a1200 	.word	0x007a1200

08003fc8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003fc8:	b084      	sub	sp, #16
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	f107 001c 	add.w	r0, r7, #28
 8003fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003fde:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003fe2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003fe6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003fea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003fee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003ff2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004002:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	b004      	add	sp, #16
 800401c:	4770      	bx	lr

0800401e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2203      	movs	r2, #3
 8004066:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0303 	and.w	r3, r3, #3
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040b0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80040b6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80040bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80040cc:	f023 030f 	bic.w	r3, r3, #15
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	b2db      	uxtb	r3, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3314      	adds	r3, #20
 800410e:	461a      	mov	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
}  
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800414c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004152:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004158:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004170:	2300      	movs	r3, #0

}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b088      	sub	sp, #32
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800418c:	2310      	movs	r3, #16
 800418e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004190:	2340      	movs	r3, #64	; 0x40
 8004192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800419c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff74 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	2110      	movs	r1, #16
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f9d7 	bl	8004564 <SDMMC_GetCmdResp1>
 80041b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041b8:	69fb      	ldr	r3, [r7, #28]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80041d0:	2311      	movs	r3, #17
 80041d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041d4:	2340      	movs	r3, #64	; 0x40
 80041d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff52 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	2111      	movs	r1, #17
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f9b5 	bl	8004564 <SDMMC_GetCmdResp1>
 80041fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041fc:	69fb      	ldr	r3, [r7, #28]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004214:	2312      	movs	r3, #18
 8004216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004218:	2340      	movs	r3, #64	; 0x40
 800421a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff30 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	2112      	movs	r1, #18
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f993 	bl	8004564 <SDMMC_GetCmdResp1>
 800423e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004240:	69fb      	ldr	r3, [r7, #28]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b088      	sub	sp, #32
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004258:	2318      	movs	r3, #24
 800425a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004268:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff0e 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	2118      	movs	r1, #24
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f971 	bl	8004564 <SDMMC_GetCmdResp1>
 8004282:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004284:	69fb      	ldr	r3, [r7, #28]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800429c:	2319      	movs	r3, #25
 800429e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042a0:	2340      	movs	r3, #64	; 0x40
 80042a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff feec 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	2119      	movs	r1, #25
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f94f 	bl	8004564 <SDMMC_GetCmdResp1>
 80042c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042c8:	69fb      	ldr	r3, [r7, #28]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80042e0:	230c      	movs	r3, #12
 80042e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042e4:	2340      	movs	r3, #64	; 0x40
 80042e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042f2:	f107 0308 	add.w	r3, r7, #8
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff feca 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <SDMMC_CmdStopTransfer+0x40>)
 8004300:	210c      	movs	r1, #12
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f92e 	bl	8004564 <SDMMC_GetCmdResp1>
 8004308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800430a:	69fb      	ldr	r3, [r7, #28]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	05f5e100 	.word	0x05f5e100

08004318 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004328:	2307      	movs	r3, #7
 800432a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800432c:	2340      	movs	r3, #64	; 0x40
 800432e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004338:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800433a:	f107 0310 	add.w	r3, r7, #16
 800433e:	4619      	mov	r1, r3
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff fea6 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	2107      	movs	r1, #7
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f909 	bl	8004564 <SDMMC_GetCmdResp1>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004356:	4618      	mov	r0, r3
 8004358:	3728      	adds	r7, #40	; 0x28
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b088      	sub	sp, #32
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff fe85 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fb23 	bl	80049d4 <SDMMC_GetCmdError>
 800438e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004390:	69fb      	ldr	r3, [r7, #28]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80043a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80043a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80043a8:	2308      	movs	r3, #8
 80043aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043ac:	2340      	movs	r3, #64	; 0x40
 80043ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fe66 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fab6 	bl	8004938 <SDMMC_GetCmdResp7>
 80043cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043ce:	69fb      	ldr	r3, [r7, #28]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80043e6:	2337      	movs	r3, #55	; 0x37
 80043e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043f8:	f107 0308 	add.w	r3, r7, #8
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fe47 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	2137      	movs	r1, #55	; 0x37
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8aa 	bl	8004564 <SDMMC_GetCmdResp1>
 8004410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004412:	69fb      	ldr	r3, [r7, #28]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800442c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004432:	2329      	movs	r3, #41	; 0x29
 8004434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004436:	2340      	movs	r3, #64	; 0x40
 8004438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800443e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004442:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fe21 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f9bd 	bl	80047d0 <SDMMC_GetCmdResp3>
 8004456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004458:	69fb      	ldr	r3, [r7, #28]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b088      	sub	sp, #32
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800446e:	2302      	movs	r3, #2
 8004470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004472:	23c0      	movs	r3, #192	; 0xc0
 8004474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800447a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fe03 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f957 	bl	8004740 <SDMMC_GetCmdResp2>
 8004492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004494:	69fb      	ldr	r3, [r7, #28]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b088      	sub	sp, #32
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80044ac:	2309      	movs	r3, #9
 80044ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80044b0:	23c0      	movs	r3, #192	; 0xc0
 80044b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044be:	f107 0308 	add.w	r3, r7, #8
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fde4 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f938 	bl	8004740 <SDMMC_GetCmdResp2>
 80044d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044d2:	69fb      	ldr	r3, [r7, #28]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80044ea:	2303      	movs	r3, #3
 80044ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044fc:	f107 0308 	add.w	r3, r7, #8
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fdc5 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	2103      	movs	r1, #3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f99d 	bl	800484c <SDMMC_GetCmdResp6>
 8004512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004514:	69fb      	ldr	r3, [r7, #28]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b088      	sub	sp, #32
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800452c:	230d      	movs	r3, #13
 800452e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004530:	2340      	movs	r3, #64	; 0x40
 8004532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800453c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800453e:	f107 0308 	add.w	r3, r7, #8
 8004542:	4619      	mov	r1, r3
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff fda4 	bl	8004092 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	210d      	movs	r1, #13
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f807 	bl	8004564 <SDMMC_GetCmdResp1>
 8004556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004558:	69fb      	ldr	r3, [r7, #28]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	460b      	mov	r3, r1
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004572:	4b70      	ldr	r3, [pc, #448]	; (8004734 <SDMMC_GetCmdResp1+0x1d0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a70      	ldr	r2, [pc, #448]	; (8004738 <SDMMC_GetCmdResp1+0x1d4>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	0a5a      	lsrs	r2, r3, #9
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1e5a      	subs	r2, r3, #1
 800458a:	61fa      	str	r2, [r7, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004594:	e0c9      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ef      	beq.n	8004586 <SDMMC_GetCmdResp1+0x22>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2204      	movs	r2, #4
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045c2:	2304      	movs	r3, #4
 80045c4:	e0b1      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0a6      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	22c5      	movs	r2, #197	; 0xc5
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff fd7f 	bl	80040e6 <SDIO_GetCommandResponse>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	7afb      	ldrb	r3, [r7, #11]
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d001      	beq.n	80045f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e099      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80045f6:	2100      	movs	r1, #0
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fd81 	bl	8004100 <SDIO_GetResponse>
 80045fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4b4e      	ldr	r3, [pc, #312]	; (800473c <SDMMC_GetCmdResp1+0x1d8>)
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800460a:	2300      	movs	r3, #0
 800460c:	e08d      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	da02      	bge.n	800461a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004618:	e087      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004624:	2340      	movs	r3, #64	; 0x40
 8004626:	e080      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	e079      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004644:	e071      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004654:	e069      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004664:	e061      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004674:	e059      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004684:	e051      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004694:	e049      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80046a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046a4:	e041      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80046b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b4:	e039      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80046c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c4:	e031      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80046d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046d4:	e029      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80046e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046e4:	e021      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80046f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046f4:	e019      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004700:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004704:	e011      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004714:	e009      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004720:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004724:	e001      	b.n	800472a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000014 	.word	0x20000014
 8004738:	10624dd3 	.word	0x10624dd3
 800473c:	fdffe008 	.word	0xfdffe008

08004740 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <SDMMC_GetCmdResp2+0x88>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <SDMMC_GetCmdResp2+0x8c>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	0a5b      	lsrs	r3, r3, #9
 8004754:	f241 3288 	movw	r2, #5000	; 0x1388
 8004758:	fb02 f303 	mul.w	r3, r2, r3
 800475c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	60fa      	str	r2, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800476c:	e026      	b.n	80047bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0ef      	beq.n	800475e <SDMMC_GetCmdResp2+0x1e>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ea      	bne.n	800475e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2204      	movs	r2, #4
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800479a:	2304      	movs	r3, #4
 800479c:	e00e      	b.n	80047bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e003      	b.n	80047bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	22c5      	movs	r2, #197	; 0xc5
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	20000014 	.word	0x20000014
 80047cc:	10624dd3 	.word	0x10624dd3

080047d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <SDMMC_GetCmdResp3+0x74>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <SDMMC_GetCmdResp3+0x78>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	0a5b      	lsrs	r3, r3, #9
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	fb02 f303 	mul.w	r3, r2, r3
 80047ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1e5a      	subs	r2, r3, #1
 80047f2:	60fa      	str	r2, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047fc:	e01b      	b.n	8004836 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ef      	beq.n	80047ee <SDMMC_GetCmdResp3+0x1e>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ea      	bne.n	80047ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2204      	movs	r2, #4
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800482a:	2304      	movs	r3, #4
 800482c:	e003      	b.n	8004836 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	22c5      	movs	r2, #197	; 0xc5
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000014 	.word	0x20000014
 8004848:	10624dd3 	.word	0x10624dd3

0800484c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	460b      	mov	r3, r1
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800485a:	4b35      	ldr	r3, [pc, #212]	; (8004930 <SDMMC_GetCmdResp6+0xe4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a35      	ldr	r2, [pc, #212]	; (8004934 <SDMMC_GetCmdResp6+0xe8>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	0a5b      	lsrs	r3, r3, #9
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800487a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800487e:	e052      	b.n	8004926 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004884:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ef      	beq.n	8004870 <SDMMC_GetCmdResp6+0x24>
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ea      	bne.n	8004870 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2204      	movs	r2, #4
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048ac:	2304      	movs	r3, #4
 80048ae:	e03a      	b.n	8004926 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02f      	b.n	8004926 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fc0d 	bl	80040e6 <SDIO_GetCommandResponse>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	7afb      	ldrb	r3, [r7, #11]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d001      	beq.n	80048da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e025      	b.n	8004926 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	22c5      	movs	r2, #197	; 0xc5
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80048e0:	2100      	movs	r1, #0
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff fc0c 	bl	8004100 <SDIO_GetResponse>
 80048e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
 8004900:	e011      	b.n	8004926 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800490c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004910:	e009      	b.n	8004926 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800491c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004920:	e001      	b.n	8004926 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000014 	.word	0x20000014
 8004934:	10624dd3 	.word	0x10624dd3

08004938 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004940:	4b22      	ldr	r3, [pc, #136]	; (80049cc <SDMMC_GetCmdResp7+0x94>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <SDMMC_GetCmdResp7+0x98>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	0a5b      	lsrs	r3, r3, #9
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1e5a      	subs	r2, r3, #1
 800495a:	60fa      	str	r2, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004964:	e02c      	b.n	80049c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0ef      	beq.n	8004956 <SDMMC_GetCmdResp7+0x1e>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ea      	bne.n	8004956 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2204      	movs	r2, #4
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004992:	2304      	movs	r3, #4
 8004994:	e014      	b.n	80049c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e009      	b.n	80049c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80049be:	2300      	movs	r3, #0
  
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000014 	.word	0x20000014
 80049d0:	10624dd3 	.word	0x10624dd3

080049d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <SDMMC_GetCmdError+0x50>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <SDMMC_GetCmdError+0x54>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	0a5b      	lsrs	r3, r3, #9
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	60fa      	str	r2, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d102      	bne.n	8004a02 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a00:	e009      	b.n	8004a16 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f1      	beq.n	80049f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	22c5      	movs	r2, #197	; 0xc5
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000014 	.word	0x20000014
 8004a28:	10624dd3 	.word	0x10624dd3

08004a2c <LL_SPI_IsEnabled>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d101      	bne.n	8004a44 <LL_SPI_IsEnabled+0x18>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <LL_SPI_IsEnabled+0x1a>
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	611a      	str	r2, [r3, #16]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ffd3 	bl	8004a2c <LL_SPI_IsEnabled>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d139      	bne.n	8004b00 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a94:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	6811      	ldr	r1, [r2, #0]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	6852      	ldr	r2, [r2, #4]
 8004aa0:	4311      	orrs	r1, r2
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	6892      	ldr	r2, [r2, #8]
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	68d2      	ldr	r2, [r2, #12]
 8004aac:	4311      	orrs	r1, r2
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	6912      	ldr	r2, [r2, #16]
 8004ab2:	4311      	orrs	r1, r2
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	6952      	ldr	r2, [r2, #20]
 8004ab8:	4311      	orrs	r1, r2
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	6992      	ldr	r2, [r2, #24]
 8004abe:	4311      	orrs	r1, r2
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	69d2      	ldr	r2, [r2, #28]
 8004ac4:	4311      	orrs	r1, r2
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6a12      	ldr	r2, [r2, #32]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f023 0204 	bic.w	r2, r3, #4
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aee:	d105      	bne.n	8004afc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ffab 	bl	8004a52 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	61da      	str	r2, [r3, #28]
  return status;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	615a      	str	r2, [r3, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3d      	ldr	r2, [pc, #244]	; (8004c94 <LL_TIM_Init+0x108>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <LL_TIM_Init+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d00f      	beq.n	8004bcc <LL_TIM_Init+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <LL_TIM_Init+0x10c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00b      	beq.n	8004bcc <LL_TIM_Init+0x40>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a39      	ldr	r2, [pc, #228]	; (8004c9c <LL_TIM_Init+0x110>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <LL_TIM_Init+0x40>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <LL_TIM_Init+0x114>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <LL_TIM_Init+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <LL_TIM_Init+0x118>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d106      	bne.n	8004bda <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <LL_TIM_Init+0x108>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d02b      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be8:	d027      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <LL_TIM_Init+0x10c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d023      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <LL_TIM_Init+0x110>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01f      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <LL_TIM_Init+0x114>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01b      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <LL_TIM_Init+0x118>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d017      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <LL_TIM_Init+0x11c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a25      	ldr	r2, [pc, #148]	; (8004cac <LL_TIM_Init+0x120>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00f      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <LL_TIM_Init+0x124>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00b      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a23      	ldr	r2, [pc, #140]	; (8004cb4 <LL_TIM_Init+0x128>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d007      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <LL_TIM_Init+0x12c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <LL_TIM_Init+0xae>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <LL_TIM_Init+0x130>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d106      	bne.n	8004c48 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff ff6c 	bl	8004b32 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff ff58 	bl	8004b16 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <LL_TIM_Init+0x108>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d003      	beq.n	8004c76 <LL_TIM_Init+0xea>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <LL_TIM_Init+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d105      	bne.n	8004c82 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff66 	bl	8004b4e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ff71 	bl	8004b6a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800
 8004cb4:	40001800 	.word	0x40001800
 8004cb8:	40001c00 	.word	0x40001c00
 8004cbc:	40002000 	.word	0x40002000

08004cc0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd4:	bf0c      	ite	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	2300      	movne	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	611a      	str	r2, [r3, #16]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	615a      	str	r2, [r3, #20]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b0c0      	sub	sp, #256	; 0x100
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d40:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004d44:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d54:	f040 810c 	bne.w	8004f70 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d6a:	4622      	mov	r2, r4
 8004d6c:	462b      	mov	r3, r5
 8004d6e:	1891      	adds	r1, r2, r2
 8004d70:	6639      	str	r1, [r7, #96]	; 0x60
 8004d72:	415b      	adcs	r3, r3
 8004d74:	667b      	str	r3, [r7, #100]	; 0x64
 8004d76:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	eb12 0801 	adds.w	r8, r2, r1
 8004d80:	4629      	mov	r1, r5
 8004d82:	eb43 0901 	adc.w	r9, r3, r1
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9a:	4690      	mov	r8, r2
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	eb18 0303 	adds.w	r3, r8, r3
 8004da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004da8:	462b      	mov	r3, r5
 8004daa:	eb49 0303 	adc.w	r3, r9, r3
 8004dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004db2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004db6:	2200      	movs	r2, #0
 8004db8:	469a      	mov	sl, r3
 8004dba:	4693      	mov	fp, r2
 8004dbc:	eb1a 030a 	adds.w	r3, sl, sl
 8004dc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc2:	eb4b 030b 	adc.w	r3, fp, fp
 8004dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dd0:	f7fb faae 	bl	8000330 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4b64      	ldr	r3, [pc, #400]	; (8004f6c <LL_USART_SetBaudRate+0x238>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	b29c      	uxth	r4, r3
 8004de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004df0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004df4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	6539      	str	r1, [r7, #80]	; 0x50
 8004e00:	415b      	adcs	r3, r3
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
 8004e04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e08:	4641      	mov	r1, r8
 8004e0a:	1851      	adds	r1, r2, r1
 8004e0c:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e0e:	4649      	mov	r1, r9
 8004e10:	414b      	adcs	r3, r1
 8004e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004e20:	4659      	mov	r1, fp
 8004e22:	00cb      	lsls	r3, r1, #3
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	00ca      	lsls	r2, r1, #3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	4642      	mov	r2, r8
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	460a      	mov	r2, r1
 8004e40:	eb42 0303 	adc.w	r3, r2, r3
 8004e44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e52:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004e56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	18db      	adds	r3, r3, r3
 8004e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e60:	4613      	mov	r3, r2
 8004e62:	eb42 0303 	adc.w	r3, r2, r3
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
 8004e68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e6c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e70:	f7fb fa5e 	bl	8000330 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <LL_USART_SetBaudRate+0x238>)
 8004e7c:	fba3 2301 	umull	r2, r3, r3, r1
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2264      	movs	r2, #100	; 0x64
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	1acb      	subs	r3, r1, r3
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <LL_USART_SetBaudRate+0x238>)
 8004e92:	fba3 2302 	umull	r2, r3, r3, r2
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4423      	add	r3, r4
 8004ea6:	b29c      	uxth	r4, r3
 8004ea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eb2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004eb6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004eba:	4642      	mov	r2, r8
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	1891      	adds	r1, r2, r2
 8004ec0:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ec2:	415b      	adcs	r3, r3
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004eca:	4641      	mov	r1, r8
 8004ecc:	1851      	adds	r1, r2, r1
 8004ece:	6339      	str	r1, [r7, #48]	; 0x30
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	414b      	adcs	r3, r1
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ee2:	4659      	mov	r1, fp
 8004ee4:	00cb      	lsls	r3, r1, #3
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eec:	4651      	mov	r1, sl
 8004eee:	00ca      	lsls	r2, r1, #3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	189b      	adds	r3, r3, r2
 8004efa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004efe:	464b      	mov	r3, r9
 8004f00:	460a      	mov	r2, r1
 8004f02:	eb42 0303 	adc.w	r3, r2, r3
 8004f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f14:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004f18:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	18db      	adds	r3, r3, r3
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f22:	4613      	mov	r3, r2
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004f32:	f7fb f9fd 	bl	8000330 <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <LL_USART_SetBaudRate+0x238>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <LL_USART_SetBaudRate+0x238>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4423      	add	r3, r4
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8004f6a:	e107      	b.n	800517c <LL_USART_SetBaudRate+0x448>
 8004f6c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f7a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f7e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004f82:	4642      	mov	r2, r8
 8004f84:	464b      	mov	r3, r9
 8004f86:	1891      	adds	r1, r2, r2
 8004f88:	6239      	str	r1, [r7, #32]
 8004f8a:	415b      	adcs	r3, r3
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f92:	4641      	mov	r1, r8
 8004f94:	1854      	adds	r4, r2, r1
 8004f96:	4649      	mov	r1, r9
 8004f98:	eb43 0501 	adc.w	r5, r3, r1
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	00eb      	lsls	r3, r5, #3
 8004fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004faa:	00e2      	lsls	r2, r4, #3
 8004fac:	4614      	mov	r4, r2
 8004fae:	461d      	mov	r5, r3
 8004fb0:	4643      	mov	r3, r8
 8004fb2:	18e3      	adds	r3, r4, r3
 8004fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fb8:	464b      	mov	r3, r9
 8004fba:	eb45 0303 	adc.w	r3, r5, r3
 8004fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fcc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004fdc:	4629      	mov	r1, r5
 8004fde:	008b      	lsls	r3, r1, #2
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	008a      	lsls	r2, r1, #2
 8004fea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004fee:	f7fb f99f 	bl	8000330 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4b64      	ldr	r3, [pc, #400]	; (8005188 <LL_USART_SetBaudRate+0x454>)
 8004ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	b29c      	uxth	r4, r3
 8005004:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800500e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005012:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005016:	4642      	mov	r2, r8
 8005018:	464b      	mov	r3, r9
 800501a:	1891      	adds	r1, r2, r2
 800501c:	61b9      	str	r1, [r7, #24]
 800501e:	415b      	adcs	r3, r3
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005026:	4641      	mov	r1, r8
 8005028:	1851      	adds	r1, r2, r1
 800502a:	6139      	str	r1, [r7, #16]
 800502c:	4649      	mov	r1, r9
 800502e:	414b      	adcs	r3, r1
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800503e:	4659      	mov	r1, fp
 8005040:	00cb      	lsls	r3, r1, #3
 8005042:	4651      	mov	r1, sl
 8005044:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005048:	4651      	mov	r1, sl
 800504a:	00ca      	lsls	r2, r1, #3
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	4603      	mov	r3, r0
 8005052:	4642      	mov	r2, r8
 8005054:	189b      	adds	r3, r3, r2
 8005056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800505a:	464b      	mov	r3, r9
 800505c:	460a      	mov	r2, r1
 800505e:	eb42 0303 	adc.w	r3, r2, r3
 8005062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005066:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800506a:	2200      	movs	r2, #0
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005070:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005080:	4649      	mov	r1, r9
 8005082:	008b      	lsls	r3, r1, #2
 8005084:	4641      	mov	r1, r8
 8005086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508a:	4641      	mov	r1, r8
 800508c:	008a      	lsls	r2, r1, #2
 800508e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005092:	f7fb f94d 	bl	8000330 <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <LL_USART_SetBaudRate+0x454>)
 800509c:	fba3 1302 	umull	r1, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	2164      	movs	r1, #100	; 0x64
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	3332      	adds	r3, #50	; 0x32
 80050ae:	4a36      	ldr	r2, [pc, #216]	; (8005188 <LL_USART_SetBaudRate+0x454>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050bc:	b29b      	uxth	r3, r3
 80050be:	4423      	add	r3, r4
 80050c0:	b29c      	uxth	r4, r3
 80050c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050c6:	2200      	movs	r2, #0
 80050c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80050ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	1891      	adds	r1, r2, r2
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	415b      	adcs	r3, r3
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050e0:	4641      	mov	r1, r8
 80050e2:	1851      	adds	r1, r2, r1
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	4649      	mov	r1, r9
 80050e8:	414b      	adcs	r3, r1
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050f8:	4659      	mov	r1, fp
 80050fa:	00cb      	lsls	r3, r1, #3
 80050fc:	4651      	mov	r1, sl
 80050fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005102:	4651      	mov	r1, sl
 8005104:	00ca      	lsls	r2, r1, #3
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	4603      	mov	r3, r0
 800510c:	4642      	mov	r2, r8
 800510e:	189b      	adds	r3, r3, r2
 8005110:	673b      	str	r3, [r7, #112]	; 0x70
 8005112:	464b      	mov	r3, r9
 8005114:	460a      	mov	r2, r1
 8005116:	eb42 0303 	adc.w	r3, r2, r3
 800511a:	677b      	str	r3, [r7, #116]	; 0x74
 800511c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005120:	2200      	movs	r2, #0
 8005122:	66bb      	str	r3, [r7, #104]	; 0x68
 8005124:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8005132:	4649      	mov	r1, r9
 8005134:	008b      	lsls	r3, r1, #2
 8005136:	4641      	mov	r1, r8
 8005138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800513c:	4641      	mov	r1, r8
 800513e:	008a      	lsls	r2, r1, #2
 8005140:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005144:	f7fb f8f4 	bl	8000330 <__aeabi_uldivmod>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <LL_USART_SetBaudRate+0x454>)
 800514e:	fba3 1302 	umull	r1, r3, r3, r2
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	2164      	movs	r1, #100	; 0x64
 8005156:	fb01 f303 	mul.w	r3, r1, r3
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	3332      	adds	r3, #50	; 0x32
 8005160:	4a09      	ldr	r2, [pc, #36]	; (8005188 <LL_USART_SetBaudRate+0x454>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	b29b      	uxth	r3, r3
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	b29b      	uxth	r3, r3
 8005170:	4423      	add	r3, r4
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005182:	46bd      	mov	sp, r7
 8005184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005188:	51eb851f 	.word	0x51eb851f

0800518c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fd8e 	bl	8004cc0 <LL_USART_IsEnabled>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d16c      	bne.n	8005284 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051b2:	f023 030c 	bic.w	r3, r3, #12
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	6851      	ldr	r1, [r2, #4]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68d2      	ldr	r2, [r2, #12]
 80051be:	4311      	orrs	r1, r2
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	6912      	ldr	r2, [r2, #16]
 80051c4:	4311      	orrs	r1, r2
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	6992      	ldr	r2, [r2, #24]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fd85 	bl	8004ce8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fd92 	bl	8004d0e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fe20 	bl	8003e34 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a26      	ldr	r2, [pc, #152]	; (8005290 <LL_USART_Init+0x104>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d102      	bne.n	8005202 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e02f      	b.n	8005262 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a23      	ldr	r2, [pc, #140]	; (8005294 <LL_USART_Init+0x108>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d102      	bne.n	8005210 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	e028      	b.n	8005262 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a21      	ldr	r2, [pc, #132]	; (8005298 <LL_USART_Init+0x10c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d102      	bne.n	800521e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e021      	b.n	8005262 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1e      	ldr	r2, [pc, #120]	; (800529c <LL_USART_Init+0x110>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d102      	bne.n	800522c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	e01a      	b.n	8005262 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <LL_USART_Init+0x114>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d102      	bne.n	800523a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e013      	b.n	8005262 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <LL_USART_Init+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d102      	bne.n	8005248 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e00c      	b.n	8005262 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <LL_USART_Init+0x11c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d102      	bne.n	8005256 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e005      	b.n	8005262 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a14      	ldr	r2, [pc, #80]	; (80052ac <LL_USART_Init+0x120>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fd58 	bl	8004d34 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005284:	7ffb      	ldrb	r3, [r7, #31]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40011000 	.word	0x40011000
 8005294:	40004400 	.word	0x40004400
 8005298:	40004800 	.word	0x40004800
 800529c:	40011400 	.word	0x40011400
 80052a0:	40004c00 	.word	0x40004c00
 80052a4:	40005000 	.word	0x40005000
 80052a8:	40007800 	.word	0x40007800
 80052ac:	40007c00 	.word	0x40007c00

080052b0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <LL_mDelay+0x48>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80052be:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c6:	d00c      	beq.n	80052e2 <LL_mDelay+0x32>
  {
    Delay++;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80052ce:	e008      	b.n	80052e2 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <LL_mDelay+0x48>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <LL_mDelay+0x32>
    {
      Delay--;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3b01      	subs	r3, #1
 80052e0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f3      	bne.n	80052d0 <LL_mDelay+0x20>
    }
  }
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e010 	.word	0xe000e010

080052fc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <LL_SetSystemCoreClock+0x1c>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6013      	str	r3, [r2, #0]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000014 	.word	0x20000014

0800531c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005326:	f000 f888 	bl	800543a <BSP_SD_IsDetected>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d001      	beq.n	8005334 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e005      	b.n	8005340 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005334:	4804      	ldr	r0, [pc, #16]	; (8005348 <BSP_SD_Init+0x2c>)
 8005336:	f7fc fd95 	bl	8001e64 <HAL_SD_Init>
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800533e:	79fb      	ldrb	r3, [r7, #7]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20005994 	.word	0x20005994

0800534c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	68f9      	ldr	r1, [r7, #12]
 8005362:	4806      	ldr	r0, [pc, #24]	; (800537c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005364:	f7fc fe2e 	bl	8001fc4 <HAL_SD_ReadBlocks_DMA>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20005994 	.word	0x20005994

08005380 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	4806      	ldr	r0, [pc, #24]	; (80053b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005398:	f7fc fef6 	bl	8002188 <HAL_SD_WriteBlocks_DMA>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20005994 	.word	0x20005994

080053b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80053b8:	4805      	ldr	r0, [pc, #20]	; (80053d0 <BSP_SD_GetCardState+0x1c>)
 80053ba:	f7fd fb2b 	bl	8002a14 <HAL_SD_GetCardState>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20005994 	.word	0x20005994

080053d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4803      	ldr	r0, [pc, #12]	; (80053ec <BSP_SD_GetCardInfo+0x18>)
 80053e0:	f7fd faec 	bl	80029bc <HAL_SD_GetCardInfo>
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20005994 	.word	0x20005994

080053f0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80053f8:	f000 f818 	bl	800542c <BSP_SD_AbortCallback>
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800540c:	f003 fcc8 	bl	8008da0 <BSP_SD_WriteCpltCallback>
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005420:	f003 fcca 	bl	8008db8 <BSP_SD_ReadCpltCallback>
}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0

}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005440:	2301      	movs	r3, #1
 8005442:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	b2db      	uxtb	r3, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	2b7f      	cmp	r3, #127	; 0x7f
 8005464:	d802      	bhi.n	800546c <ff_convert+0x18>
		c = chr;
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	81fb      	strh	r3, [r7, #14]
 800546a:	e025      	b.n	80054b8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2bff      	cmp	r3, #255	; 0xff
 8005476:	d805      	bhi.n	8005484 <ff_convert+0x30>
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	3b80      	subs	r3, #128	; 0x80
 800547c:	4a12      	ldr	r2, [pc, #72]	; (80054c8 <ff_convert+0x74>)
 800547e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005482:	e000      	b.n	8005486 <ff_convert+0x32>
 8005484:	2300      	movs	r3, #0
 8005486:	81fb      	strh	r3, [r7, #14]
 8005488:	e016      	b.n	80054b8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800548a:	2300      	movs	r3, #0
 800548c:	81fb      	strh	r3, [r7, #14]
 800548e:	e009      	b.n	80054a4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005490:	89fb      	ldrh	r3, [r7, #14]
 8005492:	4a0d      	ldr	r2, [pc, #52]	; (80054c8 <ff_convert+0x74>)
 8005494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	429a      	cmp	r2, r3
 800549c:	d006      	beq.n	80054ac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800549e:	89fb      	ldrh	r3, [r7, #14]
 80054a0:	3301      	adds	r3, #1
 80054a2:	81fb      	strh	r3, [r7, #14]
 80054a4:	89fb      	ldrh	r3, [r7, #14]
 80054a6:	2b7f      	cmp	r3, #127	; 0x7f
 80054a8:	d9f2      	bls.n	8005490 <ff_convert+0x3c>
 80054aa:	e000      	b.n	80054ae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80054ac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	3380      	adds	r3, #128	; 0x80
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80054b8:	89fb      	ldrh	r3, [r7, #14]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	08015788 	.word	0x08015788

080054cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d201      	bcs.n	80054e2 <ff_wtoupper+0x16>
 80054de:	4b3e      	ldr	r3, [pc, #248]	; (80055d8 <ff_wtoupper+0x10c>)
 80054e0:	e000      	b.n	80054e4 <ff_wtoupper+0x18>
 80054e2:	4b3e      	ldr	r3, [pc, #248]	; (80055dc <ff_wtoupper+0x110>)
 80054e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	1c9a      	adds	r2, r3, #2
 80054ea:	617a      	str	r2, [r7, #20]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80054f0:	8a7b      	ldrh	r3, [r7, #18]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d068      	beq.n	80055c8 <ff_wtoupper+0xfc>
 80054f6:	88fa      	ldrh	r2, [r7, #6]
 80054f8:	8a7b      	ldrh	r3, [r7, #18]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d364      	bcc.n	80055c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	1c9a      	adds	r2, r3, #2
 8005502:	617a      	str	r2, [r7, #20]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	823b      	strh	r3, [r7, #16]
 8005508:	8a3b      	ldrh	r3, [r7, #16]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	81fb      	strh	r3, [r7, #14]
 800550e:	8a3b      	ldrh	r3, [r7, #16]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	8a79      	ldrh	r1, [r7, #18]
 8005518:	8a3b      	ldrh	r3, [r7, #16]
 800551a:	440b      	add	r3, r1
 800551c:	429a      	cmp	r2, r3
 800551e:	da49      	bge.n	80055b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005520:	89fb      	ldrh	r3, [r7, #14]
 8005522:	2b08      	cmp	r3, #8
 8005524:	d84f      	bhi.n	80055c6 <ff_wtoupper+0xfa>
 8005526:	a201      	add	r2, pc, #4	; (adr r2, 800552c <ff_wtoupper+0x60>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	08005551 	.word	0x08005551
 8005530:	08005563 	.word	0x08005563
 8005534:	08005579 	.word	0x08005579
 8005538:	08005581 	.word	0x08005581
 800553c:	08005589 	.word	0x08005589
 8005540:	08005591 	.word	0x08005591
 8005544:	08005599 	.word	0x08005599
 8005548:	080055a1 	.word	0x080055a1
 800554c:	080055a9 	.word	0x080055a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	8a7b      	ldrh	r3, [r7, #18]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	80fb      	strh	r3, [r7, #6]
 8005560:	e027      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	8a7b      	ldrh	r3, [r7, #18]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	b29b      	uxth	r3, r3
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	80fb      	strh	r3, [r7, #6]
 8005576:	e01c      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	3b10      	subs	r3, #16
 800557c:	80fb      	strh	r3, [r7, #6]
 800557e:	e018      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	3b20      	subs	r3, #32
 8005584:	80fb      	strh	r3, [r7, #6]
 8005586:	e014      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	3b30      	subs	r3, #48	; 0x30
 800558c:	80fb      	strh	r3, [r7, #6]
 800558e:	e010      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	3b1a      	subs	r3, #26
 8005594:	80fb      	strh	r3, [r7, #6]
 8005596:	e00c      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	3308      	adds	r3, #8
 800559c:	80fb      	strh	r3, [r7, #6]
 800559e:	e008      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	3b50      	subs	r3, #80	; 0x50
 80055a4:	80fb      	strh	r3, [r7, #6]
 80055a6:	e004      	b.n	80055b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80055ae:	80fb      	strh	r3, [r7, #6]
 80055b0:	bf00      	nop
			}
			break;
 80055b2:	e008      	b.n	80055c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d195      	bne.n	80054e6 <ff_wtoupper+0x1a>
 80055ba:	8a3b      	ldrh	r3, [r7, #16]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80055c4:	e78f      	b.n	80054e6 <ff_wtoupper+0x1a>
			break;
 80055c6:	bf00      	nop
	}

	return chr;
 80055c8:	88fb      	ldrh	r3, [r7, #6]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	08015888 	.word	0x08015888
 80055dc:	08015a7c 	.word	0x08015a7c

080055e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	4a08      	ldr	r2, [pc, #32]	; (8005610 <disk_status+0x30>)
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	79fa      	ldrb	r2, [r7, #7]
 80055f8:	4905      	ldr	r1, [pc, #20]	; (8005610 <disk_status+0x30>)
 80055fa:	440a      	add	r2, r1
 80055fc:	7a12      	ldrb	r2, [r2, #8]
 80055fe:	4610      	mov	r0, r2
 8005600:	4798      	blx	r3
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200000d4 	.word	0x200000d4

08005614 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <disk_initialize+0x48>)
 8005626:	5cd3      	ldrb	r3, [r2, r3]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d111      	bne.n	8005650 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	4a0b      	ldr	r2, [pc, #44]	; (800565c <disk_initialize+0x48>)
 8005630:	2101      	movs	r1, #1
 8005632:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	4a09      	ldr	r2, [pc, #36]	; (800565c <disk_initialize+0x48>)
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	79fa      	ldrb	r2, [r7, #7]
 8005642:	4906      	ldr	r1, [pc, #24]	; (800565c <disk_initialize+0x48>)
 8005644:	440a      	add	r2, r1
 8005646:	7a12      	ldrb	r2, [r2, #8]
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200000d4 	.word	0x200000d4

08005660 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <disk_read+0x3c>)
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	689c      	ldr	r4, [r3, #8]
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	4a07      	ldr	r2, [pc, #28]	; (800569c <disk_read+0x3c>)
 8005680:	4413      	add	r3, r2
 8005682:	7a18      	ldrb	r0, [r3, #8]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	47a0      	blx	r4
 800568c:	4603      	mov	r3, r0
 800568e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd90      	pop	{r4, r7, pc}
 800569a:	bf00      	nop
 800569c:	200000d4 	.word	0x200000d4

080056a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <disk_write+0x3c>)
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68dc      	ldr	r4, [r3, #12]
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	4a07      	ldr	r2, [pc, #28]	; (80056dc <disk_write+0x3c>)
 80056c0:	4413      	add	r3, r2
 80056c2:	7a18      	ldrb	r0, [r3, #8]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	47a0      	blx	r4
 80056cc:	4603      	mov	r3, r0
 80056ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd90      	pop	{r4, r7, pc}
 80056da:	bf00      	nop
 80056dc:	200000d4 	.word	0x200000d4

080056e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	603a      	str	r2, [r7, #0]
 80056ea:	71fb      	strb	r3, [r7, #7]
 80056ec:	460b      	mov	r3, r1
 80056ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	4a09      	ldr	r2, [pc, #36]	; (8005718 <disk_ioctl+0x38>)
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	79fa      	ldrb	r2, [r7, #7]
 80056fe:	4906      	ldr	r1, [pc, #24]	; (8005718 <disk_ioctl+0x38>)
 8005700:	440a      	add	r2, r1
 8005702:	7a10      	ldrb	r0, [r2, #8]
 8005704:	79b9      	ldrb	r1, [r7, #6]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	4798      	blx	r3
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
  return res;
 800570e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	200000d4 	.word	0x200000d4

0800571c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005720:	4904      	ldr	r1, [pc, #16]	; (8005734 <MX_FATFS_Init+0x18>)
 8005722:	4805      	ldr	r0, [pc, #20]	; (8005738 <MX_FATFS_Init+0x1c>)
 8005724:	f003 f9c4 	bl	8008ab0 <FATFS_LinkDriver>
 8005728:	4603      	mov	r3, r0
 800572a:	461a      	mov	r2, r3
 800572c:	4b03      	ldr	r3, [pc, #12]	; (800573c <MX_FATFS_Init+0x20>)
 800572e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005730:	bf00      	nop
 8005732:	bd80      	pop	{r7, pc}
 8005734:	200000a8 	.word	0x200000a8
 8005738:	08015bc8 	.word	0x08015bc8
 800573c:	200000a4 	.word	0x200000a4

08005740 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005744:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005746:	4618      	mov	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3301      	adds	r3, #1
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005760:	89fb      	ldrh	r3, [r7, #14]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	b21a      	sxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	b21b      	sxth	r3, r3
 800576c:	4313      	orrs	r3, r2
 800576e:	b21b      	sxth	r3, r3
 8005770:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005772:	89fb      	ldrh	r3, [r7, #14]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3303      	adds	r3, #3
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	3202      	adds	r2, #2
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	3201      	adds	r2, #1
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	7812      	ldrb	r2, [r2, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	887a      	ldrh	r2, [r7, #2]
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	0a1b      	lsrs	r3, r3, #8
 800583a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	1c53      	adds	r3, r2, #1
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	6179      	str	r1, [r7, #20]
 800587a:	7812      	ldrb	r2, [r2, #0]
 800587c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3b01      	subs	r3, #1
 8005882:	607b      	str	r3, [r7, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f1      	bne.n	800586e <mem_cpy+0x1a>
	}
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005896:	b480      	push	{r7}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	617a      	str	r2, [r7, #20]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f3      	bne.n	80058a6 <mem_set+0x10>
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80058cc:	b480      	push	{r7}
 80058ce:	b089      	sub	sp, #36	; 0x24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	61fa      	str	r2, [r7, #28]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	4619      	mov	r1, r3
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	61ba      	str	r2, [r7, #24]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	1acb      	subs	r3, r1, r3
 80058f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <mem_cmp+0x40>
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0eb      	beq.n	80058e4 <mem_cmp+0x18>

	return r;
 800590c:	697b      	ldr	r3, [r7, #20]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005924:	e002      	b.n	800592c <chk_chr+0x12>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3301      	adds	r3, #1
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <chk_chr+0x26>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	4293      	cmp	r3, r2
 800593e:	d1f2      	bne.n	8005926 <chk_chr+0xc>
	return *str;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	781b      	ldrb	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	e029      	b.n	80059b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005964:	4a27      	ldr	r2, [pc, #156]	; (8005a04 <chk_lock+0xb4>)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	4413      	add	r3, r2
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01d      	beq.n	80059ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005972:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <chk_lock+0xb4>)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	4413      	add	r3, r2
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d116      	bne.n	80059b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005984:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <chk_lock+0xb4>)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	4413      	add	r3, r2
 800598c:	3304      	adds	r3, #4
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005994:	429a      	cmp	r2, r3
 8005996:	d10c      	bne.n	80059b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005998:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <chk_lock+0xb4>)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4413      	add	r3, r2
 80059a0:	3308      	adds	r3, #8
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d102      	bne.n	80059b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80059ac:	e007      	b.n	80059be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80059ae:	2301      	movs	r3, #1
 80059b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d9d2      	bls.n	8005964 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d109      	bne.n	80059d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <chk_lock+0x80>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d101      	bne.n	80059d4 <chk_lock+0x84>
 80059d0:	2300      	movs	r3, #0
 80059d2:	e010      	b.n	80059f6 <chk_lock+0xa6>
 80059d4:	2312      	movs	r3, #18
 80059d6:	e00e      	b.n	80059f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d108      	bne.n	80059f0 <chk_lock+0xa0>
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <chk_lock+0xb4>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	4413      	add	r3, r2
 80059e6:	330c      	adds	r3, #12
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ee:	d101      	bne.n	80059f4 <chk_lock+0xa4>
 80059f0:	2310      	movs	r3, #16
 80059f2:	e000      	b.n	80059f6 <chk_lock+0xa6>
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	200000b4 	.word	0x200000b4

08005a08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e002      	b.n	8005a1a <enq_lock+0x12>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3301      	adds	r3, #1
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d806      	bhi.n	8005a2e <enq_lock+0x26>
 8005a20:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <enq_lock+0x40>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	4413      	add	r3, r2
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f2      	bne.n	8005a14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	200000b4 	.word	0x200000b4

08005a4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e01f      	b.n	8005a9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005a5c:	4a41      	ldr	r2, [pc, #260]	; (8005b64 <inc_lock+0x118>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	4413      	add	r3, r2
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d113      	bne.n	8005a96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005a6e:	4a3d      	ldr	r2, [pc, #244]	; (8005b64 <inc_lock+0x118>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	4413      	add	r3, r2
 8005a76:	3304      	adds	r3, #4
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d109      	bne.n	8005a96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005a82:	4a38      	ldr	r2, [pc, #224]	; (8005b64 <inc_lock+0x118>)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	4413      	add	r3, r2
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d006      	beq.n	8005aa4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d9dc      	bls.n	8005a5c <inc_lock+0x10>
 8005aa2:	e000      	b.n	8005aa6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005aa4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d132      	bne.n	8005b12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	e002      	b.n	8005ab8 <inc_lock+0x6c>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d806      	bhi.n	8005acc <inc_lock+0x80>
 8005abe:	4a29      	ldr	r2, [pc, #164]	; (8005b64 <inc_lock+0x118>)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4413      	add	r3, r2
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f2      	bne.n	8005ab2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d101      	bne.n	8005ad6 <inc_lock+0x8a>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e040      	b.n	8005b58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4922      	ldr	r1, [pc, #136]	; (8005b64 <inc_lock+0x118>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	440b      	add	r3, r1
 8005ae2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	491e      	ldr	r1, [pc, #120]	; (8005b64 <inc_lock+0x118>)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	440b      	add	r3, r1
 8005af0:	3304      	adds	r3, #4
 8005af2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	491a      	ldr	r1, [pc, #104]	; (8005b64 <inc_lock+0x118>)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	440b      	add	r3, r1
 8005b00:	3308      	adds	r3, #8
 8005b02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b04:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <inc_lock+0x118>)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	4413      	add	r3, r2
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	2200      	movs	r2, #0
 8005b10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <inc_lock+0xe0>
 8005b18:	4a12      	ldr	r2, [pc, #72]	; (8005b64 <inc_lock+0x118>)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	4413      	add	r3, r2
 8005b20:	330c      	adds	r3, #12
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <inc_lock+0xe0>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e015      	b.n	8005b58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <inc_lock+0xf8>
 8005b32:	4a0c      	ldr	r2, [pc, #48]	; (8005b64 <inc_lock+0x118>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	4413      	add	r3, r2
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	e001      	b.n	8005b48 <inc_lock+0xfc>
 8005b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b48:	4906      	ldr	r1, [pc, #24]	; (8005b64 <inc_lock+0x118>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	440b      	add	r3, r1
 8005b50:	330c      	adds	r3, #12
 8005b52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	200000b4 	.word	0x200000b4

08005b68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d825      	bhi.n	8005bc8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005b7c:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <dec_lock+0x74>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	4413      	add	r3, r2
 8005b84:	330c      	adds	r3, #12
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b8a:	89fb      	ldrh	r3, [r7, #14]
 8005b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b90:	d101      	bne.n	8005b96 <dec_lock+0x2e>
 8005b92:	2300      	movs	r3, #0
 8005b94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <dec_lock+0x3a>
 8005b9c:	89fb      	ldrh	r3, [r7, #14]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005ba2:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <dec_lock+0x74>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	4413      	add	r3, r2
 8005baa:	330c      	adds	r3, #12
 8005bac:	89fa      	ldrh	r2, [r7, #14]
 8005bae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d105      	bne.n	8005bc2 <dec_lock+0x5a>
 8005bb6:	4a09      	ldr	r2, [pc, #36]	; (8005bdc <dec_lock+0x74>)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	4413      	add	r3, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	737b      	strb	r3, [r7, #13]
 8005bc6:	e001      	b.n	8005bcc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005bc8:	2302      	movs	r3, #2
 8005bca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005bcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	200000b4 	.word	0x200000b4

08005be0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e010      	b.n	8005c10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005bee:	4a0d      	ldr	r2, [pc, #52]	; (8005c24 <clear_lock+0x44>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	4413      	add	r3, r2
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d105      	bne.n	8005c0a <clear_lock+0x2a>
 8005bfe:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <clear_lock+0x44>)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	4413      	add	r3, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d9eb      	bls.n	8005bee <clear_lock+0xe>
	}
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	200000b4 	.word	0x200000b4

08005c28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d034      	beq.n	8005ca6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7858      	ldrb	r0, [r3, #1]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	f7ff fd26 	bl	80056a0 <disk_write>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]
 8005c5e:	e022      	b.n	8005ca6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	1ad2      	subs	r2, r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d217      	bcs.n	8005ca6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	789b      	ldrb	r3, [r3, #2]
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	e010      	b.n	8005ca0 <sync_window+0x78>
					wsect += fs->fsize;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	7858      	ldrb	r0, [r3, #1]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c92:	2301      	movs	r3, #1
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	f7ff fd03 	bl	80056a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d8eb      	bhi.n	8005c7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d01b      	beq.n	8005d00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ffad 	bl	8005c28 <sync_window>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d113      	bne.n	8005d00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7858      	ldrb	r0, [r3, #1]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	f7ff fcbb 	bl	8005660 <disk_read>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ff87 	bl	8005c28 <sync_window>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d159      	bne.n	8005dd8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d149      	bne.n	8005dc0 <sync_fs+0xb4>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	791b      	ldrb	r3, [r3, #4]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d145      	bne.n	8005dc0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	899b      	ldrh	r3, [r3, #12]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2100      	movs	r1, #0
 8005d42:	f7ff fda8 	bl	8005896 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3338      	adds	r3, #56	; 0x38
 8005d4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fd37 	bl	80057c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3338      	adds	r3, #56	; 0x38
 8005d5c:	4921      	ldr	r1, [pc, #132]	; (8005de4 <sync_fs+0xd8>)
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fd4c 	bl	80057fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3338      	adds	r3, #56	; 0x38
 8005d68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d6c:	491e      	ldr	r1, [pc, #120]	; (8005de8 <sync_fs+0xdc>)
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fd44 	bl	80057fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3338      	adds	r3, #56	; 0x38
 8005d78:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f7ff fd3a 	bl	80057fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3338      	adds	r3, #56	; 0x38
 8005d8c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7ff fd30 	bl	80057fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	7858      	ldrb	r0, [r3, #1]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db4:	2301      	movs	r3, #1
 8005db6:	f7ff fc73 	bl	80056a0 <disk_write>
			fs->fsi_flag = 0;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fc89 	bl	80056e0 <disk_ioctl>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <sync_fs+0xcc>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	41615252 	.word	0x41615252
 8005de8:	61417272 	.word	0x61417272

08005dec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	3b02      	subs	r3, #2
 8005dfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	3b02      	subs	r3, #2
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d301      	bcc.n	8005e0c <clust2sect+0x20>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e008      	b.n	8005e1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	895b      	ldrh	r3, [r3, #10]
 8005e10:	461a      	mov	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	fb03 f202 	mul.w	r2, r3, r2
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	4413      	add	r3, r2
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d904      	bls.n	8005e4a <get_fat+0x20>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d302      	bcc.n	8005e50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e0bb      	b.n	8005fc8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	f000 8083 	beq.w	8005f66 <get_fat+0x13c>
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	f300 80a7 	bgt.w	8005fb4 <get_fat+0x18a>
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d002      	beq.n	8005e70 <get_fat+0x46>
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d056      	beq.n	8005f1c <get_fat+0xf2>
 8005e6e:	e0a1      	b.n	8005fb4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	899b      	ldrh	r3, [r3, #12]
 8005e86:	4619      	mov	r1, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e8e:	4413      	add	r3, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	6938      	ldr	r0, [r7, #16]
 8005e94:	f7ff ff0c 	bl	8005cb0 <move_window>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 808d 	bne.w	8005fba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	60fa      	str	r2, [r7, #12]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	8992      	ldrh	r2, [r2, #12]
 8005eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eae:	fb01 f202 	mul.w	r2, r1, r2
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ebc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	899b      	ldrh	r3, [r3, #12]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ece:	4413      	add	r3, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f7ff feec 	bl	8005cb0 <move_window>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d16f      	bne.n	8005fbe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	899b      	ldrh	r3, [r3, #12]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eea:	fb01 f202 	mul.w	r2, r1, r2
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <get_fat+0xe8>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	e002      	b.n	8005f18 <get_fat+0xee>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f18:	617b      	str	r3, [r7, #20]
			break;
 8005f1a:	e055      	b.n	8005fc8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	899b      	ldrh	r3, [r3, #12]
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f30:	4413      	add	r3, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f7ff febb 	bl	8005cb0 <move_window>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d140      	bne.n	8005fc2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	8992      	ldrh	r2, [r2, #12]
 8005f4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f52:	fb00 f202 	mul.w	r2, r0, r2
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	440b      	add	r3, r1
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fbf8 	bl	8005750 <ld_word>
 8005f60:	4603      	mov	r3, r0
 8005f62:	617b      	str	r3, [r7, #20]
			break;
 8005f64:	e030      	b.n	8005fc8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	899b      	ldrh	r3, [r3, #12]
 8005f6e:	089b      	lsrs	r3, r3, #2
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	4619      	mov	r1, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6938      	ldr	r0, [r7, #16]
 8005f80:	f7ff fe96 	bl	8005cb0 <move_window>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11d      	bne.n	8005fc6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	8992      	ldrh	r2, [r2, #12]
 8005f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f9c:	fb00 f202 	mul.w	r2, r0, r2
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fbeb 	bl	8005780 <ld_dword>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005fb0:	617b      	str	r3, [r7, #20]
			break;
 8005fb2:	e009      	b.n	8005fc8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e006      	b.n	8005fc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fba:	bf00      	nop
 8005fbc:	e004      	b.n	8005fc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fc6:	bf00      	nop
		}
	}

	return val;
 8005fc8:	697b      	ldr	r3, [r7, #20]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005fd2:	b590      	push	{r4, r7, lr}
 8005fd4:	b089      	sub	sp, #36	; 0x24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f240 8102 	bls.w	80061ee <put_fat+0x21c>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	f080 80fc 	bcs.w	80061ee <put_fat+0x21c>
		switch (fs->fs_type) {
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	f000 80b6 	beq.w	800616c <put_fat+0x19a>
 8006000:	2b03      	cmp	r3, #3
 8006002:	f300 80fd 	bgt.w	8006200 <put_fat+0x22e>
 8006006:	2b01      	cmp	r3, #1
 8006008:	d003      	beq.n	8006012 <put_fat+0x40>
 800600a:	2b02      	cmp	r3, #2
 800600c:	f000 8083 	beq.w	8006116 <put_fat+0x144>
 8006010:	e0f6      	b.n	8006200 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4413      	add	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	899b      	ldrh	r3, [r3, #12]
 8006028:	4619      	mov	r1, r3
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006030:	4413      	add	r3, r2
 8006032:	4619      	mov	r1, r3
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fe3b 	bl	8005cb0 <move_window>
 800603a:	4603      	mov	r3, r0
 800603c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800603e:	7ffb      	ldrb	r3, [r7, #31]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f040 80d6 	bne.w	80061f2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	61ba      	str	r2, [r7, #24]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	8992      	ldrh	r2, [r2, #12]
 8006056:	fbb3 f0f2 	udiv	r0, r3, r2
 800605a:	fb00 f202 	mul.w	r2, r0, r2
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	440b      	add	r3, r1
 8006062:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <put_fat+0xb8>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	b25b      	sxtb	r3, r3
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	b25a      	sxtb	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	b25b      	sxtb	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b25b      	sxtb	r3, r3
 8006086:	b2db      	uxtb	r3, r3
 8006088:	e001      	b.n	800608e <put_fat+0xbc>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	899b      	ldrh	r3, [r3, #12]
 80060a0:	4619      	mov	r1, r3
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80060a8:	4413      	add	r3, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff fdff 	bl	8005cb0 <move_window>
 80060b2:	4603      	mov	r3, r0
 80060b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060b6:	7ffb      	ldrb	r3, [r7, #31]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 809c 	bne.w	80061f6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	899b      	ldrh	r3, [r3, #12]
 80060c8:	461a      	mov	r2, r3
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80060d0:	fb00 f202 	mul.w	r2, r0, r2
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	440b      	add	r3, r1
 80060d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <put_fat+0x11a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e00e      	b.n	800610a <put_fat+0x138>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	f023 030f 	bic.w	r3, r3, #15
 80060f6:	b25a      	sxtb	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	b25b      	sxtb	r3, r3
 8006104:	4313      	orrs	r3, r2
 8006106:	b25b      	sxtb	r3, r3
 8006108:	b2db      	uxtb	r3, r3
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	70da      	strb	r2, [r3, #3]
			break;
 8006114:	e074      	b.n	8006200 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	899b      	ldrh	r3, [r3, #12]
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	b29b      	uxth	r3, r3
 8006122:	4619      	mov	r1, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	fbb3 f3f1 	udiv	r3, r3, r1
 800612a:	4413      	add	r3, r2
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff fdbe 	bl	8005cb0 <move_window>
 8006134:	4603      	mov	r3, r0
 8006136:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006138:	7ffb      	ldrb	r3, [r7, #31]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d15d      	bne.n	80061fa <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	8992      	ldrh	r2, [r2, #12]
 800614c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006150:	fb00 f202 	mul.w	r2, r0, r2
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	440b      	add	r3, r1
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	b292      	uxth	r2, r2
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fb31 	bl	80057c6 <st_word>
			fs->wflag = 1;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	70da      	strb	r2, [r3, #3]
			break;
 800616a:	e049      	b.n	8006200 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	899b      	ldrh	r3, [r3, #12]
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	b29b      	uxth	r3, r3
 8006178:	4619      	mov	r1, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006180:	4413      	add	r3, r2
 8006182:	4619      	mov	r1, r3
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fd93 	bl	8005cb0 <move_window>
 800618a:	4603      	mov	r3, r0
 800618c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800618e:	7ffb      	ldrb	r3, [r7, #31]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d134      	bne.n	80061fe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	8992      	ldrh	r2, [r2, #12]
 80061a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80061ac:	fb00 f202 	mul.w	r2, r0, r2
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	440b      	add	r3, r1
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fae3 	bl	8005780 <ld_dword>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061c0:	4323      	orrs	r3, r4
 80061c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	8992      	ldrh	r2, [r2, #12]
 80061d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80061d6:	fb00 f202 	mul.w	r2, r0, r2
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	440b      	add	r3, r1
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fb0b 	bl	80057fc <st_dword>
			fs->wflag = 1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	70da      	strb	r2, [r3, #3]
			break;
 80061ec:	e008      	b.n	8006200 <put_fat+0x22e>
		}
	}
 80061ee:	bf00      	nop
 80061f0:	e006      	b.n	8006200 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061f2:	bf00      	nop
 80061f4:	e004      	b.n	8006200 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061f6:	bf00      	nop
 80061f8:	e002      	b.n	8006200 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061fa:	bf00      	nop
 80061fc:	e000      	b.n	8006200 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061fe:	bf00      	nop
	return res;
 8006200:	7ffb      	ldrb	r3, [r7, #31]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3724      	adds	r7, #36	; 0x24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd90      	pop	{r4, r7, pc}

0800620a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b088      	sub	sp, #32
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d904      	bls.n	8006230 <remove_chain+0x26>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	d301      	bcc.n	8006234 <remove_chain+0x2a>
 8006230:	2302      	movs	r3, #2
 8006232:	e04b      	b.n	80062cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800623a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	69b8      	ldr	r0, [r7, #24]
 8006242:	f7ff fec6 	bl	8005fd2 <put_fat>
 8006246:	4603      	mov	r3, r0
 8006248:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800624a:	7ffb      	ldrb	r3, [r7, #31]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <remove_chain+0x4a>
 8006250:	7ffb      	ldrb	r3, [r7, #31]
 8006252:	e03b      	b.n	80062cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff fde7 	bl	8005e2a <get_fat>
 800625c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d031      	beq.n	80062c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <remove_chain+0x64>
 800626a:	2302      	movs	r3, #2
 800626c:	e02e      	b.n	80062cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006274:	d101      	bne.n	800627a <remove_chain+0x70>
 8006276:	2301      	movs	r3, #1
 8006278:	e028      	b.n	80062cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800627a:	2200      	movs	r2, #0
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	69b8      	ldr	r0, [r7, #24]
 8006280:	f7ff fea7 	bl	8005fd2 <put_fat>
 8006284:	4603      	mov	r3, r0
 8006286:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006288:	7ffb      	ldrb	r3, [r7, #31]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <remove_chain+0x88>
 800628e:	7ffb      	ldrb	r3, [r7, #31]
 8006290:	e01c      	b.n	80062cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	3b02      	subs	r3, #2
 800629c:	429a      	cmp	r2, r3
 800629e:	d20b      	bcs.n	80062b8 <remove_chain+0xae>
			fs->free_clst++;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d3c6      	bcc.n	8006254 <remove_chain+0x4a>
 80062c6:	e000      	b.n	80062ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80062c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <create_chain+0x2c>
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d31b      	bcc.n	8006338 <create_chain+0x64>
 8006300:	2301      	movs	r3, #1
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	e018      	b.n	8006338 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fd8e 	bl	8005e2a <get_fat>
 800630e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d801      	bhi.n	800631a <create_chain+0x46>
 8006316:	2301      	movs	r3, #1
 8006318:	e070      	b.n	80063fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006320:	d101      	bne.n	8006326 <create_chain+0x52>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	e06a      	b.n	80063fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	429a      	cmp	r2, r3
 800632e:	d201      	bcs.n	8006334 <create_chain+0x60>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	e063      	b.n	80063fc <create_chain+0x128>
		scl = clst;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	429a      	cmp	r2, r3
 800634a:	d307      	bcc.n	800635c <create_chain+0x88>
				ncl = 2;
 800634c:	2302      	movs	r3, #2
 800634e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	429a      	cmp	r2, r3
 8006356:	d901      	bls.n	800635c <create_chain+0x88>
 8006358:	2300      	movs	r3, #0
 800635a:	e04f      	b.n	80063fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800635c:	69f9      	ldr	r1, [r7, #28]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fd63 	bl	8005e2a <get_fat>
 8006364:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00e      	beq.n	800638a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d003      	beq.n	800637a <create_chain+0xa6>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006378:	d101      	bne.n	800637e <create_chain+0xaa>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	e03e      	b.n	80063fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	429a      	cmp	r2, r3
 8006384:	d1da      	bne.n	800633c <create_chain+0x68>
 8006386:	2300      	movs	r3, #0
 8006388:	e038      	b.n	80063fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800638a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800638c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	6938      	ldr	r0, [r7, #16]
 8006394:	f7ff fe1d 	bl	8005fd2 <put_fat>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <create_chain+0xe2>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6938      	ldr	r0, [r7, #16]
 80063ae:	f7ff fe10 	bl	8005fd2 <put_fat>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d116      	bne.n	80063ea <create_chain+0x116>
		fs->last_clst = ncl;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	3b02      	subs	r3, #2
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d804      	bhi.n	80063da <create_chain+0x106>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	1e5a      	subs	r2, r3, #1
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	791b      	ldrb	r3, [r3, #4]
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	711a      	strb	r2, [r3, #4]
 80063e8:	e007      	b.n	80063fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d102      	bne.n	80063f6 <create_chain+0x122>
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f4:	e000      	b.n	80063f8 <create_chain+0x124>
 80063f6:	2301      	movs	r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80063fa:	69fb      	ldr	r3, [r7, #28]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3720      	adds	r7, #32
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	3304      	adds	r3, #4
 800641a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	899b      	ldrh	r3, [r3, #12]
 8006420:	461a      	mov	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	fbb3 f3f2 	udiv	r3, r3, r2
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	8952      	ldrh	r2, [r2, #10]
 800642c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006430:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1d1a      	adds	r2, r3, #4
 8006436:	613a      	str	r2, [r7, #16]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <clmt_clust+0x42>
 8006442:	2300      	movs	r3, #0
 8006444:	e010      	b.n	8006468 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d307      	bcc.n	800645e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800645c:	e7e9      	b.n	8006432 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800645e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4413      	add	r3, r2
}
 8006468:	4618      	mov	r0, r3
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648a:	d204      	bcs.n	8006496 <dir_sdi+0x22>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006496:	2302      	movs	r3, #2
 8006498:	e071      	b.n	800657e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <dir_sdi+0x46>
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d902      	bls.n	80064ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10c      	bne.n	80064da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	8912      	ldrh	r2, [r2, #8]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d301      	bcc.n	80064d0 <dir_sdi+0x5c>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e056      	b.n	800657e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	61da      	str	r2, [r3, #28]
 80064d8:	e02d      	b.n	8006536 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	895b      	ldrh	r3, [r3, #10]
 80064de:	461a      	mov	r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	899b      	ldrh	r3, [r3, #12]
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
 80064e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064ea:	e019      	b.n	8006520 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fc9a 	bl	8005e2a <get_fat>
 80064f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064fe:	d101      	bne.n	8006504 <dir_sdi+0x90>
 8006500:	2301      	movs	r3, #1
 8006502:	e03c      	b.n	800657e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d904      	bls.n	8006514 <dir_sdi+0xa0>
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	429a      	cmp	r2, r3
 8006512:	d301      	bcc.n	8006518 <dir_sdi+0xa4>
 8006514:	2302      	movs	r3, #2
 8006516:	e032      	b.n	800657e <dir_sdi+0x10a>
			ofs -= csz;
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d2e1      	bcs.n	80064ec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006528:	6979      	ldr	r1, [r7, #20]
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f7ff fc5e 	bl	8005dec <clust2sect>
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <dir_sdi+0xd4>
 8006544:	2302      	movs	r3, #2
 8006546:	e01a      	b.n	800657e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	899b      	ldrh	r3, [r3, #12]
 8006550:	4619      	mov	r1, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	fbb3 f3f1 	udiv	r3, r3, r1
 8006558:	441a      	add	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	899b      	ldrh	r3, [r3, #12]
 8006568:	461a      	mov	r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006570:	fb00 f202 	mul.w	r2, r0, r2
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	18ca      	adds	r2, r1, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	3320      	adds	r3, #32
 800659c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <dir_next+0x28>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ac:	d301      	bcc.n	80065b2 <dir_next+0x2c>
 80065ae:	2304      	movs	r3, #4
 80065b0:	e0bb      	b.n	800672a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	899b      	ldrh	r3, [r3, #12]
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80065be:	fb01 f202 	mul.w	r2, r1, r2
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 809d 	bne.w	8006704 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	8912      	ldrh	r2, [r2, #8]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	f0c0 808d 	bcc.w	8006704 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	61da      	str	r2, [r3, #28]
 80065f0:	2304      	movs	r3, #4
 80065f2:	e09a      	b.n	800672a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	899b      	ldrh	r3, [r3, #12]
 80065f8:	461a      	mov	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	8952      	ldrh	r2, [r2, #10]
 8006604:	3a01      	subs	r2, #1
 8006606:	4013      	ands	r3, r2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d17b      	bne.n	8006704 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f7ff fc08 	bl	8005e2a <get_fat>
 800661a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d801      	bhi.n	8006626 <dir_next+0xa0>
 8006622:	2302      	movs	r3, #2
 8006624:	e081      	b.n	800672a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800662c:	d101      	bne.n	8006632 <dir_next+0xac>
 800662e:	2301      	movs	r3, #1
 8006630:	e07b      	b.n	800672a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	429a      	cmp	r2, r3
 800663a:	d359      	bcc.n	80066f0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	61da      	str	r2, [r3, #28]
 8006648:	2304      	movs	r3, #4
 800664a:	e06e      	b.n	800672a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f7ff fe3d 	bl	80062d4 <create_chain>
 800665a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <dir_next+0xe0>
 8006662:	2307      	movs	r3, #7
 8006664:	e061      	b.n	800672a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <dir_next+0xea>
 800666c:	2302      	movs	r3, #2
 800666e:	e05c      	b.n	800672a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006676:	d101      	bne.n	800667c <dir_next+0xf6>
 8006678:	2301      	movs	r3, #1
 800667a:	e056      	b.n	800672a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff fad3 	bl	8005c28 <sync_window>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <dir_next+0x106>
 8006688:	2301      	movs	r3, #1
 800668a:	e04e      	b.n	800672a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	899b      	ldrh	r3, [r3, #12]
 8006696:	461a      	mov	r2, r3
 8006698:	2100      	movs	r1, #0
 800669a:	f7ff f8fc 	bl	8005896 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	6979      	ldr	r1, [r7, #20]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff fba1 	bl	8005dec <clust2sect>
 80066aa:	4602      	mov	r2, r0
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	635a      	str	r2, [r3, #52]	; 0x34
 80066b0:	e012      	b.n	80066d8 <dir_next+0x152>
						fs->wflag = 1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff fab5 	bl	8005c28 <sync_window>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <dir_next+0x142>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e030      	b.n	800672a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	3301      	adds	r3, #1
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	635a      	str	r2, [r3, #52]	; 0x34
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	895b      	ldrh	r3, [r3, #10]
 80066dc:	461a      	mov	r2, r3
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d3e6      	bcc.n	80066b2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80066f6:	6979      	ldr	r1, [r7, #20]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fb77 	bl	8005dec <clust2sect>
 80066fe:	4602      	mov	r2, r0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	899b      	ldrh	r3, [r3, #12]
 8006714:	461a      	mov	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	fbb3 f0f2 	udiv	r0, r3, r2
 800671c:	fb00 f202 	mul.w	r2, r0, r2
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	18ca      	adds	r2, r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006742:	2100      	movs	r1, #0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fe95 	bl	8006474 <dir_sdi>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d12b      	bne.n	80067ac <dir_alloc+0x7a>
		n = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	4619      	mov	r1, r3
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff faa6 	bl	8005cb0 <move_window>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d11d      	bne.n	80067aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2be5      	cmp	r3, #229	; 0xe5
 8006776:	d004      	beq.n	8006782 <dir_alloc+0x50>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d107      	bne.n	8006792 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3301      	adds	r3, #1
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d102      	bne.n	8006796 <dir_alloc+0x64>
 8006790:	e00c      	b.n	80067ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006796:	2101      	movs	r1, #1
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fef4 	bl	8006586 <dir_next>
 800679e:	4603      	mov	r3, r0
 80067a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0d7      	beq.n	8006758 <dir_alloc+0x26>
 80067a8:	e000      	b.n	80067ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80067aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d101      	bne.n	80067b6 <dir_alloc+0x84>
 80067b2:	2307      	movs	r3, #7
 80067b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	331a      	adds	r3, #26
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe ffbe 	bl	8005750 <ld_word>
 80067d4:	4603      	mov	r3, r0
 80067d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d109      	bne.n	80067f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe ffb3 	bl	8005750 <ld_word>
 80067ea:	4603      	mov	r3, r0
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80067f4:	68fb      	ldr	r3, [r7, #12]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	331a      	adds	r3, #26
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	b292      	uxth	r2, r2
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe ffd6 	bl	80057c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b03      	cmp	r3, #3
 8006820:	d109      	bne.n	8006836 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f103 0214 	add.w	r2, r3, #20
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	b29b      	uxth	r3, r3
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7fe ffc8 	bl	80057c6 <st_word>
	}
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	331a      	adds	r3, #26
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe ff7e 	bl	8005750 <ld_word>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <cmp_lfn+0x1e>
 800685a:	2300      	movs	r3, #0
 800685c:	e059      	b.n	8006912 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	4613      	mov	r3, r2
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006874:	2301      	movs	r3, #1
 8006876:	81fb      	strh	r3, [r7, #14]
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	e033      	b.n	80068e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800687e:	4a27      	ldr	r2, [pc, #156]	; (800691c <cmp_lfn+0xdc>)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	4413      	add	r3, r2
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe ff5f 	bl	8005750 <ld_word>
 8006892:	4603      	mov	r3, r0
 8006894:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01a      	beq.n	80068d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2bfe      	cmp	r3, #254	; 0xfe
 80068a0:	d812      	bhi.n	80068c8 <cmp_lfn+0x88>
 80068a2:	89bb      	ldrh	r3, [r7, #12]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe fe11 	bl	80054cc <ff_wtoupper>
 80068aa:	4603      	mov	r3, r0
 80068ac:	461c      	mov	r4, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	617a      	str	r2, [r7, #20]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe fe05 	bl	80054cc <ff_wtoupper>
 80068c2:	4603      	mov	r3, r0
 80068c4:	429c      	cmp	r4, r3
 80068c6:	d001      	beq.n	80068cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80068c8:	2300      	movs	r3, #0
 80068ca:	e022      	b.n	8006912 <cmp_lfn+0xd2>
			}
			wc = uc;
 80068cc:	89bb      	ldrh	r3, [r7, #12]
 80068ce:	81fb      	strh	r3, [r7, #14]
 80068d0:	e006      	b.n	80068e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80068d2:	89bb      	ldrh	r3, [r7, #12]
 80068d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068d8:	4293      	cmp	r3, r2
 80068da:	d001      	beq.n	80068e0 <cmp_lfn+0xa0>
 80068dc:	2300      	movs	r3, #0
 80068de:	e018      	b.n	8006912 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3301      	adds	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b0c      	cmp	r3, #12
 80068ea:	d9c8      	bls.n	800687e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <cmp_lfn+0xd0>
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <cmp_lfn+0xd0>
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <cmp_lfn+0xd0>
 800690c:	2300      	movs	r3, #0
 800690e:	e000      	b.n	8006912 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006910:	2301      	movs	r3, #1
}
 8006912:	4618      	mov	r0, r3
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	bd90      	pop	{r4, r7, pc}
 800691a:	bf00      	nop
 800691c:	08015bb8 	.word	0x08015bb8

08006920 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	331a      	adds	r3, #26
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe ff0e 	bl	8005750 <ld_word>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <pick_lfn+0x1e>
 800693a:	2300      	movs	r3, #0
 800693c:	e04d      	b.n	80069da <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006946:	1e5a      	subs	r2, r3, #1
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006954:	2301      	movs	r3, #1
 8006956:	81fb      	strh	r3, [r7, #14]
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	e028      	b.n	80069b0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800695e:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <pick_lfn+0xc4>)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	4413      	add	r3, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe feef 	bl	8005750 <ld_word>
 8006972:	4603      	mov	r3, r0
 8006974:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006976:	89fb      	ldrh	r3, [r7, #14]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2bfe      	cmp	r3, #254	; 0xfe
 8006980:	d901      	bls.n	8006986 <pick_lfn+0x66>
 8006982:	2300      	movs	r3, #0
 8006984:	e029      	b.n	80069da <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006986:	89bb      	ldrh	r3, [r7, #12]
 8006988:	81fb      	strh	r3, [r7, #14]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	617a      	str	r2, [r7, #20]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	89fa      	ldrh	r2, [r7, #14]
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	e006      	b.n	80069aa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800699c:	89bb      	ldrh	r3, [r7, #12]
 800699e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d001      	beq.n	80069aa <pick_lfn+0x8a>
 80069a6:	2300      	movs	r3, #0
 80069a8:	e017      	b.n	80069da <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3301      	adds	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b0c      	cmp	r3, #12
 80069b4:	d9d3      	bls.n	800695e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2bfe      	cmp	r3, #254	; 0xfe
 80069c6:	d901      	bls.n	80069cc <pick_lfn+0xac>
 80069c8:	2300      	movs	r3, #0
 80069ca:	e006      	b.n	80069da <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	4413      	add	r3, r2
 80069d4:	2200      	movs	r2, #0
 80069d6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80069d8:	2301      	movs	r3, #1
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	08015bb8 	.word	0x08015bb8

080069e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4611      	mov	r1, r2
 80069f4:	461a      	mov	r2, r3
 80069f6:	460b      	mov	r3, r1
 80069f8:	71fb      	strb	r3, [r7, #7]
 80069fa:	4613      	mov	r3, r2
 80069fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	330d      	adds	r3, #13
 8006a02:	79ba      	ldrb	r2, [r7, #6]
 8006a04:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	330b      	adds	r3, #11
 8006a0a:	220f      	movs	r2, #15
 8006a0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	330c      	adds	r3, #12
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	331a      	adds	r3, #26
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe fed2 	bl	80057c6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	1e5a      	subs	r2, r3, #1
 8006a26:	4613      	mov	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	82fb      	strh	r3, [r7, #22]
 8006a36:	2300      	movs	r3, #0
 8006a38:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a3a:	8afb      	ldrh	r3, [r7, #22]
 8006a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <put_lfn+0x6c>
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	61fa      	str	r2, [r7, #28]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <put_lfn+0xcc>)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	4413      	add	r3, r2
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	8afa      	ldrh	r2, [r7, #22]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fead 	bl	80057c6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a6c:	8afb      	ldrh	r3, [r7, #22]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <put_lfn+0x90>
 8006a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a76:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b0c      	cmp	r3, #12
 8006a82:	d9da      	bls.n	8006a3a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a84:	8afb      	ldrh	r3, [r7, #22]
 8006a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d006      	beq.n	8006a9c <put_lfn+0xb4>
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d103      	bne.n	8006aa4 <put_lfn+0xbc>
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	79fa      	ldrb	r2, [r7, #7]
 8006aa8:	701a      	strb	r2, [r3, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	08015bb8 	.word	0x08015bb8

08006ab8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08c      	sub	sp, #48	; 0x30
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ac6:	220b      	movs	r2, #11
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7fe fec2 	bl	8005854 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d92b      	bls.n	8006b2e <gen_numname+0x76>
		sr = seq;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006ada:	e022      	b.n	8006b22 <gen_numname+0x6a>
			wc = *lfn++;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aea:	e017      	b.n	8006b1c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	005a      	lsls	r2, r3, #1
 8006af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	4413      	add	r3, r2
 8006af8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <gen_numname+0x5e>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006b10:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006b14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	3301      	adds	r3, #1
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b0f      	cmp	r3, #15
 8006b20:	d9e4      	bls.n	8006aec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1d8      	bne.n	8006adc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b2e:	2307      	movs	r3, #7
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	3330      	adds	r3, #48	; 0x30
 8006b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b46:	2b39      	cmp	r3, #57	; 0x39
 8006b48:	d904      	bls.n	8006b54 <gen_numname+0x9c>
 8006b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b4e:	3307      	adds	r3, #7
 8006b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	1e5a      	subs	r2, r3, #1
 8006b58:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b5a:	3330      	adds	r3, #48	; 0x30
 8006b5c:	443b      	add	r3, r7
 8006b5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b62:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	091b      	lsrs	r3, r3, #4
 8006b6a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1df      	bne.n	8006b32 <gen_numname+0x7a>
	ns[i] = '~';
 8006b72:	f107 0214 	add.w	r2, r7, #20
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	4413      	add	r3, r2
 8006b7a:	227e      	movs	r2, #126	; 0x7e
 8006b7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b7e:	2300      	movs	r3, #0
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
 8006b82:	e002      	b.n	8006b8a <gen_numname+0xd2>
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	3301      	adds	r3, #1
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d205      	bcs.n	8006b9e <gen_numname+0xe6>
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	4413      	add	r3, r2
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d1f2      	bne.n	8006b84 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	2b07      	cmp	r3, #7
 8006ba2:	d807      	bhi.n	8006bb4 <gen_numname+0xfc>
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006baa:	3330      	adds	r3, #48	; 0x30
 8006bac:	443b      	add	r3, r7
 8006bae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006bb2:	e000      	b.n	8006bb6 <gen_numname+0xfe>
 8006bb4:	2120      	movs	r1, #32
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	627a      	str	r2, [r7, #36]	; 0x24
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	460a      	mov	r2, r1
 8006bc2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	d9e9      	bls.n	8006b9e <gen_numname+0xe6>
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	3730      	adds	r7, #48	; 0x30
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006be0:	230b      	movs	r3, #11
 8006be2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	0852      	lsrs	r2, r2, #1
 8006bea:	01db      	lsls	r3, r3, #7
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	6079      	str	r1, [r7, #4]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ed      	bne.n	8006be4 <sum_sfn+0x10>
	return sum;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006c20:	2304      	movs	r3, #4
 8006c22:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006c2a:	23ff      	movs	r3, #255	; 0xff
 8006c2c:	757b      	strb	r3, [r7, #21]
 8006c2e:	23ff      	movs	r3, #255	; 0xff
 8006c30:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006c32:	e081      	b.n	8006d38 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6938      	ldr	r0, [r7, #16]
 8006c3c:	f7ff f838 	bl	8005cb0 <move_window>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d17c      	bne.n	8006d44 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006c52:	7dbb      	ldrb	r3, [r7, #22]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006c58:	2304      	movs	r3, #4
 8006c5a:	75fb      	strb	r3, [r7, #23]
 8006c5c:	e077      	b.n	8006d4e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	330b      	adds	r3, #11
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c6a:	73fb      	strb	r3, [r7, #15]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	7bfa      	ldrb	r2, [r7, #15]
 8006c70:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006c72:	7dbb      	ldrb	r3, [r7, #22]
 8006c74:	2be5      	cmp	r3, #229	; 0xe5
 8006c76:	d00e      	beq.n	8006c96 <dir_read+0x80>
 8006c78:	7dbb      	ldrb	r3, [r7, #22]
 8006c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c7c:	d00b      	beq.n	8006c96 <dir_read+0x80>
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	f023 0320 	bic.w	r3, r3, #32
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d002      	beq.n	8006c9c <dir_read+0x86>
				ord = 0xFF;
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	757b      	strb	r3, [r7, #21]
 8006c9a:	e044      	b.n	8006d26 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d12f      	bne.n	8006d02 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006ca2:	7dbb      	ldrb	r3, [r7, #22]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	7b5b      	ldrb	r3, [r3, #13]
 8006cb2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006cb4:	7dbb      	ldrb	r3, [r7, #22]
 8006cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cba:	75bb      	strb	r3, [r7, #22]
 8006cbc:	7dbb      	ldrb	r3, [r7, #22]
 8006cbe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695a      	ldr	r2, [r3, #20]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006cc8:	7dba      	ldrb	r2, [r7, #22]
 8006cca:	7d7b      	ldrb	r3, [r7, #21]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d115      	bne.n	8006cfc <dir_read+0xe6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	330d      	adds	r3, #13
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	7d3a      	ldrb	r2, [r7, #20]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d10e      	bne.n	8006cfc <dir_read+0xe6>
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7ff fe19 	bl	8006920 <pick_lfn>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <dir_read+0xe6>
 8006cf4:	7d7b      	ldrb	r3, [r7, #21]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	e000      	b.n	8006cfe <dir_read+0xe8>
 8006cfc:	23ff      	movs	r3, #255	; 0xff
 8006cfe:	757b      	strb	r3, [r7, #21]
 8006d00:	e011      	b.n	8006d26 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006d02:	7d7b      	ldrb	r3, [r7, #21]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <dir_read+0x106>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff ff61 	bl	8006bd4 <sum_sfn>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	7d3b      	ldrb	r3, [r7, #20]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d015      	beq.n	8006d48 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8006d24:	e010      	b.n	8006d48 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006d26:	2100      	movs	r1, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fc2c 	bl	8006586 <dir_next>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d109      	bne.n	8006d4c <dir_read+0x136>
	while (dp->sect) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f47f af79 	bne.w	8006c34 <dir_read+0x1e>
 8006d42:	e004      	b.n	8006d4e <dir_read+0x138>
		if (res != FR_OK) break;
 8006d44:	bf00      	nop
 8006d46:	e002      	b.n	8006d4e <dir_read+0x138>
					break;
 8006d48:	bf00      	nop
 8006d4a:	e000      	b.n	8006d4e <dir_read+0x138>
		if (res != FR_OK) break;
 8006d4c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <dir_read+0x144>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	61da      	str	r2, [r3, #28]
	return res;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d72:	2100      	movs	r1, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fb7d 	bl	8006474 <dir_sdi>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <dir_find+0x24>
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	e0a9      	b.n	8006edc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d88:	23ff      	movs	r3, #255	; 0xff
 8006d8a:	753b      	strb	r3, [r7, #20]
 8006d8c:	7d3b      	ldrb	r3, [r7, #20]
 8006d8e:	757b      	strb	r3, [r7, #21]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6938      	ldr	r0, [r7, #16]
 8006da0:	f7fe ff86 	bl	8005cb0 <move_window>
 8006da4:	4603      	mov	r3, r0
 8006da6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 8090 	bne.w	8006ed0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006db8:	7dbb      	ldrb	r3, [r7, #22]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <dir_find+0x60>
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	75fb      	strb	r3, [r7, #23]
 8006dc2:	e08a      	b.n	8006eda <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	330b      	adds	r3, #11
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd0:	73fb      	strb	r3, [r7, #15]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006dd8:	7dbb      	ldrb	r3, [r7, #22]
 8006dda:	2be5      	cmp	r3, #229	; 0xe5
 8006ddc:	d007      	beq.n	8006dee <dir_find+0x8a>
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d009      	beq.n	8006dfc <dir_find+0x98>
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d006      	beq.n	8006dfc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006dee:	23ff      	movs	r3, #255	; 0xff
 8006df0:	757b      	strb	r3, [r7, #21]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
 8006dfa:	e05e      	b.n	8006eba <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b0f      	cmp	r3, #15
 8006e00:	d136      	bne.n	8006e70 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d154      	bne.n	8006eba <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006e10:	7dbb      	ldrb	r3, [r7, #22]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	7b5b      	ldrb	r3, [r3, #13]
 8006e20:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006e22:	7dbb      	ldrb	r3, [r7, #22]
 8006e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e28:	75bb      	strb	r3, [r7, #22]
 8006e2a:	7dbb      	ldrb	r3, [r7, #22]
 8006e2c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e36:	7dba      	ldrb	r2, [r7, #22]
 8006e38:	7d7b      	ldrb	r3, [r7, #21]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d115      	bne.n	8006e6a <dir_find+0x106>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	330d      	adds	r3, #13
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	7d3a      	ldrb	r2, [r7, #20]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d10e      	bne.n	8006e6a <dir_find+0x106>
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7ff fcf2 	bl	8006840 <cmp_lfn>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <dir_find+0x106>
 8006e62:	7d7b      	ldrb	r3, [r7, #21]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	e000      	b.n	8006e6c <dir_find+0x108>
 8006e6a:	23ff      	movs	r3, #255	; 0xff
 8006e6c:	757b      	strb	r3, [r7, #21]
 8006e6e:	e024      	b.n	8006eba <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e70:	7d7b      	ldrb	r3, [r7, #21]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <dir_find+0x126>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff feaa 	bl	8006bd4 <sum_sfn>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	7d3b      	ldrb	r3, [r7, #20]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d024      	beq.n	8006ed4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <dir_find+0x14a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a18      	ldr	r0, [r3, #32]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3324      	adds	r3, #36	; 0x24
 8006ea0:	220b      	movs	r2, #11
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f7fe fd12 	bl	80058cc <mem_cmp>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d014      	beq.n	8006ed8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006eae:	23ff      	movs	r3, #255	; 0xff
 8006eb0:	757b      	strb	r3, [r7, #21]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006eba:	2100      	movs	r1, #0
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff fb62 	bl	8006586 <dir_next>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f43f af65 	beq.w	8006d98 <dir_find+0x34>
 8006ece:	e004      	b.n	8006eda <dir_find+0x176>
		if (res != FR_OK) break;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ed8:	bf00      	nop

	return res;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08c      	sub	sp, #48	; 0x30
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ef8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <dir_register+0x20>
 8006f00:	2306      	movs	r3, #6
 8006f02:	e0e0      	b.n	80070c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006f04:	2300      	movs	r3, #0
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
 8006f08:	e002      	b.n	8006f10 <dir_register+0x2c>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f4      	bne.n	8006f0a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006f26:	f107 030c 	add.w	r3, r7, #12
 8006f2a:	220c      	movs	r2, #12
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fc91 	bl	8005854 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d032      	beq.n	8006fa2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2240      	movs	r2, #64	; 0x40
 8006f40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006f44:	2301      	movs	r3, #1
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f48:	e016      	b.n	8006f78 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	f107 010c 	add.w	r1, r7, #12
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f7ff fdad 	bl	8006ab8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff ff00 	bl	8006d64 <dir_find>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	3301      	adds	r3, #1
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	2b63      	cmp	r3, #99	; 0x63
 8006f7c:	d9e5      	bls.n	8006f4a <dir_register+0x66>
 8006f7e:	e000      	b.n	8006f82 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006f80:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b64      	cmp	r3, #100	; 0x64
 8006f86:	d101      	bne.n	8006f8c <dir_register+0xa8>
 8006f88:	2307      	movs	r3, #7
 8006f8a:	e09c      	b.n	80070c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d002      	beq.n	8006f9a <dir_register+0xb6>
 8006f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f98:	e095      	b.n	80070c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006f9a:	7dfa      	ldrb	r2, [r7, #23]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <dir_register+0xd8>
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	330c      	adds	r3, #12
 8006fb0:	4a47      	ldr	r2, [pc, #284]	; (80070d0 <dir_register+0x1ec>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	089b      	lsrs	r3, r3, #2
 8006fb8:	3301      	adds	r3, #1
 8006fba:	e000      	b.n	8006fbe <dir_register+0xda>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006fc0:	6a39      	ldr	r1, [r7, #32]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fbb5 	bl	8006732 <dir_alloc>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d148      	bne.n	8007068 <dir_register+0x184>
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	623b      	str	r3, [r7, #32]
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d042      	beq.n	8007068 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	015b      	lsls	r3, r3, #5
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff fa40 	bl	8006474 <dir_sdi>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d132      	bne.n	8007068 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3324      	adds	r3, #36	; 0x24
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fde4 	bl	8006bd4 <sum_sfn>
 800700c:	4603      	mov	r3, r0
 800700e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	4619      	mov	r1, r3
 8007016:	69f8      	ldr	r0, [r7, #28]
 8007018:	f7fe fe4a 	bl	8005cb0 <move_window>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007026:	2b00      	cmp	r3, #0
 8007028:	d11d      	bne.n	8007066 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	6918      	ldr	r0, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a19      	ldr	r1, [r3, #32]
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	b2da      	uxtb	r2, r3
 8007036:	7efb      	ldrb	r3, [r7, #27]
 8007038:	f7ff fcd6 	bl	80069e8 <put_lfn>
				fs->wflag = 1;
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2201      	movs	r2, #1
 8007040:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007042:	2100      	movs	r1, #0
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fa9e 	bl	8006586 <dir_next>
 800704a:	4603      	mov	r3, r0
 800704c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007054:	2b00      	cmp	r3, #0
 8007056:	d107      	bne.n	8007068 <dir_register+0x184>
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	3b01      	subs	r3, #1
 800705c:	623b      	str	r3, [r7, #32]
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1d5      	bne.n	8007010 <dir_register+0x12c>
 8007064:	e000      	b.n	8007068 <dir_register+0x184>
				if (res != FR_OK) break;
 8007066:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800706c:	2b00      	cmp	r3, #0
 800706e:	d128      	bne.n	80070c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	4619      	mov	r1, r3
 8007076:	69f8      	ldr	r0, [r7, #28]
 8007078:	f7fe fe1a 	bl	8005cb0 <move_window>
 800707c:	4603      	mov	r3, r0
 800707e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007086:	2b00      	cmp	r3, #0
 8007088:	d11b      	bne.n	80070c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	2220      	movs	r2, #32
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fbff 	bl	8005896 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a18      	ldr	r0, [r3, #32]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3324      	adds	r3, #36	; 0x24
 80070a0:	220b      	movs	r2, #11
 80070a2:	4619      	mov	r1, r3
 80070a4:	f7fe fbd6 	bl	8005854 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	330c      	adds	r3, #12
 80070b4:	f002 0218 	and.w	r2, r2, #24
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2201      	movs	r2, #1
 80070c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80070c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3730      	adds	r7, #48	; 0x30
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	4ec4ec4f 	.word	0x4ec4ec4f

080070d4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80c9 	beq.w	8007286 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fc:	d032      	beq.n	8007164 <get_fileinfo+0x90>
			i = j = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007106:	e01b      	b.n	8007140 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007108:	89fb      	ldrh	r3, [r7, #14]
 800710a:	2100      	movs	r1, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe f9a1 	bl	8005454 <ff_convert>
 8007112:	4603      	mov	r3, r0
 8007114:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007116:	89fb      	ldrh	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <get_fileinfo+0x4e>
 800711c:	2300      	movs	r3, #0
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	e01a      	b.n	8007158 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	2bfe      	cmp	r3, #254	; 0xfe
 8007126:	d902      	bls.n	800712e <get_fileinfo+0x5a>
 8007128:	2300      	movs	r3, #0
 800712a:	61fb      	str	r3, [r7, #28]
 800712c:	e014      	b.n	8007158 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	61fa      	str	r2, [r7, #28]
 8007134:	89fa      	ldrh	r2, [r7, #14]
 8007136:	b2d1      	uxtb	r1, r2
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	4413      	add	r3, r2
 800713c:	460a      	mov	r2, r1
 800713e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	691a      	ldr	r2, [r3, #16]
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	61b9      	str	r1, [r7, #24]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	81fb      	strh	r3, [r7, #14]
 8007152:	89fb      	ldrh	r3, [r7, #14]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1d7      	bne.n	8007108 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	3316      	adds	r3, #22
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	3316      	adds	r3, #22
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007178:	e04c      	b.n	8007214 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	1c59      	adds	r1, r3, #1
 8007182:	61f9      	str	r1, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	2b20      	cmp	r3, #32
 800718e:	d100      	bne.n	8007192 <get_fileinfo+0xbe>
 8007190:	e040      	b.n	8007214 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b05      	cmp	r3, #5
 8007196:	d101      	bne.n	800719c <get_fileinfo+0xc8>
 8007198:	23e5      	movs	r3, #229	; 0xe5
 800719a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d10f      	bne.n	80071c2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80071a2:	89bb      	ldrh	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <get_fileinfo+0xe0>
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	4413      	add	r3, r2
 80071ae:	3316      	adds	r3, #22
 80071b0:	222e      	movs	r2, #46	; 0x2e
 80071b2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	61ba      	str	r2, [r7, #24]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	222e      	movs	r2, #46	; 0x2e
 80071c0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	4413      	add	r3, r2
 80071c8:	3309      	adds	r3, #9
 80071ca:	7dfa      	ldrb	r2, [r7, #23]
 80071cc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80071ce:	89bb      	ldrh	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d11c      	bne.n	800720e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d913      	bls.n	8007202 <get_fileinfo+0x12e>
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	2b5a      	cmp	r3, #90	; 0x5a
 80071de:	d810      	bhi.n	8007202 <get_fileinfo+0x12e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	330c      	adds	r3, #12
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d901      	bls.n	80071f4 <get_fileinfo+0x120>
 80071f0:	2310      	movs	r3, #16
 80071f2:	e000      	b.n	80071f6 <get_fileinfo+0x122>
 80071f4:	2308      	movs	r3, #8
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	3320      	adds	r3, #32
 8007200:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	4413      	add	r3, r2
 8007208:	3316      	adds	r3, #22
 800720a:	7dfa      	ldrb	r2, [r7, #23]
 800720c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	3301      	adds	r3, #1
 8007212:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	2b0a      	cmp	r3, #10
 8007218:	d9af      	bls.n	800717a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800721a:	89bb      	ldrh	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10d      	bne.n	800723c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	4413      	add	r3, r2
 8007226:	3316      	adds	r3, #22
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	330c      	adds	r3, #12
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <get_fileinfo+0x168>
 8007238:	2300      	movs	r3, #0
 800723a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	4413      	add	r3, r2
 8007242:	3309      	adds	r3, #9
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	7ada      	ldrb	r2, [r3, #11]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	331c      	adds	r3, #28
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe fa91 	bl	8005780 <ld_dword>
 800725e:	4602      	mov	r2, r0
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	3316      	adds	r3, #22
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fa88 	bl	8005780 <ld_dword>
 8007270:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	b29a      	uxth	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	80da      	strh	r2, [r3, #6]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	b29a      	uxth	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	809a      	strh	r2, [r3, #4]
 8007284:	e000      	b.n	8007288 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007286:	bf00      	nop
}
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08a      	sub	sp, #40	; 0x28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	61ba      	str	r2, [r7, #24]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4413      	add	r3, r2
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80072be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072c0:	2b1f      	cmp	r3, #31
 80072c2:	d940      	bls.n	8007346 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80072c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072c6:	2b2f      	cmp	r3, #47	; 0x2f
 80072c8:	d006      	beq.n	80072d8 <create_name+0x48>
 80072ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072cc:	2b5c      	cmp	r3, #92	; 0x5c
 80072ce:	d110      	bne.n	80072f2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80072d0:	e002      	b.n	80072d8 <create_name+0x48>
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	3301      	adds	r3, #1
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	4413      	add	r3, r2
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b2f      	cmp	r3, #47	; 0x2f
 80072e2:	d0f6      	beq.n	80072d2 <create_name+0x42>
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	4413      	add	r3, r2
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b5c      	cmp	r3, #92	; 0x5c
 80072ee:	d0f0      	beq.n	80072d2 <create_name+0x42>
			break;
 80072f0:	e02a      	b.n	8007348 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2bfe      	cmp	r3, #254	; 0xfe
 80072f6:	d901      	bls.n	80072fc <create_name+0x6c>
 80072f8:	2306      	movs	r3, #6
 80072fa:	e17d      	b.n	80075f8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80072fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007304:	2101      	movs	r1, #1
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe f8a4 	bl	8005454 <ff_convert>
 800730c:	4603      	mov	r3, r0
 800730e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <create_name+0x8a>
 8007316:	2306      	movs	r3, #6
 8007318:	e16e      	b.n	80075f8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800731a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800731c:	2b7f      	cmp	r3, #127	; 0x7f
 800731e:	d809      	bhi.n	8007334 <create_name+0xa4>
 8007320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007322:	4619      	mov	r1, r3
 8007324:	488d      	ldr	r0, [pc, #564]	; (800755c <create_name+0x2cc>)
 8007326:	f7fe faf8 	bl	800591a <chk_chr>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <create_name+0xa4>
 8007330:	2306      	movs	r3, #6
 8007332:	e161      	b.n	80075f8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	617a      	str	r2, [r7, #20]
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007342:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007344:	e7b4      	b.n	80072b0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007346:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	441a      	add	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007354:	2b1f      	cmp	r3, #31
 8007356:	d801      	bhi.n	800735c <create_name+0xcc>
 8007358:	2304      	movs	r3, #4
 800735a:	e000      	b.n	800735e <create_name+0xce>
 800735c:	2300      	movs	r3, #0
 800735e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007362:	e011      	b.n	8007388 <create_name+0xf8>
		w = lfn[di - 1];
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800736a:	3b01      	subs	r3, #1
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007378:	2b20      	cmp	r3, #32
 800737a:	d002      	beq.n	8007382 <create_name+0xf2>
 800737c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800737e:	2b2e      	cmp	r3, #46	; 0x2e
 8007380:	d106      	bne.n	8007390 <create_name+0x100>
		di--;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	3b01      	subs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1ea      	bne.n	8007364 <create_name+0xd4>
 800738e:	e000      	b.n	8007392 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007390:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	2200      	movs	r2, #0
 800739c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <create_name+0x118>
 80073a4:	2306      	movs	r3, #6
 80073a6:	e127      	b.n	80075f8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3324      	adds	r3, #36	; 0x24
 80073ac:	220b      	movs	r2, #11
 80073ae:	2120      	movs	r1, #32
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fa70 	bl	8005896 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80073b6:	2300      	movs	r3, #0
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	e002      	b.n	80073c2 <create_name+0x132>
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	3301      	adds	r3, #1
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d0f5      	beq.n	80073bc <create_name+0x12c>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	2b2e      	cmp	r3, #46	; 0x2e
 80073dc:	d0ee      	beq.n	80073bc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d009      	beq.n	80073f8 <create_name+0x168>
 80073e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e8:	f043 0303 	orr.w	r3, r3, #3
 80073ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80073f0:	e002      	b.n	80073f8 <create_name+0x168>
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <create_name+0x182>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007404:	3b01      	subs	r3, #1
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	2b2e      	cmp	r3, #46	; 0x2e
 8007410:	d1ef      	bne.n	80073f2 <create_name+0x162>

	i = b = 0; ni = 8;
 8007412:	2300      	movs	r3, #0
 8007414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007418:	2300      	movs	r3, #0
 800741a:	623b      	str	r3, [r7, #32]
 800741c:	2308      	movs	r3, #8
 800741e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	61ba      	str	r2, [r7, #24]
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8090 	beq.w	8007558 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800743a:	2b20      	cmp	r3, #32
 800743c:	d006      	beq.n	800744c <create_name+0x1bc>
 800743e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007440:	2b2e      	cmp	r3, #46	; 0x2e
 8007442:	d10a      	bne.n	800745a <create_name+0x1ca>
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	429a      	cmp	r2, r3
 800744a:	d006      	beq.n	800745a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800744c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007450:	f043 0303 	orr.w	r3, r3, #3
 8007454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007458:	e07d      	b.n	8007556 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800745a:	6a3a      	ldr	r2, [r7, #32]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	429a      	cmp	r2, r3
 8007460:	d203      	bcs.n	800746a <create_name+0x1da>
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	429a      	cmp	r2, r3
 8007468:	d123      	bne.n	80074b2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	2b0b      	cmp	r3, #11
 800746e:	d106      	bne.n	800747e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007474:	f043 0303 	orr.w	r3, r3, #3
 8007478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800747c:	e075      	b.n	800756a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	429a      	cmp	r2, r3
 8007484:	d005      	beq.n	8007492 <create_name+0x202>
 8007486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800748a:	f043 0303 	orr.w	r3, r3, #3
 800748e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	429a      	cmp	r2, r3
 8007498:	d866      	bhi.n	8007568 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	2308      	movs	r3, #8
 80074a0:	623b      	str	r3, [r7, #32]
 80074a2:	230b      	movs	r3, #11
 80074a4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80074a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074b0:	e051      	b.n	8007556 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80074b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b4:	2b7f      	cmp	r3, #127	; 0x7f
 80074b6:	d914      	bls.n	80074e2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80074b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fd ffc9 	bl	8005454 <ff_convert>
 80074c2:	4603      	mov	r3, r0
 80074c4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80074c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <create_name+0x246>
 80074cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ce:	3b80      	subs	r3, #128	; 0x80
 80074d0:	4a23      	ldr	r2, [pc, #140]	; (8007560 <create_name+0x2d0>)
 80074d2:	5cd3      	ldrb	r3, [r2, r3]
 80074d4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80074d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074da:	f043 0302 	orr.w	r3, r3, #2
 80074de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80074e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <create_name+0x268>
 80074e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ea:	4619      	mov	r1, r3
 80074ec:	481d      	ldr	r0, [pc, #116]	; (8007564 <create_name+0x2d4>)
 80074ee:	f7fe fa14 	bl	800591a <chk_chr>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80074f8:	235f      	movs	r3, #95	; 0x5f
 80074fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007500:	f043 0303 	orr.w	r3, r3, #3
 8007504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007508:	e01b      	b.n	8007542 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800750a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d909      	bls.n	8007524 <create_name+0x294>
 8007510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007512:	2b5a      	cmp	r3, #90	; 0x5a
 8007514:	d806      	bhi.n	8007524 <create_name+0x294>
					b |= 2;
 8007516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800751a:	f043 0302 	orr.w	r3, r3, #2
 800751e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007522:	e00e      	b.n	8007542 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007526:	2b60      	cmp	r3, #96	; 0x60
 8007528:	d90b      	bls.n	8007542 <create_name+0x2b2>
 800752a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800752c:	2b7a      	cmp	r3, #122	; 0x7a
 800752e:	d808      	bhi.n	8007542 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800753c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800753e:	3b20      	subs	r3, #32
 8007540:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	623a      	str	r2, [r7, #32]
 8007548:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800754a:	b2d1      	uxtb	r1, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	460a      	mov	r2, r1
 8007552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007556:	e763      	b.n	8007420 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007558:	bf00      	nop
 800755a:	e006      	b.n	800756a <create_name+0x2da>
 800755c:	080152d0 	.word	0x080152d0
 8007560:	08015b38 	.word	0x08015b38
 8007564:	080152dc 	.word	0x080152dc
			if (si > di) break;			/* No extension */
 8007568:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007570:	2be5      	cmp	r3, #229	; 0xe5
 8007572:	d103      	bne.n	800757c <create_name+0x2ec>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2205      	movs	r2, #5
 8007578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2b08      	cmp	r3, #8
 8007580:	d104      	bne.n	800758c <create_name+0x2fc>
 8007582:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800758c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007590:	f003 030c 	and.w	r3, r3, #12
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d005      	beq.n	80075a4 <create_name+0x314>
 8007598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d105      	bne.n	80075b0 <create_name+0x320>
 80075a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a8:	f043 0302 	orr.w	r3, r3, #2
 80075ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80075b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d117      	bne.n	80075ec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80075bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <create_name+0x344>
 80075c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075cc:	f043 0310 	orr.w	r3, r3, #16
 80075d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80075d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075d8:	f003 030c 	and.w	r3, r3, #12
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d105      	bne.n	80075ec <create_name+0x35c>
 80075e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e4:	f043 0308 	orr.w	r3, r3, #8
 80075e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80075f6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3728      	adds	r7, #40	; 0x28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007614:	e002      	b.n	800761c <follow_path+0x1c>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	3301      	adds	r3, #1
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b2f      	cmp	r3, #47	; 0x2f
 8007622:	d0f8      	beq.n	8007616 <follow_path+0x16>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b5c      	cmp	r3, #92	; 0x5c
 800762a:	d0f4      	beq.n	8007616 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2200      	movs	r2, #0
 8007630:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b1f      	cmp	r3, #31
 8007638:	d80a      	bhi.n	8007650 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007642:	2100      	movs	r1, #0
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7fe ff15 	bl	8006474 <dir_sdi>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]
 800764e:	e048      	b.n	80076e2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007650:	463b      	mov	r3, r7
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fe1b 	bl	8007290 <create_name>
 800765a:	4603      	mov	r3, r0
 800765c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d139      	bne.n	80076d8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff fb7d 	bl	8006d64 <dir_find>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007674:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	2b04      	cmp	r3, #4
 8007680:	d12c      	bne.n	80076dc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d127      	bne.n	80076dc <follow_path+0xdc>
 800768c:	2305      	movs	r3, #5
 800768e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007690:	e024      	b.n	80076dc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d121      	bne.n	80076e0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	799b      	ldrb	r3, [r3, #6]
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 80076a8:	2305      	movs	r3, #5
 80076aa:	75fb      	strb	r3, [r7, #23]
 80076ac:	e019      	b.n	80076e2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	8992      	ldrh	r2, [r2, #12]
 80076bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80076c0:	fb00 f202 	mul.w	r2, r0, r2
 80076c4:	1a9b      	subs	r3, r3, r2
 80076c6:	440b      	add	r3, r1
 80076c8:	4619      	mov	r1, r3
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff f878 	bl	80067c0 <ld_clust>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80076d6:	e7bb      	b.n	8007650 <follow_path+0x50>
			if (res != FR_OK) break;
 80076d8:	bf00      	nop
 80076da:	e002      	b.n	80076e2 <follow_path+0xe2>
				break;
 80076dc:	bf00      	nop
 80076de:	e000      	b.n	80076e2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80076e0:	bf00      	nop
			}
		}
	}

	return res;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80076f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d031      	beq.n	8007766 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e002      	b.n	8007710 <get_ldnumber+0x24>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	3301      	adds	r3, #1
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b1f      	cmp	r3, #31
 8007716:	d903      	bls.n	8007720 <get_ldnumber+0x34>
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b3a      	cmp	r3, #58	; 0x3a
 800771e:	d1f4      	bne.n	800770a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b3a      	cmp	r3, #58	; 0x3a
 8007726:	d11c      	bne.n	8007762 <get_ldnumber+0x76>
			tp = *path;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	60fa      	str	r2, [r7, #12]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	3b30      	subs	r3, #48	; 0x30
 8007738:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b09      	cmp	r3, #9
 800773e:	d80e      	bhi.n	800775e <get_ldnumber+0x72>
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	429a      	cmp	r2, r3
 8007746:	d10a      	bne.n	800775e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d107      	bne.n	800775e <get_ldnumber+0x72>
					vol = (int)i;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3301      	adds	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	e002      	b.n	8007768 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007762:	2300      	movs	r3, #0
 8007764:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007766:	693b      	ldr	r3, [r7, #16]
}
 8007768:	4618      	mov	r0, r3
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	70da      	strb	r2, [r3, #3]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800778a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fe fa8e 	bl	8005cb0 <move_window>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <check_fs+0x2a>
 800779a:	2304      	movs	r3, #4
 800779c:	e038      	b.n	8007810 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3338      	adds	r3, #56	; 0x38
 80077a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd ffd2 	bl	8005750 <ld_word>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d001      	beq.n	80077bc <check_fs+0x48>
 80077b8:	2303      	movs	r3, #3
 80077ba:	e029      	b.n	8007810 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077c2:	2be9      	cmp	r3, #233	; 0xe9
 80077c4:	d009      	beq.n	80077da <check_fs+0x66>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077cc:	2beb      	cmp	r3, #235	; 0xeb
 80077ce:	d11e      	bne.n	800780e <check_fs+0x9a>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077d6:	2b90      	cmp	r3, #144	; 0x90
 80077d8:	d119      	bne.n	800780e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3338      	adds	r3, #56	; 0x38
 80077de:	3336      	adds	r3, #54	; 0x36
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fd ffcd 	bl	8005780 <ld_dword>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077ec:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <check_fs+0xa4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d101      	bne.n	80077f6 <check_fs+0x82>
 80077f2:	2300      	movs	r3, #0
 80077f4:	e00c      	b.n	8007810 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3338      	adds	r3, #56	; 0x38
 80077fa:	3352      	adds	r3, #82	; 0x52
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fd ffbf 	bl	8005780 <ld_dword>
 8007802:	4603      	mov	r3, r0
 8007804:	4a05      	ldr	r2, [pc, #20]	; (800781c <check_fs+0xa8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d101      	bne.n	800780e <check_fs+0x9a>
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800780e:	2302      	movs	r3, #2
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	00544146 	.word	0x00544146
 800781c:	33544146 	.word	0x33544146

08007820 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b096      	sub	sp, #88	; 0x58
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff ff59 	bl	80076ec <get_ldnumber>
 800783a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800783c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783e:	2b00      	cmp	r3, #0
 8007840:	da01      	bge.n	8007846 <find_volume+0x26>
 8007842:	230b      	movs	r3, #11
 8007844:	e262      	b.n	8007d0c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007846:	4a9f      	ldr	r2, [pc, #636]	; (8007ac4 <find_volume+0x2a4>)
 8007848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <find_volume+0x3a>
 8007856:	230c      	movs	r3, #12
 8007858:	e258      	b.n	8007d0c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800785e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd feb3 	bl	80055e0 <disk_status>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10c      	bne.n	80078a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <find_volume+0x82>
 8007892:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800789e:	230a      	movs	r3, #10
 80078a0:	e234      	b.n	8007d0c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80078a2:	2300      	movs	r3, #0
 80078a4:	e232      	b.n	8007d0c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fd feab 	bl	8005614 <disk_initialize>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80078c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80078d0:	2303      	movs	r3, #3
 80078d2:	e21b      	b.n	8007d0c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d007      	beq.n	80078ea <find_volume+0xca>
 80078da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80078e6:	230a      	movs	r3, #10
 80078e8:	e210      	b.n	8007d0c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	7858      	ldrb	r0, [r3, #1]
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	330c      	adds	r3, #12
 80078f2:	461a      	mov	r2, r3
 80078f4:	2102      	movs	r1, #2
 80078f6:	f7fd fef3 	bl	80056e0 <disk_ioctl>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <find_volume+0xe4>
 8007900:	2301      	movs	r3, #1
 8007902:	e203      	b.n	8007d0c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	899b      	ldrh	r3, [r3, #12]
 8007908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790c:	d80d      	bhi.n	800792a <find_volume+0x10a>
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	899b      	ldrh	r3, [r3, #12]
 8007912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007916:	d308      	bcc.n	800792a <find_volume+0x10a>
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	899b      	ldrh	r3, [r3, #12]
 800791c:	461a      	mov	r2, r3
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	899b      	ldrh	r3, [r3, #12]
 8007922:	3b01      	subs	r3, #1
 8007924:	4013      	ands	r3, r2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <find_volume+0x10e>
 800792a:	2301      	movs	r3, #1
 800792c:	e1ee      	b.n	8007d0c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007932:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007936:	f7ff ff1d 	bl	8007774 <check_fs>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007944:	2b02      	cmp	r3, #2
 8007946:	d149      	bne.n	80079dc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007948:	2300      	movs	r3, #0
 800794a:	643b      	str	r3, [r7, #64]	; 0x40
 800794c:	e01e      	b.n	800798c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800795c:	4413      	add	r3, r2
 800795e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	3304      	adds	r3, #4
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d006      	beq.n	8007978 <find_volume+0x158>
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	3308      	adds	r3, #8
 800796e:	4618      	mov	r0, r3
 8007970:	f7fd ff06 	bl	8005780 <ld_dword>
 8007974:	4602      	mov	r2, r0
 8007976:	e000      	b.n	800797a <find_volume+0x15a>
 8007978:	2200      	movs	r2, #0
 800797a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	3358      	adds	r3, #88	; 0x58
 8007980:	443b      	add	r3, r7
 8007982:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007988:	3301      	adds	r3, #1
 800798a:	643b      	str	r3, [r7, #64]	; 0x40
 800798c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798e:	2b03      	cmp	r3, #3
 8007990:	d9dd      	bls.n	800794e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007992:	2300      	movs	r3, #0
 8007994:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <find_volume+0x182>
 800799c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799e:	3b01      	subs	r3, #1
 80079a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80079a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	3358      	adds	r3, #88	; 0x58
 80079a8:	443b      	add	r3, r7
 80079aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80079ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80079b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <find_volume+0x1a2>
 80079b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079ba:	f7ff fedb 	bl	8007774 <check_fs>
 80079be:	4603      	mov	r3, r0
 80079c0:	e000      	b.n	80079c4 <find_volume+0x1a4>
 80079c2:	2303      	movs	r3, #3
 80079c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80079c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d905      	bls.n	80079dc <find_volume+0x1bc>
 80079d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d2:	3301      	adds	r3, #1
 80079d4:	643b      	str	r3, [r7, #64]	; 0x40
 80079d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d9e2      	bls.n	80079a2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80079dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d101      	bne.n	80079e8 <find_volume+0x1c8>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e191      	b.n	8007d0c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80079e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d901      	bls.n	80079f4 <find_volume+0x1d4>
 80079f0:	230d      	movs	r3, #13
 80079f2:	e18b      	b.n	8007d0c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	3338      	adds	r3, #56	; 0x38
 80079f8:	330b      	adds	r3, #11
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd fea8 	bl	8005750 <ld_word>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	899b      	ldrh	r3, [r3, #12]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d001      	beq.n	8007a10 <find_volume+0x1f0>
 8007a0c:	230d      	movs	r3, #13
 8007a0e:	e17d      	b.n	8007d0c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	3338      	adds	r3, #56	; 0x38
 8007a14:	3316      	adds	r3, #22
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fd fe9a 	bl	8005750 <ld_word>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <find_volume+0x214>
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	3338      	adds	r3, #56	; 0x38
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fd fea7 	bl	8005780 <ld_dword>
 8007a32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a38:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	789b      	ldrb	r3, [r3, #2]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d005      	beq.n	8007a58 <find_volume+0x238>
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	789b      	ldrb	r3, [r3, #2]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d001      	beq.n	8007a58 <find_volume+0x238>
 8007a54:	230d      	movs	r3, #13
 8007a56:	e159      	b.n	8007d0c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	789b      	ldrb	r3, [r3, #2]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a60:	fb02 f303 	mul.w	r3, r2, r3
 8007a64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	895b      	ldrh	r3, [r3, #10]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d008      	beq.n	8007a8c <find_volume+0x26c>
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	895b      	ldrh	r3, [r3, #10]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	895b      	ldrh	r3, [r3, #10]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <find_volume+0x270>
 8007a8c:	230d      	movs	r3, #13
 8007a8e:	e13d      	b.n	8007d0c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	3338      	adds	r3, #56	; 0x38
 8007a94:	3311      	adds	r3, #17
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fd fe5a 	bl	8005750 <ld_word>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	891b      	ldrh	r3, [r3, #8]
 8007aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aaa:	8992      	ldrh	r2, [r2, #12]
 8007aac:	0952      	lsrs	r2, r2, #5
 8007aae:	b292      	uxth	r2, r2
 8007ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab4:	fb01 f202 	mul.w	r2, r1, r2
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <find_volume+0x2a8>
 8007ac0:	230d      	movs	r3, #13
 8007ac2:	e123      	b.n	8007d0c <find_volume+0x4ec>
 8007ac4:	200000ac 	.word	0x200000ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	3338      	adds	r3, #56	; 0x38
 8007acc:	3313      	adds	r3, #19
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd fe3e 	bl	8005750 <ld_word>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <find_volume+0x2cc>
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	3338      	adds	r3, #56	; 0x38
 8007ae2:	3320      	adds	r3, #32
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd fe4b 	bl	8005780 <ld_dword>
 8007aea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	3338      	adds	r3, #56	; 0x38
 8007af0:	330e      	adds	r3, #14
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fd fe2c 	bl	8005750 <ld_word>
 8007af8:	4603      	mov	r3, r0
 8007afa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007afc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <find_volume+0x2e6>
 8007b02:	230d      	movs	r3, #13
 8007b04:	e102      	b.n	8007d0c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007b06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0a:	4413      	add	r3, r2
 8007b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b0e:	8911      	ldrh	r1, [r2, #8]
 8007b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b12:	8992      	ldrh	r2, [r2, #12]
 8007b14:	0952      	lsrs	r2, r2, #5
 8007b16:	b292      	uxth	r2, r2
 8007b18:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	4413      	add	r3, r2
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d201      	bcs.n	8007b2e <find_volume+0x30e>
 8007b2a:	230d      	movs	r3, #13
 8007b2c:	e0ee      	b.n	8007d0c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b36:	8952      	ldrh	r2, [r2, #10]
 8007b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <find_volume+0x328>
 8007b44:	230d      	movs	r3, #13
 8007b46:	e0e1      	b.n	8007d0c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d802      	bhi.n	8007b5e <find_volume+0x33e>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d802      	bhi.n	8007b6e <find_volume+0x34e>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	1c9a      	adds	r2, r3, #2
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b80:	441a      	add	r2, r3
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	441a      	add	r2, r3
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d11e      	bne.n	8007bd6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	3338      	adds	r3, #56	; 0x38
 8007b9c:	332a      	adds	r3, #42	; 0x2a
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fd fdd6 	bl	8005750 <ld_word>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <find_volume+0x38e>
 8007baa:	230d      	movs	r3, #13
 8007bac:	e0ae      	b.n	8007d0c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	891b      	ldrh	r3, [r3, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <find_volume+0x39a>
 8007bb6:	230d      	movs	r3, #13
 8007bb8:	e0a8      	b.n	8007d0c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbc:	3338      	adds	r3, #56	; 0x38
 8007bbe:	332c      	adds	r3, #44	; 0x2c
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd fddd 	bl	8005780 <ld_dword>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bd4:	e01f      	b.n	8007c16 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	891b      	ldrh	r3, [r3, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <find_volume+0x3c2>
 8007bde:	230d      	movs	r3, #13
 8007be0:	e094      	b.n	8007d0c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be8:	441a      	add	r2, r3
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007bee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d103      	bne.n	8007bfe <find_volume+0x3de>
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	e00a      	b.n	8007c14 <find_volume+0x3f4>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	69da      	ldr	r2, [r3, #28]
 8007c02:	4613      	mov	r3, r2
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4413      	add	r3, r2
 8007c08:	085a      	lsrs	r2, r3, #1
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007c14:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	899b      	ldrh	r3, [r3, #12]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c22:	440b      	add	r3, r1
 8007c24:	3b01      	subs	r3, #1
 8007c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c28:	8989      	ldrh	r1, [r1, #12]
 8007c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d201      	bcs.n	8007c36 <find_volume+0x416>
 8007c32:	230d      	movs	r3, #13
 8007c34:	e06a      	b.n	8007d0c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c3c:	619a      	str	r2, [r3, #24]
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d149      	bne.n	8007ce8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	3338      	adds	r3, #56	; 0x38
 8007c58:	3330      	adds	r3, #48	; 0x30
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd fd78 	bl	8005750 <ld_word>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d140      	bne.n	8007ce8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c68:	3301      	adds	r3, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c6e:	f7fe f81f 	bl	8005cb0 <move_window>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d137      	bne.n	8007ce8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	3338      	adds	r3, #56	; 0x38
 8007c82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fd fd62 	bl	8005750 <ld_word>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d127      	bne.n	8007ce8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	3338      	adds	r3, #56	; 0x38
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fd fd6f 	bl	8005780 <ld_dword>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4a1b      	ldr	r2, [pc, #108]	; (8007d14 <find_volume+0x4f4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d11e      	bne.n	8007ce8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	3338      	adds	r3, #56	; 0x38
 8007cae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd fd64 	bl	8005780 <ld_dword>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <find_volume+0x4f8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d113      	bne.n	8007ce8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	3338      	adds	r3, #56	; 0x38
 8007cc4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fd fd59 	bl	8005780 <ld_dword>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	3338      	adds	r3, #56	; 0x38
 8007cd8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fd4f 	bl	8005780 <ld_dword>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007cee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <find_volume+0x4fc>)
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <find_volume+0x4fc>)
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <find_volume+0x4fc>)
 8007cfe:	881a      	ldrh	r2, [r3, #0]
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007d04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d06:	f7fd ff6b 	bl	8005be0 <clear_lock>
#endif
	return FR_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3758      	adds	r7, #88	; 0x58
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	41615252 	.word	0x41615252
 8007d18:	61417272 	.word	0x61417272
 8007d1c:	200000b0 	.word	0x200000b0

08007d20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007d2a:	2309      	movs	r3, #9
 8007d2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01c      	beq.n	8007d6e <validate+0x4e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d018      	beq.n	8007d6e <validate+0x4e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d013      	beq.n	8007d6e <validate+0x4e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	889a      	ldrh	r2, [r3, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	88db      	ldrh	r3, [r3, #6]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d10c      	bne.n	8007d6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fd fc40 	bl	80055e0 <disk_status>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <validate+0x4e>
			res = FR_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <validate+0x5a>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	e000      	b.n	8007d7c <validate+0x5c>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	6013      	str	r3, [r2, #0]
	return res;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007d9e:	f107 0310 	add.w	r3, r7, #16
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fca2 	bl	80076ec <get_ldnumber>
 8007da8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da01      	bge.n	8007db4 <f_mount+0x28>
 8007db0:	230b      	movs	r3, #11
 8007db2:	e02b      	b.n	8007e0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007db4:	4a17      	ldr	r2, [pc, #92]	; (8007e14 <f_mount+0x88>)
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007dc4:	69b8      	ldr	r0, [r7, #24]
 8007dc6:	f7fd ff0b 	bl	8005be0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	490d      	ldr	r1, [pc, #52]	; (8007e14 <f_mount+0x88>)
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <f_mount+0x66>
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d001      	beq.n	8007df6 <f_mount+0x6a>
 8007df2:	2300      	movs	r3, #0
 8007df4:	e00a      	b.n	8007e0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007df6:	f107 010c 	add.w	r1, r7, #12
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	2200      	movs	r2, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff fd0d 	bl	8007820 <find_volume>
 8007e06:	4603      	mov	r3, r0
 8007e08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	200000ac 	.word	0x200000ac

08007e18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e24:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e28:	6018      	str	r0, [r3, #0]
 8007e2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e2e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007e32:	6019      	str	r1, [r3, #0]
 8007e34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e38:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e3c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007e3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <f_open+0x38>
 8007e4c:	2309      	movs	r3, #9
 8007e4e:	e2a6      	b.n	800839e <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007e50:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e54:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e58:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007e5c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007e60:	7812      	ldrb	r2, [r2, #0]
 8007e62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007e66:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007e68:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e6c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007e76:	f107 0308 	add.w	r3, r7, #8
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff fcd0 	bl	8007820 <find_volume>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007e86:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 827a 	bne.w	8008384 <f_open+0x56c>
		dj.obj.fs = fs;
 8007e90:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e94:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 8007e98:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e9c:	f107 0210 	add.w	r2, r7, #16
 8007ea0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ea2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ea6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fba4 	bl	8007600 <follow_path>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ebe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d11e      	bne.n	8007f04 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ec6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8007eca:	b25b      	sxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	da03      	bge.n	8007ed8 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007ed0:	2306      	movs	r3, #6
 8007ed2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007ed6:	e015      	b.n	8007f04 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ed8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007edc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	f023 0301 	bic.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bf14      	ite	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	2300      	moveq	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fd fd29 	bl	8005950 <chk_lock>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f08:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	f003 031c 	and.w	r3, r3, #28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80a7 	beq.w	8008066 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007f18:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01f      	beq.n	8007f60 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f20:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d10e      	bne.n	8007f46 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f28:	f7fd fd6e 	bl	8005a08 <enq_lock>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d006      	beq.n	8007f40 <f_open+0x128>
 8007f32:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe ffd4 	bl	8006ee4 <dir_register>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	e000      	b.n	8007f42 <f_open+0x12a>
 8007f40:	2312      	movs	r3, #18
 8007f42:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f4a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f4e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007f52:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007f56:	7812      	ldrb	r2, [r2, #0]
 8007f58:	f042 0208 	orr.w	r2, r2, #8
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	e015      	b.n	8007f8c <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f60:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007f64:	f003 0311 	and.w	r3, r3, #17
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <f_open+0x15c>
					res = FR_DENIED;
 8007f6c:	2307      	movs	r3, #7
 8007f6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007f72:	e00b      	b.n	8007f8c <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007f74:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f78:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <f_open+0x174>
 8007f86:	2308      	movs	r3, #8
 8007f88:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f8c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 8088 	bne.w	80080a6 <f_open+0x28e>
 8007f96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f9a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d07e      	beq.n	80080a6 <f_open+0x28e>
				dw = GET_FATTIME();
 8007fa8:	f7fd fbca 	bl	8005740 <get_fattime>
 8007fac:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007fb0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007fb4:	330e      	adds	r3, #14
 8007fb6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fd fc1e 	bl	80057fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007fc0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007fc4:	3316      	adds	r3, #22
 8007fc6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fd fc16 	bl	80057fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007fd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007fd4:	330b      	adds	r3, #11
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007fda:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007fde:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fe fbeb 	bl	80067c0 <ld_clust>
 8007fea:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007fee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007ff2:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fc00 	bl	80067fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007ffe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008002:	331c      	adds	r3, #28
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f7fd fbf8 	bl	80057fc <st_dword>
					fs->wflag = 1;
 800800c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008010:	2201      	movs	r2, #1
 8008012:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008014:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008018:	2b00      	cmp	r3, #0
 800801a:	d044      	beq.n	80080a6 <f_open+0x28e>
						dw = fs->winsect;
 800801c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8008026:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800802a:	2200      	movs	r2, #0
 800802c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe f8ea 	bl	800620a <remove_chain>
 8008036:	4603      	mov	r3, r0
 8008038:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800803c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008040:	2b00      	cmp	r3, #0
 8008042:	d130      	bne.n	80080a6 <f_open+0x28e>
							res = move_window(fs, dw);
 8008044:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008048:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800804c:	4618      	mov	r0, r3
 800804e:	f7fd fe2f 	bl	8005cb0 <move_window>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008058:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800805c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008060:	3a01      	subs	r2, #1
 8008062:	615a      	str	r2, [r3, #20]
 8008064:	e01f      	b.n	80080a6 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008066:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800806a:	2b00      	cmp	r3, #0
 800806c:	d11b      	bne.n	80080a6 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800806e:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <f_open+0x26a>
					res = FR_NO_FILE;
 800807a:	2304      	movs	r3, #4
 800807c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008080:	e011      	b.n	80080a6 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008082:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008086:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d008      	beq.n	80080a6 <f_open+0x28e>
 8008094:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <f_open+0x28e>
						res = FR_DENIED;
 80080a0:	2307      	movs	r3, #7
 80080a2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80080a6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d14a      	bne.n	8008144 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80080ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080b2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 80080c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080c4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80080c8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80080cc:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080d6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80080d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80080dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80080ea:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80080ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080fe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	bf14      	ite	ne
 800810c:	2301      	movne	r3, #1
 800810e:	2300      	moveq	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	461a      	mov	r2, r3
 8008114:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd fc96 	bl	8005a4c <inc_lock>
 8008120:	4602      	mov	r2, r0
 8008122:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008126:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800812e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008132:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <f_open+0x32c>
 800813e:	2302      	movs	r3, #2
 8008140:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008144:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 811b 	bne.w	8008384 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800814e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008152:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fb31 	bl	80067c0 <ld_clust>
 800815e:	4602      	mov	r2, r0
 8008160:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008164:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800816c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008170:	331c      	adds	r3, #28
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd fb04 	bl	8005780 <ld_dword>
 8008178:	4602      	mov	r2, r0
 800817a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800817e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008186:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800818a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2200      	movs	r2, #0
 8008192:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008194:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8008198:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800819c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80081a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80081a8:	88da      	ldrh	r2, [r3, #6]
 80081aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80081b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081ba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80081c4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80081cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2200      	movs	r2, #0
 80081d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2200      	movs	r2, #0
 80081e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3330      	adds	r3, #48	; 0x30
 8008202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f7fd fb44 	bl	8005896 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800820e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008212:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80b1 	beq.w	8008384 <f_open+0x56c>
 8008222:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008226:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 80a8 	beq.w	8008384 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008234:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008238:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008244:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800824c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008250:	895b      	ldrh	r3, [r3, #10]
 8008252:	461a      	mov	r2, r3
 8008254:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008258:	899b      	ldrh	r3, [r3, #12]
 800825a:	fb02 f303 	mul.w	r3, r2, r3
 800825e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008262:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008266:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008272:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008276:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008282:	e021      	b.n	80082c8 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8008284:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008288:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008292:	4618      	mov	r0, r3
 8008294:	f7fd fdc9 	bl	8005e2a <get_fat>
 8008298:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800829c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d802      	bhi.n	80082aa <f_open+0x492>
 80082a4:	2302      	movs	r3, #2
 80082a6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082aa:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80082ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b2:	d102      	bne.n	80082ba <f_open+0x4a2>
 80082b4:	2301      	movs	r3, #1
 80082b6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082ba:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80082be:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80082c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d105      	bne.n	80082dc <f_open+0x4c4>
 80082d0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80082d4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80082d8:	429a      	cmp	r2, r3
 80082da:	d8d3      	bhi.n	8008284 <f_open+0x46c>
				}
				fp->clust = clst;
 80082dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80082ea:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082ec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d147      	bne.n	8008384 <f_open+0x56c>
 80082f4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80082f8:	899b      	ldrh	r3, [r3, #12]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008300:	fbb3 f1f2 	udiv	r1, r3, r2
 8008304:	fb01 f202 	mul.w	r2, r1, r2
 8008308:	1a9b      	subs	r3, r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d03a      	beq.n	8008384 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800830e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008312:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008316:	4618      	mov	r0, r3
 8008318:	f7fd fd68 	bl	8005dec <clust2sect>
 800831c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008320:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d103      	bne.n	8008330 <f_open+0x518>
						res = FR_INT_ERR;
 8008328:	2302      	movs	r3, #2
 800832a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800832e:	e029      	b.n	8008384 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008330:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008334:	899b      	ldrh	r3, [r3, #12]
 8008336:	461a      	mov	r2, r3
 8008338:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800833c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008340:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008344:	441a      	add	r2, r3
 8008346:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800834a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008352:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008356:	7858      	ldrb	r0, [r3, #1]
 8008358:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800835c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008366:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800836a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	2301      	movs	r3, #1
 8008374:	f7fd f974 	bl	8005660 <disk_read>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <f_open+0x56c>
 800837e:	2301      	movs	r3, #1
 8008380:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008384:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008388:	2b00      	cmp	r3, #0
 800838a:	d006      	beq.n	800839a <f_open+0x582>
 800838c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008390:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800839a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800839e:	4618      	mov	r0, r3
 80083a0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08e      	sub	sp, #56	; 0x38
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f107 0214 	add.w	r2, r7, #20
 80083c6:	4611      	mov	r1, r2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff fca9 	bl	8007d20 <validate>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <f_read+0x44>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	7d5b      	ldrb	r3, [r3, #21]
 80083e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80083e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <f_read+0x4a>
 80083ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083f0:	e135      	b.n	800865e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	7d1b      	ldrb	r3, [r3, #20]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <f_read+0x5a>
 80083fe:	2307      	movs	r3, #7
 8008400:	e12d      	b.n	800865e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	429a      	cmp	r2, r3
 8008414:	f240 811e 	bls.w	8008654 <f_read+0x2ac>
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800841c:	e11a      	b.n	8008654 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	8992      	ldrh	r2, [r2, #12]
 8008426:	fbb3 f1f2 	udiv	r1, r3, r2
 800842a:	fb01 f202 	mul.w	r2, r1, r2
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 80d5 	bne.w	80085e0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	8992      	ldrh	r2, [r2, #12]
 800843e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	8952      	ldrh	r2, [r2, #10]
 8008446:	3a01      	subs	r2, #1
 8008448:	4013      	ands	r3, r2
 800844a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d12f      	bne.n	80084b2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d103      	bne.n	8008462 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	633b      	str	r3, [r7, #48]	; 0x30
 8008460:	e013      	b.n	800848a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	4619      	mov	r1, r3
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7fd ffc7 	bl	8006404 <clmt_clust>
 8008476:	6338      	str	r0, [r7, #48]	; 0x30
 8008478:	e007      	b.n	800848a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	4619      	mov	r1, r3
 8008482:	4610      	mov	r0, r2
 8008484:	f7fd fcd1 	bl	8005e2a <get_fat>
 8008488:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	2b01      	cmp	r3, #1
 800848e:	d804      	bhi.n	800849a <f_read+0xf2>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2202      	movs	r2, #2
 8008494:	755a      	strb	r2, [r3, #21]
 8008496:	2302      	movs	r3, #2
 8008498:	e0e1      	b.n	800865e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a0:	d104      	bne.n	80084ac <f_read+0x104>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	755a      	strb	r2, [r3, #21]
 80084a8:	2301      	movs	r3, #1
 80084aa:	e0d8      	b.n	800865e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f7fd fc96 	bl	8005dec <clust2sect>
 80084c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d104      	bne.n	80084d2 <f_read+0x12a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2202      	movs	r2, #2
 80084cc:	755a      	strb	r2, [r3, #21]
 80084ce:	2302      	movs	r3, #2
 80084d0:	e0c5      	b.n	800865e <f_read+0x2b6>
			sect += csect;
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	4413      	add	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	899b      	ldrh	r3, [r3, #12]
 80084de:	461a      	mov	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084e6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d041      	beq.n	8008572 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	4413      	add	r3, r2
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	8952      	ldrh	r2, [r2, #10]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d905      	bls.n	8008508 <f_read+0x160>
					cc = fs->csize - csect;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	895b      	ldrh	r3, [r3, #10]
 8008500:	461a      	mov	r2, r3
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	7858      	ldrb	r0, [r3, #1]
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008512:	f7fd f8a5 	bl	8005660 <disk_read>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d004      	beq.n	8008526 <f_read+0x17e>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	755a      	strb	r2, [r3, #21]
 8008522:	2301      	movs	r3, #1
 8008524:	e09b      	b.n	800865e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7d1b      	ldrb	r3, [r3, #20]
 800852a:	b25b      	sxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	da18      	bge.n	8008562 <f_read+0x1ba>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a1a      	ldr	r2, [r3, #32]
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800853a:	429a      	cmp	r2, r3
 800853c:	d911      	bls.n	8008562 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1a      	ldr	r2, [r3, #32]
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	8992      	ldrh	r2, [r2, #12]
 800854a:	fb02 f303 	mul.w	r3, r2, r3
 800854e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008550:	18d0      	adds	r0, r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	899b      	ldrh	r3, [r3, #12]
 800855c:	461a      	mov	r2, r3
 800855e:	f7fd f979 	bl	8005854 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	899b      	ldrh	r3, [r3, #12]
 8008566:	461a      	mov	r2, r3
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	fb02 f303 	mul.w	r3, r2, r3
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008570:	e05c      	b.n	800862c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	429a      	cmp	r2, r3
 800857a:	d02e      	beq.n	80085da <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	7d1b      	ldrb	r3, [r3, #20]
 8008580:	b25b      	sxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	da18      	bge.n	80085b8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	7858      	ldrb	r0, [r3, #1]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a1a      	ldr	r2, [r3, #32]
 8008594:	2301      	movs	r3, #1
 8008596:	f7fd f883 	bl	80056a0 <disk_write>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <f_read+0x202>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	755a      	strb	r2, [r3, #21]
 80085a6:	2301      	movs	r3, #1
 80085a8:	e059      	b.n	800865e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	7d1b      	ldrb	r3, [r3, #20]
 80085ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	7858      	ldrb	r0, [r3, #1]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085c2:	2301      	movs	r3, #1
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	f7fd f84b 	bl	8005660 <disk_read>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <f_read+0x232>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	755a      	strb	r2, [r3, #21]
 80085d6:	2301      	movs	r3, #1
 80085d8:	e041      	b.n	800865e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	899b      	ldrh	r3, [r3, #12]
 80085e4:	4618      	mov	r0, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	8992      	ldrh	r2, [r2, #12]
 80085ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80085f2:	fb01 f202 	mul.w	r2, r1, r2
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	1ac3      	subs	r3, r0, r3
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80085fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d901      	bls.n	8008608 <f_read+0x260>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	8992      	ldrh	r2, [r2, #12]
 8008616:	fbb3 f0f2 	udiv	r0, r3, r2
 800861a:	fb00 f202 	mul.w	r2, r0, r2
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	440b      	add	r3, r1
 8008622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008624:	4619      	mov	r1, r3
 8008626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008628:	f7fd f914 	bl	8005854 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800862c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008630:	4413      	add	r3, r2
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	441a      	add	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	619a      	str	r2, [r3, #24]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008646:	441a      	add	r2, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f47f aee1 	bne.w	800841e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3738      	adds	r7, #56	; 0x38
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f107 0208 	add.w	r2, r7, #8
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fb52 	bl	8007d20 <validate>
 800867c:	4603      	mov	r3, r0
 800867e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d168      	bne.n	8008758 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7d1b      	ldrb	r3, [r3, #20]
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d062      	beq.n	8008758 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7d1b      	ldrb	r3, [r3, #20]
 8008696:	b25b      	sxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	da15      	bge.n	80086c8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	7858      	ldrb	r0, [r3, #1]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1a      	ldr	r2, [r3, #32]
 80086aa:	2301      	movs	r3, #1
 80086ac:	f7fc fff8 	bl	80056a0 <disk_write>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <f_sync+0x54>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e04f      	b.n	800875a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7d1b      	ldrb	r3, [r3, #20]
 80086be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80086c8:	f7fd f83a 	bl	8005740 <get_fattime>
 80086cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f7fd faea 	bl	8005cb0 <move_window>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d138      	bne.n	8008758 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	330b      	adds	r3, #11
 80086f0:	781a      	ldrb	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	330b      	adds	r3, #11
 80086f6:	f042 0220 	orr.w	r2, r2, #32
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	461a      	mov	r2, r3
 8008708:	68f9      	ldr	r1, [r7, #12]
 800870a:	f7fe f878 	bl	80067fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f103 021c 	add.w	r2, r3, #28
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fd f86e 	bl	80057fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3316      	adds	r3, #22
 8008724:	6939      	ldr	r1, [r7, #16]
 8008726:	4618      	mov	r0, r3
 8008728:	f7fd f868 	bl	80057fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3312      	adds	r3, #18
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd f847 	bl	80057c6 <st_word>
					fs->wflag = 1;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2201      	movs	r2, #1
 800873c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4618      	mov	r0, r3
 8008742:	f7fd fae3 	bl	8005d0c <sync_fs>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7d1b      	ldrb	r3, [r3, #20]
 800874e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008752:	b2da      	uxtb	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008758:	7dfb      	ldrb	r3, [r7, #23]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff7b 	bl	8008666 <f_sync>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d118      	bne.n	80087ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f107 0208 	add.w	r2, r7, #8
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff facc 	bl	8007d20 <validate>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	4618      	mov	r0, r3
 8008798:	f7fd f9e6 	bl	8005b68 <dec_lock>
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80087bc:	af00      	add	r7, sp, #0
 80087be:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80087c2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80087c6:	6018      	str	r0, [r3, #0]
 80087c8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80087cc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80087d0:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80087d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80087d6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <f_opendir+0x2e>
 80087e0:	2309      	movs	r3, #9
 80087e2:	e0a0      	b.n	8008926 <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 80087e4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80087e8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80087f2:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80087f6:	463b      	mov	r3, r7
 80087f8:	2200      	movs	r2, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f810 	bl	8007820 <find_volume>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8008806:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 8081 	bne.w	8008912 <f_opendir+0x15c>
		obj->fs = fs;
 8008810:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008814:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008818:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800881a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800881e:	f107 020c 	add.w	r2, r7, #12
 8008822:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008824:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008828:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008832:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008836:	4611      	mov	r1, r2
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	f7fe fee1 	bl	8007600 <follow_path>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8008844:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008848:	2b00      	cmp	r3, #0
 800884a:	d15b      	bne.n	8008904 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800884c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008850:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800885a:	b25b      	sxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	db1a      	blt.n	8008896 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008860:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008864:	799b      	ldrb	r3, [r3, #6]
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b00      	cmp	r3, #0
 800886c:	d010      	beq.n	8008890 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800886e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008872:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008876:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f7fd ff9d 	bl	80067c0 <ld_clust>
 8008886:	4602      	mov	r2, r0
 8008888:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800888c:	609a      	str	r2, [r3, #8]
 800888e:	e002      	b.n	8008896 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008890:	2305      	movs	r3, #5
 8008892:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8008896:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800889a:	2b00      	cmp	r3, #0
 800889c:	d132      	bne.n	8008904 <f_opendir+0x14e>
				obj->id = fs->id;
 800889e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80088a2:	88da      	ldrh	r2, [r3, #6]
 80088a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80088a8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80088aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80088ae:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80088b2:	2100      	movs	r1, #0
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f7fd fddd 	bl	8006474 <dir_sdi>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80088c0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11d      	bne.n	8008904 <f_opendir+0x14e>
					if (obj->sclust) {
 80088c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d014      	beq.n	80088fc <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80088d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80088d6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80088da:	2100      	movs	r1, #0
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	f7fd f8b5 	bl	8005a4c <inc_lock>
 80088e2:	4602      	mov	r2, r0
 80088e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80088e8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80088ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d107      	bne.n	8008904 <f_opendir+0x14e>
 80088f4:	2312      	movs	r3, #18
 80088f6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80088fa:	e003      	b.n	8008904 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80088fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008900:	2200      	movs	r2, #0
 8008902:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008904:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008908:	2b04      	cmp	r3, #4
 800890a:	d102      	bne.n	8008912 <f_opendir+0x15c>
 800890c:	2305      	movs	r3, #5
 800890e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008912:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <f_opendir+0x16c>
 800891a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008922:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8008926:	4618      	mov	r0, r3
 8008928:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8008936:	af00      	add	r7, sp, #0
 8008938:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800893c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008940:	6018      	str	r0, [r3, #0]
 8008942:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008946:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800894a:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800894c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008950:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff f9df 	bl	8007d20 <validate>
 8008962:	4603      	mov	r3, r0
 8008964:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8008968:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800896c:	2b00      	cmp	r3, #0
 800896e:	d14b      	bne.n	8008a08 <f_readdir+0xd8>
		if (!fno) {
 8008970:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008974:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10b      	bne.n	8008996 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800897e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008982:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008986:	2100      	movs	r1, #0
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f7fd fd73 	bl	8006474 <dir_sdi>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008994:	e038      	b.n	8008a08 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8008996:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800899a:	f107 0208 	add.w	r2, r7, #8
 800899e:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 80089a0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80089a4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80089a8:	2100      	movs	r1, #0
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	f7fe f933 	bl	8006c16 <dir_read>
 80089b0:	4603      	mov	r3, r0
 80089b2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80089b6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d102      	bne.n	80089c4 <f_readdir+0x94>
 80089be:	2300      	movs	r3, #0
 80089c0:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 80089c4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11d      	bne.n	8008a08 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 80089cc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80089d0:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80089d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80089d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80089dc:	6811      	ldr	r1, [r2, #0]
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	f7fe fb78 	bl	80070d4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80089e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80089e8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80089ec:	2100      	movs	r1, #0
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	f7fd fdc9 	bl	8006586 <dir_next>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80089fa:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d102      	bne.n	8008a08 <f_readdir+0xd8>
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008a08:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a26:	2301      	movs	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a2e:	4b1f      	ldr	r3, [pc, #124]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a30:	7a5b      	ldrb	r3, [r3, #9]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d131      	bne.n	8008a9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a38:	4b1c      	ldr	r3, [pc, #112]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a3a:	7a5b      	ldrb	r3, [r3, #9]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4b1a      	ldr	r3, [pc, #104]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a42:	2100      	movs	r1, #0
 8008a44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a46:	4b19      	ldr	r3, [pc, #100]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a48:	7a5b      	ldrb	r3, [r3, #9]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	4a17      	ldr	r2, [pc, #92]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a56:	4b15      	ldr	r3, [pc, #84]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a58:	7a5b      	ldrb	r3, [r3, #9]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a60:	4413      	add	r3, r2
 8008a62:	79fa      	ldrb	r2, [r7, #7]
 8008a64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a66:	4b11      	ldr	r3, [pc, #68]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a68:	7a5b      	ldrb	r3, [r3, #9]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	b2d1      	uxtb	r1, r2
 8008a70:	4a0e      	ldr	r2, [pc, #56]	; (8008aac <FATFS_LinkDriverEx+0x94>)
 8008a72:	7251      	strb	r1, [r2, #9]
 8008a74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a76:	7dbb      	ldrb	r3, [r7, #22]
 8008a78:	3330      	adds	r3, #48	; 0x30
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3301      	adds	r3, #1
 8008a84:	223a      	movs	r2, #58	; 0x3a
 8008a86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	222f      	movs	r2, #47	; 0x2f
 8008a8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	3303      	adds	r3, #3
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	200000d4 	.word	0x200000d4

08008ab0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008aba:	2200      	movs	r2, #0
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff ffaa 	bl	8008a18 <FATFS_LinkDriverEx>
 8008ac4:	4603      	mov	r3, r0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008ad6:	f7f8 fb17 	bl	8001108 <HAL_GetTick>
 8008ada:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008adc:	e006      	b.n	8008aec <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ade:	f7fc fc69 	bl	80053b4 <BSP_SD_GetCardState>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e009      	b.n	8008b00 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008aec:	f7f8 fb0c 	bl	8001108 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d8f0      	bhi.n	8008ade <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008b12:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <SD_CheckStatus+0x38>)
 8008b14:	2201      	movs	r2, #1
 8008b16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008b18:	f7fc fc4c 	bl	80053b4 <BSP_SD_GetCardState>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d107      	bne.n	8008b32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008b22:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <SD_CheckStatus+0x38>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <SD_CheckStatus+0x38>)
 8008b30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008b32:	4b03      	ldr	r3, [pc, #12]	; (8008b40 <SD_CheckStatus+0x38>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b2db      	uxtb	r3, r3
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000009 	.word	0x20000009

08008b44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008b4e:	f7fc fbe5 	bl	800531c <BSP_SD_Init>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d107      	bne.n	8008b68 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff ffd4 	bl	8008b08 <SD_CheckStatus>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <SD_initialize+0x34>)
 8008b66:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008b68:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <SD_initialize+0x34>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	b2db      	uxtb	r3, r3
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000009 	.word	0x20000009

08008b7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff ffbd 	bl	8008b08 <SD_CheckStatus>
 8008b8e:	4603      	mov	r3, r0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008bac:	f247 5030 	movw	r0, #30000	; 0x7530
 8008bb0:	f7ff ff8d 	bl	8008ace <SD_CheckStatusWithTimeout>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da01      	bge.n	8008bbe <SD_read+0x26>
  {
    return res;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	e03b      	b.n	8008c36 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	68b8      	ldr	r0, [r7, #8]
 8008bc4:	f7fc fbc2 	bl	800534c <BSP_SD_ReadBlocks_DMA>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d132      	bne.n	8008c34 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008bce:	4b1c      	ldr	r3, [pc, #112]	; (8008c40 <SD_read+0xa8>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008bd4:	f7f8 fa98 	bl	8001108 <HAL_GetTick>
 8008bd8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008bda:	bf00      	nop
 8008bdc:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <SD_read+0xa8>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d108      	bne.n	8008bf6 <SD_read+0x5e>
 8008be4:	f7f8 fa90 	bl	8001108 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	f247 522f 	movw	r2, #29999	; 0x752f
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d9f2      	bls.n	8008bdc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008bf6:	4b12      	ldr	r3, [pc, #72]	; (8008c40 <SD_read+0xa8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d102      	bne.n	8008c04 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	75fb      	strb	r3, [r7, #23]
 8008c02:	e017      	b.n	8008c34 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008c04:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <SD_read+0xa8>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008c0a:	f7f8 fa7d 	bl	8001108 <HAL_GetTick>
 8008c0e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008c10:	e007      	b.n	8008c22 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008c12:	f7fc fbcf 	bl	80053b4 <BSP_SD_GetCardState>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <SD_read+0x8a>
          {
            res = RES_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008c20:	e008      	b.n	8008c34 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008c22:	f7f8 fa71 	bl	8001108 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d9ee      	bls.n	8008c12 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200000e4 	.word	0x200000e4

08008c44 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008c58:	4b24      	ldr	r3, [pc, #144]	; (8008cec <SD_write+0xa8>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008c5e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008c62:	f7ff ff34 	bl	8008ace <SD_CheckStatusWithTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	da01      	bge.n	8008c70 <SD_write+0x2c>
  {
    return res;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	e038      	b.n	8008ce2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	68b8      	ldr	r0, [r7, #8]
 8008c76:	f7fc fb83 	bl	8005380 <BSP_SD_WriteBlocks_DMA>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d12f      	bne.n	8008ce0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008c80:	f7f8 fa42 	bl	8001108 <HAL_GetTick>
 8008c84:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008c86:	bf00      	nop
 8008c88:	4b18      	ldr	r3, [pc, #96]	; (8008cec <SD_write+0xa8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d108      	bne.n	8008ca2 <SD_write+0x5e>
 8008c90:	f7f8 fa3a 	bl	8001108 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	f247 522f 	movw	r2, #29999	; 0x752f
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d9f2      	bls.n	8008c88 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <SD_write+0xa8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]
 8008cae:	e017      	b.n	8008ce0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008cb0:	4b0e      	ldr	r3, [pc, #56]	; (8008cec <SD_write+0xa8>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008cb6:	f7f8 fa27 	bl	8001108 <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008cbc:	e007      	b.n	8008cce <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008cbe:	f7fc fb79 	bl	80053b4 <BSP_SD_GetCardState>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <SD_write+0x8a>
          {
            res = RES_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75fb      	strb	r3, [r7, #23]
            break;
 8008ccc:	e008      	b.n	8008ce0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008cce:	f7f8 fa1b 	bl	8001108 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	f247 522f 	movw	r2, #29999	; 0x752f
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d9ee      	bls.n	8008cbe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200000e0 	.word	0x200000e0

08008cf0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08c      	sub	sp, #48	; 0x30
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	603a      	str	r2, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008d06:	4b25      	ldr	r3, [pc, #148]	; (8008d9c <SD_ioctl+0xac>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <SD_ioctl+0x28>
 8008d14:	2303      	movs	r3, #3
 8008d16:	e03c      	b.n	8008d92 <SD_ioctl+0xa2>

  switch (cmd)
 8008d18:	79bb      	ldrb	r3, [r7, #6]
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d834      	bhi.n	8008d88 <SD_ioctl+0x98>
 8008d1e:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <SD_ioctl+0x34>)
 8008d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d24:	08008d35 	.word	0x08008d35
 8008d28:	08008d3d 	.word	0x08008d3d
 8008d2c:	08008d55 	.word	0x08008d55
 8008d30:	08008d6f 	.word	0x08008d6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008d3a:	e028      	b.n	8008d8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008d3c:	f107 030c 	add.w	r3, r7, #12
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fc fb47 	bl	80053d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008d52:	e01c      	b.n	8008d8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008d54:	f107 030c 	add.w	r3, r7, #12
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fc fb3b 	bl	80053d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008d6c:	e00f      	b.n	8008d8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008d6e:	f107 030c 	add.w	r3, r7, #12
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fc fb2e 	bl	80053d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	0a5a      	lsrs	r2, r3, #9
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008d86:	e002      	b.n	8008d8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008d88:	2304      	movs	r3, #4
 8008d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3730      	adds	r7, #48	; 0x30
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000009 	.word	0x20000009

08008da0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008da4:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <BSP_SD_WriteCpltCallback+0x14>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
}
 8008daa:	bf00      	nop
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	200000e0 	.word	0x200000e0

08008db8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008dbc:	4b03      	ldr	r3, [pc, #12]	; (8008dcc <BSP_SD_ReadCpltCallback+0x14>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
}
 8008dc2:	bf00      	nop
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	200000e4 	.word	0x200000e4

08008dd0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008ddc:	f001 ff74 	bl	800acc8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008de0:	4b67      	ldr	r3, [pc, #412]	; (8008f80 <pvPortMalloc+0x1b0>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008de8:	f000 f938 	bl	800905c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dec:	4b65      	ldr	r3, [pc, #404]	; (8008f84 <pvPortMalloc+0x1b4>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4013      	ands	r3, r2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 80a7 	bne.w	8008f48 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d02d      	beq.n	8008e5c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008e00:	2208      	movs	r2, #8
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d227      	bcs.n	8008e5c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d021      	beq.n	8008e62 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f023 0307 	bic.w	r3, r3, #7
 8008e24:	3308      	adds	r3, #8
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d214      	bcs.n	8008e56 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f023 0307 	bic.w	r3, r3, #7
 8008e32:	3308      	adds	r3, #8
 8008e34:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e5a:	e002      	b.n	8008e62 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	607b      	str	r3, [r7, #4]
 8008e60:	e000      	b.n	8008e64 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e62:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d06e      	beq.n	8008f48 <pvPortMalloc+0x178>
 8008e6a:	4b47      	ldr	r3, [pc, #284]	; (8008f88 <pvPortMalloc+0x1b8>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d869      	bhi.n	8008f48 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008e74:	4b45      	ldr	r3, [pc, #276]	; (8008f8c <pvPortMalloc+0x1bc>)
 8008e76:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008e78:	4b44      	ldr	r3, [pc, #272]	; (8008f8c <pvPortMalloc+0x1bc>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e7e:	e004      	b.n	8008e8a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d903      	bls.n	8008e9c <pvPortMalloc+0xcc>
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1f1      	bne.n	8008e80 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008e9c:	4b38      	ldr	r3, [pc, #224]	; (8008f80 <pvPortMalloc+0x1b0>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d050      	beq.n	8008f48 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2208      	movs	r2, #8
 8008eac:	4413      	add	r3, r2
 8008eae:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d91f      	bls.n	8008f08 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4413      	add	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <pvPortMalloc+0x120>
        __asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	613b      	str	r3, [r7, #16]
    }
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	1ad2      	subs	r2, r2, r3
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f02:	69b8      	ldr	r0, [r7, #24]
 8008f04:	f000 f90c 	bl	8009120 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f08:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <pvPortMalloc+0x1b8>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	4a1d      	ldr	r2, [pc, #116]	; (8008f88 <pvPortMalloc+0x1b8>)
 8008f14:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f16:	4b1c      	ldr	r3, [pc, #112]	; (8008f88 <pvPortMalloc+0x1b8>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <pvPortMalloc+0x1c0>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d203      	bcs.n	8008f2a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f22:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <pvPortMalloc+0x1b8>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1a      	ldr	r2, [pc, #104]	; (8008f90 <pvPortMalloc+0x1c0>)
 8008f28:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <pvPortMalloc+0x1b4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	431a      	orrs	r2, r3
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008f3e:	4b15      	ldr	r3, [pc, #84]	; (8008f94 <pvPortMalloc+0x1c4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a13      	ldr	r2, [pc, #76]	; (8008f94 <pvPortMalloc+0x1c4>)
 8008f46:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008f48:	f001 fecc 	bl	800ace4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8008f52:	f007 ffd1 	bl	8010ef8 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <pvPortMalloc+0x1a6>
        __asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
    }
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <pvPortMalloc+0x1a4>
    return pvReturn;
 8008f76:	69fb      	ldr	r3, [r7, #28]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3728      	adds	r7, #40	; 0x28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200028f0 	.word	0x200028f0
 8008f84:	20002904 	.word	0x20002904
 8008f88:	200028f4 	.word	0x200028f4
 8008f8c:	200028e8 	.word	0x200028e8
 8008f90:	200028f8 	.word	0x200028f8
 8008f94:	200028fc 	.word	0x200028fc

08008f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d04d      	beq.n	8009046 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008faa:	2308      	movs	r3, #8
 8008fac:	425b      	negs	r3, r3
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	4b24      	ldr	r3, [pc, #144]	; (8009050 <vPortFree+0xb8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <vPortFree+0x44>
        __asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60fb      	str	r3, [r7, #12]
    }
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <vPortFree+0x62>
        __asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	60bb      	str	r3, [r7, #8]
    }
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	4b14      	ldr	r3, [pc, #80]	; (8009050 <vPortFree+0xb8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4013      	ands	r3, r2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01e      	beq.n	8009046 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11a      	bne.n	8009046 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	4b0e      	ldr	r3, [pc, #56]	; (8009050 <vPortFree+0xb8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	43db      	mvns	r3, r3
 800901a:	401a      	ands	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8009020:	f001 fe52 	bl	800acc8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <vPortFree+0xbc>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4413      	add	r3, r2
 800902e:	4a09      	ldr	r2, [pc, #36]	; (8009054 <vPortFree+0xbc>)
 8009030:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009032:	6938      	ldr	r0, [r7, #16]
 8009034:	f000 f874 	bl	8009120 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <vPortFree+0xc0>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3301      	adds	r3, #1
 800903e:	4a06      	ldr	r2, [pc, #24]	; (8009058 <vPortFree+0xc0>)
 8009040:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009042:	f001 fe4f 	bl	800ace4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009046:	bf00      	nop
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20002904 	.word	0x20002904
 8009054:	200028f4 	.word	0x200028f4
 8009058:	20002900 	.word	0x20002900

0800905c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009062:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009066:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8009068:	4b27      	ldr	r3, [pc, #156]	; (8009108 <prvHeapInit+0xac>)
 800906a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00c      	beq.n	8009090 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3307      	adds	r3, #7
 800907a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0307 	bic.w	r3, r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	4a1f      	ldr	r2, [pc, #124]	; (8009108 <prvHeapInit+0xac>)
 800908c:	4413      	add	r3, r2
 800908e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009094:	4a1d      	ldr	r2, [pc, #116]	; (800910c <prvHeapInit+0xb0>)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800909a:	4b1c      	ldr	r3, [pc, #112]	; (800910c <prvHeapInit+0xb0>)
 800909c:	2200      	movs	r2, #0
 800909e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	4413      	add	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80090a8:	2208      	movs	r2, #8
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f023 0307 	bic.w	r3, r3, #7
 80090b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a15      	ldr	r2, [pc, #84]	; (8009110 <prvHeapInit+0xb4>)
 80090bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80090be:	4b14      	ldr	r3, [pc, #80]	; (8009110 <prvHeapInit+0xb4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2200      	movs	r2, #0
 80090c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80090c6:	4b12      	ldr	r3, [pc, #72]	; (8009110 <prvHeapInit+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090dc:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <prvHeapInit+0xb4>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4a0a      	ldr	r2, [pc, #40]	; (8009114 <prvHeapInit+0xb8>)
 80090ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a09      	ldr	r2, [pc, #36]	; (8009118 <prvHeapInit+0xbc>)
 80090f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090f4:	4b09      	ldr	r3, [pc, #36]	; (800911c <prvHeapInit+0xc0>)
 80090f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090fa:	601a      	str	r2, [r3, #0]
}
 80090fc:	bf00      	nop
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	200000e8 	.word	0x200000e8
 800910c:	200028e8 	.word	0x200028e8
 8009110:	200028f0 	.word	0x200028f0
 8009114:	200028f8 	.word	0x200028f8
 8009118:	200028f4 	.word	0x200028f4
 800911c:	20002904 	.word	0x20002904

08009120 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009128:	4b28      	ldr	r3, [pc, #160]	; (80091cc <prvInsertBlockIntoFreeList+0xac>)
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e002      	b.n	8009134 <prvInsertBlockIntoFreeList+0x14>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d8f7      	bhi.n	800912e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	4413      	add	r3, r2
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	429a      	cmp	r2, r3
 800914e:	d108      	bne.n	8009162 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	441a      	add	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	441a      	add	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d118      	bne.n	80091a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <prvInsertBlockIntoFreeList+0xb0>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	429a      	cmp	r2, r3
 8009180:	d00d      	beq.n	800919e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	441a      	add	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e008      	b.n	80091b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <prvInsertBlockIntoFreeList+0xb0>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	e003      	b.n	80091b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d002      	beq.n	80091be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80091be:	bf00      	nop
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	200028e8 	.word	0x200028e8
 80091d0:	200028f0 	.word	0x200028f0

080091d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f103 0208 	add.w	r2, r3, #8
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f103 0208 	add.w	r2, r3, #8
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f103 0208 	add.w	r2, r3, #8
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800922e:	b480      	push	{r7}
 8009230:	b085      	sub	sp, #20
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8009276:	b480      	push	{r7}
 8009278:	b085      	sub	sp, #20
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800928c:	d103      	bne.n	8009296 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	e00c      	b.n	80092b0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3308      	adds	r3, #8
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e002      	b.n	80092a4 <vListInsert+0x2e>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d2f6      	bcs.n	800929e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	601a      	str	r2, [r3, #0]
}
 80092dc:	bf00      	nop
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	6892      	ldr	r2, [r2, #8]
 80092fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6852      	ldr	r2, [r2, #4]
 8009308:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d103      	bne.n	800931c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	1e5a      	subs	r2, r3, #1
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3b04      	subs	r3, #4
 800934c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009354:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3b04      	subs	r3, #4
 800935a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f023 0201 	bic.w	r2, r3, #1
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3b04      	subs	r3, #4
 800936a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800936c:	4a0c      	ldr	r2, [pc, #48]	; (80093a0 <pxPortInitialiseStack+0x64>)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3b14      	subs	r3, #20
 8009376:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3b04      	subs	r3, #4
 8009382:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f06f 0202 	mvn.w	r2, #2
 800938a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3b20      	subs	r3, #32
 8009390:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009392:	68fb      	ldr	r3, [r7, #12]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	080093a5 	.word	0x080093a5

080093a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80093ae:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <prvTaskExitError+0x54>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b6:	d00a      	beq.n	80093ce <prvTaskExitError+0x2a>
        __asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	60fb      	str	r3, [r7, #12]
    }
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <prvTaskExitError+0x28>
        __asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60bb      	str	r3, [r7, #8]
    }
 80093e0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80093e2:	bf00      	nop
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0fc      	beq.n	80093e4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	2000000c 	.word	0x2000000c
 80093fc:	00000000 	.word	0x00000000

08009400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009400:	4b07      	ldr	r3, [pc, #28]	; (8009420 <pxCurrentTCBConst2>)
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	6808      	ldr	r0, [r1, #0]
 8009406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940a:	f380 8809 	msr	PSP, r0
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f04f 0000 	mov.w	r0, #0
 8009416:	f380 8811 	msr	BASEPRI, r0
 800941a:	4770      	bx	lr
 800941c:	f3af 8000 	nop.w

08009420 <pxCurrentTCBConst2>:
 8009420:	20002950 	.word	0x20002950
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop

08009428 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009428:	4808      	ldr	r0, [pc, #32]	; (800944c <prvPortStartFirstTask+0x24>)
 800942a:	6800      	ldr	r0, [r0, #0]
 800942c:	6800      	ldr	r0, [r0, #0]
 800942e:	f380 8808 	msr	MSP, r0
 8009432:	f04f 0000 	mov.w	r0, #0
 8009436:	f380 8814 	msr	CONTROL, r0
 800943a:	b662      	cpsie	i
 800943c:	b661      	cpsie	f
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	df00      	svc	0
 8009448:	bf00      	nop
 800944a:	0000      	.short	0x0000
 800944c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop

08009454 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800945a:	4b46      	ldr	r3, [pc, #280]	; (8009574 <xPortStartScheduler+0x120>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a46      	ldr	r2, [pc, #280]	; (8009578 <xPortStartScheduler+0x124>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d10a      	bne.n	800947a <xPortStartScheduler+0x26>
        __asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	613b      	str	r3, [r7, #16]
    }
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800947a:	4b3e      	ldr	r3, [pc, #248]	; (8009574 <xPortStartScheduler+0x120>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a3f      	ldr	r2, [pc, #252]	; (800957c <xPortStartScheduler+0x128>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d10a      	bne.n	800949a <xPortStartScheduler+0x46>
        __asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	60fb      	str	r3, [r7, #12]
    }
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800949a:	4b39      	ldr	r3, [pc, #228]	; (8009580 <xPortStartScheduler+0x12c>)
 800949c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	22ff      	movs	r2, #255	; 0xff
 80094aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	4b31      	ldr	r3, [pc, #196]	; (8009584 <xPortStartScheduler+0x130>)
 80094c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094c2:	4b31      	ldr	r3, [pc, #196]	; (8009588 <xPortStartScheduler+0x134>)
 80094c4:	2207      	movs	r2, #7
 80094c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094c8:	e009      	b.n	80094de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80094ca:	4b2f      	ldr	r3, [pc, #188]	; (8009588 <xPortStartScheduler+0x134>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	4a2d      	ldr	r2, [pc, #180]	; (8009588 <xPortStartScheduler+0x134>)
 80094d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e6:	2b80      	cmp	r3, #128	; 0x80
 80094e8:	d0ef      	beq.n	80094ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094ea:	4b27      	ldr	r3, [pc, #156]	; (8009588 <xPortStartScheduler+0x134>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f1c3 0307 	rsb	r3, r3, #7
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d00a      	beq.n	800950c <xPortStartScheduler+0xb8>
        __asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	60bb      	str	r3, [r7, #8]
    }
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800950c:	4b1e      	ldr	r3, [pc, #120]	; (8009588 <xPortStartScheduler+0x134>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	4a1d      	ldr	r2, [pc, #116]	; (8009588 <xPortStartScheduler+0x134>)
 8009514:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009516:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <xPortStartScheduler+0x134>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800951e:	4a1a      	ldr	r2, [pc, #104]	; (8009588 <xPortStartScheduler+0x134>)
 8009520:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	b2da      	uxtb	r2, r3
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800952a:	4b18      	ldr	r3, [pc, #96]	; (800958c <xPortStartScheduler+0x138>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a17      	ldr	r2, [pc, #92]	; (800958c <xPortStartScheduler+0x138>)
 8009530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009534:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009536:	4b15      	ldr	r3, [pc, #84]	; (800958c <xPortStartScheduler+0x138>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a14      	ldr	r2, [pc, #80]	; (800958c <xPortStartScheduler+0x138>)
 800953c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009540:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009542:	f000 f8e3 	bl	800970c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009546:	4b12      	ldr	r3, [pc, #72]	; (8009590 <xPortStartScheduler+0x13c>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800954c:	f000 f902 	bl	8009754 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009550:	4b10      	ldr	r3, [pc, #64]	; (8009594 <xPortStartScheduler+0x140>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a0f      	ldr	r2, [pc, #60]	; (8009594 <xPortStartScheduler+0x140>)
 8009556:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800955a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800955c:	f7ff ff64 	bl	8009428 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009560:	f001 fd42 	bl	800afe8 <vTaskSwitchContext>
    prvTaskExitError();
 8009564:	f7ff ff1e 	bl	80093a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	e000ed00 	.word	0xe000ed00
 8009578:	410fc271 	.word	0x410fc271
 800957c:	410fc270 	.word	0x410fc270
 8009580:	e000e400 	.word	0xe000e400
 8009584:	20002908 	.word	0x20002908
 8009588:	2000290c 	.word	0x2000290c
 800958c:	e000ed20 	.word	0xe000ed20
 8009590:	2000000c 	.word	0x2000000c
 8009594:	e000ef34 	.word	0xe000ef34

08009598 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
        __asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	607b      	str	r3, [r7, #4]
    }
 80095b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80095b2:	4b0f      	ldr	r3, [pc, #60]	; (80095f0 <vPortEnterCritical+0x58>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3301      	adds	r3, #1
 80095b8:	4a0d      	ldr	r2, [pc, #52]	; (80095f0 <vPortEnterCritical+0x58>)
 80095ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80095bc:	4b0c      	ldr	r3, [pc, #48]	; (80095f0 <vPortEnterCritical+0x58>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d10f      	bne.n	80095e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095c4:	4b0b      	ldr	r3, [pc, #44]	; (80095f4 <vPortEnterCritical+0x5c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	603b      	str	r3, [r7, #0]
    }
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <vPortEnterCritical+0x4a>
    }
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	2000000c 	.word	0x2000000c
 80095f4:	e000ed04 	.word	0xe000ed04

080095f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <vPortExitCritical+0x50>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <vPortExitCritical+0x24>
        __asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	607b      	str	r3, [r7, #4]
    }
 8009618:	bf00      	nop
 800961a:	e7fe      	b.n	800961a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800961c:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <vPortExitCritical+0x50>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3b01      	subs	r3, #1
 8009622:	4a09      	ldr	r2, [pc, #36]	; (8009648 <vPortExitCritical+0x50>)
 8009624:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009626:	4b08      	ldr	r3, [pc, #32]	; (8009648 <vPortExitCritical+0x50>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d105      	bne.n	800963a <vPortExitCritical+0x42>
 800962e:	2300      	movs	r3, #0
 8009630:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009638:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	2000000c 	.word	0x2000000c
 800964c:	00000000 	.word	0x00000000

08009650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009650:	f3ef 8009 	mrs	r0, PSP
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <pxCurrentTCBConst>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	f01e 0f10 	tst.w	lr, #16
 8009660:	bf08      	it	eq
 8009662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966a:	6010      	str	r0, [r2, #0]
 800966c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009674:	f380 8811 	msr	BASEPRI, r0
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f001 fcb2 	bl	800afe8 <vTaskSwitchContext>
 8009684:	f04f 0000 	mov.w	r0, #0
 8009688:	f380 8811 	msr	BASEPRI, r0
 800968c:	bc09      	pop	{r0, r3}
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	6808      	ldr	r0, [r1, #0]
 8009692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009696:	f01e 0f10 	tst.w	lr, #16
 800969a:	bf08      	it	eq
 800969c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096a0:	f380 8809 	msr	PSP, r0
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	f3af 8000 	nop.w

080096b0 <pxCurrentTCBConst>:
 80096b0:	20002950 	.word	0x20002950
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop

080096b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
        __asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	607b      	str	r3, [r7, #4]
    }
 80096d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80096d2:	f003 fe33 	bl	800d33c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80096d6:	f001 fbc9 	bl	800ae6c <xTaskIncrementTick>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d006      	beq.n	80096ee <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80096e0:	f003 fe8a 	bl	800d3f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096e4:	4b08      	ldr	r3, [pc, #32]	; (8009708 <SysTick_Handler+0x50>)
 80096e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	e001      	b.n	80096f2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80096ee:	f003 fe67 	bl	800d3c0 <SEGGER_SYSVIEW_RecordExitISR>
 80096f2:	2300      	movs	r3, #0
 80096f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	f383 8811 	msr	BASEPRI, r3
    }
 80096fc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009710:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <vPortSetupTimerInterrupt+0x34>)
 8009712:	2200      	movs	r2, #0
 8009714:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009716:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <vPortSetupTimerInterrupt+0x38>)
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <vPortSetupTimerInterrupt+0x3c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <vPortSetupTimerInterrupt+0x40>)
 8009722:	fba2 2303 	umull	r2, r3, r2, r3
 8009726:	099b      	lsrs	r3, r3, #6
 8009728:	4a09      	ldr	r2, [pc, #36]	; (8009750 <vPortSetupTimerInterrupt+0x44>)
 800972a:	3b01      	subs	r3, #1
 800972c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800972e:	4b04      	ldr	r3, [pc, #16]	; (8009740 <vPortSetupTimerInterrupt+0x34>)
 8009730:	2207      	movs	r2, #7
 8009732:	601a      	str	r2, [r3, #0]
}
 8009734:	bf00      	nop
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	e000e010 	.word	0xe000e010
 8009744:	e000e018 	.word	0xe000e018
 8009748:	20000014 	.word	0x20000014
 800974c:	10624dd3 	.word	0x10624dd3
 8009750:	e000e014 	.word	0xe000e014

08009754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009764 <vPortEnableVFP+0x10>
 8009758:	6801      	ldr	r1, [r0, #0]
 800975a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800975e:	6001      	str	r1, [r0, #0]
 8009760:	4770      	bx	lr
 8009762:	0000      	.short	0x0000
 8009764:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009768:	bf00      	nop
 800976a:	bf00      	nop

0800976c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8009772:	f000 f83b 	bl	80097ec <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009776:	f3ef 8305 	mrs	r3, IPSR
 800977a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b0f      	cmp	r3, #15
 8009780:	d914      	bls.n	80097ac <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009782:	4a16      	ldr	r2, [pc, #88]	; (80097dc <vPortValidateInterruptPriority+0x70>)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800978c:	4b14      	ldr	r3, [pc, #80]	; (80097e0 <vPortValidateInterruptPriority+0x74>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	7afa      	ldrb	r2, [r7, #11]
 8009792:	429a      	cmp	r2, r3
 8009794:	d20a      	bcs.n	80097ac <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	607b      	str	r3, [r7, #4]
    }
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097ac:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <vPortValidateInterruptPriority+0x78>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80097b4:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <vPortValidateInterruptPriority+0x7c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d90a      	bls.n	80097d2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	603b      	str	r3, [r7, #0]
    }
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <vPortValidateInterruptPriority+0x64>
    }
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	e000e3f0 	.word	0xe000e3f0
 80097e0:	20002908 	.word	0x20002908
 80097e4:	e000ed0c 	.word	0xe000ed0c
 80097e8:	2000290c 	.word	0x2000290c

080097ec <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097f2:	4b1f      	ldr	r3, [pc, #124]	; (8009870 <vSetVarulMaxPRIGROUPValue+0x84>)
 80097f4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	22ff      	movs	r2, #255	; 0xff
 80097fa:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009804:	4b1b      	ldr	r3, [pc, #108]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009806:	2207      	movs	r2, #7
 8009808:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800980a:	e009      	b.n	8009820 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 800980c:	4b19      	ldr	r3, [pc, #100]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3b01      	subs	r3, #1
 8009812:	4a18      	ldr	r2, [pc, #96]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009814:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	b2db      	uxtb	r3, r3
 800981e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009828:	2b80      	cmp	r3, #128	; 0x80
 800982a:	d0ef      	beq.n	800980c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800982c:	4b11      	ldr	r3, [pc, #68]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f1c3 0307 	rsb	r3, r3, #7
 8009834:	2b04      	cmp	r3, #4
 8009836:	d00a      	beq.n	800984e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	60bb      	str	r3, [r7, #8]
    }
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	021b      	lsls	r3, r3, #8
 8009854:	4a07      	ldr	r2, [pc, #28]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009856:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009858:	4b06      	ldr	r3, [pc, #24]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009860:	4a04      	ldr	r2, [pc, #16]	; (8009874 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009862:	6013      	str	r3, [r2, #0]
}
 8009864:	bf00      	nop
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	e000e400 	.word	0xe000e400
 8009874:	2000290c 	.word	0x2000290c

08009878 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <xQueueGenericReset+0x2a>
        __asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	60bb      	str	r3, [r7, #8]
    }
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80098a2:	f7ff fe79 	bl	8009598 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098b2:	fb01 f303 	mul.w	r3, r1, r3
 80098b6:	441a      	add	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	3b01      	subs	r3, #1
 80098d4:	68f9      	ldr	r1, [r7, #12]
 80098d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098d8:	fb01 f303 	mul.w	r3, r1, r3
 80098dc:	441a      	add	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	22ff      	movs	r2, #255	; 0xff
 80098ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d114      	bne.n	8009922 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01a      	beq.n	8009936 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3310      	adds	r3, #16
 8009904:	4618      	mov	r0, r3
 8009906:	f001 fc53 	bl	800b1b0 <xTaskRemoveFromEventList>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d012      	beq.n	8009936 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8009910:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <xQueueGenericReset+0xcc>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	e009      	b.n	8009936 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3310      	adds	r3, #16
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fc54 	bl	80091d4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3324      	adds	r3, #36	; 0x24
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fc4f 	bl	80091d4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8009936:	f7ff fe5f 	bl	80095f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800993a:	2301      	movs	r3, #1
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8009948:	b580      	push	{r7, lr}
 800994a:	b08e      	sub	sp, #56	; 0x38
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <xQueueGenericCreateStatic+0x52>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <xQueueGenericCreateStatic+0x56>
 800999a:	2301      	movs	r3, #1
 800999c:	e000      	b.n	80099a0 <xQueueGenericCreateStatic+0x58>
 800999e:	2300      	movs	r3, #0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <xQueueGenericCreateStatic+0x72>
        __asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	623b      	str	r3, [r7, #32]
    }
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d102      	bne.n	80099c6 <xQueueGenericCreateStatic+0x7e>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <xQueueGenericCreateStatic+0x82>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e000      	b.n	80099cc <xQueueGenericCreateStatic+0x84>
 80099ca:	2300      	movs	r3, #0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	61fb      	str	r3, [r7, #28]
    }
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80099e6:	2350      	movs	r3, #80	; 0x50
 80099e8:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b50      	cmp	r3, #80	; 0x50
 80099ee:	d00a      	beq.n	8009a06 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	61bb      	str	r3, [r7, #24]
    }
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a06:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	4613      	mov	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f868 	bl	8009afe <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8009a30:	4618      	mov	r0, r3
 8009a32:	3730      	adds	r7, #48	; 0x30
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08c      	sub	sp, #48	; 0x30
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <xQueueGenericCreate+0x2a>
        __asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	61bb      	str	r3, [r7, #24]
    }
 8009a5e:	bf00      	nop
 8009a60:	e7fe      	b.n	8009a60 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	fb02 f303 	mul.w	r3, r2, r3
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d006      	beq.n	8009a80 <xQueueGenericCreate+0x48>
 8009a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d101      	bne.n	8009a84 <xQueueGenericCreate+0x4c>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <xQueueGenericCreate+0x4e>
 8009a84:	2300      	movs	r3, #0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <xQueueGenericCreate+0x68>
        __asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	617b      	str	r3, [r7, #20]
    }
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8009aa6:	d90a      	bls.n	8009abe <xQueueGenericCreate+0x86>
        __asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	613b      	str	r3, [r7, #16]
    }
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	3350      	adds	r3, #80	; 0x50
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff f984 	bl	8008dd0 <pvPortMalloc>
 8009ac8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d011      	beq.n	8009af4 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	3350      	adds	r3, #80	; 0x50
 8009ad8:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ae2:	79fa      	ldrb	r2, [r7, #7]
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	69fa      	ldr	r2, [r7, #28]
 8009aec:	68b9      	ldr	r1, [r7, #8]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 f805 	bl	8009afe <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009af4:	6a3b      	ldr	r3, [r7, #32]
    }
 8009af6:	4618      	mov	r0, r3
 8009af8:	3728      	adds	r7, #40	; 0x28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d103      	bne.n	8009b1a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	e002      	b.n	8009b20 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	69b8      	ldr	r0, [r7, #24]
 8009b30:	f7ff fea2 	bl	8009878 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	78fa      	ldrb	r2, [r7, #3]
 8009b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	68f9      	ldr	r1, [r7, #12]
 8009b42:	2073      	movs	r0, #115	; 0x73
 8009b44:	f003 f82a 	bl	800cb9c <SEGGER_SYSVIEW_RecordU32x3>
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00e      	beq.n	8009b7c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009b70:	2300      	movs	r3, #0
 8009b72:	2200      	movs	r2, #0
 8009b74:	2100      	movs	r1, #0
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f81c 	bl	8009bb4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	617b      	str	r3, [r7, #20]
 8009b92:	2300      	movs	r3, #0
 8009b94:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	6939      	ldr	r1, [r7, #16]
 8009b9c:	6978      	ldr	r0, [r7, #20]
 8009b9e:	f7ff ff4b 	bl	8009a38 <xQueueGenericCreate>
 8009ba2:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff ffd3 	bl	8009b50 <prvInitialiseMutex>

        return xNewQueue;
 8009baa:	68fb      	ldr	r3, [r7, #12]
    }
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b090      	sub	sp, #64	; 0x40
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <xQueueGenericSend+0x32>
        __asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d103      	bne.n	8009bf4 <xQueueGenericSend+0x40>
 8009bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <xQueueGenericSend+0x44>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e000      	b.n	8009bfa <xQueueGenericSend+0x46>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <xQueueGenericSend+0x60>
        __asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d103      	bne.n	8009c22 <xQueueGenericSend+0x6e>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d101      	bne.n	8009c26 <xQueueGenericSend+0x72>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <xQueueGenericSend+0x74>
 8009c26:	2300      	movs	r3, #0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10a      	bne.n	8009c42 <xQueueGenericSend+0x8e>
        __asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	623b      	str	r3, [r7, #32]
    }
 8009c3e:	bf00      	nop
 8009c40:	e7fe      	b.n	8009c40 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c42:	f001 fcaf 	bl	800b5a4 <xTaskGetSchedulerState>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <xQueueGenericSend+0x9e>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <xQueueGenericSend+0xa2>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e000      	b.n	8009c58 <xQueueGenericSend+0xa4>
 8009c56:	2300      	movs	r3, #0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <xQueueGenericSend+0xbe>
        __asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	61fb      	str	r3, [r7, #28]
    }
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009c72:	f7ff fc91 	bl	8009598 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d302      	bcc.n	8009c88 <xQueueGenericSend+0xd4>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d136      	bne.n	8009cf6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f003 fd12 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4601      	mov	r1, r0
 8009c9c:	205a      	movs	r0, #90	; 0x5a
 8009c9e:	f002 fff3 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	68b9      	ldr	r1, [r7, #8]
 8009ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ca8:	f000 fbcc 	bl	800a444 <prvCopyDataToQueue>
 8009cac:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d010      	beq.n	8009cd8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	3324      	adds	r3, #36	; 0x24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fa78 	bl	800b1b0 <xTaskRemoveFromEventList>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d013      	beq.n	8009cee <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009cc6:	4b4d      	ldr	r3, [pc, #308]	; (8009dfc <xQueueGenericSend+0x248>)
 8009cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	e00a      	b.n	8009cee <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009cde:	4b47      	ldr	r3, [pc, #284]	; (8009dfc <xQueueGenericSend+0x248>)
 8009ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8009cee:	f7ff fc83 	bl	80095f8 <vPortExitCritical>
                return pdPASS;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e07d      	b.n	8009df2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d110      	bne.n	8009d1e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009cfc:	f7ff fc7c 	bl	80095f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8009d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d02:	4618      	mov	r0, r3
 8009d04:	f003 fcd6 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	460b      	mov	r3, r1
 8009d12:	4601      	mov	r1, r0
 8009d14:	205a      	movs	r0, #90	; 0x5a
 8009d16:	f002 ffb7 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e069      	b.n	8009df2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d106      	bne.n	8009d32 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009d24:	f107 0314 	add.w	r3, r7, #20
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f001 faa9 	bl	800b280 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009d32:	f7ff fc61 	bl	80095f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009d36:	f000 ffc7 	bl	800acc8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009d3a:	f7ff fc2d 	bl	8009598 <vPortEnterCritical>
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d4a:	d103      	bne.n	8009d54 <xQueueGenericSend+0x1a0>
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d5a:	b25b      	sxtb	r3, r3
 8009d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d60:	d103      	bne.n	8009d6a <xQueueGenericSend+0x1b6>
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d6a:	f7ff fc45 	bl	80095f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d6e:	1d3a      	adds	r2, r7, #4
 8009d70:	f107 0314 	add.w	r3, r7, #20
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 fa98 	bl	800b2ac <xTaskCheckForTimeOut>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d124      	bne.n	8009dcc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d84:	f000 fc56 	bl	800a634 <prvIsQueueFull>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d018      	beq.n	8009dc0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	3310      	adds	r3, #16
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	4611      	mov	r1, r2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 f9b8 	bl	800b10c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d9e:	f000 fbe1 	bl	800a564 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009da2:	f000 ff9f 	bl	800ace4 <xTaskResumeAll>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f47f af62 	bne.w	8009c72 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <xQueueGenericSend+0x248>)
 8009db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	e758      	b.n	8009c72 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dc2:	f000 fbcf 	bl	800a564 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009dc6:	f000 ff8d 	bl	800ace4 <xTaskResumeAll>
 8009dca:	e752      	b.n	8009c72 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dce:	f000 fbc9 	bl	800a564 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009dd2:	f000 ff87 	bl	800ace4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f003 fc6b 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	460b      	mov	r3, r1
 8009de8:	4601      	mov	r1, r0
 8009dea:	205a      	movs	r0, #90	; 0x5a
 8009dec:	f002 ff4c 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8009df0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3738      	adds	r7, #56	; 0x38
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	e000ed04 	.word	0xe000ed04

08009e00 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b090      	sub	sp, #64	; 0x40
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10a      	bne.n	8009e2e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009e2a:	bf00      	nop
 8009e2c:	e7fe      	b.n	8009e2c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d103      	bne.n	8009e3c <xQueueGenericSendFromISR+0x3c>
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <xQueueGenericSendFromISR+0x40>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e000      	b.n	8009e42 <xQueueGenericSendFromISR+0x42>
 8009e40:	2300      	movs	r3, #0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009e58:	bf00      	nop
 8009e5a:	e7fe      	b.n	8009e5a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d103      	bne.n	8009e6a <xQueueGenericSendFromISR+0x6a>
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d101      	bne.n	8009e6e <xQueueGenericSendFromISR+0x6e>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <xQueueGenericSendFromISR+0x70>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	623b      	str	r3, [r7, #32]
    }
 8009e86:	bf00      	nop
 8009e88:	e7fe      	b.n	8009e88 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e8a:	f7ff fc6f 	bl	800976c <vPortValidateInterruptPriority>
        __asm volatile
 8009e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	61fa      	str	r2, [r7, #28]
 8009ea4:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8009ea6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ea8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d302      	bcc.n	8009ebc <xQueueGenericSendFromISR+0xbc>
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d148      	bne.n	8009f4e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eca:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f003 fbf0 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009ed4:	4601      	mov	r1, r0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	2060      	movs	r0, #96	; 0x60
 8009edc:	f002 fe04 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ee6:	f000 faad 	bl	800a444 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009eea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ef2:	d112      	bne.n	8009f1a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d025      	beq.n	8009f48 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efe:	3324      	adds	r3, #36	; 0x24
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 f955 	bl	800b1b0 <xTaskRemoveFromEventList>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01d      	beq.n	8009f48 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01a      	beq.n	8009f48 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	e016      	b.n	8009f48 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009f1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8009f20:	d10a      	bne.n	8009f38 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	617b      	str	r3, [r7, #20]
    }
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	b25a      	sxtb	r2, r3
 8009f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8009f4c:	e00b      	b.n	8009f66 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	4618      	mov	r0, r3
 8009f52:	f003 fbaf 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009f56:	4601      	mov	r1, r0
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2060      	movs	r0, #96	; 0x60
 8009f5e:	f002 fdc3 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009f62:	2300      	movs	r3, #0
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f68:	613b      	str	r3, [r7, #16]
        __asm volatile
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f383 8811 	msr	BASEPRI, r3
    }
 8009f70:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3740      	adds	r7, #64	; 0x40
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009f7c:	b590      	push	{r4, r7, lr}
 8009f7e:	b08f      	sub	sp, #60	; 0x3c
 8009f80:	af02      	add	r7, sp, #8
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10a      	bne.n	8009fac <xQueueReceive+0x30>
        __asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	623b      	str	r3, [r7, #32]
    }
 8009fa8:	bf00      	nop
 8009faa:	e7fe      	b.n	8009faa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d103      	bne.n	8009fba <xQueueReceive+0x3e>
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <xQueueReceive+0x42>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e000      	b.n	8009fc0 <xQueueReceive+0x44>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <xQueueReceive+0x5e>
        __asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	61fb      	str	r3, [r7, #28]
    }
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fda:	f001 fae3 	bl	800b5a4 <xTaskGetSchedulerState>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d102      	bne.n	8009fea <xQueueReceive+0x6e>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <xQueueReceive+0x72>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <xQueueReceive+0x74>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <xQueueReceive+0x8e>
        __asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	61bb      	str	r3, [r7, #24]
    }
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a00a:	f7ff fac5 	bl	8009598 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a012:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	2b00      	cmp	r3, #0
 800a018:	d02f      	beq.n	800a07a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a01e:	f000 fa7b 	bl	800a518 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	4618      	mov	r0, r3
 800a026:	f003 fb45 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a02a:	4604      	mov	r4, r0
 800a02c:	2000      	movs	r0, #0
 800a02e:	f003 fb41 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a032:	4602      	mov	r2, r0
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2101      	movs	r1, #1
 800a038:	9100      	str	r1, [sp, #0]
 800a03a:	4621      	mov	r1, r4
 800a03c:	205c      	movs	r0, #92	; 0x5c
 800a03e:	f002 fe23 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	1e5a      	subs	r2, r3, #1
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00f      	beq.n	800a072 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a054:	3310      	adds	r3, #16
 800a056:	4618      	mov	r0, r3
 800a058:	f001 f8aa 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d007      	beq.n	800a072 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a062:	4b4d      	ldr	r3, [pc, #308]	; (800a198 <xQueueReceive+0x21c>)
 800a064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a072:	f7ff fac1 	bl	80095f8 <vPortExitCritical>
                return pdPASS;
 800a076:	2301      	movs	r3, #1
 800a078:	e08a      	b.n	800a190 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d113      	bne.n	800a0a8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a080:	f7ff faba 	bl	80095f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	4618      	mov	r0, r3
 800a088:	f003 fb14 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a08c:	4604      	mov	r4, r0
 800a08e:	2000      	movs	r0, #0
 800a090:	f003 fb10 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a094:	4602      	mov	r2, r0
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2101      	movs	r1, #1
 800a09a:	9100      	str	r1, [sp, #0]
 800a09c:	4621      	mov	r1, r4
 800a09e:	205c      	movs	r0, #92	; 0x5c
 800a0a0:	f002 fdf2 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e073      	b.n	800a190 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ae:	f107 0310 	add.w	r3, r7, #16
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 f8e4 	bl	800b280 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a0bc:	f7ff fa9c 	bl	80095f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a0c0:	f000 fe02 	bl	800acc8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a0c4:	f7ff fa68 	bl	8009598 <vPortEnterCritical>
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0ce:	b25b      	sxtb	r3, r3
 800a0d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0d4:	d103      	bne.n	800a0de <xQueueReceive+0x162>
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0e4:	b25b      	sxtb	r3, r3
 800a0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ea:	d103      	bne.n	800a0f4 <xQueueReceive+0x178>
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0f4:	f7ff fa80 	bl	80095f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0f8:	1d3a      	adds	r2, r7, #4
 800a0fa:	f107 0310 	add.w	r3, r7, #16
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f001 f8d3 	bl	800b2ac <xTaskCheckForTimeOut>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d124      	bne.n	800a156 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a10e:	f000 fa7b 	bl	800a608 <prvIsQueueEmpty>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d018      	beq.n	800a14a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	3324      	adds	r3, #36	; 0x24
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	4611      	mov	r1, r2
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fff3 	bl	800b10c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a128:	f000 fa1c 	bl	800a564 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a12c:	f000 fdda 	bl	800ace4 <xTaskResumeAll>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	f47f af69 	bne.w	800a00a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800a138:	4b17      	ldr	r3, [pc, #92]	; (800a198 <xQueueReceive+0x21c>)
 800a13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	e75f      	b.n	800a00a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800a14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a14c:	f000 fa0a 	bl	800a564 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a150:	f000 fdc8 	bl	800ace4 <xTaskResumeAll>
 800a154:	e759      	b.n	800a00a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800a156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a158:	f000 fa04 	bl	800a564 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a15c:	f000 fdc2 	bl	800ace4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a162:	f000 fa51 	bl	800a608 <prvIsQueueEmpty>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f43f af4e 	beq.w	800a00a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	4618      	mov	r0, r3
 800a172:	f003 fa9f 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a176:	4604      	mov	r4, r0
 800a178:	2000      	movs	r0, #0
 800a17a:	f003 fa9b 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a17e:	4602      	mov	r2, r0
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2101      	movs	r1, #1
 800a184:	9100      	str	r1, [sp, #0]
 800a186:	4621      	mov	r1, r4
 800a188:	205c      	movs	r0, #92	; 0x5c
 800a18a:	f002 fd7d 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800a18e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800a190:	4618      	mov	r0, r3
 800a192:	3734      	adds	r7, #52	; 0x34
 800a194:	46bd      	mov	sp, r7
 800a196:	bd90      	pop	{r4, r7, pc}
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b091      	sub	sp, #68	; 0x44
 800a1a0:	af02      	add	r7, sp, #8
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <xQueueSemaphoreTake+0x32>
        __asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	623b      	str	r3, [r7, #32]
    }
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <xQueueSemaphoreTake+0x50>
        __asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	61fb      	str	r3, [r7, #28]
    }
 800a1e8:	bf00      	nop
 800a1ea:	e7fe      	b.n	800a1ea <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1ec:	f001 f9da 	bl	800b5a4 <xTaskGetSchedulerState>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d102      	bne.n	800a1fc <xQueueSemaphoreTake+0x60>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <xQueueSemaphoreTake+0x64>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e000      	b.n	800a202 <xQueueSemaphoreTake+0x66>
 800a200:	2300      	movs	r3, #0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <xQueueSemaphoreTake+0x80>
        __asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	61bb      	str	r3, [r7, #24]
    }
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a21c:	f7ff f9bc 	bl	8009598 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d034      	beq.n	800a296 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	4618      	mov	r0, r3
 800a230:	f003 fa40 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a234:	4604      	mov	r4, r0
 800a236:	2000      	movs	r0, #0
 800a238:	f003 fa3c 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a23c:	4602      	mov	r2, r0
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2101      	movs	r1, #1
 800a242:	9100      	str	r1, [sp, #0]
 800a244:	4621      	mov	r1, r4
 800a246:	205c      	movs	r0, #92	; 0x5c
 800a248:	f002 fd1e 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	1e5a      	subs	r2, r3, #1
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d104      	bne.n	800a266 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a25c:	f001 fb32 	bl	800b8c4 <pvTaskIncrementMutexHeldCount>
 800a260:	4602      	mov	r2, r0
 800a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a264:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00f      	beq.n	800a28e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	3310      	adds	r3, #16
 800a272:	4618      	mov	r0, r3
 800a274:	f000 ff9c 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a27e:	4b64      	ldr	r3, [pc, #400]	; (800a410 <xQueueSemaphoreTake+0x274>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a28e:	f7ff f9b3 	bl	80095f8 <vPortExitCritical>
                return pdPASS;
 800a292:	2301      	movs	r3, #1
 800a294:	e0b7      	b.n	800a406 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d121      	bne.n	800a2e0 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	617b      	str	r3, [r7, #20]
    }
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800a2b8:	f7ff f99e 	bl	80095f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f003 f9f8 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f003 f9f4 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	9100      	str	r1, [sp, #0]
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	205c      	movs	r0, #92	; 0x5c
 800a2d8:	f002 fcd6 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	e092      	b.n	800a406 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a2e6:	f107 030c 	add.w	r3, r7, #12
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 ffc8 	bl	800b280 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a2f4:	f7ff f980 	bl	80095f8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a2f8:	f000 fce6 	bl	800acc8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a2fc:	f7ff f94c 	bl	8009598 <vPortEnterCritical>
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a306:	b25b      	sxtb	r3, r3
 800a308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a30c:	d103      	bne.n	800a316 <xQueueSemaphoreTake+0x17a>
 800a30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a322:	d103      	bne.n	800a32c <xQueueSemaphoreTake+0x190>
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	2200      	movs	r2, #0
 800a328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a32c:	f7ff f964 	bl	80095f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a330:	463a      	mov	r2, r7
 800a332:	f107 030c 	add.w	r3, r7, #12
 800a336:	4611      	mov	r1, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 ffb7 	bl	800b2ac <xTaskCheckForTimeOut>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d132      	bne.n	800a3aa <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a346:	f000 f95f 	bl	800a608 <prvIsQueueEmpty>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d026      	beq.n	800a39e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d109      	bne.n	800a36c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 800a358:	f7ff f91e 	bl	8009598 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	4618      	mov	r0, r3
 800a362:	f001 f93d 	bl	800b5e0 <xTaskPriorityInherit>
 800a366:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800a368:	f7ff f946 	bl	80095f8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	3324      	adds	r3, #36	; 0x24
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	4611      	mov	r1, r2
 800a374:	4618      	mov	r0, r3
 800a376:	f000 fec9 	bl	800b10c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a37a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a37c:	f000 f8f2 	bl	800a564 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a380:	f000 fcb0 	bl	800ace4 <xTaskResumeAll>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	f47f af48 	bne.w	800a21c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800a38c:	4b20      	ldr	r3, [pc, #128]	; (800a410 <xQueueSemaphoreTake+0x274>)
 800a38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	e73e      	b.n	800a21c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800a39e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3a0:	f000 f8e0 	bl	800a564 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a3a4:	f000 fc9e 	bl	800ace4 <xTaskResumeAll>
 800a3a8:	e738      	b.n	800a21c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800a3aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ac:	f000 f8da 	bl	800a564 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a3b0:	f000 fc98 	bl	800ace4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b6:	f000 f927 	bl	800a608 <prvIsQueueEmpty>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f43f af2d 	beq.w	800a21c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00d      	beq.n	800a3e4 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 800a3c8:	f7ff f8e6 	bl	8009598 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ce:	f000 f821 	bl	800a414 <prvGetDisinheritPriorityAfterTimeout>
 800a3d2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f001 f9e8 	bl	800b7b0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800a3e0:	f7ff f90a 	bl	80095f8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f003 f964 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f003 f960 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	9100      	str	r1, [sp, #0]
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	205c      	movs	r0, #92	; 0x5c
 800a400:	f002 fc42 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800a404:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800a406:	4618      	mov	r0, r3
 800a408:	373c      	adds	r7, #60	; 0x3c
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd90      	pop	{r4, r7, pc}
 800a40e:	bf00      	nop
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	d006      	beq.n	800a432 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	e001      	b.n	800a436 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800a436:	68fb      	ldr	r3, [r7, #12]
    }
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10d      	bne.n	800a47e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d14d      	bne.n	800a506 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	4618      	mov	r0, r3
 800a470:	f001 f928 	bl	800b6c4 <xTaskPriorityDisinherit>
 800a474:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	609a      	str	r2, [r3, #8]
 800a47c:	e043      	b.n	800a506 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d119      	bne.n	800a4b8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6858      	ldr	r0, [r3, #4]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	461a      	mov	r2, r3
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	f00a f9fa 	bl	8014888 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	441a      	add	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d32b      	bcc.n	800a506 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]
 800a4b6:	e026      	b.n	800a506 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	68d8      	ldr	r0, [r3, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	f00a f9e0 	bl	8014888 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	68da      	ldr	r2, [r3, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d0:	425b      	negs	r3, r3
 800a4d2:	441a      	add	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d207      	bcs.n	800a4f4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	441a      	add	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d105      	bne.n	800a506 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	3b01      	subs	r3, #1
 800a504:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800a50e:	697b      	ldr	r3, [r7, #20]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	2b00      	cmp	r3, #0
 800a528:	d018      	beq.n	800a55c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a532:	441a      	add	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68da      	ldr	r2, [r3, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	429a      	cmp	r2, r3
 800a542:	d303      	bcc.n	800a54c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68d9      	ldr	r1, [r3, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	461a      	mov	r2, r3
 800a556:	6838      	ldr	r0, [r7, #0]
 800a558:	f00a f996 	bl	8014888 <memcpy>
    }
}
 800a55c:	bf00      	nop
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800a56c:	f7ff f814 	bl	8009598 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a576:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a578:	e011      	b.n	800a59e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d012      	beq.n	800a5a8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	3324      	adds	r3, #36	; 0x24
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fe12 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800a592:	f000 fef1 	bl	800b378 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800a596:	7bfb      	ldrb	r3, [r7, #15]
 800a598:	3b01      	subs	r3, #1
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dce9      	bgt.n	800a57a <prvUnlockQueue+0x16>
 800a5a6:	e000      	b.n	800a5aa <prvUnlockQueue+0x46>
                        break;
 800a5a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	22ff      	movs	r2, #255	; 0xff
 800a5ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800a5b2:	f7ff f821 	bl	80095f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800a5b6:	f7fe ffef 	bl	8009598 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5c0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5c2:	e011      	b.n	800a5e8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d012      	beq.n	800a5f2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3310      	adds	r3, #16
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fded 	bl	800b1b0 <xTaskRemoveFromEventList>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a5dc:	f000 fecc 	bl	800b378 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dce9      	bgt.n	800a5c4 <prvUnlockQueue+0x60>
 800a5f0:	e000      	b.n	800a5f4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800a5f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	22ff      	movs	r2, #255	; 0xff
 800a5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800a5fc:	f7fe fffc 	bl	80095f8 <vPortExitCritical>
}
 800a600:	bf00      	nop
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a610:	f7fe ffc2 	bl	8009598 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d102      	bne.n	800a622 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800a61c:	2301      	movs	r3, #1
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e001      	b.n	800a626 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a626:	f7fe ffe7 	bl	80095f8 <vPortExitCritical>

    return xReturn;
 800a62a:	68fb      	ldr	r3, [r7, #12]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a63c:	f7fe ffac 	bl	8009598 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a648:	429a      	cmp	r2, r3
 800a64a:	d102      	bne.n	800a652 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800a64c:	2301      	movs	r3, #1
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	e001      	b.n	800a656 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a656:	f7fe ffcf 	bl	80095f8 <vPortExitCritical>

    return xReturn;
 800a65a:	68fb      	ldr	r3, [r7, #12]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	e01e      	b.n	800a6b2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a674:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <vQueueAddToRegistry+0x60>)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d115      	bne.n	800a6ac <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a680:	4910      	ldr	r1, [pc, #64]	; (800a6c4 <vQueueAddToRegistry+0x60>)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800a68a:	4a0e      	ldr	r2, [pc, #56]	; (800a6c4 <vQueueAddToRegistry+0x60>)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	00db      	lsls	r3, r3, #3
 800a690:	4413      	add	r3, r2
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4618      	mov	r0, r3
 800a69a:	f003 f80b 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800a69e:	4601      	mov	r1, r0
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2071      	movs	r0, #113	; 0x71
 800a6a6:	f002 fa1f 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800a6aa:	e006      	b.n	800a6ba <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b07      	cmp	r3, #7
 800a6b6:	d9dd      	bls.n	800a674 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20002910 	.word	0x20002910

0800a6c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a6d8:	f7fe ff5e 	bl	8009598 <vPortEnterCritical>
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6e2:	b25b      	sxtb	r3, r3
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e8:	d103      	bne.n	800a6f2 <vQueueWaitForMessageRestricted+0x2a>
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6f8:	b25b      	sxtb	r3, r3
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6fe:	d103      	bne.n	800a708 <vQueueWaitForMessageRestricted+0x40>
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a708:	f7fe ff76 	bl	80095f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	2b00      	cmp	r3, #0
 800a712:	d106      	bne.n	800a722 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	3324      	adds	r3, #36	; 0x24
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	68b9      	ldr	r1, [r7, #8]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 fd19 	bl	800b154 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a722:	6978      	ldr	r0, [r7, #20]
 800a724:	f7ff ff1e 	bl	800a564 <prvUnlockQueue>
    }
 800a728:	bf00      	nop
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800a730:	b580      	push	{r7, lr}
 800a732:	b08e      	sub	sp, #56	; 0x38
 800a734:	af04      	add	r7, sp, #16
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xTaskCreateStatic+0x2a>
        __asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	623b      	str	r3, [r7, #32]
    }
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10a      	bne.n	800a776 <xTaskCreateStatic+0x46>
        __asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	61fb      	str	r3, [r7, #28]
    }
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800a776:	235c      	movs	r3, #92	; 0x5c
 800a778:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b5c      	cmp	r3, #92	; 0x5c
 800a77e:	d00a      	beq.n	800a796 <xTaskCreateStatic+0x66>
        __asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	61bb      	str	r3, [r7, #24]
    }
 800a792:	bf00      	nop
 800a794:	e7fe      	b.n	800a794 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a796:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d01e      	beq.n	800a7dc <xTaskCreateStatic+0xac>
 800a79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01b      	beq.n	800a7dc <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ac:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9303      	str	r3, [sp, #12]
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	9302      	str	r3, [sp, #8]
 800a7be:	f107 0314 	add.w	r3, r7, #20
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 f850 	bl	800a874 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a7d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7d6:	f000 f8e3 	bl	800a9a0 <prvAddNewTaskToReadyList>
 800a7da:	e001      	b.n	800a7e0 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800a7e0:	697b      	ldr	r3, [r7, #20]
    }
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3728      	adds	r7, #40	; 0x28
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b08c      	sub	sp, #48	; 0x30
 800a7ee:	af04      	add	r7, sp, #16
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	603b      	str	r3, [r7, #0]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7fa:	88fb      	ldrh	r3, [r7, #6]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fae6 	bl	8008dd0 <pvPortMalloc>
 800a804:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00e      	beq.n	800a82a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a80c:	205c      	movs	r0, #92	; 0x5c
 800a80e:	f7fe fadf 	bl	8008dd0 <pvPortMalloc>
 800a812:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	631a      	str	r2, [r3, #48]	; 0x30
 800a820:	e005      	b.n	800a82e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a822:	6978      	ldr	r0, [r7, #20]
 800a824:	f7fe fbb8 	bl	8008f98 <vPortFree>
 800a828:	e001      	b.n	800a82e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a82a:	2300      	movs	r3, #0
 800a82c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d017      	beq.n	800a864 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a83c:	88fa      	ldrh	r2, [r7, #6]
 800a83e:	2300      	movs	r3, #0
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68b9      	ldr	r1, [r7, #8]
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 f80e 	bl	800a874 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a858:	69f8      	ldr	r0, [r7, #28]
 800a85a:	f000 f8a1 	bl	800a9a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a85e:	2301      	movs	r3, #1
 800a860:	61bb      	str	r3, [r7, #24]
 800a862:	e002      	b.n	800a86a <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a868:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a86a:	69bb      	ldr	r3, [r7, #24]
    }
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	461a      	mov	r2, r3
 800a88c:	21a5      	movs	r1, #165	; 0xa5
 800a88e:	f00a f809 	bl	80148a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a89c:	3b01      	subs	r3, #1
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	f023 0307 	bic.w	r3, r3, #7
 800a8aa:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <prvInitialiseNewTask+0x58>
        __asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	617b      	str	r3, [r7, #20]
    }
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d01f      	beq.n	800a912 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	61fb      	str	r3, [r7, #28]
 800a8d6:	e012      	b.n	800a8fe <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	4413      	add	r3, r2
 800a8de:	7819      	ldrb	r1, [r3, #0]
 800a8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	3334      	adds	r3, #52	; 0x34
 800a8e8:	460a      	mov	r2, r1
 800a8ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d006      	beq.n	800a906 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	61fb      	str	r3, [r7, #28]
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	2b0f      	cmp	r3, #15
 800a902:	d9e9      	bls.n	800a8d8 <prvInitialiseNewTask+0x64>
 800a904:	e000      	b.n	800a908 <prvInitialiseNewTask+0x94>
            {
                break;
 800a906:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a910:	e003      	b.n	800a91a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91c:	2b37      	cmp	r3, #55	; 0x37
 800a91e:	d901      	bls.n	800a924 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a920:	2337      	movs	r3, #55	; 0x37
 800a922:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a928:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a92e:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	2200      	movs	r2, #0
 800a934:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	3304      	adds	r3, #4
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe fc6a 	bl	8009214 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	3318      	adds	r3, #24
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe fc65 	bl	8009214 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a94e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a95e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	3354      	adds	r3, #84	; 0x54
 800a964:	2204      	movs	r2, #4
 800a966:	2100      	movs	r1, #0
 800a968:	4618      	mov	r0, r3
 800a96a:	f009 ff9b 	bl	80148a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	3358      	adds	r3, #88	; 0x58
 800a972:	2201      	movs	r2, #1
 800a974:	2100      	movs	r1, #0
 800a976:	4618      	mov	r0, r3
 800a978:	f009 ff94 	bl	80148a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	68f9      	ldr	r1, [r7, #12]
 800a980:	69b8      	ldr	r0, [r7, #24]
 800a982:	f7fe fcdb 	bl	800933c <pxPortInitialiseStack>
 800a986:	4602      	mov	r2, r0
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a996:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a998:	bf00      	nop
 800a99a:	3720      	adds	r7, #32
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a9a0:	b5b0      	push	{r4, r5, r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af02      	add	r7, sp, #8
 800a9a6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a9a8:	f7fe fdf6 	bl	8009598 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a9ac:	4b3c      	ldr	r3, [pc, #240]	; (800aaa0 <prvAddNewTaskToReadyList+0x100>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	4a3b      	ldr	r2, [pc, #236]	; (800aaa0 <prvAddNewTaskToReadyList+0x100>)
 800a9b4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a9b6:	4b3b      	ldr	r3, [pc, #236]	; (800aaa4 <prvAddNewTaskToReadyList+0x104>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d109      	bne.n	800a9d2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a9be:	4a39      	ldr	r2, [pc, #228]	; (800aaa4 <prvAddNewTaskToReadyList+0x104>)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9c4:	4b36      	ldr	r3, [pc, #216]	; (800aaa0 <prvAddNewTaskToReadyList+0x100>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d110      	bne.n	800a9ee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a9cc:	f000 fcf8 	bl	800b3c0 <prvInitialiseTaskLists>
 800a9d0:	e00d      	b.n	800a9ee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a9d2:	4b35      	ldr	r3, [pc, #212]	; (800aaa8 <prvAddNewTaskToReadyList+0x108>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d109      	bne.n	800a9ee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9da:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <prvAddNewTaskToReadyList+0x104>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d802      	bhi.n	800a9ee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a9e8:	4a2e      	ldr	r2, [pc, #184]	; (800aaa4 <prvAddNewTaskToReadyList+0x104>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a9ee:	4b2f      	ldr	r3, [pc, #188]	; (800aaac <prvAddNewTaskToReadyList+0x10c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	4a2d      	ldr	r2, [pc, #180]	; (800aaac <prvAddNewTaskToReadyList+0x10c>)
 800a9f6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9f8:	4b2c      	ldr	r3, [pc, #176]	; (800aaac <prvAddNewTaskToReadyList+0x10c>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <prvAddNewTaskToReadyList+0x94>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f002 fd2d 	bl	800d468 <SEGGER_SYSVIEW_OnTaskCreate>
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1e:	461d      	mov	r5, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	461c      	mov	r4, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2a:	1ae3      	subs	r3, r4, r3
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	462b      	mov	r3, r5
 800aa30:	f003 f84e 	bl	800dad0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f002 fd9a 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4b1b      	ldr	r3, [pc, #108]	; (800aab0 <prvAddNewTaskToReadyList+0x110>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d903      	bls.n	800aa50 <prvAddNewTaskToReadyList+0xb0>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4a18      	ldr	r2, [pc, #96]	; (800aab0 <prvAddNewTaskToReadyList+0x110>)
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4a15      	ldr	r2, [pc, #84]	; (800aab4 <prvAddNewTaskToReadyList+0x114>)
 800aa5e:	441a      	add	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3304      	adds	r3, #4
 800aa64:	4619      	mov	r1, r3
 800aa66:	4610      	mov	r0, r2
 800aa68:	f7fe fbe1 	bl	800922e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800aa6c:	f7fe fdc4 	bl	80095f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800aa70:	4b0d      	ldr	r3, [pc, #52]	; (800aaa8 <prvAddNewTaskToReadyList+0x108>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00e      	beq.n	800aa96 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <prvAddNewTaskToReadyList+0x104>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d207      	bcs.n	800aa96 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800aa86:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <prvAddNewTaskToReadyList+0x118>)
 800aa88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20002e24 	.word	0x20002e24
 800aaa4:	20002950 	.word	0x20002950
 800aaa8:	20002e30 	.word	0x20002e30
 800aaac:	20002e40 	.word	0x20002e40
 800aab0:	20002e2c 	.word	0x20002e2c
 800aab4:	20002954 	.word	0x20002954
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800aac4:	f7fe fd68 	bl	8009598 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <vTaskDelete+0x18>
 800aace:	4b39      	ldr	r3, [pc, #228]	; (800abb4 <vTaskDelete+0xf8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	e000      	b.n	800aad6 <vTaskDelete+0x1a>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3304      	adds	r3, #4
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fc03 	bl	80092e8 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3318      	adds	r3, #24
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe fbfa 	bl	80092e8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800aaf4:	4b30      	ldr	r3, [pc, #192]	; (800abb8 <vTaskDelete+0xfc>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	4a2f      	ldr	r2, [pc, #188]	; (800abb8 <vTaskDelete+0xfc>)
 800aafc:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800aafe:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <vTaskDelete+0xf8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d118      	bne.n	800ab3a <vTaskDelete+0x7e>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	482b      	ldr	r0, [pc, #172]	; (800abbc <vTaskDelete+0x100>)
 800ab10:	f7fe fb8d 	bl	800922e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800ab14:	4b2a      	ldr	r3, [pc, #168]	; (800abc0 <vTaskDelete+0x104>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	4a29      	ldr	r2, [pc, #164]	; (800abc0 <vTaskDelete+0x104>)
 800ab1c:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f002 fdc7 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800ab26:	4603      	mov	r3, r0
 800ab28:	4619      	mov	r1, r3
 800ab2a:	2022      	movs	r0, #34	; 0x22
 800ab2c:	f001 ffa0 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f003 f834 	bl	800dba0 <SYSVIEW_DeleteTask>
 800ab38:	e016      	b.n	800ab68 <vTaskDelete+0xac>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800ab3a:	4b22      	ldr	r3, [pc, #136]	; (800abc4 <vTaskDelete+0x108>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	4a20      	ldr	r2, [pc, #128]	; (800abc4 <vTaskDelete+0x108>)
 800ab42:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f002 fdb4 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	4619      	mov	r1, r3
 800ab50:	2022      	movs	r0, #34	; 0x22
 800ab52:	f001 ff8d 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f003 f821 	bl	800dba0 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 fcd4 	bl	800b50c <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800ab64:	f000 fd02 	bl	800b56c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800ab68:	f7fe fd46 	bl	80095f8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800ab6c:	4b16      	ldr	r3, [pc, #88]	; (800abc8 <vTaskDelete+0x10c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d01b      	beq.n	800abac <vTaskDelete+0xf0>
        {
            if( pxTCB == pxCurrentTCB )
 800ab74:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <vTaskDelete+0xf8>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d116      	bne.n	800abac <vTaskDelete+0xf0>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800ab7e:	4b13      	ldr	r3, [pc, #76]	; (800abcc <vTaskDelete+0x110>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <vTaskDelete+0xe0>
        __asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60bb      	str	r3, [r7, #8]
    }
 800ab98:	bf00      	nop
 800ab9a:	e7fe      	b.n	800ab9a <vTaskDelete+0xde>
                portYIELD_WITHIN_API();
 800ab9c:	4b0c      	ldr	r3, [pc, #48]	; (800abd0 <vTaskDelete+0x114>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20002950 	.word	0x20002950
 800abb8:	20002e40 	.word	0x20002e40
 800abbc:	20002df8 	.word	0x20002df8
 800abc0:	20002e0c 	.word	0x20002e0c
 800abc4:	20002e24 	.word	0x20002e24
 800abc8:	20002e30 	.word	0x20002e30
 800abcc:	20002e4c 	.word	0x20002e4c
 800abd0:	e000ed04 	.word	0xe000ed04

0800abd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b08a      	sub	sp, #40	; 0x28
 800abd8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abe2:	463a      	mov	r2, r7
 800abe4:	1d39      	adds	r1, r7, #4
 800abe6:	f107 0308 	add.w	r3, r7, #8
 800abea:	4618      	mov	r0, r3
 800abec:	f006 f9a2 	bl	8010f34 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	9202      	str	r2, [sp, #8]
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	2300      	movs	r3, #0
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	2300      	movs	r3, #0
 800ac00:	460a      	mov	r2, r1
 800ac02:	4929      	ldr	r1, [pc, #164]	; (800aca8 <vTaskStartScheduler+0xd4>)
 800ac04:	4829      	ldr	r0, [pc, #164]	; (800acac <vTaskStartScheduler+0xd8>)
 800ac06:	f7ff fd93 	bl	800a730 <xTaskCreateStatic>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	4a28      	ldr	r2, [pc, #160]	; (800acb0 <vTaskStartScheduler+0xdc>)
 800ac0e:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800ac10:	4b27      	ldr	r3, [pc, #156]	; (800acb0 <vTaskStartScheduler+0xdc>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	e001      	b.n	800ac22 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d102      	bne.n	800ac2e <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800ac28:	f000 ff32 	bl	800ba90 <xTimerCreateTimerTask>
 800ac2c:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d124      	bne.n	800ac7e <vTaskStartScheduler+0xaa>
        __asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	613b      	str	r3, [r7, #16]
    }
 800ac46:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800ac48:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <vTaskStartScheduler+0xe0>)
 800ac4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac4e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800ac50:	4b19      	ldr	r3, [pc, #100]	; (800acb8 <vTaskStartScheduler+0xe4>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac56:	4b19      	ldr	r3, [pc, #100]	; (800acbc <vTaskStartScheduler+0xe8>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800ac5c:	4b18      	ldr	r3, [pc, #96]	; (800acc0 <vTaskStartScheduler+0xec>)
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	4b13      	ldr	r3, [pc, #76]	; (800acb0 <vTaskStartScheduler+0xdc>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d102      	bne.n	800ac6e <vTaskStartScheduler+0x9a>
 800ac68:	f002 fbe2 	bl	800d430 <SEGGER_SYSVIEW_OnIdle>
 800ac6c:	e004      	b.n	800ac78 <vTaskStartScheduler+0xa4>
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <vTaskStartScheduler+0xec>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f002 fc3a 	bl	800d4ec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800ac78:	f7fe fbec 	bl	8009454 <xPortStartScheduler>
 800ac7c:	e00e      	b.n	800ac9c <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac84:	d10a      	bne.n	800ac9c <vTaskStartScheduler+0xc8>
        __asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	60fb      	str	r3, [r7, #12]
    }
 800ac98:	bf00      	nop
 800ac9a:	e7fe      	b.n	800ac9a <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800ac9c:	4b09      	ldr	r3, [pc, #36]	; (800acc4 <vTaskStartScheduler+0xf0>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
}
 800aca0:	bf00      	nop
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	08015318 	.word	0x08015318
 800acac:	0800b391 	.word	0x0800b391
 800acb0:	20002e48 	.word	0x20002e48
 800acb4:	20002e44 	.word	0x20002e44
 800acb8:	20002e30 	.word	0x20002e30
 800acbc:	20002e28 	.word	0x20002e28
 800acc0:	20002950 	.word	0x20002950
 800acc4:	20000010 	.word	0x20000010

0800acc8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acc8:	b480      	push	{r7}
 800acca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800accc:	4b04      	ldr	r3, [pc, #16]	; (800ace0 <vTaskSuspendAll+0x18>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	3301      	adds	r3, #1
 800acd2:	4a03      	ldr	r2, [pc, #12]	; (800ace0 <vTaskSuspendAll+0x18>)
 800acd4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800acd6:	bf00      	nop
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	20002e4c 	.word	0x20002e4c

0800ace4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800acee:	2300      	movs	r3, #0
 800acf0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800acf2:	4b44      	ldr	r3, [pc, #272]	; (800ae04 <xTaskResumeAll+0x120>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <xTaskResumeAll+0x2c>
        __asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	603b      	str	r3, [r7, #0]
    }
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800ad10:	f7fe fc42 	bl	8009598 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800ad14:	4b3b      	ldr	r3, [pc, #236]	; (800ae04 <xTaskResumeAll+0x120>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	4a3a      	ldr	r2, [pc, #232]	; (800ae04 <xTaskResumeAll+0x120>)
 800ad1c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad1e:	4b39      	ldr	r3, [pc, #228]	; (800ae04 <xTaskResumeAll+0x120>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d166      	bne.n	800adf4 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad26:	4b38      	ldr	r3, [pc, #224]	; (800ae08 <xTaskResumeAll+0x124>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d062      	beq.n	800adf4 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad2e:	e033      	b.n	800ad98 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad30:	4b36      	ldr	r3, [pc, #216]	; (800ae0c <xTaskResumeAll+0x128>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3318      	adds	r3, #24
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fad3 	bl	80092e8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3304      	adds	r3, #4
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fe face 	bl	80092e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f002 fc0e 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad58:	4b2d      	ldr	r3, [pc, #180]	; (800ae10 <xTaskResumeAll+0x12c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d903      	bls.n	800ad68 <xTaskResumeAll+0x84>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	4a2a      	ldr	r2, [pc, #168]	; (800ae10 <xTaskResumeAll+0x12c>)
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4a27      	ldr	r2, [pc, #156]	; (800ae14 <xTaskResumeAll+0x130>)
 800ad76:	441a      	add	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f7fe fa55 	bl	800922e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad88:	4b23      	ldr	r3, [pc, #140]	; (800ae18 <xTaskResumeAll+0x134>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d302      	bcc.n	800ad98 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800ad92:	4b22      	ldr	r3, [pc, #136]	; (800ae1c <xTaskResumeAll+0x138>)
 800ad94:	2201      	movs	r2, #1
 800ad96:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad98:	4b1c      	ldr	r3, [pc, #112]	; (800ae0c <xTaskResumeAll+0x128>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1c7      	bne.n	800ad30 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800ada6:	f000 fbe1 	bl	800b56c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800adaa:	4b1d      	ldr	r3, [pc, #116]	; (800ae20 <xTaskResumeAll+0x13c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d010      	beq.n	800add8 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800adb6:	f000 f859 	bl	800ae6c <xTaskIncrementTick>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800adc0:	4b16      	ldr	r3, [pc, #88]	; (800ae1c <xTaskResumeAll+0x138>)
 800adc2:	2201      	movs	r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3b01      	subs	r3, #1
 800adca:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1f1      	bne.n	800adb6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800add2:	4b13      	ldr	r3, [pc, #76]	; (800ae20 <xTaskResumeAll+0x13c>)
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800add8:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <xTaskResumeAll+0x138>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d009      	beq.n	800adf4 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800ade0:	2301      	movs	r3, #1
 800ade2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800ade4:	4b0f      	ldr	r3, [pc, #60]	; (800ae24 <xTaskResumeAll+0x140>)
 800ade6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800adf4:	f7fe fc00 	bl	80095f8 <vPortExitCritical>

    return xAlreadyYielded;
 800adf8:	68bb      	ldr	r3, [r7, #8]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	20002e4c 	.word	0x20002e4c
 800ae08:	20002e24 	.word	0x20002e24
 800ae0c:	20002de4 	.word	0x20002de4
 800ae10:	20002e2c 	.word	0x20002e2c
 800ae14:	20002954 	.word	0x20002954
 800ae18:	20002950 	.word	0x20002950
 800ae1c:	20002e38 	.word	0x20002e38
 800ae20:	20002e34 	.word	0x20002e34
 800ae24:	e000ed04 	.word	0xe000ed04

0800ae28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800ae2e:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <xTaskGetTickCount+0x1c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800ae34:	687b      	ldr	r3, [r7, #4]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20002e28 	.word	0x20002e28

0800ae48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae4e:	f7fe fc8d 	bl	800976c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ae52:	2300      	movs	r3, #0
 800ae54:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800ae56:	4b04      	ldr	r3, [pc, #16]	; (800ae68 <xTaskGetTickCountFromISR+0x20>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800ae5c:	683b      	ldr	r3, [r7, #0]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20002e28 	.word	0x20002e28

0800ae6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800ae72:	2300      	movs	r3, #0
 800ae74:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae76:	4b51      	ldr	r3, [pc, #324]	; (800afbc <xTaskIncrementTick+0x150>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f040 8093 	bne.w	800afa6 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae80:	4b4f      	ldr	r3, [pc, #316]	; (800afc0 <xTaskIncrementTick+0x154>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3301      	adds	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800ae88:	4a4d      	ldr	r2, [pc, #308]	; (800afc0 <xTaskIncrementTick+0x154>)
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d120      	bne.n	800aed6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800ae94:	4b4b      	ldr	r3, [pc, #300]	; (800afc4 <xTaskIncrementTick+0x158>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <xTaskIncrementTick+0x48>
        __asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	603b      	str	r3, [r7, #0]
    }
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <xTaskIncrementTick+0x46>
 800aeb4:	4b43      	ldr	r3, [pc, #268]	; (800afc4 <xTaskIncrementTick+0x158>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	4b43      	ldr	r3, [pc, #268]	; (800afc8 <xTaskIncrementTick+0x15c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a41      	ldr	r2, [pc, #260]	; (800afc4 <xTaskIncrementTick+0x158>)
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	4a41      	ldr	r2, [pc, #260]	; (800afc8 <xTaskIncrementTick+0x15c>)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	4b40      	ldr	r3, [pc, #256]	; (800afcc <xTaskIncrementTick+0x160>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3301      	adds	r3, #1
 800aece:	4a3f      	ldr	r2, [pc, #252]	; (800afcc <xTaskIncrementTick+0x160>)
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	f000 fb4b 	bl	800b56c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800aed6:	4b3e      	ldr	r3, [pc, #248]	; (800afd0 <xTaskIncrementTick+0x164>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d34d      	bcc.n	800af7c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee0:	4b38      	ldr	r3, [pc, #224]	; (800afc4 <xTaskIncrementTick+0x158>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d104      	bne.n	800aef4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeea:	4b39      	ldr	r3, [pc, #228]	; (800afd0 <xTaskIncrementTick+0x164>)
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aef0:	601a      	str	r2, [r3, #0]
                    break;
 800aef2:	e043      	b.n	800af7c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef4:	4b33      	ldr	r3, [pc, #204]	; (800afc4 <xTaskIncrementTick+0x158>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d203      	bcs.n	800af14 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800af0c:	4a30      	ldr	r2, [pc, #192]	; (800afd0 <xTaskIncrementTick+0x164>)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af12:	e033      	b.n	800af7c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3304      	adds	r3, #4
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fe f9e5 	bl	80092e8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	3318      	adds	r3, #24
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe f9dc 	bl	80092e8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	4618      	mov	r0, r3
 800af34:	f002 fb1c 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3c:	4b25      	ldr	r3, [pc, #148]	; (800afd4 <xTaskIncrementTick+0x168>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d903      	bls.n	800af4c <xTaskIncrementTick+0xe0>
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a22      	ldr	r2, [pc, #136]	; (800afd4 <xTaskIncrementTick+0x168>)
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4613      	mov	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4a1f      	ldr	r2, [pc, #124]	; (800afd8 <xTaskIncrementTick+0x16c>)
 800af5a:	441a      	add	r2, r3
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	3304      	adds	r3, #4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f7fe f963 	bl	800922e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	4b1b      	ldr	r3, [pc, #108]	; (800afdc <xTaskIncrementTick+0x170>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af72:	429a      	cmp	r2, r3
 800af74:	d3b4      	bcc.n	800aee0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800af76:	2301      	movs	r3, #1
 800af78:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af7a:	e7b1      	b.n	800aee0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af7c:	4b17      	ldr	r3, [pc, #92]	; (800afdc <xTaskIncrementTick+0x170>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af82:	4915      	ldr	r1, [pc, #84]	; (800afd8 <xTaskIncrementTick+0x16c>)
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d901      	bls.n	800af98 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800af94:	2301      	movs	r3, #1
 800af96:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800af98:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <xTaskIncrementTick+0x174>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d007      	beq.n	800afb0 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800afa0:	2301      	movs	r3, #1
 800afa2:	617b      	str	r3, [r7, #20]
 800afa4:	e004      	b.n	800afb0 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800afa6:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <xTaskIncrementTick+0x178>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <xTaskIncrementTick+0x178>)
 800afae:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800afb0:	697b      	ldr	r3, [r7, #20]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	20002e4c 	.word	0x20002e4c
 800afc0:	20002e28 	.word	0x20002e28
 800afc4:	20002ddc 	.word	0x20002ddc
 800afc8:	20002de0 	.word	0x20002de0
 800afcc:	20002e3c 	.word	0x20002e3c
 800afd0:	20002e44 	.word	0x20002e44
 800afd4:	20002e2c 	.word	0x20002e2c
 800afd8:	20002954 	.word	0x20002954
 800afdc:	20002950 	.word	0x20002950
 800afe0:	20002e38 	.word	0x20002e38
 800afe4:	20002e34 	.word	0x20002e34

0800afe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afee:	4b41      	ldr	r3, [pc, #260]	; (800b0f4 <vTaskSwitchContext+0x10c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800aff6:	4b40      	ldr	r3, [pc, #256]	; (800b0f8 <vTaskSwitchContext+0x110>)
 800aff8:	2201      	movs	r2, #1
 800affa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800affc:	e076      	b.n	800b0ec <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 800affe:	4b3e      	ldr	r3, [pc, #248]	; (800b0f8 <vTaskSwitchContext+0x110>)
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800b004:	4b3d      	ldr	r3, [pc, #244]	; (800b0fc <vTaskSwitchContext+0x114>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00a:	613b      	str	r3, [r7, #16]
 800b00c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d111      	bne.n	800b040 <vTaskSwitchContext+0x58>
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	3304      	adds	r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	429a      	cmp	r2, r3
 800b026:	d10b      	bne.n	800b040 <vTaskSwitchContext+0x58>
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	3308      	adds	r3, #8
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	429a      	cmp	r2, r3
 800b032:	d105      	bne.n	800b040 <vTaskSwitchContext+0x58>
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	330c      	adds	r3, #12
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d008      	beq.n	800b052 <vTaskSwitchContext+0x6a>
 800b040:	4b2e      	ldr	r3, [pc, #184]	; (800b0fc <vTaskSwitchContext+0x114>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4b2d      	ldr	r3, [pc, #180]	; (800b0fc <vTaskSwitchContext+0x114>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3334      	adds	r3, #52	; 0x34
 800b04a:	4619      	mov	r1, r3
 800b04c:	4610      	mov	r0, r2
 800b04e:	f005 ff61 	bl	8010f14 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b052:	4b2b      	ldr	r3, [pc, #172]	; (800b100 <vTaskSwitchContext+0x118>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	617b      	str	r3, [r7, #20]
 800b058:	e010      	b.n	800b07c <vTaskSwitchContext+0x94>
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <vTaskSwitchContext+0x8e>
        __asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	607b      	str	r3, [r7, #4]
    }
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <vTaskSwitchContext+0x8c>
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	3b01      	subs	r3, #1
 800b07a:	617b      	str	r3, [r7, #20]
 800b07c:	4921      	ldr	r1, [pc, #132]	; (800b104 <vTaskSwitchContext+0x11c>)
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	4613      	mov	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	440b      	add	r3, r1
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d0e4      	beq.n	800b05a <vTaskSwitchContext+0x72>
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	4613      	mov	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4a1a      	ldr	r2, [pc, #104]	; (800b104 <vTaskSwitchContext+0x11c>)
 800b09c:	4413      	add	r3, r2
 800b09e:	60bb      	str	r3, [r7, #8]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	605a      	str	r2, [r3, #4]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d104      	bne.n	800b0c0 <vTaskSwitchContext+0xd8>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	605a      	str	r2, [r3, #4]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	4a0d      	ldr	r2, [pc, #52]	; (800b0fc <vTaskSwitchContext+0x114>)
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	4a0d      	ldr	r2, [pc, #52]	; (800b100 <vTaskSwitchContext+0x118>)
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <vTaskSwitchContext+0x114>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <vTaskSwitchContext+0x120>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d102      	bne.n	800b0e2 <vTaskSwitchContext+0xfa>
 800b0dc:	f002 f9a8 	bl	800d430 <SEGGER_SYSVIEW_OnIdle>
}
 800b0e0:	e004      	b.n	800b0ec <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 800b0e2:	4b06      	ldr	r3, [pc, #24]	; (800b0fc <vTaskSwitchContext+0x114>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f002 fa00 	bl	800d4ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800b0ec:	bf00      	nop
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	20002e4c 	.word	0x20002e4c
 800b0f8:	20002e38 	.word	0x20002e38
 800b0fc:	20002950 	.word	0x20002950
 800b100:	20002e2c 	.word	0x20002e2c
 800b104:	20002954 	.word	0x20002954
 800b108:	20002e48 	.word	0x20002e48

0800b10c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	60fb      	str	r3, [r7, #12]
    }
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b132:	4b07      	ldr	r3, [pc, #28]	; (800b150 <vTaskPlaceOnEventList+0x44>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3318      	adds	r3, #24
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7fe f89b 	bl	8009276 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b140:	2101      	movs	r1, #1
 800b142:	6838      	ldr	r0, [r7, #0]
 800b144:	f000 fc44 	bl	800b9d0 <prvAddCurrentTaskToDelayedList>
}
 800b148:	bf00      	nop
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20002950 	.word	0x20002950

0800b154 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	617b      	str	r3, [r7, #20]
    }
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b17c:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <vTaskPlaceOnEventListRestricted+0x58>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3318      	adds	r3, #24
 800b182:	4619      	mov	r1, r3
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7fe f852 	bl	800922e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800b190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b194:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800b196:	2024      	movs	r0, #36	; 0x24
 800b198:	f001 fc4c 	bl	800ca34 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	68b8      	ldr	r0, [r7, #8]
 800b1a0:	f000 fc16 	bl	800b9d0 <prvAddCurrentTaskToDelayedList>
    }
 800b1a4:	bf00      	nop
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20002950 	.word	0x20002950

0800b1b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	60fb      	str	r3, [r7, #12]
    }
 800b1d8:	bf00      	nop
 800b1da:	e7fe      	b.n	800b1da <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	3318      	adds	r3, #24
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fe f881 	bl	80092e8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1e6:	4b20      	ldr	r3, [pc, #128]	; (800b268 <xTaskRemoveFromEventList+0xb8>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d121      	bne.n	800b232 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe f878 	bl	80092e8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f002 f9b8 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b204:	4b19      	ldr	r3, [pc, #100]	; (800b26c <xTaskRemoveFromEventList+0xbc>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d903      	bls.n	800b214 <xTaskRemoveFromEventList+0x64>
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	4a16      	ldr	r2, [pc, #88]	; (800b26c <xTaskRemoveFromEventList+0xbc>)
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b218:	4613      	mov	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4a13      	ldr	r2, [pc, #76]	; (800b270 <xTaskRemoveFromEventList+0xc0>)
 800b222:	441a      	add	r2, r3
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	3304      	adds	r3, #4
 800b228:	4619      	mov	r1, r3
 800b22a:	4610      	mov	r0, r2
 800b22c:	f7fd ffff 	bl	800922e <vListInsertEnd>
 800b230:	e005      	b.n	800b23e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	3318      	adds	r3, #24
 800b236:	4619      	mov	r1, r3
 800b238:	480e      	ldr	r0, [pc, #56]	; (800b274 <xTaskRemoveFromEventList+0xc4>)
 800b23a:	f7fd fff8 	bl	800922e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b242:	4b0d      	ldr	r3, [pc, #52]	; (800b278 <xTaskRemoveFromEventList+0xc8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	429a      	cmp	r2, r3
 800b24a:	d905      	bls.n	800b258 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800b24c:	2301      	movs	r3, #1
 800b24e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <xTaskRemoveFromEventList+0xcc>)
 800b252:	2201      	movs	r2, #1
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	e001      	b.n	800b25c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b25c:	697b      	ldr	r3, [r7, #20]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20002e4c 	.word	0x20002e4c
 800b26c:	20002e2c 	.word	0x20002e2c
 800b270:	20002954 	.word	0x20002954
 800b274:	20002de4 	.word	0x20002de4
 800b278:	20002950 	.word	0x20002950
 800b27c:	20002e38 	.word	0x20002e38

0800b280 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b288:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <vTaskInternalSetTimeOutState+0x24>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b290:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <vTaskInternalSetTimeOutState+0x28>)
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	605a      	str	r2, [r3, #4]
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	20002e3c 	.word	0x20002e3c
 800b2a8:	20002e28 	.word	0x20002e28

0800b2ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	613b      	str	r3, [r7, #16]
    }
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	60fb      	str	r3, [r7, #12]
    }
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800b2ee:	f7fe f953 	bl	8009598 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800b2f2:	4b1f      	ldr	r3, [pc, #124]	; (800b370 <xTaskCheckForTimeOut+0xc4>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b30a:	d102      	bne.n	800b312 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61fb      	str	r3, [r7, #28]
 800b310:	e026      	b.n	800b360 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	4b17      	ldr	r3, [pc, #92]	; (800b374 <xTaskCheckForTimeOut+0xc8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d00a      	beq.n	800b334 <xTaskCheckForTimeOut+0x88>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	429a      	cmp	r2, r3
 800b326:	d305      	bcc.n	800b334 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800b328:	2301      	movs	r3, #1
 800b32a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	e015      	b.n	800b360 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d20b      	bcs.n	800b356 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	1ad2      	subs	r2, r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff ff98 	bl	800b280 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800b350:	2300      	movs	r3, #0
 800b352:	61fb      	str	r3, [r7, #28]
 800b354:	e004      	b.n	800b360 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800b35c:	2301      	movs	r3, #1
 800b35e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800b360:	f7fe f94a 	bl	80095f8 <vPortExitCritical>

    return xReturn;
 800b364:	69fb      	ldr	r3, [r7, #28]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3720      	adds	r7, #32
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20002e28 	.word	0x20002e28
 800b374:	20002e3c 	.word	0x20002e3c

0800b378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800b37c:	4b03      	ldr	r3, [pc, #12]	; (800b38c <vTaskMissedYield+0x14>)
 800b37e:	2201      	movs	r2, #1
 800b380:	601a      	str	r2, [r3, #0]
}
 800b382:	bf00      	nop
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	20002e38 	.word	0x20002e38

0800b390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800b398:	f000 f852 	bl	800b440 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b39c:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <prvIdleTask+0x28>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d9f9      	bls.n	800b398 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800b3a4:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <prvIdleTask+0x2c>)
 800b3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800b3b4:	e7f0      	b.n	800b398 <prvIdleTask+0x8>
 800b3b6:	bf00      	nop
 800b3b8:	20002954 	.word	0x20002954
 800b3bc:	e000ed04 	.word	0xe000ed04

0800b3c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	607b      	str	r3, [r7, #4]
 800b3ca:	e00c      	b.n	800b3e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4a12      	ldr	r2, [pc, #72]	; (800b420 <prvInitialiseTaskLists+0x60>)
 800b3d8:	4413      	add	r3, r2
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fd fefa 	bl	80091d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	607b      	str	r3, [r7, #4]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b37      	cmp	r3, #55	; 0x37
 800b3ea:	d9ef      	bls.n	800b3cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800b3ec:	480d      	ldr	r0, [pc, #52]	; (800b424 <prvInitialiseTaskLists+0x64>)
 800b3ee:	f7fd fef1 	bl	80091d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800b3f2:	480d      	ldr	r0, [pc, #52]	; (800b428 <prvInitialiseTaskLists+0x68>)
 800b3f4:	f7fd feee 	bl	80091d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800b3f8:	480c      	ldr	r0, [pc, #48]	; (800b42c <prvInitialiseTaskLists+0x6c>)
 800b3fa:	f7fd feeb 	bl	80091d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800b3fe:	480c      	ldr	r0, [pc, #48]	; (800b430 <prvInitialiseTaskLists+0x70>)
 800b400:	f7fd fee8 	bl	80091d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800b404:	480b      	ldr	r0, [pc, #44]	; (800b434 <prvInitialiseTaskLists+0x74>)
 800b406:	f7fd fee5 	bl	80091d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800b40a:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <prvInitialiseTaskLists+0x78>)
 800b40c:	4a05      	ldr	r2, [pc, #20]	; (800b424 <prvInitialiseTaskLists+0x64>)
 800b40e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <prvInitialiseTaskLists+0x7c>)
 800b412:	4a05      	ldr	r2, [pc, #20]	; (800b428 <prvInitialiseTaskLists+0x68>)
 800b414:	601a      	str	r2, [r3, #0]
}
 800b416:	bf00      	nop
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20002954 	.word	0x20002954
 800b424:	20002db4 	.word	0x20002db4
 800b428:	20002dc8 	.word	0x20002dc8
 800b42c:	20002de4 	.word	0x20002de4
 800b430:	20002df8 	.word	0x20002df8
 800b434:	20002e10 	.word	0x20002e10
 800b438:	20002ddc 	.word	0x20002ddc
 800b43c:	20002de0 	.word	0x20002de0

0800b440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b446:	e019      	b.n	800b47c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800b448:	f7fe f8a6 	bl	8009598 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b44c:	4b10      	ldr	r3, [pc, #64]	; (800b490 <prvCheckTasksWaitingTermination+0x50>)
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3304      	adds	r3, #4
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fd ff45 	bl	80092e8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800b45e:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <prvCheckTasksWaitingTermination+0x54>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3b01      	subs	r3, #1
 800b464:	4a0b      	ldr	r2, [pc, #44]	; (800b494 <prvCheckTasksWaitingTermination+0x54>)
 800b466:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800b468:	4b0b      	ldr	r3, [pc, #44]	; (800b498 <prvCheckTasksWaitingTermination+0x58>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	4a0a      	ldr	r2, [pc, #40]	; (800b498 <prvCheckTasksWaitingTermination+0x58>)
 800b470:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800b472:	f7fe f8c1 	bl	80095f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f848 	bl	800b50c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <prvCheckTasksWaitingTermination+0x58>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e1      	bne.n	800b448 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	20002df8 	.word	0x20002df8
 800b494:	20002e24 	.word	0x20002e24
 800b498:	20002e0c 	.word	0x20002e0c

0800b49c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b4a8:	e005      	b.n	800b4b6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	607b      	str	r3, [r7, #4]
            ulCount++;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2ba5      	cmp	r3, #165	; 0xa5
 800b4bc:	d0f5      	beq.n	800b4aa <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	089b      	lsrs	r3, r3, #2
 800b4c2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	b29b      	uxth	r3, r3
    }
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d102      	bne.n	800b4e8 <uxTaskGetStackHighWaterMark+0x14>
 800b4e2:	4b09      	ldr	r3, [pc, #36]	; (800b508 <uxTaskGetStackHighWaterMark+0x34>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	e000      	b.n	800b4ea <uxTaskGetStackHighWaterMark+0x16>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f0:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b4f2:	6938      	ldr	r0, [r7, #16]
 800b4f4:	f7ff ffd2 	bl	800b49c <prvTaskCheckFreeStackSpace>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
    }
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20002950 	.word	0x20002950

0800b50c <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d108      	bne.n	800b530 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b522:	4618      	mov	r0, r3
 800b524:	f7fd fd38 	bl	8008f98 <vPortFree>
                    vPortFree( pxTCB );
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7fd fd35 	bl	8008f98 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b52e:	e018      	b.n	800b562 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b536:	2b01      	cmp	r3, #1
 800b538:	d103      	bne.n	800b542 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7fd fd2c 	bl	8008f98 <vPortFree>
    }
 800b540:	e00f      	b.n	800b562 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d00a      	beq.n	800b562 <prvDeleteTCB+0x56>
        __asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	60fb      	str	r3, [r7, #12]
    }
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <prvDeleteTCB+0x54>
    }
 800b562:	bf00      	nop
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b56c:	b480      	push	{r7}
 800b56e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b570:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <prvResetNextTaskUnblockTime+0x30>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d104      	bne.n	800b584 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b57a:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <prvResetNextTaskUnblockTime+0x34>)
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b580:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b582:	e005      	b.n	800b590 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b584:	4b05      	ldr	r3, [pc, #20]	; (800b59c <prvResetNextTaskUnblockTime+0x30>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <prvResetNextTaskUnblockTime+0x34>)
 800b58e:	6013      	str	r3, [r2, #0]
}
 800b590:	bf00      	nop
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20002ddc 	.word	0x20002ddc
 800b5a0:	20002e44 	.word	0x20002e44

0800b5a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b5aa:	4b0b      	ldr	r3, [pc, #44]	; (800b5d8 <xTaskGetSchedulerState+0x34>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	e008      	b.n	800b5ca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b8:	4b08      	ldr	r3, [pc, #32]	; (800b5dc <xTaskGetSchedulerState+0x38>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	607b      	str	r3, [r7, #4]
 800b5c4:	e001      	b.n	800b5ca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b5ca:	687b      	ldr	r3, [r7, #4]
    }
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	20002e30 	.word	0x20002e30
 800b5dc:	20002e4c 	.word	0x20002e4c

0800b5e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d05a      	beq.n	800b6ac <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	4b2f      	ldr	r3, [pc, #188]	; (800b6b8 <xTaskPriorityInherit+0xd8>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	429a      	cmp	r2, r3
 800b602:	d24a      	bcs.n	800b69a <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	db06      	blt.n	800b61a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b60c:	4b2a      	ldr	r3, [pc, #168]	; (800b6b8 <xTaskPriorityInherit+0xd8>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6959      	ldr	r1, [r3, #20]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4a24      	ldr	r2, [pc, #144]	; (800b6bc <xTaskPriorityInherit+0xdc>)
 800b62c:	4413      	add	r3, r2
 800b62e:	4299      	cmp	r1, r3
 800b630:	d126      	bne.n	800b680 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	3304      	adds	r3, #4
 800b636:	4618      	mov	r0, r3
 800b638:	f7fd fe56 	bl	80092e8 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b63c:	4b1e      	ldr	r3, [pc, #120]	; (800b6b8 <xTaskPriorityInherit+0xd8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 ff91 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b652:	4b1b      	ldr	r3, [pc, #108]	; (800b6c0 <xTaskPriorityInherit+0xe0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	429a      	cmp	r2, r3
 800b658:	d903      	bls.n	800b662 <xTaskPriorityInherit+0x82>
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65e:	4a18      	ldr	r2, [pc, #96]	; (800b6c0 <xTaskPriorityInherit+0xe0>)
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4a13      	ldr	r2, [pc, #76]	; (800b6bc <xTaskPriorityInherit+0xdc>)
 800b670:	441a      	add	r2, r3
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	3304      	adds	r3, #4
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f7fd fdd8 	bl	800922e <vListInsertEnd>
 800b67e:	e004      	b.n	800b68a <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b680:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <xTaskPriorityInherit+0xd8>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4619      	mov	r1, r3
 800b68e:	2049      	movs	r0, #73	; 0x49
 800b690:	f001 f9ee 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b694:	2301      	movs	r3, #1
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	e008      	b.n	800b6ac <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b69e:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <xTaskPriorityInherit+0xd8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d201      	bcs.n	800b6ac <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
    }
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20002950 	.word	0x20002950
 800b6bc:	20002954 	.word	0x20002954
 800b6c0:	20002e2c 	.word	0x20002e2c

0800b6c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d05f      	beq.n	800b79a <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b6da:	4b32      	ldr	r3, [pc, #200]	; (800b7a4 <xTaskPriorityDisinherit+0xe0>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d00a      	beq.n	800b6fa <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	60fb      	str	r3, [r7, #12]
    }
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60bb      	str	r3, [r7, #8]
    }
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b71c:	1e5a      	subs	r2, r3, #1
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d035      	beq.n	800b79a <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b732:	2b00      	cmp	r3, #0
 800b734:	d131      	bne.n	800b79a <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	3304      	adds	r3, #4
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fd fdd4 	bl	80092e8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4619      	mov	r1, r3
 800b744:	204a      	movs	r0, #74	; 0x4a
 800b746:	f001 f993 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	4618      	mov	r0, r3
 800b762:	f001 ff05 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <xTaskPriorityDisinherit+0xe4>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d903      	bls.n	800b77a <xTaskPriorityDisinherit+0xb6>
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	4a0c      	ldr	r2, [pc, #48]	; (800b7a8 <xTaskPriorityDisinherit+0xe4>)
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77e:	4613      	mov	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <xTaskPriorityDisinherit+0xe8>)
 800b788:	441a      	add	r2, r3
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fd fd4c 	bl	800922e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b796:	2301      	movs	r3, #1
 800b798:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b79a:	697b      	ldr	r3, [r7, #20]
    }
 800b79c:	4618      	mov	r0, r3
 800b79e:	3718      	adds	r7, #24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20002950 	.word	0x20002950
 800b7a8:	20002e2c 	.word	0x20002e2c
 800b7ac:	20002954 	.word	0x20002954

0800b7b0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d073      	beq.n	800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	60fb      	str	r3, [r7, #12]
    }
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d902      	bls.n	800b7f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	61fb      	str	r3, [r7, #28]
 800b7f4:	e002      	b.n	800b7fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7fa:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	69fa      	ldr	r2, [r7, #28]
 800b802:	429a      	cmp	r2, r3
 800b804:	d054      	beq.n	800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d14f      	bne.n	800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b810:	4b29      	ldr	r3, [pc, #164]	; (800b8b8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	69ba      	ldr	r2, [r7, #24]
 800b816:	429a      	cmp	r2, r3
 800b818:	d10a      	bne.n	800b830 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	60bb      	str	r3, [r7, #8]
    }
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4619      	mov	r1, r3
 800b834:	204a      	movs	r0, #74	; 0x4a
 800b836:	f001 f91b 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	69fa      	ldr	r2, [r7, #28]
 800b844:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	db04      	blt.n	800b858 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	6959      	ldr	r1, [r3, #20]
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4a15      	ldr	r2, [pc, #84]	; (800b8bc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b868:	4413      	add	r3, r2
 800b86a:	4299      	cmp	r1, r3
 800b86c:	d120      	bne.n	800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	3304      	adds	r3, #4
 800b872:	4618      	mov	r0, r3
 800b874:	f7fd fd38 	bl	80092e8 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 fe78 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b884:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d903      	bls.n	800b894 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	4a0b      	ldr	r2, [pc, #44]	; (800b8c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4a06      	ldr	r2, [pc, #24]	; (800b8bc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b8a2:	441a      	add	r2, r3
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f7fd fcbf 	bl	800922e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b8b0:	bf00      	nop
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	20002950 	.word	0x20002950
 800b8bc:	20002954 	.word	0x20002954
 800b8c0:	20002e2c 	.word	0x20002e2c

0800b8c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b8c4:	b480      	push	{r7}
 800b8c6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b8c8:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8d6:	3201      	adds	r2, #1
 800b8d8:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800b8da:	4b03      	ldr	r3, [pc, #12]	; (800b8e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
    }
 800b8de:	4618      	mov	r0, r3
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	20002950 	.word	0x20002950

0800b8ec <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	613b      	str	r3, [r7, #16]
    }
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 800b914:	f7fd fe40 	bl	8009598 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800b918:	4b2b      	ldr	r3, [pc, #172]	; (800b9c8 <ulTaskGenericNotifyTake+0xdc>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3314      	adds	r3, #20
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4413      	add	r3, r2
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d115      	bne.n	800b956 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800b92a:	4b27      	ldr	r3, [pc, #156]	; (800b9c8 <ulTaskGenericNotifyTake+0xdc>)
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	3358      	adds	r3, #88	; 0x58
 800b934:	2201      	movs	r2, #1
 800b936:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00b      	beq.n	800b956 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b93e:	2101      	movs	r1, #1
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f845 	bl	800b9d0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800b946:	4b21      	ldr	r3, [pc, #132]	; (800b9cc <ulTaskGenericNotifyTake+0xe0>)
 800b948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b956:	f7fd fe4f 	bl	80095f8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800b95a:	f7fd fe1d 	bl	8009598 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	4619      	mov	r1, r3
 800b964:	2042      	movs	r0, #66	; 0x42
 800b966:	f001 f8bf 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800b96a:	4b17      	ldr	r3, [pc, #92]	; (800b9c8 <ulTaskGenericNotifyTake+0xdc>)
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3314      	adds	r3, #20
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d014      	beq.n	800b9aa <ulTaskGenericNotifyTake+0xbe>
            {
                if( xClearCountOnExit != pdFALSE )
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d008      	beq.n	800b998 <ulTaskGenericNotifyTake+0xac>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800b986:	4b10      	ldr	r3, [pc, #64]	; (800b9c8 <ulTaskGenericNotifyTake+0xdc>)
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3314      	adds	r3, #20
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	2200      	movs	r2, #0
 800b994:	605a      	str	r2, [r3, #4]
 800b996:	e008      	b.n	800b9aa <ulTaskGenericNotifyTake+0xbe>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800b998:	4b0b      	ldr	r3, [pc, #44]	; (800b9c8 <ulTaskGenericNotifyTake+0xdc>)
 800b99a:	6819      	ldr	r1, [r3, #0]
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	1e5a      	subs	r2, r3, #1
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3314      	adds	r3, #20
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	440b      	add	r3, r1
 800b9a8:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800b9aa:	4b07      	ldr	r3, [pc, #28]	; (800b9c8 <ulTaskGenericNotifyTake+0xdc>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	3358      	adds	r3, #88	; 0x58
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800b9b8:	f7fd fe1e 	bl	80095f8 <vPortExitCritical>

        return ulReturn;
 800b9bc:	697b      	ldr	r3, [r7, #20]
    }
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20002950 	.word	0x20002950
 800b9cc:	e000ed04 	.word	0xe000ed04

0800b9d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b9da:	4b27      	ldr	r3, [pc, #156]	; (800ba78 <prvAddCurrentTaskToDelayedList+0xa8>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9e0:	4b26      	ldr	r3, [pc, #152]	; (800ba7c <prvAddCurrentTaskToDelayedList+0xac>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fd fc7e 	bl	80092e8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9f2:	d10a      	bne.n	800ba0a <prvAddCurrentTaskToDelayedList+0x3a>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d007      	beq.n	800ba0a <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9fa:	4b20      	ldr	r3, [pc, #128]	; (800ba7c <prvAddCurrentTaskToDelayedList+0xac>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	4619      	mov	r1, r3
 800ba02:	481f      	ldr	r0, [pc, #124]	; (800ba80 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba04:	f7fd fc13 	bl	800922e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ba08:	e032      	b.n	800ba70 <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4413      	add	r3, r2
 800ba10:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba12:	4b1a      	ldr	r3, [pc, #104]	; (800ba7c <prvAddCurrentTaskToDelayedList+0xac>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d20f      	bcs.n	800ba42 <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800ba22:	4b16      	ldr	r3, [pc, #88]	; (800ba7c <prvAddCurrentTaskToDelayedList+0xac>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2104      	movs	r1, #4
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 fde3 	bl	800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba2e:	4b15      	ldr	r3, [pc, #84]	; (800ba84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <prvAddCurrentTaskToDelayedList+0xac>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7fd fc1b 	bl	8009276 <vListInsert>
}
 800ba40:	e016      	b.n	800ba70 <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 800ba42:	4b0e      	ldr	r3, [pc, #56]	; (800ba7c <prvAddCurrentTaskToDelayedList+0xac>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2104      	movs	r1, #4
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 fdd3 	bl	800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <prvAddCurrentTaskToDelayedList+0xac>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3304      	adds	r3, #4
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	f7fd fc0b 	bl	8009276 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d202      	bcs.n	800ba70 <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800ba6a:	4a08      	ldr	r2, [pc, #32]	; (800ba8c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	6013      	str	r3, [r2, #0]
}
 800ba70:	bf00      	nop
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20002e28 	.word	0x20002e28
 800ba7c:	20002950 	.word	0x20002950
 800ba80:	20002e10 	.word	0x20002e10
 800ba84:	20002de0 	.word	0x20002de0
 800ba88:	20002ddc 	.word	0x20002ddc
 800ba8c:	20002e44 	.word	0x20002e44

0800ba90 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800ba9a:	f000 fb63 	bl	800c164 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800ba9e:	4b1c      	ldr	r3, [pc, #112]	; (800bb10 <xTimerCreateTimerTask+0x80>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d021      	beq.n	800baea <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800baae:	1d3a      	adds	r2, r7, #4
 800bab0:	f107 0108 	add.w	r1, r7, #8
 800bab4:	f107 030c 	add.w	r3, r7, #12
 800bab8:	4618      	mov	r0, r3
 800baba:	f005 fa55 	bl	8010f68 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800babe:	6879      	ldr	r1, [r7, #4]
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	9202      	str	r2, [sp, #8]
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	2305      	movs	r3, #5
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	2300      	movs	r3, #0
 800bace:	460a      	mov	r2, r1
 800bad0:	4910      	ldr	r1, [pc, #64]	; (800bb14 <xTimerCreateTimerTask+0x84>)
 800bad2:	4811      	ldr	r0, [pc, #68]	; (800bb18 <xTimerCreateTimerTask+0x88>)
 800bad4:	f7fe fe2c 	bl	800a730 <xTaskCreateStatic>
 800bad8:	4603      	mov	r3, r0
 800bada:	4a10      	ldr	r2, [pc, #64]	; (800bb1c <xTimerCreateTimerTask+0x8c>)
 800badc:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800bade:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <xTimerCreateTimerTask+0x8c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800bae6:	2301      	movs	r3, #1
 800bae8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	613b      	str	r3, [r7, #16]
    }
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800bb06:	697b      	ldr	r3, [r7, #20]
    }
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20002e80 	.word	0x20002e80
 800bb14:	08015320 	.word	0x08015320
 800bb18:	0800bd0d 	.word	0x0800bd0d
 800bb1c:	20002e84 	.word	0x20002e84

0800bb20 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bb2e:	202c      	movs	r0, #44	; 0x2c
 800bb30:	f7fd f94e 	bl	8008dd0 <pvPortMalloc>
 800bb34:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00d      	beq.n	800bb58 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	9301      	str	r3, [sp, #4]
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 f805 	bl	800bb62 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800bb58:	697b      	ldr	r3, [r7, #20]
        }
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b086      	sub	sp, #24
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	607a      	str	r2, [r7, #4]
 800bb6e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	617b      	str	r3, [r7, #20]
    }
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d01e      	beq.n	800bbd0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800bb92:	f000 fae7 	bl	800c164 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	6a3a      	ldr	r2, [r7, #32]
 800bbac:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd fb2e 	bl	8009214 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d008      	beq.n	800bbd0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbc4:	f043 0304 	orr.w	r3, r3, #4
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800bbd0:	bf00      	nop
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08a      	sub	sp, #40	; 0x28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xTimerGenericCommand+0x2e>
        __asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	623b      	str	r3, [r7, #32]
    }
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800bc06:	4b1a      	ldr	r3, [pc, #104]	; (800bc70 <xTimerGenericCommand+0x98>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d02a      	beq.n	800bc64 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b05      	cmp	r3, #5
 800bc1e:	dc18      	bgt.n	800bc52 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc20:	f7ff fcc0 	bl	800b5a4 <xTaskGetSchedulerState>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d109      	bne.n	800bc3e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc2a:	4b11      	ldr	r3, [pc, #68]	; (800bc70 <xTimerGenericCommand+0x98>)
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	f107 0110 	add.w	r1, r7, #16
 800bc32:	2300      	movs	r3, #0
 800bc34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc36:	f7fd ffbd 	bl	8009bb4 <xQueueGenericSend>
 800bc3a:	6278      	str	r0, [r7, #36]	; 0x24
 800bc3c:	e012      	b.n	800bc64 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc3e:	4b0c      	ldr	r3, [pc, #48]	; (800bc70 <xTimerGenericCommand+0x98>)
 800bc40:	6818      	ldr	r0, [r3, #0]
 800bc42:	f107 0110 	add.w	r1, r7, #16
 800bc46:	2300      	movs	r3, #0
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f7fd ffb3 	bl	8009bb4 <xQueueGenericSend>
 800bc4e:	6278      	str	r0, [r7, #36]	; 0x24
 800bc50:	e008      	b.n	800bc64 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc52:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <xTimerGenericCommand+0x98>)
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	f107 0110 	add.w	r1, r7, #16
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	f7fe f8cf 	bl	8009e00 <xQueueGenericSendFromISR>
 800bc62:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800bc66:	4618      	mov	r0, r3
 800bc68:	3728      	adds	r7, #40	; 0x28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20002e80 	.word	0x20002e80

0800bc74 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af02      	add	r7, sp, #8
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc7e:	4b22      	ldr	r3, [pc, #136]	; (800bd08 <prvProcessExpiredTimer+0x94>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fd fb2b 	bl	80092e8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc98:	f003 0304 	and.w	r3, r3, #4
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d022      	beq.n	800bce6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	699a      	ldr	r2, [r3, #24]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	18d1      	adds	r1, r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	6978      	ldr	r0, [r7, #20]
 800bcae:	f000 f8d1 	bl	800be54 <prvInsertTimerInActiveList>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d01f      	beq.n	800bcf8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcb8:	2300      	movs	r3, #0
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	6978      	ldr	r0, [r7, #20]
 800bcc4:	f7ff ff88 	bl	800bbd8 <xTimerGenericCommand>
 800bcc8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d113      	bne.n	800bcf8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	60fb      	str	r3, [r7, #12]
    }
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcec:	f023 0301 	bic.w	r3, r3, #1
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	6a1b      	ldr	r3, [r3, #32]
 800bcfc:	6978      	ldr	r0, [r7, #20]
 800bcfe:	4798      	blx	r3
    }
 800bd00:	bf00      	nop
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20002e78 	.word	0x20002e78

0800bd0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd14:	f107 0308 	add.w	r3, r7, #8
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 f857 	bl	800bdcc <prvGetNextExpireTime>
 800bd1e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	4619      	mov	r1, r3
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 f803 	bl	800bd30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800bd2a:	f000 f8d5 	bl	800bed8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd2e:	e7f1      	b.n	800bd14 <prvTimerTask+0x8>

0800bd30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800bd3a:	f7fe ffc5 	bl	800acc8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd3e:	f107 0308 	add.w	r3, r7, #8
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 f866 	bl	800be14 <prvSampleTimeNow>
 800bd48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d130      	bne.n	800bdb2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10a      	bne.n	800bd6c <prvProcessTimerOrBlockTask+0x3c>
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d806      	bhi.n	800bd6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800bd5e:	f7fe ffc1 	bl	800ace4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd62:	68f9      	ldr	r1, [r7, #12]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7ff ff85 	bl	800bc74 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800bd6a:	e024      	b.n	800bdb6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d008      	beq.n	800bd84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd72:	4b13      	ldr	r3, [pc, #76]	; (800bdc0 <prvProcessTimerOrBlockTask+0x90>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <prvProcessTimerOrBlockTask+0x50>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e000      	b.n	800bd82 <prvProcessTimerOrBlockTask+0x52>
 800bd80:	2300      	movs	r3, #0
 800bd82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd84:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <prvProcessTimerOrBlockTask+0x94>)
 800bd86:	6818      	ldr	r0, [r3, #0]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4619      	mov	r1, r3
 800bd92:	f7fe fc99 	bl	800a6c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800bd96:	f7fe ffa5 	bl	800ace4 <xTaskResumeAll>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800bda0:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <prvProcessTimerOrBlockTask+0x98>)
 800bda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	f3bf 8f6f 	isb	sy
    }
 800bdb0:	e001      	b.n	800bdb6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800bdb2:	f7fe ff97 	bl	800ace4 <xTaskResumeAll>
    }
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20002e7c 	.word	0x20002e7c
 800bdc4:	20002e80 	.word	0x20002e80
 800bdc8:	e000ed04 	.word	0xe000ed04

0800bdcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdd4:	4b0e      	ldr	r3, [pc, #56]	; (800be10 <prvGetNextExpireTime+0x44>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <prvGetNextExpireTime+0x16>
 800bdde:	2201      	movs	r2, #1
 800bde0:	e000      	b.n	800bde4 <prvGetNextExpireTime+0x18>
 800bde2:	2200      	movs	r2, #0
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d105      	bne.n	800bdfc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdf0:	4b07      	ldr	r3, [pc, #28]	; (800be10 <prvGetNextExpireTime+0x44>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	e001      	b.n	800be00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800be00:	68fb      	ldr	r3, [r7, #12]
    }
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	20002e78 	.word	0x20002e78

0800be14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800be1c:	f7ff f804 	bl	800ae28 <xTaskGetTickCount>
 800be20:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800be22:	4b0b      	ldr	r3, [pc, #44]	; (800be50 <prvSampleTimeNow+0x3c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d205      	bcs.n	800be38 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800be2c:	f000 f936 	bl	800c09c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	e002      	b.n	800be3e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800be3e:	4a04      	ldr	r2, [pc, #16]	; (800be50 <prvSampleTimeNow+0x3c>)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800be44:	68fb      	ldr	r3, [r7, #12]
    }
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20002e88 	.word	0x20002e88

0800be54 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800be62:	2300      	movs	r3, #0
 800be64:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	429a      	cmp	r2, r3
 800be78:	d812      	bhi.n	800bea0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	1ad2      	subs	r2, r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	429a      	cmp	r2, r3
 800be86:	d302      	bcc.n	800be8e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e01b      	b.n	800bec6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be8e:	4b10      	ldr	r3, [pc, #64]	; (800bed0 <prvInsertTimerInActiveList+0x7c>)
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3304      	adds	r3, #4
 800be96:	4619      	mov	r1, r3
 800be98:	4610      	mov	r0, r2
 800be9a:	f7fd f9ec 	bl	8009276 <vListInsert>
 800be9e:	e012      	b.n	800bec6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d206      	bcs.n	800beb6 <prvInsertTimerInActiveList+0x62>
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d302      	bcc.n	800beb6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800beb0:	2301      	movs	r3, #1
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	e007      	b.n	800bec6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beb6:	4b07      	ldr	r3, [pc, #28]	; (800bed4 <prvInsertTimerInActiveList+0x80>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3304      	adds	r3, #4
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7fd f9d8 	bl	8009276 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800bec6:	697b      	ldr	r3, [r7, #20]
    }
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20002e7c 	.word	0x20002e7c
 800bed4:	20002e78 	.word	0x20002e78

0800bed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08e      	sub	sp, #56	; 0x38
 800bedc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bede:	e0ca      	b.n	800c076 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	da18      	bge.n	800bf18 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bee6:	1d3b      	adds	r3, r7, #4
 800bee8:	3304      	adds	r3, #4
 800beea:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <prvProcessReceivedCommands+0x30>
        __asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	61fb      	str	r3, [r7, #28]
    }
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf0e:	6850      	ldr	r0, [r2, #4]
 800bf10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf12:	6892      	ldr	r2, [r2, #8]
 800bf14:	4611      	mov	r1, r2
 800bf16:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f2c0 80aa 	blt.w	800c074 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	695b      	ldr	r3, [r3, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fd f9d9 	bl	80092e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf36:	463b      	mov	r3, r7
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff ff6b 	bl	800be14 <prvSampleTimeNow>
 800bf3e:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b09      	cmp	r3, #9
 800bf44:	f200 8097 	bhi.w	800c076 <prvProcessReceivedCommands+0x19e>
 800bf48:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <prvProcessReceivedCommands+0x78>)
 800bf4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4e:	bf00      	nop
 800bf50:	0800bf79 	.word	0x0800bf79
 800bf54:	0800bf79 	.word	0x0800bf79
 800bf58:	0800bf79 	.word	0x0800bf79
 800bf5c:	0800bfed 	.word	0x0800bfed
 800bf60:	0800c001 	.word	0x0800c001
 800bf64:	0800c04b 	.word	0x0800c04b
 800bf68:	0800bf79 	.word	0x0800bf79
 800bf6c:	0800bf79 	.word	0x0800bf79
 800bf70:	0800bfed 	.word	0x0800bfed
 800bf74:	0800c001 	.word	0x0800c001
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf7e:	f043 0301 	orr.w	r3, r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	18d1      	adds	r1, r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf98:	f7ff ff5c 	bl	800be54 <prvInsertTimerInActiveList>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d069      	beq.n	800c076 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfb0:	f003 0304 	and.w	r3, r3, #4
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d05e      	beq.n	800c076 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	441a      	add	r2, r3
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfca:	f7ff fe05 	bl	800bbd8 <xTimerGenericCommand>
 800bfce:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d14f      	bne.n	800c076 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	61bb      	str	r3, [r7, #24]
    }
 800bfe8:	bf00      	nop
 800bfea:	e7fe      	b.n	800bfea <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bff2:	f023 0301 	bic.w	r3, r3, #1
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800bffe:	e03a      	b.n	800c076 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c006:	f043 0301 	orr.w	r3, r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c016:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	617b      	str	r3, [r7, #20]
    }
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	699a      	ldr	r2, [r3, #24]
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	18d1      	adds	r1, r2, r3
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c044:	f7ff ff06 	bl	800be54 <prvInsertTimerInActiveList>
                        break;
 800c048:	e015      	b.n	800c076 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d103      	bne.n	800c060 <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 800c058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c05a:	f7fc ff9d 	bl	8008f98 <vPortFree>
 800c05e:	e00a      	b.n	800c076 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c066:	f023 0301 	bic.w	r3, r3, #1
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c072:	e000      	b.n	800c076 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800c074:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c076:	4b08      	ldr	r3, [pc, #32]	; (800c098 <prvProcessReceivedCommands+0x1c0>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	1d39      	adds	r1, r7, #4
 800c07c:	2200      	movs	r2, #0
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fd ff7c 	bl	8009f7c <xQueueReceive>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	f47f af2a 	bne.w	800bee0 <prvProcessReceivedCommands+0x8>
        }
    }
 800c08c:	bf00      	nop
 800c08e:	bf00      	nop
 800c090:	3730      	adds	r7, #48	; 0x30
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20002e80 	.word	0x20002e80

0800c09c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0a2:	e048      	b.n	800c136 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0a4:	4b2d      	ldr	r3, [pc, #180]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ae:	4b2b      	ldr	r3, [pc, #172]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fd f913 	bl	80092e8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d02e      	beq.n	800c136 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	4413      	add	r3, r2
 800c0e0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d90e      	bls.n	800c108 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0f6:	4b19      	ldr	r3, [pc, #100]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7fd f8b8 	bl	8009276 <vListInsert>
 800c106:	e016      	b.n	800c136 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c108:	2300      	movs	r3, #0
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	2300      	movs	r3, #0
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	2100      	movs	r1, #0
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7ff fd60 	bl	800bbd8 <xTimerGenericCommand>
 800c118:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10a      	bne.n	800c136 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	603b      	str	r3, [r7, #0]
    }
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1b1      	bne.n	800c0a4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800c140:	4b06      	ldr	r3, [pc, #24]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800c146:	4b06      	ldr	r3, [pc, #24]	; (800c160 <prvSwitchTimerLists+0xc4>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a04      	ldr	r2, [pc, #16]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c14c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c14e:	4a04      	ldr	r2, [pc, #16]	; (800c160 <prvSwitchTimerLists+0xc4>)
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	6013      	str	r3, [r2, #0]
    }
 800c154:	bf00      	nop
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	20002e78 	.word	0x20002e78
 800c160:	20002e7c 	.word	0x20002e7c

0800c164 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c16a:	f7fd fa15 	bl	8009598 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c16e:	4b15      	ldr	r3, [pc, #84]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d120      	bne.n	800c1b8 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800c176:	4814      	ldr	r0, [pc, #80]	; (800c1c8 <prvCheckForValidListAndQueue+0x64>)
 800c178:	f7fd f82c 	bl	80091d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c17c:	4813      	ldr	r0, [pc, #76]	; (800c1cc <prvCheckForValidListAndQueue+0x68>)
 800c17e:	f7fd f829 	bl	80091d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c182:	4b13      	ldr	r3, [pc, #76]	; (800c1d0 <prvCheckForValidListAndQueue+0x6c>)
 800c184:	4a10      	ldr	r2, [pc, #64]	; (800c1c8 <prvCheckForValidListAndQueue+0x64>)
 800c186:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c188:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <prvCheckForValidListAndQueue+0x70>)
 800c18a:	4a10      	ldr	r2, [pc, #64]	; (800c1cc <prvCheckForValidListAndQueue+0x68>)
 800c18c:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c18e:	2300      	movs	r3, #0
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <prvCheckForValidListAndQueue+0x74>)
 800c194:	4a11      	ldr	r2, [pc, #68]	; (800c1dc <prvCheckForValidListAndQueue+0x78>)
 800c196:	2110      	movs	r1, #16
 800c198:	200a      	movs	r0, #10
 800c19a:	f7fd fbd5 	bl	8009948 <xQueueGenericCreateStatic>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4a08      	ldr	r2, [pc, #32]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c1a2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800c1a4:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d005      	beq.n	800c1b8 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1ac:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	490b      	ldr	r1, [pc, #44]	; (800c1e0 <prvCheckForValidListAndQueue+0x7c>)
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe fa56 	bl	800a664 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c1b8:	f7fd fa1e 	bl	80095f8 <vPortExitCritical>
    }
 800c1bc:	bf00      	nop
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20002e80 	.word	0x20002e80
 800c1c8:	20002e50 	.word	0x20002e50
 800c1cc:	20002e64 	.word	0x20002e64
 800c1d0:	20002e78 	.word	0x20002e78
 800c1d4:	20002e7c 	.word	0x20002e7c
 800c1d8:	20002f2c 	.word	0x20002f2c
 800c1dc:	20002e8c 	.word	0x20002e8c
 800c1e0:	08015328 	.word	0x08015328

0800c1e4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800c1ea:	4b24      	ldr	r3, [pc, #144]	; (800c27c <_DoInit+0x98>)
 800c1ec:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2203      	movs	r2, #3
 800c1f2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2203      	movs	r2, #3
 800c1f8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a20      	ldr	r2, [pc, #128]	; (800c280 <_DoInit+0x9c>)
 800c1fe:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a20      	ldr	r2, [pc, #128]	; (800c284 <_DoInit+0xa0>)
 800c204:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c20c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a17      	ldr	r2, [pc, #92]	; (800c280 <_DoInit+0x9c>)
 800c224:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a17      	ldr	r2, [pc, #92]	; (800c288 <_DoInit+0xa4>)
 800c22a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2210      	movs	r2, #16
 800c230:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3307      	adds	r3, #7
 800c248:	4a10      	ldr	r2, [pc, #64]	; (800c28c <_DoInit+0xa8>)
 800c24a:	6810      	ldr	r0, [r2, #0]
 800c24c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c24e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a0e      	ldr	r2, [pc, #56]	; (800c290 <_DoInit+0xac>)
 800c256:	6810      	ldr	r0, [r2, #0]
 800c258:	6018      	str	r0, [r3, #0]
 800c25a:	8891      	ldrh	r1, [r2, #4]
 800c25c:	7992      	ldrb	r2, [r2, #6]
 800c25e:	8099      	strh	r1, [r3, #4]
 800c260:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c262:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2220      	movs	r2, #32
 800c26a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c26c:	f3bf 8f5f 	dmb	sy
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	20002f7c 	.word	0x20002f7c
 800c280:	08015330 	.word	0x08015330
 800c284:	20003024 	.word	0x20003024
 800c288:	20004024 	.word	0x20004024
 800c28c:	0801533c 	.word	0x0801533c
 800c290:	08015340 	.word	0x08015340

0800c294 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c294:	b580      	push	{r7, lr}
 800c296:	b08c      	sub	sp, #48	; 0x30
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c2a0:	4b3e      	ldr	r3, [pc, #248]	; (800c39c <SEGGER_RTT_ReadNoLock+0x108>)
 800c2a2:	623b      	str	r3, [r7, #32]
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <SEGGER_RTT_ReadNoLock+0x1e>
 800c2ae:	f7ff ff99 	bl	800c1e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	4413      	add	r3, r2
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	3360      	adds	r3, #96	; 0x60
 800c2be:	4a37      	ldr	r2, [pc, #220]	; (800c39c <SEGGER_RTT_ReadNoLock+0x108>)
 800c2c0:	4413      	add	r3, r2
 800c2c2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d92b      	bls.n	800c338 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	bf28      	it	cs
 800c2f2:	4613      	movcs	r3, r2
 800c2f4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	685a      	ldr	r2, [r3, #4]
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	4413      	add	r3, r2
 800c2fe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c300:	697a      	ldr	r2, [r7, #20]
 800c302:	6939      	ldr	r1, [r7, #16]
 800c304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c306:	f008 fabf 	bl	8014888 <memcpy>
    NumBytesRead += NumBytesRem;
 800c30a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	4413      	add	r3, r2
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	4413      	add	r3, r2
 800c318:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	4413      	add	r3, r2
 800c328:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c330:	429a      	cmp	r2, r3
 800c332:	d101      	bne.n	800c338 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c334:	2300      	movs	r3, #0
 800c336:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c338:	69ba      	ldr	r2, [r7, #24]
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c340:	697a      	ldr	r2, [r7, #20]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4293      	cmp	r3, r2
 800c346:	bf28      	it	cs
 800c348:	4613      	movcs	r3, r2
 800c34a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d019      	beq.n	800c386 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	4413      	add	r3, r2
 800c35a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	6939      	ldr	r1, [r7, #16]
 800c360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c362:	f008 fa91 	bl	8014888 <memcpy>
    NumBytesRead += NumBytesRem;
 800c366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	4413      	add	r3, r2
 800c36c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	4413      	add	r3, r2
 800c374:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	4413      	add	r3, r2
 800c384:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c390:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c394:	4618      	mov	r0, r3
 800c396:	3730      	adds	r7, #48	; 0x30
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	20002f7c 	.word	0x20002f7c

0800c3a0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c3ae:	4b3d      	ldr	r3, [pc, #244]	; (800c4a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c3b0:	61bb      	str	r3, [r7, #24]
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c3bc:	f7ff ff12 	bl	800c1e4 <_DoInit>
  SEGGER_RTT_LOCK();
 800c3c0:	f3ef 8311 	mrs	r3, BASEPRI
 800c3c4:	f04f 0120 	mov.w	r1, #32
 800c3c8:	f381 8811 	msr	BASEPRI, r1
 800c3cc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c3ce:	4b35      	ldr	r3, [pc, #212]	; (800c4a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c3d0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c3d6:	6939      	ldr	r1, [r7, #16]
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	1c5a      	adds	r2, r3, #1
 800c3dc:	4613      	mov	r3, r2
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	4413      	add	r3, r2
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	440b      	add	r3, r1
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d008      	beq.n	800c400 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	dbeb      	blt.n	800c3d6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800c3fe:	e000      	b.n	800c402 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c400:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	429a      	cmp	r2, r3
 800c40a:	da3f      	bge.n	800c48c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c40c:	6939      	ldr	r1, [r7, #16]
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	4613      	mov	r3, r2
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4413      	add	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	440b      	add	r3, r1
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c420:	6939      	ldr	r1, [r7, #16]
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	4613      	mov	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	440b      	add	r3, r1
 800c430:	3304      	adds	r3, #4
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c436:	6939      	ldr	r1, [r7, #16]
 800c438:	69fa      	ldr	r2, [r7, #28]
 800c43a:	4613      	mov	r3, r2
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	4413      	add	r3, r2
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	440b      	add	r3, r1
 800c444:	3320      	adds	r3, #32
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c44a:	6939      	ldr	r1, [r7, #16]
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	4613      	mov	r3, r2
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	4413      	add	r3, r2
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	440b      	add	r3, r1
 800c458:	3328      	adds	r3, #40	; 0x28
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c45e:	6939      	ldr	r1, [r7, #16]
 800c460:	69fa      	ldr	r2, [r7, #28]
 800c462:	4613      	mov	r3, r2
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	4413      	add	r3, r2
 800c468:	00db      	lsls	r3, r3, #3
 800c46a:	440b      	add	r3, r1
 800c46c:	3324      	adds	r3, #36	; 0x24
 800c46e:	2200      	movs	r2, #0
 800c470:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c472:	6939      	ldr	r1, [r7, #16]
 800c474:	69fa      	ldr	r2, [r7, #28]
 800c476:	4613      	mov	r3, r2
 800c478:	005b      	lsls	r3, r3, #1
 800c47a:	4413      	add	r3, r2
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	440b      	add	r3, r1
 800c480:	332c      	adds	r3, #44	; 0x2c
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c486:	f3bf 8f5f 	dmb	sy
 800c48a:	e002      	b.n	800c492 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c48c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c490:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c498:	69fb      	ldr	r3, [r7, #28]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3720      	adds	r7, #32
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20002f7c 	.word	0x20002f7c

0800c4a8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08a      	sub	sp, #40	; 0x28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800c4b6:	4b21      	ldr	r3, [pc, #132]	; (800c53c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c4b8:	623b      	str	r3, [r7, #32]
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c4c4:	f7ff fe8e 	bl	800c1e4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c4c8:	4b1c      	ldr	r3, [pc, #112]	; (800c53c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c4ca:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d82c      	bhi.n	800c52c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800c4d2:	f3ef 8311 	mrs	r3, BASEPRI
 800c4d6:	f04f 0120 	mov.w	r1, #32
 800c4da:	f381 8811 	msr	BASEPRI, r1
 800c4de:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	3360      	adds	r3, #96	; 0x60
 800c4ec:	69fa      	ldr	r2, [r7, #28]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00e      	beq.n	800c516 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2200      	movs	r2, #0
 800c50e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2200      	movs	r2, #0
 800c514:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c51c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c526:	2300      	movs	r3, #0
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
 800c52a:	e002      	b.n	800c532 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c530:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c534:	4618      	mov	r0, r3
 800c536:	3728      	adds	r7, #40	; 0x28
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	20002f7c 	.word	0x20002f7c

0800c540 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c540:	b480      	push	{r7}
 800c542:	b087      	sub	sp, #28
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00f      	beq.n	800c576 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800c556:	e002      	b.n	800c55e <_EncodeStr+0x1e>
      Len++;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	3301      	adds	r3, #1
 800c55c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	4413      	add	r3, r2
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1f6      	bne.n	800c558 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d901      	bls.n	800c576 <_EncodeStr+0x36>
      Len = Limit;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	2bfe      	cmp	r3, #254	; 0xfe
 800c57a:	d806      	bhi.n	800c58a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	60fa      	str	r2, [r7, #12]
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	b2d2      	uxtb	r2, r2
 800c586:	701a      	strb	r2, [r3, #0]
 800c588:	e011      	b.n	800c5ae <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	1c5a      	adds	r2, r3, #1
 800c58e:	60fa      	str	r2, [r7, #12]
 800c590:	22ff      	movs	r2, #255	; 0xff
 800c592:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	60fa      	str	r2, [r7, #12]
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	0a19      	lsrs	r1, r3, #8
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	60fa      	str	r2, [r7, #12]
 800c5aa:	b2ca      	uxtb	r2, r1
 800c5ac:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c5b2:	e00a      	b.n	800c5ca <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	1c53      	adds	r3, r2, #1
 800c5b8:	60bb      	str	r3, [r7, #8]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	1c59      	adds	r1, r3, #1
 800c5be:	60f9      	str	r1, [r7, #12]
 800c5c0:	7812      	ldrb	r2, [r2, #0]
 800c5c2:	701a      	strb	r2, [r3, #0]
    n++;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d3f0      	bcc.n	800c5b4 <_EncodeStr+0x74>
  }
  return pPayload;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	371c      	adds	r7, #28
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3304      	adds	r3, #4
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c5fe:	4b36      	ldr	r3, [pc, #216]	; (800c6d8 <_HandleIncomingPacket+0xe0>)
 800c600:	7e1b      	ldrb	r3, [r3, #24]
 800c602:	4618      	mov	r0, r3
 800c604:	1cfb      	adds	r3, r7, #3
 800c606:	2201      	movs	r2, #1
 800c608:	4619      	mov	r1, r3
 800c60a:	f7ff fe43 	bl	800c294 <SEGGER_RTT_ReadNoLock>
 800c60e:	4603      	mov	r3, r0
 800c610:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd54      	ble.n	800c6c2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800c618:	78fb      	ldrb	r3, [r7, #3]
 800c61a:	2b80      	cmp	r3, #128	; 0x80
 800c61c:	d032      	beq.n	800c684 <_HandleIncomingPacket+0x8c>
 800c61e:	2b80      	cmp	r3, #128	; 0x80
 800c620:	dc42      	bgt.n	800c6a8 <_HandleIncomingPacket+0xb0>
 800c622:	2b07      	cmp	r3, #7
 800c624:	dc16      	bgt.n	800c654 <_HandleIncomingPacket+0x5c>
 800c626:	2b00      	cmp	r3, #0
 800c628:	dd3e      	ble.n	800c6a8 <_HandleIncomingPacket+0xb0>
 800c62a:	3b01      	subs	r3, #1
 800c62c:	2b06      	cmp	r3, #6
 800c62e:	d83b      	bhi.n	800c6a8 <_HandleIncomingPacket+0xb0>
 800c630:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <_HandleIncomingPacket+0x40>)
 800c632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c636:	bf00      	nop
 800c638:	0800c65b 	.word	0x0800c65b
 800c63c:	0800c661 	.word	0x0800c661
 800c640:	0800c667 	.word	0x0800c667
 800c644:	0800c66d 	.word	0x0800c66d
 800c648:	0800c673 	.word	0x0800c673
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	0800c67f 	.word	0x0800c67f
 800c654:	2b7f      	cmp	r3, #127	; 0x7f
 800c656:	d036      	beq.n	800c6c6 <_HandleIncomingPacket+0xce>
 800c658:	e026      	b.n	800c6a8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c65a:	f000 fba7 	bl	800cdac <SEGGER_SYSVIEW_Start>
      break;
 800c65e:	e037      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c660:	f000 fc5e 	bl	800cf20 <SEGGER_SYSVIEW_Stop>
      break;
 800c664:	e034      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c666:	f000 fe37 	bl	800d2d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c66a:	e031      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c66c:	f000 fdfc 	bl	800d268 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c670:	e02e      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c672:	f000 fc7b 	bl	800cf6c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c676:	e02b      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c678:	f001 f8ca 	bl	800d810 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c67c:	e028      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c67e:	f001 f8a9 	bl	800d7d4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c682:	e025      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c684:	4b14      	ldr	r3, [pc, #80]	; (800c6d8 <_HandleIncomingPacket+0xe0>)
 800c686:	7e1b      	ldrb	r3, [r3, #24]
 800c688:	4618      	mov	r0, r3
 800c68a:	1cfb      	adds	r3, r7, #3
 800c68c:	2201      	movs	r2, #1
 800c68e:	4619      	mov	r1, r3
 800c690:	f7ff fe00 	bl	800c294 <SEGGER_RTT_ReadNoLock>
 800c694:	4603      	mov	r3, r0
 800c696:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	dd15      	ble.n	800c6ca <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c69e:	78fb      	ldrb	r3, [r7, #3]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f001 f817 	bl	800d6d4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c6a6:	e010      	b.n	800c6ca <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	b25b      	sxtb	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	da0e      	bge.n	800c6ce <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c6b0:	4b09      	ldr	r3, [pc, #36]	; (800c6d8 <_HandleIncomingPacket+0xe0>)
 800c6b2:	7e1b      	ldrb	r3, [r3, #24]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	1cfb      	adds	r3, r7, #3
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	f7ff fdea 	bl	800c294 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c6c0:	e005      	b.n	800c6ce <_HandleIncomingPacket+0xd6>
    }
  }
 800c6c2:	bf00      	nop
 800c6c4:	e004      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
      break;
 800c6c6:	bf00      	nop
 800c6c8:	e002      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
      break;
 800c6ca:	bf00      	nop
 800c6cc:	e000      	b.n	800c6d0 <_HandleIncomingPacket+0xd8>
      break;
 800c6ce:	bf00      	nop
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	2000443c 	.word	0x2000443c

0800c6dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08c      	sub	sp, #48	; 0x30
 800c6e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c6e6:	1d3b      	adds	r3, r7, #4
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6f0:	4b31      	ldr	r3, [pc, #196]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6f6:	e00b      	b.n	800c710 <_TrySendOverflowPacket+0x34>
 800c6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	1c59      	adds	r1, r3, #1
 800c700:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c702:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	09db      	lsrs	r3, r3, #7
 800c70e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c712:	2b7f      	cmp	r3, #127	; 0x7f
 800c714:	d8f0      	bhi.n	800c6f8 <_TrySendOverflowPacket+0x1c>
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c726:	4b25      	ldr	r3, [pc, #148]	; (800c7bc <_TrySendOverflowPacket+0xe0>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c72c:	4b22      	ldr	r3, [pc, #136]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	69ba      	ldr	r2, [r7, #24]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	623b      	str	r3, [r7, #32]
 800c73e:	e00b      	b.n	800c758 <_TrySendOverflowPacket+0x7c>
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	b2da      	uxtb	r2, r3
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	1c59      	adds	r1, r3, #1
 800c748:	6279      	str	r1, [r7, #36]	; 0x24
 800c74a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	09db      	lsrs	r3, r3, #7
 800c756:	623b      	str	r3, [r7, #32]
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	2b7f      	cmp	r3, #127	; 0x7f
 800c75c:	d8f0      	bhi.n	800c740 <_TrySendOverflowPacket+0x64>
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	627a      	str	r2, [r7, #36]	; 0x24
 800c764:	6a3a      	ldr	r2, [r7, #32]
 800c766:	b2d2      	uxtb	r2, r2
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c76e:	4b12      	ldr	r3, [pc, #72]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c770:	785b      	ldrb	r3, [r3, #1]
 800c772:	4618      	mov	r0, r3
 800c774:	1d3b      	adds	r3, r7, #4
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	461a      	mov	r2, r3
 800c77c:	1d3b      	adds	r3, r7, #4
 800c77e:	4619      	mov	r1, r3
 800c780:	f7f3 fd36 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c784:	4603      	mov	r3, r0
 800c786:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d009      	beq.n	800c7a2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c78e:	4a0a      	ldr	r2, [pc, #40]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c794:	4b08      	ldr	r3, [pc, #32]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	3b01      	subs	r3, #1
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	4b06      	ldr	r3, [pc, #24]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c79e:	701a      	strb	r2, [r3, #0]
 800c7a0:	e004      	b.n	800c7ac <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c7a2:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	4a03      	ldr	r2, [pc, #12]	; (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c7aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c7ac:	693b      	ldr	r3, [r7, #16]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3730      	adds	r7, #48	; 0x30
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	2000443c 	.word	0x2000443c
 800c7bc:	e0001004 	.word	0xe0001004

0800c7c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08a      	sub	sp, #40	; 0x28
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c7cc:	4b6c      	ldr	r3, [pc, #432]	; (800c980 <_SendPacket+0x1c0>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d010      	beq.n	800c7f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c7d4:	4b6a      	ldr	r3, [pc, #424]	; (800c980 <_SendPacket+0x1c0>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 80a3 	beq.w	800c924 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c7de:	4b68      	ldr	r3, [pc, #416]	; (800c980 <_SendPacket+0x1c0>)
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d109      	bne.n	800c7fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c7e6:	f7ff ff79 	bl	800c6dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c7ea:	4b65      	ldr	r3, [pc, #404]	; (800c980 <_SendPacket+0x1c0>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	f040 809a 	bne.w	800c928 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c7f4:	e001      	b.n	800c7fa <_SendPacket+0x3a>
    goto Send;
 800c7f6:	bf00      	nop
 800c7f8:	e000      	b.n	800c7fc <_SendPacket+0x3c>
Send:
 800c7fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b1f      	cmp	r3, #31
 800c800:	d809      	bhi.n	800c816 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c802:	4b5f      	ldr	r3, [pc, #380]	; (800c980 <_SendPacket+0x1c0>)
 800c804:	69da      	ldr	r2, [r3, #28]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	fa22 f303 	lsr.w	r3, r2, r3
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	2b00      	cmp	r3, #0
 800c812:	f040 808b 	bne.w	800c92c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b17      	cmp	r3, #23
 800c81a:	d807      	bhi.n	800c82c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3b01      	subs	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	b2da      	uxtb	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	701a      	strb	r2, [r3, #0]
 800c82a:	e03d      	b.n	800c8a8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	2b7f      	cmp	r3, #127	; 0x7f
 800c838:	d912      	bls.n	800c860 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	09da      	lsrs	r2, r3, #7
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3b01      	subs	r3, #1
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	b2d2      	uxtb	r2, r2
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	3a01      	subs	r2, #1
 800c852:	60fa      	str	r2, [r7, #12]
 800c854:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	701a      	strb	r2, [r3, #0]
 800c85e:	e006      	b.n	800c86e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3b01      	subs	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b7f      	cmp	r3, #127	; 0x7f
 800c872:	d912      	bls.n	800c89a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	09da      	lsrs	r2, r3, #7
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	60fb      	str	r3, [r7, #12]
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	b2db      	uxtb	r3, r3
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	3a01      	subs	r2, #1
 800c88c:	60fa      	str	r2, [r7, #12]
 800c88e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c892:	b2da      	uxtb	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	e006      	b.n	800c8a8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c8a8:	4b36      	ldr	r3, [pc, #216]	; (800c984 <_SendPacket+0x1c4>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c8ae:	4b34      	ldr	r3, [pc, #208]	; (800c980 <_SendPacket+0x1c0>)
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	1ad3      	subs	r3, r2, r3
 800c8b6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	623b      	str	r3, [r7, #32]
 800c8c0:	e00b      	b.n	800c8da <_SendPacket+0x11a>
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	1c59      	adds	r1, r3, #1
 800c8ca:	6279      	str	r1, [r7, #36]	; 0x24
 800c8cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8d0:	b2d2      	uxtb	r2, r2
 800c8d2:	701a      	strb	r2, [r3, #0]
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	09db      	lsrs	r3, r3, #7
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	6a3b      	ldr	r3, [r7, #32]
 800c8dc:	2b7f      	cmp	r3, #127	; 0x7f
 800c8de:	d8f0      	bhi.n	800c8c2 <_SendPacket+0x102>
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	627a      	str	r2, [r7, #36]	; 0x24
 800c8e6:	6a3a      	ldr	r2, [r7, #32]
 800c8e8:	b2d2      	uxtb	r2, r2
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c8f0:	4b23      	ldr	r3, [pc, #140]	; (800c980 <_SendPacket+0x1c0>)
 800c8f2:	785b      	ldrb	r3, [r3, #1]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	68f9      	ldr	r1, [r7, #12]
 800c900:	f7f3 fc76 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c904:	4603      	mov	r3, r0
 800c906:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c90e:	4a1c      	ldr	r2, [pc, #112]	; (800c980 <_SendPacket+0x1c0>)
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	60d3      	str	r3, [r2, #12]
 800c914:	e00b      	b.n	800c92e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c916:	4b1a      	ldr	r3, [pc, #104]	; (800c980 <_SendPacket+0x1c0>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	3301      	adds	r3, #1
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	4b18      	ldr	r3, [pc, #96]	; (800c980 <_SendPacket+0x1c0>)
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	e004      	b.n	800c92e <_SendPacket+0x16e>
    goto SendDone;
 800c924:	bf00      	nop
 800c926:	e002      	b.n	800c92e <_SendPacket+0x16e>
      goto SendDone;
 800c928:	bf00      	nop
 800c92a:	e000      	b.n	800c92e <_SendPacket+0x16e>
      goto SendDone;
 800c92c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c92e:	4b14      	ldr	r3, [pc, #80]	; (800c980 <_SendPacket+0x1c0>)
 800c930:	7e1b      	ldrb	r3, [r3, #24]
 800c932:	4619      	mov	r1, r3
 800c934:	4a14      	ldr	r2, [pc, #80]	; (800c988 <_SendPacket+0x1c8>)
 800c936:	460b      	mov	r3, r1
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	440b      	add	r3, r1
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	4413      	add	r3, r2
 800c940:	336c      	adds	r3, #108	; 0x6c
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	4b0e      	ldr	r3, [pc, #56]	; (800c980 <_SendPacket+0x1c0>)
 800c946:	7e1b      	ldrb	r3, [r3, #24]
 800c948:	4618      	mov	r0, r3
 800c94a:	490f      	ldr	r1, [pc, #60]	; (800c988 <_SendPacket+0x1c8>)
 800c94c:	4603      	mov	r3, r0
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4403      	add	r3, r0
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	440b      	add	r3, r1
 800c956:	3370      	adds	r3, #112	; 0x70
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d00b      	beq.n	800c976 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c95e:	4b08      	ldr	r3, [pc, #32]	; (800c980 <_SendPacket+0x1c0>)
 800c960:	789b      	ldrb	r3, [r3, #2]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d107      	bne.n	800c976 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c966:	4b06      	ldr	r3, [pc, #24]	; (800c980 <_SendPacket+0x1c0>)
 800c968:	2201      	movs	r2, #1
 800c96a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c96c:	f7ff fe44 	bl	800c5f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c970:	4b03      	ldr	r3, [pc, #12]	; (800c980 <_SendPacket+0x1c0>)
 800c972:	2200      	movs	r2, #0
 800c974:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c976:	bf00      	nop
 800c978:	3728      	adds	r7, #40	; 0x28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	2000443c 	.word	0x2000443c
 800c984:	e0001004 	.word	0xe0001004
 800c988:	20002f7c 	.word	0x20002f7c

0800c98c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af02      	add	r7, sp, #8
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c99a:	2300      	movs	r3, #0
 800c99c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9a0:	4917      	ldr	r1, [pc, #92]	; (800ca00 <SEGGER_SYSVIEW_Init+0x74>)
 800c9a2:	4818      	ldr	r0, [pc, #96]	; (800ca04 <SEGGER_SYSVIEW_Init+0x78>)
 800c9a4:	f7ff fcfc 	bl	800c3a0 <SEGGER_RTT_AllocUpBuffer>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	4b16      	ldr	r3, [pc, #88]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c9b0:	4b15      	ldr	r3, [pc, #84]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9b2:	785a      	ldrb	r2, [r3, #1]
 800c9b4:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9b6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c9b8:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ba:	7e1b      	ldrb	r3, [r3, #24]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	2300      	movs	r3, #0
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	4a11      	ldr	r2, [pc, #68]	; (800ca0c <SEGGER_SYSVIEW_Init+0x80>)
 800c9c6:	490f      	ldr	r1, [pc, #60]	; (800ca04 <SEGGER_SYSVIEW_Init+0x78>)
 800c9c8:	f7ff fd6e 	bl	800c4a8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c9cc:	4b0e      	ldr	r3, [pc, #56]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <SEGGER_SYSVIEW_Init+0x84>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a0c      	ldr	r2, [pc, #48]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9d8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c9da:	4a0b      	ldr	r2, [pc, #44]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c9e0:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c9e6:	4a08      	ldr	r2, [pc, #32]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c9ec:	4a06      	ldr	r2, [pc, #24]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c9f2:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c9f8:	bf00      	nop
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20004034 	.word	0x20004034
 800ca04:	08015348 	.word	0x08015348
 800ca08:	2000443c 	.word	0x2000443c
 800ca0c:	20004434 	.word	0x20004434
 800ca10:	e0001004 	.word	0xe0001004

0800ca14 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800ca1c:	4a04      	ldr	r2, [pc, #16]	; (800ca30 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6113      	str	r3, [r2, #16]
}
 800ca22:	bf00      	nop
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	2000443c 	.word	0x2000443c

0800ca34 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ca3c:	f3ef 8311 	mrs	r3, BASEPRI
 800ca40:	f04f 0120 	mov.w	r1, #32
 800ca44:	f381 8811 	msr	BASEPRI, r1
 800ca48:	60fb      	str	r3, [r7, #12]
 800ca4a:	4808      	ldr	r0, [pc, #32]	; (800ca6c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800ca4c:	f7ff fdc8 	bl	800c5e0 <_PreparePacket>
 800ca50:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	68b9      	ldr	r1, [r7, #8]
 800ca56:	68b8      	ldr	r0, [r7, #8]
 800ca58:	f7ff feb2 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f383 8811 	msr	BASEPRI, r3
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	2000446c 	.word	0x2000446c

0800ca70 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ca7e:	f04f 0120 	mov.w	r1, #32
 800ca82:	f381 8811 	msr	BASEPRI, r1
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	4816      	ldr	r0, [pc, #88]	; (800cae4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ca8a:	f7ff fda9 	bl	800c5e0 <_PreparePacket>
 800ca8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	61bb      	str	r3, [r7, #24]
 800ca9c:	e00b      	b.n	800cab6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	1c59      	adds	r1, r3, #1
 800caa6:	61f9      	str	r1, [r7, #28]
 800caa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	09db      	lsrs	r3, r3, #7
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	2b7f      	cmp	r3, #127	; 0x7f
 800caba:	d8f0      	bhi.n	800ca9e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	61fa      	str	r2, [r7, #28]
 800cac2:	69ba      	ldr	r2, [r7, #24]
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	68f9      	ldr	r1, [r7, #12]
 800cad0:	6938      	ldr	r0, [r7, #16]
 800cad2:	f7ff fe75 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f383 8811 	msr	BASEPRI, r3
}
 800cadc:	bf00      	nop
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	2000446c 	.word	0x2000446c

0800cae8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b08c      	sub	sp, #48	; 0x30
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800caf4:	f3ef 8311 	mrs	r3, BASEPRI
 800caf8:	f04f 0120 	mov.w	r1, #32
 800cafc:	f381 8811 	msr	BASEPRI, r1
 800cb00:	61fb      	str	r3, [r7, #28]
 800cb02:	4825      	ldr	r0, [pc, #148]	; (800cb98 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800cb04:	f7ff fd6c 	bl	800c5e0 <_PreparePacket>
 800cb08:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb16:	e00b      	b.n	800cb30 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800cb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1a:	b2da      	uxtb	r2, r3
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	1c59      	adds	r1, r3, #1
 800cb20:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cb22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	701a      	strb	r2, [r3, #0]
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	09db      	lsrs	r3, r3, #7
 800cb2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	2b7f      	cmp	r3, #127	; 0x7f
 800cb34:	d8f0      	bhi.n	800cb18 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800cb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb3e:	b2d2      	uxtb	r2, r2
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	623b      	str	r3, [r7, #32]
 800cb4e:	e00b      	b.n	800cb68 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	1c59      	adds	r1, r3, #1
 800cb58:	6279      	str	r1, [r7, #36]	; 0x24
 800cb5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb5e:	b2d2      	uxtb	r2, r2
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	09db      	lsrs	r3, r3, #7
 800cb66:	623b      	str	r3, [r7, #32]
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	2b7f      	cmp	r3, #127	; 0x7f
 800cb6c:	d8f0      	bhi.n	800cb50 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	627a      	str	r2, [r7, #36]	; 0x24
 800cb74:	6a3a      	ldr	r2, [r7, #32]
 800cb76:	b2d2      	uxtb	r2, r2
 800cb78:	701a      	strb	r2, [r3, #0]
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	6979      	ldr	r1, [r7, #20]
 800cb82:	69b8      	ldr	r0, [r7, #24]
 800cb84:	f7ff fe1c 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	f383 8811 	msr	BASEPRI, r3
}
 800cb8e:	bf00      	nop
 800cb90:	3730      	adds	r7, #48	; 0x30
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	2000446c 	.word	0x2000446c

0800cb9c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08e      	sub	sp, #56	; 0x38
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
 800cba8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800cbaa:	f3ef 8311 	mrs	r3, BASEPRI
 800cbae:	f04f 0120 	mov.w	r1, #32
 800cbb2:	f381 8811 	msr	BASEPRI, r1
 800cbb6:	61fb      	str	r3, [r7, #28]
 800cbb8:	4832      	ldr	r0, [pc, #200]	; (800cc84 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800cbba:	f7ff fd11 	bl	800c5e0 <_PreparePacket>
 800cbbe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	633b      	str	r3, [r7, #48]	; 0x30
 800cbcc:	e00b      	b.n	800cbe6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd4:	1c59      	adds	r1, r3, #1
 800cbd6:	6379      	str	r1, [r7, #52]	; 0x34
 800cbd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbdc:	b2d2      	uxtb	r2, r2
 800cbde:	701a      	strb	r2, [r3, #0]
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe2:	09db      	lsrs	r3, r3, #7
 800cbe4:	633b      	str	r3, [r7, #48]	; 0x30
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	2b7f      	cmp	r3, #127	; 0x7f
 800cbea:	d8f0      	bhi.n	800cbce <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	637a      	str	r2, [r7, #52]	; 0x34
 800cbf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf4:	b2d2      	uxtb	r2, r2
 800cbf6:	701a      	strb	r2, [r3, #0]
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc04:	e00b      	b.n	800cc1e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800cc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	1c59      	adds	r1, r3, #1
 800cc0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cc10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc14:	b2d2      	uxtb	r2, r2
 800cc16:	701a      	strb	r2, [r3, #0]
 800cc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1a:	09db      	lsrs	r3, r3, #7
 800cc1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	2b7f      	cmp	r3, #127	; 0x7f
 800cc22:	d8f0      	bhi.n	800cc06 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc2c:	b2d2      	uxtb	r2, r2
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	623b      	str	r3, [r7, #32]
 800cc3c:	e00b      	b.n	800cc56 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800cc3e:	6a3b      	ldr	r3, [r7, #32]
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	1c59      	adds	r1, r3, #1
 800cc46:	6279      	str	r1, [r7, #36]	; 0x24
 800cc48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc4c:	b2d2      	uxtb	r2, r2
 800cc4e:	701a      	strb	r2, [r3, #0]
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	09db      	lsrs	r3, r3, #7
 800cc54:	623b      	str	r3, [r7, #32]
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	2b7f      	cmp	r3, #127	; 0x7f
 800cc5a:	d8f0      	bhi.n	800cc3e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	627a      	str	r2, [r7, #36]	; 0x24
 800cc62:	6a3a      	ldr	r2, [r7, #32]
 800cc64:	b2d2      	uxtb	r2, r2
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	6979      	ldr	r1, [r7, #20]
 800cc70:	69b8      	ldr	r0, [r7, #24]
 800cc72:	f7ff fda5 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	f383 8811 	msr	BASEPRI, r3
}
 800cc7c:	bf00      	nop
 800cc7e:	3738      	adds	r7, #56	; 0x38
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	2000446c 	.word	0x2000446c

0800cc88 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b090      	sub	sp, #64	; 0x40
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cc96:	f3ef 8311 	mrs	r3, BASEPRI
 800cc9a:	f04f 0120 	mov.w	r1, #32
 800cc9e:	f381 8811 	msr	BASEPRI, r1
 800cca2:	61fb      	str	r3, [r7, #28]
 800cca4:	4840      	ldr	r0, [pc, #256]	; (800cda8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800cca6:	f7ff fc9b 	bl	800c5e0 <_PreparePacket>
 800ccaa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccb8:	e00b      	b.n	800ccd2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc0:	1c59      	adds	r1, r3, #1
 800ccc2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ccc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	701a      	strb	r2, [r3, #0]
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	09db      	lsrs	r3, r3, #7
 800ccd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	2b7f      	cmp	r3, #127	; 0x7f
 800ccd6:	d8f0      	bhi.n	800ccba <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ccde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cce0:	b2d2      	uxtb	r2, r2
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	637b      	str	r3, [r7, #52]	; 0x34
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	633b      	str	r3, [r7, #48]	; 0x30
 800ccf0:	e00b      	b.n	800cd0a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf8:	1c59      	adds	r1, r3, #1
 800ccfa:	6379      	str	r1, [r7, #52]	; 0x34
 800ccfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	09db      	lsrs	r3, r3, #7
 800cd08:	633b      	str	r3, [r7, #48]	; 0x30
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	2b7f      	cmp	r3, #127	; 0x7f
 800cd0e:	d8f0      	bhi.n	800ccf2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	637a      	str	r2, [r7, #52]	; 0x34
 800cd16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	701a      	strb	r2, [r3, #0]
 800cd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd28:	e00b      	b.n	800cd42 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	1c59      	adds	r1, r3, #1
 800cd32:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cd34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd38:	b2d2      	uxtb	r2, r2
 800cd3a:	701a      	strb	r2, [r3, #0]
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	09db      	lsrs	r3, r3, #7
 800cd40:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	2b7f      	cmp	r3, #127	; 0x7f
 800cd46:	d8f0      	bhi.n	800cd2a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd50:	b2d2      	uxtb	r2, r2
 800cd52:	701a      	strb	r2, [r3, #0]
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd5e:	623b      	str	r3, [r7, #32]
 800cd60:	e00b      	b.n	800cd7a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	1c59      	adds	r1, r3, #1
 800cd6a:	6279      	str	r1, [r7, #36]	; 0x24
 800cd6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd70:	b2d2      	uxtb	r2, r2
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	09db      	lsrs	r3, r3, #7
 800cd78:	623b      	str	r3, [r7, #32]
 800cd7a:	6a3b      	ldr	r3, [r7, #32]
 800cd7c:	2b7f      	cmp	r3, #127	; 0x7f
 800cd7e:	d8f0      	bhi.n	800cd62 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	627a      	str	r2, [r7, #36]	; 0x24
 800cd86:	6a3a      	ldr	r2, [r7, #32]
 800cd88:	b2d2      	uxtb	r2, r2
 800cd8a:	701a      	strb	r2, [r3, #0]
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	6979      	ldr	r1, [r7, #20]
 800cd94:	69b8      	ldr	r0, [r7, #24]
 800cd96:	f7ff fd13 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	f383 8811 	msr	BASEPRI, r3
}
 800cda0:	bf00      	nop
 800cda2:	3740      	adds	r7, #64	; 0x40
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	2000446c 	.word	0x2000446c

0800cdac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08c      	sub	sp, #48	; 0x30
 800cdb0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800cdb2:	4b58      	ldr	r3, [pc, #352]	; (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800cdb8:	f3ef 8311 	mrs	r3, BASEPRI
 800cdbc:	f04f 0120 	mov.w	r1, #32
 800cdc0:	f381 8811 	msr	BASEPRI, r1
 800cdc4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800cdc6:	4b53      	ldr	r3, [pc, #332]	; (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cdc8:	785b      	ldrb	r3, [r3, #1]
 800cdca:	220a      	movs	r2, #10
 800cdcc:	4952      	ldr	r1, [pc, #328]	; (800cf18 <SEGGER_SYSVIEW_Start+0x16c>)
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f3 fa0e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800cdda:	200a      	movs	r0, #10
 800cddc:	f7ff fe2a 	bl	800ca34 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cde0:	f3ef 8311 	mrs	r3, BASEPRI
 800cde4:	f04f 0120 	mov.w	r1, #32
 800cde8:	f381 8811 	msr	BASEPRI, r1
 800cdec:	60bb      	str	r3, [r7, #8]
 800cdee:	484b      	ldr	r0, [pc, #300]	; (800cf1c <SEGGER_SYSVIEW_Start+0x170>)
 800cdf0:	f7ff fbf6 	bl	800c5e0 <_PreparePacket>
 800cdf4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdfe:	4b45      	ldr	r3, [pc, #276]	; (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce04:	e00b      	b.n	800ce1e <SEGGER_SYSVIEW_Start+0x72>
 800ce06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	1c59      	adds	r1, r3, #1
 800ce0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ce10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce14:	b2d2      	uxtb	r2, r2
 800ce16:	701a      	strb	r2, [r3, #0]
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	09db      	lsrs	r3, r3, #7
 800ce1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce20:	2b7f      	cmp	r3, #127	; 0x7f
 800ce22:	d8f0      	bhi.n	800ce06 <SEGGER_SYSVIEW_Start+0x5a>
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce2c:	b2d2      	uxtb	r2, r2
 800ce2e:	701a      	strb	r2, [r3, #0]
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	627b      	str	r3, [r7, #36]	; 0x24
 800ce38:	4b36      	ldr	r3, [pc, #216]	; (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	623b      	str	r3, [r7, #32]
 800ce3e:	e00b      	b.n	800ce58 <SEGGER_SYSVIEW_Start+0xac>
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	1c59      	adds	r1, r3, #1
 800ce48:	6279      	str	r1, [r7, #36]	; 0x24
 800ce4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce4e:	b2d2      	uxtb	r2, r2
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	09db      	lsrs	r3, r3, #7
 800ce56:	623b      	str	r3, [r7, #32]
 800ce58:	6a3b      	ldr	r3, [r7, #32]
 800ce5a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce5c:	d8f0      	bhi.n	800ce40 <SEGGER_SYSVIEW_Start+0x94>
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	627a      	str	r2, [r7, #36]	; 0x24
 800ce64:	6a3a      	ldr	r2, [r7, #32]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	4b28      	ldr	r3, [pc, #160]	; (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	61bb      	str	r3, [r7, #24]
 800ce78:	e00b      	b.n	800ce92 <SEGGER_SYSVIEW_Start+0xe6>
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	1c59      	adds	r1, r3, #1
 800ce82:	61f9      	str	r1, [r7, #28]
 800ce84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce88:	b2d2      	uxtb	r2, r2
 800ce8a:	701a      	strb	r2, [r3, #0]
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	09db      	lsrs	r3, r3, #7
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	2b7f      	cmp	r3, #127	; 0x7f
 800ce96:	d8f0      	bhi.n	800ce7a <SEGGER_SYSVIEW_Start+0xce>
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	61fa      	str	r2, [r7, #28]
 800ce9e:	69ba      	ldr	r2, [r7, #24]
 800cea0:	b2d2      	uxtb	r2, r2
 800cea2:	701a      	strb	r2, [r3, #0]
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	2300      	movs	r3, #0
 800ceae:	613b      	str	r3, [r7, #16]
 800ceb0:	e00b      	b.n	800ceca <SEGGER_SYSVIEW_Start+0x11e>
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	b2da      	uxtb	r2, r3
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	1c59      	adds	r1, r3, #1
 800ceba:	6179      	str	r1, [r7, #20]
 800cebc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cec0:	b2d2      	uxtb	r2, r2
 800cec2:	701a      	strb	r2, [r3, #0]
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	09db      	lsrs	r3, r3, #7
 800cec8:	613b      	str	r3, [r7, #16]
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	2b7f      	cmp	r3, #127	; 0x7f
 800cece:	d8f0      	bhi.n	800ceb2 <SEGGER_SYSVIEW_Start+0x106>
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	617a      	str	r2, [r7, #20]
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	b2d2      	uxtb	r2, r2
 800ceda:	701a      	strb	r2, [r3, #0]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cee0:	2218      	movs	r2, #24
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff fc6b 	bl	800c7c0 <_SendPacket>
      RECORD_END();
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cef0:	4b08      	ldr	r3, [pc, #32]	; (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800cefe:	f000 f9eb 	bl	800d2d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800cf02:	f000 f9b1 	bl	800d268 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800cf06:	f000 fc83 	bl	800d810 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800cf0a:	bf00      	nop
 800cf0c:	3730      	adds	r7, #48	; 0x30
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	2000443c 	.word	0x2000443c
 800cf18:	08015bdc 	.word	0x08015bdc
 800cf1c:	2000446c 	.word	0x2000446c

0800cf20 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cf26:	f3ef 8311 	mrs	r3, BASEPRI
 800cf2a:	f04f 0120 	mov.w	r1, #32
 800cf2e:	f381 8811 	msr	BASEPRI, r1
 800cf32:	607b      	str	r3, [r7, #4]
 800cf34:	480b      	ldr	r0, [pc, #44]	; (800cf64 <SEGGER_SYSVIEW_Stop+0x44>)
 800cf36:	f7ff fb53 	bl	800c5e0 <_PreparePacket>
 800cf3a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800cf3c:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <SEGGER_SYSVIEW_Stop+0x48>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d007      	beq.n	800cf54 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cf44:	220b      	movs	r2, #11
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6838      	ldr	r0, [r7, #0]
 800cf4a:	f7ff fc39 	bl	800c7c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800cf4e:	4b06      	ldr	r3, [pc, #24]	; (800cf68 <SEGGER_SYSVIEW_Stop+0x48>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f383 8811 	msr	BASEPRI, r3
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2000446c 	.word	0x2000446c
 800cf68:	2000443c 	.word	0x2000443c

0800cf6c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08c      	sub	sp, #48	; 0x30
 800cf70:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cf72:	f3ef 8311 	mrs	r3, BASEPRI
 800cf76:	f04f 0120 	mov.w	r1, #32
 800cf7a:	f381 8811 	msr	BASEPRI, r1
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	4845      	ldr	r0, [pc, #276]	; (800d098 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800cf82:	f7ff fb2d 	bl	800c5e0 <_PreparePacket>
 800cf86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf90:	4b42      	ldr	r3, [pc, #264]	; (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf96:	e00b      	b.n	800cfb0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	1c59      	adds	r1, r3, #1
 800cfa0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cfa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cfa6:	b2d2      	uxtb	r2, r2
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	09db      	lsrs	r3, r3, #7
 800cfae:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	2b7f      	cmp	r3, #127	; 0x7f
 800cfb4:	d8f0      	bhi.n	800cf98 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	1c5a      	adds	r2, r3, #1
 800cfba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfbe:	b2d2      	uxtb	r2, r2
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	627b      	str	r3, [r7, #36]	; 0x24
 800cfca:	4b34      	ldr	r3, [pc, #208]	; (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	623b      	str	r3, [r7, #32]
 800cfd0:	e00b      	b.n	800cfea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800cfd2:	6a3b      	ldr	r3, [r7, #32]
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	1c59      	adds	r1, r3, #1
 800cfda:	6279      	str	r1, [r7, #36]	; 0x24
 800cfdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cfe0:	b2d2      	uxtb	r2, r2
 800cfe2:	701a      	strb	r2, [r3, #0]
 800cfe4:	6a3b      	ldr	r3, [r7, #32]
 800cfe6:	09db      	lsrs	r3, r3, #7
 800cfe8:	623b      	str	r3, [r7, #32]
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	2b7f      	cmp	r3, #127	; 0x7f
 800cfee:	d8f0      	bhi.n	800cfd2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	627a      	str	r2, [r7, #36]	; 0x24
 800cff6:	6a3a      	ldr	r2, [r7, #32]
 800cff8:	b2d2      	uxtb	r2, r2
 800cffa:	701a      	strb	r2, [r3, #0]
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	61fb      	str	r3, [r7, #28]
 800d004:	4b25      	ldr	r3, [pc, #148]	; (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	61bb      	str	r3, [r7, #24]
 800d00a:	e00b      	b.n	800d024 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	1c59      	adds	r1, r3, #1
 800d014:	61f9      	str	r1, [r7, #28]
 800d016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d01a:	b2d2      	uxtb	r2, r2
 800d01c:	701a      	strb	r2, [r3, #0]
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	09db      	lsrs	r3, r3, #7
 800d022:	61bb      	str	r3, [r7, #24]
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	2b7f      	cmp	r3, #127	; 0x7f
 800d028:	d8f0      	bhi.n	800d00c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	61fa      	str	r2, [r7, #28]
 800d030:	69ba      	ldr	r2, [r7, #24]
 800d032:	b2d2      	uxtb	r2, r2
 800d034:	701a      	strb	r2, [r3, #0]
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	2300      	movs	r3, #0
 800d040:	613b      	str	r3, [r7, #16]
 800d042:	e00b      	b.n	800d05c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	b2da      	uxtb	r2, r3
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	1c59      	adds	r1, r3, #1
 800d04c:	6179      	str	r1, [r7, #20]
 800d04e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d052:	b2d2      	uxtb	r2, r2
 800d054:	701a      	strb	r2, [r3, #0]
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	09db      	lsrs	r3, r3, #7
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	2b7f      	cmp	r3, #127	; 0x7f
 800d060:	d8f0      	bhi.n	800d044 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	617a      	str	r2, [r7, #20]
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	b2d2      	uxtb	r2, r2
 800d06c:	701a      	strb	r2, [r3, #0]
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d072:	2218      	movs	r2, #24
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	68b8      	ldr	r0, [r7, #8]
 800d078:	f7ff fba2 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d082:	4b06      	ldr	r3, [pc, #24]	; (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d08a:	4b04      	ldr	r3, [pc, #16]	; (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	4798      	blx	r3
  }
}
 800d090:	bf00      	nop
 800d092:	3730      	adds	r7, #48	; 0x30
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	2000446c 	.word	0x2000446c
 800d09c:	2000443c 	.word	0x2000443c

0800d0a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b092      	sub	sp, #72	; 0x48
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d0a8:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ac:	f04f 0120 	mov.w	r1, #32
 800d0b0:	f381 8811 	msr	BASEPRI, r1
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	486a      	ldr	r0, [pc, #424]	; (800d260 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d0b8:	f7ff fa92 	bl	800c5e0 <_PreparePacket>
 800d0bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	4b66      	ldr	r3, [pc, #408]	; (800d264 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	643b      	str	r3, [r7, #64]	; 0x40
 800d0d2:	e00b      	b.n	800d0ec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0da:	1c59      	adds	r1, r3, #1
 800d0dc:	6479      	str	r1, [r7, #68]	; 0x44
 800d0de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d0e2:	b2d2      	uxtb	r2, r2
 800d0e4:	701a      	strb	r2, [r3, #0]
 800d0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e8:	09db      	lsrs	r3, r3, #7
 800d0ea:	643b      	str	r3, [r7, #64]	; 0x40
 800d0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ee:	2b7f      	cmp	r3, #127	; 0x7f
 800d0f0:	d8f0      	bhi.n	800d0d4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0f4:	1c5a      	adds	r2, r3, #1
 800d0f6:	647a      	str	r2, [r7, #68]	; 0x44
 800d0f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0fa:	b2d2      	uxtb	r2, r2
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d100:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d10c:	e00b      	b.n	800d126 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d110:	b2da      	uxtb	r2, r3
 800d112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d114:	1c59      	adds	r1, r3, #1
 800d116:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d118:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d11c:	b2d2      	uxtb	r2, r2
 800d11e:	701a      	strb	r2, [r3, #0]
 800d120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d122:	09db      	lsrs	r3, r3, #7
 800d124:	63bb      	str	r3, [r7, #56]	; 0x38
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	2b7f      	cmp	r3, #127	; 0x7f
 800d12a:	d8f0      	bhi.n	800d10e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d134:	b2d2      	uxtb	r2, r2
 800d136:	701a      	strb	r2, [r3, #0]
 800d138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	2220      	movs	r2, #32
 800d142:	4619      	mov	r1, r3
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff f9fb 	bl	800c540 <_EncodeStr>
 800d14a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d14c:	2209      	movs	r2, #9
 800d14e:	68f9      	ldr	r1, [r7, #12]
 800d150:	6938      	ldr	r0, [r7, #16]
 800d152:	f7ff fb35 	bl	800c7c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	637b      	str	r3, [r7, #52]	; 0x34
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	4b40      	ldr	r3, [pc, #256]	; (800d264 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	633b      	str	r3, [r7, #48]	; 0x30
 800d16a:	e00b      	b.n	800d184 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d172:	1c59      	adds	r1, r3, #1
 800d174:	6379      	str	r1, [r7, #52]	; 0x34
 800d176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d17a:	b2d2      	uxtb	r2, r2
 800d17c:	701a      	strb	r2, [r3, #0]
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	09db      	lsrs	r3, r3, #7
 800d182:	633b      	str	r3, [r7, #48]	; 0x30
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	2b7f      	cmp	r3, #127	; 0x7f
 800d188:	d8f0      	bhi.n	800d16c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18c:	1c5a      	adds	r2, r3, #1
 800d18e:	637a      	str	r2, [r7, #52]	; 0x34
 800d190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d192:	b2d2      	uxtb	r2, r2
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d198:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1a4:	e00b      	b.n	800d1be <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	1c59      	adds	r1, r3, #1
 800d1ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d1b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1b4:	b2d2      	uxtb	r2, r2
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	09db      	lsrs	r3, r3, #7
 800d1bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d1c2:	d8f0      	bhi.n	800d1a6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1cc:	b2d2      	uxtb	r2, r2
 800d1ce:	701a      	strb	r2, [r3, #0]
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	623b      	str	r3, [r7, #32]
 800d1de:	e00b      	b.n	800d1f8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	1c59      	adds	r1, r3, #1
 800d1e8:	6279      	str	r1, [r7, #36]	; 0x24
 800d1ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1ee:	b2d2      	uxtb	r2, r2
 800d1f0:	701a      	strb	r2, [r3, #0]
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	09db      	lsrs	r3, r3, #7
 800d1f6:	623b      	str	r3, [r7, #32]
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
 800d1fa:	2b7f      	cmp	r3, #127	; 0x7f
 800d1fc:	d8f0      	bhi.n	800d1e0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	627a      	str	r2, [r7, #36]	; 0x24
 800d204:	6a3a      	ldr	r2, [r7, #32]
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	2300      	movs	r3, #0
 800d214:	61bb      	str	r3, [r7, #24]
 800d216:	e00b      	b.n	800d230 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	1c59      	adds	r1, r3, #1
 800d220:	61f9      	str	r1, [r7, #28]
 800d222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d226:	b2d2      	uxtb	r2, r2
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	09db      	lsrs	r3, r3, #7
 800d22e:	61bb      	str	r3, [r7, #24]
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	2b7f      	cmp	r3, #127	; 0x7f
 800d234:	d8f0      	bhi.n	800d218 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	61fa      	str	r2, [r7, #28]
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	b2d2      	uxtb	r2, r2
 800d240:	701a      	strb	r2, [r3, #0]
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d246:	2215      	movs	r2, #21
 800d248:	68f9      	ldr	r1, [r7, #12]
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f7ff fab8 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	f383 8811 	msr	BASEPRI, r3
}
 800d256:	bf00      	nop
 800d258:	3748      	adds	r7, #72	; 0x48
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	2000446c 	.word	0x2000446c
 800d264:	2000443c 	.word	0x2000443c

0800d268 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d26c:	4b07      	ldr	r3, [pc, #28]	; (800d28c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d008      	beq.n	800d286 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d274:	4b05      	ldr	r3, [pc, #20]	; (800d28c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d003      	beq.n	800d286 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d27e:	4b03      	ldr	r3, [pc, #12]	; (800d28c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	4798      	blx	r3
  }
}
 800d286:	bf00      	nop
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	2000443c 	.word	0x2000443c

0800d290 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d298:	f3ef 8311 	mrs	r3, BASEPRI
 800d29c:	f04f 0120 	mov.w	r1, #32
 800d2a0:	f381 8811 	msr	BASEPRI, r1
 800d2a4:	617b      	str	r3, [r7, #20]
 800d2a6:	480b      	ldr	r0, [pc, #44]	; (800d2d4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d2a8:	f7ff f99a 	bl	800c5e0 <_PreparePacket>
 800d2ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d2ae:	2280      	movs	r2, #128	; 0x80
 800d2b0:	6879      	ldr	r1, [r7, #4]
 800d2b2:	6938      	ldr	r0, [r7, #16]
 800d2b4:	f7ff f944 	bl	800c540 <_EncodeStr>
 800d2b8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d2ba:	220e      	movs	r2, #14
 800d2bc:	68f9      	ldr	r1, [r7, #12]
 800d2be:	6938      	ldr	r0, [r7, #16]
 800d2c0:	f7ff fa7e 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	f383 8811 	msr	BASEPRI, r3
}
 800d2ca:	bf00      	nop
 800d2cc:	3718      	adds	r7, #24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	2000446c 	.word	0x2000446c

0800d2d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d2d8:	b590      	push	{r4, r7, lr}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d2de:	4b15      	ldr	r3, [pc, #84]	; (800d334 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d01a      	beq.n	800d31c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d2e6:	4b13      	ldr	r3, [pc, #76]	; (800d334 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d015      	beq.n	800d31c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d2f0:	4b10      	ldr	r3, [pc, #64]	; (800d334 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d2f2:	6a1b      	ldr	r3, [r3, #32]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4798      	blx	r3
 800d2f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d2fc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d2fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d302:	f04f 0200 	mov.w	r2, #0
 800d306:	f04f 0300 	mov.w	r3, #0
 800d30a:	000a      	movs	r2, r1
 800d30c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d30e:	4613      	mov	r3, r2
 800d310:	461a      	mov	r2, r3
 800d312:	4621      	mov	r1, r4
 800d314:	200d      	movs	r0, #13
 800d316:	f7ff fbe7 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
 800d31a:	e006      	b.n	800d32a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4619      	mov	r1, r3
 800d322:	200c      	movs	r0, #12
 800d324:	f7ff fba4 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d328:	bf00      	nop
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd90      	pop	{r4, r7, pc}
 800d332:	bf00      	nop
 800d334:	2000443c 	.word	0x2000443c
 800d338:	e0001004 	.word	0xe0001004

0800d33c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d342:	f3ef 8311 	mrs	r3, BASEPRI
 800d346:	f04f 0120 	mov.w	r1, #32
 800d34a:	f381 8811 	msr	BASEPRI, r1
 800d34e:	60fb      	str	r3, [r7, #12]
 800d350:	4819      	ldr	r0, [pc, #100]	; (800d3b8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d352:	f7ff f945 	bl	800c5e0 <_PreparePacket>
 800d356:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d35c:	4b17      	ldr	r3, [pc, #92]	; (800d3bc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d364:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	617b      	str	r3, [r7, #20]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	613b      	str	r3, [r7, #16]
 800d36e:	e00b      	b.n	800d388 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	b2da      	uxtb	r2, r3
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	1c59      	adds	r1, r3, #1
 800d378:	6179      	str	r1, [r7, #20]
 800d37a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d37e:	b2d2      	uxtb	r2, r2
 800d380:	701a      	strb	r2, [r3, #0]
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	09db      	lsrs	r3, r3, #7
 800d386:	613b      	str	r3, [r7, #16]
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	2b7f      	cmp	r3, #127	; 0x7f
 800d38c:	d8f0      	bhi.n	800d370 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	617a      	str	r2, [r7, #20]
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	b2d2      	uxtb	r2, r2
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d39e:	2202      	movs	r2, #2
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	68b8      	ldr	r0, [r7, #8]
 800d3a4:	f7ff fa0c 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f383 8811 	msr	BASEPRI, r3
}
 800d3ae:	bf00      	nop
 800d3b0:	3718      	adds	r7, #24
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	2000446c 	.word	0x2000446c
 800d3bc:	e000ed04 	.word	0xe000ed04

0800d3c0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3c6:	f3ef 8311 	mrs	r3, BASEPRI
 800d3ca:	f04f 0120 	mov.w	r1, #32
 800d3ce:	f381 8811 	msr	BASEPRI, r1
 800d3d2:	607b      	str	r3, [r7, #4]
 800d3d4:	4807      	ldr	r0, [pc, #28]	; (800d3f4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d3d6:	f7ff f903 	bl	800c5e0 <_PreparePacket>
 800d3da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d3dc:	2203      	movs	r2, #3
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6838      	ldr	r0, [r7, #0]
 800d3e2:	f7ff f9ed 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f383 8811 	msr	BASEPRI, r3
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	2000446c 	.word	0x2000446c

0800d3f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3fe:	f3ef 8311 	mrs	r3, BASEPRI
 800d402:	f04f 0120 	mov.w	r1, #32
 800d406:	f381 8811 	msr	BASEPRI, r1
 800d40a:	607b      	str	r3, [r7, #4]
 800d40c:	4807      	ldr	r0, [pc, #28]	; (800d42c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d40e:	f7ff f8e7 	bl	800c5e0 <_PreparePacket>
 800d412:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d414:	2212      	movs	r2, #18
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6838      	ldr	r0, [r7, #0]
 800d41a:	f7ff f9d1 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f383 8811 	msr	BASEPRI, r3
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	2000446c 	.word	0x2000446c

0800d430 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d436:	f3ef 8311 	mrs	r3, BASEPRI
 800d43a:	f04f 0120 	mov.w	r1, #32
 800d43e:	f381 8811 	msr	BASEPRI, r1
 800d442:	607b      	str	r3, [r7, #4]
 800d444:	4807      	ldr	r0, [pc, #28]	; (800d464 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d446:	f7ff f8cb 	bl	800c5e0 <_PreparePacket>
 800d44a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d44c:	2211      	movs	r2, #17
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6838      	ldr	r0, [r7, #0]
 800d452:	f7ff f9b5 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f383 8811 	msr	BASEPRI, r3
}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2000446c 	.word	0x2000446c

0800d468 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d470:	f3ef 8311 	mrs	r3, BASEPRI
 800d474:	f04f 0120 	mov.w	r1, #32
 800d478:	f381 8811 	msr	BASEPRI, r1
 800d47c:	617b      	str	r3, [r7, #20]
 800d47e:	4819      	ldr	r0, [pc, #100]	; (800d4e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d480:	f7ff f8ae 	bl	800c5e0 <_PreparePacket>
 800d484:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d48a:	4b17      	ldr	r3, [pc, #92]	; (800d4e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	61fb      	str	r3, [r7, #28]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	61bb      	str	r3, [r7, #24]
 800d49c:	e00b      	b.n	800d4b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	1c59      	adds	r1, r3, #1
 800d4a6:	61f9      	str	r1, [r7, #28]
 800d4a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4ac:	b2d2      	uxtb	r2, r2
 800d4ae:	701a      	strb	r2, [r3, #0]
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	09db      	lsrs	r3, r3, #7
 800d4b4:	61bb      	str	r3, [r7, #24]
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	2b7f      	cmp	r3, #127	; 0x7f
 800d4ba:	d8f0      	bhi.n	800d49e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	1c5a      	adds	r2, r3, #1
 800d4c0:	61fa      	str	r2, [r7, #28]
 800d4c2:	69ba      	ldr	r2, [r7, #24]
 800d4c4:	b2d2      	uxtb	r2, r2
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d4cc:	2208      	movs	r2, #8
 800d4ce:	68f9      	ldr	r1, [r7, #12]
 800d4d0:	6938      	ldr	r0, [r7, #16]
 800d4d2:	f7ff f975 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f383 8811 	msr	BASEPRI, r3
}
 800d4dc:	bf00      	nop
 800d4de:	3720      	adds	r7, #32
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	2000446c 	.word	0x2000446c
 800d4e8:	2000443c 	.word	0x2000443c

0800d4ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d4f4:	f3ef 8311 	mrs	r3, BASEPRI
 800d4f8:	f04f 0120 	mov.w	r1, #32
 800d4fc:	f381 8811 	msr	BASEPRI, r1
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	4819      	ldr	r0, [pc, #100]	; (800d568 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d504:	f7ff f86c 	bl	800c5e0 <_PreparePacket>
 800d508:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d50e:	4b17      	ldr	r3, [pc, #92]	; (800d56c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	61fb      	str	r3, [r7, #28]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	61bb      	str	r3, [r7, #24]
 800d520:	e00b      	b.n	800d53a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	b2da      	uxtb	r2, r3
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	1c59      	adds	r1, r3, #1
 800d52a:	61f9      	str	r1, [r7, #28]
 800d52c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	701a      	strb	r2, [r3, #0]
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	09db      	lsrs	r3, r3, #7
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	2b7f      	cmp	r3, #127	; 0x7f
 800d53e:	d8f0      	bhi.n	800d522 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	61fa      	str	r2, [r7, #28]
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d550:	2204      	movs	r2, #4
 800d552:	68f9      	ldr	r1, [r7, #12]
 800d554:	6938      	ldr	r0, [r7, #16]
 800d556:	f7ff f933 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f383 8811 	msr	BASEPRI, r3
}
 800d560:	bf00      	nop
 800d562:	3720      	adds	r7, #32
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	2000446c 	.word	0x2000446c
 800d56c:	2000443c 	.word	0x2000443c

0800d570 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d578:	f3ef 8311 	mrs	r3, BASEPRI
 800d57c:	f04f 0120 	mov.w	r1, #32
 800d580:	f381 8811 	msr	BASEPRI, r1
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	4819      	ldr	r0, [pc, #100]	; (800d5ec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d588:	f7ff f82a 	bl	800c5e0 <_PreparePacket>
 800d58c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d592:	4b17      	ldr	r3, [pc, #92]	; (800d5f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	61fb      	str	r3, [r7, #28]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	61bb      	str	r3, [r7, #24]
 800d5a4:	e00b      	b.n	800d5be <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	1c59      	adds	r1, r3, #1
 800d5ae:	61f9      	str	r1, [r7, #28]
 800d5b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d5b4:	b2d2      	uxtb	r2, r2
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	09db      	lsrs	r3, r3, #7
 800d5bc:	61bb      	str	r3, [r7, #24]
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d5c2:	d8f0      	bhi.n	800d5a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	61fa      	str	r2, [r7, #28]
 800d5ca:	69ba      	ldr	r2, [r7, #24]
 800d5cc:	b2d2      	uxtb	r2, r2
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d5d4:	2206      	movs	r2, #6
 800d5d6:	68f9      	ldr	r1, [r7, #12]
 800d5d8:	6938      	ldr	r0, [r7, #16]
 800d5da:	f7ff f8f1 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f383 8811 	msr	BASEPRI, r3
}
 800d5e4:	bf00      	nop
 800d5e6:	3720      	adds	r7, #32
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	2000446c 	.word	0x2000446c
 800d5f0:	2000443c 	.word	0x2000443c

0800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08a      	sub	sp, #40	; 0x28
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d5fe:	f3ef 8311 	mrs	r3, BASEPRI
 800d602:	f04f 0120 	mov.w	r1, #32
 800d606:	f381 8811 	msr	BASEPRI, r1
 800d60a:	617b      	str	r3, [r7, #20]
 800d60c:	4827      	ldr	r0, [pc, #156]	; (800d6ac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d60e:	f7fe ffe7 	bl	800c5e0 <_PreparePacket>
 800d612:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d618:	4b25      	ldr	r3, [pc, #148]	; (800d6b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	627b      	str	r3, [r7, #36]	; 0x24
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	623b      	str	r3, [r7, #32]
 800d62a:	e00b      	b.n	800d644 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	1c59      	adds	r1, r3, #1
 800d634:	6279      	str	r1, [r7, #36]	; 0x24
 800d636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d63a:	b2d2      	uxtb	r2, r2
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	09db      	lsrs	r3, r3, #7
 800d642:	623b      	str	r3, [r7, #32]
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	2b7f      	cmp	r3, #127	; 0x7f
 800d648:	d8f0      	bhi.n	800d62c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	627a      	str	r2, [r7, #36]	; 0x24
 800d650:	6a3a      	ldr	r2, [r7, #32]
 800d652:	b2d2      	uxtb	r2, r2
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	61fb      	str	r3, [r7, #28]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	61bb      	str	r3, [r7, #24]
 800d662:	e00b      	b.n	800d67c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	b2da      	uxtb	r2, r3
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	1c59      	adds	r1, r3, #1
 800d66c:	61f9      	str	r1, [r7, #28]
 800d66e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d672:	b2d2      	uxtb	r2, r2
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	09db      	lsrs	r3, r3, #7
 800d67a:	61bb      	str	r3, [r7, #24]
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2b7f      	cmp	r3, #127	; 0x7f
 800d680:	d8f0      	bhi.n	800d664 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	61fa      	str	r2, [r7, #28]
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	701a      	strb	r2, [r3, #0]
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d692:	2207      	movs	r2, #7
 800d694:	68f9      	ldr	r1, [r7, #12]
 800d696:	6938      	ldr	r0, [r7, #16]
 800d698:	f7ff f892 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f383 8811 	msr	BASEPRI, r3
}
 800d6a2:	bf00      	nop
 800d6a4:	3728      	adds	r7, #40	; 0x28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	2000446c 	.word	0x2000446c
 800d6b0:	2000443c 	.word	0x2000443c

0800d6b4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d6bc:	4b04      	ldr	r3, [pc, #16]	; (800d6d0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	1ad3      	subs	r3, r2, r3
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	2000443c 	.word	0x2000443c

0800d6d4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08c      	sub	sp, #48	; 0x30
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d6de:	4b3b      	ldr	r3, [pc, #236]	; (800d7cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d06d      	beq.n	800d7c2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d6e6:	4b39      	ldr	r3, [pc, #228]	; (800d7cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6f0:	e008      	b.n	800d704 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d007      	beq.n	800d70e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	3301      	adds	r3, #1
 800d702:	62bb      	str	r3, [r7, #40]	; 0x28
 800d704:	79fb      	ldrb	r3, [r7, #7]
 800d706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d708:	429a      	cmp	r2, r3
 800d70a:	d3f2      	bcc.n	800d6f2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800d70c:	e000      	b.n	800d710 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d70e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	2b00      	cmp	r3, #0
 800d714:	d055      	beq.n	800d7c2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d716:	f3ef 8311 	mrs	r3, BASEPRI
 800d71a:	f04f 0120 	mov.w	r1, #32
 800d71e:	f381 8811 	msr	BASEPRI, r1
 800d722:	617b      	str	r3, [r7, #20]
 800d724:	482a      	ldr	r0, [pc, #168]	; (800d7d0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d726:	f7fe ff5b 	bl	800c5e0 <_PreparePacket>
 800d72a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	627b      	str	r3, [r7, #36]	; 0x24
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	623b      	str	r3, [r7, #32]
 800d738:	e00b      	b.n	800d752 <SEGGER_SYSVIEW_SendModule+0x7e>
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	1c59      	adds	r1, r3, #1
 800d742:	6279      	str	r1, [r7, #36]	; 0x24
 800d744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d748:	b2d2      	uxtb	r2, r2
 800d74a:	701a      	strb	r2, [r3, #0]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	09db      	lsrs	r3, r3, #7
 800d750:	623b      	str	r3, [r7, #32]
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	2b7f      	cmp	r3, #127	; 0x7f
 800d756:	d8f0      	bhi.n	800d73a <SEGGER_SYSVIEW_SendModule+0x66>
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	627a      	str	r2, [r7, #36]	; 0x24
 800d75e:	6a3a      	ldr	r2, [r7, #32]
 800d760:	b2d2      	uxtb	r2, r2
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	61bb      	str	r3, [r7, #24]
 800d772:	e00b      	b.n	800d78c <SEGGER_SYSVIEW_SendModule+0xb8>
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	b2da      	uxtb	r2, r3
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	1c59      	adds	r1, r3, #1
 800d77c:	61f9      	str	r1, [r7, #28]
 800d77e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d782:	b2d2      	uxtb	r2, r2
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	09db      	lsrs	r3, r3, #7
 800d78a:	61bb      	str	r3, [r7, #24]
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	2b7f      	cmp	r3, #127	; 0x7f
 800d790:	d8f0      	bhi.n	800d774 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	61fa      	str	r2, [r7, #28]
 800d798:	69ba      	ldr	r2, [r7, #24]
 800d79a:	b2d2      	uxtb	r2, r2
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2280      	movs	r2, #128	; 0x80
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7fe fec8 	bl	800c540 <_EncodeStr>
 800d7b0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d7b2:	2216      	movs	r2, #22
 800d7b4:	68f9      	ldr	r1, [r7, #12]
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f7ff f802 	bl	800c7c0 <_SendPacket>
      RECORD_END();
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d7c2:	bf00      	nop
 800d7c4:	3730      	adds	r7, #48	; 0x30
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20004464 	.word	0x20004464
 800d7d0:	2000446c 	.word	0x2000446c

0800d7d4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d7da:	4b0c      	ldr	r3, [pc, #48]	; (800d80c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00f      	beq.n	800d802 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d7e2:	4b0a      	ldr	r3, [pc, #40]	; (800d80c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d002      	beq.n	800d7f6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1f2      	bne.n	800d7e8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d802:	bf00      	nop
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	20004464 	.word	0x20004464

0800d810 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d816:	f3ef 8311 	mrs	r3, BASEPRI
 800d81a:	f04f 0120 	mov.w	r1, #32
 800d81e:	f381 8811 	msr	BASEPRI, r1
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	4817      	ldr	r0, [pc, #92]	; (800d884 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d826:	f7fe fedb 	bl	800c5e0 <_PreparePacket>
 800d82a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	617b      	str	r3, [r7, #20]
 800d834:	4b14      	ldr	r3, [pc, #80]	; (800d888 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	613b      	str	r3, [r7, #16]
 800d83a:	e00b      	b.n	800d854 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	1c59      	adds	r1, r3, #1
 800d844:	6179      	str	r1, [r7, #20]
 800d846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d84a:	b2d2      	uxtb	r2, r2
 800d84c:	701a      	strb	r2, [r3, #0]
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	09db      	lsrs	r3, r3, #7
 800d852:	613b      	str	r3, [r7, #16]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	2b7f      	cmp	r3, #127	; 0x7f
 800d858:	d8f0      	bhi.n	800d83c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	617a      	str	r2, [r7, #20]
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	b2d2      	uxtb	r2, r2
 800d864:	701a      	strb	r2, [r3, #0]
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d86a:	221b      	movs	r2, #27
 800d86c:	6879      	ldr	r1, [r7, #4]
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f7fe ffa6 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f383 8811 	msr	BASEPRI, r3
}
 800d87a:	bf00      	nop
 800d87c:	3718      	adds	r7, #24
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	2000446c 	.word	0x2000446c
 800d888:	20004468 	.word	0x20004468

0800d88c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	; 0x28
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d894:	f3ef 8311 	mrs	r3, BASEPRI
 800d898:	f04f 0120 	mov.w	r1, #32
 800d89c:	f381 8811 	msr	BASEPRI, r1
 800d8a0:	617b      	str	r3, [r7, #20]
 800d8a2:	4827      	ldr	r0, [pc, #156]	; (800d940 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d8a4:	f7fe fe9c 	bl	800c5e0 <_PreparePacket>
 800d8a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d8aa:	2280      	movs	r2, #128	; 0x80
 800d8ac:	6879      	ldr	r1, [r7, #4]
 800d8ae:	6938      	ldr	r0, [r7, #16]
 800d8b0:	f7fe fe46 	bl	800c540 <_EncodeStr>
 800d8b4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	623b      	str	r3, [r7, #32]
 800d8be:	e00b      	b.n	800d8d8 <SEGGER_SYSVIEW_Warn+0x4c>
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	1c59      	adds	r1, r3, #1
 800d8c8:	6279      	str	r1, [r7, #36]	; 0x24
 800d8ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d8ce:	b2d2      	uxtb	r2, r2
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	09db      	lsrs	r3, r3, #7
 800d8d6:	623b      	str	r3, [r7, #32]
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	2b7f      	cmp	r3, #127	; 0x7f
 800d8dc:	d8f0      	bhi.n	800d8c0 <SEGGER_SYSVIEW_Warn+0x34>
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	627a      	str	r2, [r7, #36]	; 0x24
 800d8e4:	6a3a      	ldr	r2, [r7, #32]
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	701a      	strb	r2, [r3, #0]
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	61bb      	str	r3, [r7, #24]
 800d8f6:	e00b      	b.n	800d910 <SEGGER_SYSVIEW_Warn+0x84>
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	1c59      	adds	r1, r3, #1
 800d900:	61f9      	str	r1, [r7, #28]
 800d902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	09db      	lsrs	r3, r3, #7
 800d90e:	61bb      	str	r3, [r7, #24]
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	2b7f      	cmp	r3, #127	; 0x7f
 800d914:	d8f0      	bhi.n	800d8f8 <SEGGER_SYSVIEW_Warn+0x6c>
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	1c5a      	adds	r2, r3, #1
 800d91a:	61fa      	str	r2, [r7, #28]
 800d91c:	69ba      	ldr	r2, [r7, #24]
 800d91e:	b2d2      	uxtb	r2, r2
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d926:	221a      	movs	r2, #26
 800d928:	68f9      	ldr	r1, [r7, #12]
 800d92a:	6938      	ldr	r0, [r7, #16]
 800d92c:	f7fe ff48 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f383 8811 	msr	BASEPRI, r3
}
 800d936:	bf00      	nop
 800d938:	3728      	adds	r7, #40	; 0x28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	2000446c 	.word	0x2000446c

0800d944 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800d948:	4803      	ldr	r0, [pc, #12]	; (800d958 <_cbSendSystemDesc+0x14>)
 800d94a:	f7ff fca1 	bl	800d290 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800d94e:	4803      	ldr	r0, [pc, #12]	; (800d95c <_cbSendSystemDesc+0x18>)
 800d950:	f7ff fc9e 	bl	800d290 <SEGGER_SYSVIEW_SendSysDesc>
}
 800d954:	bf00      	nop
 800d956:	bd80      	pop	{r7, pc}
 800d958:	08015350 	.word	0x08015350
 800d95c:	08015384 	.word	0x08015384

0800d960 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800d960:	b580      	push	{r7, lr}
 800d962:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800d964:	4b06      	ldr	r3, [pc, #24]	; (800d980 <SEGGER_SYSVIEW_Conf+0x20>)
 800d966:	6818      	ldr	r0, [r3, #0]
 800d968:	4b05      	ldr	r3, [pc, #20]	; (800d980 <SEGGER_SYSVIEW_Conf+0x20>)
 800d96a:	6819      	ldr	r1, [r3, #0]
 800d96c:	4b05      	ldr	r3, [pc, #20]	; (800d984 <SEGGER_SYSVIEW_Conf+0x24>)
 800d96e:	4a06      	ldr	r2, [pc, #24]	; (800d988 <SEGGER_SYSVIEW_Conf+0x28>)
 800d970:	f7ff f80c 	bl	800c98c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800d974:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d978:	f7ff f84c 	bl	800ca14 <SEGGER_SYSVIEW_SetRAMBase>
}
 800d97c:	bf00      	nop
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20000014 	.word	0x20000014
 800d984:	0800d945 	.word	0x0800d945
 800d988:	08015be8 	.word	0x08015be8

0800d98c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98e:	b085      	sub	sp, #20
 800d990:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
 800d996:	e048      	b.n	800da2a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800d998:	4929      	ldr	r1, [pc, #164]	; (800da40 <_cbSendTaskList+0xb4>)
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	4613      	mov	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	440b      	add	r3, r1
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fd fd93 	bl	800b4d4 <uxTaskGetStackHighWaterMark>
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	4823      	ldr	r0, [pc, #140]	; (800da40 <_cbSendTaskList+0xb4>)
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	4403      	add	r3, r0
 800d9be:	3310      	adds	r3, #16
 800d9c0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800d9c2:	491f      	ldr	r1, [pc, #124]	; (800da40 <_cbSendTaskList+0xb4>)
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4413      	add	r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	440b      	add	r3, r1
 800d9d0:	6818      	ldr	r0, [r3, #0]
 800d9d2:	491b      	ldr	r1, [pc, #108]	; (800da40 <_cbSendTaskList+0xb4>)
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	4413      	add	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	440b      	add	r3, r1
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	6819      	ldr	r1, [r3, #0]
 800d9e4:	4c16      	ldr	r4, [pc, #88]	; (800da40 <_cbSendTaskList+0xb4>)
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	4423      	add	r3, r4
 800d9f2:	3308      	adds	r3, #8
 800d9f4:	681c      	ldr	r4, [r3, #0]
 800d9f6:	4d12      	ldr	r5, [pc, #72]	; (800da40 <_cbSendTaskList+0xb4>)
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	442b      	add	r3, r5
 800da04:	330c      	adds	r3, #12
 800da06:	681d      	ldr	r5, [r3, #0]
 800da08:	4e0d      	ldr	r6, [pc, #52]	; (800da40 <_cbSendTaskList+0xb4>)
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	4613      	mov	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	4433      	add	r3, r6
 800da16:	3310      	adds	r3, #16
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	462b      	mov	r3, r5
 800da1e:	4622      	mov	r2, r4
 800da20:	f000 f97a 	bl	800dd18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3301      	adds	r3, #1
 800da28:	607b      	str	r3, [r7, #4]
 800da2a:	4b06      	ldr	r3, [pc, #24]	; (800da44 <_cbSendTaskList+0xb8>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	429a      	cmp	r2, r3
 800da32:	d3b1      	bcc.n	800d998 <_cbSendTaskList+0xc>
  }
}
 800da34:	bf00      	nop
 800da36:	bf00      	nop
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da3e:	bf00      	nop
 800da40:	20004550 	.word	0x20004550
 800da44:	200045f0 	.word	0x200045f0

0800da48 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800da48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800da50:	f7fd f9fa 	bl	800ae48 <xTaskGetTickCountFromISR>
 800da54:	4603      	mov	r3, r0
 800da56:	2200      	movs	r2, #0
 800da58:	469a      	mov	sl, r3
 800da5a:	4693      	mov	fp, r2
 800da5c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800da60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	f04f 0a00 	mov.w	sl, #0
 800da6c:	f04f 0b00 	mov.w	fp, #0
 800da70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800da74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800da78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800da7c:	4652      	mov	r2, sl
 800da7e:	465b      	mov	r3, fp
 800da80:	1a14      	subs	r4, r2, r0
 800da82:	eb63 0501 	sbc.w	r5, r3, r1
 800da86:	f04f 0200 	mov.w	r2, #0
 800da8a:	f04f 0300 	mov.w	r3, #0
 800da8e:	00ab      	lsls	r3, r5, #2
 800da90:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800da94:	00a2      	lsls	r2, r4, #2
 800da96:	4614      	mov	r4, r2
 800da98:	461d      	mov	r5, r3
 800da9a:	eb14 0800 	adds.w	r8, r4, r0
 800da9e:	eb45 0901 	adc.w	r9, r5, r1
 800daa2:	f04f 0200 	mov.w	r2, #0
 800daa6:	f04f 0300 	mov.w	r3, #0
 800daaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800daae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dab6:	4690      	mov	r8, r2
 800dab8:	4699      	mov	r9, r3
 800daba:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800dabe:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800dac2:	4610      	mov	r0, r2
 800dac4:	4619      	mov	r1, r3
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800dad0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af02      	add	r7, sp, #8
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800dade:	2205      	movs	r2, #5
 800dae0:	492b      	ldr	r1, [pc, #172]	; (800db90 <SYSVIEW_AddTask+0xc0>)
 800dae2:	68b8      	ldr	r0, [r7, #8]
 800dae4:	f006 fec0 	bl	8014868 <memcmp>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d04b      	beq.n	800db86 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800daee:	4b29      	ldr	r3, [pc, #164]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2b07      	cmp	r3, #7
 800daf4:	d903      	bls.n	800dafe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800daf6:	4828      	ldr	r0, [pc, #160]	; (800db98 <SYSVIEW_AddTask+0xc8>)
 800daf8:	f7ff fec8 	bl	800d88c <SEGGER_SYSVIEW_Warn>
    return;
 800dafc:	e044      	b.n	800db88 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800dafe:	4b25      	ldr	r3, [pc, #148]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	4926      	ldr	r1, [pc, #152]	; (800db9c <SYSVIEW_AddTask+0xcc>)
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800db12:	4b20      	ldr	r3, [pc, #128]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	4921      	ldr	r1, [pc, #132]	; (800db9c <SYSVIEW_AddTask+0xcc>)
 800db18:	4613      	mov	r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4413      	add	r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	440b      	add	r3, r1
 800db22:	3304      	adds	r3, #4
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800db28:	4b1a      	ldr	r3, [pc, #104]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	491b      	ldr	r1, [pc, #108]	; (800db9c <SYSVIEW_AddTask+0xcc>)
 800db2e:	4613      	mov	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	440b      	add	r3, r1
 800db38:	3308      	adds	r3, #8
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800db3e:	4b15      	ldr	r3, [pc, #84]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	4916      	ldr	r1, [pc, #88]	; (800db9c <SYSVIEW_AddTask+0xcc>)
 800db44:	4613      	mov	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	440b      	add	r3, r1
 800db4e:	330c      	adds	r3, #12
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800db54:	4b0f      	ldr	r3, [pc, #60]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	4910      	ldr	r1, [pc, #64]	; (800db9c <SYSVIEW_AddTask+0xcc>)
 800db5a:	4613      	mov	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	440b      	add	r3, r1
 800db64:	3310      	adds	r3, #16
 800db66:	69ba      	ldr	r2, [r7, #24]
 800db68:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800db6a:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	3301      	adds	r3, #1
 800db70:	4a08      	ldr	r2, [pc, #32]	; (800db94 <SYSVIEW_AddTask+0xc4>)
 800db72:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	68b9      	ldr	r1, [r7, #8]
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f000 f8ca 	bl	800dd18 <SYSVIEW_SendTaskInfo>
 800db84:	e000      	b.n	800db88 <SYSVIEW_AddTask+0xb8>
    return;
 800db86:	bf00      	nop

}
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	08015394 	.word	0x08015394
 800db94:	200045f0 	.word	0x200045f0
 800db98:	0801539c 	.word	0x0801539c
 800db9c:	20004550 	.word	0x20004550

0800dba0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800dba8:	4b59      	ldr	r3, [pc, #356]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f000 80ab 	beq.w	800dd08 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60fb      	str	r3, [r7, #12]
 800dbb6:	e00d      	b.n	800dbd4 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800dbb8:	4956      	ldr	r1, [pc, #344]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	440b      	add	r3, r1
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d008      	beq.n	800dbe0 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	4b4e      	ldr	r3, [pc, #312]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d3ec      	bcc.n	800dbb8 <SYSVIEW_DeleteTask+0x18>
 800dbde:	e000      	b.n	800dbe2 <SYSVIEW_DeleteTask+0x42>
      break;
 800dbe0:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800dbe2:	4b4b      	ldr	r3, [pc, #300]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d111      	bne.n	800dc12 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4a46      	ldr	r2, [pc, #280]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dbfa:	4413      	add	r3, r2
 800dbfc:	2214      	movs	r2, #20
 800dbfe:	2100      	movs	r1, #0
 800dc00:	4618      	mov	r0, r3
 800dc02:	f006 fe4f 	bl	80148a4 <memset>
    _NumTasks--;
 800dc06:	4b42      	ldr	r3, [pc, #264]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	4a40      	ldr	r2, [pc, #256]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dc0e:	6013      	str	r3, [r2, #0]
 800dc10:	e07b      	b.n	800dd0a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800dc12:	4b3f      	ldr	r3, [pc, #252]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d276      	bcs.n	800dd0a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800dc1c:	4b3c      	ldr	r3, [pc, #240]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	1e5a      	subs	r2, r3, #1
 800dc22:	493c      	ldr	r1, [pc, #240]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dc24:	4613      	mov	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	440b      	add	r3, r1
 800dc2e:	6819      	ldr	r1, [r3, #0]
 800dc30:	4838      	ldr	r0, [pc, #224]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	4613      	mov	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4413      	add	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4403      	add	r3, r0
 800dc3e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800dc40:	4b33      	ldr	r3, [pc, #204]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	1e5a      	subs	r2, r3, #1
 800dc46:	4933      	ldr	r1, [pc, #204]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	440b      	add	r3, r1
 800dc52:	3304      	adds	r3, #4
 800dc54:	6819      	ldr	r1, [r3, #0]
 800dc56:	482f      	ldr	r0, [pc, #188]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4403      	add	r3, r0
 800dc64:	3304      	adds	r3, #4
 800dc66:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800dc68:	4b29      	ldr	r3, [pc, #164]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	1e5a      	subs	r2, r3, #1
 800dc6e:	4929      	ldr	r1, [pc, #164]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dc70:	4613      	mov	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	440b      	add	r3, r1
 800dc7a:	3308      	adds	r3, #8
 800dc7c:	6819      	ldr	r1, [r3, #0]
 800dc7e:	4825      	ldr	r0, [pc, #148]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	4613      	mov	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4413      	add	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4403      	add	r3, r0
 800dc8c:	3308      	adds	r3, #8
 800dc8e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800dc90:	4b1f      	ldr	r3, [pc, #124]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	1e5a      	subs	r2, r3, #1
 800dc96:	491f      	ldr	r1, [pc, #124]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dc98:	4613      	mov	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	440b      	add	r3, r1
 800dca2:	330c      	adds	r3, #12
 800dca4:	6819      	ldr	r1, [r3, #0]
 800dca6:	481b      	ldr	r0, [pc, #108]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	4413      	add	r3, r2
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4403      	add	r3, r0
 800dcb4:	330c      	adds	r3, #12
 800dcb6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800dcb8:	4b15      	ldr	r3, [pc, #84]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	1e5a      	subs	r2, r3, #1
 800dcbe:	4915      	ldr	r1, [pc, #84]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4413      	add	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	440b      	add	r3, r1
 800dcca:	3310      	adds	r3, #16
 800dccc:	6819      	ldr	r1, [r3, #0]
 800dcce:	4811      	ldr	r0, [pc, #68]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	4413      	add	r3, r2
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4403      	add	r3, r0
 800dcdc:	3310      	adds	r3, #16
 800dcde:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800dce0:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	1e5a      	subs	r2, r3, #1
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	4a09      	ldr	r2, [pc, #36]	; (800dd14 <SYSVIEW_DeleteTask+0x174>)
 800dcf0:	4413      	add	r3, r2
 800dcf2:	2214      	movs	r2, #20
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f006 fdd4 	bl	80148a4 <memset>
    _NumTasks--;
 800dcfc:	4b04      	ldr	r3, [pc, #16]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	4a03      	ldr	r2, [pc, #12]	; (800dd10 <SYSVIEW_DeleteTask+0x170>)
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	e000      	b.n	800dd0a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800dd08:	bf00      	nop
  }
}
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	200045f0 	.word	0x200045f0
 800dd14:	20004550 	.word	0x20004550

0800dd18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b08a      	sub	sp, #40	; 0x28
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
 800dd24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800dd26:	f107 0314 	add.w	r3, r7, #20
 800dd2a:	2214      	movs	r2, #20
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f006 fdb8 	bl	80148a4 <memset>
  TaskInfo.TaskID     = TaskID;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800dd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800dd48:	f107 0314 	add.w	r3, r7, #20
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7ff f9a7 	bl	800d0a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800dd52:	bf00      	nop
 800dd54:	3728      	adds	r7, #40	; 0x28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800dd5a:	b480      	push	{r7}
 800dd5c:	b083      	sub	sp, #12
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	460b      	mov	r3, r1
 800dd64:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	78fa      	ldrb	r2, [r7, #3]
 800dd6a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800dd6e:	bf00      	nop
 800dd70:	370c      	adds	r7, #12
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b086      	sub	sp, #24
 800dd7e:	af02      	add	r7, sp, #8
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	4608      	mov	r0, r1
 800dd84:	4611      	mov	r1, r2
 800dd86:	461a      	mov	r2, r3
 800dd88:	4603      	mov	r3, r0
 800dd8a:	70fb      	strb	r3, [r7, #3]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70bb      	strb	r3, [r7, #2]
 800dd90:	4613      	mov	r3, r2
 800dd92:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800dd9a:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bf0c      	ite	eq
 800dda2:	2301      	moveq	r3, #1
 800dda4:	2300      	movne	r3, #0
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	737b      	strb	r3, [r7, #13]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800ddaa:	78fa      	ldrb	r2, [r7, #3]
 800ddac:	787b      	ldrb	r3, [r7, #1]
 800ddae:	4413      	add	r3, r2
 800ddb0:	b2d8      	uxtb	r0, r3
 800ddb2:	78bb      	ldrb	r3, [r7, #2]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	78ba      	ldrb	r2, [r7, #2]
 800ddba:	78f9      	ldrb	r1, [r7, #3]
 800ddbc:	9300      	str	r3, [sp, #0]
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 ffe7 	bl	800ed94 <u8g2_IsIntersection>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d040      	beq.n	800de4e <u8g2_DrawHorizontalBitmap+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 800ddcc:	2380      	movs	r3, #128	; 0x80
 800ddce:	73fb      	strb	r3, [r7, #15]
  while(len > 0)
 800ddd0:	e035      	b.n	800de3e <u8g2_DrawHorizontalBitmap+0xc4>
  {
    if ( *b & mask ) {
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	781a      	ldrb	r2, [r3, #0]
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
 800ddd8:	4013      	ands	r3, r2
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00c      	beq.n	800ddfa <u8g2_DrawHorizontalBitmap+0x80>
      u8g2->draw_color = color;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	7bba      	ldrb	r2, [r7, #14]
 800dde4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800dde8:	78ba      	ldrb	r2, [r7, #2]
 800ddea:	78f9      	ldrb	r1, [r7, #3]
 800ddec:	2300      	movs	r3, #0
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 ff01 	bl	800ebfa <u8g2_DrawHVLine>
 800ddf8:	e010      	b.n	800de1c <u8g2_DrawHorizontalBitmap+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10b      	bne.n	800de1c <u8g2_DrawHorizontalBitmap+0xa2>
      u8g2->draw_color = ncolor;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	7b7a      	ldrb	r2, [r7, #13]
 800de08:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800de0c:	78ba      	ldrb	r2, [r7, #2]
 800de0e:	78f9      	ldrb	r1, [r7, #3]
 800de10:	2300      	movs	r3, #0
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	2301      	movs	r3, #1
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 feef 	bl	800ebfa <u8g2_DrawHVLine>
    }

    x++;
 800de1c:	78fb      	ldrb	r3, [r7, #3]
 800de1e:	3301      	adds	r3, #1
 800de20:	70fb      	strb	r3, [r7, #3]
    mask >>= 1;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	085b      	lsrs	r3, r3, #1
 800de26:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 800de28:	7bfb      	ldrb	r3, [r7, #15]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d104      	bne.n	800de38 <u8g2_DrawHorizontalBitmap+0xbe>
    {
      mask = 128;
 800de2e:	2380      	movs	r3, #128	; 0x80
 800de30:	73fb      	strb	r3, [r7, #15]
      b++;
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	3301      	adds	r3, #1
 800de36:	61bb      	str	r3, [r7, #24]
    }
    len--;
 800de38:	787b      	ldrb	r3, [r7, #1]
 800de3a:	3b01      	subs	r3, #1
 800de3c:	707b      	strb	r3, [r7, #1]
  while(len > 0)
 800de3e:	787b      	ldrb	r3, [r7, #1]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1c6      	bne.n	800ddd2 <u8g2_DrawHorizontalBitmap+0x58>
  }
  u8g2->draw_color = color;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7bba      	ldrb	r2, [r7, #14]
 800de48:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 800de4c:	e000      	b.n	800de50 <u8g2_DrawHorizontalBitmap+0xd6>
    return;
 800de4e:	bf00      	nop
}
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b086      	sub	sp, #24
 800de5a:	af02      	add	r7, sp, #8
 800de5c:	6078      	str	r0, [r7, #4]
 800de5e:	4608      	mov	r0, r1
 800de60:	4611      	mov	r1, r2
 800de62:	461a      	mov	r2, r3
 800de64:	4603      	mov	r3, r0
 800de66:	70fb      	strb	r3, [r7, #3]
 800de68:	460b      	mov	r3, r1
 800de6a:	70bb      	strb	r3, [r7, #2]
 800de6c:	4613      	mov	r3, r2
 800de6e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t w;
  w = cnt;
 800de70:	787b      	ldrb	r3, [r7, #1]
 800de72:	73fb      	strb	r3, [r7, #15]
  w *= 8;
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	00db      	lsls	r3, r3, #3
 800de78:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800de7a:	78fa      	ldrb	r2, [r7, #3]
 800de7c:	7bfb      	ldrb	r3, [r7, #15]
 800de7e:	4413      	add	r3, r2
 800de80:	b2d8      	uxtb	r0, r3
 800de82:	78ba      	ldrb	r2, [r7, #2]
 800de84:	7e3b      	ldrb	r3, [r7, #24]
 800de86:	4413      	add	r3, r2
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	78ba      	ldrb	r2, [r7, #2]
 800de8c:	78f9      	ldrb	r1, [r7, #3]
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	4603      	mov	r3, r0
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 ff7e 	bl	800ed94 <u8g2_IsIntersection>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d017      	beq.n	800dece <u8g2_DrawBitmap+0x78>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800de9e:	e012      	b.n	800dec6 <u8g2_DrawBitmap+0x70>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 800dea0:	7bf8      	ldrb	r0, [r7, #15]
 800dea2:	78ba      	ldrb	r2, [r7, #2]
 800dea4:	78f9      	ldrb	r1, [r7, #3]
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	4603      	mov	r3, r0
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7ff ff64 	bl	800dd7a <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 800deb2:	787b      	ldrb	r3, [r7, #1]
 800deb4:	69fa      	ldr	r2, [r7, #28]
 800deb6:	4413      	add	r3, r2
 800deb8:	61fb      	str	r3, [r7, #28]
    y++;
 800deba:	78bb      	ldrb	r3, [r7, #2]
 800debc:	3301      	adds	r3, #1
 800debe:	70bb      	strb	r3, [r7, #2]
    h--;
 800dec0:	7e3b      	ldrb	r3, [r7, #24]
 800dec2:	3b01      	subs	r3, #1
 800dec4:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 800dec6:	7e3b      	ldrb	r3, [r7, #24]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e9      	bne.n	800dea0 <u8g2_DrawBitmap+0x4a>
 800decc:	e000      	b.n	800ded0 <u8g2_DrawBitmap+0x7a>
    return;
 800dece:	bf00      	nop
  }
}
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b086      	sub	sp, #24
 800deda:	af02      	add	r7, sp, #8
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	460b      	mov	r3, r1
 800dee0:	70fb      	strb	r3, [r7, #3]
 800dee2:	4613      	mov	r3, r2
 800dee4:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	7c1b      	ldrb	r3, [r3, #16]
 800deec:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800deee:	78fb      	ldrb	r3, [r7, #3]
 800def0:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def6:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	b29b      	uxth	r3, r3
 800defc:	89ba      	ldrh	r2, [r7, #12]
 800defe:	fb12 f303 	smulbb	r3, r2, r3
 800df02:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800df04:	89bb      	ldrh	r3, [r7, #12]
 800df06:	00db      	lsls	r3, r3, #3
 800df08:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800df0a:	89bb      	ldrh	r3, [r7, #12]
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	4413      	add	r3, r2
 800df10:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800df12:	7bf9      	ldrb	r1, [r7, #15]
 800df14:	78ba      	ldrb	r2, [r7, #2]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	460b      	mov	r3, r1
 800df1c:	2100      	movs	r1, #0
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f001 fbe9 	bl	800f6f6 <u8x8_DrawTile>
}
 800df24:	bf00      	nop
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df3e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df46:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	7c5b      	ldrb	r3, [r3, #17]
 800df4e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800df50:	7bba      	ldrb	r2, [r7, #14]
 800df52:	7bfb      	ldrb	r3, [r7, #15]
 800df54:	4619      	mov	r1, r3
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7ff ffbd 	bl	800ded6 <u8g2_send_tile_row>
    src_row++;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	3301      	adds	r3, #1
 800df60:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800df62:	7bbb      	ldrb	r3, [r7, #14]
 800df64:	3301      	adds	r3, #1
 800df66:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800df68:	7bfa      	ldrb	r2, [r7, #15]
 800df6a:	7b7b      	ldrb	r3, [r7, #13]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d203      	bcs.n	800df78 <u8g2_send_buffer+0x4c>
 800df70:	7bba      	ldrb	r2, [r7, #14]
 800df72:	7b3b      	ldrb	r3, [r7, #12]
 800df74:	429a      	cmp	r2, r3
 800df76:	d3eb      	bcc.n	800df50 <u8g2_send_buffer+0x24>
}
 800df78:	bf00      	nop
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7ff ffcf 	bl	800df2c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f001 fc02 	bl	800f798 <u8x8_RefreshDisplay>
}
 800df94:	bf00      	nop
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2208      	movs	r2, #8
 800dfa8:	701a      	strb	r2, [r3, #0]
  return buf;
 800dfaa:	4b03      	ldr	r3, [pc, #12]	; (800dfb8 <u8g2_m_16_8_f+0x1c>)
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	200045f4 	.word	0x200045f4

0800dfbc <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b088      	sub	sp, #32
 800dfc0:	af02      	add	r7, sp, #8
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
 800dfc8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4a0b      	ldr	r2, [pc, #44]	; (800e000 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800dfd2:	490c      	ldr	r1, [pc, #48]	; (800e004 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f001 fc43 	bl	800f860 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800dfda:	f107 0313 	add.w	r3, r7, #19
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff ffdc 	bl	800df9c <u8g2_m_16_8_f>
 800dfe4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800dfe6:	7cfa      	ldrb	r2, [r7, #19]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	4b06      	ldr	r3, [pc, #24]	; (800e008 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800dfee:	6979      	ldr	r1, [r7, #20]
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 ffb8 	bl	800ef66 <u8g2_SetupBuffer>
}
 800dff6:	bf00      	nop
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	0800f419 	.word	0x0800f419
 800e004:	0800f5f1 	.word	0x0800f5f1
 800e008:	0800edeb 	.word	0x0800edeb

0800e00c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	460b      	mov	r3, r1
 800e016:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800e018:	78fb      	ldrb	r3, [r7, #3]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	4413      	add	r3, r2
 800e01e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	781b      	ldrb	r3, [r3, #0]
}
 800e024:	4618      	mov	r0, r3
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800e03c:	78fb      	ldrb	r3, [r7, #3]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	4413      	add	r3, r2
 800e042:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	81fb      	strh	r3, [r7, #14]
    font++;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	3301      	adds	r3, #1
 800e04e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800e050:	89fb      	ldrh	r3, [r7, #14]
 800e052:	021b      	lsls	r3, r3, #8
 800e054:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	89fb      	ldrh	r3, [r7, #14]
 800e05e:	4413      	add	r3, r2
 800e060:	81fb      	strh	r3, [r7, #14]
    return pos;
 800e062:	89fb      	ldrh	r3, [r7, #14]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800e07a:	2100      	movs	r1, #0
 800e07c:	6838      	ldr	r0, [r7, #0]
 800e07e:	f7ff ffc5 	bl	800e00c <u8g2_font_get_byte>
 800e082:	4603      	mov	r3, r0
 800e084:	461a      	mov	r2, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800e08a:	2101      	movs	r1, #1
 800e08c:	6838      	ldr	r0, [r7, #0]
 800e08e:	f7ff ffbd 	bl	800e00c <u8g2_font_get_byte>
 800e092:	4603      	mov	r3, r0
 800e094:	461a      	mov	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800e09a:	2102      	movs	r1, #2
 800e09c:	6838      	ldr	r0, [r7, #0]
 800e09e:	f7ff ffb5 	bl	800e00c <u8g2_font_get_byte>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800e0aa:	2103      	movs	r1, #3
 800e0ac:	6838      	ldr	r0, [r7, #0]
 800e0ae:	f7ff ffad 	bl	800e00c <u8g2_font_get_byte>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800e0ba:	2104      	movs	r1, #4
 800e0bc:	6838      	ldr	r0, [r7, #0]
 800e0be:	f7ff ffa5 	bl	800e00c <u8g2_font_get_byte>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800e0ca:	2105      	movs	r1, #5
 800e0cc:	6838      	ldr	r0, [r7, #0]
 800e0ce:	f7ff ff9d 	bl	800e00c <u8g2_font_get_byte>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800e0da:	2106      	movs	r1, #6
 800e0dc:	6838      	ldr	r0, [r7, #0]
 800e0de:	f7ff ff95 	bl	800e00c <u8g2_font_get_byte>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800e0ea:	2107      	movs	r1, #7
 800e0ec:	6838      	ldr	r0, [r7, #0]
 800e0ee:	f7ff ff8d 	bl	800e00c <u8g2_font_get_byte>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800e0fa:	2108      	movs	r1, #8
 800e0fc:	6838      	ldr	r0, [r7, #0]
 800e0fe:	f7ff ff85 	bl	800e00c <u8g2_font_get_byte>
 800e102:	4603      	mov	r3, r0
 800e104:	461a      	mov	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800e10a:	2109      	movs	r1, #9
 800e10c:	6838      	ldr	r0, [r7, #0]
 800e10e:	f7ff ff7d 	bl	800e00c <u8g2_font_get_byte>
 800e112:	4603      	mov	r3, r0
 800e114:	b25a      	sxtb	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800e11a:	210a      	movs	r1, #10
 800e11c:	6838      	ldr	r0, [r7, #0]
 800e11e:	f7ff ff75 	bl	800e00c <u8g2_font_get_byte>
 800e122:	4603      	mov	r3, r0
 800e124:	b25a      	sxtb	r2, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800e12a:	210b      	movs	r1, #11
 800e12c:	6838      	ldr	r0, [r7, #0]
 800e12e:	f7ff ff6d 	bl	800e00c <u8g2_font_get_byte>
 800e132:	4603      	mov	r3, r0
 800e134:	b25a      	sxtb	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800e13a:	210c      	movs	r1, #12
 800e13c:	6838      	ldr	r0, [r7, #0]
 800e13e:	f7ff ff65 	bl	800e00c <u8g2_font_get_byte>
 800e142:	4603      	mov	r3, r0
 800e144:	b25a      	sxtb	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800e14a:	210d      	movs	r1, #13
 800e14c:	6838      	ldr	r0, [r7, #0]
 800e14e:	f7ff ff5d 	bl	800e00c <u8g2_font_get_byte>
 800e152:	4603      	mov	r3, r0
 800e154:	b25a      	sxtb	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800e15a:	210e      	movs	r1, #14
 800e15c:	6838      	ldr	r0, [r7, #0]
 800e15e:	f7ff ff55 	bl	800e00c <u8g2_font_get_byte>
 800e162:	4603      	mov	r3, r0
 800e164:	b25a      	sxtb	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800e16a:	210f      	movs	r1, #15
 800e16c:	6838      	ldr	r0, [r7, #0]
 800e16e:	f7ff ff4d 	bl	800e00c <u8g2_font_get_byte>
 800e172:	4603      	mov	r3, r0
 800e174:	b25a      	sxtb	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800e17a:	2110      	movs	r1, #16
 800e17c:	6838      	ldr	r0, [r7, #0]
 800e17e:	f7ff ff45 	bl	800e00c <u8g2_font_get_byte>
 800e182:	4603      	mov	r3, r0
 800e184:	b25a      	sxtb	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800e18a:	2111      	movs	r1, #17
 800e18c:	6838      	ldr	r0, [r7, #0]
 800e18e:	f7ff ff4f 	bl	800e030 <u8g2_font_get_word>
 800e192:	4603      	mov	r3, r0
 800e194:	461a      	mov	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800e19a:	2113      	movs	r1, #19
 800e19c:	6838      	ldr	r0, [r7, #0]
 800e19e:	f7ff ff47 	bl	800e030 <u8g2_font_get_word>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800e1aa:	2115      	movs	r1, #21
 800e1ac:	6838      	ldr	r0, [r7, #0]
 800e1ae:	f7ff ff3f 	bl	800e030 <u8g2_font_get_word>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	82da      	strh	r2, [r3, #22]
#endif
}
 800e1ba:	bf00      	nop
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800e1c2:	b480      	push	{r7}
 800e1c4:	b085      	sub	sp, #20
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	7a9b      	ldrb	r3, [r3, #10]
 800e1d2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800e1dc:	7bfa      	ldrb	r2, [r7, #15]
 800e1de:	7b7b      	ldrb	r3, [r7, #13]
 800e1e0:	fa42 f303 	asr.w	r3, r2, r3
 800e1e4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800e1e6:	7b7b      	ldrb	r3, [r7, #13]
 800e1e8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800e1ea:	7bba      	ldrb	r2, [r7, #14]
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800e1f2:	7bbb      	ldrb	r3, [r7, #14]
 800e1f4:	2b07      	cmp	r3, #7
 800e1f6:	d91a      	bls.n	800e22e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800e1f8:	2308      	movs	r3, #8
 800e1fa:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800e1fc:	7b3a      	ldrb	r2, [r7, #12]
 800e1fe:	7b7b      	ldrb	r3, [r7, #13]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	461a      	mov	r2, r3
 800e216:	7b3b      	ldrb	r3, [r7, #12]
 800e218:	fa02 f303 	lsl.w	r3, r2, r3
 800e21c:	b25a      	sxtb	r2, r3
 800e21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e222:	4313      	orrs	r3, r2
 800e224:	b25b      	sxtb	r3, r3
 800e226:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800e228:	7bbb      	ldrb	r3, [r7, #14]
 800e22a:	3b08      	subs	r3, #8
 800e22c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800e22e:	78fb      	ldrb	r3, [r7, #3]
 800e230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e234:	fa02 f303 	lsl.w	r3, r2, r3
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	43db      	mvns	r3, r3
 800e23c:	b2da      	uxtb	r2, r3
 800e23e:	7bfb      	ldrb	r3, [r7, #15]
 800e240:	4013      	ands	r3, r2
 800e242:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	7bba      	ldrb	r2, [r7, #14]
 800e248:	729a      	strb	r2, [r3, #10]
  return val;
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800e264:	78fb      	ldrb	r3, [r7, #3]
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff ffaa 	bl	800e1c2 <u8g2_font_decode_get_unsigned_bits>
 800e26e:	4603      	mov	r3, r0
 800e270:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800e272:	2301      	movs	r3, #1
 800e274:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800e276:	78fb      	ldrb	r3, [r7, #3]
 800e278:	3b01      	subs	r3, #1
 800e27a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800e27c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e280:	78fb      	ldrb	r3, [r7, #3]
 800e282:	fa02 f303 	lsl.w	r3, r2, r3
 800e286:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800e288:	7bfa      	ldrb	r2, [r7, #15]
 800e28a:	7bbb      	ldrb	r3, [r7, #14]
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	73fb      	strb	r3, [r7, #15]
  return v;
 800e292:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800e29e:	b490      	push	{r4, r7}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	4608      	mov	r0, r1
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	4623      	mov	r3, r4
 800e2ae:	71fb      	strb	r3, [r7, #7]
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	71bb      	strb	r3, [r7, #6]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	717b      	strb	r3, [r7, #5]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800e2bc:	793b      	ldrb	r3, [r7, #4]
 800e2be:	2b02      	cmp	r3, #2
 800e2c0:	d010      	beq.n	800e2e4 <u8g2_add_vector_y+0x46>
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	dc13      	bgt.n	800e2ee <u8g2_add_vector_y+0x50>
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d002      	beq.n	800e2d0 <u8g2_add_vector_y+0x32>
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d005      	beq.n	800e2da <u8g2_add_vector_y+0x3c>
 800e2ce:	e00e      	b.n	800e2ee <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 800e2d0:	797a      	ldrb	r2, [r7, #5]
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	71fb      	strb	r3, [r7, #7]
      break;
 800e2d8:	e00e      	b.n	800e2f8 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 800e2da:	79ba      	ldrb	r2, [r7, #6]
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	4413      	add	r3, r2
 800e2e0:	71fb      	strb	r3, [r7, #7]
      break;
 800e2e2:	e009      	b.n	800e2f8 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 800e2e4:	797b      	ldrb	r3, [r7, #5]
 800e2e6:	79fa      	ldrb	r2, [r7, #7]
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	71fb      	strb	r3, [r7, #7]
      break;
 800e2ec:	e004      	b.n	800e2f8 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800e2ee:	79bb      	ldrb	r3, [r7, #6]
 800e2f0:	79fa      	ldrb	r2, [r7, #7]
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	71fb      	strb	r3, [r7, #7]
      break;      
 800e2f6:	bf00      	nop
  }
  return dy;
 800e2f8:	79fb      	ldrb	r3, [r7, #7]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bc90      	pop	{r4, r7}
 800e302:	4770      	bx	lr

0800e304 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800e304:	b490      	push	{r4, r7}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	4604      	mov	r4, r0
 800e30c:	4608      	mov	r0, r1
 800e30e:	4611      	mov	r1, r2
 800e310:	461a      	mov	r2, r3
 800e312:	4623      	mov	r3, r4
 800e314:	71fb      	strb	r3, [r7, #7]
 800e316:	4603      	mov	r3, r0
 800e318:	71bb      	strb	r3, [r7, #6]
 800e31a:	460b      	mov	r3, r1
 800e31c:	717b      	strb	r3, [r7, #5]
 800e31e:	4613      	mov	r3, r2
 800e320:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800e322:	793b      	ldrb	r3, [r7, #4]
 800e324:	2b02      	cmp	r3, #2
 800e326:	d010      	beq.n	800e34a <u8g2_add_vector_x+0x46>
 800e328:	2b02      	cmp	r3, #2
 800e32a:	dc13      	bgt.n	800e354 <u8g2_add_vector_x+0x50>
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <u8g2_add_vector_x+0x32>
 800e330:	2b01      	cmp	r3, #1
 800e332:	d005      	beq.n	800e340 <u8g2_add_vector_x+0x3c>
 800e334:	e00e      	b.n	800e354 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800e336:	79ba      	ldrb	r2, [r7, #6]
 800e338:	79fb      	ldrb	r3, [r7, #7]
 800e33a:	4413      	add	r3, r2
 800e33c:	71fb      	strb	r3, [r7, #7]
      break;
 800e33e:	e00e      	b.n	800e35e <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 800e340:	797b      	ldrb	r3, [r7, #5]
 800e342:	79fa      	ldrb	r2, [r7, #7]
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	71fb      	strb	r3, [r7, #7]
      break;
 800e348:	e009      	b.n	800e35e <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 800e34a:	79bb      	ldrb	r3, [r7, #6]
 800e34c:	79fa      	ldrb	r2, [r7, #7]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	71fb      	strb	r3, [r7, #7]
      break;
 800e352:	e004      	b.n	800e35e <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 800e354:	797a      	ldrb	r2, [r7, #5]
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	4413      	add	r3, r2
 800e35a:	71fb      	strb	r3, [r7, #7]
      break;      
 800e35c:	bf00      	nop
  }
  return dx;
 800e35e:	79fb      	ldrb	r3, [r7, #7]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bc90      	pop	{r4, r7}
 800e368:	4770      	bx	lr

0800e36a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b088      	sub	sp, #32
 800e36e:	af02      	add	r7, sp, #8
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
 800e376:	4613      	mov	r3, r2
 800e378:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	3358      	adds	r3, #88	; 0x58
 800e37e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800e38a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800e392:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e39a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800e39c:	7bfa      	ldrb	r2, [r7, #15]
 800e39e:	7d7b      	ldrb	r3, [r7, #21]
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800e3a8:	7dfa      	ldrb	r2, [r7, #23]
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d201      	bcs.n	800e3b4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800e3b0:	7dfb      	ldrb	r3, [r7, #23]
 800e3b2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	791b      	ldrb	r3, [r3, #4]
 800e3b8:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	795b      	ldrb	r3, [r3, #5]
 800e3be:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800e3c0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800e3c4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	7b9b      	ldrb	r3, [r3, #14]
 800e3cc:	7bb8      	ldrb	r0, [r7, #14]
 800e3ce:	f7ff ff99 	bl	800e304 <u8g2_add_vector_x>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800e3d6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800e3da:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	7b9b      	ldrb	r3, [r3, #14]
 800e3e2:	7b78      	ldrb	r0, [r7, #13]
 800e3e4:	f7ff ff5b 	bl	800e29e <u8g2_add_vector_y>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800e3ec:	78bb      	ldrb	r3, [r7, #2]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00f      	beq.n	800e412 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	7b1a      	ldrb	r2, [r3, #12]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	7b9b      	ldrb	r3, [r3, #14]
 800e400:	7db8      	ldrb	r0, [r7, #22]
 800e402:	7b7a      	ldrb	r2, [r7, #13]
 800e404:	7bb9      	ldrb	r1, [r7, #14]
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	4603      	mov	r3, r0
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fbf5 	bl	800ebfa <u8g2_DrawHVLine>
 800e410:	e012      	b.n	800e438 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	7adb      	ldrb	r3, [r3, #11]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10e      	bne.n	800e438 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	7b5a      	ldrb	r2, [r3, #13]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	7b9b      	ldrb	r3, [r3, #14]
 800e428:	7db8      	ldrb	r0, [r7, #22]
 800e42a:	7b7a      	ldrb	r2, [r7, #13]
 800e42c:	7bb9      	ldrb	r1, [r7, #14]
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	4603      	mov	r3, r0
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 fbe1 	bl	800ebfa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800e438:	7dfa      	ldrb	r2, [r7, #23]
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d309      	bcc.n	800e454 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800e440:	7dfa      	ldrb	r2, [r7, #23]
 800e442:	7bfb      	ldrb	r3, [r7, #15]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800e448:	2300      	movs	r3, #0
 800e44a:	757b      	strb	r3, [r7, #21]
    ly++;
 800e44c:	7d3b      	ldrb	r3, [r7, #20]
 800e44e:	3301      	adds	r3, #1
 800e450:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800e452:	e79f      	b.n	800e394 <u8g2_font_decode_len+0x2a>
      break;
 800e454:	bf00      	nop
  }
  lx += cnt;
 800e456:	7d7a      	ldrb	r2, [r7, #21]
 800e458:	7dfb      	ldrb	r3, [r7, #23]
 800e45a:	4413      	add	r3, r2
 800e45c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800e45e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800e466:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	71da      	strb	r2, [r3, #7]
  
}
 800e46e:	bf00      	nop
 800e470:	3718      	adds	r7, #24
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b084      	sub	sp, #16
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3358      	adds	r3, #88	; 0x58
 800e484:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2200      	movs	r2, #0
 800e490:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e498:	4619      	mov	r1, r3
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f7ff fe91 	bl	800e1c2 <u8g2_font_decode_get_unsigned_bits>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	b25a      	sxtb	r2, r3
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f7ff fe86 	bl	800e1c2 <u8g2_font_decode_get_unsigned_bits>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	b25a      	sxtb	r2, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	7b1b      	ldrb	r3, [r3, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	bf0c      	ite	eq
 800e4d0:	2301      	moveq	r3, #1
 800e4d2:	2300      	movne	r3, #0
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	735a      	strb	r2, [r3, #13]
}
 800e4dc:	bf00      	nop
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b088      	sub	sp, #32
 800e4e8:	af02      	add	r7, sp, #8
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3358      	adds	r3, #88	; 0x58
 800e4f2:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff ffbd 	bl	800e476 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e502:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800e50a:	4619      	mov	r1, r3
 800e50c:	6938      	ldr	r0, [r7, #16]
 800e50e:	f7ff fea3 	bl	800e258 <u8g2_font_decode_get_signed_bits>
 800e512:	4603      	mov	r3, r0
 800e514:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800e51c:	4619      	mov	r1, r3
 800e51e:	6938      	ldr	r0, [r7, #16]
 800e520:	f7ff fe9a 	bl	800e258 <u8g2_font_decode_get_signed_bits>
 800e524:	4603      	mov	r3, r0
 800e526:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e52e:	4619      	mov	r1, r3
 800e530:	6938      	ldr	r0, [r7, #16]
 800e532:	f7ff fe91 	bl	800e258 <u8g2_font_decode_get_signed_bits>
 800e536:	4603      	mov	r3, r0
 800e538:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e540:	2b00      	cmp	r3, #0
 800e542:	f340 80cf 	ble.w	800e6e4 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	7918      	ldrb	r0, [r3, #4]
 800e54a:	7bfa      	ldrb	r2, [r7, #15]
 800e54c:	7b7b      	ldrb	r3, [r7, #13]
 800e54e:	4413      	add	r3, r2
 800e550:	b2db      	uxtb	r3, r3
 800e552:	425b      	negs	r3, r3
 800e554:	b2db      	uxtb	r3, r3
 800e556:	b25a      	sxtb	r2, r3
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	7b9b      	ldrb	r3, [r3, #14]
 800e55c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800e560:	f7ff fed0 	bl	800e304 <u8g2_add_vector_x>
 800e564:	4603      	mov	r3, r0
 800e566:	461a      	mov	r2, r3
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	7958      	ldrb	r0, [r3, #5]
 800e570:	7bfa      	ldrb	r2, [r7, #15]
 800e572:	7b7b      	ldrb	r3, [r7, #13]
 800e574:	4413      	add	r3, r2
 800e576:	b2db      	uxtb	r3, r3
 800e578:	425b      	negs	r3, r3
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	b25a      	sxtb	r2, r3
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	7b9b      	ldrb	r3, [r3, #14]
 800e582:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800e586:	f7ff fe8a 	bl	800e29e <u8g2_add_vector_y>
 800e58a:	4603      	mov	r3, r0
 800e58c:	461a      	mov	r2, r3
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	791b      	ldrb	r3, [r3, #4]
 800e596:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	795b      	ldrb	r3, [r3, #5]
 800e59c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800e59e:	7dfb      	ldrb	r3, [r7, #23]
 800e5a0:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800e5a2:	7d7b      	ldrb	r3, [r7, #21]
 800e5a4:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	7b9b      	ldrb	r3, [r3, #14]
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	d852      	bhi.n	800e654 <u8g2_font_decode_glyph+0x170>
 800e5ae:	a201      	add	r2, pc, #4	; (adr r2, 800e5b4 <u8g2_font_decode_glyph+0xd0>)
 800e5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b4:	0800e5c5 	.word	0x0800e5c5
 800e5b8:	0800e5dd 	.word	0x0800e5dd
 800e5bc:	0800e601 	.word	0x0800e601
 800e5c0:	0800e631 	.word	0x0800e631
      {
	case 0:
	    x1 += decode->glyph_width;
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e5ca:	b2da      	uxtb	r2, r3
 800e5cc:	7dbb      	ldrb	r3, [r7, #22]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 800e5d2:	7bfa      	ldrb	r2, [r7, #15]
 800e5d4:	7d3b      	ldrb	r3, [r7, #20]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	753b      	strb	r3, [r7, #20]
	    break;
 800e5da:	e03b      	b.n	800e654 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	7dfa      	ldrb	r2, [r7, #23]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e5e4:	7dfb      	ldrb	r3, [r7, #23]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800e5ea:	7dbb      	ldrb	r3, [r7, #22]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	7d3b      	ldrb	r3, [r7, #20]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	753b      	strb	r3, [r7, #20]
	    break;
 800e5fe:	e029      	b.n	800e654 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e606:	b2db      	uxtb	r3, r3
 800e608:	7dfa      	ldrb	r2, [r7, #23]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e60e:	7dfb      	ldrb	r3, [r7, #23]
 800e610:	3301      	adds	r3, #1
 800e612:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800e614:	7dbb      	ldrb	r3, [r7, #22]
 800e616:	3301      	adds	r3, #1
 800e618:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 800e61a:	7bfb      	ldrb	r3, [r7, #15]
 800e61c:	7d7a      	ldrb	r2, [r7, #21]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e622:	7d7b      	ldrb	r3, [r7, #21]
 800e624:	3301      	adds	r3, #1
 800e626:	757b      	strb	r3, [r7, #21]
	    y1++;
 800e628:	7d3b      	ldrb	r3, [r7, #20]
 800e62a:	3301      	adds	r3, #1
 800e62c:	753b      	strb	r3, [r7, #20]
	    break;	  
 800e62e:	e011      	b.n	800e654 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 800e630:	7bfa      	ldrb	r2, [r7, #15]
 800e632:	7dbb      	ldrb	r3, [r7, #22]
 800e634:	4413      	add	r3, r2
 800e636:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	7d7a      	ldrb	r2, [r7, #21]
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e646:	7d7b      	ldrb	r3, [r7, #21]
 800e648:	3301      	adds	r3, #1
 800e64a:	757b      	strb	r3, [r7, #21]
	    y1++;
 800e64c:	7d3b      	ldrb	r3, [r7, #20]
 800e64e:	3301      	adds	r3, #1
 800e650:	753b      	strb	r3, [r7, #20]
	    break;	  
 800e652:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800e654:	7db8      	ldrb	r0, [r7, #22]
 800e656:	7d7a      	ldrb	r2, [r7, #21]
 800e658:	7df9      	ldrb	r1, [r7, #23]
 800e65a:	7d3b      	ldrb	r3, [r7, #20]
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	4603      	mov	r3, r0
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fb97 	bl	800ed94 <u8g2_IsIntersection>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d102      	bne.n	800e672 <u8g2_font_decode_glyph+0x18e>
	return d;
 800e66c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e670:	e03a      	b.n	800e6e8 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	2200      	movs	r2, #0
 800e676:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	2200      	movs	r2, #0
 800e67c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800e684:	4619      	mov	r1, r3
 800e686:	6938      	ldr	r0, [r7, #16]
 800e688:	f7ff fd9b 	bl	800e1c2 <u8g2_font_decode_get_unsigned_bits>
 800e68c:	4603      	mov	r3, r0
 800e68e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800e696:	4619      	mov	r1, r3
 800e698:	6938      	ldr	r0, [r7, #16]
 800e69a:	f7ff fd92 	bl	800e1c2 <u8g2_font_decode_get_unsigned_bits>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800e6a2:	7afb      	ldrb	r3, [r7, #11]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7ff fe5e 	bl	800e36a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800e6ae:	7abb      	ldrb	r3, [r7, #10]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fe58 	bl	800e36a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800e6ba:	2101      	movs	r1, #1
 800e6bc:	6938      	ldr	r0, [r7, #16]
 800e6be:	f7ff fd80 	bl	800e1c2 <u8g2_font_decode_get_unsigned_bits>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d1ec      	bne.n	800e6a2 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800e6ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	dd00      	ble.n	800e6d8 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800e6d6:	e7d2      	b.n	800e67e <u8g2_font_decode_glyph+0x19a>
	break;
 800e6d8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	7b1a      	ldrb	r2, [r3, #12]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 800e6e4:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3718      	adds	r7, #24
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e700:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	3317      	adds	r3, #23
 800e706:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800e708:	887b      	ldrh	r3, [r7, #2]
 800e70a:	2bff      	cmp	r3, #255	; 0xff
 800e70c:	d82a      	bhi.n	800e764 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800e70e:	887b      	ldrh	r3, [r7, #2]
 800e710:	2b60      	cmp	r3, #96	; 0x60
 800e712:	d907      	bls.n	800e724 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e71a:	461a      	mov	r2, r3
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	4413      	add	r3, r2
 800e720:	617b      	str	r3, [r7, #20]
 800e722:	e009      	b.n	800e738 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800e724:	887b      	ldrh	r3, [r7, #2]
 800e726:	2b40      	cmp	r3, #64	; 0x40
 800e728:	d906      	bls.n	800e738 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800e730:	461a      	mov	r2, r3
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	4413      	add	r3, r2
 800e736:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	3301      	adds	r3, #1
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d04e      	beq.n	800e7e0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	b29b      	uxth	r3, r3
 800e748:	887a      	ldrh	r2, [r7, #2]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d102      	bne.n	800e754 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	3302      	adds	r3, #2
 800e752:	e049      	b.n	800e7e8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	3301      	adds	r3, #1
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	4413      	add	r3, r2
 800e760:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800e762:	e7e9      	b.n	800e738 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e76a:	461a      	mov	r2, r3
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	4413      	add	r3, r2
 800e770:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800e776:	2100      	movs	r1, #0
 800e778:	6938      	ldr	r0, [r7, #16]
 800e77a:	f7ff fc59 	bl	800e030 <u8g2_font_get_word>
 800e77e:	4603      	mov	r3, r0
 800e780:	461a      	mov	r2, r3
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	4413      	add	r3, r2
 800e786:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800e788:	2102      	movs	r1, #2
 800e78a:	6938      	ldr	r0, [r7, #16]
 800e78c:	f7ff fc50 	bl	800e030 <u8g2_font_get_word>
 800e790:	4603      	mov	r3, r0
 800e792:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	3304      	adds	r3, #4
 800e798:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800e79a:	89fa      	ldrh	r2, [r7, #14]
 800e79c:	887b      	ldrh	r3, [r7, #2]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d3e9      	bcc.n	800e776 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800e7a8:	89fb      	ldrh	r3, [r7, #14]
 800e7aa:	021b      	lsls	r3, r3, #8
 800e7ac:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	89fb      	ldrh	r3, [r7, #14]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800e7bc:	89fb      	ldrh	r3, [r7, #14]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d010      	beq.n	800e7e4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800e7c2:	89fa      	ldrh	r2, [r7, #14]
 800e7c4:	887b      	ldrh	r3, [r7, #2]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d102      	bne.n	800e7d0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	3303      	adds	r3, #3
 800e7ce:	e00b      	b.n	800e7e8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	3302      	adds	r3, #2
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	4413      	add	r3, r2
 800e7dc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800e7de:	e7e0      	b.n	800e7a2 <u8g2_font_get_glyph_data+0xb2>
	break;
 800e7e0:	bf00      	nop
 800e7e2:	e000      	b.n	800e7e6 <u8g2_font_get_glyph_data+0xf6>
	break;
 800e7e4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	4603      	mov	r3, r0
 800e800:	70fb      	strb	r3, [r7, #3]
 800e802:	460b      	mov	r3, r1
 800e804:	70bb      	strb	r3, [r7, #2]
 800e806:	4613      	mov	r3, r2
 800e808:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	78fa      	ldrb	r2, [r7, #3]
 800e812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	78ba      	ldrb	r2, [r7, #2]
 800e81a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800e81e:	883b      	ldrh	r3, [r7, #0]
 800e820:	4619      	mov	r1, r3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7ff ff64 	bl	800e6f0 <u8g2_font_get_glyph_data>
 800e828:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d005      	beq.n	800e83c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800e830:	68b9      	ldr	r1, [r7, #8]
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7ff fe56 	bl	800e4e4 <u8g2_font_decode_glyph>
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	4608      	mov	r0, r1
 800e852:	4611      	mov	r1, r2
 800e854:	461a      	mov	r2, r3
 800e856:	4603      	mov	r3, r0
 800e858:	70fb      	strb	r3, [r7, #3]
 800e85a:	460b      	mov	r3, r1
 800e85c:	70bb      	strb	r3, [r7, #2]
 800e85e:	4613      	mov	r3, r2
 800e860:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800e868:	2b03      	cmp	r3, #3
 800e86a:	d833      	bhi.n	800e8d4 <u8g2_DrawGlyph+0x8c>
 800e86c:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <u8g2_DrawGlyph+0x2c>)
 800e86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e872:	bf00      	nop
 800e874:	0800e885 	.word	0x0800e885
 800e878:	0800e899 	.word	0x0800e899
 800e87c:	0800e8ad 	.word	0x0800e8ad
 800e880:	0800e8c1 	.word	0x0800e8c1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	4798      	blx	r3
 800e88c:	4603      	mov	r3, r0
 800e88e:	461a      	mov	r2, r3
 800e890:	78bb      	ldrb	r3, [r7, #2]
 800e892:	4413      	add	r3, r2
 800e894:	70bb      	strb	r3, [r7, #2]
      break;
 800e896:	e01d      	b.n	800e8d4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	4798      	blx	r3
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	78fb      	ldrb	r3, [r7, #3]
 800e8a6:	1a9b      	subs	r3, r3, r2
 800e8a8:	70fb      	strb	r3, [r7, #3]
      break;
 800e8aa:	e013      	b.n	800e8d4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	4798      	blx	r3
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	78bb      	ldrb	r3, [r7, #2]
 800e8ba:	1a9b      	subs	r3, r3, r2
 800e8bc:	70bb      	strb	r3, [r7, #2]
      break;
 800e8be:	e009      	b.n	800e8d4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	4798      	blx	r3
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	78fb      	ldrb	r3, [r7, #3]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	70fb      	strb	r3, [r7, #3]
      break;
 800e8d2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800e8d4:	883b      	ldrh	r3, [r7, #0]
 800e8d6:	78ba      	ldrb	r2, [r7, #2]
 800e8d8:	78f9      	ldrb	r1, [r7, #3]
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff ff88 	bl	800e7f0 <u8g2_font_draw_glyph>
 800e8e0:	4603      	mov	r3, r0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop

0800e8ec <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	607b      	str	r3, [r7, #4]
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	72fb      	strb	r3, [r7, #11]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f000 fc85 	bl	800f20e <u8x8_utf8_init>
  sum = 0;
 800e904:	2300      	movs	r3, #0
 800e906:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	7812      	ldrb	r2, [r2, #0]
 800e910:	4611      	mov	r1, r2
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	4798      	blx	r3
 800e916:	4603      	mov	r3, r0
 800e918:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800e91a:	8abb      	ldrh	r3, [r7, #20]
 800e91c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e920:	4293      	cmp	r3, r2
 800e922:	d038      	beq.n	800e996 <u8g2_draw_string+0xaa>
      break;
    str++;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	3301      	adds	r3, #1
 800e928:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800e92a:	8abb      	ldrh	r3, [r7, #20]
 800e92c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e930:	4293      	cmp	r3, r2
 800e932:	d0e9      	beq.n	800e908 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800e934:	8abb      	ldrh	r3, [r7, #20]
 800e936:	7aba      	ldrb	r2, [r7, #10]
 800e938:	7af9      	ldrb	r1, [r7, #11]
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	f7ff ff84 	bl	800e848 <u8g2_DrawGlyph>
 800e940:	4603      	mov	r3, r0
 800e942:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800e94a:	2b03      	cmp	r3, #3
 800e94c:	d81e      	bhi.n	800e98c <u8g2_draw_string+0xa0>
 800e94e:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <u8g2_draw_string+0x68>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e965 	.word	0x0800e965
 800e958:	0800e96f 	.word	0x0800e96f
 800e95c:	0800e979 	.word	0x0800e979
 800e960:	0800e983 	.word	0x0800e983
      {
	case 0:
	  x += delta;
 800e964:	7afa      	ldrb	r2, [r7, #11]
 800e966:	7cfb      	ldrb	r3, [r7, #19]
 800e968:	4413      	add	r3, r2
 800e96a:	72fb      	strb	r3, [r7, #11]
	  break;
 800e96c:	e00e      	b.n	800e98c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800e96e:	7aba      	ldrb	r2, [r7, #10]
 800e970:	7cfb      	ldrb	r3, [r7, #19]
 800e972:	4413      	add	r3, r2
 800e974:	72bb      	strb	r3, [r7, #10]
	  break;
 800e976:	e009      	b.n	800e98c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800e978:	7afa      	ldrb	r2, [r7, #11]
 800e97a:	7cfb      	ldrb	r3, [r7, #19]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	72fb      	strb	r3, [r7, #11]
	  break;
 800e980:	e004      	b.n	800e98c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800e982:	7aba      	ldrb	r2, [r7, #10]
 800e984:	7cfb      	ldrb	r3, [r7, #19]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	72bb      	strb	r3, [r7, #10]
	  break;
 800e98a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800e98c:	7dfa      	ldrb	r2, [r7, #23]
 800e98e:	7cfb      	ldrb	r3, [r7, #19]
 800e990:	4413      	add	r3, r2
 800e992:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800e994:	e7b8      	b.n	800e908 <u8g2_draw_string+0x1c>
      break;
 800e996:	bf00      	nop
    }
  }
  return sum;
 800e998:	7dfb      	ldrb	r3, [r7, #23]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3718      	adds	r7, #24
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop

0800e9a4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	607b      	str	r3, [r7, #4]
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	72fb      	strb	r3, [r7, #11]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	4a06      	ldr	r2, [pc, #24]	; (800e9d4 <u8g2_DrawStr+0x30>)
 800e9ba:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800e9bc:	7aba      	ldrb	r2, [r7, #10]
 800e9be:	7af9      	ldrb	r1, [r7, #11]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f7ff ff92 	bl	800e8ec <u8g2_draw_string>
 800e9c8:	4603      	mov	r3, r0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	0800f22b 	.word	0x0800f22b

0800e9d8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d05d      	beq.n	800eaa4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d04d      	beq.n	800eaa6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d11c      	bne.n	800ea4e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 800ea20:	429a      	cmp	r2, r3
 800ea22:	da05      	bge.n	800ea30 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	dd32      	ble.n	800eaa6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800ea4c:	e02b      	b.n	800eaa6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800ea54:	461a      	mov	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800ea64:	440b      	add	r3, r1
 800ea66:	429a      	cmp	r2, r3
 800ea68:	da0d      	bge.n	800ea86 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800ea70:	b2da      	uxtb	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	4413      	add	r3, r2
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	b25a      	sxtb	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800ea92:	429a      	cmp	r2, r3
 800ea94:	dd07      	ble.n	800eaa6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800eaa2:	e000      	b.n	800eaa6 <u8g2_UpdateRefHeight+0xce>
    return;
 800eaa4:	bf00      	nop
  }  
}
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  return 0;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr
	...

0800eac8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	4a04      	ldr	r2, [pc, #16]	; (800eae4 <u8g2_SetFontPosBaseline+0x1c>)
 800ead4:	655a      	str	r2, [r3, #84]	; 0x54
}
 800ead6:	bf00      	nop
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	0800eab1 	.word	0x0800eab1

0800eae8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaf6:	683a      	ldr	r2, [r7, #0]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d00b      	beq.n	800eb14 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	3368      	adds	r3, #104	; 0x68
 800eb06:	6839      	ldr	r1, [r7, #0]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff fab1 	bl	800e070 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f7ff ff62 	bl	800e9d8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	4611      	mov	r1, r2
 800eb28:	461a      	mov	r2, r3
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	71fb      	strb	r3, [r7, #7]
 800eb2e:	4613      	mov	r3, r2
 800eb30:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800eb38:	7dfb      	ldrb	r3, [r7, #23]
 800eb3a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	781a      	ldrb	r2, [r3, #0]
 800eb40:	7dbb      	ldrb	r3, [r7, #22]
 800eb42:	4413      	add	r3, r2
 800eb44:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800eb46:	7dfa      	ldrb	r2, [r7, #23]
 800eb48:	7dbb      	ldrb	r3, [r7, #22]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d90b      	bls.n	800eb66 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800eb4e:	7dfa      	ldrb	r2, [r7, #23]
 800eb50:	79bb      	ldrb	r3, [r7, #6]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d205      	bcs.n	800eb62 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800eb56:	79bb      	ldrb	r3, [r7, #6]
 800eb58:	75bb      	strb	r3, [r7, #22]
      b--;
 800eb5a:	7dbb      	ldrb	r3, [r7, #22]
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	75bb      	strb	r3, [r7, #22]
 800eb60:	e001      	b.n	800eb66 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800eb66:	7dfa      	ldrb	r2, [r7, #23]
 800eb68:	79bb      	ldrb	r3, [r7, #6]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d301      	bcc.n	800eb72 <u8g2_clip_intersection2+0x56>
    return 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e01c      	b.n	800ebac <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800eb72:	7dba      	ldrb	r2, [r7, #22]
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d801      	bhi.n	800eb7e <u8g2_clip_intersection2+0x62>
    return 0;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	e016      	b.n	800ebac <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800eb7e:	7dfa      	ldrb	r2, [r7, #23]
 800eb80:	79fb      	ldrb	r3, [r7, #7]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d201      	bcs.n	800eb8a <u8g2_clip_intersection2+0x6e>
    a = c;
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800eb8a:	7dba      	ldrb	r2, [r7, #22]
 800eb8c:	79bb      	ldrb	r3, [r7, #6]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d901      	bls.n	800eb96 <u8g2_clip_intersection2+0x7a>
    b = d;
 800eb92:	79bb      	ldrb	r3, [r7, #6]
 800eb94:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	7dfa      	ldrb	r2, [r7, #23]
 800eb9a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800eb9c:	7dba      	ldrb	r2, [r7, #22]
 800eb9e:	7dfb      	ldrb	r3, [r7, #23]
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	7dba      	ldrb	r2, [r7, #22]
 800eba8:	701a      	strb	r2, [r3, #0]
  return 1;
 800ebaa:	2301      	movs	r3, #1
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	371c      	adds	r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800ebb8:	b590      	push	{r4, r7, lr}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af02      	add	r7, sp, #8
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	4608      	mov	r0, r1
 800ebc2:	4611      	mov	r1, r2
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	70fb      	strb	r3, [r7, #3]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	70bb      	strb	r3, [r7, #2]
 800ebce:	4613      	mov	r3, r2
 800ebd0:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebd8:	78ba      	ldrb	r2, [r7, #2]
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800ebe2:	7878      	ldrb	r0, [r7, #1]
 800ebe4:	78ba      	ldrb	r2, [r7, #2]
 800ebe6:	78f9      	ldrb	r1, [r7, #3]
 800ebe8:	7e3b      	ldrb	r3, [r7, #24]
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	4603      	mov	r3, r0
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	47a0      	blx	r4
}
 800ebf2:	bf00      	nop
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd90      	pop	{r4, r7, pc}

0800ebfa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800ebfa:	b590      	push	{r4, r7, lr}
 800ebfc:	b085      	sub	sp, #20
 800ebfe:	af02      	add	r7, sp, #8
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	4608      	mov	r0, r1
 800ec04:	4611      	mov	r1, r2
 800ec06:	461a      	mov	r2, r3
 800ec08:	4603      	mov	r3, r0
 800ec0a:	70fb      	strb	r3, [r7, #3]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70bb      	strb	r3, [r7, #2]
 800ec10:	4613      	mov	r3, r2
 800ec12:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d06d      	beq.n	800ecfa <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800ec1e:	787b      	ldrb	r3, [r7, #1]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d06a      	beq.n	800ecfa <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800ec24:	787b      	ldrb	r3, [r7, #1]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d918      	bls.n	800ec5c <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800ec2a:	7e3b      	ldrb	r3, [r7, #24]
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d109      	bne.n	800ec44 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800ec30:	78fa      	ldrb	r2, [r7, #3]
 800ec32:	787b      	ldrb	r3, [r7, #1]
 800ec34:	1ad3      	subs	r3, r2, r3
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	70fb      	strb	r3, [r7, #3]
	  x++;
 800ec3a:	78fb      	ldrb	r3, [r7, #3]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	70fb      	strb	r3, [r7, #3]
 800ec42:	e00b      	b.n	800ec5c <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800ec44:	7e3b      	ldrb	r3, [r7, #24]
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d108      	bne.n	800ec5c <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800ec4a:	78ba      	ldrb	r2, [r7, #2]
 800ec4c:	787b      	ldrb	r3, [r7, #1]
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	70bb      	strb	r3, [r7, #2]
	  y++;
 800ec54:	78bb      	ldrb	r3, [r7, #2]
 800ec56:	3301      	adds	r3, #1
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800ec5c:	7e3b      	ldrb	r3, [r7, #24]
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800ec64:	7e3b      	ldrb	r3, [r7, #24]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d119      	bne.n	800ec9e <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ec70:	78bb      	ldrb	r3, [r7, #2]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d838      	bhi.n	800ece8 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ec7c:	78bb      	ldrb	r3, [r7, #2]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d934      	bls.n	800ecec <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ec8e:	1c79      	adds	r1, r7, #1
 800ec90:	1cf8      	adds	r0, r7, #3
 800ec92:	f7ff ff43 	bl	800eb1c <u8g2_clip_intersection2>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d119      	bne.n	800ecd0 <u8g2_DrawHVLine+0xd6>
	  return;
 800ec9c:	e02d      	b.n	800ecfa <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800eca4:	78fb      	ldrb	r3, [r7, #3]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d822      	bhi.n	800ecf0 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ecb0:	78fb      	ldrb	r3, [r7, #3]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d91e      	bls.n	800ecf4 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ecc2:	1c79      	adds	r1, r7, #1
 800ecc4:	1cb8      	adds	r0, r7, #2
 800ecc6:	f7ff ff29 	bl	800eb1c <u8g2_clip_intersection2>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d013      	beq.n	800ecf8 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd4:	689c      	ldr	r4, [r3, #8]
 800ecd6:	78f9      	ldrb	r1, [r7, #3]
 800ecd8:	78ba      	ldrb	r2, [r7, #2]
 800ecda:	7878      	ldrb	r0, [r7, #1]
 800ecdc:	7e3b      	ldrb	r3, [r7, #24]
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	4603      	mov	r3, r0
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	47a0      	blx	r4
 800ece6:	e008      	b.n	800ecfa <u8g2_DrawHVLine+0x100>
	  return;
 800ece8:	bf00      	nop
 800ecea:	e006      	b.n	800ecfa <u8g2_DrawHVLine+0x100>
	  return;
 800ecec:	bf00      	nop
 800ecee:	e004      	b.n	800ecfa <u8g2_DrawHVLine+0x100>
	  return;
 800ecf0:	bf00      	nop
 800ecf2:	e002      	b.n	800ecfa <u8g2_DrawHVLine+0x100>
	  return;
 800ecf4:	bf00      	nop
 800ecf6:	e000      	b.n	800ecfa <u8g2_DrawHVLine+0x100>
	  return;
 800ecf8:	bf00      	nop
    }
}
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd90      	pop	{r4, r7, pc}

0800ed00 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	78fa      	ldrb	r2, [r7, #3]
 800ed10:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 800ed14:	78fb      	ldrb	r3, [r7, #3]
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d903      	bls.n	800ed22 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800ed22:	bf00      	nop
 800ed24:	370c      	adds	r7, #12
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr

0800ed2e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800ed2e:	b490      	push	{r4, r7}
 800ed30:	b082      	sub	sp, #8
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	4604      	mov	r4, r0
 800ed36:	4608      	mov	r0, r1
 800ed38:	4611      	mov	r1, r2
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	4623      	mov	r3, r4
 800ed3e:	71fb      	strb	r3, [r7, #7]
 800ed40:	4603      	mov	r3, r0
 800ed42:	71bb      	strb	r3, [r7, #6]
 800ed44:	460b      	mov	r3, r1
 800ed46:	717b      	strb	r3, [r7, #5]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800ed4c:	797a      	ldrb	r2, [r7, #5]
 800ed4e:	79bb      	ldrb	r3, [r7, #6]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d20d      	bcs.n	800ed70 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800ed54:	793a      	ldrb	r2, [r7, #4]
 800ed56:	79fb      	ldrb	r3, [r7, #7]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d901      	bls.n	800ed60 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e014      	b.n	800ed8a <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800ed60:	797a      	ldrb	r2, [r7, #5]
 800ed62:	793b      	ldrb	r3, [r7, #4]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d901      	bls.n	800ed6c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e00e      	b.n	800ed8a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	e00c      	b.n	800ed8a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800ed70:	793a      	ldrb	r2, [r7, #4]
 800ed72:	79fb      	ldrb	r3, [r7, #7]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d907      	bls.n	800ed88 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800ed78:	797a      	ldrb	r2, [r7, #5]
 800ed7a:	793b      	ldrb	r3, [r7, #4]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d901      	bls.n	800ed84 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800ed80:	2301      	movs	r3, #1
 800ed82:	e002      	b.n	800ed8a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	e000      	b.n	800ed8a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800ed88:	2300      	movs	r3, #0
    }
  }
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bc90      	pop	{r4, r7}
 800ed92:	4770      	bx	lr

0800ed94 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	4608      	mov	r0, r1
 800ed9e:	4611      	mov	r1, r2
 800eda0:	461a      	mov	r2, r3
 800eda2:	4603      	mov	r3, r0
 800eda4:	70fb      	strb	r3, [r7, #3]
 800eda6:	460b      	mov	r3, r1
 800eda8:	70bb      	strb	r3, [r7, #2]
 800edaa:	4613      	mov	r3, r2
 800edac:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800edba:	7c3b      	ldrb	r3, [r7, #16]
 800edbc:	78ba      	ldrb	r2, [r7, #2]
 800edbe:	f7ff ffb6 	bl	800ed2e <u8g2_is_intersection_decision_tree>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d101      	bne.n	800edcc <u8g2_IsIntersection+0x38>
    return 0; 
 800edc8:	2300      	movs	r3, #0
 800edca:	e00a      	b.n	800ede2 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800edd8:	787b      	ldrb	r3, [r7, #1]
 800edda:	78fa      	ldrb	r2, [r7, #3]
 800eddc:	f7ff ffa7 	bl	800ed2e <u8g2_is_intersection_decision_tree>
 800ede0:	4603      	mov	r3, r0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800edea:	b480      	push	{r7}
 800edec:	b087      	sub	sp, #28
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	4608      	mov	r0, r1
 800edf4:	4611      	mov	r1, r2
 800edf6:	461a      	mov	r2, r3
 800edf8:	4603      	mov	r3, r0
 800edfa:	70fb      	strb	r3, [r7, #3]
 800edfc:	460b      	mov	r3, r1
 800edfe:	70bb      	strb	r3, [r7, #2]
 800ee00:	4613      	mov	r3, r2
 800ee02:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800ee04:	78bb      	ldrb	r3, [r7, #2]
 800ee06:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800ee08:	7cfb      	ldrb	r3, [r7, #19]
 800ee0a:	f003 0307 	and.w	r3, r3, #7
 800ee0e:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800ee10:	2301      	movs	r3, #1
 800ee12:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800ee14:	7c3a      	ldrb	r2, [r7, #16]
 800ee16:	7cfb      	ldrb	r3, [r7, #19]
 800ee18:	fa02 f303 	lsl.w	r3, r2, r3
 800ee1c:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d801      	bhi.n	800ee34 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800ee30:	7c3b      	ldrb	r3, [r7, #16]
 800ee32:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d001      	beq.n	800ee42 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800ee3e:	7c3b      	ldrb	r3, [r7, #16]
 800ee40:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800ee42:	78bb      	ldrb	r3, [r7, #2]
 800ee44:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800ee46:	89fb      	ldrh	r3, [r7, #14]
 800ee48:	f023 0307 	bic.w	r3, r3, #7
 800ee4c:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	7c1b      	ldrb	r3, [r3, #16]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	89fa      	ldrh	r2, [r7, #14]
 800ee58:	fb12 f303 	smulbb	r3, r2, r3
 800ee5c:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee62:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800ee64:	89fb      	ldrh	r3, [r7, #14]
 800ee66:	697a      	ldr	r2, [r7, #20]
 800ee68:	4413      	add	r3, r2
 800ee6a:	617b      	str	r3, [r7, #20]
  ptr += x;
 800ee6c:	78fb      	ldrb	r3, [r7, #3]
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	4413      	add	r3, r2
 800ee72:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800ee74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d117      	bne.n	800eeac <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	781a      	ldrb	r2, [r3, #0]
 800ee80:	7cbb      	ldrb	r3, [r7, #18]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	781a      	ldrb	r2, [r3, #0]
 800ee8e:	7c7b      	ldrb	r3, [r7, #17]
 800ee90:	4053      	eors	r3, r2
 800ee92:	b2da      	uxtb	r2, r3
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	701a      	strb	r2, [r3, #0]
	ptr++;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	617b      	str	r3, [r7, #20]
	len--;
 800ee9e:	787b      	ldrb	r3, [r7, #1]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800eea4:	787b      	ldrb	r3, [r7, #1]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1e8      	bne.n	800ee7c <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800eeaa:	e039      	b.n	800ef20 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	781a      	ldrb	r2, [r3, #0]
 800eeb0:	7cbb      	ldrb	r3, [r7, #18]
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	781a      	ldrb	r2, [r3, #0]
 800eebe:	7c7b      	ldrb	r3, [r7, #17]
 800eec0:	4053      	eors	r3, r2
 800eec2:	b2da      	uxtb	r2, r3
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800eec8:	7cfb      	ldrb	r3, [r7, #19]
 800eeca:	3301      	adds	r3, #1
 800eecc:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800eece:	7cfb      	ldrb	r3, [r7, #19]
 800eed0:	f003 0307 	and.w	r3, r3, #7
 800eed4:	74fb      	strb	r3, [r7, #19]
      len--;
 800eed6:	787b      	ldrb	r3, [r7, #1]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800eedc:	7cfb      	ldrb	r3, [r7, #19]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d115      	bne.n	800ef0e <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eee8:	461a      	mov	r2, r3
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	4413      	add	r3, r2
 800eeee:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d801      	bhi.n	800eefe <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800eefa:	2301      	movs	r3, #1
 800eefc:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d008      	beq.n	800ef1a <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	747b      	strb	r3, [r7, #17]
 800ef0c:	e005      	b.n	800ef1a <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800ef0e:	7cbb      	ldrb	r3, [r7, #18]
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800ef14:	7c7b      	ldrb	r3, [r7, #17]
 800ef16:	005b      	lsls	r3, r3, #1
 800ef18:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800ef1a:	787b      	ldrb	r3, [r7, #1]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1c5      	bne.n	800eeac <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800ef20:	bf00      	nop
 800ef22:	371c      	adds	r7, #28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	22ff      	movs	r2, #255	; 0xff
 800ef48:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	22ff      	movs	r2, #255	; 0xff
 800ef50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	4798      	blx	r3
}
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b084      	sub	sp, #16
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	60f8      	str	r0, [r7, #12]
 800ef6e:	60b9      	str	r1, [r7, #8]
 800ef70:	603b      	str	r3, [r7, #0]
 800ef72:	4613      	mov	r3, r2
 800ef74:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	683a      	ldr	r2, [r7, #0]
 800ef80:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	79fa      	ldrb	r2, [r7, #7]
 800ef8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2201      	movs	r2, #1
 800efac:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	69ba      	ldr	r2, [r7, #24]
 800efbc:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f7ff ffaf 	bl	800ef2c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7ff fd7a 	bl	800eac8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800efdc:	bf00      	nop
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eff8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800effa:	7bfb      	ldrb	r3, [r7, #15]
 800effc:	00db      	lsls	r3, r3, #3
 800effe:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	7bfa      	ldrb	r2, [r7, #15]
 800f004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	7c1b      	ldrb	r3, [r3, #16]
 800f00c:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800f00e:	7bfb      	ldrb	r3, [r7, #15]
 800f010:	2b1f      	cmp	r3, #31
 800f012:	d901      	bls.n	800f018 <u8g2_update_dimension_common+0x34>
    t = 31;
 800f014:	231f      	movs	r3, #31
 800f016:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800f018:	7bfb      	ldrb	r3, [r7, #15]
 800f01a:	00db      	lsls	r3, r3, #3
 800f01c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	7bfa      	ldrb	r2, [r7, #15]
 800f022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f02c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800f02e:	7bfb      	ldrb	r3, [r7, #15]
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7bfa      	ldrb	r2, [r7, #15]
 800f038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f042:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800f044:	7bfb      	ldrb	r3, [r7, #15]
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800f04c:	4413      	add	r3, r2
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	7c52      	ldrb	r2, [r2, #17]
 800f052:	4293      	cmp	r3, r2
 800f054:	dd06      	ble.n	800f064 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	7c5a      	ldrb	r2, [r3, #17]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f060:	1ad3      	subs	r3, r2, r3
 800f062:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800f064:	7bfb      	ldrb	r3, [r7, #15]
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800f088:	7bfb      	ldrb	r3, [r7, #15]
 800f08a:	4413      	add	r3, r2
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	22f0      	movs	r2, #240	; 0xf0
 800f098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	8a9b      	ldrh	r3, [r3, #20]
 800f0a0:	2bf0      	cmp	r3, #240	; 0xf0
 800f0a2:	d805      	bhi.n	800f0b0 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	8a9b      	ldrh	r3, [r3, #20]
 800f0a8:	b2da      	uxtb	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	8adb      	ldrh	r3, [r3, #22]
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800f0bc:	bf00      	nop
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff fe51 	bl	800ed94 <u8g2_IsIntersection>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d104      	bne.n	800f102 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800f100:	e03b      	b.n	800f17a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2201      	movs	r2, #1
 800f106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f116:	429a      	cmp	r2, r3
 800f118:	d205      	bcs.n	800f126 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800f132:	429a      	cmp	r2, r3
 800f134:	d905      	bls.n	800f142 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f14e:	429a      	cmp	r2, r3
 800f150:	d205      	bcs.n	800f15e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d905      	bls.n	800f17a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800f17a:	bf00      	nop
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b082      	sub	sp, #8
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff ff2a 	bl	800efe4 <u8g2_update_dimension_common>
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7ff ff7b 	bl	800f0c8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800f1d2:	bf00      	nop
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b084      	sub	sp, #16
 800f1de:	af02      	add	r7, sp, #8
 800f1e0:	6078      	str	r0, [r7, #4]
 800f1e2:	4608      	mov	r0, r1
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	70fb      	strb	r3, [r7, #3]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	70bb      	strb	r3, [r7, #2]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800f1f4:	7878      	ldrb	r0, [r7, #1]
 800f1f6:	78ba      	ldrb	r2, [r7, #2]
 800f1f8:	78f9      	ldrb	r1, [r7, #3]
 800f1fa:	7c3b      	ldrb	r3, [r7, #16]
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	4603      	mov	r3, r0
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7ff fcd9 	bl	800ebb8 <u8g2_draw_hv_line_2dir>
}
 800f206:	bf00      	nop
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800f20e:	b480      	push	{r7}
 800f210:	b083      	sub	sp, #12
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800f21e:	bf00      	nop
 800f220:	370c      	adds	r7, #12
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800f22a:	b480      	push	{r7}
 800f22c:	b083      	sub	sp, #12
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	460b      	mov	r3, r1
 800f234:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800f236:	78fb      	ldrb	r3, [r7, #3]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <u8x8_ascii_next+0x18>
 800f23c:	78fb      	ldrb	r3, [r7, #3]
 800f23e:	2b0a      	cmp	r3, #10
 800f240:	d102      	bne.n	800f248 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800f242:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f246:	e001      	b.n	800f24c <u8x8_ascii_next+0x22>
  return b;
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	b29b      	uxth	r3, r3
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800f258:	b590      	push	{r4, r7, lr}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	691c      	ldr	r4, [r3, #16]
 800f268:	78fa      	ldrb	r2, [r7, #3]
 800f26a:	2300      	movs	r3, #0
 800f26c:	2120      	movs	r1, #32
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	47a0      	blx	r4
 800f272:	4603      	mov	r3, r0
}
 800f274:	4618      	mov	r0, r3
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd90      	pop	{r4, r7, pc}

0800f27c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800f27c:	b590      	push	{r4, r7, lr}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	460b      	mov	r3, r1
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	691c      	ldr	r4, [r3, #16]
 800f28e:	7afa      	ldrb	r2, [r7, #11]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2117      	movs	r1, #23
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	47a0      	blx	r4
 800f298:	4603      	mov	r3, r0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3714      	adds	r7, #20
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd90      	pop	{r4, r7, pc}

0800f2a2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b082      	sub	sp, #8
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800f2ae:	1cfb      	adds	r3, r7, #3
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	2101      	movs	r1, #1
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7ff ffe1 	bl	800f27c <u8x8_byte_SendBytes>
 800f2ba:	4603      	mov	r3, r0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800f2c4:	b590      	push	{r4, r7, lr}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	68dc      	ldr	r4, [r3, #12]
 800f2d4:	78fa      	ldrb	r2, [r7, #3]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	2115      	movs	r1, #21
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	47a0      	blx	r4
 800f2de:	4603      	mov	r3, r0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd90      	pop	{r4, r7, pc}

0800f2e8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800f2e8:	b590      	push	{r4, r7, lr}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	68dc      	ldr	r4, [r3, #12]
 800f2f8:	78fa      	ldrb	r2, [r7, #3]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	2116      	movs	r1, #22
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	47a0      	blx	r4
 800f302:	4603      	mov	r3, r0
}
 800f304:	4618      	mov	r0, r3
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd90      	pop	{r4, r7, pc}

0800f30c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800f30c:	b590      	push	{r4, r7, lr}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	460b      	mov	r3, r1
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	68dc      	ldr	r4, [r3, #12]
 800f31e:	7afa      	ldrb	r2, [r7, #11]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2117      	movs	r1, #23
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	47a0      	blx	r4
 800f328:	4603      	mov	r3, r0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd90      	pop	{r4, r7, pc}

0800f332 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800f332:	b590      	push	{r4, r7, lr}
 800f334:	b083      	sub	sp, #12
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	68dc      	ldr	r4, [r3, #12]
 800f33e:	2300      	movs	r3, #0
 800f340:	2200      	movs	r2, #0
 800f342:	2118      	movs	r1, #24
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	47a0      	blx	r4
 800f348:	4603      	mov	r3, r0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	370c      	adds	r7, #12
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd90      	pop	{r4, r7, pc}

0800f352 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800f352:	b590      	push	{r4, r7, lr}
 800f354:	b083      	sub	sp, #12
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	68dc      	ldr	r4, [r3, #12]
 800f35e:	2300      	movs	r3, #0
 800f360:	2200      	movs	r2, #0
 800f362:	2119      	movs	r1, #25
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	47a0      	blx	r4
 800f368:	4603      	mov	r3, r0
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd90      	pop	{r4, r7, pc}

0800f372 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800f372:	b590      	push	{r4, r7, lr}
 800f374:	b085      	sub	sp, #20
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
 800f37a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	73fb      	strb	r3, [r7, #15]
    data++;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	3301      	adds	r3, #1
 800f386:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800f388:	7bfb      	ldrb	r3, [r7, #15]
 800f38a:	2bfe      	cmp	r3, #254	; 0xfe
 800f38c:	d031      	beq.n	800f3f2 <u8x8_cad_SendSequence+0x80>
 800f38e:	2bfe      	cmp	r3, #254	; 0xfe
 800f390:	dc3d      	bgt.n	800f40e <u8x8_cad_SendSequence+0x9c>
 800f392:	2b19      	cmp	r3, #25
 800f394:	dc3b      	bgt.n	800f40e <u8x8_cad_SendSequence+0x9c>
 800f396:	2b18      	cmp	r3, #24
 800f398:	da23      	bge.n	800f3e2 <u8x8_cad_SendSequence+0x70>
 800f39a:	2b16      	cmp	r3, #22
 800f39c:	dc02      	bgt.n	800f3a4 <u8x8_cad_SendSequence+0x32>
 800f39e:	2b15      	cmp	r3, #21
 800f3a0:	da03      	bge.n	800f3aa <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800f3a2:	e034      	b.n	800f40e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800f3a4:	2b17      	cmp	r3, #23
 800f3a6:	d00e      	beq.n	800f3c6 <u8x8_cad_SendSequence+0x54>
	return;
 800f3a8:	e031      	b.n	800f40e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	68dc      	ldr	r4, [r3, #12]
 800f3b4:	7bba      	ldrb	r2, [r7, #14]
 800f3b6:	7bf9      	ldrb	r1, [r7, #15]
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	47a0      	blx	r4
	  data++;
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	603b      	str	r3, [r7, #0]
	  break;
 800f3c4:	e022      	b.n	800f40c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800f3cc:	f107 030e 	add.w	r3, r7, #14
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff ff99 	bl	800f30c <u8x8_cad_SendData>
	  data++;
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	603b      	str	r3, [r7, #0]
	  break;
 800f3e0:	e014      	b.n	800f40c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	68dc      	ldr	r4, [r3, #12]
 800f3e6:	7bf9      	ldrb	r1, [r7, #15]
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	47a0      	blx	r4
	  break;
 800f3f0:	e00c      	b.n	800f40c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800f3f8:	7bbb      	ldrb	r3, [r7, #14]
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	2129      	movs	r1, #41	; 0x29
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f9d9 	bl	800f7b6 <u8x8_gpio_call>
	  data++;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	3301      	adds	r3, #1
 800f408:	603b      	str	r3, [r7, #0]
	  break;
 800f40a:	bf00      	nop
    cmd = *data;
 800f40c:	e7b6      	b.n	800f37c <u8x8_cad_SendSequence+0xa>
	return;
 800f40e:	bf00      	nop
    }
  }
}
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	bd90      	pop	{r4, r7, pc}
	...

0800f418 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800f418:	b590      	push	{r4, r7, lr}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	607b      	str	r3, [r7, #4]
 800f422:	460b      	mov	r3, r1
 800f424:	72fb      	strb	r3, [r7, #11]
 800f426:	4613      	mov	r3, r2
 800f428:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800f42a:	7afb      	ldrb	r3, [r7, #11]
 800f42c:	3b14      	subs	r3, #20
 800f42e:	2b05      	cmp	r3, #5
 800f430:	d82f      	bhi.n	800f492 <u8x8_cad_001+0x7a>
 800f432:	a201      	add	r2, pc, #4	; (adr r2, 800f438 <u8x8_cad_001+0x20>)
 800f434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f438:	0800f481 	.word	0x0800f481
 800f43c:	0800f451 	.word	0x0800f451
 800f440:	0800f465 	.word	0x0800f465
 800f444:	0800f479 	.word	0x0800f479
 800f448:	0800f481 	.word	0x0800f481
 800f44c:	0800f481 	.word	0x0800f481
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800f450:	2100      	movs	r1, #0
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f7ff ff00 	bl	800f258 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800f458:	7abb      	ldrb	r3, [r7, #10]
 800f45a:	4619      	mov	r1, r3
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff ff20 	bl	800f2a2 <u8x8_byte_SendByte>
      break;
 800f462:	e018      	b.n	800f496 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800f464:	2100      	movs	r1, #0
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f7ff fef6 	bl	800f258 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800f46c:	7abb      	ldrb	r3, [r7, #10]
 800f46e:	4619      	mov	r1, r3
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f7ff ff16 	bl	800f2a2 <u8x8_byte_SendByte>
      break;
 800f476:	e00e      	b.n	800f496 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800f478:	2101      	movs	r1, #1
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f7ff feec 	bl	800f258 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	691c      	ldr	r4, [r3, #16]
 800f484:	7aba      	ldrb	r2, [r7, #10]
 800f486:	7af9      	ldrb	r1, [r7, #11]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	47a0      	blx	r4
 800f48e:	4603      	mov	r3, r0
 800f490:	e002      	b.n	800f498 <u8x8_cad_001+0x80>
    default:
      return 0;
 800f492:	2300      	movs	r3, #0
 800f494:	e000      	b.n	800f498 <u8x8_cad_001+0x80>
  }
  return 1;
 800f496:	2301      	movs	r3, #1
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3714      	adds	r7, #20
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd90      	pop	{r4, r7, pc}

0800f4a0 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	607b      	str	r3, [r7, #4]
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	72fb      	strb	r3, [r7, #11]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800f4b2:	7afb      	ldrb	r3, [r7, #11]
 800f4b4:	3b0b      	subs	r3, #11
 800f4b6:	2b04      	cmp	r3, #4
 800f4b8:	f200 808a 	bhi.w	800f5d0 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800f4bc:	a201      	add	r2, pc, #4	; (adr r2, 800f4c4 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800f4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c2:	bf00      	nop
 800f4c4:	0800f4d9 	.word	0x0800f4d9
 800f4c8:	0800f5d1 	.word	0x0800f5d1
 800f4cc:	0800f4f3 	.word	0x0800f4f3
 800f4d0:	0800f525 	.word	0x0800f525
 800f4d4:	0800f545 	.word	0x0800f545
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800f4d8:	7abb      	ldrb	r3, [r7, #10]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d104      	bne.n	800f4e8 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800f4de:	4940      	ldr	r1, [pc, #256]	; (800f5e0 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f7ff ff46 	bl	800f372 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800f4e6:	e075      	b.n	800f5d4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800f4e8:	493e      	ldr	r1, [pc, #248]	; (800f5e4 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f7ff ff41 	bl	800f372 <u8x8_cad_SendSequence>
      break;
 800f4f0:	e070      	b.n	800f5d4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800f4f2:	7abb      	ldrb	r3, [r7, #10]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10a      	bne.n	800f50e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800f4f8:	493b      	ldr	r1, [pc, #236]	; (800f5e8 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800f4fa:	68f8      	ldr	r0, [r7, #12]
 800f4fc:	f7ff ff39 	bl	800f372 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	7c9a      	ldrb	r2, [r3, #18]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800f50c:	e062      	b.n	800f5d4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800f50e:	4937      	ldr	r1, [pc, #220]	; (800f5ec <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f7ff ff2e 	bl	800f372 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	7cda      	ldrb	r2, [r3, #19]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800f522:	e057      	b.n	800f5d4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f7ff ff04 	bl	800f332 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800f52a:	2181      	movs	r1, #129	; 0x81
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f7ff fec9 	bl	800f2c4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800f532:	7abb      	ldrb	r3, [r7, #10]
 800f534:	4619      	mov	r1, r3
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f7ff fed6 	bl	800f2e8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f7ff ff08 	bl	800f352 <u8x8_cad_EndTransfer>
      break;
 800f542:	e047      	b.n	800f5d4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f7ff fef4 	bl	800f332 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	795b      	ldrb	r3, [r3, #5]
 800f54e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800f550:	7dfb      	ldrb	r3, [r7, #23]
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
 800f55e:	4413      	add	r3, r2
 800f560:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800f562:	2140      	movs	r1, #64	; 0x40
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f7ff fead 	bl	800f2c4 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800f56a:	7dfb      	ldrb	r3, [r7, #23]
 800f56c:	091b      	lsrs	r3, r3, #4
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	f043 0310 	orr.w	r3, r3, #16
 800f574:	b2db      	uxtb	r3, r3
 800f576:	4619      	mov	r1, r3
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f7ff fea3 	bl	800f2c4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800f57e:	7dfb      	ldrb	r3, [r7, #23]
 800f580:	f003 030f 	and.w	r3, r3, #15
 800f584:	b2db      	uxtb	r3, r3
 800f586:	4619      	mov	r1, r3
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7ff fead 	bl	800f2e8 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	799b      	ldrb	r3, [r3, #6]
 800f592:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800f596:	b2db      	uxtb	r3, r3
 800f598:	4619      	mov	r1, r3
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f7ff fea4 	bl	800f2e8 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	791b      	ldrb	r3, [r3, #4]
 800f5a4:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800f5ac:	7dbb      	ldrb	r3, [r7, #22]
 800f5ae:	00db      	lsls	r3, r3, #3
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	693a      	ldr	r2, [r7, #16]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f7ff fea8 	bl	800f30c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800f5bc:	7abb      	ldrb	r3, [r7, #10]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800f5c2:	7abb      	ldrb	r3, [r7, #10]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1eb      	bne.n	800f5a0 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7ff fec2 	bl	800f352 <u8x8_cad_EndTransfer>
      break;
 800f5ce:	e001      	b.n	800f5d4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	e000      	b.n	800f5d6 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800f5d4:	2301      	movs	r3, #1
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3718      	adds	r7, #24
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	08016330 	.word	0x08016330
 800f5e4:	08016338 	.word	0x08016338
 800f5e8:	08016340 	.word	0x08016340
 800f5ec:	08016348 	.word	0x08016348

0800f5f0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	607b      	str	r3, [r7, #4]
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	72fb      	strb	r3, [r7, #11]
 800f5fe:	4613      	mov	r3, r2
 800f600:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800f602:	7aba      	ldrb	r2, [r7, #10]
 800f604:	7af9      	ldrb	r1, [r7, #11]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f7ff ff49 	bl	800f4a0 <u8x8_d_ssd1306_sh1106_generic>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800f614:	2301      	movs	r3, #1
 800f616:	e014      	b.n	800f642 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800f618:	7afb      	ldrb	r3, [r7, #11]
 800f61a:	2b09      	cmp	r3, #9
 800f61c:	d009      	beq.n	800f632 <u8x8_d_ssd1306_128x64_noname+0x42>
 800f61e:	2b0a      	cmp	r3, #10
 800f620:	d10c      	bne.n	800f63c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f000 f82a 	bl	800f67c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800f628:	4908      	ldr	r1, [pc, #32]	; (800f64c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f7ff fea1 	bl	800f372 <u8x8_cad_SendSequence>
      break;
 800f630:	e006      	b.n	800f640 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800f632:	4907      	ldr	r1, [pc, #28]	; (800f650 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f000 f80d 	bl	800f654 <u8x8_d_helper_display_setup_memory>
      break;
 800f63a:	e001      	b.n	800f640 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800f63c:	2300      	movs	r3, #0
 800f63e:	e000      	b.n	800f642 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800f640:	2301      	movs	r3, #1
}
 800f642:	4618      	mov	r0, r3
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	080162f8 	.word	0x080162f8
 800f650:	08016350 	.word	0x08016350

0800f654 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	683a      	ldr	r2, [r7, #0]
 800f662:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	7c9a      	ldrb	r2, [r3, #18]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800f670:	bf00      	nop
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800f67c:	b590      	push	{r4, r7, lr}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	695c      	ldr	r4, [r3, #20]
 800f688:	2300      	movs	r3, #0
 800f68a:	2200      	movs	r2, #0
 800f68c:	2128      	movs	r1, #40	; 0x28
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	68dc      	ldr	r4, [r3, #12]
 800f696:	2300      	movs	r3, #0
 800f698:	2200      	movs	r2, #0
 800f69a:	2114      	movs	r1, #20
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	214b      	movs	r1, #75	; 0x4b
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f886 	bl	800f7b6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	791b      	ldrb	r3, [r3, #4]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	2129      	movs	r1, #41	; 0x29
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 f87e 	bl	800f7b6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	214b      	movs	r1, #75	; 0x4b
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f879 	bl	800f7b6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	791b      	ldrb	r3, [r3, #4]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	2129      	movs	r1, #41	; 0x29
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 f871 	bl	800f7b6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	214b      	movs	r1, #75	; 0x4b
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 f86c 	bl	800f7b6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	795b      	ldrb	r3, [r3, #5]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	2129      	movs	r1, #41	; 0x29
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 f864 	bl	800f7b6 <u8x8_gpio_call>
}    
 800f6ee:	bf00      	nop
 800f6f0:	370c      	adds	r7, #12
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd90      	pop	{r4, r7, pc}

0800f6f6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800f6f6:	b590      	push	{r4, r7, lr}
 800f6f8:	b085      	sub	sp, #20
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	4608      	mov	r0, r1
 800f700:	4611      	mov	r1, r2
 800f702:	461a      	mov	r2, r3
 800f704:	4603      	mov	r3, r0
 800f706:	70fb      	strb	r3, [r7, #3]
 800f708:	460b      	mov	r3, r1
 800f70a:	70bb      	strb	r3, [r7, #2]
 800f70c:	4613      	mov	r3, r2
 800f70e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800f710:	78fb      	ldrb	r3, [r7, #3]
 800f712:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800f714:	78bb      	ldrb	r3, [r7, #2]
 800f716:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800f718:	787b      	ldrb	r3, [r7, #1]
 800f71a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800f71c:	6a3b      	ldr	r3, [r7, #32]
 800f71e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	689c      	ldr	r4, [r3, #8]
 800f724:	f107 0308 	add.w	r3, r7, #8
 800f728:	2201      	movs	r2, #1
 800f72a:	210f      	movs	r1, #15
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	47a0      	blx	r4
 800f730:	4603      	mov	r3, r0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	bd90      	pop	{r4, r7, pc}

0800f73a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800f73a:	b590      	push	{r4, r7, lr}
 800f73c:	b083      	sub	sp, #12
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689c      	ldr	r4, [r3, #8]
 800f746:	2300      	movs	r3, #0
 800f748:	2200      	movs	r2, #0
 800f74a:	2109      	movs	r1, #9
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	47a0      	blx	r4
}
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	bd90      	pop	{r4, r7, pc}

0800f758 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800f758:	b590      	push	{r4, r7, lr}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	689c      	ldr	r4, [r3, #8]
 800f764:	2300      	movs	r3, #0
 800f766:	2200      	movs	r2, #0
 800f768:	210a      	movs	r1, #10
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	47a0      	blx	r4
}
 800f76e:	bf00      	nop
 800f770:	370c      	adds	r7, #12
 800f772:	46bd      	mov	sp, r7
 800f774:	bd90      	pop	{r4, r7, pc}

0800f776 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800f776:	b590      	push	{r4, r7, lr}
 800f778:	b083      	sub	sp, #12
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
 800f77e:	460b      	mov	r3, r1
 800f780:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	689c      	ldr	r4, [r3, #8]
 800f786:	78fa      	ldrb	r2, [r7, #3]
 800f788:	2300      	movs	r3, #0
 800f78a:	210b      	movs	r1, #11
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	47a0      	blx	r4
}
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	bd90      	pop	{r4, r7, pc}

0800f798 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800f798:	b590      	push	{r4, r7, lr}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	689c      	ldr	r4, [r3, #8]
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	2110      	movs	r1, #16
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	47a0      	blx	r4
}
 800f7ae:	bf00      	nop
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd90      	pop	{r4, r7, pc}

0800f7b6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800f7b6:	b590      	push	{r4, r7, lr}
 800f7b8:	b083      	sub	sp, #12
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	460b      	mov	r3, r1
 800f7c0:	70fb      	strb	r3, [r7, #3]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	695c      	ldr	r4, [r3, #20]
 800f7ca:	78ba      	ldrb	r2, [r7, #2]
 800f7cc:	78f9      	ldrb	r1, [r7, #3]
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	47a0      	blx	r4
}
 800f7d4:	bf00      	nop
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd90      	pop	{r4, r7, pc}

0800f7dc <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	607b      	str	r3, [r7, #4]
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	72fb      	strb	r3, [r7, #11]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3714      	adds	r7, #20
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a13      	ldr	r2, [pc, #76]	; (800f85c <u8x8_SetupDefaults+0x60>)
 800f80e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4a12      	ldr	r2, [pc, #72]	; (800f85c <u8x8_SetupDefaults+0x60>)
 800f814:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a10      	ldr	r2, [pc, #64]	; (800f85c <u8x8_SetupDefaults+0x60>)
 800f81a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a0f      	ldr	r2, [pc, #60]	; (800f85c <u8x8_SetupDefaults+0x60>)
 800f820:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2200      	movs	r2, #0
 800f82e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2200      	movs	r2, #0
 800f83e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	22ff      	movs	r2, #255	; 0xff
 800f844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	22ff      	movs	r2, #255	; 0xff
 800f84c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr
 800f85c:	0800f7dd 	.word	0x0800f7dd

0800f860 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	607a      	str	r2, [r7, #4]
 800f86c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f7ff ffc4 	bl	800f7fc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	683a      	ldr	r2, [r7, #0]
 800f884:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	69ba      	ldr	r2, [r7, #24]
 800f88a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7ff ff54 	bl	800f73a <u8x8_SetupMemory>
}
 800f892:	bf00      	nop
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <LL_ADC_REG_SetSequencerRanks>:
{
 800f89a:	b480      	push	{r7}
 800f89c:	b089      	sub	sp, #36	; 0x24
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	60f8      	str	r0, [r7, #12]
 800f8a2:	60b9      	str	r1, [r7, #8]
 800f8a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	332c      	adds	r3, #44	; 0x2c
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 800f8b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f8b8:	69ba      	ldr	r2, [r7, #24]
 800f8ba:	fa92 f2a2 	rbit	r2, r2
 800f8be:	617a      	str	r2, [r7, #20]
  return result;
 800f8c0:	697a      	ldr	r2, [r7, #20]
 800f8c2:	fab2 f282 	clz	r2, r2
 800f8c6:	b2d2      	uxtb	r2, r2
 800f8c8:	40d3      	lsrs	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	440b      	add	r3, r1
 800f8ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	f003 031f 	and.w	r3, r3, #31
 800f8da:	211f      	movs	r1, #31
 800f8dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f8e0:	43db      	mvns	r3, r3
 800f8e2:	401a      	ands	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f003 011f 	and.w	r1, r3, #31
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	f003 031f 	and.w	r3, r3, #31
 800f8f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f8f4:	431a      	orrs	r2, r3
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	601a      	str	r2, [r3, #0]
}
 800f8fa:	bf00      	nop
 800f8fc:	3724      	adds	r7, #36	; 0x24
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	431a      	orrs	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	609a      	str	r2, [r3, #8]
}
 800f920:	bf00      	nop
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <LL_ADC_SetChannelSamplingTime>:
{
 800f92c:	b480      	push	{r7}
 800f92e:	b08d      	sub	sp, #52	; 0x34
 800f930:	af00      	add	r7, sp, #0
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	330c      	adds	r3, #12
 800f93c:	4619      	mov	r1, r3
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f94a:	69ba      	ldr	r2, [r7, #24]
 800f94c:	fa92 f2a2 	rbit	r2, r2
 800f950:	617a      	str	r2, [r7, #20]
  return result;
 800f952:	697a      	ldr	r2, [r7, #20]
 800f954:	fab2 f282 	clz	r2, r2
 800f958:	b2d2      	uxtb	r2, r2
 800f95a:	40d3      	lsrs	r3, r2
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	440b      	add	r3, r1
 800f960:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800f96c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800f970:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f972:	6a39      	ldr	r1, [r7, #32]
 800f974:	fa91 f1a1 	rbit	r1, r1
 800f978:	61f9      	str	r1, [r7, #28]
  return result;
 800f97a:	69f9      	ldr	r1, [r7, #28]
 800f97c:	fab1 f181 	clz	r1, r1
 800f980:	b2c9      	uxtb	r1, r1
 800f982:	40cb      	lsrs	r3, r1
 800f984:	2107      	movs	r1, #7
 800f986:	fa01 f303 	lsl.w	r3, r1, r3
 800f98a:	43db      	mvns	r3, r3
 800f98c:	401a      	ands	r2, r3
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800f994:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800f998:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f99a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f99c:	fa91 f1a1 	rbit	r1, r1
 800f9a0:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800f9a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9a4:	fab1 f181 	clz	r1, r1
 800f9a8:	b2c9      	uxtb	r1, r1
 800f9aa:	40cb      	lsrs	r3, r1
 800f9ac:	6879      	ldr	r1, [r7, #4]
 800f9ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f9b2:	431a      	orrs	r2, r3
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	601a      	str	r2, [r3, #0]
}
 800f9b8:	bf00      	nop
 800f9ba:	3734      	adds	r7, #52	; 0x34
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <LL_ADC_Enable>:
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	f043 0201 	orr.w	r2, r3, #1
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	609a      	str	r2, [r3, #8]
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	609a      	str	r2, [r3, #8]
}
 800f9f8:	bf00      	nop
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa10:	b29b      	uxth	r3, r3
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	370c      	adds	r7, #12
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b083      	sub	sp, #12
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f003 0302 	and.w	r3, r3, #2
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	bf0c      	ite	eq
 800fa32:	2301      	moveq	r3, #1
 800fa34:	2300      	movne	r3, #0
 800fa36:	b2db      	uxtb	r3, r3
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <adc_init>:

#define ADC1_CONVERSION_TIMEOUT 1000

static void adc1_init(void);

void adc_init(AdcID id) {
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 800fa4e:	79fb      	ldrb	r3, [r7, #7]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d108      	bne.n	800fa66 <adc_init+0x22>
	case AdcId1:
		adc1_init();
 800fa54:	f000 f85c 	bl	800fb10 <adc1_init>
		LL_ADC_Enable(ADC1);
 800fa58:	4808      	ldr	r0, [pc, #32]	; (800fa7c <adc_init+0x38>)
 800fa5a:	f7ff ffb3 	bl	800f9c4 <LL_ADC_Enable>
		hal_cli_printf("adc1 init");
 800fa5e:	4808      	ldr	r0, [pc, #32]	; (800fa80 <adc_init+0x3c>)
 800fa60:	f000 f99e 	bl	800fda0 <hal_cli_printf>
		break;
 800fa64:	e005      	b.n	800fa72 <adc_init+0x2e>

	default:
		hal_cli_printf("adc%d not exist",id);
 800fa66:	79fb      	ldrb	r3, [r7, #7]
 800fa68:	4619      	mov	r1, r3
 800fa6a:	4806      	ldr	r0, [pc, #24]	; (800fa84 <adc_init+0x40>)
 800fa6c:	f000 f998 	bl	800fda0 <hal_cli_printf>
		break;
 800fa70:	bf00      	nop
	}
}
 800fa72:	bf00      	nop
 800fa74:	3708      	adds	r7, #8
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	40012000 	.word	0x40012000
 800fa80:	080153ec 	.word	0x080153ec
 800fa84:	080153f8 	.word	0x080153f8

0800fa88 <hal_adc_getdata>:

bool hal_adc_getdata(AdcID id, uint32_t* data) {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	73fb      	strb	r3, [r7, #15]
	coretex_timer timer;
	timer = hal_get_delay_timer(ADC1_CONVERSION_TIMEOUT);
 800fa94:	463b      	mov	r3, r7
 800fa96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f000 fc62 	bl	8010364 <hal_get_delay_timer>
 800faa0:	f107 0310 	add.w	r3, r7, #16
 800faa4:	463a      	mov	r2, r7
 800faa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800faaa:	e883 0003 	stmia.w	r3, {r0, r1}

	switch(id) {
 800faae:	7bfb      	ldrb	r3, [r7, #15]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d11d      	bne.n	800faf0 <hal_adc_getdata+0x68>
		case AdcId1:
			LL_ADC_REG_StartConversionSWStart(ADC1);
 800fab4:	4813      	ldr	r0, [pc, #76]	; (800fb04 <hal_adc_getdata+0x7c>)
 800fab6:	f7ff ff95 	bl	800f9e4 <LL_ADC_REG_StartConversionSWStart>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800faba:	e009      	b.n	800fad0 <hal_adc_getdata+0x48>
				if(hal_delay_timer_is_expired(&timer))
 800fabc:	f107 0310 	add.w	r3, r7, #16
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 fc75 	bl	80103b0 <hal_delay_timer_is_expired>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <hal_adc_getdata+0x48>
					return false;
 800facc:	2300      	movs	r3, #0
 800face:	e015      	b.n	800fafc <hal_adc_getdata+0x74>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800fad0:	480c      	ldr	r0, [pc, #48]	; (800fb04 <hal_adc_getdata+0x7c>)
 800fad2:	f7ff ffa4 	bl	800fa1e <LL_ADC_IsActiveFlag_EOCS>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d0ef      	beq.n	800fabc <hal_adc_getdata+0x34>
			}
			*data = LL_ADC_REG_ReadConversionData12(ADC1);
 800fadc:	4809      	ldr	r0, [pc, #36]	; (800fb04 <hal_adc_getdata+0x7c>)
 800fade:	f7ff ff91 	bl	800fa04 <LL_ADC_REG_ReadConversionData12>
 800fae2:	4603      	mov	r3, r0
 800fae4:	461a      	mov	r2, r3
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	601a      	str	r2, [r3, #0]
			break;
 800faea:	bf00      	nop
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
			return false;
			break;
	}

	return true;
 800faec:	2301      	movs	r3, #1
 800faee:	e005      	b.n	800fafc <hal_adc_getdata+0x74>
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
 800faf0:	2229      	movs	r2, #41	; 0x29
 800faf2:	4905      	ldr	r1, [pc, #20]	; (800fb08 <hal_adc_getdata+0x80>)
 800faf4:	4805      	ldr	r0, [pc, #20]	; (800fb0c <hal_adc_getdata+0x84>)
 800faf6:	f000 f953 	bl	800fda0 <hal_cli_printf>
			return false;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3718      	adds	r7, #24
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	40012000 	.word	0x40012000
 800fb08:	08015408 	.word	0x08015408
 800fb0c:	08015418 	.word	0x08015418

0800fb10 <adc1_init>:

static void adc1_init(void)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b08c      	sub	sp, #48	; 0x30
 800fb14:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800fb16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	605a      	str	r2, [r3, #4]
 800fb20:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800fb22:	f107 0310 	add.w	r3, r7, #16
 800fb26:	2200      	movs	r2, #0
 800fb28:	601a      	str	r2, [r3, #0]
 800fb2a:	605a      	str	r2, [r3, #4]
 800fb2c:	609a      	str	r2, [r3, #8]
 800fb2e:	60da      	str	r2, [r3, #12]
 800fb30:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800fb32:	463b      	mov	r3, r7
 800fb34:	2200      	movs	r2, #0
 800fb36:	601a      	str	r2, [r3, #0]
 800fb38:	605a      	str	r2, [r3, #4]
 800fb3a:	609a      	str	r2, [r3, #8]
 800fb3c:	60da      	str	r2, [r3, #12]

  hal_gpio_init(&gpio_adc1_channel7, GpioModeAnalog, GpioPullNo, GpioSpeedFreqLow);
 800fb3e:	2300      	movs	r3, #0
 800fb40:	2200      	movs	r2, #0
 800fb42:	2105      	movs	r1, #5
 800fb44:	481e      	ldr	r0, [pc, #120]	; (800fbc0 <adc1_init+0xb0>)
 800fb46:	f000 fe81 	bl	801084c <hal_gpio_init>

  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800fb52:	2300      	movs	r3, #0
 800fb54:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800fb56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	4819      	ldr	r0, [pc, #100]	; (800fbc4 <adc1_init+0xb4>)
 800fb5e:	f7f3 fdcd 	bl	80036fc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800fb62:	2300      	movs	r3, #0
 800fb64:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800fb66:	2300      	movs	r3, #0
 800fb68:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800fb72:	2300      	movs	r3, #0
 800fb74:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800fb76:	f107 0310 	add.w	r3, r7, #16
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4811      	ldr	r0, [pc, #68]	; (800fbc4 <adc1_init+0xb4>)
 800fb7e:	f7f3 fde9 	bl	8003754 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800fb82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb86:	480f      	ldr	r0, [pc, #60]	; (800fbc4 <adc1_init+0xb4>)
 800fb88:	f7ff febd 	bl	800f906 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800fb8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fb90:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800fb92:	2300      	movs	r3, #0
 800fb94:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800fb96:	463b      	mov	r3, r7
 800fb98:	4619      	mov	r1, r3
 800fb9a:	480b      	ldr	r0, [pc, #44]	; (800fbc8 <adc1_init+0xb8>)
 800fb9c:	f7f3 fd66 	bl	800366c <LL_ADC_CommonInit>


  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800fba0:	4a0a      	ldr	r2, [pc, #40]	; (800fbcc <adc1_init+0xbc>)
 800fba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fba6:	4807      	ldr	r0, [pc, #28]	; (800fbc4 <adc1_init+0xb4>)
 800fba8:	f7ff fe77 	bl	800f89a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 800fbac:	2200      	movs	r2, #0
 800fbae:	4907      	ldr	r1, [pc, #28]	; (800fbcc <adc1_init+0xbc>)
 800fbb0:	4804      	ldr	r0, [pc, #16]	; (800fbc4 <adc1_init+0xb4>)
 800fbb2:	f7ff febb 	bl	800f92c <LL_ADC_SetChannelSamplingTime>
}
 800fbb6:	bf00      	nop
 800fbb8:	3730      	adds	r7, #48	; 0x30
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	080163b0 	.word	0x080163b0
 800fbc4:	40012000 	.word	0x40012000
 800fbc8:	40012300 	.word	0x40012300
 800fbcc:	03500007 	.word	0x03500007

0800fbd0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b089      	sub	sp, #36	; 0x24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	330c      	adds	r3, #12
 800fbdc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	e853 3f00 	ldrex	r3, [r3]
 800fbe4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	f043 0310 	orr.w	r3, r3, #16
 800fbec:	61fb      	str	r3, [r7, #28]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	330c      	adds	r3, #12
 800fbf2:	69fa      	ldr	r2, [r7, #28]
 800fbf4:	61ba      	str	r2, [r7, #24]
 800fbf6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf8:	6979      	ldr	r1, [r7, #20]
 800fbfa:	69ba      	ldr	r2, [r7, #24]
 800fbfc:	e841 2300 	strex	r3, r2, [r1]
 800fc00:	613b      	str	r3, [r7, #16]
   return(result);
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1e7      	bne.n	800fbd8 <LL_USART_EnableIT_IDLE+0x8>
}
 800fc08:	bf00      	nop
 800fc0a:	bf00      	nop
 800fc0c:	3724      	adds	r7, #36	; 0x24
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr

0800fc16 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800fc16:	b480      	push	{r7}
 800fc18:	b089      	sub	sp, #36	; 0x24
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	3314      	adds	r3, #20
 800fc22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	e853 3f00 	ldrex	r3, [r3]
 800fc2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc32:	61fb      	str	r3, [r7, #28]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	3314      	adds	r3, #20
 800fc38:	69fa      	ldr	r2, [r7, #28]
 800fc3a:	61ba      	str	r2, [r7, #24]
 800fc3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3e:	6979      	ldr	r1, [r7, #20]
 800fc40:	69ba      	ldr	r2, [r7, #24]
 800fc42:	e841 2300 	strex	r3, r2, [r1]
 800fc46:	613b      	str	r3, [r7, #16]
   return(result);
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1e7      	bne.n	800fc1e <LL_USART_EnableDMAReq_RX+0x8>
}
 800fc4e:	bf00      	nop
 800fc50:	bf00      	nop
 800fc52:	3724      	adds	r7, #36	; 0x24
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800fc66:	4a0c      	ldr	r2, [pc, #48]	; (800fc98 <LL_DMA_EnableStream+0x3c>)
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4413      	add	r3, r2
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4908      	ldr	r1, [pc, #32]	; (800fc98 <LL_DMA_EnableStream+0x3c>)
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	440a      	add	r2, r1
 800fc7c:	7812      	ldrb	r2, [r2, #0]
 800fc7e:	4611      	mov	r1, r2
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	440a      	add	r2, r1
 800fc84:	f043 0301 	orr.w	r3, r3, #1
 800fc88:	6013      	str	r3, [r2, #0]
}
 800fc8a:	bf00      	nop
 800fc8c:	370c      	adds	r7, #12
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	08016368 	.word	0x08016368

0800fc9c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800fca8:	4a0d      	ldr	r2, [pc, #52]	; (800fce0 <LL_DMA_SetDataLength+0x44>)
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	4413      	add	r3, r2
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	0c1b      	lsrs	r3, r3, #16
 800fcba:	041b      	lsls	r3, r3, #16
 800fcbc:	4908      	ldr	r1, [pc, #32]	; (800fce0 <LL_DMA_SetDataLength+0x44>)
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	440a      	add	r2, r1
 800fcc2:	7812      	ldrb	r2, [r2, #0]
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	440a      	add	r2, r1
 800fcca:	4611      	mov	r1, r2
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	604b      	str	r3, [r1, #4]
}
 800fcd2:	bf00      	nop
 800fcd4:	3714      	adds	r7, #20
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	08016368 	.word	0x08016368

0800fce4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800fcf0:	4a07      	ldr	r2, [pc, #28]	; (800fd10 <LL_DMA_SetMemoryAddress+0x2c>)
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	461a      	mov	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	60d3      	str	r3, [r2, #12]
}
 800fd04:	bf00      	nop
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	08016368 	.word	0x08016368

0800fd14 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800fd20:	4a07      	ldr	r2, [pc, #28]	; (800fd40 <LL_DMA_SetPeriphAddress+0x2c>)
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	4413      	add	r3, r2
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	461a      	mov	r2, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	461a      	mov	r2, r3
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6093      	str	r3, [r2, #8]
}
 800fd34:	bf00      	nop
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	08016368 	.word	0x08016368

0800fd44 <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 800fd4a:	f7fb f86d 	bl	800ae28 <xTaskGetTickCount>
 800fd4e:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	4a10      	ldr	r2, [pc, #64]	; (800fd94 <print_boottime+0x50>)
 800fd54:	fba2 2303 	umull	r2, r3, r2, r3
 800fd58:	099b      	lsrs	r3, r3, #6
 800fd5a:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	4a0d      	ldr	r2, [pc, #52]	; (800fd94 <print_boottime+0x50>)
 800fd60:	fba2 1203 	umull	r1, r2, r2, r3
 800fd64:	0992      	lsrs	r2, r2, #6
 800fd66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fd6a:	fb01 f202 	mul.w	r2, r1, r2
 800fd6e:	1a9b      	subs	r3, r3, r2
 800fd70:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	68ba      	ldr	r2, [r7, #8]
 800fd76:	4908      	ldr	r1, [pc, #32]	; (800fd98 <print_boottime+0x54>)
 800fd78:	4808      	ldr	r0, [pc, #32]	; (800fd9c <print_boottime+0x58>)
 800fd7a:	f004 fdcf 	bl	801491c <siprintf>
 800fd7e:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	461a      	mov	r2, r3
 800fd84:	4905      	ldr	r1, [pc, #20]	; (800fd9c <print_boottime+0x58>)
 800fd86:	2000      	movs	r0, #0
 800fd88:	f003 ff5e 	bl	8013c48 <hal_uart_transfer>
}
 800fd8c:	bf00      	nop
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	10624dd3 	.word	0x10624dd3
 800fd98:	08015428 	.word	0x08015428
 800fd9c:	200049f8 	.word	0x200049f8

0800fda0 <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 800fda0:	b40f      	push	{r0, r1, r2, r3}
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b082      	sub	sp, #8
 800fda6:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 800fda8:	4b17      	ldr	r3, [pc, #92]	; (800fe08 <hal_cli_printf+0x68>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7fa f9f3 	bl	800a19c <xQueueSemaphoreTake>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d11d      	bne.n	800fdf8 <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 800fdbc:	f7ff ffc2 	bl	800fd44 <print_boottime>

	va_start(valist, fmt);
 800fdc0:	f107 0314 	add.w	r3, r7, #20
 800fdc4:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 800fdc6:	683a      	ldr	r2, [r7, #0]
 800fdc8:	6939      	ldr	r1, [r7, #16]
 800fdca:	4810      	ldr	r0, [pc, #64]	; (800fe0c <hal_cli_printf+0x6c>)
 800fdcc:	f004 fddc 	bl	8014988 <vsiprintf>
 800fdd0:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	490d      	ldr	r1, [pc, #52]	; (800fe0c <hal_cli_printf+0x6c>)
 800fdd8:	2000      	movs	r0, #0
 800fdda:	f003 ff35 	bl	8013c48 <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 800fdde:	2202      	movs	r2, #2
 800fde0:	490b      	ldr	r1, [pc, #44]	; (800fe10 <hal_cli_printf+0x70>)
 800fde2:	2000      	movs	r0, #0
 800fde4:	f003 ff30 	bl	8013c48 <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 800fde8:	4b07      	ldr	r3, [pc, #28]	; (800fe08 <hal_cli_printf+0x68>)
 800fdea:	6818      	ldr	r0, [r3, #0]
 800fdec:	2300      	movs	r3, #0
 800fdee:	2200      	movs	r2, #0
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	f7f9 fedf 	bl	8009bb4 <xQueueGenericSend>
 800fdf6:	e000      	b.n	800fdfa <hal_cli_printf+0x5a>
		return;
 800fdf8:	bf00      	nop
}
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe02:	b004      	add	sp, #16
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	200049f4 	.word	0x200049f4
 800fe0c:	200049f8 	.word	0x200049f8
 800fe10:	08015434 	.word	0x08015434

0800fe14 <hal_cli_init>:

void hal_cli_init(void) {
 800fe14:	b580      	push	{r7, lr}
 800fe16:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 800fe18:	4b17      	ldr	r3, [pc, #92]	; (800fe78 <hal_cli_init+0x64>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 800fe20:	4b15      	ldr	r3, [pc, #84]	; (800fe78 <hal_cli_init+0x64>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 800fe28:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <hal_cli_init+0x64>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 800fe30:	2001      	movs	r0, #1
 800fe32:	f7f9 fea7 	bl	8009b84 <xQueueCreateMutex>
 800fe36:	4603      	mov	r3, r0
 800fe38:	4a10      	ldr	r2, [pc, #64]	; (800fe7c <hal_cli_init+0x68>)
 800fe3a:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 800fe3c:	4b10      	ldr	r3, [pc, #64]	; (800fe80 <hal_cli_init+0x6c>)
 800fe3e:	461a      	mov	r2, r3
 800fe40:	2102      	movs	r1, #2
 800fe42:	4810      	ldr	r0, [pc, #64]	; (800fe84 <hal_cli_init+0x70>)
 800fe44:	f7ff ff4e 	bl	800fce4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800fe48:	4a0f      	ldr	r2, [pc, #60]	; (800fe88 <hal_cli_init+0x74>)
 800fe4a:	2102      	movs	r1, #2
 800fe4c:	480d      	ldr	r0, [pc, #52]	; (800fe84 <hal_cli_init+0x70>)
 800fe4e:	f7ff ff61 	bl	800fd14 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 800fe52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe56:	2102      	movs	r1, #2
 800fe58:	480a      	ldr	r0, [pc, #40]	; (800fe84 <hal_cli_init+0x70>)
 800fe5a:	f7ff ff1f 	bl	800fc9c <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 800fe5e:	480b      	ldr	r0, [pc, #44]	; (800fe8c <hal_cli_init+0x78>)
 800fe60:	f7ff fed9 	bl	800fc16 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800fe64:	2102      	movs	r1, #2
 800fe66:	4807      	ldr	r0, [pc, #28]	; (800fe84 <hal_cli_init+0x70>)
 800fe68:	f7ff fef8 	bl	800fc5c <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 800fe6c:	4807      	ldr	r0, [pc, #28]	; (800fe8c <hal_cli_init+0x78>)
 800fe6e:	f7ff feaf 	bl	800fbd0 <LL_USART_EnableIT_IDLE>
}
 800fe72:	bf00      	nop
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	200049f8 	.word	0x200049f8
 800fe7c:	200049f4 	.word	0x200049f4
 800fe80:	20004af8 	.word	0x20004af8
 800fe84:	40026400 	.word	0x40026400
 800fe88:	40011004 	.word	0x40011004
 800fe8c:	40011000 	.word	0x40011000

0800fe90 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b085      	sub	sp, #20
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800fe98:	4b08      	ldr	r3, [pc, #32]	; (800febc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fe9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe9c:	4907      	ldr	r1, [pc, #28]	; (800febc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4313      	orrs	r3, r2
 800fea2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4013      	ands	r3, r2
 800feac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800feae:	68fb      	ldr	r3, [r7, #12]
}
 800feb0:	bf00      	nop
 800feb2:	3714      	adds	r7, #20
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr
 800febc:	40023800 	.word	0x40023800

0800fec0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800fec8:	4b08      	ldr	r3, [pc, #32]	; (800feec <LL_APB1_GRP1_EnableClock+0x2c>)
 800feca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fecc:	4907      	ldr	r1, [pc, #28]	; (800feec <LL_APB1_GRP1_EnableClock+0x2c>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800fed4:	4b05      	ldr	r3, [pc, #20]	; (800feec <LL_APB1_GRP1_EnableClock+0x2c>)
 800fed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	4013      	ands	r3, r2
 800fedc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fede:	68fb      	ldr	r3, [r7, #12]
}
 800fee0:	bf00      	nop
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	40023800 	.word	0x40023800

0800fef0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b085      	sub	sp, #20
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800fef8:	4b08      	ldr	r3, [pc, #32]	; (800ff1c <LL_APB2_GRP1_EnableClock+0x2c>)
 800fefa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fefc:	4907      	ldr	r1, [pc, #28]	; (800ff1c <LL_APB2_GRP1_EnableClock+0x2c>)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800ff04:	4b05      	ldr	r3, [pc, #20]	; (800ff1c <LL_APB2_GRP1_EnableClock+0x2c>)
 800ff06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
}
 800ff10:	bf00      	nop
 800ff12:	3714      	adds	r7, #20
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	40023800 	.word	0x40023800

0800ff20 <LL_RCC_HSE_Enable>:
{
 800ff20:	b480      	push	{r7}
 800ff22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ff24:	4b05      	ldr	r3, [pc, #20]	; (800ff3c <LL_RCC_HSE_Enable+0x1c>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a04      	ldr	r2, [pc, #16]	; (800ff3c <LL_RCC_HSE_Enable+0x1c>)
 800ff2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff2e:	6013      	str	r3, [r2, #0]
}
 800ff30:	bf00      	nop
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	40023800 	.word	0x40023800

0800ff40 <LL_RCC_HSE_IsReady>:
{
 800ff40:	b480      	push	{r7}
 800ff42:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800ff44:	4b07      	ldr	r3, [pc, #28]	; (800ff64 <LL_RCC_HSE_IsReady+0x24>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff50:	bf0c      	ite	eq
 800ff52:	2301      	moveq	r3, #1
 800ff54:	2300      	movne	r3, #0
 800ff56:	b2db      	uxtb	r3, r3
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	40023800 	.word	0x40023800

0800ff68 <LL_RCC_SetSysClkSource>:
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ff70:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <LL_RCC_SetSysClkSource+0x24>)
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	f023 0203 	bic.w	r2, r3, #3
 800ff78:	4904      	ldr	r1, [pc, #16]	; (800ff8c <LL_RCC_SetSysClkSource+0x24>)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	608b      	str	r3, [r1, #8]
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr
 800ff8c:	40023800 	.word	0x40023800

0800ff90 <LL_RCC_GetSysClkSource>:
{
 800ff90:	b480      	push	{r7}
 800ff92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ff94:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <LL_RCC_GetSysClkSource+0x18>)
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	f003 030c 	and.w	r3, r3, #12
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	40023800 	.word	0x40023800

0800ffac <LL_RCC_SetAHBPrescaler>:
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ffb4:	4b06      	ldr	r3, [pc, #24]	; (800ffd0 <LL_RCC_SetAHBPrescaler+0x24>)
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ffbc:	4904      	ldr	r1, [pc, #16]	; (800ffd0 <LL_RCC_SetAHBPrescaler+0x24>)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	608b      	str	r3, [r1, #8]
}
 800ffc4:	bf00      	nop
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	40023800 	.word	0x40023800

0800ffd4 <LL_RCC_SetAPB1Prescaler>:
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ffdc:	4b06      	ldr	r3, [pc, #24]	; (800fff8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ffe4:	4904      	ldr	r1, [pc, #16]	; (800fff8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	608b      	str	r3, [r1, #8]
}
 800ffec:	bf00      	nop
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	40023800 	.word	0x40023800

0800fffc <LL_RCC_SetAPB2Prescaler>:
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8010004:	4b06      	ldr	r3, [pc, #24]	; (8010020 <LL_RCC_SetAPB2Prescaler+0x24>)
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801000c:	4904      	ldr	r1, [pc, #16]	; (8010020 <LL_RCC_SetAPB2Prescaler+0x24>)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4313      	orrs	r3, r2
 8010012:	608b      	str	r3, [r1, #8]
}
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	40023800 	.word	0x40023800

08010024 <LL_RCC_SetTIMPrescaler>:
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 801002c:	4b07      	ldr	r3, [pc, #28]	; (801004c <LL_RCC_SetTIMPrescaler+0x28>)
 801002e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010032:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010036:	4905      	ldr	r1, [pc, #20]	; (801004c <LL_RCC_SetTIMPrescaler+0x28>)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4313      	orrs	r3, r2
 801003c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	40023800 	.word	0x40023800

08010050 <LL_RCC_PLL_Enable>:
{
 8010050:	b480      	push	{r7}
 8010052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8010054:	4b05      	ldr	r3, [pc, #20]	; (801006c <LL_RCC_PLL_Enable+0x1c>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a04      	ldr	r2, [pc, #16]	; (801006c <LL_RCC_PLL_Enable+0x1c>)
 801005a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801005e:	6013      	str	r3, [r2, #0]
}
 8010060:	bf00      	nop
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	40023800 	.word	0x40023800

08010070 <LL_RCC_PLL_IsReady>:
{
 8010070:	b480      	push	{r7}
 8010072:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8010074:	4b07      	ldr	r3, [pc, #28]	; (8010094 <LL_RCC_PLL_IsReady+0x24>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801007c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010080:	bf0c      	ite	eq
 8010082:	2301      	moveq	r3, #1
 8010084:	2300      	movne	r3, #0
 8010086:	b2db      	uxtb	r3, r3
}
 8010088:	4618      	mov	r0, r3
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	40023800 	.word	0x40023800

08010098 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8010098:	b480      	push	{r7}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80100a6:	4b0d      	ldr	r3, [pc, #52]	; (80100dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80100a8:	685a      	ldr	r2, [r3, #4]
 80100aa:	4b0d      	ldr	r3, [pc, #52]	; (80100e0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80100ac:	4013      	ands	r3, r2
 80100ae:	68f9      	ldr	r1, [r7, #12]
 80100b0:	68ba      	ldr	r2, [r7, #8]
 80100b2:	4311      	orrs	r1, r2
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	0192      	lsls	r2, r2, #6
 80100b8:	430a      	orrs	r2, r1
 80100ba:	4908      	ldr	r1, [pc, #32]	; (80100dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80100bc:	4313      	orrs	r3, r2
 80100be:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80100c0:	4b06      	ldr	r3, [pc, #24]	; (80100dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80100c8:	4904      	ldr	r1, [pc, #16]	; (80100dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	4313      	orrs	r3, r2
 80100ce:	604b      	str	r3, [r1, #4]
}
 80100d0:	bf00      	nop
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	40023800 	.word	0x40023800
 80100e0:	ffbf8000 	.word	0xffbf8000

080100e4 <LL_RCC_PLL_ConfigDomain_48M>:
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
 80100f0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 80100f2:	4b0a      	ldr	r3, [pc, #40]	; (801011c <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 80100f4:	685a      	ldr	r2, [r3, #4]
 80100f6:	4b0a      	ldr	r3, [pc, #40]	; (8010120 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 80100f8:	4013      	ands	r3, r2
 80100fa:	68f9      	ldr	r1, [r7, #12]
 80100fc:	68ba      	ldr	r2, [r7, #8]
 80100fe:	4311      	orrs	r1, r2
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	0192      	lsls	r2, r2, #6
 8010104:	4311      	orrs	r1, r2
 8010106:	683a      	ldr	r2, [r7, #0]
 8010108:	430a      	orrs	r2, r1
 801010a:	4904      	ldr	r1, [pc, #16]	; (801011c <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 801010c:	4313      	orrs	r3, r2
 801010e:	604b      	str	r3, [r1, #4]
}
 8010110:	bf00      	nop
 8010112:	3714      	adds	r7, #20
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr
 801011c:	40023800 	.word	0x40023800
 8010120:	f0bf8000 	.word	0xf0bf8000

08010124 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 801012c:	4b06      	ldr	r3, [pc, #24]	; (8010148 <LL_FLASH_SetLatency+0x24>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f023 020f 	bic.w	r2, r3, #15
 8010134:	4904      	ldr	r1, [pc, #16]	; (8010148 <LL_FLASH_SetLatency+0x24>)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4313      	orrs	r3, r2
 801013a:	600b      	str	r3, [r1, #0]
}
 801013c:	bf00      	nop
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr
 8010148:	40023c00 	.word	0x40023c00

0801014c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 801014c:	b480      	push	{r7}
 801014e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8010150:	4b04      	ldr	r3, [pc, #16]	; (8010164 <LL_FLASH_GetLatency+0x18>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f003 030f 	and.w	r3, r3, #15
}
 8010158:	4618      	mov	r0, r3
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	40023c00 	.word	0x40023c00

08010168 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8010168:	b480      	push	{r7}
 801016a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 801016c:	4b05      	ldr	r3, [pc, #20]	; (8010184 <LL_PWR_EnableOverDriveMode+0x1c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a04      	ldr	r2, [pc, #16]	; (8010184 <LL_PWR_EnableOverDriveMode+0x1c>)
 8010172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010176:	6013      	str	r3, [r2, #0]
}
 8010178:	bf00      	nop
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	40007000 	.word	0x40007000

08010188 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8010190:	4b06      	ldr	r3, [pc, #24]	; (80101ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010198:	4904      	ldr	r1, [pc, #16]	; (80101ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4313      	orrs	r3, r2
 801019e:	600b      	str	r3, [r1, #0]
}
 80101a0:	bf00      	nop
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	40007000 	.word	0x40007000

080101b0 <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 80101b0:	b580      	push	{r7, lr}
 80101b2:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80101b4:	2001      	movs	r0, #1
 80101b6:	f7ff fe6b 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80101ba:	2002      	movs	r0, #2
 80101bc:	f7ff fe68 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80101c0:	2004      	movs	r0, #4
 80101c2:	f7ff fe65 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80101c6:	2008      	movs	r0, #8
 80101c8:	f7ff fe62 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80101cc:	2010      	movs	r0, #16
 80101ce:	f7ff fe5f 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80101d2:	2020      	movs	r0, #32
 80101d4:	f7ff fe5c 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80101d8:	2040      	movs	r0, #64	; 0x40
 80101da:	f7ff fe59 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80101de:	2080      	movs	r0, #128	; 0x80
 80101e0:	f7ff fe56 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80101e4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80101e8:	f7ff fe52 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80101ec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80101f0:	f7ff fe4e 	bl	800fe90 <LL_AHB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80101f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80101f8:	f7ff fe7a 	bl	800fef0 <LL_APB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80101fc:	2004      	movs	r0, #4
 80101fe:	f7ff fe5f 	bl	800fec0 <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8010202:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010206:	f7ff fe5b 	bl	800fec0 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 801020a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801020e:	f7ff fe57 	bl	800fec0 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8010212:	2010      	movs	r0, #16
 8010214:	f7ff fe6c 	bl	800fef0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8010218:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801021c:	f7ff fe50 	bl	800fec0 <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8010220:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010224:	f7ff fe4c 	bl	800fec0 <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8010228:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801022c:	f7ff fe60 	bl	800fef0 <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 8010230:	bf00      	nop
 8010232:	bd80      	pop	{r7, pc}

08010234 <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 801023a:	2005      	movs	r0, #5
 801023c:	f7ff ff72 	bl	8010124 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8010240:	bf00      	nop
 8010242:	f7ff ff83 	bl	801014c <LL_FLASH_GetLatency>
 8010246:	4603      	mov	r3, r0
 8010248:	2b05      	cmp	r3, #5
 801024a:	d1fa      	bne.n	8010242 <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 801024c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8010250:	f7ff ff9a 	bl	8010188 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8010254:	f7ff ff88 	bl	8010168 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 8010258:	f7ff fe62 	bl	800ff20 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 801025c:	bf00      	nop
 801025e:	f7ff fe6f 	bl	800ff40 <LL_RCC_HSE_IsReady>
 8010262:	4603      	mov	r3, r0
 8010264:	2b01      	cmp	r3, #1
 8010266:	d1fa      	bne.n	801025e <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 8010268:	2300      	movs	r3, #0
 801026a:	22b4      	movs	r2, #180	; 0xb4
 801026c:	2104      	movs	r1, #4
 801026e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8010272:	f7ff ff11 	bl	8010098 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 8010276:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801027a:	22b4      	movs	r2, #180	; 0xb4
 801027c:	2104      	movs	r1, #4
 801027e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8010282:	f7ff ff2f 	bl	80100e4 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8010286:	f7ff fee3 	bl	8010050 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 801028a:	bf00      	nop
 801028c:	f7ff fef0 	bl	8010070 <LL_RCC_PLL_IsReady>
 8010290:	4603      	mov	r3, r0
 8010292:	2b01      	cmp	r3, #1
 8010294:	d1fa      	bne.n	801028c <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8010296:	2000      	movs	r0, #0
 8010298:	f7ff fe88 	bl	800ffac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 801029c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80102a0:	f7ff fe98 	bl	800ffd4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80102a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80102a8:	f7ff fea8 	bl	800fffc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80102ac:	2002      	movs	r0, #2
 80102ae:	f7ff fe5b 	bl	800ff68 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80102b2:	bf00      	nop
 80102b4:	f7ff fe6c 	bl	800ff90 <LL_RCC_GetSysClkSource>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b08      	cmp	r3, #8
 80102bc:	d1fa      	bne.n	80102b4 <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 80102be:	4808      	ldr	r0, [pc, #32]	; (80102e0 <hal_clock_init_early+0xac>)
 80102c0:	f7f5 f81c 	bl	80052fc <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80102c4:	463b      	mov	r3, r7
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f3 fdb4 	bl	8003e34 <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80102cc:	2005      	movs	r0, #5
 80102ce:	f002 ff03 	bl	80130d8 <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80102d2:	2000      	movs	r0, #0
 80102d4:	f7ff fea6 	bl	8010024 <LL_RCC_SetTIMPrescaler>
}
 80102d8:	bf00      	nop
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	0aba9500 	.word	0x0aba9500

080102e4 <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 80102e4:	b480      	push	{r7}
 80102e6:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80102e8:	4b09      	ldr	r3, [pc, #36]	; (8010310 <hal_dwt_init_early+0x2c>)
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	4a08      	ldr	r2, [pc, #32]	; (8010310 <hal_dwt_init_early+0x2c>)
 80102ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80102f2:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80102f4:	4b07      	ldr	r3, [pc, #28]	; (8010314 <hal_dwt_init_early+0x30>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4a06      	ldr	r2, [pc, #24]	; (8010314 <hal_dwt_init_early+0x30>)
 80102fa:	f043 0301 	orr.w	r3, r3, #1
 80102fe:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 8010300:	4b04      	ldr	r3, [pc, #16]	; (8010314 <hal_dwt_init_early+0x30>)
 8010302:	2200      	movs	r2, #0
 8010304:	605a      	str	r2, [r3, #4]
}
 8010306:	bf00      	nop
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	e000edf0 	.word	0xe000edf0
 8010314:	e0001000 	.word	0xe0001000

08010318 <hal_delay_us>:
#include "delay.h"
#include <stdbool.h>

void hal_delay_us(uint32_t microseconds) {
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8010320:	4b0d      	ldr	r3, [pc, #52]	; (8010358 <hal_delay_us+0x40>)
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	60fb      	str	r3, [r7, #12]
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
 8010326:	4b0d      	ldr	r3, [pc, #52]	; (801035c <hal_delay_us+0x44>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4a0d      	ldr	r2, [pc, #52]	; (8010360 <hal_delay_us+0x48>)
 801032c:	fba2 2303 	umull	r2, r3, r2, r3
 8010330:	0c9a      	lsrs	r2, r3, #18
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	fb02 f303 	mul.w	r3, r2, r3
 8010338:	60bb      	str	r3, [r7, #8]
    while((DWT->CYCCNT - start) < time_ticks) {
 801033a:	bf00      	nop
 801033c:	4b06      	ldr	r3, [pc, #24]	; (8010358 <hal_delay_us+0x40>)
 801033e:	685a      	ldr	r2, [r3, #4]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	68ba      	ldr	r2, [r7, #8]
 8010346:	429a      	cmp	r2, r3
 8010348:	d8f8      	bhi.n	801033c <hal_delay_us+0x24>
    };
}
 801034a:	bf00      	nop
 801034c:	bf00      	nop
 801034e:	3714      	adds	r7, #20
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr
 8010358:	e0001000 	.word	0xe0001000
 801035c:	20000014 	.word	0x20000014
 8010360:	431bde83 	.word	0x431bde83

08010364 <hal_get_delay_timer>:

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 801036e:	4b0d      	ldr	r3, [pc, #52]	; (80103a4 <hal_get_delay_timer+0x40>)
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000) * timeout;
 8010374:	4b0c      	ldr	r3, [pc, #48]	; (80103a8 <hal_get_delay_timer+0x44>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a0c      	ldr	r2, [pc, #48]	; (80103ac <hal_get_delay_timer+0x48>)
 801037a:	fba2 2303 	umull	r2, r3, r2, r3
 801037e:	099b      	lsrs	r3, r3, #6
 8010380:	683a      	ldr	r2, [r7, #0]
 8010382:	fb02 f303 	mul.w	r3, r2, r3
 8010386:	60fb      	str	r3, [r7, #12]
	return tmp;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	461a      	mov	r2, r3
 801038c:	f107 0308 	add.w	r3, r7, #8
 8010390:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010394:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	e0001000 	.word	0xe0001000
 80103a8:	20000014 	.word	0x20000014
 80103ac:	10624dd3 	.word	0x10624dd3

080103b0 <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 80103b8:	4b08      	ldr	r3, [pc, #32]	; (80103dc <hal_delay_timer_is_expired+0x2c>)
 80103ba:	685a      	ldr	r2, [r3, #4]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	1ad2      	subs	r2, r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	bf2c      	ite	cs
 80103ca:	2301      	movcs	r3, #1
 80103cc:	2300      	movcc	r3, #0
 80103ce:	b2db      	uxtb	r3, r3
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr
 80103dc:	e0001000 	.word	0xe0001000

080103e0 <LL_GPIO_SetPinMode>:
{
 80103e0:	b480      	push	{r7}
 80103e2:	b089      	sub	sp, #36	; 0x24
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	fa93 f3a3 	rbit	r3, r3
 80103fa:	613b      	str	r3, [r7, #16]
  return result;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	fab3 f383 	clz	r3, r3
 8010402:	b2db      	uxtb	r3, r3
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	2103      	movs	r1, #3
 8010408:	fa01 f303 	lsl.w	r3, r1, r3
 801040c:	43db      	mvns	r3, r3
 801040e:	401a      	ands	r2, r3
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	fa93 f3a3 	rbit	r3, r3
 801041a:	61bb      	str	r3, [r7, #24]
  return result;
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	fab3 f383 	clz	r3, r3
 8010422:	b2db      	uxtb	r3, r3
 8010424:	005b      	lsls	r3, r3, #1
 8010426:	6879      	ldr	r1, [r7, #4]
 8010428:	fa01 f303 	lsl.w	r3, r1, r3
 801042c:	431a      	orrs	r2, r3
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	601a      	str	r2, [r3, #0]
}
 8010432:	bf00      	nop
 8010434:	3724      	adds	r7, #36	; 0x24
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <LL_GPIO_SetPinOutputType>:
{
 801043e:	b480      	push	{r7}
 8010440:	b085      	sub	sp, #20
 8010442:	af00      	add	r7, sp, #0
 8010444:	60f8      	str	r0, [r7, #12]
 8010446:	60b9      	str	r1, [r7, #8]
 8010448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685a      	ldr	r2, [r3, #4]
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	43db      	mvns	r3, r3
 8010452:	401a      	ands	r2, r3
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	6879      	ldr	r1, [r7, #4]
 8010458:	fb01 f303 	mul.w	r3, r1, r3
 801045c:	431a      	orrs	r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	605a      	str	r2, [r3, #4]
}
 8010462:	bf00      	nop
 8010464:	3714      	adds	r7, #20
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <LL_GPIO_SetPinSpeed>:
{
 801046e:	b480      	push	{r7}
 8010470:	b089      	sub	sp, #36	; 0x24
 8010472:	af00      	add	r7, sp, #0
 8010474:	60f8      	str	r0, [r7, #12]
 8010476:	60b9      	str	r1, [r7, #8]
 8010478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	689a      	ldr	r2, [r3, #8]
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	fa93 f3a3 	rbit	r3, r3
 8010488:	613b      	str	r3, [r7, #16]
  return result;
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	fab3 f383 	clz	r3, r3
 8010490:	b2db      	uxtb	r3, r3
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	2103      	movs	r1, #3
 8010496:	fa01 f303 	lsl.w	r3, r1, r3
 801049a:	43db      	mvns	r3, r3
 801049c:	401a      	ands	r2, r3
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	fa93 f3a3 	rbit	r3, r3
 80104a8:	61bb      	str	r3, [r7, #24]
  return result;
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	fab3 f383 	clz	r3, r3
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	6879      	ldr	r1, [r7, #4]
 80104b6:	fa01 f303 	lsl.w	r3, r1, r3
 80104ba:	431a      	orrs	r2, r3
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	609a      	str	r2, [r3, #8]
}
 80104c0:	bf00      	nop
 80104c2:	3724      	adds	r7, #36	; 0x24
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <LL_GPIO_SetPinPull>:
{
 80104cc:	b480      	push	{r7}
 80104ce:	b089      	sub	sp, #36	; 0x24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	68da      	ldr	r2, [r3, #12]
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	fa93 f3a3 	rbit	r3, r3
 80104e6:	613b      	str	r3, [r7, #16]
  return result;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	fab3 f383 	clz	r3, r3
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	005b      	lsls	r3, r3, #1
 80104f2:	2103      	movs	r1, #3
 80104f4:	fa01 f303 	lsl.w	r3, r1, r3
 80104f8:	43db      	mvns	r3, r3
 80104fa:	401a      	ands	r2, r3
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	fa93 f3a3 	rbit	r3, r3
 8010506:	61bb      	str	r3, [r7, #24]
  return result;
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	fab3 f383 	clz	r3, r3
 801050e:	b2db      	uxtb	r3, r3
 8010510:	005b      	lsls	r3, r3, #1
 8010512:	6879      	ldr	r1, [r7, #4]
 8010514:	fa01 f303 	lsl.w	r3, r1, r3
 8010518:	431a      	orrs	r2, r3
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	60da      	str	r2, [r3, #12]
}
 801051e:	bf00      	nop
 8010520:	3724      	adds	r7, #36	; 0x24
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <LL_GPIO_SetAFPin_0_7>:
{
 801052a:	b480      	push	{r7}
 801052c:	b089      	sub	sp, #36	; 0x24
 801052e:	af00      	add	r7, sp, #0
 8010530:	60f8      	str	r0, [r7, #12]
 8010532:	60b9      	str	r1, [r7, #8]
 8010534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	6a1a      	ldr	r2, [r3, #32]
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	fa93 f3a3 	rbit	r3, r3
 8010544:	613b      	str	r3, [r7, #16]
  return result;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	fab3 f383 	clz	r3, r3
 801054c:	b2db      	uxtb	r3, r3
 801054e:	009b      	lsls	r3, r3, #2
 8010550:	210f      	movs	r1, #15
 8010552:	fa01 f303 	lsl.w	r3, r1, r3
 8010556:	43db      	mvns	r3, r3
 8010558:	401a      	ands	r2, r3
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	fa93 f3a3 	rbit	r3, r3
 8010564:	61bb      	str	r3, [r7, #24]
  return result;
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	fab3 f383 	clz	r3, r3
 801056c:	b2db      	uxtb	r3, r3
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	6879      	ldr	r1, [r7, #4]
 8010572:	fa01 f303 	lsl.w	r3, r1, r3
 8010576:	431a      	orrs	r2, r3
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	621a      	str	r2, [r3, #32]
}
 801057c:	bf00      	nop
 801057e:	3724      	adds	r7, #36	; 0x24
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <LL_GPIO_SetAFPin_8_15>:
{
 8010588:	b480      	push	{r7}
 801058a:	b089      	sub	sp, #36	; 0x24
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	0a1b      	lsrs	r3, r3, #8
 801059c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	fa93 f3a3 	rbit	r3, r3
 80105a4:	613b      	str	r3, [r7, #16]
  return result;
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	fab3 f383 	clz	r3, r3
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	210f      	movs	r1, #15
 80105b2:	fa01 f303 	lsl.w	r3, r1, r3
 80105b6:	43db      	mvns	r3, r3
 80105b8:	401a      	ands	r2, r3
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	0a1b      	lsrs	r3, r3, #8
 80105be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	fa93 f3a3 	rbit	r3, r3
 80105c6:	61bb      	str	r3, [r7, #24]
  return result;
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	fab3 f383 	clz	r3, r3
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	6879      	ldr	r1, [r7, #4]
 80105d4:	fa01 f303 	lsl.w	r3, r1, r3
 80105d8:	431a      	orrs	r2, r3
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80105de:	bf00      	nop
 80105e0:	3724      	adds	r7, #36	; 0x24
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr
	...

080105ec <LL_SYSCFG_SetEXTISource>:
{
 80105ec:	b480      	push	{r7}
 80105ee:	b085      	sub	sp, #20
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80105f6:	4a13      	ldr	r2, [pc, #76]	; (8010644 <LL_SYSCFG_SetEXTISource+0x58>)
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	3302      	adds	r3, #2
 80105fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	0c1b      	lsrs	r3, r3, #16
 8010606:	43db      	mvns	r3, r3
 8010608:	ea02 0103 	and.w	r1, r2, r3
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	0c1b      	lsrs	r3, r3, #16
 8010610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	fa93 f3a3 	rbit	r3, r3
 8010618:	60bb      	str	r3, [r7, #8]
  return result;
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	fab3 f383 	clz	r3, r3
 8010620:	b2db      	uxtb	r3, r3
 8010622:	461a      	mov	r2, r3
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	fa03 f202 	lsl.w	r2, r3, r2
 801062a:	4806      	ldr	r0, [pc, #24]	; (8010644 <LL_SYSCFG_SetEXTISource+0x58>)
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	b2db      	uxtb	r3, r3
 8010630:	430a      	orrs	r2, r1
 8010632:	3302      	adds	r3, #2
 8010634:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8010638:	bf00      	nop
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr
 8010644:	40013800 	.word	0x40013800

08010648 <LL_SYSCFG_GetEXTISource>:
{
 8010648:	b480      	push	{r7}
 801064a:	b085      	sub	sp, #20
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8010650:	4a0d      	ldr	r2, [pc, #52]	; (8010688 <LL_SYSCFG_GetEXTISource+0x40>)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	b2db      	uxtb	r3, r3
 8010656:	3302      	adds	r3, #2
 8010658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	0c1b      	lsrs	r3, r3, #16
 8010660:	4013      	ands	r3, r2
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	0c12      	lsrs	r2, r2, #16
 8010666:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	fa92 f2a2 	rbit	r2, r2
 801066e:	60ba      	str	r2, [r7, #8]
  return result;
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	fab2 f282 	clz	r2, r2
 8010676:	b2d2      	uxtb	r2, r2
 8010678:	40d3      	lsrs	r3, r2
}
 801067a:	4618      	mov	r0, r3
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	40013800 	.word	0x40013800

0801068c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8010694:	4b05      	ldr	r3, [pc, #20]	; (80106ac <LL_EXTI_EnableIT_0_31+0x20>)
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	4904      	ldr	r1, [pc, #16]	; (80106ac <LL_EXTI_EnableIT_0_31+0x20>)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4313      	orrs	r3, r2
 801069e:	600b      	str	r3, [r1, #0]
}
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr
 80106ac:	40013c00 	.word	0x40013c00

080106b0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80106b8:	4b06      	ldr	r3, [pc, #24]	; (80106d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	43db      	mvns	r3, r3
 80106c0:	4904      	ldr	r1, [pc, #16]	; (80106d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80106c2:	4013      	ands	r3, r2
 80106c4:	600b      	str	r3, [r1, #0]
}
 80106c6:	bf00      	nop
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	40013c00 	.word	0x40013c00

080106d8 <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 80106e0:	4b07      	ldr	r3, [pc, #28]	; (8010700 <LL_EXTI_IsEnabledIT_0_31+0x28>)
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	4013      	ands	r3, r2
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	bf0c      	ite	eq
 80106ee:	2301      	moveq	r3, #1
 80106f0:	2300      	movne	r3, #0
 80106f2:	b2db      	uxtb	r3, r3
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr
 8010700:	40013c00 	.word	0x40013c00

08010704 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 801070c:	4b05      	ldr	r3, [pc, #20]	; (8010724 <LL_EXTI_EnableEvent_0_31+0x20>)
 801070e:	685a      	ldr	r2, [r3, #4]
 8010710:	4904      	ldr	r1, [pc, #16]	; (8010724 <LL_EXTI_EnableEvent_0_31+0x20>)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4313      	orrs	r3, r2
 8010716:	604b      	str	r3, [r1, #4]

}
 8010718:	bf00      	nop
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr
 8010724:	40013c00 	.word	0x40013c00

08010728 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8010730:	4b05      	ldr	r3, [pc, #20]	; (8010748 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8010732:	689a      	ldr	r2, [r3, #8]
 8010734:	4904      	ldr	r1, [pc, #16]	; (8010748 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4313      	orrs	r3, r2
 801073a:	608b      	str	r3, [r1, #8]

}
 801073c:	bf00      	nop
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr
 8010748:	40013c00 	.word	0x40013c00

0801074c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8010754:	4b06      	ldr	r3, [pc, #24]	; (8010770 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8010756:	689a      	ldr	r2, [r3, #8]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	43db      	mvns	r3, r3
 801075c:	4904      	ldr	r1, [pc, #16]	; (8010770 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801075e:	4013      	ands	r3, r2
 8010760:	608b      	str	r3, [r1, #8]

}
 8010762:	bf00      	nop
 8010764:	370c      	adds	r7, #12
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	40013c00 	.word	0x40013c00

08010774 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8010774:	b480      	push	{r7}
 8010776:	b083      	sub	sp, #12
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 801077c:	4b05      	ldr	r3, [pc, #20]	; (8010794 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 801077e:	68da      	ldr	r2, [r3, #12]
 8010780:	4904      	ldr	r1, [pc, #16]	; (8010794 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4313      	orrs	r3, r2
 8010786:	60cb      	str	r3, [r1, #12]
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr
 8010794:	40013c00 	.word	0x40013c00

08010798 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80107a0:	4b06      	ldr	r3, [pc, #24]	; (80107bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80107a2:	68da      	ldr	r2, [r3, #12]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	43db      	mvns	r3, r3
 80107a8:	4904      	ldr	r1, [pc, #16]	; (80107bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80107aa:	4013      	ands	r3, r2
 80107ac:	60cb      	str	r3, [r1, #12]
}
 80107ae:	bf00      	nop
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	40013c00 	.word	0x40013c00

080107c0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80107c8:	4b07      	ldr	r3, [pc, #28]	; (80107e8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80107ca:	695a      	ldr	r2, [r3, #20]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	4013      	ands	r3, r2
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	bf0c      	ite	eq
 80107d6:	2301      	moveq	r3, #1
 80107d8:	2300      	movne	r3, #0
 80107da:	b2db      	uxtb	r3, r3
}
 80107dc:	4618      	mov	r0, r3
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr
 80107e8:	40013c00 	.word	0x40013c00

080107ec <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80107f4:	4a04      	ldr	r2, [pc, #16]	; (8010808 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6153      	str	r3, [r2, #20]
}
 80107fa:	bf00      	nop
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop
 8010808:	40013c00 	.word	0x40013c00

0801080c <hal_gpio_get_pin_number>:
static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio);
static void hal_gpio_exti_call(uint16_t pin_num);

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 8010814:	2300      	movs	r3, #0
 8010816:	73fb      	strb	r3, [r7, #15]
 8010818:	e00c      	b.n	8010834 <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	889b      	ldrh	r3, [r3, #4]
 801081e:	461a      	mov	r2, r3
 8010820:	7bfb      	ldrb	r3, [r7, #15]
 8010822:	fa42 f303 	asr.w	r3, r2, r3
 8010826:	f003 0301 	and.w	r3, r3, #1
 801082a:	2b00      	cmp	r3, #0
 801082c:	d106      	bne.n	801083c <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 801082e:	7bfb      	ldrb	r3, [r7, #15]
 8010830:	3301      	adds	r3, #1
 8010832:	73fb      	strb	r3, [r7, #15]
 8010834:	7bfb      	ldrb	r3, [r7, #15]
 8010836:	2b0f      	cmp	r3, #15
 8010838:	d9ef      	bls.n	801081a <hal_gpio_get_pin_number+0xe>
 801083a:	e000      	b.n	801083e <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 801083c:	bf00      	nop
	}
	return pin_number;
 801083e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010840:	4618      	mov	r0, r3
 8010842:	3714      	adds	r7, #20
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 801084c:	b580      	push	{r7, lr}
 801084e:	b084      	sub	sp, #16
 8010850:	af02      	add	r7, sp, #8
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	4608      	mov	r0, r1
 8010856:	4611      	mov	r1, r2
 8010858:	461a      	mov	r2, r3
 801085a:	4603      	mov	r3, r0
 801085c:	70fb      	strb	r3, [r7, #3]
 801085e:	460b      	mov	r3, r1
 8010860:	70bb      	strb	r3, [r7, #2]
 8010862:	4613      	mov	r3, r2
 8010864:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 8010866:	787b      	ldrb	r3, [r7, #1]
 8010868:	78ba      	ldrb	r2, [r7, #2]
 801086a:	78f9      	ldrb	r1, [r7, #3]
 801086c:	2010      	movs	r0, #16
 801086e:	9000      	str	r0, [sp, #0]
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 f805 	bl	8010880 <hal_gpio_init_alt>
}
 8010876:	bf00      	nop
 8010878:	3708      	adds	r7, #8
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
	...

08010880 <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 8010880:	b580      	push	{r7, lr}
 8010882:	b086      	sub	sp, #24
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	4608      	mov	r0, r1
 801088a:	4611      	mov	r1, r2
 801088c:	461a      	mov	r2, r3
 801088e:	4603      	mov	r3, r0
 8010890:	70fb      	strb	r3, [r7, #3]
 8010892:	460b      	mov	r3, r1
 8010894:	70bb      	strb	r3, [r7, #2]
 8010896:	4613      	mov	r3, r2
 8010898:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4a8d      	ldr	r2, [pc, #564]	; (8010ad4 <hal_gpio_init_alt+0x254>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d02b      	beq.n	80108fc <hal_gpio_init_alt+0x7c>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a8b      	ldr	r2, [pc, #556]	; (8010ad8 <hal_gpio_init_alt+0x258>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d024      	beq.n	80108f8 <hal_gpio_init_alt+0x78>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a8a      	ldr	r2, [pc, #552]	; (8010adc <hal_gpio_init_alt+0x25c>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d01d      	beq.n	80108f4 <hal_gpio_init_alt+0x74>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a88      	ldr	r2, [pc, #544]	; (8010ae0 <hal_gpio_init_alt+0x260>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d016      	beq.n	80108f0 <hal_gpio_init_alt+0x70>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a87      	ldr	r2, [pc, #540]	; (8010ae4 <hal_gpio_init_alt+0x264>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d00f      	beq.n	80108ec <hal_gpio_init_alt+0x6c>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a85      	ldr	r2, [pc, #532]	; (8010ae8 <hal_gpio_init_alt+0x268>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d008      	beq.n	80108e8 <hal_gpio_init_alt+0x68>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a84      	ldr	r2, [pc, #528]	; (8010aec <hal_gpio_init_alt+0x26c>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d101      	bne.n	80108e4 <hal_gpio_init_alt+0x64>
 80108e0:	2306      	movs	r3, #6
 80108e2:	e00c      	b.n	80108fe <hal_gpio_init_alt+0x7e>
 80108e4:	2307      	movs	r3, #7
 80108e6:	e00a      	b.n	80108fe <hal_gpio_init_alt+0x7e>
 80108e8:	2305      	movs	r3, #5
 80108ea:	e008      	b.n	80108fe <hal_gpio_init_alt+0x7e>
 80108ec:	2304      	movs	r3, #4
 80108ee:	e006      	b.n	80108fe <hal_gpio_init_alt+0x7e>
 80108f0:	2303      	movs	r3, #3
 80108f2:	e004      	b.n	80108fe <hal_gpio_init_alt+0x7e>
 80108f4:	2302      	movs	r3, #2
 80108f6:	e002      	b.n	80108fe <hal_gpio_init_alt+0x7e>
 80108f8:	2301      	movs	r3, #1
 80108fa:	e000      	b.n	80108fe <hal_gpio_init_alt+0x7e>
 80108fc:	2300      	movs	r3, #0
 80108fe:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	889b      	ldrh	r3, [r3, #4]
 8010904:	2b01      	cmp	r3, #1
 8010906:	d05f      	beq.n	80109c8 <hal_gpio_init_alt+0x148>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	889b      	ldrh	r3, [r3, #4]
 801090c:	2b02      	cmp	r3, #2
 801090e:	d058      	beq.n	80109c2 <hal_gpio_init_alt+0x142>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	889b      	ldrh	r3, [r3, #4]
 8010914:	2b04      	cmp	r3, #4
 8010916:	d051      	beq.n	80109bc <hal_gpio_init_alt+0x13c>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	889b      	ldrh	r3, [r3, #4]
 801091c:	2b08      	cmp	r3, #8
 801091e:	d04a      	beq.n	80109b6 <hal_gpio_init_alt+0x136>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	889b      	ldrh	r3, [r3, #4]
 8010924:	2b10      	cmp	r3, #16
 8010926:	d044      	beq.n	80109b2 <hal_gpio_init_alt+0x132>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	889b      	ldrh	r3, [r3, #4]
 801092c:	2b20      	cmp	r3, #32
 801092e:	d03e      	beq.n	80109ae <hal_gpio_init_alt+0x12e>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	889b      	ldrh	r3, [r3, #4]
 8010934:	2b40      	cmp	r3, #64	; 0x40
 8010936:	d038      	beq.n	80109aa <hal_gpio_init_alt+0x12a>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	889b      	ldrh	r3, [r3, #4]
 801093c:	2b80      	cmp	r3, #128	; 0x80
 801093e:	d032      	beq.n	80109a6 <hal_gpio_init_alt+0x126>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	889b      	ldrh	r3, [r3, #4]
 8010944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010948:	d02b      	beq.n	80109a2 <hal_gpio_init_alt+0x122>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	889b      	ldrh	r3, [r3, #4]
 801094e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010952:	d024      	beq.n	801099e <hal_gpio_init_alt+0x11e>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	889b      	ldrh	r3, [r3, #4]
 8010958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801095c:	d01d      	beq.n	801099a <hal_gpio_init_alt+0x11a>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	889b      	ldrh	r3, [r3, #4]
 8010962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010966:	d016      	beq.n	8010996 <hal_gpio_init_alt+0x116>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	889b      	ldrh	r3, [r3, #4]
 801096c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010970:	d00f      	beq.n	8010992 <hal_gpio_init_alt+0x112>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	889b      	ldrh	r3, [r3, #4]
 8010976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801097a:	d008      	beq.n	801098e <hal_gpio_init_alt+0x10e>
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	889b      	ldrh	r3, [r3, #4]
 8010980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010984:	d101      	bne.n	801098a <hal_gpio_init_alt+0x10a>
 8010986:	4b5a      	ldr	r3, [pc, #360]	; (8010af0 <hal_gpio_init_alt+0x270>)
 8010988:	e020      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 801098a:	4b5a      	ldr	r3, [pc, #360]	; (8010af4 <hal_gpio_init_alt+0x274>)
 801098c:	e01e      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 801098e:	4b5a      	ldr	r3, [pc, #360]	; (8010af8 <hal_gpio_init_alt+0x278>)
 8010990:	e01c      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 8010992:	4b5a      	ldr	r3, [pc, #360]	; (8010afc <hal_gpio_init_alt+0x27c>)
 8010994:	e01a      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 8010996:	4b5a      	ldr	r3, [pc, #360]	; (8010b00 <hal_gpio_init_alt+0x280>)
 8010998:	e018      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 801099a:	4b5a      	ldr	r3, [pc, #360]	; (8010b04 <hal_gpio_init_alt+0x284>)
 801099c:	e016      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 801099e:	4b5a      	ldr	r3, [pc, #360]	; (8010b08 <hal_gpio_init_alt+0x288>)
 80109a0:	e014      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109a2:	4b5a      	ldr	r3, [pc, #360]	; (8010b0c <hal_gpio_init_alt+0x28c>)
 80109a4:	e012      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109a6:	4b5a      	ldr	r3, [pc, #360]	; (8010b10 <hal_gpio_init_alt+0x290>)
 80109a8:	e010      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109aa:	4b5a      	ldr	r3, [pc, #360]	; (8010b14 <hal_gpio_init_alt+0x294>)
 80109ac:	e00e      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109ae:	4b5a      	ldr	r3, [pc, #360]	; (8010b18 <hal_gpio_init_alt+0x298>)
 80109b0:	e00c      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109b2:	4b5a      	ldr	r3, [pc, #360]	; (8010b1c <hal_gpio_init_alt+0x29c>)
 80109b4:	e00a      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109b6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 80109ba:	e007      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109bc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80109c0:	e004      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109c2:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 80109c6:	e001      	b.n	80109cc <hal_gpio_init_alt+0x14c>
 80109c8:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80109cc:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	889b      	ldrh	r3, [r3, #4]
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d064      	beq.n	8010aa0 <hal_gpio_init_alt+0x220>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	889b      	ldrh	r3, [r3, #4]
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d05e      	beq.n	8010a9c <hal_gpio_init_alt+0x21c>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	889b      	ldrh	r3, [r3, #4]
 80109e2:	2b04      	cmp	r3, #4
 80109e4:	d058      	beq.n	8010a98 <hal_gpio_init_alt+0x218>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	889b      	ldrh	r3, [r3, #4]
 80109ea:	2b08      	cmp	r3, #8
 80109ec:	d052      	beq.n	8010a94 <hal_gpio_init_alt+0x214>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	889b      	ldrh	r3, [r3, #4]
 80109f2:	2b10      	cmp	r3, #16
 80109f4:	d04c      	beq.n	8010a90 <hal_gpio_init_alt+0x210>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	889b      	ldrh	r3, [r3, #4]
 80109fa:	2b20      	cmp	r3, #32
 80109fc:	d046      	beq.n	8010a8c <hal_gpio_init_alt+0x20c>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	889b      	ldrh	r3, [r3, #4]
 8010a02:	2b40      	cmp	r3, #64	; 0x40
 8010a04:	d040      	beq.n	8010a88 <hal_gpio_init_alt+0x208>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	889b      	ldrh	r3, [r3, #4]
 8010a0a:	2b80      	cmp	r3, #128	; 0x80
 8010a0c:	d03a      	beq.n	8010a84 <hal_gpio_init_alt+0x204>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	889b      	ldrh	r3, [r3, #4]
 8010a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a16:	d032      	beq.n	8010a7e <hal_gpio_init_alt+0x1fe>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	889b      	ldrh	r3, [r3, #4]
 8010a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a20:	d02a      	beq.n	8010a78 <hal_gpio_init_alt+0x1f8>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	889b      	ldrh	r3, [r3, #4]
 8010a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a2a:	d022      	beq.n	8010a72 <hal_gpio_init_alt+0x1f2>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	889b      	ldrh	r3, [r3, #4]
 8010a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a34:	d01a      	beq.n	8010a6c <hal_gpio_init_alt+0x1ec>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	889b      	ldrh	r3, [r3, #4]
 8010a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a3e:	d012      	beq.n	8010a66 <hal_gpio_init_alt+0x1e6>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	889b      	ldrh	r3, [r3, #4]
 8010a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a48:	d00a      	beq.n	8010a60 <hal_gpio_init_alt+0x1e0>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	889b      	ldrh	r3, [r3, #4]
 8010a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010a52:	d102      	bne.n	8010a5a <hal_gpio_init_alt+0x1da>
 8010a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a58:	e023      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a5e:	e020      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010a64:	e01d      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a6a:	e01a      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a70:	e017      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a76:	e014      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a7c:	e011      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a82:	e00e      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a84:	2380      	movs	r3, #128	; 0x80
 8010a86:	e00c      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a88:	2340      	movs	r3, #64	; 0x40
 8010a8a:	e00a      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a8c:	2320      	movs	r3, #32
 8010a8e:	e008      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a90:	2310      	movs	r3, #16
 8010a92:	e006      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a94:	2308      	movs	r3, #8
 8010a96:	e004      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a98:	2304      	movs	r3, #4
 8010a9a:	e002      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010a9c:	2302      	movs	r3, #2
 8010a9e:	e000      	b.n	8010aa2 <hal_gpio_init_alt+0x222>
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 8010aa4:	787b      	ldrb	r3, [r7, #1]
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d855      	bhi.n	8010b56 <hal_gpio_init_alt+0x2d6>
 8010aaa:	a201      	add	r2, pc, #4	; (adr r2, 8010ab0 <hal_gpio_init_alt+0x230>)
 8010aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab0:	08010ac1 	.word	0x08010ac1
 8010ab4:	08010b21 	.word	0x08010b21
 8010ab8:	08010b33 	.word	0x08010b33
 8010abc:	08010b45 	.word	0x08010b45
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6818      	ldr	r0, [r3, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	889b      	ldrh	r3, [r3, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	4619      	mov	r1, r3
 8010acc:	f7ff fccf 	bl	801046e <LL_GPIO_SetPinSpeed>
		break;
 8010ad0:	e041      	b.n	8010b56 <hal_gpio_init_alt+0x2d6>
 8010ad2:	bf00      	nop
 8010ad4:	40020000 	.word	0x40020000
 8010ad8:	40020400 	.word	0x40020400
 8010adc:	40020800 	.word	0x40020800
 8010ae0:	40020c00 	.word	0x40020c00
 8010ae4:	40021000 	.word	0x40021000
 8010ae8:	40021400 	.word	0x40021400
 8010aec:	40021800 	.word	0x40021800
 8010af0:	0f000003 	.word	0x0f000003
 8010af4:	f0000003 	.word	0xf0000003
 8010af8:	00f00003 	.word	0x00f00003
 8010afc:	000f0003 	.word	0x000f0003
 8010b00:	f0000002 	.word	0xf0000002
 8010b04:	0f000002 	.word	0x0f000002
 8010b08:	00f00002 	.word	0x00f00002
 8010b0c:	000f0002 	.word	0x000f0002
 8010b10:	f0000001 	.word	0xf0000001
 8010b14:	0f000001 	.word	0x0f000001
 8010b18:	00f00001 	.word	0x00f00001
 8010b1c:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6818      	ldr	r0, [r3, #0]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	889b      	ldrh	r3, [r3, #4]
 8010b28:	2201      	movs	r2, #1
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	f7ff fc9f 	bl	801046e <LL_GPIO_SetPinSpeed>
		break;
 8010b30:	e011      	b.n	8010b56 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6818      	ldr	r0, [r3, #0]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	889b      	ldrh	r3, [r3, #4]
 8010b3a:	2202      	movs	r2, #2
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	f7ff fc96 	bl	801046e <LL_GPIO_SetPinSpeed>
		break;
 8010b42:	e008      	b.n	8010b56 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6818      	ldr	r0, [r3, #0]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	889b      	ldrh	r3, [r3, #4]
 8010b4c:	2203      	movs	r2, #3
 8010b4e:	4619      	mov	r1, r3
 8010b50:	f7ff fc8d 	bl	801046e <LL_GPIO_SetPinSpeed>
		break;
 8010b54:	bf00      	nop
	}

	switch(pull) {
 8010b56:	78bb      	ldrb	r3, [r7, #2]
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	d018      	beq.n	8010b8e <hal_gpio_init_alt+0x30e>
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	dc1f      	bgt.n	8010ba0 <hal_gpio_init_alt+0x320>
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <hal_gpio_init_alt+0x2ea>
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d009      	beq.n	8010b7c <hal_gpio_init_alt+0x2fc>
 8010b68:	e01a      	b.n	8010ba0 <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6818      	ldr	r0, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	889b      	ldrh	r3, [r3, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	4619      	mov	r1, r3
 8010b76:	f7ff fca9 	bl	80104cc <LL_GPIO_SetPinPull>
		break;
 8010b7a:	e011      	b.n	8010ba0 <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6818      	ldr	r0, [r3, #0]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	889b      	ldrh	r3, [r3, #4]
 8010b84:	2201      	movs	r2, #1
 8010b86:	4619      	mov	r1, r3
 8010b88:	f7ff fca0 	bl	80104cc <LL_GPIO_SetPinPull>
		break;
 8010b8c:	e008      	b.n	8010ba0 <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6818      	ldr	r0, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	889b      	ldrh	r3, [r3, #4]
 8010b96:	2202      	movs	r2, #2
 8010b98:	4619      	mov	r1, r3
 8010b9a:	f7ff fc97 	bl	80104cc <LL_GPIO_SetPinPull>
		break;
 8010b9e:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 8010ba0:	78fb      	ldrb	r3, [r7, #3]
 8010ba2:	2b05      	cmp	r3, #5
 8010ba4:	d93d      	bls.n	8010c22 <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6818      	ldr	r0, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	889b      	ldrh	r3, [r3, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	f7ff fc15 	bl	80103e0 <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 8010bb6:	6939      	ldr	r1, [r7, #16]
 8010bb8:	6978      	ldr	r0, [r7, #20]
 8010bba:	f7ff fd17 	bl	80105ec <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 8010bbe:	78fb      	ldrb	r3, [r7, #3]
 8010bc0:	2b06      	cmp	r3, #6
 8010bc2:	d002      	beq.n	8010bca <hal_gpio_init_alt+0x34a>
 8010bc4:	78fb      	ldrb	r3, [r7, #3]
 8010bc6:	2b08      	cmp	r3, #8
 8010bc8:	d105      	bne.n	8010bd6 <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f7ff fd5e 	bl	801068c <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8010bd0:	68f8      	ldr	r0, [r7, #12]
 8010bd2:	f7ff fda9 	bl	8010728 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 8010bd6:	78fb      	ldrb	r3, [r7, #3]
 8010bd8:	2b07      	cmp	r3, #7
 8010bda:	d002      	beq.n	8010be2 <hal_gpio_init_alt+0x362>
 8010bdc:	78fb      	ldrb	r3, [r7, #3]
 8010bde:	2b08      	cmp	r3, #8
 8010be0:	d105      	bne.n	8010bee <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f7ff fd52 	bl	801068c <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f7ff fdc3 	bl	8010774 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 8010bee:	78fb      	ldrb	r3, [r7, #3]
 8010bf0:	2b09      	cmp	r3, #9
 8010bf2:	d002      	beq.n	8010bfa <hal_gpio_init_alt+0x37a>
 8010bf4:	78fb      	ldrb	r3, [r7, #3]
 8010bf6:	2b0b      	cmp	r3, #11
 8010bf8:	d105      	bne.n	8010c06 <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f7ff fd82 	bl	8010704 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f7ff fd91 	bl	8010728 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 8010c06:	78fb      	ldrb	r3, [r7, #3]
 8010c08:	2b0a      	cmp	r3, #10
 8010c0a:	d003      	beq.n	8010c14 <hal_gpio_init_alt+0x394>
 8010c0c:	78fb      	ldrb	r3, [r7, #3]
 8010c0e:	2b0b      	cmp	r3, #11
 8010c10:	f040 80a7 	bne.w	8010d62 <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7ff fd39 	bl	801068c <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8010c1a:	68f8      	ldr	r0, [r7, #12]
 8010c1c:	f7ff fdaa 	bl	8010774 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 8010c20:	e09f      	b.n	8010d62 <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 8010c22:	6938      	ldr	r0, [r7, #16]
 8010c24:	f7ff fd10 	bl	8010648 <LL_SYSCFG_GetEXTISource>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d10e      	bne.n	8010c4e <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f7ff fd51 	bl	80106d8 <LL_EXTI_IsEnabledIT_0_31>
 8010c36:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d008      	beq.n	8010c4e <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f7ff fd37 	bl	80106b0 <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f7ff fda8 	bl	8010798 <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f7ff fd7f 	bl	801074c <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 8010c4e:	78fb      	ldrb	r3, [r7, #3]
 8010c50:	2b03      	cmp	r3, #3
 8010c52:	d002      	beq.n	8010c5a <hal_gpio_init_alt+0x3da>
 8010c54:	78fb      	ldrb	r3, [r7, #3]
 8010c56:	2b04      	cmp	r3, #4
 8010c58:	d11a      	bne.n	8010c90 <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f7ff fdd6 	bl	801080c <hal_gpio_get_pin_number>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b07      	cmp	r3, #7
 8010c64:	d80a      	bhi.n	8010c7c <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6818      	ldr	r0, [r3, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	889b      	ldrh	r3, [r3, #4]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c74:	461a      	mov	r2, r3
 8010c76:	f7ff fc58 	bl	801052a <LL_GPIO_SetAFPin_0_7>
 8010c7a:	e009      	b.n	8010c90 <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6818      	ldr	r0, [r3, #0]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	889b      	ldrh	r3, [r3, #4]
 8010c84:	4619      	mov	r1, r3
 8010c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	f7ff fc7c 	bl	8010588 <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 8010c90:	78fb      	ldrb	r3, [r7, #3]
 8010c92:	2b05      	cmp	r3, #5
 8010c94:	d864      	bhi.n	8010d60 <hal_gpio_init_alt+0x4e0>
 8010c96:	a201      	add	r2, pc, #4	; (adr r2, 8010c9c <hal_gpio_init_alt+0x41c>)
 8010c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c9c:	08010cb5 	.word	0x08010cb5
 8010ca0:	08010cc7 	.word	0x08010cc7
 8010ca4:	08010ce9 	.word	0x08010ce9
 8010ca8:	08010d0b 	.word	0x08010d0b
 8010cac:	08010d2d 	.word	0x08010d2d
 8010cb0:	08010d4f 	.word	0x08010d4f
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6818      	ldr	r0, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	889b      	ldrh	r3, [r3, #4]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	f7ff fb8e 	bl	80103e0 <LL_GPIO_SetPinMode>
			break;
 8010cc4:	e04d      	b.n	8010d62 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6818      	ldr	r0, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	889b      	ldrh	r3, [r3, #4]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	f7ff fb85 	bl	80103e0 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6818      	ldr	r0, [r3, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	889b      	ldrh	r3, [r3, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	f7ff fbac 	bl	801043e <LL_GPIO_SetPinOutputType>
			break;
 8010ce6:	e03c      	b.n	8010d62 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6818      	ldr	r0, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	889b      	ldrh	r3, [r3, #4]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	f7ff fb74 	bl	80103e0 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6818      	ldr	r0, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	889b      	ldrh	r3, [r3, #4]
 8010d00:	2201      	movs	r2, #1
 8010d02:	4619      	mov	r1, r3
 8010d04:	f7ff fb9b 	bl	801043e <LL_GPIO_SetPinOutputType>
			break;
 8010d08:	e02b      	b.n	8010d62 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6818      	ldr	r0, [r3, #0]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	889b      	ldrh	r3, [r3, #4]
 8010d12:	2202      	movs	r2, #2
 8010d14:	4619      	mov	r1, r3
 8010d16:	f7ff fb63 	bl	80103e0 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	889b      	ldrh	r3, [r3, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	4619      	mov	r1, r3
 8010d26:	f7ff fb8a 	bl	801043e <LL_GPIO_SetPinOutputType>
			break;
 8010d2a:	e01a      	b.n	8010d62 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6818      	ldr	r0, [r3, #0]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	889b      	ldrh	r3, [r3, #4]
 8010d34:	2202      	movs	r2, #2
 8010d36:	4619      	mov	r1, r3
 8010d38:	f7ff fb52 	bl	80103e0 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6818      	ldr	r0, [r3, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	889b      	ldrh	r3, [r3, #4]
 8010d44:	2201      	movs	r2, #1
 8010d46:	4619      	mov	r1, r3
 8010d48:	f7ff fb79 	bl	801043e <LL_GPIO_SetPinOutputType>
			break;
 8010d4c:	e009      	b.n	8010d62 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6818      	ldr	r0, [r3, #0]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	889b      	ldrh	r3, [r3, #4]
 8010d56:	2203      	movs	r2, #3
 8010d58:	4619      	mov	r1, r3
 8010d5a:	f7ff fb41 	bl	80103e0 <LL_GPIO_SetPinMode>
			break;
 8010d5e:	e000      	b.n	8010d62 <hal_gpio_init_alt+0x4e2>
			break;
 8010d60:	bf00      	nop
}
 8010d62:	bf00      	nop
 8010d64:	3718      	adds	r7, #24
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop

08010d6c <hal_gpio_add_exti_callback>:

void hal_gpio_add_exti_callback(const GpioPin* gpio, GpioExtiCallback cb, void* context) {
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
	uint16_t pin;
	taskENTER_CRITICAL();
 8010d78:	f7f8 fc0e 	bl	8009598 <vPortEnterCritical>
	pin = hal_gpio_get_pin_number(gpio);
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7ff fd45 	bl	801080c <hal_gpio_get_pin_number>
 8010d82:	4603      	mov	r3, r0
 8010d84:	82fb      	strh	r3, [r7, #22]
	gpio_interrupt[pin].callback = cb;
 8010d86:	8afa      	ldrh	r2, [r7, #22]
 8010d88:	4910      	ldr	r1, [pc, #64]	; (8010dcc <hal_gpio_add_exti_callback+0x60>)
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	005b      	lsls	r3, r3, #1
 8010d8e:	4413      	add	r3, r2
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	440b      	add	r3, r1
 8010d94:	68ba      	ldr	r2, [r7, #8]
 8010d96:	601a      	str	r2, [r3, #0]
	gpio_interrupt[pin].context = context;
 8010d98:	8afa      	ldrh	r2, [r7, #22]
 8010d9a:	490c      	ldr	r1, [pc, #48]	; (8010dcc <hal_gpio_add_exti_callback+0x60>)
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	005b      	lsls	r3, r3, #1
 8010da0:	4413      	add	r3, r2
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	440b      	add	r3, r1
 8010da6:	3304      	adds	r3, #4
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	601a      	str	r2, [r3, #0]
	gpio_interrupt[pin].ready = true;
 8010dac:	8afa      	ldrh	r2, [r7, #22]
 8010dae:	4907      	ldr	r1, [pc, #28]	; (8010dcc <hal_gpio_add_exti_callback+0x60>)
 8010db0:	4613      	mov	r3, r2
 8010db2:	005b      	lsls	r3, r3, #1
 8010db4:	4413      	add	r3, r2
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	440b      	add	r3, r1
 8010dba:	3308      	adds	r3, #8
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 8010dc0:	f7f8 fc1a 	bl	80095f8 <vPortExitCritical>
}
 8010dc4:	bf00      	nop
 8010dc6:	3718      	adds	r7, #24
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	20004c0c 	.word	0x20004c0c

08010dd0 <hal_gpio_exti_call>:

static void hal_gpio_exti_call(uint16_t pin_num) {
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	80fb      	strh	r3, [r7, #6]
	if(gpio_interrupt[pin_num].callback && gpio_interrupt[pin_num].ready) {
 8010dda:	88fa      	ldrh	r2, [r7, #6]
 8010ddc:	4915      	ldr	r1, [pc, #84]	; (8010e34 <hal_gpio_exti_call+0x64>)
 8010dde:	4613      	mov	r3, r2
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	4413      	add	r3, r2
 8010de4:	009b      	lsls	r3, r3, #2
 8010de6:	440b      	add	r3, r1
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d01e      	beq.n	8010e2c <hal_gpio_exti_call+0x5c>
 8010dee:	88fa      	ldrh	r2, [r7, #6]
 8010df0:	4910      	ldr	r1, [pc, #64]	; (8010e34 <hal_gpio_exti_call+0x64>)
 8010df2:	4613      	mov	r3, r2
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	440b      	add	r3, r1
 8010dfc:	3308      	adds	r3, #8
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d012      	beq.n	8010e2c <hal_gpio_exti_call+0x5c>
		gpio_interrupt[pin_num].callback(gpio_interrupt[pin_num].context);
 8010e06:	88fa      	ldrh	r2, [r7, #6]
 8010e08:	490a      	ldr	r1, [pc, #40]	; (8010e34 <hal_gpio_exti_call+0x64>)
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	4413      	add	r3, r2
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	440b      	add	r3, r1
 8010e14:	6819      	ldr	r1, [r3, #0]
 8010e16:	88fa      	ldrh	r2, [r7, #6]
 8010e18:	4806      	ldr	r0, [pc, #24]	; (8010e34 <hal_gpio_exti_call+0x64>)
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4413      	add	r3, r2
 8010e20:	009b      	lsls	r3, r3, #2
 8010e22:	4403      	add	r3, r0
 8010e24:	3304      	adds	r3, #4
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	4788      	blx	r1
	}
}
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	20004c0c 	.word	0x20004c0c

08010e38 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0)) {
 8010e3c:	2001      	movs	r0, #1
 8010e3e:	f7ff fcbf 	bl	80107c0 <LL_EXTI_IsActiveFlag_0_31>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d005      	beq.n	8010e54 <EXTI0_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8010e48:	2001      	movs	r0, #1
 8010e4a:	f7ff fccf 	bl	80107ec <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(0);
 8010e4e:	2000      	movs	r0, #0
 8010e50:	f7ff ffbe 	bl	8010dd0 <hal_gpio_exti_call>
    }
}
 8010e54:	bf00      	nop
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1)) {
 8010e5c:	2002      	movs	r0, #2
 8010e5e:	f7ff fcaf 	bl	80107c0 <LL_EXTI_IsActiveFlag_0_31>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d005      	beq.n	8010e74 <EXTI1_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8010e68:	2002      	movs	r0, #2
 8010e6a:	f7ff fcbf 	bl	80107ec <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(1);
 8010e6e:	2001      	movs	r0, #1
 8010e70:	f7ff ffae 	bl	8010dd0 <hal_gpio_exti_call>
    }
}
 8010e74:	bf00      	nop
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2)) {
 8010e7c:	2004      	movs	r0, #4
 8010e7e:	f7ff fc9f 	bl	80107c0 <LL_EXTI_IsActiveFlag_0_31>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d005      	beq.n	8010e94 <EXTI2_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8010e88:	2004      	movs	r0, #4
 8010e8a:	f7ff fcaf 	bl	80107ec <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(2);
 8010e8e:	2002      	movs	r0, #2
 8010e90:	f7ff ff9e 	bl	8010dd0 <hal_gpio_exti_call>
    }
}
 8010e94:	bf00      	nop
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3)) {
 8010e9c:	2008      	movs	r0, #8
 8010e9e:	f7ff fc8f 	bl	80107c0 <LL_EXTI_IsActiveFlag_0_31>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d005      	beq.n	8010eb4 <EXTI3_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8010ea8:	2008      	movs	r0, #8
 8010eaa:	f7ff fc9f 	bl	80107ec <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(3);
 8010eae:	2003      	movs	r0, #3
 8010eb0:	f7ff ff8e 	bl	8010dd0 <hal_gpio_exti_call>
    }
}
 8010eb4:	bf00      	nop
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4)) {
 8010ebc:	2010      	movs	r0, #16
 8010ebe:	f7ff fc7f 	bl	80107c0 <LL_EXTI_IsActiveFlag_0_31>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d005      	beq.n	8010ed4 <EXTI4_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8010ec8:	2010      	movs	r0, #16
 8010eca:	f7ff fc8f 	bl	80107ec <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(4);
 8010ece:	2004      	movs	r0, #4
 8010ed0:	f7ff ff7e 	bl	8010dd0 <hal_gpio_exti_call>
    }
}
 8010ed4:	bf00      	nop
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5)) {
 8010edc:	2020      	movs	r0, #32
 8010ede:	f7ff fc6f 	bl	80107c0 <LL_EXTI_IsActiveFlag_0_31>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d005      	beq.n	8010ef4 <EXTI9_5_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8010ee8:	2020      	movs	r0, #32
 8010eea:	f7ff fc7f 	bl	80107ec <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(5);
 8010eee:	2005      	movs	r0, #5
 8010ef0:	f7ff ff6e 	bl	8010dd0 <hal_gpio_exti_call>
    }
}
 8010ef4:	bf00      	nop
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
        __asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	607b      	str	r3, [r7, #4]
    }
 8010f10:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 8010f12:	e7fe      	b.n	8010f12 <vApplicationMallocFailedHook+0x1a>

08010f14 <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
        __asm volatile
 8010f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f22:	f383 8811 	msr	BASEPRI, r3
 8010f26:	f3bf 8f6f 	isb	sy
 8010f2a:	f3bf 8f4f 	dsb	sy
 8010f2e:	60fb      	str	r3, [r7, #12]
    }
 8010f30:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 8010f32:	e7fe      	b.n	8010f32 <vApplicationStackOverflowHook+0x1e>

08010f34 <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 8010f34:	b480      	push	{r7}
 8010f36:	b085      	sub	sp, #20
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	4a07      	ldr	r2, [pc, #28]	; (8010f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8010f44:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	4a06      	ldr	r2, [pc, #24]	; (8010f64 <vApplicationGetIdleTaskMemory+0x30>)
 8010f4a:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f52:	601a      	str	r2, [r3, #0]
}
 8010f54:	bf00      	nop
 8010f56:	3714      	adds	r7, #20
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr
 8010f60:	20004ccc 	.word	0x20004ccc
 8010f64:	20004d28 	.word	0x20004d28

08010f68 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	4a07      	ldr	r2, [pc, #28]	; (8010f94 <vApplicationGetTimerTaskMemory+0x2c>)
 8010f78:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	4a06      	ldr	r2, [pc, #24]	; (8010f98 <vApplicationGetTimerTaskMemory+0x30>)
 8010f7e:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f86:	601a      	str	r2, [r3, #0]
}
 8010f88:	bf00      	nop
 8010f8a:	3714      	adds	r7, #20
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr
 8010f94:	20005528 	.word	0x20005528
 8010f98:	20005584 	.word	0x20005584

08010f9c <__NVIC_GetPriorityGrouping>:
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010fa0:	4b04      	ldr	r3, [pc, #16]	; (8010fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	0a1b      	lsrs	r3, r3, #8
 8010fa6:	f003 0307 	and.w	r3, r3, #7
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr
 8010fb4:	e000ed00 	.word	0xe000ed00

08010fb8 <__NVIC_EnableIRQ>:
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	db0b      	blt.n	8010fe2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010fca:	79fb      	ldrb	r3, [r7, #7]
 8010fcc:	f003 021f 	and.w	r2, r3, #31
 8010fd0:	4907      	ldr	r1, [pc, #28]	; (8010ff0 <__NVIC_EnableIRQ+0x38>)
 8010fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fd6:	095b      	lsrs	r3, r3, #5
 8010fd8:	2001      	movs	r0, #1
 8010fda:	fa00 f202 	lsl.w	r2, r0, r2
 8010fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010fe2:	bf00      	nop
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	e000e100 	.word	0xe000e100

08010ff4 <__NVIC_SetPriority>:
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	6039      	str	r1, [r7, #0]
 8010ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011004:	2b00      	cmp	r3, #0
 8011006:	db0a      	blt.n	801101e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	b2da      	uxtb	r2, r3
 801100c:	490c      	ldr	r1, [pc, #48]	; (8011040 <__NVIC_SetPriority+0x4c>)
 801100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011012:	0112      	lsls	r2, r2, #4
 8011014:	b2d2      	uxtb	r2, r2
 8011016:	440b      	add	r3, r1
 8011018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801101c:	e00a      	b.n	8011034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	b2da      	uxtb	r2, r3
 8011022:	4908      	ldr	r1, [pc, #32]	; (8011044 <__NVIC_SetPriority+0x50>)
 8011024:	79fb      	ldrb	r3, [r7, #7]
 8011026:	f003 030f 	and.w	r3, r3, #15
 801102a:	3b04      	subs	r3, #4
 801102c:	0112      	lsls	r2, r2, #4
 801102e:	b2d2      	uxtb	r2, r2
 8011030:	440b      	add	r3, r1
 8011032:	761a      	strb	r2, [r3, #24]
}
 8011034:	bf00      	nop
 8011036:	370c      	adds	r7, #12
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	e000e100 	.word	0xe000e100
 8011044:	e000ed00 	.word	0xe000ed00

08011048 <NVIC_EncodePriority>:
{
 8011048:	b480      	push	{r7}
 801104a:	b089      	sub	sp, #36	; 0x24
 801104c:	af00      	add	r7, sp, #0
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f003 0307 	and.w	r3, r3, #7
 801105a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801105c:	69fb      	ldr	r3, [r7, #28]
 801105e:	f1c3 0307 	rsb	r3, r3, #7
 8011062:	2b04      	cmp	r3, #4
 8011064:	bf28      	it	cs
 8011066:	2304      	movcs	r3, #4
 8011068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	3304      	adds	r3, #4
 801106e:	2b06      	cmp	r3, #6
 8011070:	d902      	bls.n	8011078 <NVIC_EncodePriority+0x30>
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	3b03      	subs	r3, #3
 8011076:	e000      	b.n	801107a <NVIC_EncodePriority+0x32>
 8011078:	2300      	movs	r3, #0
 801107a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801107c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	fa02 f303 	lsl.w	r3, r2, r3
 8011086:	43da      	mvns	r2, r3
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	401a      	ands	r2, r3
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	fa01 f303 	lsl.w	r3, r1, r3
 801109a:	43d9      	mvns	r1, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80110a0:	4313      	orrs	r3, r2
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3724      	adds	r7, #36	; 0x24
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <LL_I2C_EnableClockStretching>:
{
 80110ae:	b480      	push	{r7}
 80110b0:	b083      	sub	sp, #12
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	601a      	str	r2, [r3, #0]
}
 80110c2:	bf00      	nop
 80110c4:	370c      	adds	r7, #12
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr

080110ce <LL_I2C_DisableGeneralCall>:
{
 80110ce:	b480      	push	{r7}
 80110d0:	b083      	sub	sp, #12
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	601a      	str	r2, [r3, #0]
}
 80110e2:	bf00      	nop
 80110e4:	370c      	adds	r7, #12
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr

080110ee <LL_I2C_SetOwnAddress2>:
{
 80110ee:	b480      	push	{r7}
 80110f0:	b083      	sub	sp, #12
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
 80110f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	431a      	orrs	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	60da      	str	r2, [r3, #12]
}
 8011108:	bf00      	nop
 801110a:	370c      	adds	r7, #12
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr

08011114 <LL_I2C_DisableOwnAddress2>:
{
 8011114:	b480      	push	{r7}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	f023 0201 	bic.w	r2, r3, #1
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	60da      	str	r2, [r3, #12]
}
 8011128:	bf00      	nop
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <LL_I2C_IsActiveFlag_TXE>:
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	695b      	ldr	r3, [r3, #20]
 8011140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011144:	2b80      	cmp	r3, #128	; 0x80
 8011146:	bf0c      	ite	eq
 8011148:	2301      	moveq	r3, #1
 801114a:	2300      	movne	r3, #0
 801114c:	b2db      	uxtb	r3, r3
}
 801114e:	4618      	mov	r0, r3
 8011150:	370c      	adds	r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr

0801115a <LL_I2C_IsActiveFlag_BTF>:
{
 801115a:	b480      	push	{r7}
 801115c:	b083      	sub	sp, #12
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	f003 0304 	and.w	r3, r3, #4
 801116a:	2b04      	cmp	r3, #4
 801116c:	bf0c      	ite	eq
 801116e:	2301      	moveq	r3, #1
 8011170:	2300      	movne	r3, #0
 8011172:	b2db      	uxtb	r3, r3
}
 8011174:	4618      	mov	r0, r3
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <LL_I2C_IsActiveFlag_RXNE>:
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	695b      	ldr	r3, [r3, #20]
 801118c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011190:	2b40      	cmp	r3, #64	; 0x40
 8011192:	bf0c      	ite	eq
 8011194:	2301      	moveq	r3, #1
 8011196:	2300      	movne	r3, #0
 8011198:	b2db      	uxtb	r3, r3
}
 801119a:	4618      	mov	r0, r3
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr

080111a6 <LL_I2C_IsActiveFlag_SB>:
{
 80111a6:	b480      	push	{r7}
 80111a8:	b083      	sub	sp, #12
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	695b      	ldr	r3, [r3, #20]
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	bf0c      	ite	eq
 80111ba:	2301      	moveq	r3, #1
 80111bc:	2300      	movne	r3, #0
 80111be:	b2db      	uxtb	r3, r3
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	370c      	adds	r7, #12
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr

080111cc <LL_I2C_IsActiveFlag_ADDR>:
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	695b      	ldr	r3, [r3, #20]
 80111d8:	f003 0302 	and.w	r3, r3, #2
 80111dc:	2b02      	cmp	r3, #2
 80111de:	bf0c      	ite	eq
 80111e0:	2301      	moveq	r3, #1
 80111e2:	2300      	movne	r3, #0
 80111e4:	b2db      	uxtb	r3, r3
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	370c      	adds	r7, #12
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr

080111f2 <LL_I2C_IsActiveFlag_BUSY>:
{
 80111f2:	b480      	push	{r7}
 80111f4:	b083      	sub	sp, #12
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	699b      	ldr	r3, [r3, #24]
 80111fe:	f003 0302 	and.w	r3, r3, #2
 8011202:	2b02      	cmp	r3, #2
 8011204:	bf0c      	ite	eq
 8011206:	2301      	moveq	r3, #1
 8011208:	2300      	movne	r3, #0
 801120a:	b2db      	uxtb	r3, r3
}
 801120c:	4618      	mov	r0, r3
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <LL_I2C_ClearFlag_ADDR>:
{
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	695b      	ldr	r3, [r3, #20]
 8011224:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8011226:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	699b      	ldr	r3, [r3, #24]
 801122c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 801122e:	68fb      	ldr	r3, [r7, #12]
}
 8011230:	bf00      	nop
 8011232:	3714      	adds	r7, #20
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <LL_I2C_AcknowledgeNextData>:
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	431a      	orrs	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	601a      	str	r2, [r3, #0]
}
 8011256:	bf00      	nop
 8011258:	370c      	adds	r7, #12
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr

08011262 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8011262:	b480      	push	{r7}
 8011264:	b083      	sub	sp, #12
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	601a      	str	r2, [r3, #0]
}
 8011276:	bf00      	nop
 8011278:	370c      	adds	r7, #12
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr

08011282 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8011282:	b480      	push	{r7}
 8011284:	b083      	sub	sp, #12
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	601a      	str	r2, [r3, #0]
}
 8011296:	bf00      	nop
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80112a2:	b480      	push	{r7}
 80112a4:	b083      	sub	sp, #12
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	691b      	ldr	r3, [r3, #16]
 80112ae:	b2db      	uxtb	r3, r3
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	370c      	adds	r7, #12
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80112d0:	78fb      	ldrb	r3, [r7, #3]
 80112d2:	431a      	orrs	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	611a      	str	r2, [r3, #16]
}
 80112d8:	bf00      	nop
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <LL_DMA_SetDataTransferDirection>:
{
 80112e4:	b480      	push	{r7}
 80112e6:	b085      	sub	sp, #20
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80112f0:	4a0d      	ldr	r2, [pc, #52]	; (8011328 <LL_DMA_SetDataTransferDirection+0x44>)
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	4413      	add	r3, r2
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	461a      	mov	r2, r3
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	4413      	add	r3, r2
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011304:	4908      	ldr	r1, [pc, #32]	; (8011328 <LL_DMA_SetDataTransferDirection+0x44>)
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	440b      	add	r3, r1
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	4619      	mov	r1, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	440b      	add	r3, r1
 8011312:	4619      	mov	r1, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4313      	orrs	r3, r2
 8011318:	600b      	str	r3, [r1, #0]
}
 801131a:	bf00      	nop
 801131c:	3714      	adds	r7, #20
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop
 8011328:	08016370 	.word	0x08016370

0801132c <LL_DMA_SetMode>:
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8011338:	4a0d      	ldr	r2, [pc, #52]	; (8011370 <LL_DMA_SetMode+0x44>)
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	4413      	add	r3, r2
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	461a      	mov	r2, r3
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	4413      	add	r3, r2
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 801134c:	4908      	ldr	r1, [pc, #32]	; (8011370 <LL_DMA_SetMode+0x44>)
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	440b      	add	r3, r1
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	4619      	mov	r1, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	440b      	add	r3, r1
 801135a:	4619      	mov	r1, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	4313      	orrs	r3, r2
 8011360:	600b      	str	r3, [r1, #0]
}
 8011362:	bf00      	nop
 8011364:	3714      	adds	r7, #20
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	08016370 	.word	0x08016370

08011374 <LL_DMA_SetPeriphIncMode>:
{
 8011374:	b480      	push	{r7}
 8011376:	b085      	sub	sp, #20
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8011380:	4a0d      	ldr	r2, [pc, #52]	; (80113b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	4413      	add	r3, r2
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	461a      	mov	r2, r3
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	4413      	add	r3, r2
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011394:	4908      	ldr	r1, [pc, #32]	; (80113b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	440b      	add	r3, r1
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	4619      	mov	r1, r3
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	440b      	add	r3, r1
 80113a2:	4619      	mov	r1, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4313      	orrs	r3, r2
 80113a8:	600b      	str	r3, [r1, #0]
}
 80113aa:	bf00      	nop
 80113ac:	3714      	adds	r7, #20
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop
 80113b8:	08016370 	.word	0x08016370

080113bc <LL_DMA_SetMemoryIncMode>:
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	60b9      	str	r1, [r7, #8]
 80113c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80113c8:	4a0d      	ldr	r2, [pc, #52]	; (8011400 <LL_DMA_SetMemoryIncMode+0x44>)
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	4413      	add	r3, r2
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	461a      	mov	r2, r3
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	4413      	add	r3, r2
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80113dc:	4908      	ldr	r1, [pc, #32]	; (8011400 <LL_DMA_SetMemoryIncMode+0x44>)
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	440b      	add	r3, r1
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	4619      	mov	r1, r3
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	440b      	add	r3, r1
 80113ea:	4619      	mov	r1, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4313      	orrs	r3, r2
 80113f0:	600b      	str	r3, [r1, #0]
}
 80113f2:	bf00      	nop
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	08016370 	.word	0x08016370

08011404 <LL_DMA_SetPeriphSize>:
{
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8011410:	4a0d      	ldr	r2, [pc, #52]	; (8011448 <LL_DMA_SetPeriphSize+0x44>)
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	4413      	add	r3, r2
 8011416:	781b      	ldrb	r3, [r3, #0]
 8011418:	461a      	mov	r2, r3
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	4413      	add	r3, r2
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011424:	4908      	ldr	r1, [pc, #32]	; (8011448 <LL_DMA_SetPeriphSize+0x44>)
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	440b      	add	r3, r1
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	4619      	mov	r1, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	440b      	add	r3, r1
 8011432:	4619      	mov	r1, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	4313      	orrs	r3, r2
 8011438:	600b      	str	r3, [r1, #0]
}
 801143a:	bf00      	nop
 801143c:	3714      	adds	r7, #20
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	08016370 	.word	0x08016370

0801144c <LL_DMA_SetMemorySize>:
{
 801144c:	b480      	push	{r7}
 801144e:	b085      	sub	sp, #20
 8011450:	af00      	add	r7, sp, #0
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8011458:	4a0d      	ldr	r2, [pc, #52]	; (8011490 <LL_DMA_SetMemorySize+0x44>)
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	4413      	add	r3, r2
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	461a      	mov	r2, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	4413      	add	r3, r2
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 801146c:	4908      	ldr	r1, [pc, #32]	; (8011490 <LL_DMA_SetMemorySize+0x44>)
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	440b      	add	r3, r1
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	4619      	mov	r1, r3
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	440b      	add	r3, r1
 801147a:	4619      	mov	r1, r3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	4313      	orrs	r3, r2
 8011480:	600b      	str	r3, [r1, #0]
}
 8011482:	bf00      	nop
 8011484:	3714      	adds	r7, #20
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	08016370 	.word	0x08016370

08011494 <LL_DMA_SetStreamPriorityLevel>:
{
 8011494:	b480      	push	{r7}
 8011496:	b085      	sub	sp, #20
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80114a0:	4a0d      	ldr	r2, [pc, #52]	; (80114d8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	4413      	add	r3, r2
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	461a      	mov	r2, r3
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	4413      	add	r3, r2
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80114b4:	4908      	ldr	r1, [pc, #32]	; (80114d8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	440b      	add	r3, r1
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	4619      	mov	r1, r3
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	440b      	add	r3, r1
 80114c2:	4619      	mov	r1, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	4313      	orrs	r3, r2
 80114c8:	600b      	str	r3, [r1, #0]
}
 80114ca:	bf00      	nop
 80114cc:	3714      	adds	r7, #20
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	08016370 	.word	0x08016370

080114dc <LL_DMA_SetChannelSelection>:
{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80114e8:	4a0d      	ldr	r2, [pc, #52]	; (8011520 <LL_DMA_SetChannelSelection+0x44>)
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	4413      	add	r3, r2
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	461a      	mov	r2, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	4413      	add	r3, r2
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80114fc:	4908      	ldr	r1, [pc, #32]	; (8011520 <LL_DMA_SetChannelSelection+0x44>)
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	440b      	add	r3, r1
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	4619      	mov	r1, r3
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	440b      	add	r3, r1
 801150a:	4619      	mov	r1, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	4313      	orrs	r3, r2
 8011510:	600b      	str	r3, [r1, #0]
}
 8011512:	bf00      	nop
 8011514:	3714      	adds	r7, #20
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	08016370 	.word	0x08016370

08011524 <LL_DMA_DisableFifoMode>:
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 801152e:	4a0c      	ldr	r2, [pc, #48]	; (8011560 <LL_DMA_DisableFifoMode+0x3c>)
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	4413      	add	r3, r2
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	461a      	mov	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	4413      	add	r3, r2
 801153c:	695b      	ldr	r3, [r3, #20]
 801153e:	4908      	ldr	r1, [pc, #32]	; (8011560 <LL_DMA_DisableFifoMode+0x3c>)
 8011540:	683a      	ldr	r2, [r7, #0]
 8011542:	440a      	add	r2, r1
 8011544:	7812      	ldrb	r2, [r2, #0]
 8011546:	4611      	mov	r1, r2
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	440a      	add	r2, r1
 801154c:	f023 0304 	bic.w	r3, r3, #4
 8011550:	6153      	str	r3, [r2, #20]
}
 8011552:	bf00      	nop
 8011554:	370c      	adds	r7, #12
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr
 801155e:	bf00      	nop
 8011560:	08016370 	.word	0x08016370

08011564 <i2c_init>:

#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	4603      	mov	r3, r0
 801156c:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 801156e:	f7f8 f813 	bl	8009598 <vPortEnterCritical>

	switch(i2c_id) {
 8011572:	79fb      	ldrb	r3, [r7, #7]
 8011574:	2b01      	cmp	r3, #1
 8011576:	d002      	beq.n	801157e <i2c_init+0x1a>
 8011578:	2b03      	cmp	r3, #3
 801157a:	d00f      	beq.n	801159c <i2c_init+0x38>
 801157c:	e01d      	b.n	80115ba <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 801157e:	f000 faab 	bl	8011ad8 <i2c1_init>
		i2c1drv.i2c = I2C1;
 8011582:	4b13      	ldr	r3, [pc, #76]	; (80115d0 <i2c_init+0x6c>)
 8011584:	4a13      	ldr	r2, [pc, #76]	; (80115d4 <i2c_init+0x70>)
 8011586:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 8011588:	2001      	movs	r0, #1
 801158a:	f7f8 fafb 	bl	8009b84 <xQueueCreateMutex>
 801158e:	4603      	mov	r3, r0
 8011590:	4a0f      	ldr	r2, [pc, #60]	; (80115d0 <i2c_init+0x6c>)
 8011592:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 8011594:	4810      	ldr	r0, [pc, #64]	; (80115d8 <i2c_init+0x74>)
 8011596:	f7fe fc03 	bl	800fda0 <hal_cli_printf>
		break;
 801159a:	e012      	b.n	80115c2 <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 801159c:	f000 fb64 	bl	8011c68 <i2c3_init>
		i2c3drv.i2c = I2C3;
 80115a0:	4b0e      	ldr	r3, [pc, #56]	; (80115dc <i2c_init+0x78>)
 80115a2:	4a0f      	ldr	r2, [pc, #60]	; (80115e0 <i2c_init+0x7c>)
 80115a4:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 80115a6:	2001      	movs	r0, #1
 80115a8:	f7f8 faec 	bl	8009b84 <xQueueCreateMutex>
 80115ac:	4603      	mov	r3, r0
 80115ae:	4a0b      	ldr	r2, [pc, #44]	; (80115dc <i2c_init+0x78>)
 80115b0:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 80115b2:	480c      	ldr	r0, [pc, #48]	; (80115e4 <i2c_init+0x80>)
 80115b4:	f7fe fbf4 	bl	800fda0 <hal_cli_printf>
		break;
 80115b8:	e003      	b.n	80115c2 <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 80115ba:	480b      	ldr	r0, [pc, #44]	; (80115e8 <i2c_init+0x84>)
 80115bc:	f7fe fbf0 	bl	800fda0 <hal_cli_printf>
		break;
 80115c0:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 80115c2:	f7f8 f819 	bl	80095f8 <vPortExitCritical>
}
 80115c6:	bf00      	nop
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	20005984 	.word	0x20005984
 80115d4:	40005400 	.word	0x40005400
 80115d8:	08015438 	.word	0x08015438
 80115dc:	2000598c 	.word	0x2000598c
 80115e0:	40005c00 	.word	0x40005c00
 80115e4:	08015444 	.word	0x08015444
 80115e8:	08015450 	.word	0x08015450

080115ec <hal_i2c_transfer>:

bool hal_i2c_transfer(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b08a      	sub	sp, #40	; 0x28
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6178      	str	r0, [r7, #20]
 80115f4:	60fa      	str	r2, [r7, #12]
 80115f6:	60bb      	str	r3, [r7, #8]
 80115f8:	460b      	mov	r3, r1
 80115fa:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 80115fc:	2300      	movs	r3, #0
 80115fe:	627b      	str	r3, [r7, #36]	; 0x24

	timeout *= 1000;
 8011600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011606:	fb02 f303 	mul.w	r3, r2, r3
 801160a:	637b      	str	r3, [r7, #52]	; 0x34

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011614:	4618      	mov	r0, r3
 8011616:	f7f8 fdc1 	bl	800a19c <xQueueSemaphoreTake>
 801161a:	4603      	mov	r3, r0
 801161c:	2b01      	cmp	r3, #1
 801161e:	d004      	beq.n	801162a <hal_i2c_transfer+0x3e>
		hal_cli_printf("i2c semaphore take timeout");
 8011620:	4899      	ldr	r0, [pc, #612]	; (8011888 <hal_i2c_transfer+0x29c>)
 8011622:	f7fe fbbd 	bl	800fda0 <hal_cli_printf>
		return false;
 8011626:	2300      	movs	r3, #0
 8011628:	e129      	b.n	801187e <hal_i2c_transfer+0x292>
	}

	timer = hal_get_delay_timer(timeout);
 801162a:	463b      	mov	r3, r7
 801162c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801162e:	4618      	mov	r0, r3
 8011630:	f7fe fe98 	bl	8010364 <hal_get_delay_timer>
 8011634:	f107 031c 	add.w	r3, r7, #28
 8011638:	463a      	mov	r2, r7
 801163a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801163e:	e883 0003 	stmia.w	r3, {r0, r1}

	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8011642:	e013      	b.n	801166c <hal_i2c_transfer+0x80>
		if(hal_delay_timer_is_expired(&timer)) {
 8011644:	f107 031c 	add.w	r3, r7, #28
 8011648:	4618      	mov	r0, r3
 801164a:	f7fe feb1 	bl	80103b0 <hal_delay_timer_is_expired>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00b      	beq.n	801166c <hal_i2c_transfer+0x80>
			xSemaphoreGive(drv->mutex);
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	6858      	ldr	r0, [r3, #4]
 8011658:	2300      	movs	r3, #0
 801165a:	2200      	movs	r2, #0
 801165c:	2100      	movs	r1, #0
 801165e:	f7f8 faa9 	bl	8009bb4 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 8011662:	488a      	ldr	r0, [pc, #552]	; (801188c <hal_i2c_transfer+0x2a0>)
 8011664:	f7fe fb9c 	bl	800fda0 <hal_cli_printf>
			return false;
 8011668:	2300      	movs	r3, #0
 801166a:	e108      	b.n	801187e <hal_i2c_transfer+0x292>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4618      	mov	r0, r3
 8011672:	f7ff fdbe 	bl	80111f2 <LL_I2C_IsActiveFlag_BUSY>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1e3      	bne.n	8011644 <hal_i2c_transfer+0x58>
		}
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4618      	mov	r0, r3
 8011682:	f7ff fdee 	bl	8011262 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8011686:	e018      	b.n	80116ba <hal_i2c_transfer+0xce>
		if(hal_delay_timer_is_expired(&timer)) {
 8011688:	f107 031c 	add.w	r3, r7, #28
 801168c:	4618      	mov	r0, r3
 801168e:	f7fe fe8f 	bl	80103b0 <hal_delay_timer_is_expired>
 8011692:	4603      	mov	r3, r0
 8011694:	2b00      	cmp	r3, #0
 8011696:	d010      	beq.n	80116ba <hal_i2c_transfer+0xce>
			xSemaphoreGive(drv->mutex);
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	6858      	ldr	r0, [r3, #4]
 801169c:	2300      	movs	r3, #0
 801169e:	2200      	movs	r2, #0
 80116a0:	2100      	movs	r1, #0
 80116a2:	f7f8 fa87 	bl	8009bb4 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7ff fde9 	bl	8011282 <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 80116b0:	4877      	ldr	r0, [pc, #476]	; (8011890 <hal_i2c_transfer+0x2a4>)
 80116b2:	f7fe fb75 	bl	800fda0 <hal_cli_printf>
			return false;
 80116b6:	2300      	movs	r3, #0
 80116b8:	e0e1      	b.n	801187e <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	4618      	mov	r0, r3
 80116c0:	f7ff fd71 	bl	80111a6 <LL_I2C_IsActiveFlag_SB>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d0de      	beq.n	8011688 <hal_i2c_transfer+0x9c>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr);
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	7cfa      	ldrb	r2, [r7, #19]
 80116d0:	4611      	mov	r1, r2
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7ff fdf2 	bl	80112bc <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80116d8:	e018      	b.n	801170c <hal_i2c_transfer+0x120>
		if(hal_delay_timer_is_expired(&timer)) {
 80116da:	f107 031c 	add.w	r3, r7, #28
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fe fe66 	bl	80103b0 <hal_delay_timer_is_expired>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d010      	beq.n	801170c <hal_i2c_transfer+0x120>
			xSemaphoreGive(drv->mutex);
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	6858      	ldr	r0, [r3, #4]
 80116ee:	2300      	movs	r3, #0
 80116f0:	2200      	movs	r2, #0
 80116f2:	2100      	movs	r1, #0
 80116f4:	f7f8 fa5e 	bl	8009bb4 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7ff fdc0 	bl	8011282 <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 8011702:	4864      	ldr	r0, [pc, #400]	; (8011894 <hal_i2c_transfer+0x2a8>)
 8011704:	f7fe fb4c 	bl	800fda0 <hal_cli_printf>
			return false;
 8011708:	2300      	movs	r3, #0
 801170a:	e0b8      	b.n	801187e <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4618      	mov	r0, r3
 8011712:	f7ff fd5b 	bl	80111cc <LL_I2C_IsActiveFlag_ADDR>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d0de      	beq.n	80116da <hal_i2c_transfer+0xee>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	4618      	mov	r0, r3
 8011722:	f7ff fd79 	bl	8011218 <LL_I2C_ClearFlag_ADDR>

	/* register address transfer */
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8011726:	e018      	b.n	801175a <hal_i2c_transfer+0x16e>
		if(hal_delay_timer_is_expired(&timer)) {
 8011728:	f107 031c 	add.w	r3, r7, #28
 801172c:	4618      	mov	r0, r3
 801172e:	f7fe fe3f 	bl	80103b0 <hal_delay_timer_is_expired>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d010      	beq.n	801175a <hal_i2c_transfer+0x16e>
			xSemaphoreGive(drv->mutex);
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	6858      	ldr	r0, [r3, #4]
 801173c:	2300      	movs	r3, #0
 801173e:	2200      	movs	r2, #0
 8011740:	2100      	movs	r1, #0
 8011742:	f7f8 fa37 	bl	8009bb4 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	4618      	mov	r0, r3
 801174c:	f7ff fd99 	bl	8011282 <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c register address transmit timeout");
 8011750:	4851      	ldr	r0, [pc, #324]	; (8011898 <hal_i2c_transfer+0x2ac>)
 8011752:	f7fe fb25 	bl	800fda0 <hal_cli_printf>
			return false;
 8011756:	2300      	movs	r3, #0
 8011758:	e091      	b.n	801187e <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4618      	mov	r0, r3
 8011760:	f7ff fce8 	bl	8011134 <LL_I2C_IsActiveFlag_TXE>
 8011764:	4603      	mov	r3, r0
 8011766:	2b00      	cmp	r3, #0
 8011768:	d0de      	beq.n	8011728 <hal_i2c_transfer+0x13c>
		}
	}
	LL_I2C_TransmitData8(drv->i2c, regaddr);
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	68fa      	ldr	r2, [r7, #12]
 8011770:	b2d2      	uxtb	r2, r2
 8011772:	4611      	mov	r1, r2
 8011774:	4618      	mov	r0, r3
 8011776:	f7ff fda1 	bl	80112bc <LL_I2C_TransmitData8>


	while(index < size) {
 801177a:	e02b      	b.n	80117d4 <hal_i2c_transfer+0x1e8>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 801177c:	f107 031c 	add.w	r3, r7, #28
 8011780:	4618      	mov	r0, r3
 8011782:	f7fe fe15 	bl	80103b0 <hal_delay_timer_is_expired>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d010      	beq.n	80117ae <hal_i2c_transfer+0x1c2>
				xSemaphoreGive(drv->mutex);
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	6858      	ldr	r0, [r3, #4]
 8011790:	2300      	movs	r3, #0
 8011792:	2200      	movs	r2, #0
 8011794:	2100      	movs	r1, #0
 8011796:	f7f8 fa0d 	bl	8009bb4 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	4618      	mov	r0, r3
 80117a0:	f7ff fd6f 	bl	8011282 <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c TXE flag timeout");
 80117a4:	483d      	ldr	r0, [pc, #244]	; (801189c <hal_i2c_transfer+0x2b0>)
 80117a6:	f7fe fafb 	bl	800fda0 <hal_cli_printf>
				return false;
 80117aa:	2300      	movs	r3, #0
 80117ac:	e067      	b.n	801187e <hal_i2c_transfer+0x292>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff fcbe 	bl	8011134 <LL_I2C_IsActiveFlag_TXE>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d0de      	beq.n	801177c <hal_i2c_transfer+0x190>
			}
		}

		LL_I2C_TransmitData8(drv->i2c, buf[index++]);
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	6818      	ldr	r0, [r3, #0]
 80117c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c4:	1c5a      	adds	r2, r3, #1
 80117c6:	627a      	str	r2, [r7, #36]	; 0x24
 80117c8:	68ba      	ldr	r2, [r7, #8]
 80117ca:	4413      	add	r3, r2
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	4619      	mov	r1, r3
 80117d0:	f7ff fd74 	bl	80112bc <LL_I2C_TransmitData8>
	while(index < size) {
 80117d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d8:	429a      	cmp	r2, r3
 80117da:	d3e8      	bcc.n	80117ae <hal_i2c_transfer+0x1c2>
	}


	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80117dc:	e018      	b.n	8011810 <hal_i2c_transfer+0x224>
		if(hal_delay_timer_is_expired(&timer)) {
 80117de:	f107 031c 	add.w	r3, r7, #28
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fe fde4 	bl	80103b0 <hal_delay_timer_is_expired>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d010      	beq.n	8011810 <hal_i2c_transfer+0x224>
			xSemaphoreGive(drv->mutex);
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	6858      	ldr	r0, [r3, #4]
 80117f2:	2300      	movs	r3, #0
 80117f4:	2200      	movs	r2, #0
 80117f6:	2100      	movs	r1, #0
 80117f8:	f7f8 f9dc 	bl	8009bb4 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	4618      	mov	r0, r3
 8011802:	f7ff fd3e 	bl	8011282 <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c TXE flag timeout");
 8011806:	4825      	ldr	r0, [pc, #148]	; (801189c <hal_i2c_transfer+0x2b0>)
 8011808:	f7fe faca 	bl	800fda0 <hal_cli_printf>
			return false;
 801180c:	2300      	movs	r3, #0
 801180e:	e036      	b.n	801187e <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4618      	mov	r0, r3
 8011816:	f7ff fc8d 	bl	8011134 <LL_I2C_IsActiveFlag_TXE>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d0de      	beq.n	80117de <hal_i2c_transfer+0x1f2>
		}
	}

	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 8011820:	e018      	b.n	8011854 <hal_i2c_transfer+0x268>
		if(hal_delay_timer_is_expired(&timer)) {
 8011822:	f107 031c 	add.w	r3, r7, #28
 8011826:	4618      	mov	r0, r3
 8011828:	f7fe fdc2 	bl	80103b0 <hal_delay_timer_is_expired>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	d010      	beq.n	8011854 <hal_i2c_transfer+0x268>
			xSemaphoreGive(drv->mutex);
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	6858      	ldr	r0, [r3, #4]
 8011836:	2300      	movs	r3, #0
 8011838:	2200      	movs	r2, #0
 801183a:	2100      	movs	r1, #0
 801183c:	f7f8 f9ba 	bl	8009bb4 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4618      	mov	r0, r3
 8011846:	f7ff fd1c 	bl	8011282 <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c BTF flag timeout");
 801184a:	4815      	ldr	r0, [pc, #84]	; (80118a0 <hal_i2c_transfer+0x2b4>)
 801184c:	f7fe faa8 	bl	800fda0 <hal_cli_printf>
			return false;
 8011850:	2300      	movs	r3, #0
 8011852:	e014      	b.n	801187e <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fc7e 	bl	801115a <LL_I2C_IsActiveFlag_BTF>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d0de      	beq.n	8011822 <hal_i2c_transfer+0x236>
		}
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff fd0a 	bl	8011282 <LL_I2C_GenerateStopCondition>
	xSemaphoreGive(drv->mutex);
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	6858      	ldr	r0, [r3, #4]
 8011872:	2300      	movs	r3, #0
 8011874:	2200      	movs	r2, #0
 8011876:	2100      	movs	r1, #0
 8011878:	f7f8 f99c 	bl	8009bb4 <xQueueGenericSend>

	return true;
 801187c:	2301      	movs	r3, #1
}
 801187e:	4618      	mov	r0, r3
 8011880:	3728      	adds	r7, #40	; 0x28
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	08015464 	.word	0x08015464
 801188c:	08015480 	.word	0x08015480
 8011890:	08015498 	.word	0x08015498
 8011894:	080154b4 	.word	0x080154b4
 8011898:	080154d4 	.word	0x080154d4
 801189c:	080154fc 	.word	0x080154fc
 80118a0:	08015514 	.word	0x08015514

080118a4 <hal_i2c_receive>:


bool hal_i2c_receive(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 80118a4:	b590      	push	{r4, r7, lr}
 80118a6:	b08d      	sub	sp, #52	; 0x34
 80118a8:	af02      	add	r7, sp, #8
 80118aa:	6178      	str	r0, [r7, #20]
 80118ac:	60fa      	str	r2, [r7, #12]
 80118ae:	60bb      	str	r3, [r7, #8]
 80118b0:	460b      	mov	r3, r1
 80118b2:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 80118b4:	2300      	movs	r3, #0
 80118b6:	627b      	str	r3, [r7, #36]	; 0x24

	if(hal_i2c_transfer(drv,addr,regaddr,NULL,0,timeout) == false) {
 80118b8:	7cf9      	ldrb	r1, [r7, #19]
 80118ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118bc:	9301      	str	r3, [sp, #4]
 80118be:	2300      	movs	r3, #0
 80118c0:	9300      	str	r3, [sp, #0]
 80118c2:	2300      	movs	r3, #0
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	6978      	ldr	r0, [r7, #20]
 80118c8:	f7ff fe90 	bl	80115ec <hal_i2c_transfer>
 80118cc:	4603      	mov	r3, r0
 80118ce:	f083 0301 	eor.w	r3, r3, #1
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d004      	beq.n	80118e2 <hal_i2c_receive+0x3e>
		hal_cli_printf("i2c transfer error");
 80118d8:	4879      	ldr	r0, [pc, #484]	; (8011ac0 <hal_i2c_receive+0x21c>)
 80118da:	f7fe fa61 	bl	800fda0 <hal_cli_printf>
		return false;
 80118de:	2300      	movs	r3, #0
 80118e0:	e0ea      	b.n	8011ab8 <hal_i2c_receive+0x214>
	}

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7f8 fc56 	bl	800a19c <xQueueSemaphoreTake>
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d004      	beq.n	8011900 <hal_i2c_receive+0x5c>
		hal_cli_printf("i2c semaphore take timeout");
 80118f6:	4873      	ldr	r0, [pc, #460]	; (8011ac4 <hal_i2c_receive+0x220>)
 80118f8:	f7fe fa52 	bl	800fda0 <hal_cli_printf>
		return false;
 80118fc:	2300      	movs	r3, #0
 80118fe:	e0db      	b.n	8011ab8 <hal_i2c_receive+0x214>
	}

	timer = hal_get_delay_timer(timeout);
 8011900:	463b      	mov	r3, r7
 8011902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011904:	4618      	mov	r0, r3
 8011906:	f7fe fd2d 	bl	8010364 <hal_get_delay_timer>
 801190a:	f107 031c 	add.w	r3, r7, #28
 801190e:	463a      	mov	r2, r7
 8011910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011914:	e883 0003 	stmia.w	r3, {r0, r1}


	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8011918:	e013      	b.n	8011942 <hal_i2c_receive+0x9e>
		if(hal_delay_timer_is_expired(&timer)) {
 801191a:	f107 031c 	add.w	r3, r7, #28
 801191e:	4618      	mov	r0, r3
 8011920:	f7fe fd46 	bl	80103b0 <hal_delay_timer_is_expired>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d00b      	beq.n	8011942 <hal_i2c_receive+0x9e>
			xSemaphoreGive(drv->mutex);
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	6858      	ldr	r0, [r3, #4]
 801192e:	2300      	movs	r3, #0
 8011930:	2200      	movs	r2, #0
 8011932:	2100      	movs	r1, #0
 8011934:	f7f8 f93e 	bl	8009bb4 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 8011938:	4863      	ldr	r0, [pc, #396]	; (8011ac8 <hal_i2c_receive+0x224>)
 801193a:	f7fe fa31 	bl	800fda0 <hal_cli_printf>
			return false;
 801193e:	2300      	movs	r3, #0
 8011940:	e0ba      	b.n	8011ab8 <hal_i2c_receive+0x214>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4618      	mov	r0, r3
 8011948:	f7ff fc53 	bl	80111f2 <LL_I2C_IsActiveFlag_BUSY>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1e3      	bne.n	801191a <hal_i2c_receive+0x76>
		}
	}

	if(size == 1) {
 8011952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011954:	2b01      	cmp	r3, #1
 8011956:	d106      	bne.n	8011966 <hal_i2c_receive+0xc2>
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2100      	movs	r1, #0
 801195e:	4618      	mov	r0, r3
 8011960:	f7ff fc6c 	bl	801123c <LL_I2C_AcknowledgeNextData>
 8011964:	e006      	b.n	8011974 <hal_i2c_receive+0xd0>
	} else {
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_ACK);
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff fc64 	bl	801123c <LL_I2C_AcknowledgeNextData>
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	4618      	mov	r0, r3
 801197a:	f7ff fc72 	bl	8011262 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 801197e:	e018      	b.n	80119b2 <hal_i2c_receive+0x10e>
		if(hal_delay_timer_is_expired(&timer)) {
 8011980:	f107 031c 	add.w	r3, r7, #28
 8011984:	4618      	mov	r0, r3
 8011986:	f7fe fd13 	bl	80103b0 <hal_delay_timer_is_expired>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	d010      	beq.n	80119b2 <hal_i2c_receive+0x10e>
			xSemaphoreGive(drv->mutex);
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	6858      	ldr	r0, [r3, #4]
 8011994:	2300      	movs	r3, #0
 8011996:	2200      	movs	r2, #0
 8011998:	2100      	movs	r1, #0
 801199a:	f7f8 f90b 	bl	8009bb4 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ff fc6d 	bl	8011282 <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 80119a8:	4848      	ldr	r0, [pc, #288]	; (8011acc <hal_i2c_receive+0x228>)
 80119aa:	f7fe f9f9 	bl	800fda0 <hal_cli_printf>
			return false;
 80119ae:	2300      	movs	r3, #0
 80119b0:	e082      	b.n	8011ab8 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7ff fbf5 	bl	80111a6 <LL_I2C_IsActiveFlag_SB>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d0de      	beq.n	8011980 <hal_i2c_receive+0xdc>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr | 0x01);
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	7cfb      	ldrb	r3, [r7, #19]
 80119c8:	f043 0301 	orr.w	r3, r3, #1
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	4619      	mov	r1, r3
 80119d0:	4610      	mov	r0, r2
 80119d2:	f7ff fc73 	bl	80112bc <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80119d6:	e018      	b.n	8011a0a <hal_i2c_receive+0x166>
		if(hal_delay_timer_is_expired(&timer)) {
 80119d8:	f107 031c 	add.w	r3, r7, #28
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fe fce7 	bl	80103b0 <hal_delay_timer_is_expired>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d010      	beq.n	8011a0a <hal_i2c_receive+0x166>
			xSemaphoreGive(drv->mutex);
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	6858      	ldr	r0, [r3, #4]
 80119ec:	2300      	movs	r3, #0
 80119ee:	2200      	movs	r2, #0
 80119f0:	2100      	movs	r1, #0
 80119f2:	f7f8 f8df 	bl	8009bb4 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff fc41 	bl	8011282 <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 8011a00:	4833      	ldr	r0, [pc, #204]	; (8011ad0 <hal_i2c_receive+0x22c>)
 8011a02:	f7fe f9cd 	bl	800fda0 <hal_cli_printf>
			return false;
 8011a06:	2300      	movs	r3, #0
 8011a08:	e056      	b.n	8011ab8 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7ff fbdc 	bl	80111cc <LL_I2C_IsActiveFlag_ADDR>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d0de      	beq.n	80119d8 <hal_i2c_receive+0x134>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7ff fbfa 	bl	8011218 <LL_I2C_ClearFlag_ADDR>

	while(index < size) {
 8011a24:	e037      	b.n	8011a96 <hal_i2c_receive+0x1f2>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8011a26:	f107 031c 	add.w	r3, r7, #28
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fe fcc0 	bl	80103b0 <hal_delay_timer_is_expired>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d010      	beq.n	8011a58 <hal_i2c_receive+0x1b4>
				xSemaphoreGive(drv->mutex);
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	6858      	ldr	r0, [r3, #4]
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	2100      	movs	r1, #0
 8011a40:	f7f8 f8b8 	bl	8009bb4 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7ff fc1a 	bl	8011282 <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c RXNE flag timeout");
 8011a4e:	4821      	ldr	r0, [pc, #132]	; (8011ad4 <hal_i2c_receive+0x230>)
 8011a50:	f7fe f9a6 	bl	800fda0 <hal_cli_printf>
				return false;
 8011a54:	2300      	movs	r3, #0
 8011a56:	e02f      	b.n	8011ab8 <hal_i2c_receive+0x214>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7ff fb8f 	bl	8011180 <LL_I2C_IsActiveFlag_RXNE>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d0de      	beq.n	8011a26 <hal_i2c_receive+0x182>
			}
		}
		buf[index++] = LL_I2C_ReceiveData8(drv->i2c);
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	6819      	ldr	r1, [r3, #0]
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	1c5a      	adds	r2, r3, #1
 8011a70:	627a      	str	r2, [r7, #36]	; 0x24
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	18d4      	adds	r4, r2, r3
 8011a76:	4608      	mov	r0, r1
 8011a78:	f7ff fc13 	bl	80112a2 <LL_I2C_ReceiveData8>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	7023      	strb	r3, [r4, #0]

		if(index == size - 1)
 8011a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a82:	3b01      	subs	r3, #1
 8011a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d105      	bne.n	8011a96 <hal_i2c_receive+0x1f2>
			LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2100      	movs	r1, #0
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7ff fbd3 	bl	801123c <LL_I2C_AcknowledgeNextData>
	while(index < size) {
 8011a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d3dc      	bcc.n	8011a58 <hal_i2c_receive+0x1b4>
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7ff fbed 	bl	8011282 <LL_I2C_GenerateStopCondition>

	xSemaphoreGive(drv->mutex);
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	6858      	ldr	r0, [r3, #4]
 8011aac:	2300      	movs	r3, #0
 8011aae:	2200      	movs	r2, #0
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	f7f8 f87f 	bl	8009bb4 <xQueueGenericSend>

	return true;
 8011ab6:	2301      	movs	r3, #1
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	372c      	adds	r7, #44	; 0x2c
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd90      	pop	{r4, r7, pc}
 8011ac0:	0801552c 	.word	0x0801552c
 8011ac4:	08015464 	.word	0x08015464
 8011ac8:	08015480 	.word	0x08015480
 8011acc:	08015498 	.word	0x08015498
 8011ad0:	080154b4 	.word	0x080154b4
 8011ad4:	08015540 	.word	0x08015540

08011ad8 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b08a      	sub	sp, #40	; 0x28
 8011adc:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8011ade:	463b      	mov	r3, r7
 8011ae0:	2220      	movs	r2, #32
 8011ae2:	2100      	movs	r1, #0
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f002 fedd 	bl	80148a4 <memset>

	hal_gpio_init_alt(
 8011aea:	2304      	movs	r3, #4
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	2303      	movs	r3, #3
 8011af0:	2200      	movs	r2, #0
 8011af2:	2104      	movs	r1, #4
 8011af4:	4857      	ldr	r0, [pc, #348]	; (8011c54 <i2c1_init+0x17c>)
 8011af6:	f7fe fec3 	bl	8010880 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 8011afa:	2304      	movs	r3, #4
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	2303      	movs	r3, #3
 8011b00:	2200      	movs	r2, #0
 8011b02:	2104      	movs	r1, #4
 8011b04:	4854      	ldr	r0, [pc, #336]	; (8011c58 <i2c1_init+0x180>)
 8011b06:	f7fe febb 	bl	8010880 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_TX_STREAM, DMA_I2C1_TX_CHANNEL);
 8011b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011b0e:	2106      	movs	r1, #6
 8011b10:	4852      	ldr	r0, [pc, #328]	; (8011c5c <i2c1_init+0x184>)
 8011b12:	f7ff fce3 	bl	80114dc <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011b16:	2240      	movs	r2, #64	; 0x40
 8011b18:	2106      	movs	r1, #6
 8011b1a:	4850      	ldr	r0, [pc, #320]	; (8011c5c <i2c1_init+0x184>)
 8011b1c:	f7ff fbe2 	bl	80112e4 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011b20:	2200      	movs	r2, #0
 8011b22:	2106      	movs	r1, #6
 8011b24:	484d      	ldr	r0, [pc, #308]	; (8011c5c <i2c1_init+0x184>)
 8011b26:	f7ff fcb5 	bl	8011494 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	2106      	movs	r1, #6
 8011b2e:	484b      	ldr	r0, [pc, #300]	; (8011c5c <i2c1_init+0x184>)
 8011b30:	f7ff fbfc 	bl	801132c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011b34:	2200      	movs	r2, #0
 8011b36:	2106      	movs	r1, #6
 8011b38:	4848      	ldr	r0, [pc, #288]	; (8011c5c <i2c1_init+0x184>)
 8011b3a:	f7ff fc1b 	bl	8011374 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011b42:	2106      	movs	r1, #6
 8011b44:	4845      	ldr	r0, [pc, #276]	; (8011c5c <i2c1_init+0x184>)
 8011b46:	f7ff fc39 	bl	80113bc <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	2106      	movs	r1, #6
 8011b4e:	4843      	ldr	r0, [pc, #268]	; (8011c5c <i2c1_init+0x184>)
 8011b50:	f7ff fc58 	bl	8011404 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011b54:	2200      	movs	r2, #0
 8011b56:	2106      	movs	r1, #6
 8011b58:	4840      	ldr	r0, [pc, #256]	; (8011c5c <i2c1_init+0x184>)
 8011b5a:	f7ff fc77 	bl	801144c <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_TX_STREAM);
 8011b5e:	2106      	movs	r1, #6
 8011b60:	483e      	ldr	r0, [pc, #248]	; (8011c5c <i2c1_init+0x184>)
 8011b62:	f7ff fcdf 	bl	8011524 <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_RX_STREAM, DMA_I2C1_RX_CHANNEL);
 8011b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	483b      	ldr	r0, [pc, #236]	; (8011c5c <i2c1_init+0x184>)
 8011b6e:	f7ff fcb5 	bl	80114dc <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8011b72:	2200      	movs	r2, #0
 8011b74:	2100      	movs	r1, #0
 8011b76:	4839      	ldr	r0, [pc, #228]	; (8011c5c <i2c1_init+0x184>)
 8011b78:	f7ff fbb4 	bl	80112e4 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	2100      	movs	r1, #0
 8011b80:	4836      	ldr	r0, [pc, #216]	; (8011c5c <i2c1_init+0x184>)
 8011b82:	f7ff fc87 	bl	8011494 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MODE_NORMAL);
 8011b86:	2200      	movs	r2, #0
 8011b88:	2100      	movs	r1, #0
 8011b8a:	4834      	ldr	r0, [pc, #208]	; (8011c5c <i2c1_init+0x184>)
 8011b8c:	f7ff fbce 	bl	801132c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011b90:	2200      	movs	r2, #0
 8011b92:	2100      	movs	r1, #0
 8011b94:	4831      	ldr	r0, [pc, #196]	; (8011c5c <i2c1_init+0x184>)
 8011b96:	f7ff fbed 	bl	8011374 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011b9e:	2100      	movs	r1, #0
 8011ba0:	482e      	ldr	r0, [pc, #184]	; (8011c5c <i2c1_init+0x184>)
 8011ba2:	f7ff fc0b 	bl	80113bc <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	2100      	movs	r1, #0
 8011baa:	482c      	ldr	r0, [pc, #176]	; (8011c5c <i2c1_init+0x184>)
 8011bac:	f7ff fc2a 	bl	8011404 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	2100      	movs	r1, #0
 8011bb4:	4829      	ldr	r0, [pc, #164]	; (8011c5c <i2c1_init+0x184>)
 8011bb6:	f7ff fc49 	bl	801144c <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_RX_STREAM);
 8011bba:	2100      	movs	r1, #0
 8011bbc:	4827      	ldr	r0, [pc, #156]	; (8011c5c <i2c1_init+0x184>)
 8011bbe:	f7ff fcb1 	bl	8011524 <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011bc2:	f7ff f9eb 	bl	8010f9c <__NVIC_GetPriorityGrouping>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2200      	movs	r2, #0
 8011bca:	2105      	movs	r1, #5
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7ff fa3b 	bl	8011048 <NVIC_EncodePriority>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	201f      	movs	r0, #31
 8011bd8:	f7ff fa0c 	bl	8010ff4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8011bdc:	201f      	movs	r0, #31
 8011bde:	f7ff f9eb 	bl	8010fb8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011be2:	f7ff f9db 	bl	8010f9c <__NVIC_GetPriorityGrouping>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2200      	movs	r2, #0
 8011bea:	2105      	movs	r1, #5
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7ff fa2b 	bl	8011048 <NVIC_EncodePriority>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	2020      	movs	r0, #32
 8011bf8:	f7ff f9fc 	bl	8010ff4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8011bfc:	2020      	movs	r0, #32
 8011bfe:	f7ff f9db 	bl	8010fb8 <__NVIC_EnableIRQ>

  /* I2C Initialization */
  LL_I2C_DisableOwnAddress2(I2C1);
 8011c02:	4817      	ldr	r0, [pc, #92]	; (8011c60 <i2c1_init+0x188>)
 8011c04:	f7ff fa86 	bl	8011114 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8011c08:	4815      	ldr	r0, [pc, #84]	; (8011c60 <i2c1_init+0x188>)
 8011c0a:	f7ff fa60 	bl	80110ce <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8011c0e:	4814      	ldr	r0, [pc, #80]	; (8011c60 <i2c1_init+0x188>)
 8011c10:	f7ff fa4d 	bl	80110ae <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8011c14:	2300      	movs	r3, #0
 8011c16:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 400000;
 8011c18:	4b12      	ldr	r3, [pc, #72]	; (8011c64 <i2c1_init+0x18c>)
 8011c1a:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8011c20:	2300      	movs	r3, #0
 8011c22:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8011c24:	2300      	movs	r3, #0
 8011c26:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8011c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c30:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8011c32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011c36:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8011c38:	463b      	mov	r3, r7
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	4808      	ldr	r0, [pc, #32]	; (8011c60 <i2c1_init+0x188>)
 8011c3e:	f7f2 f84f 	bl	8003ce0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8011c42:	2100      	movs	r1, #0
 8011c44:	4806      	ldr	r0, [pc, #24]	; (8011c60 <i2c1_init+0x188>)
 8011c46:	f7ff fa52 	bl	80110ee <LL_I2C_SetOwnAddress2>
}
 8011c4a:	bf00      	nop
 8011c4c:	3720      	adds	r7, #32
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	080163c8 	.word	0x080163c8
 8011c58:	080163d0 	.word	0x080163d0
 8011c5c:	40026000 	.word	0x40026000
 8011c60:	40005400 	.word	0x40005400
 8011c64:	00061a80 	.word	0x00061a80

08011c68 <i2c3_init>:

static void i2c3_init(void)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b08a      	sub	sp, #40	; 0x28
 8011c6c:	af02      	add	r7, sp, #8
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8011c6e:	463b      	mov	r3, r7
 8011c70:	2220      	movs	r2, #32
 8011c72:	2100      	movs	r1, #0
 8011c74:	4618      	mov	r0, r3
 8011c76:	f002 fe15 	bl	80148a4 <memset>

	hal_gpio_init_alt(
 8011c7a:	2304      	movs	r3, #4
 8011c7c:	9300      	str	r3, [sp, #0]
 8011c7e:	2303      	movs	r3, #3
 8011c80:	2200      	movs	r2, #0
 8011c82:	2104      	movs	r1, #4
 8011c84:	4829      	ldr	r0, [pc, #164]	; (8011d2c <i2c3_init+0xc4>)
 8011c86:	f7fe fdfb 	bl	8010880 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

	hal_gpio_init_alt(
 8011c8a:	2304      	movs	r3, #4
 8011c8c:	9300      	str	r3, [sp, #0]
 8011c8e:	2303      	movs	r3, #3
 8011c90:	2200      	movs	r2, #0
 8011c92:	2104      	movs	r1, #4
 8011c94:	4826      	ldr	r0, [pc, #152]	; (8011d30 <i2c3_init+0xc8>)
 8011c96:	f7fe fdf3 	bl	8010880 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011c9a:	f7ff f97f 	bl	8010f9c <__NVIC_GetPriorityGrouping>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	2105      	movs	r1, #5
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff f9cf 	bl	8011048 <NVIC_EncodePriority>
 8011caa:	4603      	mov	r3, r0
 8011cac:	4619      	mov	r1, r3
 8011cae:	2048      	movs	r0, #72	; 0x48
 8011cb0:	f7ff f9a0 	bl	8010ff4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 8011cb4:	2048      	movs	r0, #72	; 0x48
 8011cb6:	f7ff f97f 	bl	8010fb8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011cba:	f7ff f96f 	bl	8010f9c <__NVIC_GetPriorityGrouping>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	2105      	movs	r1, #5
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff f9bf 	bl	8011048 <NVIC_EncodePriority>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	4619      	mov	r1, r3
 8011cce:	2049      	movs	r0, #73	; 0x49
 8011cd0:	f7ff f990 	bl	8010ff4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 8011cd4:	2049      	movs	r0, #73	; 0x49
 8011cd6:	f7ff f96f 	bl	8010fb8 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8011cda:	4816      	ldr	r0, [pc, #88]	; (8011d34 <i2c3_init+0xcc>)
 8011cdc:	f7ff fa1a 	bl	8011114 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8011ce0:	4814      	ldr	r0, [pc, #80]	; (8011d34 <i2c3_init+0xcc>)
 8011ce2:	f7ff f9f4 	bl	80110ce <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8011ce6:	4813      	ldr	r0, [pc, #76]	; (8011d34 <i2c3_init+0xcc>)
 8011ce8:	f7ff f9e1 	bl	80110ae <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8011cec:	2300      	movs	r3, #0
 8011cee:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 8011cf0:	4b11      	ldr	r3, [pc, #68]	; (8011d38 <i2c3_init+0xd0>)
 8011cf2:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8011d00:	2300      	movs	r3, #0
 8011d02:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8011d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d08:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8011d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011d0e:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8011d10:	463b      	mov	r3, r7
 8011d12:	4619      	mov	r1, r3
 8011d14:	4807      	ldr	r0, [pc, #28]	; (8011d34 <i2c3_init+0xcc>)
 8011d16:	f7f1 ffe3 	bl	8003ce0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	4805      	ldr	r0, [pc, #20]	; (8011d34 <i2c3_init+0xcc>)
 8011d1e:	f7ff f9e6 	bl	80110ee <LL_I2C_SetOwnAddress2>
}
 8011d22:	bf00      	nop
 8011d24:	3720      	adds	r7, #32
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	080163d8 	.word	0x080163d8
 8011d30:	080163e0 	.word	0x080163e0
 8011d34:	40005c00 	.word	0x40005c00
 8011d38:	000186a0 	.word	0x000186a0

08011d3c <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	af00      	add	r7, sp, #0

}
 8011d40:	bf00      	nop
 8011d42:	46bd      	mov	sp, r7
 8011d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d48:	4770      	bx	lr

08011d4a <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8011d4a:	b480      	push	{r7}
 8011d4c:	af00      	add	r7, sp, #0

}
 8011d4e:	bf00      	nop
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	af00      	add	r7, sp, #0

}
 8011d5c:	bf00      	nop
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d64:	4770      	bx	lr

08011d66 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8011d66:	b480      	push	{r7}
 8011d68:	af00      	add	r7, sp, #0

}
 8011d6a:	bf00      	nop
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 8011d74:	b480      	push	{r7}
 8011d76:	af00      	add	r7, sp, #0

}
 8011d78:	bf00      	nop
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 8011d82:	b480      	push	{r7}
 8011d84:	af00      	add	r7, sp, #0

}
 8011d86:	bf00      	nop
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <initThread>:
#include "input_app.h"

#include "event.h"


static void initThread(void* param) {
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af02      	add	r7, sp, #8
 8011d96:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter initThread");
 8011d98:	482a      	ldr	r0, [pc, #168]	; (8011e44 <initThread+0xb4>)
 8011d9a:	f7fe f801 	bl	800fda0 <hal_cli_printf>

	sdio_init();
 8011d9e:	f000 fa21 	bl	80121e4 <sdio_init>
	MX_FATFS_Init();
 8011da2:	f7f3 fcbb 	bl	800571c <MX_FATFS_Init>

	i2c_init(I2cId1);
 8011da6:	2001      	movs	r0, #1
 8011da8:	f7ff fbdc 	bl	8011564 <i2c_init>
	i2c_init(I2cId3);
 8011dac:	2003      	movs	r0, #3
 8011dae:	f7ff fbd9 	bl	8011564 <i2c_init>

	spi_init(SpiId2);
 8011db2:	2002      	movs	r0, #2
 8011db4:	f000 fd7c 	bl	80128b0 <spi_init>
	spi_init(SpiId4);
 8011db8:	2004      	movs	r0, #4
 8011dba:	f000 fd79 	bl	80128b0 <spi_init>

	adc_init(AdcId1);
 8011dbe:	2001      	movs	r0, #1
 8011dc0:	f7fd fe40 	bl	800fa44 <adc_init>

	tim_init(TimId4);
 8011dc4:	2004      	movs	r0, #4
 8011dc6:	f001 fb4d 	bl	8013464 <tim_init>

	hal_resources_init();
 8011dca:	f000 f93f 	bl	801204c <hal_resources_init>

	xTaskCreate(mp3Thread, "mp3player", 512, NULL, 3, NULL);
 8011dce:	2300      	movs	r3, #0
 8011dd0:	9301      	str	r3, [sp, #4]
 8011dd2:	2303      	movs	r3, #3
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ddc:	491a      	ldr	r1, [pc, #104]	; (8011e48 <initThread+0xb8>)
 8011dde:	481b      	ldr	r0, [pc, #108]	; (8011e4c <initThread+0xbc>)
 8011de0:	f7f8 fd03 	bl	800a7ea <xTaskCreate>
	xTaskCreate(displayThread, "display", 512, NULL, 3, NULL);
 8011de4:	2300      	movs	r3, #0
 8011de6:	9301      	str	r3, [sp, #4]
 8011de8:	2303      	movs	r3, #3
 8011dea:	9300      	str	r3, [sp, #0]
 8011dec:	2300      	movs	r3, #0
 8011dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011df2:	4917      	ldr	r1, [pc, #92]	; (8011e50 <initThread+0xc0>)
 8011df4:	4817      	ldr	r0, [pc, #92]	; (8011e54 <initThread+0xc4>)
 8011df6:	f7f8 fcf8 	bl	800a7ea <xTaskCreate>
	xTaskCreate(inputThread, "input", 256, NULL, 3, NULL);
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	2303      	movs	r3, #3
 8011e00:	9300      	str	r3, [sp, #0]
 8011e02:	2300      	movs	r3, #0
 8011e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e08:	4913      	ldr	r1, [pc, #76]	; (8011e58 <initThread+0xc8>)
 8011e0a:	4814      	ldr	r0, [pc, #80]	; (8011e5c <initThread+0xcc>)
 8011e0c:	f7f8 fced 	bl	800a7ea <xTaskCreate>

	mp3_queue = xQueueCreate(10, sizeof(InputEvent));
 8011e10:	2200      	movs	r2, #0
 8011e12:	2108      	movs	r1, #8
 8011e14:	200a      	movs	r0, #10
 8011e16:	f7f7 fe0f 	bl	8009a38 <xQueueGenericCreate>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	4a10      	ldr	r2, [pc, #64]	; (8011e60 <initThread+0xd0>)
 8011e1e:	6013      	str	r3, [r2, #0]
	display_queue = xQueueCreate(10, sizeof(InputEvent));
 8011e20:	2200      	movs	r2, #0
 8011e22:	2108      	movs	r1, #8
 8011e24:	200a      	movs	r0, #10
 8011e26:	f7f7 fe07 	bl	8009a38 <xQueueGenericCreate>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	4a0d      	ldr	r2, [pc, #52]	; (8011e64 <initThread+0xd4>)
 8011e2e:	6013      	str	r3, [r2, #0]

	hal_cli_printf("exit initThread");
 8011e30:	480d      	ldr	r0, [pc, #52]	; (8011e68 <initThread+0xd8>)
 8011e32:	f7fd ffb5 	bl	800fda0 <hal_cli_printf>

	vTaskDelete(NULL);
 8011e36:	2000      	movs	r0, #0
 8011e38:	f7f8 fe40 	bl	800aabc <vTaskDelete>
}
 8011e3c:	bf00      	nop
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	08015558 	.word	0x08015558
 8011e48:	0801556c 	.word	0x0801556c
 8011e4c:	0801441d 	.word	0x0801441d
 8011e50:	08015578 	.word	0x08015578
 8011e54:	0801403d 	.word	0x0801403d
 8011e58:	08015580 	.word	0x08015580
 8011e5c:	08014261 	.word	0x08014261
 8011e60:	20006ea8 	.word	0x20006ea8
 8011e64:	20006eac 	.word	0x20006eac
 8011e68:	08015588 	.word	0x08015588

08011e6c <main>:

int main(void) {
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af02      	add	r7, sp, #8
	HAL_Init();
 8011e72:	f7ef f913 	bl	800109c <HAL_Init>

	hal_bus_init_early();
 8011e76:	f7fe f99b 	bl	80101b0 <hal_bus_init_early>
	hal_clock_init_early();
 8011e7a:	f7fe f9db 	bl	8010234 <hal_clock_init_early>
	hal_dwt_init_early();
 8011e7e:	f7fe fa31 	bl	80102e4 <hal_dwt_init_early>

	hal_resources_init_early();
 8011e82:	f000 f8c7 	bl	8012014 <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 8011e86:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8011e8a:	2000      	movs	r0, #0
 8011e8c:	f001 fecc 	bl	8013c28 <hal_uart_init>
	hal_cli_init();
 8011e90:	f7fd ffc0 	bl	800fe14 <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 8011e94:	4809      	ldr	r0, [pc, #36]	; (8011ebc <main+0x50>)
 8011e96:	f7fd ff83 	bl	800fda0 <hal_cli_printf>

	traceSTART();
 8011e9a:	f7fb fd61 	bl	800d960 <SEGGER_SYSVIEW_Conf>
	xTaskCreate(initThread, "init", 256, NULL, 3, NULL);
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	9301      	str	r3, [sp, #4]
 8011ea2:	2303      	movs	r3, #3
 8011ea4:	9300      	str	r3, [sp, #0]
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011eac:	4904      	ldr	r1, [pc, #16]	; (8011ec0 <main+0x54>)
 8011eae:	4805      	ldr	r0, [pc, #20]	; (8011ec4 <main+0x58>)
 8011eb0:	f7f8 fc9b 	bl	800a7ea <xTaskCreate>
	vTaskStartScheduler();
 8011eb4:	f7f8 fe8e 	bl	800abd4 <vTaskStartScheduler>

	for(;;);
 8011eb8:	e7fe      	b.n	8011eb8 <main+0x4c>
 8011eba:	bf00      	nop
 8011ebc:	08015598 	.word	0x08015598
 8011ec0:	080155b0 	.word	0x080155b0
 8011ec4:	08011d91 	.word	0x08011d91

08011ec8 <__NVIC_GetPriorityGrouping>:
{
 8011ec8:	b480      	push	{r7}
 8011eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ecc:	4b04      	ldr	r3, [pc, #16]	; (8011ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	0a1b      	lsrs	r3, r3, #8
 8011ed2:	f003 0307 	and.w	r3, r3, #7
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	e000ed00 	.word	0xe000ed00

08011ee4 <__NVIC_EnableIRQ>:
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	4603      	mov	r3, r0
 8011eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	db0b      	blt.n	8011f0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	f003 021f 	and.w	r2, r3, #31
 8011efc:	4907      	ldr	r1, [pc, #28]	; (8011f1c <__NVIC_EnableIRQ+0x38>)
 8011efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f02:	095b      	lsrs	r3, r3, #5
 8011f04:	2001      	movs	r0, #1
 8011f06:	fa00 f202 	lsl.w	r2, r0, r2
 8011f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011f0e:	bf00      	nop
 8011f10:	370c      	adds	r7, #12
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	e000e100 	.word	0xe000e100

08011f20 <__NVIC_SetPriority>:
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	4603      	mov	r3, r0
 8011f28:	6039      	str	r1, [r7, #0]
 8011f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	db0a      	blt.n	8011f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	b2da      	uxtb	r2, r3
 8011f38:	490c      	ldr	r1, [pc, #48]	; (8011f6c <__NVIC_SetPriority+0x4c>)
 8011f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f3e:	0112      	lsls	r2, r2, #4
 8011f40:	b2d2      	uxtb	r2, r2
 8011f42:	440b      	add	r3, r1
 8011f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011f48:	e00a      	b.n	8011f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	b2da      	uxtb	r2, r3
 8011f4e:	4908      	ldr	r1, [pc, #32]	; (8011f70 <__NVIC_SetPriority+0x50>)
 8011f50:	79fb      	ldrb	r3, [r7, #7]
 8011f52:	f003 030f 	and.w	r3, r3, #15
 8011f56:	3b04      	subs	r3, #4
 8011f58:	0112      	lsls	r2, r2, #4
 8011f5a:	b2d2      	uxtb	r2, r2
 8011f5c:	440b      	add	r3, r1
 8011f5e:	761a      	strb	r2, [r3, #24]
}
 8011f60:	bf00      	nop
 8011f62:	370c      	adds	r7, #12
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr
 8011f6c:	e000e100 	.word	0xe000e100
 8011f70:	e000ed00 	.word	0xe000ed00

08011f74 <NVIC_EncodePriority>:
{
 8011f74:	b480      	push	{r7}
 8011f76:	b089      	sub	sp, #36	; 0x24
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	f003 0307 	and.w	r3, r3, #7
 8011f86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	f1c3 0307 	rsb	r3, r3, #7
 8011f8e:	2b04      	cmp	r3, #4
 8011f90:	bf28      	it	cs
 8011f92:	2304      	movcs	r3, #4
 8011f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	3304      	adds	r3, #4
 8011f9a:	2b06      	cmp	r3, #6
 8011f9c:	d902      	bls.n	8011fa4 <NVIC_EncodePriority+0x30>
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	3b03      	subs	r3, #3
 8011fa2:	e000      	b.n	8011fa6 <NVIC_EncodePriority+0x32>
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	fa02 f303 	lsl.w	r3, r2, r3
 8011fb2:	43da      	mvns	r2, r3
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	401a      	ands	r2, r3
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8011fc6:	43d9      	mvns	r1, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011fcc:	4313      	orrs	r3, r2
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3724      	adds	r7, #36	; 0x24
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr

08011fda <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8011fda:	b480      	push	{r7}
 8011fdc:	b083      	sub	sp, #12
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8011fe6:	78fb      	ldrb	r3, [r7, #3]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d005      	beq.n	8011ff8 <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	889a      	ldrh	r2, [r3, #4]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8011ff6:	e006      	b.n	8012006 <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	889b      	ldrh	r3, [r3, #4]
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	0412      	lsls	r2, r2, #16
 8012004:	619a      	str	r2, [r3, #24]
}
 8012006:	bf00      	nop
 8012008:	370c      	adds	r7, #12
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
	...

08012014 <hal_resources_init_early>:
		{.gpio = &gpio_button_center, .key = InputKeyCenter},
		{.gpio = &gpio_button_up, .key = InputKeyUp},
		{.gpio = &gpio_button_down, .key = InputKeyDown},
};

void hal_resources_init_early(void) {
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8012018:	2300      	movs	r3, #0
 801201a:	2201      	movs	r2, #1
 801201c:	2101      	movs	r1, #1
 801201e:	4809      	ldr	r0, [pc, #36]	; (8012044 <hal_resources_init_early+0x30>)
 8012020:	f7fe fc14 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 8012024:	2101      	movs	r1, #1
 8012026:	4807      	ldr	r0, [pc, #28]	; (8012044 <hal_resources_init_early+0x30>)
 8012028:	f7ff ffd7 	bl	8011fda <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 801202c:	2300      	movs	r3, #0
 801202e:	2201      	movs	r2, #1
 8012030:	2101      	movs	r1, #1
 8012032:	4805      	ldr	r0, [pc, #20]	; (8012048 <hal_resources_init_early+0x34>)
 8012034:	f7fe fc0a 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 8012038:	2101      	movs	r1, #1
 801203a:	4803      	ldr	r0, [pc, #12]	; (8012048 <hal_resources_init_early+0x34>)
 801203c:	f7ff ffcd 	bl	8011fda <hal_gpio_write>
}
 8012040:	bf00      	nop
 8012042:	bd80      	pop	{r7, pc}
 8012044:	08016378 	.word	0x08016378
 8012048:	08016380 	.word	0x08016380

0801204c <hal_resources_init>:

void hal_resources_init(void) {
 801204c:	b580      	push	{r7, lr}
 801204e:	af00      	add	r7, sp, #0
	/* button */
	hal_gpio_init(&gpio_button_left, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8012050:	2300      	movs	r3, #0
 8012052:	2201      	movs	r2, #1
 8012054:	2107      	movs	r1, #7
 8012056:	4857      	ldr	r0, [pc, #348]	; (80121b4 <hal_resources_init+0x168>)
 8012058:	f7fe fbf8 	bl	801084c <hal_gpio_init>
	hal_gpio_init(&gpio_button_right, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 801205c:	2300      	movs	r3, #0
 801205e:	2201      	movs	r2, #1
 8012060:	2107      	movs	r1, #7
 8012062:	4855      	ldr	r0, [pc, #340]	; (80121b8 <hal_resources_init+0x16c>)
 8012064:	f7fe fbf2 	bl	801084c <hal_gpio_init>
	hal_gpio_init(&gpio_button_center, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8012068:	2300      	movs	r3, #0
 801206a:	2201      	movs	r2, #1
 801206c:	2107      	movs	r1, #7
 801206e:	4853      	ldr	r0, [pc, #332]	; (80121bc <hal_resources_init+0x170>)
 8012070:	f7fe fbec 	bl	801084c <hal_gpio_init>
	hal_gpio_init(&gpio_button_up, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8012074:	2300      	movs	r3, #0
 8012076:	2201      	movs	r2, #1
 8012078:	2107      	movs	r1, #7
 801207a:	4851      	ldr	r0, [pc, #324]	; (80121c0 <hal_resources_init+0x174>)
 801207c:	f7fe fbe6 	bl	801084c <hal_gpio_init>
	hal_gpio_init(&gpio_button_down, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8012080:	2300      	movs	r3, #0
 8012082:	2201      	movs	r2, #1
 8012084:	2107      	movs	r1, #7
 8012086:	484f      	ldr	r0, [pc, #316]	; (80121c4 <hal_resources_init+0x178>)
 8012088:	f7fe fbe0 	bl	801084c <hal_gpio_init>

	NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 801208c:	f7ff ff1c 	bl	8011ec8 <__NVIC_GetPriorityGrouping>
 8012090:	4603      	mov	r3, r0
 8012092:	2200      	movs	r2, #0
 8012094:	2105      	movs	r1, #5
 8012096:	4618      	mov	r0, r3
 8012098:	f7ff ff6c 	bl	8011f74 <NVIC_EncodePriority>
 801209c:	4603      	mov	r3, r0
 801209e:	4619      	mov	r1, r3
 80120a0:	2006      	movs	r0, #6
 80120a2:	f7ff ff3d 	bl	8011f20 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80120a6:	2006      	movs	r0, #6
 80120a8:	f7ff ff1c 	bl	8011ee4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80120ac:	f7ff ff0c 	bl	8011ec8 <__NVIC_GetPriorityGrouping>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2200      	movs	r2, #0
 80120b4:	2105      	movs	r1, #5
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7ff ff5c 	bl	8011f74 <NVIC_EncodePriority>
 80120bc:	4603      	mov	r3, r0
 80120be:	4619      	mov	r1, r3
 80120c0:	2007      	movs	r0, #7
 80120c2:	f7ff ff2d 	bl	8011f20 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI1_IRQn);
 80120c6:	2007      	movs	r0, #7
 80120c8:	f7ff ff0c 	bl	8011ee4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80120cc:	f7ff fefc 	bl	8011ec8 <__NVIC_GetPriorityGrouping>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2200      	movs	r2, #0
 80120d4:	2105      	movs	r1, #5
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff ff4c 	bl	8011f74 <NVIC_EncodePriority>
 80120dc:	4603      	mov	r3, r0
 80120de:	4619      	mov	r1, r3
 80120e0:	2017      	movs	r0, #23
 80120e2:	f7ff ff1d 	bl	8011f20 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80120e6:	2017      	movs	r0, #23
 80120e8:	f7ff fefc 	bl	8011ee4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80120ec:	f7ff feec 	bl	8011ec8 <__NVIC_GetPriorityGrouping>
 80120f0:	4603      	mov	r3, r0
 80120f2:	2200      	movs	r2, #0
 80120f4:	2105      	movs	r1, #5
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7ff ff3c 	bl	8011f74 <NVIC_EncodePriority>
 80120fc:	4603      	mov	r3, r0
 80120fe:	4619      	mov	r1, r3
 8012100:	2009      	movs	r0, #9
 8012102:	f7ff ff0d 	bl	8011f20 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8012106:	2009      	movs	r0, #9
 8012108:	f7ff feec 	bl	8011ee4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 801210c:	f7ff fedc 	bl	8011ec8 <__NVIC_GetPriorityGrouping>
 8012110:	4603      	mov	r3, r0
 8012112:	2200      	movs	r2, #0
 8012114:	2105      	movs	r1, #5
 8012116:	4618      	mov	r0, r3
 8012118:	f7ff ff2c 	bl	8011f74 <NVIC_EncodePriority>
 801211c:	4603      	mov	r3, r0
 801211e:	4619      	mov	r1, r3
 8012120:	200a      	movs	r0, #10
 8012122:	f7ff fefd 	bl	8011f20 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8012126:	200a      	movs	r0, #10
 8012128:	f7ff fedc 	bl	8011ee4 <__NVIC_EnableIRQ>

	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 801212c:	2300      	movs	r3, #0
 801212e:	2201      	movs	r2, #1
 8012130:	2101      	movs	r1, #1
 8012132:	4825      	ldr	r0, [pc, #148]	; (80121c8 <hal_resources_init+0x17c>)
 8012134:	f7fe fb8a 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 8012138:	2101      	movs	r1, #1
 801213a:	4823      	ldr	r0, [pc, #140]	; (80121c8 <hal_resources_init+0x17c>)
 801213c:	f7ff ff4d 	bl	8011fda <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8012140:	2300      	movs	r3, #0
 8012142:	2201      	movs	r2, #1
 8012144:	2101      	movs	r1, #1
 8012146:	4821      	ldr	r0, [pc, #132]	; (80121cc <hal_resources_init+0x180>)
 8012148:	f7fe fb80 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 801214c:	2101      	movs	r1, #1
 801214e:	481f      	ldr	r0, [pc, #124]	; (80121cc <hal_resources_init+0x180>)
 8012150:	f7ff ff43 	bl	8011fda <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8012154:	2300      	movs	r3, #0
 8012156:	2201      	movs	r2, #1
 8012158:	2101      	movs	r1, #1
 801215a:	481d      	ldr	r0, [pc, #116]	; (80121d0 <hal_resources_init+0x184>)
 801215c:	f7fe fb76 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 8012160:	2101      	movs	r1, #1
 8012162:	481b      	ldr	r0, [pc, #108]	; (80121d0 <hal_resources_init+0x184>)
 8012164:	f7ff ff39 	bl	8011fda <hal_gpio_write>

	/* vs1053 */
	hal_gpio_init(&gpio_vs1053_cs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8012168:	2300      	movs	r3, #0
 801216a:	2200      	movs	r2, #0
 801216c:	2101      	movs	r1, #1
 801216e:	4819      	ldr	r0, [pc, #100]	; (80121d4 <hal_resources_init+0x188>)
 8012170:	f7fe fb6c 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 8012174:	2101      	movs	r1, #1
 8012176:	4818      	ldr	r0, [pc, #96]	; (80121d8 <hal_resources_init+0x18c>)
 8012178:	f7ff ff2f 	bl	8011fda <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dcs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 801217c:	2300      	movs	r3, #0
 801217e:	2200      	movs	r2, #0
 8012180:	2101      	movs	r1, #1
 8012182:	4815      	ldr	r0, [pc, #84]	; (80121d8 <hal_resources_init+0x18c>)
 8012184:	f7fe fb62 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 8012188:	2101      	movs	r1, #1
 801218a:	4813      	ldr	r0, [pc, #76]	; (80121d8 <hal_resources_init+0x18c>)
 801218c:	f7ff ff25 	bl	8011fda <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_rst, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8012190:	2300      	movs	r3, #0
 8012192:	2200      	movs	r2, #0
 8012194:	2101      	movs	r1, #1
 8012196:	4811      	ldr	r0, [pc, #68]	; (80121dc <hal_resources_init+0x190>)
 8012198:	f7fe fb58 	bl	801084c <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_rst, 1);
 801219c:	2101      	movs	r1, #1
 801219e:	480f      	ldr	r0, [pc, #60]	; (80121dc <hal_resources_init+0x190>)
 80121a0:	f7ff ff1b 	bl	8011fda <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dreq, GpioModeInput, GpioPullNo, GpioSpeedFreqLow);
 80121a4:	2300      	movs	r3, #0
 80121a6:	2200      	movs	r2, #0
 80121a8:	2100      	movs	r1, #0
 80121aa:	480d      	ldr	r0, [pc, #52]	; (80121e0 <hal_resources_init+0x194>)
 80121ac:	f7fe fb4e 	bl	801084c <hal_gpio_init>
}
 80121b0:	bf00      	nop
 80121b2:	bd80      	pop	{r7, pc}
 80121b4:	08016388 	.word	0x08016388
 80121b8:	08016390 	.word	0x08016390
 80121bc:	08016398 	.word	0x08016398
 80121c0:	080163a0 	.word	0x080163a0
 80121c4:	080163a8 	.word	0x080163a8
 80121c8:	08016410 	.word	0x08016410
 80121cc:	08016418 	.word	0x08016418
 80121d0:	08016420 	.word	0x08016420
 80121d4:	08016428 	.word	0x08016428
 80121d8:	08016430 	.word	0x08016430
 80121dc:	08016438 	.word	0x08016438
 80121e0:	08016440 	.word	0x08016440

080121e4 <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 80121e4:	b480      	push	{r7}
 80121e6:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 80121e8:	4b0c      	ldr	r3, [pc, #48]	; (801221c <sdio_init+0x38>)
 80121ea:	4a0d      	ldr	r2, [pc, #52]	; (8012220 <sdio_init+0x3c>)
 80121ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80121ee:	4b0b      	ldr	r3, [pc, #44]	; (801221c <sdio_init+0x38>)
 80121f0:	2200      	movs	r2, #0
 80121f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80121f4:	4b09      	ldr	r3, [pc, #36]	; (801221c <sdio_init+0x38>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80121fa:	4b08      	ldr	r3, [pc, #32]	; (801221c <sdio_init+0x38>)
 80121fc:	2200      	movs	r2, #0
 80121fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8012200:	4b06      	ldr	r3, [pc, #24]	; (801221c <sdio_init+0x38>)
 8012202:	2200      	movs	r2, #0
 8012204:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8012206:	4b05      	ldr	r3, [pc, #20]	; (801221c <sdio_init+0x38>)
 8012208:	2200      	movs	r2, #0
 801220a:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 801220c:	4b03      	ldr	r3, [pc, #12]	; (801221c <sdio_init+0x38>)
 801220e:	2200      	movs	r2, #0
 8012210:	619a      	str	r2, [r3, #24]
}
 8012212:	bf00      	nop
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	20005994 	.word	0x20005994
 8012220:	40012c00 	.word	0x40012c00

08012224 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b08c      	sub	sp, #48	; 0x30
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 801222c:	2300      	movs	r3, #0
 801222e:	61bb      	str	r3, [r7, #24]
 8012230:	4b60      	ldr	r3, [pc, #384]	; (80123b4 <HAL_SD_MspInit+0x190>)
 8012232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012234:	4a5f      	ldr	r2, [pc, #380]	; (80123b4 <HAL_SD_MspInit+0x190>)
 8012236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801223a:	6313      	str	r3, [r2, #48]	; 0x30
 801223c:	4b5d      	ldr	r3, [pc, #372]	; (80123b4 <HAL_SD_MspInit+0x190>)
 801223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012244:	61bb      	str	r3, [r7, #24]
 8012246:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8012248:	2200      	movs	r2, #0
 801224a:	2105      	movs	r1, #5
 801224c:	203b      	movs	r0, #59	; 0x3b
 801224e:	f7ef f843 	bl	80012d8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8012252:	203b      	movs	r0, #59	; 0x3b
 8012254:	f7ef f85c 	bl	8001310 <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012258:	f107 031c 	add.w	r3, r7, #28
 801225c:	2200      	movs	r2, #0
 801225e:	601a      	str	r2, [r3, #0]
 8012260:	605a      	str	r2, [r3, #4]
 8012262:	609a      	str	r2, [r3, #8]
 8012264:	60da      	str	r2, [r3, #12]
 8012266:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4a52      	ldr	r2, [pc, #328]	; (80123b8 <HAL_SD_MspInit+0x194>)
 801226e:	4293      	cmp	r3, r2
 8012270:	f040 809c 	bne.w	80123ac <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 8012274:	2300      	movs	r3, #0
 8012276:	617b      	str	r3, [r7, #20]
 8012278:	4b4e      	ldr	r3, [pc, #312]	; (80123b4 <HAL_SD_MspInit+0x190>)
 801227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801227c:	4a4d      	ldr	r2, [pc, #308]	; (80123b4 <HAL_SD_MspInit+0x190>)
 801227e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012282:	6453      	str	r3, [r2, #68]	; 0x44
 8012284:	4b4b      	ldr	r3, [pc, #300]	; (80123b4 <HAL_SD_MspInit+0x190>)
 8012286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801228c:	617b      	str	r3, [r7, #20]
 801228e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012290:	2300      	movs	r3, #0
 8012292:	613b      	str	r3, [r7, #16]
 8012294:	4b47      	ldr	r3, [pc, #284]	; (80123b4 <HAL_SD_MspInit+0x190>)
 8012296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012298:	4a46      	ldr	r2, [pc, #280]	; (80123b4 <HAL_SD_MspInit+0x190>)
 801229a:	f043 0304 	orr.w	r3, r3, #4
 801229e:	6313      	str	r3, [r2, #48]	; 0x30
 80122a0:	4b44      	ldr	r3, [pc, #272]	; (80123b4 <HAL_SD_MspInit+0x190>)
 80122a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122a4:	f003 0304 	and.w	r3, r3, #4
 80122a8:	613b      	str	r3, [r7, #16]
 80122aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80122ac:	2300      	movs	r3, #0
 80122ae:	60fb      	str	r3, [r7, #12]
 80122b0:	4b40      	ldr	r3, [pc, #256]	; (80123b4 <HAL_SD_MspInit+0x190>)
 80122b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122b4:	4a3f      	ldr	r2, [pc, #252]	; (80123b4 <HAL_SD_MspInit+0x190>)
 80122b6:	f043 0308 	orr.w	r3, r3, #8
 80122ba:	6313      	str	r3, [r2, #48]	; 0x30
 80122bc:	4b3d      	ldr	r3, [pc, #244]	; (80123b4 <HAL_SD_MspInit+0x190>)
 80122be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122c0:	f003 0308 	and.w	r3, r3, #8
 80122c4:	60fb      	str	r3, [r7, #12]
 80122c6:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80122c8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80122cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ce:	2302      	movs	r3, #2
 80122d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122d2:	2300      	movs	r3, #0
 80122d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122d6:	2303      	movs	r3, #3
 80122d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80122da:	230c      	movs	r3, #12
 80122dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80122de:	f107 031c 	add.w	r3, r7, #28
 80122e2:	4619      	mov	r1, r3
 80122e4:	4835      	ldr	r0, [pc, #212]	; (80123bc <HAL_SD_MspInit+0x198>)
 80122e6:	f7ef fbbf 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80122ea:	2304      	movs	r3, #4
 80122ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ee:	2302      	movs	r3, #2
 80122f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122f2:	2300      	movs	r3, #0
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122f6:	2303      	movs	r3, #3
 80122f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80122fa:	230c      	movs	r3, #12
 80122fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80122fe:	f107 031c 	add.w	r3, r7, #28
 8012302:	4619      	mov	r1, r3
 8012304:	482e      	ldr	r0, [pc, #184]	; (80123c0 <HAL_SD_MspInit+0x19c>)
 8012306:	f7ef fbaf 	bl	8001a68 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 801230a:	2200      	movs	r2, #0
 801230c:	2105      	movs	r1, #5
 801230e:	203b      	movs	r0, #59	; 0x3b
 8012310:	f7ee ffe2 	bl	80012d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8012314:	203b      	movs	r0, #59	; 0x3b
 8012316:	f7ee fffb 	bl	8001310 <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 801231a:	4b2a      	ldr	r3, [pc, #168]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 801231c:	4a2a      	ldr	r2, [pc, #168]	; (80123c8 <HAL_SD_MspInit+0x1a4>)
 801231e:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8012320:	4b28      	ldr	r3, [pc, #160]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012326:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012328:	4b26      	ldr	r3, [pc, #152]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 801232a:	2200      	movs	r2, #0
 801232c:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 801232e:	4b25      	ldr	r3, [pc, #148]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012330:	2200      	movs	r2, #0
 8012332:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8012334:	4b23      	ldr	r3, [pc, #140]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801233a:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801233c:	4b21      	ldr	r3, [pc, #132]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 801233e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012342:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8012344:	4b1f      	ldr	r3, [pc, #124]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801234a:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 801234c:	4b1d      	ldr	r3, [pc, #116]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 801234e:	2220      	movs	r2, #32
 8012350:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 8012352:	4b1c      	ldr	r3, [pc, #112]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012354:	2200      	movs	r2, #0
 8012356:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8012358:	4b1a      	ldr	r3, [pc, #104]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 801235a:	2204      	movs	r2, #4
 801235c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801235e:	4b19      	ldr	r3, [pc, #100]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012360:	2203      	movs	r2, #3
 8012362:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 8012364:	4b17      	ldr	r3, [pc, #92]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012366:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801236a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 801236c:	4b15      	ldr	r3, [pc, #84]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 801236e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012372:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8012374:	4813      	ldr	r0, [pc, #76]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012376:	f7ee ffd9 	bl	800132c <HAL_DMA_Init>
 801237a:	4603      	mov	r3, r0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d001      	beq.n	8012384 <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 8012380:	f002 fa1a 	bl	80147b8 <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	4a0f      	ldr	r2, [pc, #60]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012388:	641a      	str	r2, [r3, #64]	; 0x40
 801238a:	4a0e      	ldr	r2, [pc, #56]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	4a0c      	ldr	r2, [pc, #48]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012394:	63da      	str	r2, [r3, #60]	; 0x3c
 8012396:	4a0b      	ldr	r2, [pc, #44]	; (80123c4 <HAL_SD_MspInit+0x1a0>)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 801239c:	2200      	movs	r2, #0
 801239e:	2105      	movs	r1, #5
 80123a0:	2031      	movs	r0, #49	; 0x31
 80123a2:	f7ee ff99 	bl	80012d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80123a6:	2031      	movs	r0, #49	; 0x31
 80123a8:	f7ee ffb2 	bl	8001310 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80123ac:	bf00      	nop
 80123ae:	3730      	adds	r7, #48	; 0x30
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	40023800 	.word	0x40023800
 80123b8:	40012c00 	.word	0x40012c00
 80123bc:	40020800 	.word	0x40020800
 80123c0:	40020c00 	.word	0x40020c00
 80123c4:	20005a18 	.word	0x20005a18
 80123c8:	40026458 	.word	0x40026458

080123cc <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 80123d0:	4802      	ldr	r0, [pc, #8]	; (80123dc <DMA2_Stream3_IRQHandler+0x10>)
 80123d2:	f7ef f8d3 	bl	800157c <HAL_DMA_IRQHandler>
}
 80123d6:	bf00      	nop
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	20005a18 	.word	0x20005a18

080123e0 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 80123e4:	4802      	ldr	r0, [pc, #8]	; (80123f0 <SDIO_IRQHandler+0x10>)
 80123e6:	f7ef ffb5 	bl	8002354 <HAL_SD_IRQHandler>
}
 80123ea:	bf00      	nop
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	20005994 	.word	0x20005994

080123f4 <__NVIC_GetPriorityGrouping>:
{
 80123f4:	b480      	push	{r7}
 80123f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80123f8:	4b04      	ldr	r3, [pc, #16]	; (801240c <__NVIC_GetPriorityGrouping+0x18>)
 80123fa:	68db      	ldr	r3, [r3, #12]
 80123fc:	0a1b      	lsrs	r3, r3, #8
 80123fe:	f003 0307 	and.w	r3, r3, #7
}
 8012402:	4618      	mov	r0, r3
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr
 801240c:	e000ed00 	.word	0xe000ed00

08012410 <__NVIC_EnableIRQ>:
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	4603      	mov	r3, r0
 8012418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801241e:	2b00      	cmp	r3, #0
 8012420:	db0b      	blt.n	801243a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012422:	79fb      	ldrb	r3, [r7, #7]
 8012424:	f003 021f 	and.w	r2, r3, #31
 8012428:	4907      	ldr	r1, [pc, #28]	; (8012448 <__NVIC_EnableIRQ+0x38>)
 801242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801242e:	095b      	lsrs	r3, r3, #5
 8012430:	2001      	movs	r0, #1
 8012432:	fa00 f202 	lsl.w	r2, r0, r2
 8012436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801243a:	bf00      	nop
 801243c:	370c      	adds	r7, #12
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	e000e100 	.word	0xe000e100

0801244c <__NVIC_SetPriority>:
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
 8012452:	4603      	mov	r3, r0
 8012454:	6039      	str	r1, [r7, #0]
 8012456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801245c:	2b00      	cmp	r3, #0
 801245e:	db0a      	blt.n	8012476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	b2da      	uxtb	r2, r3
 8012464:	490c      	ldr	r1, [pc, #48]	; (8012498 <__NVIC_SetPriority+0x4c>)
 8012466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801246a:	0112      	lsls	r2, r2, #4
 801246c:	b2d2      	uxtb	r2, r2
 801246e:	440b      	add	r3, r1
 8012470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012474:	e00a      	b.n	801248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	b2da      	uxtb	r2, r3
 801247a:	4908      	ldr	r1, [pc, #32]	; (801249c <__NVIC_SetPriority+0x50>)
 801247c:	79fb      	ldrb	r3, [r7, #7]
 801247e:	f003 030f 	and.w	r3, r3, #15
 8012482:	3b04      	subs	r3, #4
 8012484:	0112      	lsls	r2, r2, #4
 8012486:	b2d2      	uxtb	r2, r2
 8012488:	440b      	add	r3, r1
 801248a:	761a      	strb	r2, [r3, #24]
}
 801248c:	bf00      	nop
 801248e:	370c      	adds	r7, #12
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr
 8012498:	e000e100 	.word	0xe000e100
 801249c:	e000ed00 	.word	0xe000ed00

080124a0 <NVIC_EncodePriority>:
{
 80124a0:	b480      	push	{r7}
 80124a2:	b089      	sub	sp, #36	; 0x24
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	60f8      	str	r0, [r7, #12]
 80124a8:	60b9      	str	r1, [r7, #8]
 80124aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	f003 0307 	and.w	r3, r3, #7
 80124b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	f1c3 0307 	rsb	r3, r3, #7
 80124ba:	2b04      	cmp	r3, #4
 80124bc:	bf28      	it	cs
 80124be:	2304      	movcs	r3, #4
 80124c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	3304      	adds	r3, #4
 80124c6:	2b06      	cmp	r3, #6
 80124c8:	d902      	bls.n	80124d0 <NVIC_EncodePriority+0x30>
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	3b03      	subs	r3, #3
 80124ce:	e000      	b.n	80124d2 <NVIC_EncodePriority+0x32>
 80124d0:	2300      	movs	r3, #0
 80124d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80124d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124d8:	69bb      	ldr	r3, [r7, #24]
 80124da:	fa02 f303 	lsl.w	r3, r2, r3
 80124de:	43da      	mvns	r2, r3
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	401a      	ands	r2, r3
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80124e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	fa01 f303 	lsl.w	r3, r1, r3
 80124f2:	43d9      	mvns	r1, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80124f8:	4313      	orrs	r3, r2
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3724      	adds	r7, #36	; 0x24
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <LL_SPI_Enable>:
{
 8012506:	b480      	push	{r7}
 8012508:	b083      	sub	sp, #12
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	601a      	str	r2, [r3, #0]
}
 801251a:	bf00      	nop
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr

08012526 <LL_SPI_SetStandard>:
{
 8012526:	b480      	push	{r7}
 8012528:	b083      	sub	sp, #12
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	f023 0210 	bic.w	r2, r3, #16
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	431a      	orrs	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	605a      	str	r2, [r3, #4]
}
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	f003 0301 	and.w	r3, r3, #1
 801255c:	2b01      	cmp	r3, #1
 801255e:	d101      	bne.n	8012564 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8012560:	2301      	movs	r3, #1
 8012562:	e000      	b.n	8012566 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8012564:	2300      	movs	r3, #0
}
 8012566:	4618      	mov	r0, r3
 8012568:	370c      	adds	r7, #12
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr

08012572 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8012572:	b480      	push	{r7}
 8012574:	b083      	sub	sp, #12
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	f003 0302 	and.w	r3, r3, #2
 8012582:	2b02      	cmp	r3, #2
 8012584:	d101      	bne.n	801258a <LL_SPI_IsActiveFlag_TXE+0x18>
 8012586:	2301      	movs	r3, #1
 8012588:	e000      	b.n	801258c <LL_SPI_IsActiveFlag_TXE+0x1a>
 801258a:	2300      	movs	r3, #0
}
 801258c:	4618      	mov	r0, r3
 801258e:	370c      	adds	r7, #12
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr

08012598 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	689b      	ldr	r3, [r3, #8]
 80125a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125a8:	2b80      	cmp	r3, #128	; 0x80
 80125aa:	d101      	bne.n	80125b0 <LL_SPI_IsActiveFlag_BSY+0x18>
 80125ac:	2301      	movs	r3, #1
 80125ae:	e000      	b.n	80125b2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80125b0:	2300      	movs	r3, #0
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80125be:	b480      	push	{r7}
 80125c0:	b083      	sub	sp, #12
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	330c      	adds	r3, #12
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	b2db      	uxtb	r3, r3
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr

080125da <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80125da:	b480      	push	{r7}
 80125dc:	b085      	sub	sp, #20
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	460b      	mov	r3, r1
 80125e4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	330c      	adds	r3, #12
 80125ea:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	78fa      	ldrb	r2, [r7, #3]
 80125f0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80125f2:	bf00      	nop
 80125f4:	3714      	adds	r7, #20
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
	...

08012600 <LL_DMA_SetDataTransferDirection>:
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 801260c:	4a0d      	ldr	r2, [pc, #52]	; (8012644 <LL_DMA_SetDataTransferDirection+0x44>)
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	4413      	add	r3, r2
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	461a      	mov	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	4413      	add	r3, r2
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012620:	4908      	ldr	r1, [pc, #32]	; (8012644 <LL_DMA_SetDataTransferDirection+0x44>)
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	440b      	add	r3, r1
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	4619      	mov	r1, r3
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	440b      	add	r3, r1
 801262e:	4619      	mov	r1, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	4313      	orrs	r3, r2
 8012634:	600b      	str	r3, [r1, #0]
}
 8012636:	bf00      	nop
 8012638:	3714      	adds	r7, #20
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	08016470 	.word	0x08016470

08012648 <LL_DMA_SetMode>:
{
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8012654:	4a0d      	ldr	r2, [pc, #52]	; (801268c <LL_DMA_SetMode+0x44>)
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	4413      	add	r3, r2
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	461a      	mov	r2, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	4413      	add	r3, r2
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8012668:	4908      	ldr	r1, [pc, #32]	; (801268c <LL_DMA_SetMode+0x44>)
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	440b      	add	r3, r1
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	4619      	mov	r1, r3
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	440b      	add	r3, r1
 8012676:	4619      	mov	r1, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4313      	orrs	r3, r2
 801267c:	600b      	str	r3, [r1, #0]
}
 801267e:	bf00      	nop
 8012680:	3714      	adds	r7, #20
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	08016470 	.word	0x08016470

08012690 <LL_DMA_SetPeriphIncMode>:
{
 8012690:	b480      	push	{r7}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 801269c:	4a0d      	ldr	r2, [pc, #52]	; (80126d4 <LL_DMA_SetPeriphIncMode+0x44>)
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	4413      	add	r3, r2
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	461a      	mov	r2, r3
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	4413      	add	r3, r2
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80126b0:	4908      	ldr	r1, [pc, #32]	; (80126d4 <LL_DMA_SetPeriphIncMode+0x44>)
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	440b      	add	r3, r1
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	4619      	mov	r1, r3
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	440b      	add	r3, r1
 80126be:	4619      	mov	r1, r3
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4313      	orrs	r3, r2
 80126c4:	600b      	str	r3, [r1, #0]
}
 80126c6:	bf00      	nop
 80126c8:	3714      	adds	r7, #20
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	08016470 	.word	0x08016470

080126d8 <LL_DMA_SetMemoryIncMode>:
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80126e4:	4a0d      	ldr	r2, [pc, #52]	; (801271c <LL_DMA_SetMemoryIncMode+0x44>)
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	4413      	add	r3, r2
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	461a      	mov	r2, r3
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	4413      	add	r3, r2
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80126f8:	4908      	ldr	r1, [pc, #32]	; (801271c <LL_DMA_SetMemoryIncMode+0x44>)
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	440b      	add	r3, r1
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	4619      	mov	r1, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	440b      	add	r3, r1
 8012706:	4619      	mov	r1, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	4313      	orrs	r3, r2
 801270c:	600b      	str	r3, [r1, #0]
}
 801270e:	bf00      	nop
 8012710:	3714      	adds	r7, #20
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	08016470 	.word	0x08016470

08012720 <LL_DMA_SetPeriphSize>:
{
 8012720:	b480      	push	{r7}
 8012722:	b085      	sub	sp, #20
 8012724:	af00      	add	r7, sp, #0
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 801272c:	4a0d      	ldr	r2, [pc, #52]	; (8012764 <LL_DMA_SetPeriphSize+0x44>)
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	4413      	add	r3, r2
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	461a      	mov	r2, r3
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	4413      	add	r3, r2
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012740:	4908      	ldr	r1, [pc, #32]	; (8012764 <LL_DMA_SetPeriphSize+0x44>)
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	440b      	add	r3, r1
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	4619      	mov	r1, r3
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	440b      	add	r3, r1
 801274e:	4619      	mov	r1, r3
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4313      	orrs	r3, r2
 8012754:	600b      	str	r3, [r1, #0]
}
 8012756:	bf00      	nop
 8012758:	3714      	adds	r7, #20
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
 8012764:	08016470 	.word	0x08016470

08012768 <LL_DMA_SetMemorySize>:
{
 8012768:	b480      	push	{r7}
 801276a:	b085      	sub	sp, #20
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8012774:	4a0d      	ldr	r2, [pc, #52]	; (80127ac <LL_DMA_SetMemorySize+0x44>)
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	4413      	add	r3, r2
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	461a      	mov	r2, r3
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	4413      	add	r3, r2
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8012788:	4908      	ldr	r1, [pc, #32]	; (80127ac <LL_DMA_SetMemorySize+0x44>)
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	440b      	add	r3, r1
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	4619      	mov	r1, r3
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	440b      	add	r3, r1
 8012796:	4619      	mov	r1, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4313      	orrs	r3, r2
 801279c:	600b      	str	r3, [r1, #0]
}
 801279e:	bf00      	nop
 80127a0:	3714      	adds	r7, #20
 80127a2:	46bd      	mov	sp, r7
 80127a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a8:	4770      	bx	lr
 80127aa:	bf00      	nop
 80127ac:	08016470 	.word	0x08016470

080127b0 <LL_DMA_SetStreamPriorityLevel>:
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80127bc:	4a0d      	ldr	r2, [pc, #52]	; (80127f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	4413      	add	r3, r2
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	461a      	mov	r2, r3
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	4413      	add	r3, r2
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80127d0:	4908      	ldr	r1, [pc, #32]	; (80127f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	440b      	add	r3, r1
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	4619      	mov	r1, r3
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	440b      	add	r3, r1
 80127de:	4619      	mov	r1, r3
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	4313      	orrs	r3, r2
 80127e4:	600b      	str	r3, [r1, #0]
}
 80127e6:	bf00      	nop
 80127e8:	3714      	adds	r7, #20
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	08016470 	.word	0x08016470

080127f8 <LL_DMA_SetChannelSelection>:
{
 80127f8:	b480      	push	{r7}
 80127fa:	b085      	sub	sp, #20
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8012804:	4a0d      	ldr	r2, [pc, #52]	; (801283c <LL_DMA_SetChannelSelection+0x44>)
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	4413      	add	r3, r2
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	461a      	mov	r2, r3
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	4413      	add	r3, r2
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8012818:	4908      	ldr	r1, [pc, #32]	; (801283c <LL_DMA_SetChannelSelection+0x44>)
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	440b      	add	r3, r1
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	4619      	mov	r1, r3
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	440b      	add	r3, r1
 8012826:	4619      	mov	r1, r3
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	4313      	orrs	r3, r2
 801282c:	600b      	str	r3, [r1, #0]
}
 801282e:	bf00      	nop
 8012830:	3714      	adds	r7, #20
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop
 801283c:	08016470 	.word	0x08016470

08012840 <LL_DMA_DisableFifoMode>:
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 801284a:	4a0c      	ldr	r2, [pc, #48]	; (801287c <LL_DMA_DisableFifoMode+0x3c>)
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	4413      	add	r3, r2
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	461a      	mov	r2, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	4413      	add	r3, r2
 8012858:	695b      	ldr	r3, [r3, #20]
 801285a:	4908      	ldr	r1, [pc, #32]	; (801287c <LL_DMA_DisableFifoMode+0x3c>)
 801285c:	683a      	ldr	r2, [r7, #0]
 801285e:	440a      	add	r2, r1
 8012860:	7812      	ldrb	r2, [r2, #0]
 8012862:	4611      	mov	r1, r2
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	440a      	add	r2, r1
 8012868:	f023 0304 	bic.w	r3, r3, #4
 801286c:	6153      	str	r3, [r2, #20]
}
 801286e:	bf00      	nop
 8012870:	370c      	adds	r7, #12
 8012872:	46bd      	mov	sp, r7
 8012874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012878:	4770      	bx	lr
 801287a:	bf00      	nop
 801287c:	08016470 	.word	0x08016470

08012880 <LL_APB2_GRP1_EnableClock>:
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8012888:	4b08      	ldr	r3, [pc, #32]	; (80128ac <LL_APB2_GRP1_EnableClock+0x2c>)
 801288a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801288c:	4907      	ldr	r1, [pc, #28]	; (80128ac <LL_APB2_GRP1_EnableClock+0x2c>)
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4313      	orrs	r3, r2
 8012892:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8012894:	4b05      	ldr	r3, [pc, #20]	; (80128ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8012896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4013      	ands	r3, r2
 801289c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801289e:	68fb      	ldr	r3, [r7, #12]
}
 80128a0:	bf00      	nop
 80128a2:	3714      	adds	r7, #20
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	40023800 	.word	0x40023800

080128b0 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	4603      	mov	r3, r0
 80128b8:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 80128ba:	f7f6 fe6d 	bl	8009598 <vPortEnterCritical>

	switch(spi_id) {
 80128be:	79fb      	ldrb	r3, [r7, #7]
 80128c0:	2b05      	cmp	r3, #5
 80128c2:	d014      	beq.n	80128ee <spi_init+0x3e>
 80128c4:	2b05      	cmp	r3, #5
 80128c6:	dc19      	bgt.n	80128fc <spi_init+0x4c>
 80128c8:	2b02      	cmp	r3, #2
 80128ca:	d002      	beq.n	80128d2 <spi_init+0x22>
 80128cc:	2b04      	cmp	r3, #4
 80128ce:	d007      	beq.n	80128e0 <spi_init+0x30>
 80128d0:	e014      	b.n	80128fc <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 80128d2:	480f      	ldr	r0, [pc, #60]	; (8012910 <spi_init+0x60>)
 80128d4:	f000 f900 	bl	8012ad8 <spi2_init>
		hal_cli_printf("spi2 init");
 80128d8:	480e      	ldr	r0, [pc, #56]	; (8012914 <spi_init+0x64>)
 80128da:	f7fd fa61 	bl	800fda0 <hal_cli_printf>
		break;
 80128de:	e011      	b.n	8012904 <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 80128e0:	480d      	ldr	r0, [pc, #52]	; (8012918 <spi_init+0x68>)
 80128e2:	f000 f921 	bl	8012b28 <spi4_init>
		hal_cli_printf("spi4 init");
 80128e6:	480d      	ldr	r0, [pc, #52]	; (801291c <spi_init+0x6c>)
 80128e8:	f7fd fa5a 	bl	800fda0 <hal_cli_printf>
		break;
 80128ec:	e00a      	b.n	8012904 <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 80128ee:	480c      	ldr	r0, [pc, #48]	; (8012920 <spi_init+0x70>)
 80128f0:	f000 f942 	bl	8012b78 <spi5_init>
		hal_cli_printf("spi5 init");
 80128f4:	480b      	ldr	r0, [pc, #44]	; (8012924 <spi_init+0x74>)
 80128f6:	f7fd fa53 	bl	800fda0 <hal_cli_printf>
		break;
 80128fa:	e003      	b.n	8012904 <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 80128fc:	480a      	ldr	r0, [pc, #40]	; (8012928 <spi_init+0x78>)
 80128fe:	f7fd fa4f 	bl	800fda0 <hal_cli_printf>
		break;
 8012902:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 8012904:	f7f6 fe78 	bl	80095f8 <vPortExitCritical>
}
 8012908:	bf00      	nop
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	20005a78 	.word	0x20005a78
 8012914:	080155b8 	.word	0x080155b8
 8012918:	20005a8c 	.word	0x20005a8c
 801291c:	080155c4 	.word	0x080155c4
 8012920:	20005aa0 	.word	0x20005aa0
 8012924:	080155d0 	.word	0x080155d0
 8012928:	080155dc 	.word	0x080155dc

0801292c <hal_spi_transfer>:

bool hal_spi_transfer(spidrv_t* drv, uint8_t* data, uint32_t size, uint32_t timeout)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b088      	sub	sp, #32
 8012930:	af00      	add	r7, sp, #0
 8012932:	6178      	str	r0, [r7, #20]
 8012934:	6139      	str	r1, [r7, #16]
 8012936:	60fa      	str	r2, [r7, #12]
 8012938:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 801293a:	463b      	mov	r3, r7
 801293c:	68b9      	ldr	r1, [r7, #8]
 801293e:	4618      	mov	r0, r3
 8012940:	f7fd fd10 	bl	8010364 <hal_get_delay_timer>
 8012944:	f107 0318 	add.w	r3, r7, #24
 8012948:	463a      	mov	r2, r7
 801294a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801294e:	e883 0003 	stmia.w	r3, {r0, r1}

	while(size > 0) {
 8012952:	e023      	b.n	801299c <hal_spi_transfer+0x70>
		LL_SPI_TransmitData8(drv->spi, *data);
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	4619      	mov	r1, r3
 801295e:	4610      	mov	r0, r2
 8012960:	f7ff fe3b 	bl	80125da <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8012964:	e00c      	b.n	8012980 <hal_spi_transfer+0x54>
			if(hal_delay_timer_is_expired(&timer)) {
 8012966:	f107 0318 	add.w	r3, r7, #24
 801296a:	4618      	mov	r0, r3
 801296c:	f7fd fd20 	bl	80103b0 <hal_delay_timer_is_expired>
 8012970:	4603      	mov	r3, r0
 8012972:	2b00      	cmp	r3, #0
 8012974:	d004      	beq.n	8012980 <hal_spi_transfer+0x54>
				hal_cli_printf("spi txe flag failed");
 8012976:	4818      	ldr	r0, [pc, #96]	; (80129d8 <hal_spi_transfer+0xac>)
 8012978:	f7fd fa12 	bl	800fda0 <hal_cli_printf>
				return false;
 801297c:	2300      	movs	r3, #0
 801297e:	e027      	b.n	80129d0 <hal_spi_transfer+0xa4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4618      	mov	r0, r3
 8012986:	f7ff fdf4 	bl	8012572 <LL_SPI_IsActiveFlag_TXE>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	d0ea      	beq.n	8012966 <hal_spi_transfer+0x3a>
			}
		}
		size--;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	3b01      	subs	r3, #1
 8012994:	60fb      	str	r3, [r7, #12]
		data++;
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	3301      	adds	r3, #1
 801299a:	613b      	str	r3, [r7, #16]
	while(size > 0) {
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d1d8      	bne.n	8012954 <hal_spi_transfer+0x28>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 80129a2:	e00c      	b.n	80129be <hal_spi_transfer+0x92>
		if(hal_delay_timer_is_expired(&timer)) {
 80129a4:	f107 0318 	add.w	r3, r7, #24
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7fd fd01 	bl	80103b0 <hal_delay_timer_is_expired>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d004      	beq.n	80129be <hal_spi_transfer+0x92>
			hal_cli_printf("spi busy flag failed");
 80129b4:	4809      	ldr	r0, [pc, #36]	; (80129dc <hal_spi_transfer+0xb0>)
 80129b6:	f7fd f9f3 	bl	800fda0 <hal_cli_printf>
			return false;
 80129ba:	2300      	movs	r3, #0
 80129bc:	e008      	b.n	80129d0 <hal_spi_transfer+0xa4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7ff fde8 	bl	8012598 <LL_SPI_IsActiveFlag_BSY>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d1ea      	bne.n	80129a4 <hal_spi_transfer+0x78>
		}
	}

	return true;
 80129ce:	2301      	movs	r3, #1
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3720      	adds	r7, #32
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	080155f0 	.word	0x080155f0
 80129dc:	08015604 	.word	0x08015604

080129e0 <hal_spi_txrx>:

	return true;
}

bool hal_spi_txrx(spidrv_t* drv, uint8_t* tx, uint8_t* rx, uint32_t size, uint32_t timeout)
{
 80129e0:	b590      	push	{r4, r7, lr}
 80129e2:	b08b      	sub	sp, #44	; 0x2c
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6178      	str	r0, [r7, #20]
 80129e8:	6139      	str	r1, [r7, #16]
 80129ea:	60fa      	str	r2, [r7, #12]
 80129ec:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 80129ee:	463b      	mov	r3, r7
 80129f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fd fcb6 	bl	8010364 <hal_get_delay_timer>
 80129f8:	f107 031c 	add.w	r3, r7, #28
 80129fc:	463a      	mov	r2, r7
 80129fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a02:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int i = 0; i < size; i++) {
 8012a06:	2300      	movs	r3, #0
 8012a08:	627b      	str	r3, [r7, #36]	; 0x24
 8012a0a:	e040      	b.n	8012a8e <hal_spi_txrx+0xae>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8012a0c:	f107 031c 	add.w	r3, r7, #28
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fd fccd 	bl	80103b0 <hal_delay_timer_is_expired>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d004      	beq.n	8012a26 <hal_spi_txrx+0x46>
				hal_cli_printf("spi txe flag failed");
 8012a1c:	482b      	ldr	r0, [pc, #172]	; (8012acc <hal_spi_txrx+0xec>)
 8012a1e:	f7fd f9bf 	bl	800fda0 <hal_cli_printf>
				return false;
 8012a22:	2300      	movs	r3, #0
 8012a24:	e04e      	b.n	8012ac4 <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7ff fda1 	bl	8012572 <LL_SPI_IsActiveFlag_TXE>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d0ea      	beq.n	8012a0c <hal_spi_txrx+0x2c>
			}
		}
		LL_SPI_TransmitData8(drv->spi, tx[i]);
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	6818      	ldr	r0, [r3, #0]
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3c:	693a      	ldr	r2, [r7, #16]
 8012a3e:	4413      	add	r3, r2
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	4619      	mov	r1, r3
 8012a44:	f7ff fdc9 	bl	80125da <LL_SPI_TransmitData8>

		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 8012a48:	e00c      	b.n	8012a64 <hal_spi_txrx+0x84>
			if(hal_delay_timer_is_expired(&timer)) {
 8012a4a:	f107 031c 	add.w	r3, r7, #28
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7fd fcae 	bl	80103b0 <hal_delay_timer_is_expired>
 8012a54:	4603      	mov	r3, r0
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d004      	beq.n	8012a64 <hal_spi_txrx+0x84>
				hal_cli_printf("spi rxne flag failed");
 8012a5a:	481d      	ldr	r0, [pc, #116]	; (8012ad0 <hal_spi_txrx+0xf0>)
 8012a5c:	f7fd f9a0 	bl	800fda0 <hal_cli_printf>
				return false;
 8012a60:	2300      	movs	r3, #0
 8012a62:	e02f      	b.n	8012ac4 <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7ff fd6f 	bl	801254c <LL_SPI_IsActiveFlag_RXNE>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d0ea      	beq.n	8012a4a <hal_spi_txrx+0x6a>
			}
		}
		rx[i] = LL_SPI_ReceiveData8(drv->spi);
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	6819      	ldr	r1, [r3, #0]
 8012a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	18d4      	adds	r4, r2, r3
 8012a7e:	4608      	mov	r0, r1
 8012a80:	f7ff fd9d 	bl	80125be <LL_SPI_ReceiveData8>
 8012a84:	4603      	mov	r3, r0
 8012a86:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < size; i++) {
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8012a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a90:	68ba      	ldr	r2, [r7, #8]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d8c7      	bhi.n	8012a26 <hal_spi_txrx+0x46>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8012a96:	e00c      	b.n	8012ab2 <hal_spi_txrx+0xd2>
		if(hal_delay_timer_is_expired(&timer)) {
 8012a98:	f107 031c 	add.w	r3, r7, #28
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7fd fc87 	bl	80103b0 <hal_delay_timer_is_expired>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d004      	beq.n	8012ab2 <hal_spi_txrx+0xd2>
			hal_cli_printf("spi busy flag failed");
 8012aa8:	480a      	ldr	r0, [pc, #40]	; (8012ad4 <hal_spi_txrx+0xf4>)
 8012aaa:	f7fd f979 	bl	800fda0 <hal_cli_printf>
			return false;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	e008      	b.n	8012ac4 <hal_spi_txrx+0xe4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7ff fd6e 	bl	8012598 <LL_SPI_IsActiveFlag_BSY>
 8012abc:	4603      	mov	r3, r0
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d1ea      	bne.n	8012a98 <hal_spi_txrx+0xb8>
		}
	}
	return true;
 8012ac2:	2301      	movs	r3, #1
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	372c      	adds	r7, #44	; 0x2c
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd90      	pop	{r4, r7, pc}
 8012acc:	080155f0 	.word	0x080155f0
 8012ad0:	0801561c 	.word	0x0801561c
 8012ad4:	08015604 	.word	0x08015604

08012ad8 <spi2_init>:


static void spi2_init(spidrv_t* drv)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 8012ae0:	f000 f872 	bl	8012bc8 <spi2_pin_conf>
	spi2_dma_init();
 8012ae4:	f000 f88a 	bl	8012bfc <spi2_dma_init>
	spi2_config();
 8012ae8:	f000 f8cc 	bl	8012c84 <spi2_config>

	LL_SPI_Enable(SPI2);
 8012aec:	480c      	ldr	r0, [pc, #48]	; (8012b20 <spi2_init+0x48>)
 8012aee:	f7ff fd0a 	bl	8012506 <LL_SPI_Enable>

	drv->spi = SPI2;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4a0a      	ldr	r2, [pc, #40]	; (8012b20 <spi2_init+0x48>)
 8012af6:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4a0a      	ldr	r2, [pc, #40]	; (8012b24 <spi2_init+0x4c>)
 8012afc:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2204      	movs	r2, #4
 8012b02:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2200      	movs	r2, #0
 8012b08:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8012b0a:	2001      	movs	r0, #1
 8012b0c:	f7f7 f83a 	bl	8009b84 <xQueueCreateMutex>
 8012b10:	4602      	mov	r2, r0
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	605a      	str	r2, [r3, #4]
}
 8012b16:	bf00      	nop
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	40003800 	.word	0x40003800
 8012b24:	40026000 	.word	0x40026000

08012b28 <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 8012b30:	f000 f8e6 	bl	8012d00 <spi4_pin_conf>
	spi4_dma_init();
 8012b34:	f000 f908 	bl	8012d48 <spi4_dma_init>
	spi4_config();
 8012b38:	f000 f988 	bl	8012e4c <spi4_config>

	LL_SPI_Enable(SPI4);
 8012b3c:	480c      	ldr	r0, [pc, #48]	; (8012b70 <spi4_init+0x48>)
 8012b3e:	f7ff fce2 	bl	8012506 <LL_SPI_Enable>

	drv->spi = SPI4;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	4a0a      	ldr	r2, [pc, #40]	; (8012b70 <spi4_init+0x48>)
 8012b46:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4a0a      	ldr	r2, [pc, #40]	; (8012b74 <spi4_init+0x4c>)
 8012b4c:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2201      	movs	r2, #1
 8012b52:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2200      	movs	r2, #0
 8012b58:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8012b5a:	2001      	movs	r0, #1
 8012b5c:	f7f7 f812 	bl	8009b84 <xQueueCreateMutex>
 8012b60:	4602      	mov	r2, r0
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	605a      	str	r2, [r3, #4]
}
 8012b66:	bf00      	nop
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	40013400 	.word	0x40013400
 8012b74:	40026400 	.word	0x40026400

08012b78 <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 8012b80:	f000 f9a2 	bl	8012ec8 <spi5_pin_conf>
	spi5_dma_init();
 8012b84:	f000 f9c4 	bl	8012f10 <spi5_dma_init>
	spi5_config();
 8012b88:	f000 fa06 	bl	8012f98 <spi5_config>

	LL_SPI_Enable(SPI5);
 8012b8c:	480c      	ldr	r0, [pc, #48]	; (8012bc0 <spi5_init+0x48>)
 8012b8e:	f7ff fcba 	bl	8012506 <LL_SPI_Enable>

	drv->spi = SPI5;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4a0a      	ldr	r2, [pc, #40]	; (8012bc0 <spi5_init+0x48>)
 8012b96:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	4a0a      	ldr	r2, [pc, #40]	; (8012bc4 <spi5_init+0x4c>)
 8012b9c:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2204      	movs	r2, #4
 8012ba2:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8012baa:	2001      	movs	r0, #1
 8012bac:	f7f6 ffea 	bl	8009b84 <xQueueCreateMutex>
 8012bb0:	4602      	mov	r2, r0
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	605a      	str	r2, [r3, #4]
}
 8012bb6:	bf00      	nop
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	40015000 	.word	0x40015000
 8012bc4:	40026400 	.word	0x40026400

08012bc8 <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8012bce:	2305      	movs	r3, #5
 8012bd0:	9300      	str	r3, [sp, #0]
 8012bd2:	2303      	movs	r3, #3
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	2103      	movs	r1, #3
 8012bd8:	4806      	ldr	r0, [pc, #24]	; (8012bf4 <spi2_pin_conf+0x2c>)
 8012bda:	f7fd fe51 	bl	8010880 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8012bde:	2305      	movs	r3, #5
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	2303      	movs	r3, #3
 8012be4:	2200      	movs	r2, #0
 8012be6:	2103      	movs	r1, #3
 8012be8:	4803      	ldr	r0, [pc, #12]	; (8012bf8 <spi2_pin_conf+0x30>)
 8012bea:	f7fd fe49 	bl	8010880 <hal_gpio_init_alt>
		&gpio_spi2_mosi,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8012bee:	bf00      	nop
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	080163e8 	.word	0x080163e8
 8012bf8:	080163f0 	.word	0x080163f0

08012bfc <spi2_dma_init>:

static void spi2_dma_init(void)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012c00:	f7ff fbf8 	bl	80123f4 <__NVIC_GetPriorityGrouping>
 8012c04:	4603      	mov	r3, r0
 8012c06:	2200      	movs	r2, #0
 8012c08:	2105      	movs	r1, #5
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7ff fc48 	bl	80124a0 <NVIC_EncodePriority>
 8012c10:	4603      	mov	r3, r0
 8012c12:	4619      	mov	r1, r3
 8012c14:	200f      	movs	r0, #15
 8012c16:	f7ff fc19 	bl	801244c <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8012c1a:	200f      	movs	r0, #15
 8012c1c:	f7ff fbf8 	bl	8012410 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, DMA_SPI2_TX_STREAM, DMA_SPI2_TX_CHANNEL);
 8012c20:	2200      	movs	r2, #0
 8012c22:	2104      	movs	r1, #4
 8012c24:	4816      	ldr	r0, [pc, #88]	; (8012c80 <spi2_dma_init+0x84>)
 8012c26:	f7ff fde7 	bl	80127f8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8012c2a:	2240      	movs	r2, #64	; 0x40
 8012c2c:	2104      	movs	r1, #4
 8012c2e:	4814      	ldr	r0, [pc, #80]	; (8012c80 <spi2_dma_init+0x84>)
 8012c30:	f7ff fce6 	bl	8012600 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8012c34:	2200      	movs	r2, #0
 8012c36:	2104      	movs	r1, #4
 8012c38:	4811      	ldr	r0, [pc, #68]	; (8012c80 <spi2_dma_init+0x84>)
 8012c3a:	f7ff fdb9 	bl	80127b0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MODE_NORMAL);
 8012c3e:	2200      	movs	r2, #0
 8012c40:	2104      	movs	r1, #4
 8012c42:	480f      	ldr	r0, [pc, #60]	; (8012c80 <spi2_dma_init+0x84>)
 8012c44:	f7ff fd00 	bl	8012648 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012c48:	2200      	movs	r2, #0
 8012c4a:	2104      	movs	r1, #4
 8012c4c:	480c      	ldr	r0, [pc, #48]	; (8012c80 <spi2_dma_init+0x84>)
 8012c4e:	f7ff fd1f 	bl	8012690 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012c56:	2104      	movs	r1, #4
 8012c58:	4809      	ldr	r0, [pc, #36]	; (8012c80 <spi2_dma_init+0x84>)
 8012c5a:	f7ff fd3d 	bl	80126d8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012c5e:	2200      	movs	r2, #0
 8012c60:	2104      	movs	r1, #4
 8012c62:	4807      	ldr	r0, [pc, #28]	; (8012c80 <spi2_dma_init+0x84>)
 8012c64:	f7ff fd5c 	bl	8012720 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012c68:	2200      	movs	r2, #0
 8012c6a:	2104      	movs	r1, #4
 8012c6c:	4804      	ldr	r0, [pc, #16]	; (8012c80 <spi2_dma_init+0x84>)
 8012c6e:	f7ff fd7b 	bl	8012768 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, DMA_SPI2_TX_STREAM);
 8012c72:	2104      	movs	r1, #4
 8012c74:	4802      	ldr	r0, [pc, #8]	; (8012c80 <spi2_dma_init+0x84>)
 8012c76:	f7ff fde3 	bl	8012840 <LL_DMA_DisableFifoMode>
}
 8012c7a:	bf00      	nop
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	40026000 	.word	0x40026000

08012c84 <spi2_config>:

static void spi2_config(void)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b08a      	sub	sp, #40	; 0x28
 8012c88:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8012c8a:	463b      	mov	r3, r7
 8012c8c:	2228      	movs	r2, #40	; 0x28
 8012c8e:	2100      	movs	r1, #0
 8012c90:	4618      	mov	r0, r3
 8012c92:	f001 fe07 	bl	80148a4 <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012c96:	f7ff fbad 	bl	80123f4 <__NVIC_GetPriorityGrouping>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	2105      	movs	r1, #5
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7ff fbfd 	bl	80124a0 <NVIC_EncodePriority>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	4619      	mov	r1, r3
 8012caa:	2024      	movs	r0, #36	; 0x24
 8012cac:	f7ff fbce 	bl	801244c <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 8012cb0:	2024      	movs	r0, #36	; 0x24
 8012cb2:	f7ff fbad 	bl	8012410 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8012cba:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012cbe:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8012ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cd0:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8012cd2:	2318      	movs	r3, #24
 8012cd4:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 8012cde:	230a      	movs	r3, #10
 8012ce0:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 8012ce2:	463b      	mov	r3, r7
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	4805      	ldr	r0, [pc, #20]	; (8012cfc <spi2_config+0x78>)
 8012ce8:	f7f1 fec3 	bl	8004a72 <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8012cec:	2100      	movs	r1, #0
 8012cee:	4803      	ldr	r0, [pc, #12]	; (8012cfc <spi2_config+0x78>)
 8012cf0:	f7ff fc19 	bl	8012526 <LL_SPI_SetStandard>
}
 8012cf4:	bf00      	nop
 8012cf6:	3728      	adds	r7, #40	; 0x28
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	40003800 	.word	0x40003800

08012d00 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8012d06:	2305      	movs	r3, #5
 8012d08:	9300      	str	r3, [sp, #0]
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	2103      	movs	r1, #3
 8012d10:	480a      	ldr	r0, [pc, #40]	; (8012d3c <spi4_pin_conf+0x3c>)
 8012d12:	f7fd fdb5 	bl	8010880 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8012d16:	2305      	movs	r3, #5
 8012d18:	9300      	str	r3, [sp, #0]
 8012d1a:	2303      	movs	r3, #3
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	2103      	movs	r1, #3
 8012d20:	4807      	ldr	r0, [pc, #28]	; (8012d40 <spi4_pin_conf+0x40>)
 8012d22:	f7fd fdad 	bl	8010880 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8012d26:	2305      	movs	r3, #5
 8012d28:	9300      	str	r3, [sp, #0]
 8012d2a:	2303      	movs	r3, #3
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	2103      	movs	r1, #3
 8012d30:	4804      	ldr	r0, [pc, #16]	; (8012d44 <spi4_pin_conf+0x44>)
 8012d32:	f7fd fda5 	bl	8010880 <hal_gpio_init_alt>
		&gpio_spi4_miso,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8012d36:	bf00      	nop
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	080163f8 	.word	0x080163f8
 8012d40:	08016400 	.word	0x08016400
 8012d44:	08016408 	.word	0x08016408

08012d48 <spi4_dma_init>:

static void spi4_dma_init(void)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012d4c:	f7ff fb52 	bl	80123f4 <__NVIC_GetPriorityGrouping>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2200      	movs	r2, #0
 8012d54:	2105      	movs	r1, #5
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7ff fba2 	bl	80124a0 <NVIC_EncodePriority>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	4619      	mov	r1, r3
 8012d60:	2038      	movs	r0, #56	; 0x38
 8012d62:	f7ff fb73 	bl	801244c <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8012d66:	2038      	movs	r0, #56	; 0x38
 8012d68:	f7ff fb52 	bl	8012410 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012d6c:	f7ff fb42 	bl	80123f4 <__NVIC_GetPriorityGrouping>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2200      	movs	r2, #0
 8012d74:	2105      	movs	r1, #5
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff fb92 	bl	80124a0 <NVIC_EncodePriority>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	4619      	mov	r1, r3
 8012d80:	2039      	movs	r0, #57	; 0x39
 8012d82:	f7ff fb63 	bl	801244c <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8012d86:	2039      	movs	r0, #57	; 0x39
 8012d88:	f7ff fb42 	bl	8012410 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_RX_STREAM, DMA_SPI4_RX_CHANNEL);
 8012d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012d90:	2100      	movs	r1, #0
 8012d92:	482d      	ldr	r0, [pc, #180]	; (8012e48 <spi4_dma_init+0x100>)
 8012d94:	f7ff fd30 	bl	80127f8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8012d98:	2200      	movs	r2, #0
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	482a      	ldr	r0, [pc, #168]	; (8012e48 <spi4_dma_init+0x100>)
 8012d9e:	f7ff fc2f 	bl	8012600 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8012da2:	2200      	movs	r2, #0
 8012da4:	2100      	movs	r1, #0
 8012da6:	4828      	ldr	r0, [pc, #160]	; (8012e48 <spi4_dma_init+0x100>)
 8012da8:	f7ff fd02 	bl	80127b0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MODE_NORMAL);
 8012dac:	2200      	movs	r2, #0
 8012dae:	2100      	movs	r1, #0
 8012db0:	4825      	ldr	r0, [pc, #148]	; (8012e48 <spi4_dma_init+0x100>)
 8012db2:	f7ff fc49 	bl	8012648 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012db6:	2200      	movs	r2, #0
 8012db8:	2100      	movs	r1, #0
 8012dba:	4823      	ldr	r0, [pc, #140]	; (8012e48 <spi4_dma_init+0x100>)
 8012dbc:	f7ff fc68 	bl	8012690 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	4820      	ldr	r0, [pc, #128]	; (8012e48 <spi4_dma_init+0x100>)
 8012dc8:	f7ff fc86 	bl	80126d8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2100      	movs	r1, #0
 8012dd0:	481d      	ldr	r0, [pc, #116]	; (8012e48 <spi4_dma_init+0x100>)
 8012dd2:	f7ff fca5 	bl	8012720 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	2100      	movs	r1, #0
 8012dda:	481b      	ldr	r0, [pc, #108]	; (8012e48 <spi4_dma_init+0x100>)
 8012ddc:	f7ff fcc4 	bl	8012768 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_RX_STREAM);
 8012de0:	2100      	movs	r1, #0
 8012de2:	4819      	ldr	r0, [pc, #100]	; (8012e48 <spi4_dma_init+0x100>)
 8012de4:	f7ff fd2c 	bl	8012840 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_TX_STREAM, DMA_SPI4_TX_CHANNEL);
 8012de8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012dec:	2101      	movs	r1, #1
 8012dee:	4816      	ldr	r0, [pc, #88]	; (8012e48 <spi4_dma_init+0x100>)
 8012df0:	f7ff fd02 	bl	80127f8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8012df4:	2240      	movs	r2, #64	; 0x40
 8012df6:	2101      	movs	r1, #1
 8012df8:	4813      	ldr	r0, [pc, #76]	; (8012e48 <spi4_dma_init+0x100>)
 8012dfa:	f7ff fc01 	bl	8012600 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8012dfe:	2200      	movs	r2, #0
 8012e00:	2101      	movs	r1, #1
 8012e02:	4811      	ldr	r0, [pc, #68]	; (8012e48 <spi4_dma_init+0x100>)
 8012e04:	f7ff fcd4 	bl	80127b0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MODE_NORMAL);
 8012e08:	2200      	movs	r2, #0
 8012e0a:	2101      	movs	r1, #1
 8012e0c:	480e      	ldr	r0, [pc, #56]	; (8012e48 <spi4_dma_init+0x100>)
 8012e0e:	f7ff fc1b 	bl	8012648 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012e12:	2200      	movs	r2, #0
 8012e14:	2101      	movs	r1, #1
 8012e16:	480c      	ldr	r0, [pc, #48]	; (8012e48 <spi4_dma_init+0x100>)
 8012e18:	f7ff fc3a 	bl	8012690 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012e20:	2101      	movs	r1, #1
 8012e22:	4809      	ldr	r0, [pc, #36]	; (8012e48 <spi4_dma_init+0x100>)
 8012e24:	f7ff fc58 	bl	80126d8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012e28:	2200      	movs	r2, #0
 8012e2a:	2101      	movs	r1, #1
 8012e2c:	4806      	ldr	r0, [pc, #24]	; (8012e48 <spi4_dma_init+0x100>)
 8012e2e:	f7ff fc77 	bl	8012720 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012e32:	2200      	movs	r2, #0
 8012e34:	2101      	movs	r1, #1
 8012e36:	4804      	ldr	r0, [pc, #16]	; (8012e48 <spi4_dma_init+0x100>)
 8012e38:	f7ff fc96 	bl	8012768 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_TX_STREAM);
 8012e3c:	2101      	movs	r1, #1
 8012e3e:	4802      	ldr	r0, [pc, #8]	; (8012e48 <spi4_dma_init+0x100>)
 8012e40:	f7ff fcfe 	bl	8012840 <LL_DMA_DisableFifoMode>
}
 8012e44:	bf00      	nop
 8012e46:	bd80      	pop	{r7, pc}
 8012e48:	40026400 	.word	0x40026400

08012e4c <spi4_config>:

static void spi4_config(void)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b08a      	sub	sp, #40	; 0x28
 8012e50:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8012e52:	463b      	mov	r3, r7
 8012e54:	2228      	movs	r2, #40	; 0x28
 8012e56:	2100      	movs	r1, #0
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f001 fd23 	bl	80148a4 <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012e5e:	f7ff fac9 	bl	80123f4 <__NVIC_GetPriorityGrouping>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2200      	movs	r2, #0
 8012e66:	2105      	movs	r1, #5
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7ff fb19 	bl	80124a0 <NVIC_EncodePriority>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	4619      	mov	r1, r3
 8012e72:	2054      	movs	r0, #84	; 0x54
 8012e74:	f7ff faea 	bl	801244c <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 8012e78:	2054      	movs	r0, #84	; 0x54
 8012e7a:	f7ff fac9 	bl	8012410 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8012e82:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012e86:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8012e90:	2300      	movs	r3, #0
 8012e92:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8012e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e98:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8012e9a:	2328      	movs	r3, #40	; 0x28
 8012e9c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8012ea6:	230a      	movs	r3, #10
 8012ea8:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 8012eaa:	463b      	mov	r3, r7
 8012eac:	4619      	mov	r1, r3
 8012eae:	4805      	ldr	r0, [pc, #20]	; (8012ec4 <spi4_config+0x78>)
 8012eb0:	f7f1 fddf 	bl	8004a72 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	4803      	ldr	r0, [pc, #12]	; (8012ec4 <spi4_config+0x78>)
 8012eb8:	f7ff fb35 	bl	8012526 <LL_SPI_SetStandard>
}
 8012ebc:	bf00      	nop
 8012ebe:	3728      	adds	r7, #40	; 0x28
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	40013400 	.word	0x40013400

08012ec8 <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b086      	sub	sp, #24
 8012ecc:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ece:	463b      	mov	r3, r7
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	601a      	str	r2, [r3, #0]
 8012ed4:	605a      	str	r2, [r3, #4]
 8012ed6:	609a      	str	r2, [r3, #8]
 8012ed8:	60da      	str	r2, [r3, #12]
 8012eda:	611a      	str	r2, [r3, #16]
 8012edc:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8012ede:	f44f 7360 	mov.w	r3, #896	; 0x380
 8012ee2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8012ee4:	2302      	movs	r3, #2
 8012ee6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8012ee8:	2303      	movs	r3, #3
 8012eea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8012eec:	2300      	movs	r3, #0
 8012eee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8012ef4:	2305      	movs	r3, #5
 8012ef6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012ef8:	463b      	mov	r3, r7
 8012efa:	4619      	mov	r1, r3
 8012efc:	4803      	ldr	r0, [pc, #12]	; (8012f0c <spi5_pin_conf+0x44>)
 8012efe:	f7f0 fd70 	bl	80039e2 <LL_GPIO_Init>
}
 8012f02:	bf00      	nop
 8012f04:	3718      	adds	r7, #24
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	40021400 	.word	0x40021400

08012f10 <spi5_dma_init>:

static void spi5_dma_init(void)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012f14:	f7ff fa6e 	bl	80123f4 <__NVIC_GetPriorityGrouping>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	2105      	movs	r1, #5
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff fabe 	bl	80124a0 <NVIC_EncodePriority>
 8012f24:	4603      	mov	r3, r0
 8012f26:	4619      	mov	r1, r3
 8012f28:	203c      	movs	r0, #60	; 0x3c
 8012f2a:	f7ff fa8f 	bl	801244c <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8012f2e:	203c      	movs	r0, #60	; 0x3c
 8012f30:	f7ff fa6e 	bl	8012410 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 8012f34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012f38:	2104      	movs	r1, #4
 8012f3a:	4816      	ldr	r0, [pc, #88]	; (8012f94 <spi5_dma_init+0x84>)
 8012f3c:	f7ff fc5c 	bl	80127f8 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8012f40:	2240      	movs	r2, #64	; 0x40
 8012f42:	2104      	movs	r1, #4
 8012f44:	4813      	ldr	r0, [pc, #76]	; (8012f94 <spi5_dma_init+0x84>)
 8012f46:	f7ff fb5b 	bl	8012600 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	2104      	movs	r1, #4
 8012f4e:	4811      	ldr	r0, [pc, #68]	; (8012f94 <spi5_dma_init+0x84>)
 8012f50:	f7ff fc2e 	bl	80127b0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8012f54:	2200      	movs	r2, #0
 8012f56:	2104      	movs	r1, #4
 8012f58:	480e      	ldr	r0, [pc, #56]	; (8012f94 <spi5_dma_init+0x84>)
 8012f5a:	f7ff fb75 	bl	8012648 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8012f5e:	2200      	movs	r2, #0
 8012f60:	2104      	movs	r1, #4
 8012f62:	480c      	ldr	r0, [pc, #48]	; (8012f94 <spi5_dma_init+0x84>)
 8012f64:	f7ff fb94 	bl	8012690 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8012f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012f6c:	2104      	movs	r1, #4
 8012f6e:	4809      	ldr	r0, [pc, #36]	; (8012f94 <spi5_dma_init+0x84>)
 8012f70:	f7ff fbb2 	bl	80126d8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8012f74:	2200      	movs	r2, #0
 8012f76:	2104      	movs	r1, #4
 8012f78:	4806      	ldr	r0, [pc, #24]	; (8012f94 <spi5_dma_init+0x84>)
 8012f7a:	f7ff fbd1 	bl	8012720 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8012f7e:	2200      	movs	r2, #0
 8012f80:	2104      	movs	r1, #4
 8012f82:	4804      	ldr	r0, [pc, #16]	; (8012f94 <spi5_dma_init+0x84>)
 8012f84:	f7ff fbf0 	bl	8012768 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 8012f88:	2104      	movs	r1, #4
 8012f8a:	4802      	ldr	r0, [pc, #8]	; (8012f94 <spi5_dma_init+0x84>)
 8012f8c:	f7ff fc58 	bl	8012840 <LL_DMA_DisableFifoMode>
}
 8012f90:	bf00      	nop
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	40026400 	.word	0x40026400

08012f98 <spi5_config>:

static void spi5_config(void)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b08a      	sub	sp, #40	; 0x28
 8012f9c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8012f9e:	463b      	mov	r3, r7
 8012fa0:	2228      	movs	r2, #40	; 0x28
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f001 fc7d 	bl	80148a4 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 8012faa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012fae:	f7ff fc67 	bl	8012880 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012fb2:	f7ff fa1f 	bl	80123f4 <__NVIC_GetPriorityGrouping>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2200      	movs	r2, #0
 8012fba:	2105      	movs	r1, #5
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fa6f 	bl	80124a0 <NVIC_EncodePriority>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	2055      	movs	r0, #85	; 0x55
 8012fc8:	f7ff fa40 	bl	801244c <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 8012fcc:	2055      	movs	r0, #85	; 0x55
 8012fce:	f7ff fa1f 	bl	8012410 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8012fd6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012fda:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8012fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012fec:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8012fee:	2318      	movs	r3, #24
 8012ff0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8012ffa:	230a      	movs	r3, #10
 8012ffc:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 8012ffe:	463b      	mov	r3, r7
 8013000:	4619      	mov	r1, r3
 8013002:	4805      	ldr	r0, [pc, #20]	; (8013018 <spi5_config+0x80>)
 8013004:	f7f1 fd35 	bl	8004a72 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 8013008:	2100      	movs	r1, #0
 801300a:	4803      	ldr	r0, [pc, #12]	; (8013018 <spi5_config+0x80>)
 801300c:	f7ff fa8b 	bl	8012526 <LL_SPI_SetStandard>
}
 8013010:	bf00      	nop
 8013012:	3728      	adds	r7, #40	; 0x28
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	40015000 	.word	0x40015000

0801301c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 801301c:	b480      	push	{r7}
 801301e:	af00      	add	r7, sp, #0

}
 8013020:	bf00      	nop
 8013022:	46bd      	mov	sp, r7
 8013024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013028:	4770      	bx	lr

0801302a <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 801302a:	b480      	push	{r7}
 801302c:	af00      	add	r7, sp, #0

}
 801302e:	bf00      	nop
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 8013038:	b480      	push	{r7}
 801303a:	af00      	add	r7, sp, #0

}
 801303c:	bf00      	nop
 801303e:	46bd      	mov	sp, r7
 8013040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013044:	4770      	bx	lr

08013046 <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 8013046:	b480      	push	{r7}
 8013048:	af00      	add	r7, sp, #0

}
 801304a:	bf00      	nop
 801304c:	46bd      	mov	sp, r7
 801304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013052:	4770      	bx	lr

08013054 <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 8013054:	b480      	push	{r7}
 8013056:	af00      	add	r7, sp, #0

}
 8013058:	bf00      	nop
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr

08013062 <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 8013062:	b480      	push	{r7}
 8013064:	af00      	add	r7, sp, #0

}
 8013066:	bf00      	nop
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 8013070:	b480      	push	{r7}
 8013072:	af00      	add	r7, sp, #0

}
 8013074:	bf00      	nop
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr
	...

08013080 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013086:	2300      	movs	r3, #0
 8013088:	607b      	str	r3, [r7, #4]
 801308a:	4b12      	ldr	r3, [pc, #72]	; (80130d4 <HAL_MspInit+0x54>)
 801308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801308e:	4a11      	ldr	r2, [pc, #68]	; (80130d4 <HAL_MspInit+0x54>)
 8013090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013094:	6453      	str	r3, [r2, #68]	; 0x44
 8013096:	4b0f      	ldr	r3, [pc, #60]	; (80130d4 <HAL_MspInit+0x54>)
 8013098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801309e:	607b      	str	r3, [r7, #4]
 80130a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80130a2:	2300      	movs	r3, #0
 80130a4:	603b      	str	r3, [r7, #0]
 80130a6:	4b0b      	ldr	r3, [pc, #44]	; (80130d4 <HAL_MspInit+0x54>)
 80130a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130aa:	4a0a      	ldr	r2, [pc, #40]	; (80130d4 <HAL_MspInit+0x54>)
 80130ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130b0:	6413      	str	r3, [r2, #64]	; 0x40
 80130b2:	4b08      	ldr	r3, [pc, #32]	; (80130d4 <HAL_MspInit+0x54>)
 80130b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130ba:	603b      	str	r3, [r7, #0]
 80130bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80130be:	2200      	movs	r2, #0
 80130c0:	210f      	movs	r1, #15
 80130c2:	f06f 0001 	mvn.w	r0, #1
 80130c6:	f7ee f907 	bl	80012d8 <HAL_NVIC_SetPriority>
}
 80130ca:	bf00      	nop
 80130cc:	3708      	adds	r7, #8
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	40023800 	.word	0x40023800

080130d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b08e      	sub	sp, #56	; 0x38
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80130e0:	2300      	movs	r3, #0
 80130e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80130e4:	2300      	movs	r3, #0
 80130e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80130e8:	2300      	movs	r3, #0
 80130ea:	60fb      	str	r3, [r7, #12]
 80130ec:	4b33      	ldr	r3, [pc, #204]	; (80131bc <HAL_InitTick+0xe4>)
 80130ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130f0:	4a32      	ldr	r2, [pc, #200]	; (80131bc <HAL_InitTick+0xe4>)
 80130f2:	f043 0310 	orr.w	r3, r3, #16
 80130f6:	6413      	str	r3, [r2, #64]	; 0x40
 80130f8:	4b30      	ldr	r3, [pc, #192]	; (80131bc <HAL_InitTick+0xe4>)
 80130fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130fc:	f003 0310 	and.w	r3, r3, #16
 8013100:	60fb      	str	r3, [r7, #12]
 8013102:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013104:	f107 0210 	add.w	r2, r7, #16
 8013108:	f107 0314 	add.w	r3, r7, #20
 801310c:	4611      	mov	r1, r2
 801310e:	4618      	mov	r0, r3
 8013110:	f7ee fe76 	bl	8001e00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8013114:	6a3b      	ldr	r3, [r7, #32]
 8013116:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8013118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311a:	2b00      	cmp	r3, #0
 801311c:	d103      	bne.n	8013126 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 801311e:	f7ee fe5b 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8013122:	6378      	str	r0, [r7, #52]	; 0x34
 8013124:	e004      	b.n	8013130 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8013126:	f7ee fe57 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 801312a:	4603      	mov	r3, r0
 801312c:	005b      	lsls	r3, r3, #1
 801312e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013132:	4a23      	ldr	r2, [pc, #140]	; (80131c0 <HAL_InitTick+0xe8>)
 8013134:	fba2 2303 	umull	r2, r3, r2, r3
 8013138:	0c9b      	lsrs	r3, r3, #18
 801313a:	3b01      	subs	r3, #1
 801313c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801313e:	4b21      	ldr	r3, [pc, #132]	; (80131c4 <HAL_InitTick+0xec>)
 8013140:	4a21      	ldr	r2, [pc, #132]	; (80131c8 <HAL_InitTick+0xf0>)
 8013142:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8013144:	4b1f      	ldr	r3, [pc, #124]	; (80131c4 <HAL_InitTick+0xec>)
 8013146:	f240 32e7 	movw	r2, #999	; 0x3e7
 801314a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801314c:	4a1d      	ldr	r2, [pc, #116]	; (80131c4 <HAL_InitTick+0xec>)
 801314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013150:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8013152:	4b1c      	ldr	r3, [pc, #112]	; (80131c4 <HAL_InitTick+0xec>)
 8013154:	2200      	movs	r2, #0
 8013156:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013158:	4b1a      	ldr	r3, [pc, #104]	; (80131c4 <HAL_InitTick+0xec>)
 801315a:	2200      	movs	r2, #0
 801315c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801315e:	4b19      	ldr	r3, [pc, #100]	; (80131c4 <HAL_InitTick+0xec>)
 8013160:	2200      	movs	r2, #0
 8013162:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8013164:	4817      	ldr	r0, [pc, #92]	; (80131c4 <HAL_InitTick+0xec>)
 8013166:	f7ef ffad 	bl	80030c4 <HAL_TIM_Base_Init>
 801316a:	4603      	mov	r3, r0
 801316c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8013170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013174:	2b00      	cmp	r3, #0
 8013176:	d11b      	bne.n	80131b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8013178:	4812      	ldr	r0, [pc, #72]	; (80131c4 <HAL_InitTick+0xec>)
 801317a:	f7ef fffd 	bl	8003178 <HAL_TIM_Base_Start_IT>
 801317e:	4603      	mov	r3, r0
 8013180:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8013184:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013188:	2b00      	cmp	r3, #0
 801318a:	d111      	bne.n	80131b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801318c:	2036      	movs	r0, #54	; 0x36
 801318e:	f7ee f8bf 	bl	8001310 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2b0f      	cmp	r3, #15
 8013196:	d808      	bhi.n	80131aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8013198:	2200      	movs	r2, #0
 801319a:	6879      	ldr	r1, [r7, #4]
 801319c:	2036      	movs	r0, #54	; 0x36
 801319e:	f7ee f89b 	bl	80012d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80131a2:	4a0a      	ldr	r2, [pc, #40]	; (80131cc <HAL_InitTick+0xf4>)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6013      	str	r3, [r2, #0]
 80131a8:	e002      	b.n	80131b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80131aa:	2301      	movs	r3, #1
 80131ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80131b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3738      	adds	r7, #56	; 0x38
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	40023800 	.word	0x40023800
 80131c0:	431bde83 	.word	0x431bde83
 80131c4:	20005ab4 	.word	0x20005ab4
 80131c8:	40001000 	.word	0x40001000
 80131cc:	20000004 	.word	0x20000004

080131d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80131d0:	b480      	push	{r7}
 80131d2:	af00      	add	r7, sp, #0
  while (1)
 80131d4:	e7fe      	b.n	80131d4 <NMI_Handler+0x4>

080131d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80131d6:	b480      	push	{r7}
 80131d8:	af00      	add	r7, sp, #0
  while (1)
 80131da:	e7fe      	b.n	80131da <HardFault_Handler+0x4>

080131dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80131dc:	b480      	push	{r7}
 80131de:	af00      	add	r7, sp, #0
  while (1)
 80131e0:	e7fe      	b.n	80131e0 <MemManage_Handler+0x4>

080131e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80131e2:	b480      	push	{r7}
 80131e4:	af00      	add	r7, sp, #0
  while (1)
 80131e6:	e7fe      	b.n	80131e6 <BusFault_Handler+0x4>

080131e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80131e8:	b480      	push	{r7}
 80131ea:	af00      	add	r7, sp, #0
  while (1)
 80131ec:	e7fe      	b.n	80131ec <UsageFault_Handler+0x4>

080131ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80131ee:	b480      	push	{r7}
 80131f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80131f2:	bf00      	nop
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8013200:	4802      	ldr	r0, [pc, #8]	; (801320c <TIM6_DAC_IRQHandler+0x10>)
 8013202:	f7f0 f829 	bl	8003258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8013206:	bf00      	nop
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	20005ab4 	.word	0x20005ab4

08013210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	4a04      	ldr	r2, [pc, #16]	; (8013230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801321e:	4293      	cmp	r3, r2
 8013220:	d101      	bne.n	8013226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013222:	f7ed ff5d 	bl	80010e0 <HAL_IncTick>
  }
}
 8013226:	bf00      	nop
 8013228:	3708      	adds	r7, #8
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	40001000 	.word	0x40001000

08013234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013234:	b480      	push	{r7}
 8013236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013238:	4b06      	ldr	r3, [pc, #24]	; (8013254 <SystemInit+0x20>)
 801323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801323e:	4a05      	ldr	r2, [pc, #20]	; (8013254 <SystemInit+0x20>)
 8013240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013248:	bf00      	nop
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr
 8013252:	bf00      	nop
 8013254:	e000ed00 	.word	0xe000ed00

08013258 <__NVIC_GetPriorityGrouping>:
{
 8013258:	b480      	push	{r7}
 801325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801325c:	4b04      	ldr	r3, [pc, #16]	; (8013270 <__NVIC_GetPriorityGrouping+0x18>)
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	0a1b      	lsrs	r3, r3, #8
 8013262:	f003 0307 	and.w	r3, r3, #7
}
 8013266:	4618      	mov	r0, r3
 8013268:	46bd      	mov	sp, r7
 801326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326e:	4770      	bx	lr
 8013270:	e000ed00 	.word	0xe000ed00

08013274 <__NVIC_EnableIRQ>:
{
 8013274:	b480      	push	{r7}
 8013276:	b083      	sub	sp, #12
 8013278:	af00      	add	r7, sp, #0
 801327a:	4603      	mov	r3, r0
 801327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013282:	2b00      	cmp	r3, #0
 8013284:	db0b      	blt.n	801329e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013286:	79fb      	ldrb	r3, [r7, #7]
 8013288:	f003 021f 	and.w	r2, r3, #31
 801328c:	4907      	ldr	r1, [pc, #28]	; (80132ac <__NVIC_EnableIRQ+0x38>)
 801328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013292:	095b      	lsrs	r3, r3, #5
 8013294:	2001      	movs	r0, #1
 8013296:	fa00 f202 	lsl.w	r2, r0, r2
 801329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801329e:	bf00      	nop
 80132a0:	370c      	adds	r7, #12
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	e000e100 	.word	0xe000e100

080132b0 <__NVIC_SetPriority>:
{
 80132b0:	b480      	push	{r7}
 80132b2:	b083      	sub	sp, #12
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	4603      	mov	r3, r0
 80132b8:	6039      	str	r1, [r7, #0]
 80132ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80132bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	db0a      	blt.n	80132da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	490c      	ldr	r1, [pc, #48]	; (80132fc <__NVIC_SetPriority+0x4c>)
 80132ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80132ce:	0112      	lsls	r2, r2, #4
 80132d0:	b2d2      	uxtb	r2, r2
 80132d2:	440b      	add	r3, r1
 80132d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80132d8:	e00a      	b.n	80132f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	b2da      	uxtb	r2, r3
 80132de:	4908      	ldr	r1, [pc, #32]	; (8013300 <__NVIC_SetPriority+0x50>)
 80132e0:	79fb      	ldrb	r3, [r7, #7]
 80132e2:	f003 030f 	and.w	r3, r3, #15
 80132e6:	3b04      	subs	r3, #4
 80132e8:	0112      	lsls	r2, r2, #4
 80132ea:	b2d2      	uxtb	r2, r2
 80132ec:	440b      	add	r3, r1
 80132ee:	761a      	strb	r2, [r3, #24]
}
 80132f0:	bf00      	nop
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr
 80132fc:	e000e100 	.word	0xe000e100
 8013300:	e000ed00 	.word	0xe000ed00

08013304 <NVIC_EncodePriority>:
{
 8013304:	b480      	push	{r7}
 8013306:	b089      	sub	sp, #36	; 0x24
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f003 0307 	and.w	r3, r3, #7
 8013316:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	f1c3 0307 	rsb	r3, r3, #7
 801331e:	2b04      	cmp	r3, #4
 8013320:	bf28      	it	cs
 8013322:	2304      	movcs	r3, #4
 8013324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	3304      	adds	r3, #4
 801332a:	2b06      	cmp	r3, #6
 801332c:	d902      	bls.n	8013334 <NVIC_EncodePriority+0x30>
 801332e:	69fb      	ldr	r3, [r7, #28]
 8013330:	3b03      	subs	r3, #3
 8013332:	e000      	b.n	8013336 <NVIC_EncodePriority+0x32>
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	fa02 f303 	lsl.w	r3, r2, r3
 8013342:	43da      	mvns	r2, r3
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	401a      	ands	r2, r3
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801334c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	fa01 f303 	lsl.w	r3, r1, r3
 8013356:	43d9      	mvns	r1, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801335c:	4313      	orrs	r3, r2
}
 801335e:	4618      	mov	r0, r3
 8013360:	3724      	adds	r7, #36	; 0x24
 8013362:	46bd      	mov	sp, r7
 8013364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013368:	4770      	bx	lr

0801336a <LL_TIM_EnableCounter>:
{
 801336a:	b480      	push	{r7}
 801336c:	b083      	sub	sp, #12
 801336e:	af00      	add	r7, sp, #0
 8013370:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	f043 0201 	orr.w	r2, r3, #1
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	601a      	str	r2, [r3, #0]
}
 801337e:	bf00      	nop
 8013380:	370c      	adds	r7, #12
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr

0801338a <LL_TIM_DisableARRPreload>:
{
 801338a:	b480      	push	{r7}
 801338c:	b083      	sub	sp, #12
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	601a      	str	r2, [r3, #0]
}
 801339e:	bf00      	nop
 80133a0:	370c      	adds	r7, #12
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr

080133aa <LL_TIM_SetClockSource>:
{
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6078      	str	r0, [r7, #4]
 80133b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	689b      	ldr	r3, [r3, #8]
 80133b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80133bc:	f023 0307 	bic.w	r3, r3, #7
 80133c0:	683a      	ldr	r2, [r7, #0]
 80133c2:	431a      	orrs	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	609a      	str	r2, [r3, #8]
}
 80133c8:	bf00      	nop
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <LL_TIM_ClearFlag_UPDATE>:
{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f06f 0201 	mvn.w	r2, #1
 80133e2:	611a      	str	r2, [r3, #16]
}
 80133e4:	bf00      	nop
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	691b      	ldr	r3, [r3, #16]
 80133fc:	f003 0301 	and.w	r3, r3, #1
 8013400:	2b01      	cmp	r3, #1
 8013402:	d101      	bne.n	8013408 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8013404:	2301      	movs	r3, #1
 8013406:	e000      	b.n	801340a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8013408:	2300      	movs	r3, #0
}
 801340a:	4618      	mov	r0, r3
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr

08013416 <LL_TIM_EnableIT_UPDATE>:
{
 8013416:	b480      	push	{r7}
 8013418:	b083      	sub	sp, #12
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	68db      	ldr	r3, [r3, #12]
 8013422:	f043 0201 	orr.w	r2, r3, #1
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	60da      	str	r2, [r3, #12]
}
 801342a:	bf00      	nop
 801342c:	370c      	adds	r7, #12
 801342e:	46bd      	mov	sp, r7
 8013430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013434:	4770      	bx	lr
	...

08013438 <hal_tim_start_it>:

static volatile TimInterrupt tim_interrupt[TIM_NUMBER];

static void hal_tim_int_call(uint32_t tim);

void hal_tim_start_it(TimID id) {
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	4603      	mov	r3, r0
 8013440:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 8013442:	79fb      	ldrb	r3, [r7, #7]
 8013444:	2b04      	cmp	r3, #4
 8013446:	d106      	bne.n	8013456 <hal_tim_start_it+0x1e>
	case TimId4:
		LL_TIM_EnableCounter(TIM4);
 8013448:	4805      	ldr	r0, [pc, #20]	; (8013460 <hal_tim_start_it+0x28>)
 801344a:	f7ff ff8e 	bl	801336a <LL_TIM_EnableCounter>
		LL_TIM_EnableIT_UPDATE(TIM4);
 801344e:	4804      	ldr	r0, [pc, #16]	; (8013460 <hal_tim_start_it+0x28>)
 8013450:	f7ff ffe1 	bl	8013416 <LL_TIM_EnableIT_UPDATE>
		break;
 8013454:	e000      	b.n	8013458 <hal_tim_start_it+0x20>
	default:
		break;
 8013456:	bf00      	nop
	}
}
 8013458:	bf00      	nop
 801345a:	3708      	adds	r7, #8
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}
 8013460:	40000800 	.word	0x40000800

08013464 <tim_init>:
		LL_TIM_DisableCounter(TIM4);
		LL_TIM_DisableIT_UPDATE(TIM4);
	}
}

void tim_init(TimID id) {
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	4603      	mov	r3, r0
 801346c:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 801346e:	79fb      	ldrb	r3, [r7, #7]
 8013470:	2b04      	cmp	r3, #4
 8013472:	d108      	bne.n	8013486 <tim_init+0x22>
	case TimId4:
		tim4_init();
 8013474:	f000 f816 	bl	80134a4 <tim4_init>
	//	LL_TIM_EnableCounter(TIM4);
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8013478:	4807      	ldr	r0, [pc, #28]	; (8013498 <tim_init+0x34>)
 801347a:	f7ff ffab 	bl	80133d4 <LL_TIM_ClearFlag_UPDATE>
		hal_cli_printf("tim4 init");
 801347e:	4807      	ldr	r0, [pc, #28]	; (801349c <tim_init+0x38>)
 8013480:	f7fc fc8e 	bl	800fda0 <hal_cli_printf>
		break;
 8013484:	e003      	b.n	801348e <tim_init+0x2a>

	default:
		hal_cli_printf("timer init argument error");
 8013486:	4806      	ldr	r0, [pc, #24]	; (80134a0 <tim_init+0x3c>)
 8013488:	f7fc fc8a 	bl	800fda0 <hal_cli_printf>
		break;
 801348c:	bf00      	nop
	}
}
 801348e:	bf00      	nop
 8013490:	3708      	adds	r7, #8
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	40000800 	.word	0x40000800
 801349c:	08015634 	.word	0x08015634
 80134a0:	08015640 	.word	0x08015640

080134a4 <tim4_init>:

	return ret;
}

static void tim4_init(void)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b086      	sub	sp, #24
 80134a8:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80134aa:	1d3b      	adds	r3, r7, #4
 80134ac:	2200      	movs	r2, #0
 80134ae:	601a      	str	r2, [r3, #0]
 80134b0:	605a      	str	r2, [r3, #4]
 80134b2:	609a      	str	r2, [r3, #8]
 80134b4:	60da      	str	r2, [r3, #12]
 80134b6:	611a      	str	r2, [r3, #16]
#if 0
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
#endif

	NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80134b8:	f7ff fece 	bl	8013258 <__NVIC_GetPriorityGrouping>
 80134bc:	4603      	mov	r3, r0
 80134be:	2200      	movs	r2, #0
 80134c0:	2105      	movs	r1, #5
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7ff ff1e 	bl	8013304 <NVIC_EncodePriority>
 80134c8:	4603      	mov	r3, r0
 80134ca:	4619      	mov	r1, r3
 80134cc:	201e      	movs	r0, #30
 80134ce:	f7ff feef 	bl	80132b0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 80134d2:	201e      	movs	r0, #30
 80134d4:	f7ff fece 	bl	8013274 <__NVIC_EnableIRQ>

	/* tim init period = 20ms */
	TIM_InitStruct.Prescaler = 180;
 80134d8:	23b4      	movs	r3, #180	; 0xb4
 80134da:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80134dc:	2300      	movs	r3, #0
 80134de:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 20000;
 80134e0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80134e4:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80134e6:	2300      	movs	r3, #0
 80134e8:	613b      	str	r3, [r7, #16]
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 80134ea:	1d3b      	adds	r3, r7, #4
 80134ec:	4619      	mov	r1, r3
 80134ee:	4807      	ldr	r0, [pc, #28]	; (801350c <tim4_init+0x68>)
 80134f0:	f7f1 fb4c 	bl	8004b8c <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM4);
 80134f4:	4805      	ldr	r0, [pc, #20]	; (801350c <tim4_init+0x68>)
 80134f6:	f7ff ff48 	bl	801338a <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80134fa:	2100      	movs	r1, #0
 80134fc:	4803      	ldr	r0, [pc, #12]	; (801350c <tim4_init+0x68>)
 80134fe:	f7ff ff54 	bl	80133aa <LL_TIM_SetClockSource>
		GpioPullNo,
		GpioSpeedFreqLow,
		GpioAltFnTim4);

#endif
}
 8013502:	bf00      	nop
 8013504:	3718      	adds	r7, #24
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	40000800 	.word	0x40000800

08013510 <hal_tim_add_int_callback>:

void hal_tim_add_int_callback(uint32_t tim, TimInterruptCallback cb, void* context) {
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	60f8      	str	r0, [r7, #12]
 8013518:	60b9      	str	r1, [r7, #8]
 801351a:	607a      	str	r2, [r7, #4]
	taskENTER_CRITICAL();
 801351c:	f7f6 f83c 	bl	8009598 <vPortEnterCritical>
	tim_interrupt[tim].callback = cb;
 8013520:	4911      	ldr	r1, [pc, #68]	; (8013568 <hal_tim_add_int_callback+0x58>)
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	4613      	mov	r3, r2
 8013526:	005b      	lsls	r3, r3, #1
 8013528:	4413      	add	r3, r2
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	440b      	add	r3, r1
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	601a      	str	r2, [r3, #0]
	tim_interrupt[tim].context = context;
 8013532:	490d      	ldr	r1, [pc, #52]	; (8013568 <hal_tim_add_int_callback+0x58>)
 8013534:	68fa      	ldr	r2, [r7, #12]
 8013536:	4613      	mov	r3, r2
 8013538:	005b      	lsls	r3, r3, #1
 801353a:	4413      	add	r3, r2
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	440b      	add	r3, r1
 8013540:	3304      	adds	r3, #4
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	601a      	str	r2, [r3, #0]
	tim_interrupt[tim].ready = true;
 8013546:	4908      	ldr	r1, [pc, #32]	; (8013568 <hal_tim_add_int_callback+0x58>)
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	4613      	mov	r3, r2
 801354c:	005b      	lsls	r3, r3, #1
 801354e:	4413      	add	r3, r2
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	440b      	add	r3, r1
 8013554:	3308      	adds	r3, #8
 8013556:	2201      	movs	r2, #1
 8013558:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 801355a:	f7f6 f84d 	bl	80095f8 <vPortExitCritical>
}
 801355e:	bf00      	nop
 8013560:	3710      	adds	r7, #16
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	20005afc 	.word	0x20005afc

0801356c <hal_tim_int_call>:

static void hal_tim_int_call(uint32_t tim) {
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
	if(tim_interrupt[tim].callback && tim_interrupt[tim].ready) {
 8013574:	4916      	ldr	r1, [pc, #88]	; (80135d0 <hal_tim_int_call+0x64>)
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	4613      	mov	r3, r2
 801357a:	005b      	lsls	r3, r3, #1
 801357c:	4413      	add	r3, r2
 801357e:	009b      	lsls	r3, r3, #2
 8013580:	440b      	add	r3, r1
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d01e      	beq.n	80135c6 <hal_tim_int_call+0x5a>
 8013588:	4911      	ldr	r1, [pc, #68]	; (80135d0 <hal_tim_int_call+0x64>)
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	4613      	mov	r3, r2
 801358e:	005b      	lsls	r3, r3, #1
 8013590:	4413      	add	r3, r2
 8013592:	009b      	lsls	r3, r3, #2
 8013594:	440b      	add	r3, r1
 8013596:	3308      	adds	r3, #8
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	b2db      	uxtb	r3, r3
 801359c:	2b00      	cmp	r3, #0
 801359e:	d012      	beq.n	80135c6 <hal_tim_int_call+0x5a>
		tim_interrupt[tim].callback(tim_interrupt[tim].context);
 80135a0:	490b      	ldr	r1, [pc, #44]	; (80135d0 <hal_tim_int_call+0x64>)
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	4613      	mov	r3, r2
 80135a6:	005b      	lsls	r3, r3, #1
 80135a8:	4413      	add	r3, r2
 80135aa:	009b      	lsls	r3, r3, #2
 80135ac:	440b      	add	r3, r1
 80135ae:	6819      	ldr	r1, [r3, #0]
 80135b0:	4807      	ldr	r0, [pc, #28]	; (80135d0 <hal_tim_int_call+0x64>)
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	4613      	mov	r3, r2
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	4413      	add	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4403      	add	r3, r0
 80135be:	3304      	adds	r3, #4
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	4618      	mov	r0, r3
 80135c4:	4788      	blx	r1
	}
}
 80135c6:	bf00      	nop
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	20005afc 	.word	0x20005afc

080135d4 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void) {
 80135d4:	b580      	push	{r7, lr}
 80135d6:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4)) {
 80135d8:	4806      	ldr	r0, [pc, #24]	; (80135f4 <TIM4_IRQHandler+0x20>)
 80135da:	f7ff ff09 	bl	80133f0 <LL_TIM_IsActiveFlag_UPDATE>
 80135de:	4603      	mov	r3, r0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d002      	beq.n	80135ea <TIM4_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM4);
 80135e4:	4803      	ldr	r0, [pc, #12]	; (80135f4 <TIM4_IRQHandler+0x20>)
 80135e6:	f7ff fef5 	bl	80133d4 <LL_TIM_ClearFlag_UPDATE>
	}

	hal_tim_int_call(4);
 80135ea:	2004      	movs	r0, #4
 80135ec:	f7ff ffbe 	bl	801356c <hal_tim_int_call>
}
 80135f0:	bf00      	nop
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	40000800 	.word	0x40000800

080135f8 <__NVIC_GetPriorityGrouping>:
{
 80135f8:	b480      	push	{r7}
 80135fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80135fc:	4b04      	ldr	r3, [pc, #16]	; (8013610 <__NVIC_GetPriorityGrouping+0x18>)
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	0a1b      	lsrs	r3, r3, #8
 8013602:	f003 0307 	and.w	r3, r3, #7
}
 8013606:	4618      	mov	r0, r3
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr
 8013610:	e000ed00 	.word	0xe000ed00

08013614 <__NVIC_EnableIRQ>:
{
 8013614:	b480      	push	{r7}
 8013616:	b083      	sub	sp, #12
 8013618:	af00      	add	r7, sp, #0
 801361a:	4603      	mov	r3, r0
 801361c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013622:	2b00      	cmp	r3, #0
 8013624:	db0b      	blt.n	801363e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013626:	79fb      	ldrb	r3, [r7, #7]
 8013628:	f003 021f 	and.w	r2, r3, #31
 801362c:	4907      	ldr	r1, [pc, #28]	; (801364c <__NVIC_EnableIRQ+0x38>)
 801362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013632:	095b      	lsrs	r3, r3, #5
 8013634:	2001      	movs	r0, #1
 8013636:	fa00 f202 	lsl.w	r2, r0, r2
 801363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801363e:	bf00      	nop
 8013640:	370c      	adds	r7, #12
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr
 801364a:	bf00      	nop
 801364c:	e000e100 	.word	0xe000e100

08013650 <__NVIC_SetPriority>:
{
 8013650:	b480      	push	{r7}
 8013652:	b083      	sub	sp, #12
 8013654:	af00      	add	r7, sp, #0
 8013656:	4603      	mov	r3, r0
 8013658:	6039      	str	r1, [r7, #0]
 801365a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013660:	2b00      	cmp	r3, #0
 8013662:	db0a      	blt.n	801367a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	b2da      	uxtb	r2, r3
 8013668:	490c      	ldr	r1, [pc, #48]	; (801369c <__NVIC_SetPriority+0x4c>)
 801366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801366e:	0112      	lsls	r2, r2, #4
 8013670:	b2d2      	uxtb	r2, r2
 8013672:	440b      	add	r3, r1
 8013674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013678:	e00a      	b.n	8013690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	b2da      	uxtb	r2, r3
 801367e:	4908      	ldr	r1, [pc, #32]	; (80136a0 <__NVIC_SetPriority+0x50>)
 8013680:	79fb      	ldrb	r3, [r7, #7]
 8013682:	f003 030f 	and.w	r3, r3, #15
 8013686:	3b04      	subs	r3, #4
 8013688:	0112      	lsls	r2, r2, #4
 801368a:	b2d2      	uxtb	r2, r2
 801368c:	440b      	add	r3, r1
 801368e:	761a      	strb	r2, [r3, #24]
}
 8013690:	bf00      	nop
 8013692:	370c      	adds	r7, #12
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr
 801369c:	e000e100 	.word	0xe000e100
 80136a0:	e000ed00 	.word	0xe000ed00

080136a4 <NVIC_EncodePriority>:
{
 80136a4:	b480      	push	{r7}
 80136a6:	b089      	sub	sp, #36	; 0x24
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f003 0307 	and.w	r3, r3, #7
 80136b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80136b8:	69fb      	ldr	r3, [r7, #28]
 80136ba:	f1c3 0307 	rsb	r3, r3, #7
 80136be:	2b04      	cmp	r3, #4
 80136c0:	bf28      	it	cs
 80136c2:	2304      	movcs	r3, #4
 80136c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	3304      	adds	r3, #4
 80136ca:	2b06      	cmp	r3, #6
 80136cc:	d902      	bls.n	80136d4 <NVIC_EncodePriority+0x30>
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	3b03      	subs	r3, #3
 80136d2:	e000      	b.n	80136d6 <NVIC_EncodePriority+0x32>
 80136d4:	2300      	movs	r3, #0
 80136d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80136d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	fa02 f303 	lsl.w	r3, r2, r3
 80136e2:	43da      	mvns	r2, r3
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	401a      	ands	r2, r3
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80136ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	fa01 f303 	lsl.w	r3, r1, r3
 80136f6:	43d9      	mvns	r1, r3
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80136fc:	4313      	orrs	r3, r2
}
 80136fe:	4618      	mov	r0, r3
 8013700:	3724      	adds	r7, #36	; 0x24
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr

0801370a <LL_USART_Enable>:
{
 801370a:	b480      	push	{r7}
 801370c:	b083      	sub	sp, #12
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	60da      	str	r2, [r3, #12]
}
 801371e:	bf00      	nop
 8013720:	370c      	adds	r7, #12
 8013722:	46bd      	mov	sp, r7
 8013724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013728:	4770      	bx	lr

0801372a <LL_USART_IsEnabled>:
{
 801372a:	b480      	push	{r7}
 801372c:	b083      	sub	sp, #12
 801372e:	af00      	add	r7, sp, #0
 8013730:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801373e:	bf0c      	ite	eq
 8013740:	2301      	moveq	r3, #1
 8013742:	2300      	movne	r3, #0
 8013744:	b2db      	uxtb	r3, r3
}
 8013746:	4618      	mov	r0, r3
 8013748:	370c      	adds	r7, #12
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr

08013752 <LL_USART_ConfigAsyncMode>:
{
 8013752:	b480      	push	{r7}
 8013754:	b083      	sub	sp, #12
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	691b      	ldr	r3, [r3, #16]
 801375e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	695b      	ldr	r3, [r3, #20]
 801376a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	615a      	str	r2, [r3, #20]
}
 8013772:	bf00      	nop
 8013774:	370c      	adds	r7, #12
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr

0801377e <LL_USART_IsActiveFlag_IDLE>:
{
 801377e:	b480      	push	{r7}
 8013780:	b083      	sub	sp, #12
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f003 0310 	and.w	r3, r3, #16
 801378e:	2b10      	cmp	r3, #16
 8013790:	bf0c      	ite	eq
 8013792:	2301      	moveq	r3, #1
 8013794:	2300      	movne	r3, #0
 8013796:	b2db      	uxtb	r3, r3
}
 8013798:	4618      	mov	r0, r3
 801379a:	370c      	adds	r7, #12
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <LL_USART_IsActiveFlag_TXE>:
{
 80137a4:	b480      	push	{r7}
 80137a6:	b083      	sub	sp, #12
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137b4:	2b80      	cmp	r3, #128	; 0x80
 80137b6:	bf0c      	ite	eq
 80137b8:	2301      	moveq	r3, #1
 80137ba:	2300      	movne	r3, #0
 80137bc:	b2db      	uxtb	r3, r3
}
 80137be:	4618      	mov	r0, r3
 80137c0:	370c      	adds	r7, #12
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr

080137ca <LL_USART_ClearFlag_IDLE>:
{
 80137ca:	b480      	push	{r7}
 80137cc:	b085      	sub	sp, #20
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80137d8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80137e0:	68fb      	ldr	r3, [r7, #12]
}
 80137e2:	bf00      	nop
 80137e4:	3714      	adds	r7, #20
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr

080137ee <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80137ee:	b480      	push	{r7}
 80137f0:	b083      	sub	sp, #12
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	460b      	mov	r3, r1
 80137f8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80137fa:	78fa      	ldrb	r2, [r7, #3]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	605a      	str	r2, [r3, #4]
}
 8013800:	bf00      	nop
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <LL_DMA_SetDataTransferDirection>:
{
 801380c:	b480      	push	{r7}
 801380e:	b085      	sub	sp, #20
 8013810:	af00      	add	r7, sp, #0
 8013812:	60f8      	str	r0, [r7, #12]
 8013814:	60b9      	str	r1, [r7, #8]
 8013816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8013818:	4a0d      	ldr	r2, [pc, #52]	; (8013850 <LL_DMA_SetDataTransferDirection+0x44>)
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	4413      	add	r3, r2
 801381e:	781b      	ldrb	r3, [r3, #0]
 8013820:	461a      	mov	r2, r3
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	4413      	add	r3, r2
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801382c:	4908      	ldr	r1, [pc, #32]	; (8013850 <LL_DMA_SetDataTransferDirection+0x44>)
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	440b      	add	r3, r1
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	4619      	mov	r1, r3
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	440b      	add	r3, r1
 801383a:	4619      	mov	r1, r3
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	4313      	orrs	r3, r2
 8013840:	600b      	str	r3, [r1, #0]
}
 8013842:	bf00      	nop
 8013844:	3714      	adds	r7, #20
 8013846:	46bd      	mov	sp, r7
 8013848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384c:	4770      	bx	lr
 801384e:	bf00      	nop
 8013850:	08016490 	.word	0x08016490

08013854 <LL_DMA_SetMode>:
{
 8013854:	b480      	push	{r7}
 8013856:	b085      	sub	sp, #20
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8013860:	4a0d      	ldr	r2, [pc, #52]	; (8013898 <LL_DMA_SetMode+0x44>)
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	4413      	add	r3, r2
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	461a      	mov	r2, r3
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	4413      	add	r3, r2
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8013874:	4908      	ldr	r1, [pc, #32]	; (8013898 <LL_DMA_SetMode+0x44>)
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	440b      	add	r3, r1
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	4619      	mov	r1, r3
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	440b      	add	r3, r1
 8013882:	4619      	mov	r1, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	4313      	orrs	r3, r2
 8013888:	600b      	str	r3, [r1, #0]
}
 801388a:	bf00      	nop
 801388c:	3714      	adds	r7, #20
 801388e:	46bd      	mov	sp, r7
 8013890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	08016490 	.word	0x08016490

0801389c <LL_DMA_SetPeriphIncMode>:
{
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80138a8:	4a0d      	ldr	r2, [pc, #52]	; (80138e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	4413      	add	r3, r2
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	461a      	mov	r2, r3
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	4413      	add	r3, r2
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80138bc:	4908      	ldr	r1, [pc, #32]	; (80138e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	440b      	add	r3, r1
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	4619      	mov	r1, r3
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	440b      	add	r3, r1
 80138ca:	4619      	mov	r1, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4313      	orrs	r3, r2
 80138d0:	600b      	str	r3, [r1, #0]
}
 80138d2:	bf00      	nop
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop
 80138e0:	08016490 	.word	0x08016490

080138e4 <LL_DMA_SetMemoryIncMode>:
{
 80138e4:	b480      	push	{r7}
 80138e6:	b085      	sub	sp, #20
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80138f0:	4a0d      	ldr	r2, [pc, #52]	; (8013928 <LL_DMA_SetMemoryIncMode+0x44>)
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	4413      	add	r3, r2
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	461a      	mov	r2, r3
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	4413      	add	r3, r2
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013904:	4908      	ldr	r1, [pc, #32]	; (8013928 <LL_DMA_SetMemoryIncMode+0x44>)
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	440b      	add	r3, r1
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	4619      	mov	r1, r3
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	440b      	add	r3, r1
 8013912:	4619      	mov	r1, r3
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	4313      	orrs	r3, r2
 8013918:	600b      	str	r3, [r1, #0]
}
 801391a:	bf00      	nop
 801391c:	3714      	adds	r7, #20
 801391e:	46bd      	mov	sp, r7
 8013920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013924:	4770      	bx	lr
 8013926:	bf00      	nop
 8013928:	08016490 	.word	0x08016490

0801392c <LL_DMA_SetPeriphSize>:
{
 801392c:	b480      	push	{r7}
 801392e:	b085      	sub	sp, #20
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8013938:	4a0d      	ldr	r2, [pc, #52]	; (8013970 <LL_DMA_SetPeriphSize+0x44>)
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	4413      	add	r3, r2
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	461a      	mov	r2, r3
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	4413      	add	r3, r2
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801394c:	4908      	ldr	r1, [pc, #32]	; (8013970 <LL_DMA_SetPeriphSize+0x44>)
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	440b      	add	r3, r1
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	4619      	mov	r1, r3
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	440b      	add	r3, r1
 801395a:	4619      	mov	r1, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	4313      	orrs	r3, r2
 8013960:	600b      	str	r3, [r1, #0]
}
 8013962:	bf00      	nop
 8013964:	3714      	adds	r7, #20
 8013966:	46bd      	mov	sp, r7
 8013968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396c:	4770      	bx	lr
 801396e:	bf00      	nop
 8013970:	08016490 	.word	0x08016490

08013974 <LL_DMA_SetMemorySize>:
{
 8013974:	b480      	push	{r7}
 8013976:	b085      	sub	sp, #20
 8013978:	af00      	add	r7, sp, #0
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8013980:	4a0d      	ldr	r2, [pc, #52]	; (80139b8 <LL_DMA_SetMemorySize+0x44>)
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	4413      	add	r3, r2
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	461a      	mov	r2, r3
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	4413      	add	r3, r2
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8013994:	4908      	ldr	r1, [pc, #32]	; (80139b8 <LL_DMA_SetMemorySize+0x44>)
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	440b      	add	r3, r1
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	4619      	mov	r1, r3
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	440b      	add	r3, r1
 80139a2:	4619      	mov	r1, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4313      	orrs	r3, r2
 80139a8:	600b      	str	r3, [r1, #0]
}
 80139aa:	bf00      	nop
 80139ac:	3714      	adds	r7, #20
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop
 80139b8:	08016490 	.word	0x08016490

080139bc <LL_DMA_SetStreamPriorityLevel>:
{
 80139bc:	b480      	push	{r7}
 80139be:	b085      	sub	sp, #20
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80139c8:	4a0d      	ldr	r2, [pc, #52]	; (8013a00 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	4413      	add	r3, r2
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	461a      	mov	r2, r3
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	4413      	add	r3, r2
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80139dc:	4908      	ldr	r1, [pc, #32]	; (8013a00 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	440b      	add	r3, r1
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	4619      	mov	r1, r3
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	440b      	add	r3, r1
 80139ea:	4619      	mov	r1, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4313      	orrs	r3, r2
 80139f0:	600b      	str	r3, [r1, #0]
}
 80139f2:	bf00      	nop
 80139f4:	3714      	adds	r7, #20
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop
 8013a00:	08016490 	.word	0x08016490

08013a04 <LL_DMA_GetDataLength>:
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8013a0e:	4a07      	ldr	r2, [pc, #28]	; (8013a2c <LL_DMA_GetDataLength+0x28>)
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	4413      	add	r3, r2
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	461a      	mov	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	4413      	add	r3, r2
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	b29b      	uxth	r3, r3
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	370c      	adds	r7, #12
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr
 8013a2c:	08016490 	.word	0x08016490

08013a30 <LL_DMA_SetChannelSelection>:
{
 8013a30:	b480      	push	{r7}
 8013a32:	b085      	sub	sp, #20
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	60b9      	str	r1, [r7, #8]
 8013a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8013a3c:	4a0d      	ldr	r2, [pc, #52]	; (8013a74 <LL_DMA_SetChannelSelection+0x44>)
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	4413      	add	r3, r2
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	461a      	mov	r2, r3
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	4413      	add	r3, r2
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8013a50:	4908      	ldr	r1, [pc, #32]	; (8013a74 <LL_DMA_SetChannelSelection+0x44>)
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	440b      	add	r3, r1
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	4619      	mov	r1, r3
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	440b      	add	r3, r1
 8013a5e:	4619      	mov	r1, r3
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	4313      	orrs	r3, r2
 8013a64:	600b      	str	r3, [r1, #0]
}
 8013a66:	bf00      	nop
 8013a68:	3714      	adds	r7, #20
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr
 8013a72:	bf00      	nop
 8013a74:	08016490 	.word	0x08016490

08013a78 <LL_DMA_DisableFifoMode>:
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b083      	sub	sp, #12
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8013a82:	4a0c      	ldr	r2, [pc, #48]	; (8013ab4 <LL_DMA_DisableFifoMode+0x3c>)
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	4413      	add	r3, r2
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	4413      	add	r3, r2
 8013a90:	695b      	ldr	r3, [r3, #20]
 8013a92:	4908      	ldr	r1, [pc, #32]	; (8013ab4 <LL_DMA_DisableFifoMode+0x3c>)
 8013a94:	683a      	ldr	r2, [r7, #0]
 8013a96:	440a      	add	r2, r1
 8013a98:	7812      	ldrb	r2, [r2, #0]
 8013a9a:	4611      	mov	r1, r2
 8013a9c:	687a      	ldr	r2, [r7, #4]
 8013a9e:	440a      	add	r2, r1
 8013aa0:	f023 0304 	bic.w	r3, r3, #4
 8013aa4:	6153      	str	r3, [r2, #20]
}
 8013aa6:	bf00      	nop
 8013aa8:	370c      	adds	r7, #12
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop
 8013ab4:	08016490 	.word	0x08016490

08013ab8 <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b08c      	sub	sp, #48	; 0x30
 8013abc:	af02      	add	r7, sp, #8
 8013abe:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 8013ac0:	2307      	movs	r3, #7
 8013ac2:	9300      	str	r3, [sp, #0]
 8013ac4:	2303      	movs	r3, #3
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	2103      	movs	r1, #3
 8013aca:	4853      	ldr	r0, [pc, #332]	; (8013c18 <hal_uart1_init+0x160>)
 8013acc:	f7fc fed8 	bl	8010880 <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 8013ad0:	2307      	movs	r3, #7
 8013ad2:	9300      	str	r3, [sp, #0]
 8013ad4:	2303      	movs	r3, #3
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	2103      	movs	r1, #3
 8013ada:	4850      	ldr	r0, [pc, #320]	; (8013c1c <hal_uart1_init+0x164>)
 8013adc:	f7fc fed0 	bl	8010880 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	2105      	movs	r1, #5
 8013ae4:	203a      	movs	r0, #58	; 0x3a
 8013ae6:	f7ed fbf7 	bl	80012d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8013aea:	203a      	movs	r0, #58	; 0x3a
 8013aec:	f7ed fc10 	bl	8001310 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8013af0:	2200      	movs	r2, #0
 8013af2:	2105      	movs	r1, #5
 8013af4:	2046      	movs	r0, #70	; 0x46
 8013af6:	f7ed fbef 	bl	80012d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8013afa:	2046      	movs	r0, #70	; 0x46
 8013afc:	f7ed fc08 	bl	8001310 <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 8013b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013b04:	2102      	movs	r1, #2
 8013b06:	4846      	ldr	r0, [pc, #280]	; (8013c20 <hal_uart1_init+0x168>)
 8013b08:	f7ff ff92 	bl	8013a30 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	2102      	movs	r1, #2
 8013b10:	4843      	ldr	r0, [pc, #268]	; (8013c20 <hal_uart1_init+0x168>)
 8013b12:	f7ff fe7b 	bl	801380c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8013b16:	2200      	movs	r2, #0
 8013b18:	2102      	movs	r1, #2
 8013b1a:	4841      	ldr	r0, [pc, #260]	; (8013c20 <hal_uart1_init+0x168>)
 8013b1c:	f7ff ff4e 	bl	80139bc <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 8013b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013b24:	2102      	movs	r1, #2
 8013b26:	483e      	ldr	r0, [pc, #248]	; (8013c20 <hal_uart1_init+0x168>)
 8013b28:	f7ff fe94 	bl	8013854 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	2102      	movs	r1, #2
 8013b30:	483b      	ldr	r0, [pc, #236]	; (8013c20 <hal_uart1_init+0x168>)
 8013b32:	f7ff feb3 	bl	801389c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8013b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013b3a:	2102      	movs	r1, #2
 8013b3c:	4838      	ldr	r0, [pc, #224]	; (8013c20 <hal_uart1_init+0x168>)
 8013b3e:	f7ff fed1 	bl	80138e4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8013b42:	2200      	movs	r2, #0
 8013b44:	2102      	movs	r1, #2
 8013b46:	4836      	ldr	r0, [pc, #216]	; (8013c20 <hal_uart1_init+0x168>)
 8013b48:	f7ff fef0 	bl	801392c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	2102      	movs	r1, #2
 8013b50:	4833      	ldr	r0, [pc, #204]	; (8013c20 <hal_uart1_init+0x168>)
 8013b52:	f7ff ff0f 	bl	8013974 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 8013b56:	2102      	movs	r1, #2
 8013b58:	4831      	ldr	r0, [pc, #196]	; (8013c20 <hal_uart1_init+0x168>)
 8013b5a:	f7ff ff8d 	bl	8013a78 <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 8013b5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013b62:	2107      	movs	r1, #7
 8013b64:	482e      	ldr	r0, [pc, #184]	; (8013c20 <hal_uart1_init+0x168>)
 8013b66:	f7ff ff63 	bl	8013a30 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8013b6a:	2240      	movs	r2, #64	; 0x40
 8013b6c:	2107      	movs	r1, #7
 8013b6e:	482c      	ldr	r0, [pc, #176]	; (8013c20 <hal_uart1_init+0x168>)
 8013b70:	f7ff fe4c 	bl	801380c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8013b74:	2200      	movs	r2, #0
 8013b76:	2107      	movs	r1, #7
 8013b78:	4829      	ldr	r0, [pc, #164]	; (8013c20 <hal_uart1_init+0x168>)
 8013b7a:	f7ff ff1f 	bl	80139bc <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8013b7e:	2200      	movs	r2, #0
 8013b80:	2107      	movs	r1, #7
 8013b82:	4827      	ldr	r0, [pc, #156]	; (8013c20 <hal_uart1_init+0x168>)
 8013b84:	f7ff fe66 	bl	8013854 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8013b88:	2200      	movs	r2, #0
 8013b8a:	2107      	movs	r1, #7
 8013b8c:	4824      	ldr	r0, [pc, #144]	; (8013c20 <hal_uart1_init+0x168>)
 8013b8e:	f7ff fe85 	bl	801389c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8013b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013b96:	2107      	movs	r1, #7
 8013b98:	4821      	ldr	r0, [pc, #132]	; (8013c20 <hal_uart1_init+0x168>)
 8013b9a:	f7ff fea3 	bl	80138e4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	2107      	movs	r1, #7
 8013ba2:	481f      	ldr	r0, [pc, #124]	; (8013c20 <hal_uart1_init+0x168>)
 8013ba4:	f7ff fec2 	bl	801392c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8013ba8:	2200      	movs	r2, #0
 8013baa:	2107      	movs	r1, #7
 8013bac:	481c      	ldr	r0, [pc, #112]	; (8013c20 <hal_uart1_init+0x168>)
 8013bae:	f7ff fee1 	bl	8013974 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 8013bb2:	2107      	movs	r1, #7
 8013bb4:	481a      	ldr	r0, [pc, #104]	; (8013c20 <hal_uart1_init+0x168>)
 8013bb6:	f7ff ff5f 	bl	8013a78 <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8013bca:	230c      	movs	r3, #12
 8013bcc:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 8013bd6:	f107 030c 	add.w	r3, r7, #12
 8013bda:	4619      	mov	r1, r3
 8013bdc:	4811      	ldr	r0, [pc, #68]	; (8013c24 <hal_uart1_init+0x16c>)
 8013bde:	f7f1 fad5 	bl	800518c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8013be2:	4810      	ldr	r0, [pc, #64]	; (8013c24 <hal_uart1_init+0x16c>)
 8013be4:	f7ff fdb5 	bl	8013752 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 8013be8:	480e      	ldr	r0, [pc, #56]	; (8013c24 <hal_uart1_init+0x16c>)
 8013bea:	f7ff fd8e 	bl	801370a <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8013bee:	f7ff fd03 	bl	80135f8 <__NVIC_GetPriorityGrouping>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	2105      	movs	r1, #5
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7ff fd53 	bl	80136a4 <NVIC_EncodePriority>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	4619      	mov	r1, r3
 8013c02:	2025      	movs	r0, #37	; 0x25
 8013c04:	f7ff fd24 	bl	8013650 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8013c08:	2025      	movs	r0, #37	; 0x25
 8013c0a:	f7ff fd03 	bl	8013614 <__NVIC_EnableIRQ>
}
 8013c0e:	bf00      	nop
 8013c10:	3728      	adds	r7, #40	; 0x28
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	080163b8 	.word	0x080163b8
 8013c1c:	080163c0 	.word	0x080163c0
 8013c20:	40026400 	.word	0x40026400
 8013c24:	40011000 	.word	0x40011000

08013c28 <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	4603      	mov	r3, r0
 8013c30:	6039      	str	r1, [r7, #0]
 8013c32:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 8013c34:	79fb      	ldrb	r3, [r7, #7]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d102      	bne.n	8013c40 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 8013c3a:	6838      	ldr	r0, [r7, #0]
 8013c3c:	f7ff ff3c 	bl	8013ab8 <hal_uart1_init>
}
 8013c40:	bf00      	nop
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	4603      	mov	r3, r0
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
 8013c54:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 8013c56:	7bfb      	ldrb	r3, [r7, #15]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d11e      	bne.n	8013c9a <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8013c5c:	4810      	ldr	r0, [pc, #64]	; (8013ca0 <hal_uart_transfer+0x58>)
 8013c5e:	f7ff fd64 	bl	801372a <LL_USART_IsEnabled>
 8013c62:	4603      	mov	r3, r0
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d017      	beq.n	8013c98 <hal_uart_transfer+0x50>

        while(size > 0) {
 8013c68:	e012      	b.n	8013c90 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 8013c6a:	bf00      	nop
 8013c6c:	480c      	ldr	r0, [pc, #48]	; (8013ca0 <hal_uart_transfer+0x58>)
 8013c6e:	f7ff fd99 	bl	80137a4 <LL_USART_IsActiveFlag_TXE>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d0f9      	beq.n	8013c6c <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	4808      	ldr	r0, [pc, #32]	; (8013ca0 <hal_uart_transfer+0x58>)
 8013c80:	f7ff fdb5 	bl	80137ee <LL_USART_TransmitData8>
            buf++;
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	3301      	adds	r3, #1
 8013c88:	60bb      	str	r3, [r7, #8]
            size--;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1e9      	bne.n	8013c6a <hal_uart_transfer+0x22>
 8013c96:	e000      	b.n	8013c9a <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8013c98:	bf00      	nop
        }
    }
}
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}
 8013ca0:	40011000 	.word	0x40011000

08013ca4 <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 8013ca4:	b590      	push	{r4, r7, lr}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8013cae:	4813      	ldr	r0, [pc, #76]	; (8013cfc <USART1_IRQHandler+0x58>)
 8013cb0:	f7ff fd65 	bl	801377e <LL_USART_IsActiveFlag_IDLE>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d01c      	beq.n	8013cf4 <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 8013cba:	4810      	ldr	r0, [pc, #64]	; (8013cfc <USART1_IRQHandler+0x58>)
 8013cbc:	f7ff fd85 	bl	80137ca <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 8013cc0:	4b0f      	ldr	r3, [pc, #60]	; (8013d00 <USART1_IRQHandler+0x5c>)
 8013cc2:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8013cc6:	2102      	movs	r1, #2
 8013cc8:	480e      	ldr	r0, [pc, #56]	; (8013d04 <USART1_IRQHandler+0x60>)
 8013cca:	f7ff fe9b 	bl	8013a04 <LL_DMA_GetDataLength>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	4423      	add	r3, r4
 8013cd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	bfb8      	it	lt
 8013cda:	425b      	neglt	r3, r3
 8013cdc:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 8013cde:	4b08      	ldr	r3, [pc, #32]	; (8013d00 <USART1_IRQHandler+0x5c>)
 8013ce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	2bff      	cmp	r3, #255	; 0xff
 8013cea:	d903      	bls.n	8013cf4 <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 8013cec:	4b04      	ldr	r3, [pc, #16]	; (8013d00 <USART1_IRQHandler+0x5c>)
 8013cee:	2201      	movs	r2, #1
 8013cf0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 8013cf4:	bf00      	nop
 8013cf6:	370c      	adds	r7, #12
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd90      	pop	{r4, r7, pc}
 8013cfc:	40011000 	.word	0x40011000
 8013d00:	200049f8 	.word	0x200049f8
 8013d04:	40026400 	.word	0x40026400

08013d08 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	af00      	add	r7, sp, #0

}
 8013d0c:	bf00      	nop
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d14:	4770      	bx	lr

08013d16 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8013d16:	b480      	push	{r7}
 8013d18:	af00      	add	r7, sp, #0

}
 8013d1a:	bf00      	nop
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <btn_center_handler>:

static char rtc_string[50];

static void display_mp3list(u8g2_t* u8g2_handle);

static void btn_center_handler(void) {
 8013d24:	b580      	push	{r7, lr}
 8013d26:	af00      	add	r7, sp, #0
	input_send.type = InputTypePress;
 8013d28:	4b1b      	ldr	r3, [pc, #108]	; (8013d98 <btn_center_handler+0x74>)
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	705a      	strb	r2, [r3, #1]
	input_send.key = InputKeyCenter;
 8013d2e:	4b1a      	ldr	r3, [pc, #104]	; (8013d98 <btn_center_handler+0x74>)
 8013d30:	2202      	movs	r2, #2
 8013d32:	701a      	strb	r2, [r3, #0]
	input_send.arg = 0;
 8013d34:	4b18      	ldr	r3, [pc, #96]	; (8013d98 <btn_center_handler+0x74>)
 8013d36:	2200      	movs	r2, #0
 8013d38:	605a      	str	r2, [r3, #4]

	switch(current_layer) {
 8013d3a:	4b18      	ldr	r3, [pc, #96]	; (8013d9c <btn_center_handler+0x78>)
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d01b      	beq.n	8013d7a <btn_center_handler+0x56>
 8013d42:	2b02      	cmp	r3, #2
 8013d44:	d124      	bne.n	8013d90 <btn_center_handler+0x6c>
	case DisplayLayerList:
		current_layer = DisplayLayerMp3;
 8013d46:	4b15      	ldr	r3, [pc, #84]	; (8013d9c <btn_center_handler+0x78>)
 8013d48:	2201      	movs	r2, #1
 8013d4a:	701a      	strb	r2, [r3, #0]
		input_send.arg = InputArgSelMp3File;
 8013d4c:	4b12      	ldr	r3, [pc, #72]	; (8013d98 <btn_center_handler+0x74>)
 8013d4e:	2201      	movs	r2, #1
 8013d50:	605a      	str	r2, [r3, #4]
		MP3_SetFile(mp3list[mp3list_selnum]);
 8013d52:	4b13      	ldr	r3, [pc, #76]	; (8013da0 <btn_center_handler+0x7c>)
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	4613      	mov	r3, r2
 8013d58:	009b      	lsls	r3, r3, #2
 8013d5a:	4413      	add	r3, r2
 8013d5c:	009a      	lsls	r2, r3, #2
 8013d5e:	4413      	add	r3, r2
 8013d60:	4a10      	ldr	r2, [pc, #64]	; (8013da4 <btn_center_handler+0x80>)
 8013d62:	4413      	add	r3, r2
 8013d64:	4618      	mov	r0, r3
 8013d66:	f000 fbed 	bl	8014544 <MP3_SetFile>
		xQueueSend(mp3_queue, &input_send, 0);
 8013d6a:	4b0f      	ldr	r3, [pc, #60]	; (8013da8 <btn_center_handler+0x84>)
 8013d6c:	6818      	ldr	r0, [r3, #0]
 8013d6e:	2300      	movs	r3, #0
 8013d70:	2200      	movs	r2, #0
 8013d72:	4909      	ldr	r1, [pc, #36]	; (8013d98 <btn_center_handler+0x74>)
 8013d74:	f7f5 ff1e 	bl	8009bb4 <xQueueGenericSend>
		break;
 8013d78:	e00b      	b.n	8013d92 <btn_center_handler+0x6e>

	case DisplayLayerMp3:
		input_send.arg = InputArgMp3PlayPause;
 8013d7a:	4b07      	ldr	r3, [pc, #28]	; (8013d98 <btn_center_handler+0x74>)
 8013d7c:	2202      	movs	r2, #2
 8013d7e:	605a      	str	r2, [r3, #4]
		xQueueSend(mp3_queue, &input_send, 0);
 8013d80:	4b09      	ldr	r3, [pc, #36]	; (8013da8 <btn_center_handler+0x84>)
 8013d82:	6818      	ldr	r0, [r3, #0]
 8013d84:	2300      	movs	r3, #0
 8013d86:	2200      	movs	r2, #0
 8013d88:	4903      	ldr	r1, [pc, #12]	; (8013d98 <btn_center_handler+0x74>)
 8013d8a:	f7f5 ff13 	bl	8009bb4 <xQueueGenericSend>
		break;
 8013d8e:	e000      	b.n	8013d92 <btn_center_handler+0x6e>

	default:
		break;
 8013d90:	bf00      	nop
	}
}
 8013d92:	bf00      	nop
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	bf00      	nop
 8013d98:	20006cb8 	.word	0x20006cb8
 8013d9c:	20006cc8 	.word	0x20006cc8
 8013da0:	20006e68 	.word	0x20006e68
 8013da4:	20006cd4 	.word	0x20006cd4
 8013da8:	20006ea8 	.word	0x20006ea8

08013dac <btn_up_handler>:

static void btn_up_handler(void) {
 8013dac:	b580      	push	{r7, lr}
 8013dae:	af00      	add	r7, sp, #0
	switch(current_layer) {
 8013db0:	4b0f      	ldr	r3, [pc, #60]	; (8013df0 <btn_up_handler+0x44>)
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d010      	beq.n	8013dda <btn_up_handler+0x2e>
 8013db8:	2b02      	cmp	r3, #2
 8013dba:	d115      	bne.n	8013de8 <btn_up_handler+0x3c>
	case DisplayLayerList:
		if(mp3list_selnum == 0) {
 8013dbc:	4b0d      	ldr	r3, [pc, #52]	; (8013df4 <btn_up_handler+0x48>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d104      	bne.n	8013dce <btn_up_handler+0x22>
			mp3list_selnum = mp3list_maxnum;
 8013dc4:	4b0c      	ldr	r3, [pc, #48]	; (8013df8 <btn_up_handler+0x4c>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4a0a      	ldr	r2, [pc, #40]	; (8013df4 <btn_up_handler+0x48>)
 8013dca:	6013      	str	r3, [r2, #0]
		} else {
			mp3list_selnum--;
		}

		break;
 8013dcc:	e00d      	b.n	8013dea <btn_up_handler+0x3e>
			mp3list_selnum--;
 8013dce:	4b09      	ldr	r3, [pc, #36]	; (8013df4 <btn_up_handler+0x48>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	4a07      	ldr	r2, [pc, #28]	; (8013df4 <btn_up_handler+0x48>)
 8013dd6:	6013      	str	r3, [r2, #0]
		break;
 8013dd8:	e007      	b.n	8013dea <btn_up_handler+0x3e>

	case DisplayLayerMp3:
		current_layer = DisplayLayerList;
 8013dda:	4b05      	ldr	r3, [pc, #20]	; (8013df0 <btn_up_handler+0x44>)
 8013ddc:	2202      	movs	r2, #2
 8013dde:	701a      	strb	r2, [r3, #0]
		display_mp3list(&u8g2);
 8013de0:	4806      	ldr	r0, [pc, #24]	; (8013dfc <btn_up_handler+0x50>)
 8013de2:	f000 f897 	bl	8013f14 <display_mp3list>
		break;
 8013de6:	e000      	b.n	8013dea <btn_up_handler+0x3e>

	default:
		break;
 8013de8:	bf00      	nop
	}
}
 8013dea:	bf00      	nop
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	20006cc8 	.word	0x20006cc8
 8013df4:	20006e68 	.word	0x20006e68
 8013df8:	20006e64 	.word	0x20006e64
 8013dfc:	20005bbc 	.word	0x20005bbc

08013e00 <btn_down_handler>:

static void btn_down_handler(void) {
 8013e00:	b580      	push	{r7, lr}
 8013e02:	af00      	add	r7, sp, #0
	switch(current_layer) {
 8013e04:	4b0f      	ldr	r3, [pc, #60]	; (8013e44 <btn_down_handler+0x44>)
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d011      	beq.n	8013e30 <btn_down_handler+0x30>
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	d116      	bne.n	8013e3e <btn_down_handler+0x3e>
	case DisplayLayerList:
		if(mp3list_selnum >= mp3list_maxnum) {
 8013e10:	4b0d      	ldr	r3, [pc, #52]	; (8013e48 <btn_down_handler+0x48>)
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	4b0d      	ldr	r3, [pc, #52]	; (8013e4c <btn_down_handler+0x4c>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	db03      	blt.n	8013e24 <btn_down_handler+0x24>
			mp3list_selnum = 0;
 8013e1c:	4b0a      	ldr	r3, [pc, #40]	; (8013e48 <btn_down_handler+0x48>)
 8013e1e:	2200      	movs	r2, #0
 8013e20:	601a      	str	r2, [r3, #0]
		} else {
			mp3list_selnum++;
		}

		break;
 8013e22:	e00d      	b.n	8013e40 <btn_down_handler+0x40>
			mp3list_selnum++;
 8013e24:	4b08      	ldr	r3, [pc, #32]	; (8013e48 <btn_down_handler+0x48>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	3301      	adds	r3, #1
 8013e2a:	4a07      	ldr	r2, [pc, #28]	; (8013e48 <btn_down_handler+0x48>)
 8013e2c:	6013      	str	r3, [r2, #0]
		break;
 8013e2e:	e007      	b.n	8013e40 <btn_down_handler+0x40>

	case DisplayLayerMp3:
		current_layer = DisplayLayerList;
 8013e30:	4b04      	ldr	r3, [pc, #16]	; (8013e44 <btn_down_handler+0x44>)
 8013e32:	2202      	movs	r2, #2
 8013e34:	701a      	strb	r2, [r3, #0]
		display_mp3list(&u8g2);
 8013e36:	4806      	ldr	r0, [pc, #24]	; (8013e50 <btn_down_handler+0x50>)
 8013e38:	f000 f86c 	bl	8013f14 <display_mp3list>
		break;
 8013e3c:	e000      	b.n	8013e40 <btn_down_handler+0x40>

	default:
		break;
 8013e3e:	bf00      	nop
	}
}
 8013e40:	bf00      	nop
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	20006cc8 	.word	0x20006cc8
 8013e48:	20006e68 	.word	0x20006e68
 8013e4c:	20006e64 	.word	0x20006e64
 8013e50:	20005bbc 	.word	0x20005bbc

08013e54 <btn_left_handler>:

static void btn_left_handler(void) {
 8013e54:	b480      	push	{r7}
 8013e56:	af00      	add	r7, sp, #0
	switch(current_layer) {
 8013e58:	4b06      	ldr	r3, [pc, #24]	; (8013e74 <btn_left_handler+0x20>)
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	2b02      	cmp	r3, #2
 8013e5e:	d103      	bne.n	8013e68 <btn_left_handler+0x14>
	case DisplayLayerList:
		current_layer = DisplayLayerMp3;
 8013e60:	4b04      	ldr	r3, [pc, #16]	; (8013e74 <btn_left_handler+0x20>)
 8013e62:	2201      	movs	r2, #1
 8013e64:	701a      	strb	r2, [r3, #0]
		break;
 8013e66:	e000      	b.n	8013e6a <btn_left_handler+0x16>

	default:
		break;
 8013e68:	bf00      	nop
	}
}
 8013e6a:	bf00      	nop
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e72:	4770      	bx	lr
 8013e74:	20006cc8 	.word	0x20006cc8

08013e78 <btn_right_handler>:

static void btn_right_handler(void) {
 8013e78:	b480      	push	{r7}
 8013e7a:	af00      	add	r7, sp, #0

}
 8013e7c:	bf00      	nop
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr
	...

08013e88 <MP3_SetFileList>:


static void MP3_SetFileList(DIR *dir) {
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b0ca      	sub	sp, #296	; 0x128
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8013e92:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013e96:	6018      	str	r0, [r3, #0]
	int i = 0;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	FILINFO info;

	while(1) {
		f_readdir(dir, &info);
 8013e9e:	f107 020c 	add.w	r2, r7, #12
 8013ea2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8013ea6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013eaa:	4611      	mov	r1, r2
 8013eac:	6818      	ldr	r0, [r3, #0]
 8013eae:	f7f4 fd3f 	bl	8008930 <f_readdir>
		if(!info.fname[0]) break;
 8013eb2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8013eb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013eba:	7d9b      	ldrb	r3, [r3, #22]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d019      	beq.n	8013ef4 <MP3_SetFileList+0x6c>
		snprintf(mp3list[i], 25, info.fname);
 8013ec0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	4413      	add	r3, r2
 8013eca:	009a      	lsls	r2, r3, #2
 8013ecc:	4413      	add	r3, r2
 8013ece:	4a0f      	ldr	r2, [pc, #60]	; (8013f0c <MP3_SetFileList+0x84>)
 8013ed0:	1898      	adds	r0, r3, r2
 8013ed2:	f107 030c 	add.w	r3, r7, #12
 8013ed6:	3316      	adds	r3, #22
 8013ed8:	461a      	mov	r2, r3
 8013eda:	2119      	movs	r1, #25
 8013edc:	f000 fcea 	bl	80148b4 <sniprintf>
		i++;
 8013ee0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		if(i>=16) break;
 8013eea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013eee:	2b0f      	cmp	r3, #15
 8013ef0:	dc02      	bgt.n	8013ef8 <MP3_SetFileList+0x70>
		f_readdir(dir, &info);
 8013ef2:	e7d4      	b.n	8013e9e <MP3_SetFileList+0x16>
		if(!info.fname[0]) break;
 8013ef4:	bf00      	nop
 8013ef6:	e000      	b.n	8013efa <MP3_SetFileList+0x72>
		if(i>=16) break;
 8013ef8:	bf00      	nop
	}

	mp3list_maxnum = i;
 8013efa:	4a05      	ldr	r2, [pc, #20]	; (8013f10 <MP3_SetFileList+0x88>)
 8013efc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013f00:	6013      	str	r3, [r2, #0]
}
 8013f02:	bf00      	nop
 8013f04:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}
 8013f0c:	20006cd4 	.word	0x20006cd4
 8013f10:	20006e64 	.word	0x20006e64

08013f14 <display_mp3list>:

static void display_mp3list(u8g2_t* u8g2_handle) {
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b084      	sub	sp, #16
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
	int i = mp3list_shownum, num = 0;
 8013f1c:	4b22      	ldr	r3, [pc, #136]	; (8013fa8 <display_mp3list+0x94>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	60fb      	str	r3, [r7, #12]
 8013f22:	2300      	movs	r3, #0
 8013f24:	60bb      	str	r3, [r7, #8]

	while(mp3list[i] != NULL && num < 4) {
 8013f26:	e022      	b.n	8013f6e <display_mp3list+0x5a>
	    u8g2_SetFont(u8g2_handle, u8g2_font_5x8_tf);
 8013f28:	4920      	ldr	r1, [pc, #128]	; (8013fac <display_mp3list+0x98>)
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7fa fddc 	bl	800eae8 <u8g2_SetFont>
		u8g2_DrawStr(u8g2_handle, 0, 25 + 10*i, mp3list[i]);
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	461a      	mov	r2, r3
 8013f36:	0092      	lsls	r2, r2, #2
 8013f38:	4413      	add	r3, r2
 8013f3a:	005b      	lsls	r3, r3, #1
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	3319      	adds	r3, #25
 8013f40:	b2d9      	uxtb	r1, r3
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	4613      	mov	r3, r2
 8013f46:	009b      	lsls	r3, r3, #2
 8013f48:	4413      	add	r3, r2
 8013f4a:	009a      	lsls	r2, r3, #2
 8013f4c:	4413      	add	r3, r2
 8013f4e:	4a18      	ldr	r2, [pc, #96]	; (8013fb0 <display_mp3list+0x9c>)
 8013f50:	4413      	add	r3, r2
 8013f52:	460a      	mov	r2, r1
 8013f54:	2100      	movs	r1, #0
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7fa fd24 	bl	800e9a4 <u8g2_DrawStr>
		u8g2_SendBuffer(u8g2_handle);
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f7fa f80f 	bl	800df80 <u8g2_SendBuffer>

		i++;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	3301      	adds	r3, #1
 8013f66:	60fb      	str	r3, [r7, #12]
		num++;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	60bb      	str	r3, [r7, #8]
	while(mp3list[i] != NULL && num < 4) {
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	2b03      	cmp	r3, #3
 8013f72:	ddd9      	ble.n	8013f28 <display_mp3list+0x14>
	}

	mp3list_prevnum = mp3list_shownum;
 8013f74:	4b0c      	ldr	r3, [pc, #48]	; (8013fa8 <display_mp3list+0x94>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4a0e      	ldr	r2, [pc, #56]	; (8013fb4 <display_mp3list+0xa0>)
 8013f7a:	6013      	str	r3, [r2, #0]

	if(mp3list_shownum + i > mp3list_maxnum) {
 8013f7c:	4b0a      	ldr	r3, [pc, #40]	; (8013fa8 <display_mp3list+0x94>)
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	441a      	add	r2, r3
 8013f84:	4b0c      	ldr	r3, [pc, #48]	; (8013fb8 <display_mp3list+0xa4>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	dd03      	ble.n	8013f94 <display_mp3list+0x80>
		mp3list_shownum = 0;
 8013f8c:	4b06      	ldr	r3, [pc, #24]	; (8013fa8 <display_mp3list+0x94>)
 8013f8e:	2200      	movs	r2, #0
 8013f90:	601a      	str	r2, [r3, #0]
	} else {
		mp3list_shownum += i;
	}
}
 8013f92:	e005      	b.n	8013fa0 <display_mp3list+0x8c>
		mp3list_shownum += i;
 8013f94:	4b04      	ldr	r3, [pc, #16]	; (8013fa8 <display_mp3list+0x94>)
 8013f96:	681a      	ldr	r2, [r3, #0]
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	4a02      	ldr	r2, [pc, #8]	; (8013fa8 <display_mp3list+0x94>)
 8013f9e:	6013      	str	r3, [r2, #0]
}
 8013fa0:	bf00      	nop
 8013fa2:	3710      	adds	r7, #16
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	20006e6c 	.word	0x20006e6c
 8013fac:	08015bf0 	.word	0x08015bf0
 8013fb0:	20006cd4 	.word	0x20006cd4
 8013fb4:	20006e70 	.word	0x20006e70
 8013fb8:	20006e64 	.word	0x20006e64

08013fbc <refresh_rtc_timercb>:


static void refresh_rtc_timercb (TimerHandle_t xTimer) {
 8013fbc:	b5b0      	push	{r4, r5, r7, lr}
 8013fbe:	b086      	sub	sp, #24
 8013fc0:	af04      	add	r7, sp, #16
 8013fc2:	6078      	str	r0, [r7, #4]
	ds3231_get_time(&ds3231_time);
 8013fc4:	4818      	ldr	r0, [pc, #96]	; (8014028 <refresh_rtc_timercb+0x6c>)
 8013fc6:	f7ec fb45 	bl	8000654 <ds3231_get_time>
    u8g2_SetFont(&u8g2, u8g2_font_5x8_tf);
 8013fca:	4918      	ldr	r1, [pc, #96]	; (801402c <refresh_rtc_timercb+0x70>)
 8013fcc:	4818      	ldr	r0, [pc, #96]	; (8014030 <refresh_rtc_timercb+0x74>)
 8013fce:	f7fa fd8b 	bl	800eae8 <u8g2_SetFont>
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 8013fd2:	4b15      	ldr	r3, [pc, #84]	; (8014028 <refresh_rtc_timercb+0x6c>)
 8013fd4:	795b      	ldrb	r3, [r3, #5]
 8013fd6:	461c      	mov	r4, r3
 8013fd8:	4b13      	ldr	r3, [pc, #76]	; (8014028 <refresh_rtc_timercb+0x6c>)
 8013fda:	791b      	ldrb	r3, [r3, #4]
 8013fdc:	461d      	mov	r5, r3
 8013fde:	4b12      	ldr	r3, [pc, #72]	; (8014028 <refresh_rtc_timercb+0x6c>)
 8013fe0:	78db      	ldrb	r3, [r3, #3]
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7ec fb9e 	bl	8000724 <ds3231_day_to_string>
 8013fe8:	4603      	mov	r3, r0
			ds3231_time.hour, ds3231_time.min, ds3231_time.sec);
 8013fea:	4a0f      	ldr	r2, [pc, #60]	; (8014028 <refresh_rtc_timercb+0x6c>)
 8013fec:	7892      	ldrb	r2, [r2, #2]
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 8013fee:	4611      	mov	r1, r2
			ds3231_time.hour, ds3231_time.min, ds3231_time.sec);
 8013ff0:	4a0d      	ldr	r2, [pc, #52]	; (8014028 <refresh_rtc_timercb+0x6c>)
 8013ff2:	7852      	ldrb	r2, [r2, #1]
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 8013ff4:	4610      	mov	r0, r2
			ds3231_time.hour, ds3231_time.min, ds3231_time.sec);
 8013ff6:	4a0c      	ldr	r2, [pc, #48]	; (8014028 <refresh_rtc_timercb+0x6c>)
 8013ff8:	7812      	ldrb	r2, [r2, #0]
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 8013ffa:	9203      	str	r2, [sp, #12]
 8013ffc:	9002      	str	r0, [sp, #8]
 8013ffe:	9101      	str	r1, [sp, #4]
 8014000:	9300      	str	r3, [sp, #0]
 8014002:	462b      	mov	r3, r5
 8014004:	4622      	mov	r2, r4
 8014006:	490b      	ldr	r1, [pc, #44]	; (8014034 <refresh_rtc_timercb+0x78>)
 8014008:	480b      	ldr	r0, [pc, #44]	; (8014038 <refresh_rtc_timercb+0x7c>)
 801400a:	f000 fc87 	bl	801491c <siprintf>
	u8g2_DrawStr(&u8g2, 0, 10, rtc_string);
 801400e:	4b0a      	ldr	r3, [pc, #40]	; (8014038 <refresh_rtc_timercb+0x7c>)
 8014010:	220a      	movs	r2, #10
 8014012:	2100      	movs	r1, #0
 8014014:	4806      	ldr	r0, [pc, #24]	; (8014030 <refresh_rtc_timercb+0x74>)
 8014016:	f7fa fcc5 	bl	800e9a4 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 801401a:	4805      	ldr	r0, [pc, #20]	; (8014030 <refresh_rtc_timercb+0x74>)
 801401c:	f7f9 ffb0 	bl	800df80 <u8g2_SendBuffer>
}
 8014020:	bf00      	nop
 8014022:	3708      	adds	r7, #8
 8014024:	46bd      	mov	sp, r7
 8014026:	bdb0      	pop	{r4, r5, r7, pc}
 8014028:	20006ccc 	.word	0x20006ccc
 801402c:	08015bf0 	.word	0x08015bf0
 8014030:	20005bbc 	.word	0x20005bbc
 8014034:	0801569c 	.word	0x0801569c
 8014038:	20006e74 	.word	0x20006e74

0801403c <displayThread>:

void displayThread(void* param) {
 801403c:	b590      	push	{r4, r7, lr}
 801403e:	b085      	sub	sp, #20
 8014040:	af02      	add	r7, sp, #8
 8014042:	6078      	str	r0, [r7, #4]
	current_layer = DisplayLayerList;
 8014044:	4b3d      	ldr	r3, [pc, #244]	; (801413c <displayThread+0x100>)
 8014046:	2202      	movs	r2, #2
 8014048:	701a      	strb	r2, [r3, #0]

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 801404a:	4b3d      	ldr	r3, [pc, #244]	; (8014140 <displayThread+0x104>)
 801404c:	4a3d      	ldr	r2, [pc, #244]	; (8014144 <displayThread+0x108>)
 801404e:	493e      	ldr	r1, [pc, #248]	; (8014148 <displayThread+0x10c>)
 8014050:	483e      	ldr	r0, [pc, #248]	; (801414c <displayThread+0x110>)
 8014052:	f7f9 ffb3 	bl	800dfbc <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2);
 8014056:	483d      	ldr	r0, [pc, #244]	; (801414c <displayThread+0x110>)
 8014058:	f7fb fb7e 	bl	800f758 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 801405c:	2100      	movs	r1, #0
 801405e:	483b      	ldr	r0, [pc, #236]	; (801414c <displayThread+0x110>)
 8014060:	f7fb fb89 	bl	800f776 <u8x8_SetPowerSave>

	ds3231_register_driver(&i2c1drv);
 8014064:	483a      	ldr	r0, [pc, #232]	; (8014150 <displayThread+0x114>)
 8014066:	f7ec fae5 	bl	8000634 <ds3231_register_driver>

	rtc_timer = xTimerCreate("rtc",
 801406a:	4b3a      	ldr	r3, [pc, #232]	; (8014154 <displayThread+0x118>)
 801406c:	9300      	str	r3, [sp, #0]
 801406e:	2300      	movs	r3, #0
 8014070:	2201      	movs	r2, #1
 8014072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014076:	4838      	ldr	r0, [pc, #224]	; (8014158 <displayThread+0x11c>)
 8014078:	f7f7 fd52 	bl	800bb20 <xTimerCreate>
 801407c:	4603      	mov	r3, r0
 801407e:	4a37      	ldr	r2, [pc, #220]	; (801415c <displayThread+0x120>)
 8014080:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(RTC_TIMER_PERIOD),
							pdTRUE,
							(void*)0,
							refresh_rtc_timercb);

	if(rtc_timer == NULL) {
 8014082:	4b36      	ldr	r3, [pc, #216]	; (801415c <displayThread+0x120>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d103      	bne.n	8014092 <displayThread+0x56>
		hal_cli_printf("rtc timer create failed");
 801408a:	4835      	ldr	r0, [pc, #212]	; (8014160 <displayThread+0x124>)
 801408c:	f7fb fe88 	bl	800fda0 <hal_cli_printf>
		return;
 8014090:	e051      	b.n	8014136 <displayThread+0xfa>
	} else {
		if(xTimerStart(rtc_timer, 0) != pdPASS) {
 8014092:	4b32      	ldr	r3, [pc, #200]	; (801415c <displayThread+0x120>)
 8014094:	681c      	ldr	r4, [r3, #0]
 8014096:	f7f6 fec7 	bl	800ae28 <xTaskGetTickCount>
 801409a:	4602      	mov	r2, r0
 801409c:	2300      	movs	r3, #0
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	2300      	movs	r3, #0
 80140a2:	2101      	movs	r1, #1
 80140a4:	4620      	mov	r0, r4
 80140a6:	f7f7 fd97 	bl	800bbd8 <xTimerGenericCommand>
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d003      	beq.n	80140b8 <displayThread+0x7c>
			hal_cli_printf("rtc timer start failed");
 80140b0:	482c      	ldr	r0, [pc, #176]	; (8014164 <displayThread+0x128>)
 80140b2:	f7fb fe75 	bl	800fda0 <hal_cli_printf>
			return;
 80140b6:	e03e      	b.n	8014136 <displayThread+0xfa>
		}
	}

	f_mount(&mp3fatfs, "", 1);
 80140b8:	2201      	movs	r2, #1
 80140ba:	492b      	ldr	r1, [pc, #172]	; (8014168 <displayThread+0x12c>)
 80140bc:	482b      	ldr	r0, [pc, #172]	; (801416c <displayThread+0x130>)
 80140be:	f7f3 fe65 	bl	8007d8c <f_mount>
	f_opendir(&mp3dir, "/mp3");
 80140c2:	492b      	ldr	r1, [pc, #172]	; (8014170 <displayThread+0x134>)
 80140c4:	482b      	ldr	r0, [pc, #172]	; (8014174 <displayThread+0x138>)
 80140c6:	f7f4 fb76 	bl	80087b6 <f_opendir>
	MP3_SetFileList(&mp3dir);
 80140ca:	482a      	ldr	r0, [pc, #168]	; (8014174 <displayThread+0x138>)
 80140cc:	f7ff fedc 	bl	8013e88 <MP3_SetFileList>
	display_mp3list(&u8g2);
 80140d0:	481e      	ldr	r0, [pc, #120]	; (801414c <displayThread+0x110>)
 80140d2:	f7ff ff1f 	bl	8013f14 <display_mp3list>

    icon_draw_pause(&u8g2, 120, 0);
 80140d6:	2200      	movs	r2, #0
 80140d8:	2178      	movs	r1, #120	; 0x78
 80140da:	481c      	ldr	r0, [pc, #112]	; (801414c <displayThread+0x110>)
 80140dc:	f7ec fb96 	bl	800080c <icon_draw_pause>

	while(1) {
		xQueueReceive(display_queue, &input_rcv, portMAX_DELAY);
 80140e0:	4b25      	ldr	r3, [pc, #148]	; (8014178 <displayThread+0x13c>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80140e8:	4924      	ldr	r1, [pc, #144]	; (801417c <displayThread+0x140>)
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7f5 ff46 	bl	8009f7c <xQueueReceive>

		switch(input_rcv.key) {
 80140f0:	4b22      	ldr	r3, [pc, #136]	; (801417c <displayThread+0x140>)
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	2b04      	cmp	r3, #4
 80140f6:	d81c      	bhi.n	8014132 <displayThread+0xf6>
 80140f8:	a201      	add	r2, pc, #4	; (adr r2, 8014100 <displayThread+0xc4>)
 80140fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140fe:	bf00      	nop
 8014100:	08014127 	.word	0x08014127
 8014104:	0801412d 	.word	0x0801412d
 8014108:	08014115 	.word	0x08014115
 801410c:	0801411b 	.word	0x0801411b
 8014110:	08014121 	.word	0x08014121
		case InputKeyCenter:
			btn_center_handler();
 8014114:	f7ff fe06 	bl	8013d24 <btn_center_handler>
			break;
 8014118:	e00c      	b.n	8014134 <displayThread+0xf8>
		case InputKeyUp:
			btn_up_handler();
 801411a:	f7ff fe47 	bl	8013dac <btn_up_handler>
			break;
 801411e:	e009      	b.n	8014134 <displayThread+0xf8>
		case InputKeyDown:
			btn_down_handler();
 8014120:	f7ff fe6e 	bl	8013e00 <btn_down_handler>
			break;
 8014124:	e006      	b.n	8014134 <displayThread+0xf8>
		case InputKeyLeft:
			btn_left_handler();
 8014126:	f7ff fe95 	bl	8013e54 <btn_left_handler>
			break;
 801412a:	e003      	b.n	8014134 <displayThread+0xf8>
		case InputKeyRight:
			btn_right_handler();
 801412c:	f7ff fea4 	bl	8013e78 <btn_right_handler>
			break;
 8014130:	e000      	b.n	8014134 <displayThread+0xf8>

		default:
			break;
 8014132:	bf00      	nop
		xQueueReceive(display_queue, &input_rcv, portMAX_DELAY);
 8014134:	e7d4      	b.n	80140e0 <displayThread+0xa4>
		}
	}
}
 8014136:	370c      	adds	r7, #12
 8014138:	46bd      	mov	sp, r7
 801413a:	bd90      	pop	{r4, r7, pc}
 801413c:	20006cc8 	.word	0x20006cc8
 8014140:	08000891 	.word	0x08000891
 8014144:	080009b1 	.word	0x080009b1
 8014148:	080162ec 	.word	0x080162ec
 801414c:	20005bbc 	.word	0x20005bbc
 8014150:	20005984 	.word	0x20005984
 8014154:	08013fbd 	.word	0x08013fbd
 8014158:	080156b0 	.word	0x080156b0
 801415c:	20005c44 	.word	0x20005c44
 8014160:	080156b4 	.word	0x080156b4
 8014164:	080156cc 	.word	0x080156cc
 8014168:	080156e4 	.word	0x080156e4
 801416c:	20005c48 	.word	0x20005c48
 8014170:	080156e8 	.word	0x080156e8
 8014174:	20006c80 	.word	0x20006c80
 8014178:	20006eac 	.word	0x20006eac
 801417c:	20006cc0 	.word	0x20006cc0

08014180 <input_button_exti_cb>:
#include "event.h"
#include "queue.h"

static InputEvent input_ev;

static void input_button_exti_cb(void* context) {
 8014180:	b580      	push	{r7, lr}
 8014182:	b084      	sub	sp, #16
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken;
	int* key = context;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	60fb      	str	r3, [r7, #12]

	switch(*key) {
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b04      	cmp	r3, #4
 8014192:	d849      	bhi.n	8014228 <input_button_exti_cb+0xa8>
 8014194:	a201      	add	r2, pc, #4	; (adr r2, 801419c <input_button_exti_cb+0x1c>)
 8014196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801419a:	bf00      	nop
 801419c:	080141b1 	.word	0x080141b1
 80141a0:	080141c9 	.word	0x080141c9
 80141a4:	080141e1 	.word	0x080141e1
 80141a8:	080141f9 	.word	0x080141f9
 80141ac:	08014211 	.word	0x08014211
	case InputKeyLeft:
		input_ev.key = InputKeyLeft;
 80141b0:	4b28      	ldr	r3, [pc, #160]	; (8014254 <input_button_exti_cb+0xd4>)
 80141b2:	2200      	movs	r2, #0
 80141b4:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 80141b6:	4b28      	ldr	r3, [pc, #160]	; (8014258 <input_button_exti_cb+0xd8>)
 80141b8:	6818      	ldr	r0, [r3, #0]
 80141ba:	f107 0208 	add.w	r2, r7, #8
 80141be:	2300      	movs	r3, #0
 80141c0:	4924      	ldr	r1, [pc, #144]	; (8014254 <input_button_exti_cb+0xd4>)
 80141c2:	f7f5 fe1d 	bl	8009e00 <xQueueGenericSendFromISR>
		break;
 80141c6:	e030      	b.n	801422a <input_button_exti_cb+0xaa>
	case InputKeyRight:
		input_ev.key = InputKeyRight;
 80141c8:	4b22      	ldr	r3, [pc, #136]	; (8014254 <input_button_exti_cb+0xd4>)
 80141ca:	2201      	movs	r2, #1
 80141cc:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 80141ce:	4b22      	ldr	r3, [pc, #136]	; (8014258 <input_button_exti_cb+0xd8>)
 80141d0:	6818      	ldr	r0, [r3, #0]
 80141d2:	f107 0208 	add.w	r2, r7, #8
 80141d6:	2300      	movs	r3, #0
 80141d8:	491e      	ldr	r1, [pc, #120]	; (8014254 <input_button_exti_cb+0xd4>)
 80141da:	f7f5 fe11 	bl	8009e00 <xQueueGenericSendFromISR>
		break;
 80141de:	e024      	b.n	801422a <input_button_exti_cb+0xaa>
	case InputKeyCenter:
		input_ev.key = InputKeyCenter;
 80141e0:	4b1c      	ldr	r3, [pc, #112]	; (8014254 <input_button_exti_cb+0xd4>)
 80141e2:	2202      	movs	r2, #2
 80141e4:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 80141e6:	4b1c      	ldr	r3, [pc, #112]	; (8014258 <input_button_exti_cb+0xd8>)
 80141e8:	6818      	ldr	r0, [r3, #0]
 80141ea:	f107 0208 	add.w	r2, r7, #8
 80141ee:	2300      	movs	r3, #0
 80141f0:	4918      	ldr	r1, [pc, #96]	; (8014254 <input_button_exti_cb+0xd4>)
 80141f2:	f7f5 fe05 	bl	8009e00 <xQueueGenericSendFromISR>
		break;
 80141f6:	e018      	b.n	801422a <input_button_exti_cb+0xaa>
	case InputKeyUp:
		input_ev.key = InputKeyUp;
 80141f8:	4b16      	ldr	r3, [pc, #88]	; (8014254 <input_button_exti_cb+0xd4>)
 80141fa:	2203      	movs	r2, #3
 80141fc:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 80141fe:	4b16      	ldr	r3, [pc, #88]	; (8014258 <input_button_exti_cb+0xd8>)
 8014200:	6818      	ldr	r0, [r3, #0]
 8014202:	f107 0208 	add.w	r2, r7, #8
 8014206:	2300      	movs	r3, #0
 8014208:	4912      	ldr	r1, [pc, #72]	; (8014254 <input_button_exti_cb+0xd4>)
 801420a:	f7f5 fdf9 	bl	8009e00 <xQueueGenericSendFromISR>
		break;
 801420e:	e00c      	b.n	801422a <input_button_exti_cb+0xaa>
	case InputKeyDown:
		input_ev.key = InputKeyDown;
 8014210:	4b10      	ldr	r3, [pc, #64]	; (8014254 <input_button_exti_cb+0xd4>)
 8014212:	2204      	movs	r2, #4
 8014214:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 8014216:	4b10      	ldr	r3, [pc, #64]	; (8014258 <input_button_exti_cb+0xd8>)
 8014218:	6818      	ldr	r0, [r3, #0]
 801421a:	f107 0208 	add.w	r2, r7, #8
 801421e:	2300      	movs	r3, #0
 8014220:	490c      	ldr	r1, [pc, #48]	; (8014254 <input_button_exti_cb+0xd4>)
 8014222:	f7f5 fded 	bl	8009e00 <xQueueGenericSendFromISR>
		break;
 8014226:	e000      	b.n	801422a <input_button_exti_cb+0xaa>
	default:
		break;
 8014228:	bf00      	nop
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d00a      	beq.n	8014246 <input_button_exti_cb+0xc6>
 8014230:	f7f9 f8e2 	bl	800d3f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8014234:	4b09      	ldr	r3, [pc, #36]	; (801425c <input_button_exti_cb+0xdc>)
 8014236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801423a:	601a      	str	r2, [r3, #0]
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	f3bf 8f6f 	isb	sy
}
 8014244:	e001      	b.n	801424a <input_button_exti_cb+0xca>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8014246:	f7f9 f8bb 	bl	800d3c0 <SEGGER_SYSVIEW_RecordExitISR>
}
 801424a:	bf00      	nop
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	20006eb0 	.word	0x20006eb0
 8014258:	20006eac 	.word	0x20006eac
 801425c:	e000ed04 	.word	0xe000ed04

08014260 <inputThread>:


void inputThread(void* param) {
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < InputKeyNum; i++) {
 8014268:	2300      	movs	r3, #0
 801426a:	60fb      	str	r3, [r7, #12]
 801426c:	e00f      	b.n	801428e <inputThread+0x2e>
		hal_gpio_add_exti_callback(input_pins[i].gpio, input_button_exti_cb, &input_pins[i].key);
 801426e:	4a11      	ldr	r2, [pc, #68]	; (80142b4 <inputThread+0x54>)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	00db      	lsls	r3, r3, #3
 801427a:	4a0e      	ldr	r2, [pc, #56]	; (80142b4 <inputThread+0x54>)
 801427c:	4413      	add	r3, r2
 801427e:	3304      	adds	r3, #4
 8014280:	461a      	mov	r2, r3
 8014282:	490d      	ldr	r1, [pc, #52]	; (80142b8 <inputThread+0x58>)
 8014284:	f7fc fd72 	bl	8010d6c <hal_gpio_add_exti_callback>
	for(int i = 0; i < InputKeyNum; i++) {
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	3301      	adds	r3, #1
 801428c:	60fb      	str	r3, [r7, #12]
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	2b04      	cmp	r3, #4
 8014292:	ddec      	ble.n	801426e <inputThread+0xe>
	}

	input_ev.key = InputKeyNone;
 8014294:	4b09      	ldr	r3, [pc, #36]	; (80142bc <inputThread+0x5c>)
 8014296:	2206      	movs	r2, #6
 8014298:	701a      	strb	r2, [r3, #0]
	input_ev.type = InputTypeNone;
 801429a:	4b08      	ldr	r3, [pc, #32]	; (80142bc <inputThread+0x5c>)
 801429c:	2200      	movs	r2, #0
 801429e:	705a      	strb	r2, [r3, #1]
	input_ev.arg = 0;
 80142a0:	4b06      	ldr	r3, [pc, #24]	; (80142bc <inputThread+0x5c>)
 80142a2:	2200      	movs	r2, #0
 80142a4:	605a      	str	r2, [r3, #4]

	while(1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80142a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142aa:	2101      	movs	r1, #1
 80142ac:	2000      	movs	r0, #0
 80142ae:	f7f7 fb1d 	bl	800b8ec <ulTaskGenericNotifyTake>
 80142b2:	e7f8      	b.n	80142a6 <inputThread+0x46>
 80142b4:	08016448 	.word	0x08016448
 80142b8:	08014181 	.word	0x08014181
 80142bc:	20006eb0 	.word	0x20006eb0

080142c0 <LL_TIM_ClearFlag_UPDATE>:
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f06f 0201 	mvn.w	r2, #1
 80142ce:	611a      	str	r2, [r3, #16]
}
 80142d0:	bf00      	nop
 80142d2:	370c      	adds	r7, #12
 80142d4:	46bd      	mov	sp, r7
 80142d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142da:	4770      	bx	lr

080142dc <mp3_feed_notify_timcb>:

static uint8_t convert_volume_level(VolumeLevel vol);

/* sd 카드 api 내부에 있는 hal_delay때문에 ISR 내부에서는 사용못함 */
/* 주기를 20ms로 두었음 */
static void mp3_feed_notify_timcb(void* context) {
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80142e4:	2300      	movs	r3, #0
 80142e6:	60fb      	str	r3, [r7, #12]
	LL_TIM_ClearFlag_UPDATE(TIM4);
 80142e8:	4810      	ldr	r0, [pc, #64]	; (801432c <mp3_feed_notify_timcb+0x50>)
 80142ea:	f7ff ffe9 	bl	80142c0 <LL_TIM_ClearFlag_UPDATE>
	input_rcv.key = InputKeyNone;
 80142ee:	4b10      	ldr	r3, [pc, #64]	; (8014330 <mp3_feed_notify_timcb+0x54>)
 80142f0:	2206      	movs	r2, #6
 80142f2:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(mp3_queue, &input_rcv, &xHigherPriorityTaskWoken);
 80142f4:	4b0f      	ldr	r3, [pc, #60]	; (8014334 <mp3_feed_notify_timcb+0x58>)
 80142f6:	6818      	ldr	r0, [r3, #0]
 80142f8:	f107 020c 	add.w	r2, r7, #12
 80142fc:	2300      	movs	r3, #0
 80142fe:	490c      	ldr	r1, [pc, #48]	; (8014330 <mp3_feed_notify_timcb+0x54>)
 8014300:	f7f5 fd7e 	bl	8009e00 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d00a      	beq.n	8014320 <mp3_feed_notify_timcb+0x44>
 801430a:	f7f9 f875 	bl	800d3f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 801430e:	4b0a      	ldr	r3, [pc, #40]	; (8014338 <mp3_feed_notify_timcb+0x5c>)
 8014310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014314:	601a      	str	r2, [r3, #0]
 8014316:	f3bf 8f4f 	dsb	sy
 801431a:	f3bf 8f6f 	isb	sy
}
 801431e:	e001      	b.n	8014324 <mp3_feed_notify_timcb+0x48>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8014320:	f7f9 f84e 	bl	800d3c0 <SEGGER_SYSVIEW_RecordExitISR>
}
 8014324:	bf00      	nop
 8014326:	3710      	adds	r7, #16
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}
 801432c:	40000800 	.word	0x40000800
 8014330:	20006ec0 	.word	0x20006ec0
 8014334:	20006ea8 	.word	0x20006ea8
 8014338:	e000ed04 	.word	0xe000ed04

0801433c <volume_control_timercb>:

static void volume_control_timercb(TimerHandle_t xTimer) {
 801433c:	b580      	push	{r7, lr}
 801433e:	b084      	sub	sp, #16
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
	uint32_t potentiometer = 0;
 8014344:	2300      	movs	r3, #0
 8014346:	60bb      	str	r3, [r7, #8]
	uint8_t volume = 0xFF;
 8014348:	23ff      	movs	r3, #255	; 0xff
 801434a:	73fb      	strb	r3, [r7, #15]

	hal_adc_getdata(1, &potentiometer);
 801434c:	f107 0308 	add.w	r3, r7, #8
 8014350:	4619      	mov	r1, r3
 8014352:	2001      	movs	r0, #1
 8014354:	f7fb fb98 	bl	800fa88 <hal_adc_getdata>
	potentiometer >>= 9; // 12bit adc resolution msb 3비트만 참고하여 볼륨 조절
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	0a5b      	lsrs	r3, r3, #9
 801435c:	60bb      	str	r3, [r7, #8]

	if(prev_volume != potentiometer) {
 801435e:	4b0d      	ldr	r3, [pc, #52]	; (8014394 <volume_control_timercb+0x58>)
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	461a      	mov	r2, r3
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	429a      	cmp	r2, r3
 8014368:	d00c      	beq.n	8014384 <volume_control_timercb+0x48>
		volume = convert_volume_level(potentiometer);
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	b2db      	uxtb	r3, r3
 801436e:	4618      	mov	r0, r3
 8014370:	f000 f812 	bl	8014398 <convert_volume_level>
 8014374:	4603      	mov	r3, r0
 8014376:	73fb      	strb	r3, [r7, #15]
		VS1053_SetVolume(volume, volume);
 8014378:	7bfa      	ldrb	r2, [r7, #15]
 801437a:	7bfb      	ldrb	r3, [r7, #15]
 801437c:	4611      	mov	r1, r2
 801437e:	4618      	mov	r0, r3
 8014380:	f7ec fc90 	bl	8000ca4 <VS1053_SetVolume>
	}

	prev_volume = potentiometer;
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	b2da      	uxtb	r2, r3
 8014388:	4b02      	ldr	r3, [pc, #8]	; (8014394 <volume_control_timercb+0x58>)
 801438a:	701a      	strb	r2, [r3, #0]
}
 801438c:	bf00      	nop
 801438e:	3710      	adds	r7, #16
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}
 8014394:	20006ebc 	.word	0x20006ebc

08014398 <convert_volume_level>:

static uint8_t convert_volume_level(VolumeLevel vol) {
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	4603      	mov	r3, r0
 80143a0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch(vol) {
 80143a2:	79fb      	ldrb	r3, [r7, #7]
 80143a4:	2b07      	cmp	r3, #7
 80143a6:	d82b      	bhi.n	8014400 <convert_volume_level+0x68>
 80143a8:	a201      	add	r2, pc, #4	; (adr r2, 80143b0 <convert_volume_level+0x18>)
 80143aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143ae:	bf00      	nop
 80143b0:	080143fb 	.word	0x080143fb
 80143b4:	080143d1 	.word	0x080143d1
 80143b8:	080143d7 	.word	0x080143d7
 80143bc:	080143dd 	.word	0x080143dd
 80143c0:	080143e3 	.word	0x080143e3
 80143c4:	080143e9 	.word	0x080143e9
 80143c8:	080143ef 	.word	0x080143ef
 80143cc:	080143f5 	.word	0x080143f5
	case VOLUME_LEVEL_1:
		value = 0x0C;
 80143d0:	230c      	movs	r3, #12
 80143d2:	73fb      	strb	r3, [r7, #15]
		break;
 80143d4:	e01a      	b.n	801440c <convert_volume_level+0x74>
	case VOLUME_LEVEL_2:
		value = 0x0A;
 80143d6:	230a      	movs	r3, #10
 80143d8:	73fb      	strb	r3, [r7, #15]
		break;
 80143da:	e017      	b.n	801440c <convert_volume_level+0x74>
	case VOLUME_LEVEL_3:
		value = 0x08;
 80143dc:	2308      	movs	r3, #8
 80143de:	73fb      	strb	r3, [r7, #15]
		break;
 80143e0:	e014      	b.n	801440c <convert_volume_level+0x74>
	case VOLUME_LEVEL_4:
		value = 0x06;
 80143e2:	2306      	movs	r3, #6
 80143e4:	73fb      	strb	r3, [r7, #15]
		break;
 80143e6:	e011      	b.n	801440c <convert_volume_level+0x74>
	case VOLUME_LEVEL_5:
		value = 0x04;
 80143e8:	2304      	movs	r3, #4
 80143ea:	73fb      	strb	r3, [r7, #15]
		break;
 80143ec:	e00e      	b.n	801440c <convert_volume_level+0x74>
	case VOLUME_LEVEL_6:
		value = 0x02;
 80143ee:	2302      	movs	r3, #2
 80143f0:	73fb      	strb	r3, [r7, #15]
		break;
 80143f2:	e00b      	b.n	801440c <convert_volume_level+0x74>
	case VOLUME_LEVEL_7:
		value = 0x00;
 80143f4:	2300      	movs	r3, #0
 80143f6:	73fb      	strb	r3, [r7, #15]
		break;
 80143f8:	e008      	b.n	801440c <convert_volume_level+0x74>
	case VOLUME_OFF:
		value = 0xFF;
 80143fa:	23ff      	movs	r3, #255	; 0xff
 80143fc:	73fb      	strb	r3, [r7, #15]
		break;
 80143fe:	e005      	b.n	801440c <convert_volume_level+0x74>
	default:
		value = 0xFF;
 8014400:	23ff      	movs	r3, #255	; 0xff
 8014402:	73fb      	strb	r3, [r7, #15]
		hal_cli_printf("volume level argument error");
 8014404:	4804      	ldr	r0, [pc, #16]	; (8014418 <convert_volume_level+0x80>)
 8014406:	f7fb fccb 	bl	800fda0 <hal_cli_printf>
		break;
 801440a:	bf00      	nop
	}

	return value;
 801440c:	7bfb      	ldrb	r3, [r7, #15]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3710      	adds	r7, #16
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	080156f0 	.word	0x080156f0

0801441c <mp3Thread>:



void mp3Thread(void* param) {
 801441c:	b590      	push	{r4, r7, lr}
 801441e:	b085      	sub	sp, #20
 8014420:	af02      	add	r7, sp, #8
 8014422:	6078      	str	r0, [r7, #4]
	MP3_Init();
 8014424:	f000 f8b4 	bl	8014590 <MP3_Init>

	vs1053_volume_timer = xTimerCreate(
 8014428:	4b38      	ldr	r3, [pc, #224]	; (801450c <mp3Thread+0xf0>)
 801442a:	9300      	str	r3, [sp, #0]
 801442c:	2300      	movs	r3, #0
 801442e:	2201      	movs	r2, #1
 8014430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014434:	4836      	ldr	r0, [pc, #216]	; (8014510 <mp3Thread+0xf4>)
 8014436:	f7f7 fb73 	bl	800bb20 <xTimerCreate>
 801443a:	4603      	mov	r3, r0
 801443c:	4a35      	ldr	r2, [pc, #212]	; (8014514 <mp3Thread+0xf8>)
 801443e:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(VS1053_VOLUME_PERIOD),
							pdTRUE,
							(void*)0,
							volume_control_timercb);

	if(!vs1053_volume_timer) {
 8014440:	4b34      	ldr	r3, [pc, #208]	; (8014514 <mp3Thread+0xf8>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d103      	bne.n	8014450 <mp3Thread+0x34>
		hal_cli_printf("mp3 volume timer create failed");
 8014448:	4833      	ldr	r0, [pc, #204]	; (8014518 <mp3Thread+0xfc>)
 801444a:	f7fb fca9 	bl	800fda0 <hal_cli_printf>
		return;
 801444e:	e05a      	b.n	8014506 <mp3Thread+0xea>
	} else {
		if(xTimerStart(vs1053_volume_timer, 0) != pdPASS) {
 8014450:	4b30      	ldr	r3, [pc, #192]	; (8014514 <mp3Thread+0xf8>)
 8014452:	681c      	ldr	r4, [r3, #0]
 8014454:	f7f6 fce8 	bl	800ae28 <xTaskGetTickCount>
 8014458:	4602      	mov	r2, r0
 801445a:	2300      	movs	r3, #0
 801445c:	9300      	str	r3, [sp, #0]
 801445e:	2300      	movs	r3, #0
 8014460:	2101      	movs	r1, #1
 8014462:	4620      	mov	r0, r4
 8014464:	f7f7 fbb8 	bl	800bbd8 <xTimerGenericCommand>
 8014468:	4603      	mov	r3, r0
 801446a:	2b01      	cmp	r3, #1
 801446c:	d003      	beq.n	8014476 <mp3Thread+0x5a>
			hal_cli_printf("mp3 volume timer start failed");
 801446e:	482b      	ldr	r0, [pc, #172]	; (801451c <mp3Thread+0x100>)
 8014470:	f7fb fc96 	bl	800fda0 <hal_cli_printf>
			return;
 8014474:	e047      	b.n	8014506 <mp3Thread+0xea>
		}
	}

	input_rcv.key = InputKeyNone;
 8014476:	4b2a      	ldr	r3, [pc, #168]	; (8014520 <mp3Thread+0x104>)
 8014478:	2206      	movs	r2, #6
 801447a:	701a      	strb	r2, [r3, #0]
	input_rcv.type = InputTypeNone;
 801447c:	4b28      	ldr	r3, [pc, #160]	; (8014520 <mp3Thread+0x104>)
 801447e:	2200      	movs	r2, #0
 8014480:	705a      	strb	r2, [r3, #1]
	input_rcv.arg = 0;
 8014482:	4b27      	ldr	r3, [pc, #156]	; (8014520 <mp3Thread+0x104>)
 8014484:	2200      	movs	r2, #0
 8014486:	605a      	str	r2, [r3, #4]

	hal_tim_add_int_callback(4, mp3_feed_notify_timcb, NULL);
 8014488:	2200      	movs	r2, #0
 801448a:	4926      	ldr	r1, [pc, #152]	; (8014524 <mp3Thread+0x108>)
 801448c:	2004      	movs	r0, #4
 801448e:	f7ff f83f 	bl	8013510 <hal_tim_add_int_callback>
	hal_tim_start_it(4);
 8014492:	2004      	movs	r0, #4
 8014494:	f7fe ffd0 	bl	8013438 <hal_tim_start_it>

	while(1) {
		xQueueReceive(mp3_queue, &input_rcv, MP3_QUEUE_TIMEOUT);
 8014498:	4b23      	ldr	r3, [pc, #140]	; (8014528 <mp3Thread+0x10c>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2264      	movs	r2, #100	; 0x64
 801449e:	4920      	ldr	r1, [pc, #128]	; (8014520 <mp3Thread+0x104>)
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7f5 fd6b 	bl	8009f7c <xQueueReceive>
		switch(input_rcv.key) {
 80144a6:	4b1e      	ldr	r3, [pc, #120]	; (8014520 <mp3Thread+0x104>)
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	2b02      	cmp	r3, #2
 80144ac:	d012      	beq.n	80144d4 <mp3Thread+0xb8>
 80144ae:	2b06      	cmp	r3, #6
 80144b0:	d125      	bne.n	80144fe <mp3Thread+0xe2>
		case InputKeyNone:
			while(!VS1053_IsBusy() && MP3_IsPlaying()) {
 80144b2:	e001      	b.n	80144b8 <mp3Thread+0x9c>
				MP3_Feeder();
 80144b4:	f000 f922 	bl	80146fc <MP3_Feeder>
			while(!VS1053_IsBusy() && MP3_IsPlaying()) {
 80144b8:	f7ec fcc8 	bl	8000e4c <VS1053_IsBusy>
 80144bc:	4603      	mov	r3, r0
 80144be:	f083 0301 	eor.w	r3, r3, #1
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d01c      	beq.n	8014502 <mp3Thread+0xe6>
 80144c8:	f000 f830 	bl	801452c <MP3_IsPlaying>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1f0      	bne.n	80144b4 <mp3Thread+0x98>
			}
			break;
 80144d2:	e016      	b.n	8014502 <mp3Thread+0xe6>

		case InputKeyCenter:
			if(input_rcv.arg == InputArgSelMp3File) {
 80144d4:	4b12      	ldr	r3, [pc, #72]	; (8014520 <mp3Thread+0x104>)
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d102      	bne.n	80144e2 <mp3Thread+0xc6>
				MP3_Play();
 80144dc:	f000 f876 	bl	80145cc <MP3_Play>
				} else {
					MP3_Pause();
				}
			}

			break;
 80144e0:	e010      	b.n	8014504 <mp3Thread+0xe8>
				if(MP3_IsPlaying() == false) {
 80144e2:	f000 f823 	bl	801452c <MP3_IsPlaying>
 80144e6:	4603      	mov	r3, r0
 80144e8:	f083 0301 	eor.w	r3, r3, #1
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <mp3Thread+0xdc>
					MP3_Resume();
 80144f2:	f000 f8ef 	bl	80146d4 <MP3_Resume>
			break;
 80144f6:	e005      	b.n	8014504 <mp3Thread+0xe8>
					MP3_Pause();
 80144f8:	f000 f8dc 	bl	80146b4 <MP3_Pause>
			break;
 80144fc:	e002      	b.n	8014504 <mp3Thread+0xe8>
		default:
			break;
 80144fe:	bf00      	nop
 8014500:	e7ca      	b.n	8014498 <mp3Thread+0x7c>
			break;
 8014502:	bf00      	nop
		xQueueReceive(mp3_queue, &input_rcv, MP3_QUEUE_TIMEOUT);
 8014504:	e7c8      	b.n	8014498 <mp3Thread+0x7c>
		}
	}
}
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	bd90      	pop	{r4, r7, pc}
 801450c:	0801433d 	.word	0x0801433d
 8014510:	0801570c 	.word	0x0801570c
 8014514:	20006eb8 	.word	0x20006eb8
 8014518:	08015718 	.word	0x08015718
 801451c:	08015738 	.word	0x08015738
 8014520:	20006ec0 	.word	0x20006ec0
 8014524:	080142dd 	.word	0x080142dd
 8014528:	20006ea8 	.word	0x20006ea8

0801452c <MP3_IsPlaying>:
bool isFileOpen = false;

static FATFS fs;
static FIL mp3File;

bool MP3_IsPlaying(void) {
 801452c:	b480      	push	{r7}
 801452e:	af00      	add	r7, sp, #0
	return isPlaying;
 8014530:	4b03      	ldr	r3, [pc, #12]	; (8014540 <MP3_IsPlaying+0x14>)
 8014532:	781b      	ldrb	r3, [r3, #0]
}
 8014534:	4618      	mov	r0, r3
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr
 801453e:	bf00      	nop
 8014540:	20006ef2 	.word	0x20006ef2

08014544 <MP3_SetFile>:

bool Mp3_IsFileOpen(void) {
	return isFileOpen;
}

bool MP3_SetFile(const char *filename) {
 8014544:	b580      	push	{r7, lr}
 8014546:	b08a      	sub	sp, #40	; 0x28
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
	char buffer[25];
	memset(buffer, '\0', 25);
 801454c:	f107 030c 	add.w	r3, r7, #12
 8014550:	2219      	movs	r2, #25
 8014552:	2100      	movs	r1, #0
 8014554:	4618      	mov	r0, r3
 8014556:	f000 f9a5 	bl	80148a4 <memset>
	f_close(&mp3File);
 801455a:	480b      	ldr	r0, [pc, #44]	; (8014588 <MP3_SetFile+0x44>)
 801455c:	f7f4 f901 	bl	8008762 <f_close>
	sprintf(buffer, "/mp3/%s", filename);
 8014560:	f107 030c 	add.w	r3, r7, #12
 8014564:	687a      	ldr	r2, [r7, #4]
 8014566:	4909      	ldr	r1, [pc, #36]	; (801458c <MP3_SetFile+0x48>)
 8014568:	4618      	mov	r0, r3
 801456a:	f000 f9d7 	bl	801491c <siprintf>
	f_open(&mp3File, buffer, FA_READ);
 801456e:	f107 030c 	add.w	r3, r7, #12
 8014572:	2201      	movs	r2, #1
 8014574:	4619      	mov	r1, r3
 8014576:	4804      	ldr	r0, [pc, #16]	; (8014588 <MP3_SetFile+0x44>)
 8014578:	f7f3 fc4e 	bl	8007e18 <f_open>

	return true;
 801457c:	2301      	movs	r3, #1
}
 801457e:	4618      	mov	r0, r3
 8014580:	3728      	adds	r7, #40	; 0x28
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	20007f2c 	.word	0x20007f2c
 801458c:	08015758 	.word	0x08015758

08014590 <MP3_Init>:

/* Initialize VS1053 & Open a file */
bool MP3_Init()
{
 8014590:	b580      	push	{r7, lr}
 8014592:	af00      	add	r7, sp, #0
	/* Initialize VS1053 */
    if(!VS1053_Init()) return false;
 8014594:	f7ec fabe 	bl	8000b14 <VS1053_Init>
 8014598:	4603      	mov	r3, r0
 801459a:	f083 0301 	eor.w	r3, r3, #1
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d001      	beq.n	80145a8 <MP3_Init+0x18>
 80145a4:	2300      	movs	r3, #0
 80145a6:	e00a      	b.n	80145be <MP3_Init+0x2e>

    /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK) return false;
 80145a8:	2200      	movs	r2, #0
 80145aa:	4906      	ldr	r1, [pc, #24]	; (80145c4 <MP3_Init+0x34>)
 80145ac:	4806      	ldr	r0, [pc, #24]	; (80145c8 <MP3_Init+0x38>)
 80145ae:	f7f3 fbed 	bl	8007d8c <f_mount>
 80145b2:	4603      	mov	r3, r0
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d001      	beq.n	80145bc <MP3_Init+0x2c>
 80145b8:	2300      	movs	r3, #0
 80145ba:	e000      	b.n	80145be <MP3_Init+0x2e>

    return true;
 80145bc:	2301      	movs	r3, #1
}
 80145be:	4618      	mov	r0, r3
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	08015760 	.word	0x08015760
 80145c8:	20006ef4 	.word	0x20006ef4

080145cc <MP3_Play>:

bool MP3_Play(void)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	af00      	add	r7, sp, #0
	if(isPlaying) MP3_Stop();
 80145d0:	4b1f      	ldr	r3, [pc, #124]	; (8014650 <MP3_Play+0x84>)
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d001      	beq.n	80145dc <MP3_Play+0x10>
 80145d8:	f000 f842 	bl	8014660 <MP3_Stop>

	if(!VS1053_SetMode(0x4800)) return false;	/* SM LINE1 | SM SDINEW */
 80145dc:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80145e0:	f7ec fb83 	bl	8000cea <VS1053_SetMode>
 80145e4:	4603      	mov	r3, r0
 80145e6:	f083 0301 	eor.w	r3, r3, #1
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d001      	beq.n	80145f4 <MP3_Play+0x28>
 80145f0:	2300      	movs	r3, #0
 80145f2:	e02b      	b.n	801464c <MP3_Play+0x80>
	if(!VS1053_AutoResync()) return false;		/* AutoResync */
 80145f4:	f7ec fba7 	bl	8000d46 <VS1053_AutoResync>
 80145f8:	4603      	mov	r3, r0
 80145fa:	f083 0301 	eor.w	r3, r3, #1
 80145fe:	b2db      	uxtb	r3, r3
 8014600:	2b00      	cmp	r3, #0
 8014602:	d001      	beq.n	8014608 <MP3_Play+0x3c>
 8014604:	2300      	movs	r3, #0
 8014606:	e021      	b.n	801464c <MP3_Play+0x80>
	if(!VS1053_SetDecodeTime(0)) return false;	/* Set decode time */
 8014608:	2000      	movs	r0, #0
 801460a:	f7ec fbbc 	bl	8000d86 <VS1053_SetDecodeTime>
 801460e:	4603      	mov	r3, r0
 8014610:	f083 0301 	eor.w	r3, r3, #1
 8014614:	b2db      	uxtb	r3, r3
 8014616:	2b00      	cmp	r3, #0
 8014618:	d001      	beq.n	801461e <MP3_Play+0x52>
 801461a:	2300      	movs	r3, #0
 801461c:	e016      	b.n	801464c <MP3_Play+0x80>
	if(!VS1053_SetVolume( 0x0F, 0x0F )) return false;	/* Small number is louder */
 801461e:	210f      	movs	r1, #15
 8014620:	200f      	movs	r0, #15
 8014622:	f7ec fb3f 	bl	8000ca4 <VS1053_SetVolume>
 8014626:	4603      	mov	r3, r0
 8014628:	f083 0301 	eor.w	r3, r3, #1
 801462c:	b2db      	uxtb	r3, r3
 801462e:	2b00      	cmp	r3, #0
 8014630:	d001      	beq.n	8014636 <MP3_Play+0x6a>
 8014632:	2300      	movs	r3, #0
 8014634:	e00a      	b.n	801464c <MP3_Play+0x80>

	mp3FileSize = f_size(&mp3File);
 8014636:	4b07      	ldr	r3, [pc, #28]	; (8014654 <MP3_Play+0x88>)
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	4a07      	ldr	r2, [pc, #28]	; (8014658 <MP3_Play+0x8c>)
 801463c:	6013      	str	r3, [r2, #0]

	/* Set flags */
	isFileOpen = true;
 801463e:	4b07      	ldr	r3, [pc, #28]	; (801465c <MP3_Play+0x90>)
 8014640:	2201      	movs	r2, #1
 8014642:	701a      	strb	r2, [r3, #0]
	isPlaying = true;
 8014644:	4b02      	ldr	r3, [pc, #8]	; (8014650 <MP3_Play+0x84>)
 8014646:	2201      	movs	r2, #1
 8014648:	701a      	strb	r2, [r3, #0]

    return true;
 801464a:	2301      	movs	r3, #1
}
 801464c:	4618      	mov	r0, r3
 801464e:	bd80      	pop	{r7, pc}
 8014650:	20006ef2 	.word	0x20006ef2
 8014654:	20007f2c 	.word	0x20007f2c
 8014658:	20006ee8 	.word	0x20006ee8
 801465c:	20006ef3 	.word	0x20006ef3

08014660 <MP3_Stop>:

void MP3_Stop(void)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b082      	sub	sp, #8
 8014664:	af00      	add	r7, sp, #0
	/* Refer to page 49 of VS1053 datasheet */

	uint16_t mode;
	VS1053_SendEndFill(2052);	/* send endfill bytes */
 8014666:	f640 0004 	movw	r0, #2052	; 0x804
 801466a:	f7ec fbb3 	bl	8000dd4 <VS1053_SendEndFill>
	VS1053_SetMode(0x4808);		/* SM LINE1 | SM SDINEW | SM CANCEL */
 801466e:	f644 0008 	movw	r0, #18440	; 0x4808
 8014672:	f7ec fb3a 	bl	8000cea <VS1053_SetMode>
	VS1053_SendEndFill(32);		/* send endfill bytes */
 8014676:	2020      	movs	r0, #32
 8014678:	f7ec fbac 	bl	8000dd4 <VS1053_SendEndFill>
	LL_mDelay(100);
 801467c:	2064      	movs	r0, #100	; 0x64
 801467e:	f7f0 fe17 	bl	80052b0 <LL_mDelay>
	VS1053_GetMode(&mode);		/* get mode value */
 8014682:	1dbb      	adds	r3, r7, #6
 8014684:	4618      	mov	r0, r3
 8014686:	f7ec fb48 	bl	8000d1a <VS1053_GetMode>
	if((mode & 0x08) != 0x0)	/* if SM CANCEL is not clear, soft reset */
 801468a:	88fb      	ldrh	r3, [r7, #6]
 801468c:	f003 0308 	and.w	r3, r3, #8
 8014690:	2b00      	cmp	r3, #0
 8014692:	d001      	beq.n	8014698 <MP3_Stop+0x38>
	{
		VS1053_SoftReset();
 8014694:	f7ec faf0 	bl	8000c78 <VS1053_SoftReset>
	}

	isPlaying = false;			/* Stop flag */
 8014698:	4b04      	ldr	r3, [pc, #16]	; (80146ac <MP3_Stop+0x4c>)
 801469a:	2200      	movs	r2, #0
 801469c:	701a      	strb	r2, [r3, #0]
	isFileOpen = false;			/* Close flag */
 801469e:	4b04      	ldr	r3, [pc, #16]	; (80146b0 <MP3_Stop+0x50>)
 80146a0:	2200      	movs	r2, #0
 80146a2:	701a      	strb	r2, [r3, #0]
}
 80146a4:	bf00      	nop
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	20006ef2 	.word	0x20006ef2
 80146b0:	20006ef3 	.word	0x20006ef3

080146b4 <MP3_Pause>:

void MP3_Pause(void)
{
 80146b4:	b480      	push	{r7}
 80146b6:	af00      	add	r7, sp, #0
	if(isPlaying) isPlaying = false;
 80146b8:	4b05      	ldr	r3, [pc, #20]	; (80146d0 <MP3_Pause+0x1c>)
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d002      	beq.n	80146c6 <MP3_Pause+0x12>
 80146c0:	4b03      	ldr	r3, [pc, #12]	; (80146d0 <MP3_Pause+0x1c>)
 80146c2:	2200      	movs	r2, #0
 80146c4:	701a      	strb	r2, [r3, #0]
}
 80146c6:	bf00      	nop
 80146c8:	46bd      	mov	sp, r7
 80146ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ce:	4770      	bx	lr
 80146d0:	20006ef2 	.word	0x20006ef2

080146d4 <MP3_Resume>:

void MP3_Resume(void)
{
 80146d4:	b480      	push	{r7}
 80146d6:	af00      	add	r7, sp, #0
	if(!isPlaying) isPlaying = true;
 80146d8:	4b07      	ldr	r3, [pc, #28]	; (80146f8 <MP3_Resume+0x24>)
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	f083 0301 	eor.w	r3, r3, #1
 80146e0:	b2db      	uxtb	r3, r3
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d002      	beq.n	80146ec <MP3_Resume+0x18>
 80146e6:	4b04      	ldr	r3, [pc, #16]	; (80146f8 <MP3_Resume+0x24>)
 80146e8:	2201      	movs	r2, #1
 80146ea:	701a      	strb	r2, [r3, #0]
}
 80146ec:	bf00      	nop
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	20006ef2 	.word	0x20006ef2

080146fc <MP3_Feeder>:

/* Send mp3 buffer to VS1053 */
void MP3_Feeder(void)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	af00      	add	r7, sp, #0
	if(!isPlaying || !isFileOpen) return;
 8014700:	4b26      	ldr	r3, [pc, #152]	; (801479c <MP3_Feeder+0xa0>)
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	f083 0301 	eor.w	r3, r3, #1
 8014708:	b2db      	uxtb	r3, r3
 801470a:	2b00      	cmp	r3, #0
 801470c:	d144      	bne.n	8014798 <MP3_Feeder+0x9c>
 801470e:	4b24      	ldr	r3, [pc, #144]	; (80147a0 <MP3_Feeder+0xa4>)
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	f083 0301 	eor.w	r3, r3, #1
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b00      	cmp	r3, #0
 801471a:	d13d      	bne.n	8014798 <MP3_Feeder+0x9c>

	if(mp3FileSize > BUFFER_SIZE)
 801471c:	4b21      	ldr	r3, [pc, #132]	; (80147a4 <MP3_Feeder+0xa8>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b20      	cmp	r3, #32
 8014722:	d90e      	bls.n	8014742 <MP3_Feeder+0x46>
	{
		/* Fill the buffer */
		f_read(&mp3File, mp3Buffer, BUFFER_SIZE, (void*)&readBytes);
 8014724:	4b20      	ldr	r3, [pc, #128]	; (80147a8 <MP3_Feeder+0xac>)
 8014726:	2220      	movs	r2, #32
 8014728:	4920      	ldr	r1, [pc, #128]	; (80147ac <MP3_Feeder+0xb0>)
 801472a:	4821      	ldr	r0, [pc, #132]	; (80147b0 <MP3_Feeder+0xb4>)
 801472c:	f7f3 fe3c 	bl	80083a8 <f_read>

		/* Tx buffer */
		VS1053_SdiWrite32( mp3Buffer );
 8014730:	481e      	ldr	r0, [pc, #120]	; (80147ac <MP3_Feeder+0xb0>)
 8014732:	f7ec fc85 	bl	8001040 <VS1053_SdiWrite32>

		/* bytes to send */
		mp3FileSize -= BUFFER_SIZE;
 8014736:	4b1b      	ldr	r3, [pc, #108]	; (80147a4 <MP3_Feeder+0xa8>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	3b20      	subs	r3, #32
 801473c:	4a19      	ldr	r2, [pc, #100]	; (80147a4 <MP3_Feeder+0xa8>)
 801473e:	6013      	str	r3, [r2, #0]
 8014740:	e02b      	b.n	801479a <MP3_Feeder+0x9e>
	}
	else
	{
		/* Read left bytes */
		f_read(&mp3File, mp3Buffer, mp3FileSize, (void*)&readBytes);
 8014742:	4b18      	ldr	r3, [pc, #96]	; (80147a4 <MP3_Feeder+0xa8>)
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	4b18      	ldr	r3, [pc, #96]	; (80147a8 <MP3_Feeder+0xac>)
 8014748:	4918      	ldr	r1, [pc, #96]	; (80147ac <MP3_Feeder+0xb0>)
 801474a:	4819      	ldr	r0, [pc, #100]	; (80147b0 <MP3_Feeder+0xb4>)
 801474c:	f7f3 fe2c 	bl	80083a8 <f_read>

		/* Tx buffer */
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8014750:	4b18      	ldr	r3, [pc, #96]	; (80147b4 <MP3_Feeder+0xb8>)
 8014752:	2200      	movs	r2, #0
 8014754:	801a      	strh	r2, [r3, #0]
 8014756:	e015      	b.n	8014784 <MP3_Feeder+0x88>
		{
			while(!VS1053_SdiWrite(*(mp3Buffer + cnt)));
 8014758:	bf00      	nop
 801475a:	4b16      	ldr	r3, [pc, #88]	; (80147b4 <MP3_Feeder+0xb8>)
 801475c:	881b      	ldrh	r3, [r3, #0]
 801475e:	461a      	mov	r2, r3
 8014760:	4b12      	ldr	r3, [pc, #72]	; (80147ac <MP3_Feeder+0xb0>)
 8014762:	4413      	add	r3, r2
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	4618      	mov	r0, r3
 8014768:	f7ec fc3c 	bl	8000fe4 <VS1053_SdiWrite>
 801476c:	4603      	mov	r3, r0
 801476e:	f083 0301 	eor.w	r3, r3, #1
 8014772:	b2db      	uxtb	r3, r3
 8014774:	2b00      	cmp	r3, #0
 8014776:	d1f0      	bne.n	801475a <MP3_Feeder+0x5e>
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8014778:	4b0e      	ldr	r3, [pc, #56]	; (80147b4 <MP3_Feeder+0xb8>)
 801477a:	881b      	ldrh	r3, [r3, #0]
 801477c:	3301      	adds	r3, #1
 801477e:	b29a      	uxth	r2, r3
 8014780:	4b0c      	ldr	r3, [pc, #48]	; (80147b4 <MP3_Feeder+0xb8>)
 8014782:	801a      	strh	r2, [r3, #0]
 8014784:	4b0b      	ldr	r3, [pc, #44]	; (80147b4 <MP3_Feeder+0xb8>)
 8014786:	881b      	ldrh	r3, [r3, #0]
 8014788:	461a      	mov	r2, r3
 801478a:	4b06      	ldr	r3, [pc, #24]	; (80147a4 <MP3_Feeder+0xa8>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	429a      	cmp	r2, r3
 8014790:	d3e2      	bcc.n	8014758 <MP3_Feeder+0x5c>
		}

		/* Stop when played the whole file */
		MP3_Stop();
 8014792:	f7ff ff65 	bl	8014660 <MP3_Stop>
 8014796:	e000      	b.n	801479a <MP3_Feeder+0x9e>
	if(!isPlaying || !isFileOpen) return;
 8014798:	bf00      	nop
	}
}
 801479a:	bd80      	pop	{r7, pc}
 801479c:	20006ef2 	.word	0x20006ef2
 80147a0:	20006ef3 	.word	0x20006ef3
 80147a4:	20006ee8 	.word	0x20006ee8
 80147a8:	20006eec 	.word	0x20006eec
 80147ac:	20006ec8 	.word	0x20006ec8
 80147b0:	20007f2c 	.word	0x20007f2c
 80147b4:	20006ef0 	.word	0x20006ef0

080147b8 <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80147bc:	b672      	cpsid	i
}
 80147be:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 80147c0:	4801      	ldr	r0, [pc, #4]	; (80147c8 <ErrorHandler+0x10>)
 80147c2:	f7fb faed 	bl	800fda0 <hal_cli_printf>
  while (1)
 80147c6:	e7fe      	b.n	80147c6 <ErrorHandler+0xe>
 80147c8:	08015764 	.word	0x08015764

080147cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80147cc:	480d      	ldr	r0, [pc, #52]	; (8014804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80147ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80147d0:	f7fe fd30 	bl	8013234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80147d4:	480c      	ldr	r0, [pc, #48]	; (8014808 <LoopForever+0x6>)
  ldr r1, =_edata
 80147d6:	490d      	ldr	r1, [pc, #52]	; (801480c <LoopForever+0xa>)
  ldr r2, =_sidata
 80147d8:	4a0d      	ldr	r2, [pc, #52]	; (8014810 <LoopForever+0xe>)
  movs r3, #0
 80147da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80147dc:	e002      	b.n	80147e4 <LoopCopyDataInit>

080147de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80147de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80147e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80147e2:	3304      	adds	r3, #4

080147e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80147e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80147e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80147e8:	d3f9      	bcc.n	80147de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80147ea:	4a0a      	ldr	r2, [pc, #40]	; (8014814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80147ec:	4c0a      	ldr	r4, [pc, #40]	; (8014818 <LoopForever+0x16>)
  movs r3, #0
 80147ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80147f0:	e001      	b.n	80147f6 <LoopFillZerobss>

080147f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80147f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80147f4:	3204      	adds	r2, #4

080147f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80147f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80147f8:	d3fb      	bcc.n	80147f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80147fa:	f000 f811 	bl	8014820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80147fe:	f7fd fb35 	bl	8011e6c <main>

08014802 <LoopForever>:

LoopForever:
    b LoopForever
 8014802:	e7fe      	b.n	8014802 <LoopForever>
  ldr   r0, =_estack
 8014804:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8014808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801480c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8014810:	0801653c 	.word	0x0801653c
  ldr r2, =_sbss
 8014814:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8014818:	20008f70 	.word	0x20008f70

0801481c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801481c:	e7fe      	b.n	801481c <ADC_IRQHandler>
	...

08014820 <__libc_init_array>:
 8014820:	b570      	push	{r4, r5, r6, lr}
 8014822:	4d0d      	ldr	r5, [pc, #52]	; (8014858 <__libc_init_array+0x38>)
 8014824:	4c0d      	ldr	r4, [pc, #52]	; (801485c <__libc_init_array+0x3c>)
 8014826:	1b64      	subs	r4, r4, r5
 8014828:	10a4      	asrs	r4, r4, #2
 801482a:	2600      	movs	r6, #0
 801482c:	42a6      	cmp	r6, r4
 801482e:	d109      	bne.n	8014844 <__libc_init_array+0x24>
 8014830:	4d0b      	ldr	r5, [pc, #44]	; (8014860 <__libc_init_array+0x40>)
 8014832:	4c0c      	ldr	r4, [pc, #48]	; (8014864 <__libc_init_array+0x44>)
 8014834:	f000 fd00 	bl	8015238 <_init>
 8014838:	1b64      	subs	r4, r4, r5
 801483a:	10a4      	asrs	r4, r4, #2
 801483c:	2600      	movs	r6, #0
 801483e:	42a6      	cmp	r6, r4
 8014840:	d105      	bne.n	801484e <__libc_init_array+0x2e>
 8014842:	bd70      	pop	{r4, r5, r6, pc}
 8014844:	f855 3b04 	ldr.w	r3, [r5], #4
 8014848:	4798      	blx	r3
 801484a:	3601      	adds	r6, #1
 801484c:	e7ee      	b.n	801482c <__libc_init_array+0xc>
 801484e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014852:	4798      	blx	r3
 8014854:	3601      	adds	r6, #1
 8014856:	e7f2      	b.n	801483e <__libc_init_array+0x1e>
 8014858:	08016534 	.word	0x08016534
 801485c:	08016534 	.word	0x08016534
 8014860:	08016534 	.word	0x08016534
 8014864:	08016538 	.word	0x08016538

08014868 <memcmp>:
 8014868:	b510      	push	{r4, lr}
 801486a:	3901      	subs	r1, #1
 801486c:	4402      	add	r2, r0
 801486e:	4290      	cmp	r0, r2
 8014870:	d101      	bne.n	8014876 <memcmp+0xe>
 8014872:	2000      	movs	r0, #0
 8014874:	e005      	b.n	8014882 <memcmp+0x1a>
 8014876:	7803      	ldrb	r3, [r0, #0]
 8014878:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801487c:	42a3      	cmp	r3, r4
 801487e:	d001      	beq.n	8014884 <memcmp+0x1c>
 8014880:	1b18      	subs	r0, r3, r4
 8014882:	bd10      	pop	{r4, pc}
 8014884:	3001      	adds	r0, #1
 8014886:	e7f2      	b.n	801486e <memcmp+0x6>

08014888 <memcpy>:
 8014888:	440a      	add	r2, r1
 801488a:	4291      	cmp	r1, r2
 801488c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014890:	d100      	bne.n	8014894 <memcpy+0xc>
 8014892:	4770      	bx	lr
 8014894:	b510      	push	{r4, lr}
 8014896:	f811 4b01 	ldrb.w	r4, [r1], #1
 801489a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801489e:	4291      	cmp	r1, r2
 80148a0:	d1f9      	bne.n	8014896 <memcpy+0xe>
 80148a2:	bd10      	pop	{r4, pc}

080148a4 <memset>:
 80148a4:	4402      	add	r2, r0
 80148a6:	4603      	mov	r3, r0
 80148a8:	4293      	cmp	r3, r2
 80148aa:	d100      	bne.n	80148ae <memset+0xa>
 80148ac:	4770      	bx	lr
 80148ae:	f803 1b01 	strb.w	r1, [r3], #1
 80148b2:	e7f9      	b.n	80148a8 <memset+0x4>

080148b4 <sniprintf>:
 80148b4:	b40c      	push	{r2, r3}
 80148b6:	b530      	push	{r4, r5, lr}
 80148b8:	4b17      	ldr	r3, [pc, #92]	; (8014918 <sniprintf+0x64>)
 80148ba:	1e0c      	subs	r4, r1, #0
 80148bc:	681d      	ldr	r5, [r3, #0]
 80148be:	b09d      	sub	sp, #116	; 0x74
 80148c0:	da08      	bge.n	80148d4 <sniprintf+0x20>
 80148c2:	238b      	movs	r3, #139	; 0x8b
 80148c4:	602b      	str	r3, [r5, #0]
 80148c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148ca:	b01d      	add	sp, #116	; 0x74
 80148cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148d0:	b002      	add	sp, #8
 80148d2:	4770      	bx	lr
 80148d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80148d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80148dc:	bf14      	ite	ne
 80148de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80148e2:	4623      	moveq	r3, r4
 80148e4:	9304      	str	r3, [sp, #16]
 80148e6:	9307      	str	r3, [sp, #28]
 80148e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148ec:	9002      	str	r0, [sp, #8]
 80148ee:	9006      	str	r0, [sp, #24]
 80148f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80148f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80148f6:	ab21      	add	r3, sp, #132	; 0x84
 80148f8:	a902      	add	r1, sp, #8
 80148fa:	4628      	mov	r0, r5
 80148fc:	9301      	str	r3, [sp, #4]
 80148fe:	f000 f93f 	bl	8014b80 <_svfiprintf_r>
 8014902:	1c43      	adds	r3, r0, #1
 8014904:	bfbc      	itt	lt
 8014906:	238b      	movlt	r3, #139	; 0x8b
 8014908:	602b      	strlt	r3, [r5, #0]
 801490a:	2c00      	cmp	r4, #0
 801490c:	d0dd      	beq.n	80148ca <sniprintf+0x16>
 801490e:	9b02      	ldr	r3, [sp, #8]
 8014910:	2200      	movs	r2, #0
 8014912:	701a      	strb	r2, [r3, #0]
 8014914:	e7d9      	b.n	80148ca <sniprintf+0x16>
 8014916:	bf00      	nop
 8014918:	20000018 	.word	0x20000018

0801491c <siprintf>:
 801491c:	b40e      	push	{r1, r2, r3}
 801491e:	b500      	push	{lr}
 8014920:	b09c      	sub	sp, #112	; 0x70
 8014922:	ab1d      	add	r3, sp, #116	; 0x74
 8014924:	9002      	str	r0, [sp, #8]
 8014926:	9006      	str	r0, [sp, #24]
 8014928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801492c:	4809      	ldr	r0, [pc, #36]	; (8014954 <siprintf+0x38>)
 801492e:	9107      	str	r1, [sp, #28]
 8014930:	9104      	str	r1, [sp, #16]
 8014932:	4909      	ldr	r1, [pc, #36]	; (8014958 <siprintf+0x3c>)
 8014934:	f853 2b04 	ldr.w	r2, [r3], #4
 8014938:	9105      	str	r1, [sp, #20]
 801493a:	6800      	ldr	r0, [r0, #0]
 801493c:	9301      	str	r3, [sp, #4]
 801493e:	a902      	add	r1, sp, #8
 8014940:	f000 f91e 	bl	8014b80 <_svfiprintf_r>
 8014944:	9b02      	ldr	r3, [sp, #8]
 8014946:	2200      	movs	r2, #0
 8014948:	701a      	strb	r2, [r3, #0]
 801494a:	b01c      	add	sp, #112	; 0x70
 801494c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014950:	b003      	add	sp, #12
 8014952:	4770      	bx	lr
 8014954:	20000018 	.word	0x20000018
 8014958:	ffff0208 	.word	0xffff0208

0801495c <_vsiprintf_r>:
 801495c:	b500      	push	{lr}
 801495e:	b09b      	sub	sp, #108	; 0x6c
 8014960:	9100      	str	r1, [sp, #0]
 8014962:	9104      	str	r1, [sp, #16]
 8014964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014968:	9105      	str	r1, [sp, #20]
 801496a:	9102      	str	r1, [sp, #8]
 801496c:	4905      	ldr	r1, [pc, #20]	; (8014984 <_vsiprintf_r+0x28>)
 801496e:	9103      	str	r1, [sp, #12]
 8014970:	4669      	mov	r1, sp
 8014972:	f000 f905 	bl	8014b80 <_svfiprintf_r>
 8014976:	9b00      	ldr	r3, [sp, #0]
 8014978:	2200      	movs	r2, #0
 801497a:	701a      	strb	r2, [r3, #0]
 801497c:	b01b      	add	sp, #108	; 0x6c
 801497e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014982:	bf00      	nop
 8014984:	ffff0208 	.word	0xffff0208

08014988 <vsiprintf>:
 8014988:	4613      	mov	r3, r2
 801498a:	460a      	mov	r2, r1
 801498c:	4601      	mov	r1, r0
 801498e:	4802      	ldr	r0, [pc, #8]	; (8014998 <vsiprintf+0x10>)
 8014990:	6800      	ldr	r0, [r0, #0]
 8014992:	f7ff bfe3 	b.w	801495c <_vsiprintf_r>
 8014996:	bf00      	nop
 8014998:	20000018 	.word	0x20000018

0801499c <__retarget_lock_acquire_recursive>:
 801499c:	4770      	bx	lr

0801499e <__retarget_lock_release_recursive>:
 801499e:	4770      	bx	lr

080149a0 <sbrk_aligned>:
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	4e0e      	ldr	r6, [pc, #56]	; (80149dc <sbrk_aligned+0x3c>)
 80149a4:	460c      	mov	r4, r1
 80149a6:	6831      	ldr	r1, [r6, #0]
 80149a8:	4605      	mov	r5, r0
 80149aa:	b911      	cbnz	r1, 80149b2 <sbrk_aligned+0x12>
 80149ac:	f000 fb7c 	bl	80150a8 <_sbrk_r>
 80149b0:	6030      	str	r0, [r6, #0]
 80149b2:	4621      	mov	r1, r4
 80149b4:	4628      	mov	r0, r5
 80149b6:	f000 fb77 	bl	80150a8 <_sbrk_r>
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	d00a      	beq.n	80149d4 <sbrk_aligned+0x34>
 80149be:	1cc4      	adds	r4, r0, #3
 80149c0:	f024 0403 	bic.w	r4, r4, #3
 80149c4:	42a0      	cmp	r0, r4
 80149c6:	d007      	beq.n	80149d8 <sbrk_aligned+0x38>
 80149c8:	1a21      	subs	r1, r4, r0
 80149ca:	4628      	mov	r0, r5
 80149cc:	f000 fb6c 	bl	80150a8 <_sbrk_r>
 80149d0:	3001      	adds	r0, #1
 80149d2:	d101      	bne.n	80149d8 <sbrk_aligned+0x38>
 80149d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80149d8:	4620      	mov	r0, r4
 80149da:	bd70      	pop	{r4, r5, r6, pc}
 80149dc:	20008f64 	.word	0x20008f64

080149e0 <_malloc_r>:
 80149e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149e4:	1ccd      	adds	r5, r1, #3
 80149e6:	f025 0503 	bic.w	r5, r5, #3
 80149ea:	3508      	adds	r5, #8
 80149ec:	2d0c      	cmp	r5, #12
 80149ee:	bf38      	it	cc
 80149f0:	250c      	movcc	r5, #12
 80149f2:	2d00      	cmp	r5, #0
 80149f4:	4607      	mov	r7, r0
 80149f6:	db01      	blt.n	80149fc <_malloc_r+0x1c>
 80149f8:	42a9      	cmp	r1, r5
 80149fa:	d905      	bls.n	8014a08 <_malloc_r+0x28>
 80149fc:	230c      	movs	r3, #12
 80149fe:	603b      	str	r3, [r7, #0]
 8014a00:	2600      	movs	r6, #0
 8014a02:	4630      	mov	r0, r6
 8014a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a08:	4e2e      	ldr	r6, [pc, #184]	; (8014ac4 <_malloc_r+0xe4>)
 8014a0a:	f000 fb77 	bl	80150fc <__malloc_lock>
 8014a0e:	6833      	ldr	r3, [r6, #0]
 8014a10:	461c      	mov	r4, r3
 8014a12:	bb34      	cbnz	r4, 8014a62 <_malloc_r+0x82>
 8014a14:	4629      	mov	r1, r5
 8014a16:	4638      	mov	r0, r7
 8014a18:	f7ff ffc2 	bl	80149a0 <sbrk_aligned>
 8014a1c:	1c43      	adds	r3, r0, #1
 8014a1e:	4604      	mov	r4, r0
 8014a20:	d14d      	bne.n	8014abe <_malloc_r+0xde>
 8014a22:	6834      	ldr	r4, [r6, #0]
 8014a24:	4626      	mov	r6, r4
 8014a26:	2e00      	cmp	r6, #0
 8014a28:	d140      	bne.n	8014aac <_malloc_r+0xcc>
 8014a2a:	6823      	ldr	r3, [r4, #0]
 8014a2c:	4631      	mov	r1, r6
 8014a2e:	4638      	mov	r0, r7
 8014a30:	eb04 0803 	add.w	r8, r4, r3
 8014a34:	f000 fb38 	bl	80150a8 <_sbrk_r>
 8014a38:	4580      	cmp	r8, r0
 8014a3a:	d13a      	bne.n	8014ab2 <_malloc_r+0xd2>
 8014a3c:	6821      	ldr	r1, [r4, #0]
 8014a3e:	3503      	adds	r5, #3
 8014a40:	1a6d      	subs	r5, r5, r1
 8014a42:	f025 0503 	bic.w	r5, r5, #3
 8014a46:	3508      	adds	r5, #8
 8014a48:	2d0c      	cmp	r5, #12
 8014a4a:	bf38      	it	cc
 8014a4c:	250c      	movcc	r5, #12
 8014a4e:	4629      	mov	r1, r5
 8014a50:	4638      	mov	r0, r7
 8014a52:	f7ff ffa5 	bl	80149a0 <sbrk_aligned>
 8014a56:	3001      	adds	r0, #1
 8014a58:	d02b      	beq.n	8014ab2 <_malloc_r+0xd2>
 8014a5a:	6823      	ldr	r3, [r4, #0]
 8014a5c:	442b      	add	r3, r5
 8014a5e:	6023      	str	r3, [r4, #0]
 8014a60:	e00e      	b.n	8014a80 <_malloc_r+0xa0>
 8014a62:	6822      	ldr	r2, [r4, #0]
 8014a64:	1b52      	subs	r2, r2, r5
 8014a66:	d41e      	bmi.n	8014aa6 <_malloc_r+0xc6>
 8014a68:	2a0b      	cmp	r2, #11
 8014a6a:	d916      	bls.n	8014a9a <_malloc_r+0xba>
 8014a6c:	1961      	adds	r1, r4, r5
 8014a6e:	42a3      	cmp	r3, r4
 8014a70:	6025      	str	r5, [r4, #0]
 8014a72:	bf18      	it	ne
 8014a74:	6059      	strne	r1, [r3, #4]
 8014a76:	6863      	ldr	r3, [r4, #4]
 8014a78:	bf08      	it	eq
 8014a7a:	6031      	streq	r1, [r6, #0]
 8014a7c:	5162      	str	r2, [r4, r5]
 8014a7e:	604b      	str	r3, [r1, #4]
 8014a80:	4638      	mov	r0, r7
 8014a82:	f104 060b 	add.w	r6, r4, #11
 8014a86:	f000 fb3f 	bl	8015108 <__malloc_unlock>
 8014a8a:	f026 0607 	bic.w	r6, r6, #7
 8014a8e:	1d23      	adds	r3, r4, #4
 8014a90:	1af2      	subs	r2, r6, r3
 8014a92:	d0b6      	beq.n	8014a02 <_malloc_r+0x22>
 8014a94:	1b9b      	subs	r3, r3, r6
 8014a96:	50a3      	str	r3, [r4, r2]
 8014a98:	e7b3      	b.n	8014a02 <_malloc_r+0x22>
 8014a9a:	6862      	ldr	r2, [r4, #4]
 8014a9c:	42a3      	cmp	r3, r4
 8014a9e:	bf0c      	ite	eq
 8014aa0:	6032      	streq	r2, [r6, #0]
 8014aa2:	605a      	strne	r2, [r3, #4]
 8014aa4:	e7ec      	b.n	8014a80 <_malloc_r+0xa0>
 8014aa6:	4623      	mov	r3, r4
 8014aa8:	6864      	ldr	r4, [r4, #4]
 8014aaa:	e7b2      	b.n	8014a12 <_malloc_r+0x32>
 8014aac:	4634      	mov	r4, r6
 8014aae:	6876      	ldr	r6, [r6, #4]
 8014ab0:	e7b9      	b.n	8014a26 <_malloc_r+0x46>
 8014ab2:	230c      	movs	r3, #12
 8014ab4:	603b      	str	r3, [r7, #0]
 8014ab6:	4638      	mov	r0, r7
 8014ab8:	f000 fb26 	bl	8015108 <__malloc_unlock>
 8014abc:	e7a1      	b.n	8014a02 <_malloc_r+0x22>
 8014abe:	6025      	str	r5, [r4, #0]
 8014ac0:	e7de      	b.n	8014a80 <_malloc_r+0xa0>
 8014ac2:	bf00      	nop
 8014ac4:	20008f60 	.word	0x20008f60

08014ac8 <__ssputs_r>:
 8014ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014acc:	688e      	ldr	r6, [r1, #8]
 8014ace:	429e      	cmp	r6, r3
 8014ad0:	4682      	mov	sl, r0
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	4690      	mov	r8, r2
 8014ad6:	461f      	mov	r7, r3
 8014ad8:	d838      	bhi.n	8014b4c <__ssputs_r+0x84>
 8014ada:	898a      	ldrh	r2, [r1, #12]
 8014adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014ae0:	d032      	beq.n	8014b48 <__ssputs_r+0x80>
 8014ae2:	6825      	ldr	r5, [r4, #0]
 8014ae4:	6909      	ldr	r1, [r1, #16]
 8014ae6:	eba5 0901 	sub.w	r9, r5, r1
 8014aea:	6965      	ldr	r5, [r4, #20]
 8014aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014af4:	3301      	adds	r3, #1
 8014af6:	444b      	add	r3, r9
 8014af8:	106d      	asrs	r5, r5, #1
 8014afa:	429d      	cmp	r5, r3
 8014afc:	bf38      	it	cc
 8014afe:	461d      	movcc	r5, r3
 8014b00:	0553      	lsls	r3, r2, #21
 8014b02:	d531      	bpl.n	8014b68 <__ssputs_r+0xa0>
 8014b04:	4629      	mov	r1, r5
 8014b06:	f7ff ff6b 	bl	80149e0 <_malloc_r>
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	b950      	cbnz	r0, 8014b24 <__ssputs_r+0x5c>
 8014b0e:	230c      	movs	r3, #12
 8014b10:	f8ca 3000 	str.w	r3, [sl]
 8014b14:	89a3      	ldrh	r3, [r4, #12]
 8014b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b1a:	81a3      	strh	r3, [r4, #12]
 8014b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b24:	6921      	ldr	r1, [r4, #16]
 8014b26:	464a      	mov	r2, r9
 8014b28:	f7ff feae 	bl	8014888 <memcpy>
 8014b2c:	89a3      	ldrh	r3, [r4, #12]
 8014b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b36:	81a3      	strh	r3, [r4, #12]
 8014b38:	6126      	str	r6, [r4, #16]
 8014b3a:	6165      	str	r5, [r4, #20]
 8014b3c:	444e      	add	r6, r9
 8014b3e:	eba5 0509 	sub.w	r5, r5, r9
 8014b42:	6026      	str	r6, [r4, #0]
 8014b44:	60a5      	str	r5, [r4, #8]
 8014b46:	463e      	mov	r6, r7
 8014b48:	42be      	cmp	r6, r7
 8014b4a:	d900      	bls.n	8014b4e <__ssputs_r+0x86>
 8014b4c:	463e      	mov	r6, r7
 8014b4e:	6820      	ldr	r0, [r4, #0]
 8014b50:	4632      	mov	r2, r6
 8014b52:	4641      	mov	r1, r8
 8014b54:	f000 fab8 	bl	80150c8 <memmove>
 8014b58:	68a3      	ldr	r3, [r4, #8]
 8014b5a:	1b9b      	subs	r3, r3, r6
 8014b5c:	60a3      	str	r3, [r4, #8]
 8014b5e:	6823      	ldr	r3, [r4, #0]
 8014b60:	4433      	add	r3, r6
 8014b62:	6023      	str	r3, [r4, #0]
 8014b64:	2000      	movs	r0, #0
 8014b66:	e7db      	b.n	8014b20 <__ssputs_r+0x58>
 8014b68:	462a      	mov	r2, r5
 8014b6a:	f000 fb1f 	bl	80151ac <_realloc_r>
 8014b6e:	4606      	mov	r6, r0
 8014b70:	2800      	cmp	r0, #0
 8014b72:	d1e1      	bne.n	8014b38 <__ssputs_r+0x70>
 8014b74:	6921      	ldr	r1, [r4, #16]
 8014b76:	4650      	mov	r0, sl
 8014b78:	f000 facc 	bl	8015114 <_free_r>
 8014b7c:	e7c7      	b.n	8014b0e <__ssputs_r+0x46>
	...

08014b80 <_svfiprintf_r>:
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	4698      	mov	r8, r3
 8014b86:	898b      	ldrh	r3, [r1, #12]
 8014b88:	061b      	lsls	r3, r3, #24
 8014b8a:	b09d      	sub	sp, #116	; 0x74
 8014b8c:	4607      	mov	r7, r0
 8014b8e:	460d      	mov	r5, r1
 8014b90:	4614      	mov	r4, r2
 8014b92:	d50e      	bpl.n	8014bb2 <_svfiprintf_r+0x32>
 8014b94:	690b      	ldr	r3, [r1, #16]
 8014b96:	b963      	cbnz	r3, 8014bb2 <_svfiprintf_r+0x32>
 8014b98:	2140      	movs	r1, #64	; 0x40
 8014b9a:	f7ff ff21 	bl	80149e0 <_malloc_r>
 8014b9e:	6028      	str	r0, [r5, #0]
 8014ba0:	6128      	str	r0, [r5, #16]
 8014ba2:	b920      	cbnz	r0, 8014bae <_svfiprintf_r+0x2e>
 8014ba4:	230c      	movs	r3, #12
 8014ba6:	603b      	str	r3, [r7, #0]
 8014ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bac:	e0d1      	b.n	8014d52 <_svfiprintf_r+0x1d2>
 8014bae:	2340      	movs	r3, #64	; 0x40
 8014bb0:	616b      	str	r3, [r5, #20]
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014bb6:	2320      	movs	r3, #32
 8014bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bc0:	2330      	movs	r3, #48	; 0x30
 8014bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014d6c <_svfiprintf_r+0x1ec>
 8014bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014bca:	f04f 0901 	mov.w	r9, #1
 8014bce:	4623      	mov	r3, r4
 8014bd0:	469a      	mov	sl, r3
 8014bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bd6:	b10a      	cbz	r2, 8014bdc <_svfiprintf_r+0x5c>
 8014bd8:	2a25      	cmp	r2, #37	; 0x25
 8014bda:	d1f9      	bne.n	8014bd0 <_svfiprintf_r+0x50>
 8014bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8014be0:	d00b      	beq.n	8014bfa <_svfiprintf_r+0x7a>
 8014be2:	465b      	mov	r3, fp
 8014be4:	4622      	mov	r2, r4
 8014be6:	4629      	mov	r1, r5
 8014be8:	4638      	mov	r0, r7
 8014bea:	f7ff ff6d 	bl	8014ac8 <__ssputs_r>
 8014bee:	3001      	adds	r0, #1
 8014bf0:	f000 80aa 	beq.w	8014d48 <_svfiprintf_r+0x1c8>
 8014bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bf6:	445a      	add	r2, fp
 8014bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8014bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	f000 80a2 	beq.w	8014d48 <_svfiprintf_r+0x1c8>
 8014c04:	2300      	movs	r3, #0
 8014c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c0e:	f10a 0a01 	add.w	sl, sl, #1
 8014c12:	9304      	str	r3, [sp, #16]
 8014c14:	9307      	str	r3, [sp, #28]
 8014c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8014c1c:	4654      	mov	r4, sl
 8014c1e:	2205      	movs	r2, #5
 8014c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c24:	4851      	ldr	r0, [pc, #324]	; (8014d6c <_svfiprintf_r+0x1ec>)
 8014c26:	f7eb fb33 	bl	8000290 <memchr>
 8014c2a:	9a04      	ldr	r2, [sp, #16]
 8014c2c:	b9d8      	cbnz	r0, 8014c66 <_svfiprintf_r+0xe6>
 8014c2e:	06d0      	lsls	r0, r2, #27
 8014c30:	bf44      	itt	mi
 8014c32:	2320      	movmi	r3, #32
 8014c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c38:	0711      	lsls	r1, r2, #28
 8014c3a:	bf44      	itt	mi
 8014c3c:	232b      	movmi	r3, #43	; 0x2b
 8014c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c42:	f89a 3000 	ldrb.w	r3, [sl]
 8014c46:	2b2a      	cmp	r3, #42	; 0x2a
 8014c48:	d015      	beq.n	8014c76 <_svfiprintf_r+0xf6>
 8014c4a:	9a07      	ldr	r2, [sp, #28]
 8014c4c:	4654      	mov	r4, sl
 8014c4e:	2000      	movs	r0, #0
 8014c50:	f04f 0c0a 	mov.w	ip, #10
 8014c54:	4621      	mov	r1, r4
 8014c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c5a:	3b30      	subs	r3, #48	; 0x30
 8014c5c:	2b09      	cmp	r3, #9
 8014c5e:	d94e      	bls.n	8014cfe <_svfiprintf_r+0x17e>
 8014c60:	b1b0      	cbz	r0, 8014c90 <_svfiprintf_r+0x110>
 8014c62:	9207      	str	r2, [sp, #28]
 8014c64:	e014      	b.n	8014c90 <_svfiprintf_r+0x110>
 8014c66:	eba0 0308 	sub.w	r3, r0, r8
 8014c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8014c6e:	4313      	orrs	r3, r2
 8014c70:	9304      	str	r3, [sp, #16]
 8014c72:	46a2      	mov	sl, r4
 8014c74:	e7d2      	b.n	8014c1c <_svfiprintf_r+0x9c>
 8014c76:	9b03      	ldr	r3, [sp, #12]
 8014c78:	1d19      	adds	r1, r3, #4
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	9103      	str	r1, [sp, #12]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	bfbb      	ittet	lt
 8014c82:	425b      	neglt	r3, r3
 8014c84:	f042 0202 	orrlt.w	r2, r2, #2
 8014c88:	9307      	strge	r3, [sp, #28]
 8014c8a:	9307      	strlt	r3, [sp, #28]
 8014c8c:	bfb8      	it	lt
 8014c8e:	9204      	strlt	r2, [sp, #16]
 8014c90:	7823      	ldrb	r3, [r4, #0]
 8014c92:	2b2e      	cmp	r3, #46	; 0x2e
 8014c94:	d10c      	bne.n	8014cb0 <_svfiprintf_r+0x130>
 8014c96:	7863      	ldrb	r3, [r4, #1]
 8014c98:	2b2a      	cmp	r3, #42	; 0x2a
 8014c9a:	d135      	bne.n	8014d08 <_svfiprintf_r+0x188>
 8014c9c:	9b03      	ldr	r3, [sp, #12]
 8014c9e:	1d1a      	adds	r2, r3, #4
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	9203      	str	r2, [sp, #12]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	bfb8      	it	lt
 8014ca8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014cac:	3402      	adds	r4, #2
 8014cae:	9305      	str	r3, [sp, #20]
 8014cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014d7c <_svfiprintf_r+0x1fc>
 8014cb4:	7821      	ldrb	r1, [r4, #0]
 8014cb6:	2203      	movs	r2, #3
 8014cb8:	4650      	mov	r0, sl
 8014cba:	f7eb fae9 	bl	8000290 <memchr>
 8014cbe:	b140      	cbz	r0, 8014cd2 <_svfiprintf_r+0x152>
 8014cc0:	2340      	movs	r3, #64	; 0x40
 8014cc2:	eba0 000a 	sub.w	r0, r0, sl
 8014cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8014cca:	9b04      	ldr	r3, [sp, #16]
 8014ccc:	4303      	orrs	r3, r0
 8014cce:	3401      	adds	r4, #1
 8014cd0:	9304      	str	r3, [sp, #16]
 8014cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cd6:	4826      	ldr	r0, [pc, #152]	; (8014d70 <_svfiprintf_r+0x1f0>)
 8014cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014cdc:	2206      	movs	r2, #6
 8014cde:	f7eb fad7 	bl	8000290 <memchr>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	d038      	beq.n	8014d58 <_svfiprintf_r+0x1d8>
 8014ce6:	4b23      	ldr	r3, [pc, #140]	; (8014d74 <_svfiprintf_r+0x1f4>)
 8014ce8:	bb1b      	cbnz	r3, 8014d32 <_svfiprintf_r+0x1b2>
 8014cea:	9b03      	ldr	r3, [sp, #12]
 8014cec:	3307      	adds	r3, #7
 8014cee:	f023 0307 	bic.w	r3, r3, #7
 8014cf2:	3308      	adds	r3, #8
 8014cf4:	9303      	str	r3, [sp, #12]
 8014cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cf8:	4433      	add	r3, r6
 8014cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8014cfc:	e767      	b.n	8014bce <_svfiprintf_r+0x4e>
 8014cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d02:	460c      	mov	r4, r1
 8014d04:	2001      	movs	r0, #1
 8014d06:	e7a5      	b.n	8014c54 <_svfiprintf_r+0xd4>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	3401      	adds	r4, #1
 8014d0c:	9305      	str	r3, [sp, #20]
 8014d0e:	4619      	mov	r1, r3
 8014d10:	f04f 0c0a 	mov.w	ip, #10
 8014d14:	4620      	mov	r0, r4
 8014d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d1a:	3a30      	subs	r2, #48	; 0x30
 8014d1c:	2a09      	cmp	r2, #9
 8014d1e:	d903      	bls.n	8014d28 <_svfiprintf_r+0x1a8>
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d0c5      	beq.n	8014cb0 <_svfiprintf_r+0x130>
 8014d24:	9105      	str	r1, [sp, #20]
 8014d26:	e7c3      	b.n	8014cb0 <_svfiprintf_r+0x130>
 8014d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d2c:	4604      	mov	r4, r0
 8014d2e:	2301      	movs	r3, #1
 8014d30:	e7f0      	b.n	8014d14 <_svfiprintf_r+0x194>
 8014d32:	ab03      	add	r3, sp, #12
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	462a      	mov	r2, r5
 8014d38:	4b0f      	ldr	r3, [pc, #60]	; (8014d78 <_svfiprintf_r+0x1f8>)
 8014d3a:	a904      	add	r1, sp, #16
 8014d3c:	4638      	mov	r0, r7
 8014d3e:	f3af 8000 	nop.w
 8014d42:	1c42      	adds	r2, r0, #1
 8014d44:	4606      	mov	r6, r0
 8014d46:	d1d6      	bne.n	8014cf6 <_svfiprintf_r+0x176>
 8014d48:	89ab      	ldrh	r3, [r5, #12]
 8014d4a:	065b      	lsls	r3, r3, #25
 8014d4c:	f53f af2c 	bmi.w	8014ba8 <_svfiprintf_r+0x28>
 8014d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d52:	b01d      	add	sp, #116	; 0x74
 8014d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d58:	ab03      	add	r3, sp, #12
 8014d5a:	9300      	str	r3, [sp, #0]
 8014d5c:	462a      	mov	r2, r5
 8014d5e:	4b06      	ldr	r3, [pc, #24]	; (8014d78 <_svfiprintf_r+0x1f8>)
 8014d60:	a904      	add	r1, sp, #16
 8014d62:	4638      	mov	r0, r7
 8014d64:	f000 f87a 	bl	8014e5c <_printf_i>
 8014d68:	e7eb      	b.n	8014d42 <_svfiprintf_r+0x1c2>
 8014d6a:	bf00      	nop
 8014d6c:	080164f8 	.word	0x080164f8
 8014d70:	08016502 	.word	0x08016502
 8014d74:	00000000 	.word	0x00000000
 8014d78:	08014ac9 	.word	0x08014ac9
 8014d7c:	080164fe 	.word	0x080164fe

08014d80 <_printf_common>:
 8014d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d84:	4616      	mov	r6, r2
 8014d86:	4699      	mov	r9, r3
 8014d88:	688a      	ldr	r2, [r1, #8]
 8014d8a:	690b      	ldr	r3, [r1, #16]
 8014d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014d90:	4293      	cmp	r3, r2
 8014d92:	bfb8      	it	lt
 8014d94:	4613      	movlt	r3, r2
 8014d96:	6033      	str	r3, [r6, #0]
 8014d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014d9c:	4607      	mov	r7, r0
 8014d9e:	460c      	mov	r4, r1
 8014da0:	b10a      	cbz	r2, 8014da6 <_printf_common+0x26>
 8014da2:	3301      	adds	r3, #1
 8014da4:	6033      	str	r3, [r6, #0]
 8014da6:	6823      	ldr	r3, [r4, #0]
 8014da8:	0699      	lsls	r1, r3, #26
 8014daa:	bf42      	ittt	mi
 8014dac:	6833      	ldrmi	r3, [r6, #0]
 8014dae:	3302      	addmi	r3, #2
 8014db0:	6033      	strmi	r3, [r6, #0]
 8014db2:	6825      	ldr	r5, [r4, #0]
 8014db4:	f015 0506 	ands.w	r5, r5, #6
 8014db8:	d106      	bne.n	8014dc8 <_printf_common+0x48>
 8014dba:	f104 0a19 	add.w	sl, r4, #25
 8014dbe:	68e3      	ldr	r3, [r4, #12]
 8014dc0:	6832      	ldr	r2, [r6, #0]
 8014dc2:	1a9b      	subs	r3, r3, r2
 8014dc4:	42ab      	cmp	r3, r5
 8014dc6:	dc26      	bgt.n	8014e16 <_printf_common+0x96>
 8014dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014dcc:	1e13      	subs	r3, r2, #0
 8014dce:	6822      	ldr	r2, [r4, #0]
 8014dd0:	bf18      	it	ne
 8014dd2:	2301      	movne	r3, #1
 8014dd4:	0692      	lsls	r2, r2, #26
 8014dd6:	d42b      	bmi.n	8014e30 <_printf_common+0xb0>
 8014dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ddc:	4649      	mov	r1, r9
 8014dde:	4638      	mov	r0, r7
 8014de0:	47c0      	blx	r8
 8014de2:	3001      	adds	r0, #1
 8014de4:	d01e      	beq.n	8014e24 <_printf_common+0xa4>
 8014de6:	6823      	ldr	r3, [r4, #0]
 8014de8:	68e5      	ldr	r5, [r4, #12]
 8014dea:	6832      	ldr	r2, [r6, #0]
 8014dec:	f003 0306 	and.w	r3, r3, #6
 8014df0:	2b04      	cmp	r3, #4
 8014df2:	bf08      	it	eq
 8014df4:	1aad      	subeq	r5, r5, r2
 8014df6:	68a3      	ldr	r3, [r4, #8]
 8014df8:	6922      	ldr	r2, [r4, #16]
 8014dfa:	bf0c      	ite	eq
 8014dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e00:	2500      	movne	r5, #0
 8014e02:	4293      	cmp	r3, r2
 8014e04:	bfc4      	itt	gt
 8014e06:	1a9b      	subgt	r3, r3, r2
 8014e08:	18ed      	addgt	r5, r5, r3
 8014e0a:	2600      	movs	r6, #0
 8014e0c:	341a      	adds	r4, #26
 8014e0e:	42b5      	cmp	r5, r6
 8014e10:	d11a      	bne.n	8014e48 <_printf_common+0xc8>
 8014e12:	2000      	movs	r0, #0
 8014e14:	e008      	b.n	8014e28 <_printf_common+0xa8>
 8014e16:	2301      	movs	r3, #1
 8014e18:	4652      	mov	r2, sl
 8014e1a:	4649      	mov	r1, r9
 8014e1c:	4638      	mov	r0, r7
 8014e1e:	47c0      	blx	r8
 8014e20:	3001      	adds	r0, #1
 8014e22:	d103      	bne.n	8014e2c <_printf_common+0xac>
 8014e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e2c:	3501      	adds	r5, #1
 8014e2e:	e7c6      	b.n	8014dbe <_printf_common+0x3e>
 8014e30:	18e1      	adds	r1, r4, r3
 8014e32:	1c5a      	adds	r2, r3, #1
 8014e34:	2030      	movs	r0, #48	; 0x30
 8014e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014e3a:	4422      	add	r2, r4
 8014e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014e44:	3302      	adds	r3, #2
 8014e46:	e7c7      	b.n	8014dd8 <_printf_common+0x58>
 8014e48:	2301      	movs	r3, #1
 8014e4a:	4622      	mov	r2, r4
 8014e4c:	4649      	mov	r1, r9
 8014e4e:	4638      	mov	r0, r7
 8014e50:	47c0      	blx	r8
 8014e52:	3001      	adds	r0, #1
 8014e54:	d0e6      	beq.n	8014e24 <_printf_common+0xa4>
 8014e56:	3601      	adds	r6, #1
 8014e58:	e7d9      	b.n	8014e0e <_printf_common+0x8e>
	...

08014e5c <_printf_i>:
 8014e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e60:	7e0f      	ldrb	r7, [r1, #24]
 8014e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014e64:	2f78      	cmp	r7, #120	; 0x78
 8014e66:	4691      	mov	r9, r2
 8014e68:	4680      	mov	r8, r0
 8014e6a:	460c      	mov	r4, r1
 8014e6c:	469a      	mov	sl, r3
 8014e6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014e72:	d807      	bhi.n	8014e84 <_printf_i+0x28>
 8014e74:	2f62      	cmp	r7, #98	; 0x62
 8014e76:	d80a      	bhi.n	8014e8e <_printf_i+0x32>
 8014e78:	2f00      	cmp	r7, #0
 8014e7a:	f000 80d8 	beq.w	801502e <_printf_i+0x1d2>
 8014e7e:	2f58      	cmp	r7, #88	; 0x58
 8014e80:	f000 80a3 	beq.w	8014fca <_printf_i+0x16e>
 8014e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014e8c:	e03a      	b.n	8014f04 <_printf_i+0xa8>
 8014e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014e92:	2b15      	cmp	r3, #21
 8014e94:	d8f6      	bhi.n	8014e84 <_printf_i+0x28>
 8014e96:	a101      	add	r1, pc, #4	; (adr r1, 8014e9c <_printf_i+0x40>)
 8014e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014e9c:	08014ef5 	.word	0x08014ef5
 8014ea0:	08014f09 	.word	0x08014f09
 8014ea4:	08014e85 	.word	0x08014e85
 8014ea8:	08014e85 	.word	0x08014e85
 8014eac:	08014e85 	.word	0x08014e85
 8014eb0:	08014e85 	.word	0x08014e85
 8014eb4:	08014f09 	.word	0x08014f09
 8014eb8:	08014e85 	.word	0x08014e85
 8014ebc:	08014e85 	.word	0x08014e85
 8014ec0:	08014e85 	.word	0x08014e85
 8014ec4:	08014e85 	.word	0x08014e85
 8014ec8:	08015015 	.word	0x08015015
 8014ecc:	08014f39 	.word	0x08014f39
 8014ed0:	08014ff7 	.word	0x08014ff7
 8014ed4:	08014e85 	.word	0x08014e85
 8014ed8:	08014e85 	.word	0x08014e85
 8014edc:	08015037 	.word	0x08015037
 8014ee0:	08014e85 	.word	0x08014e85
 8014ee4:	08014f39 	.word	0x08014f39
 8014ee8:	08014e85 	.word	0x08014e85
 8014eec:	08014e85 	.word	0x08014e85
 8014ef0:	08014fff 	.word	0x08014fff
 8014ef4:	682b      	ldr	r3, [r5, #0]
 8014ef6:	1d1a      	adds	r2, r3, #4
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	602a      	str	r2, [r5, #0]
 8014efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f04:	2301      	movs	r3, #1
 8014f06:	e0a3      	b.n	8015050 <_printf_i+0x1f4>
 8014f08:	6820      	ldr	r0, [r4, #0]
 8014f0a:	6829      	ldr	r1, [r5, #0]
 8014f0c:	0606      	lsls	r6, r0, #24
 8014f0e:	f101 0304 	add.w	r3, r1, #4
 8014f12:	d50a      	bpl.n	8014f2a <_printf_i+0xce>
 8014f14:	680e      	ldr	r6, [r1, #0]
 8014f16:	602b      	str	r3, [r5, #0]
 8014f18:	2e00      	cmp	r6, #0
 8014f1a:	da03      	bge.n	8014f24 <_printf_i+0xc8>
 8014f1c:	232d      	movs	r3, #45	; 0x2d
 8014f1e:	4276      	negs	r6, r6
 8014f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f24:	485e      	ldr	r0, [pc, #376]	; (80150a0 <_printf_i+0x244>)
 8014f26:	230a      	movs	r3, #10
 8014f28:	e019      	b.n	8014f5e <_printf_i+0x102>
 8014f2a:	680e      	ldr	r6, [r1, #0]
 8014f2c:	602b      	str	r3, [r5, #0]
 8014f2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014f32:	bf18      	it	ne
 8014f34:	b236      	sxthne	r6, r6
 8014f36:	e7ef      	b.n	8014f18 <_printf_i+0xbc>
 8014f38:	682b      	ldr	r3, [r5, #0]
 8014f3a:	6820      	ldr	r0, [r4, #0]
 8014f3c:	1d19      	adds	r1, r3, #4
 8014f3e:	6029      	str	r1, [r5, #0]
 8014f40:	0601      	lsls	r1, r0, #24
 8014f42:	d501      	bpl.n	8014f48 <_printf_i+0xec>
 8014f44:	681e      	ldr	r6, [r3, #0]
 8014f46:	e002      	b.n	8014f4e <_printf_i+0xf2>
 8014f48:	0646      	lsls	r6, r0, #25
 8014f4a:	d5fb      	bpl.n	8014f44 <_printf_i+0xe8>
 8014f4c:	881e      	ldrh	r6, [r3, #0]
 8014f4e:	4854      	ldr	r0, [pc, #336]	; (80150a0 <_printf_i+0x244>)
 8014f50:	2f6f      	cmp	r7, #111	; 0x6f
 8014f52:	bf0c      	ite	eq
 8014f54:	2308      	moveq	r3, #8
 8014f56:	230a      	movne	r3, #10
 8014f58:	2100      	movs	r1, #0
 8014f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014f5e:	6865      	ldr	r5, [r4, #4]
 8014f60:	60a5      	str	r5, [r4, #8]
 8014f62:	2d00      	cmp	r5, #0
 8014f64:	bfa2      	ittt	ge
 8014f66:	6821      	ldrge	r1, [r4, #0]
 8014f68:	f021 0104 	bicge.w	r1, r1, #4
 8014f6c:	6021      	strge	r1, [r4, #0]
 8014f6e:	b90e      	cbnz	r6, 8014f74 <_printf_i+0x118>
 8014f70:	2d00      	cmp	r5, #0
 8014f72:	d04d      	beq.n	8015010 <_printf_i+0x1b4>
 8014f74:	4615      	mov	r5, r2
 8014f76:	fbb6 f1f3 	udiv	r1, r6, r3
 8014f7a:	fb03 6711 	mls	r7, r3, r1, r6
 8014f7e:	5dc7      	ldrb	r7, [r0, r7]
 8014f80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014f84:	4637      	mov	r7, r6
 8014f86:	42bb      	cmp	r3, r7
 8014f88:	460e      	mov	r6, r1
 8014f8a:	d9f4      	bls.n	8014f76 <_printf_i+0x11a>
 8014f8c:	2b08      	cmp	r3, #8
 8014f8e:	d10b      	bne.n	8014fa8 <_printf_i+0x14c>
 8014f90:	6823      	ldr	r3, [r4, #0]
 8014f92:	07de      	lsls	r6, r3, #31
 8014f94:	d508      	bpl.n	8014fa8 <_printf_i+0x14c>
 8014f96:	6923      	ldr	r3, [r4, #16]
 8014f98:	6861      	ldr	r1, [r4, #4]
 8014f9a:	4299      	cmp	r1, r3
 8014f9c:	bfde      	ittt	le
 8014f9e:	2330      	movle	r3, #48	; 0x30
 8014fa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014fa4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014fa8:	1b52      	subs	r2, r2, r5
 8014faa:	6122      	str	r2, [r4, #16]
 8014fac:	f8cd a000 	str.w	sl, [sp]
 8014fb0:	464b      	mov	r3, r9
 8014fb2:	aa03      	add	r2, sp, #12
 8014fb4:	4621      	mov	r1, r4
 8014fb6:	4640      	mov	r0, r8
 8014fb8:	f7ff fee2 	bl	8014d80 <_printf_common>
 8014fbc:	3001      	adds	r0, #1
 8014fbe:	d14c      	bne.n	801505a <_printf_i+0x1fe>
 8014fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fc4:	b004      	add	sp, #16
 8014fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fca:	4835      	ldr	r0, [pc, #212]	; (80150a0 <_printf_i+0x244>)
 8014fcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014fd0:	6829      	ldr	r1, [r5, #0]
 8014fd2:	6823      	ldr	r3, [r4, #0]
 8014fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8014fd8:	6029      	str	r1, [r5, #0]
 8014fda:	061d      	lsls	r5, r3, #24
 8014fdc:	d514      	bpl.n	8015008 <_printf_i+0x1ac>
 8014fde:	07df      	lsls	r7, r3, #31
 8014fe0:	bf44      	itt	mi
 8014fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8014fe6:	6023      	strmi	r3, [r4, #0]
 8014fe8:	b91e      	cbnz	r6, 8014ff2 <_printf_i+0x196>
 8014fea:	6823      	ldr	r3, [r4, #0]
 8014fec:	f023 0320 	bic.w	r3, r3, #32
 8014ff0:	6023      	str	r3, [r4, #0]
 8014ff2:	2310      	movs	r3, #16
 8014ff4:	e7b0      	b.n	8014f58 <_printf_i+0xfc>
 8014ff6:	6823      	ldr	r3, [r4, #0]
 8014ff8:	f043 0320 	orr.w	r3, r3, #32
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	2378      	movs	r3, #120	; 0x78
 8015000:	4828      	ldr	r0, [pc, #160]	; (80150a4 <_printf_i+0x248>)
 8015002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015006:	e7e3      	b.n	8014fd0 <_printf_i+0x174>
 8015008:	0659      	lsls	r1, r3, #25
 801500a:	bf48      	it	mi
 801500c:	b2b6      	uxthmi	r6, r6
 801500e:	e7e6      	b.n	8014fde <_printf_i+0x182>
 8015010:	4615      	mov	r5, r2
 8015012:	e7bb      	b.n	8014f8c <_printf_i+0x130>
 8015014:	682b      	ldr	r3, [r5, #0]
 8015016:	6826      	ldr	r6, [r4, #0]
 8015018:	6961      	ldr	r1, [r4, #20]
 801501a:	1d18      	adds	r0, r3, #4
 801501c:	6028      	str	r0, [r5, #0]
 801501e:	0635      	lsls	r5, r6, #24
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	d501      	bpl.n	8015028 <_printf_i+0x1cc>
 8015024:	6019      	str	r1, [r3, #0]
 8015026:	e002      	b.n	801502e <_printf_i+0x1d2>
 8015028:	0670      	lsls	r0, r6, #25
 801502a:	d5fb      	bpl.n	8015024 <_printf_i+0x1c8>
 801502c:	8019      	strh	r1, [r3, #0]
 801502e:	2300      	movs	r3, #0
 8015030:	6123      	str	r3, [r4, #16]
 8015032:	4615      	mov	r5, r2
 8015034:	e7ba      	b.n	8014fac <_printf_i+0x150>
 8015036:	682b      	ldr	r3, [r5, #0]
 8015038:	1d1a      	adds	r2, r3, #4
 801503a:	602a      	str	r2, [r5, #0]
 801503c:	681d      	ldr	r5, [r3, #0]
 801503e:	6862      	ldr	r2, [r4, #4]
 8015040:	2100      	movs	r1, #0
 8015042:	4628      	mov	r0, r5
 8015044:	f7eb f924 	bl	8000290 <memchr>
 8015048:	b108      	cbz	r0, 801504e <_printf_i+0x1f2>
 801504a:	1b40      	subs	r0, r0, r5
 801504c:	6060      	str	r0, [r4, #4]
 801504e:	6863      	ldr	r3, [r4, #4]
 8015050:	6123      	str	r3, [r4, #16]
 8015052:	2300      	movs	r3, #0
 8015054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015058:	e7a8      	b.n	8014fac <_printf_i+0x150>
 801505a:	6923      	ldr	r3, [r4, #16]
 801505c:	462a      	mov	r2, r5
 801505e:	4649      	mov	r1, r9
 8015060:	4640      	mov	r0, r8
 8015062:	47d0      	blx	sl
 8015064:	3001      	adds	r0, #1
 8015066:	d0ab      	beq.n	8014fc0 <_printf_i+0x164>
 8015068:	6823      	ldr	r3, [r4, #0]
 801506a:	079b      	lsls	r3, r3, #30
 801506c:	d413      	bmi.n	8015096 <_printf_i+0x23a>
 801506e:	68e0      	ldr	r0, [r4, #12]
 8015070:	9b03      	ldr	r3, [sp, #12]
 8015072:	4298      	cmp	r0, r3
 8015074:	bfb8      	it	lt
 8015076:	4618      	movlt	r0, r3
 8015078:	e7a4      	b.n	8014fc4 <_printf_i+0x168>
 801507a:	2301      	movs	r3, #1
 801507c:	4632      	mov	r2, r6
 801507e:	4649      	mov	r1, r9
 8015080:	4640      	mov	r0, r8
 8015082:	47d0      	blx	sl
 8015084:	3001      	adds	r0, #1
 8015086:	d09b      	beq.n	8014fc0 <_printf_i+0x164>
 8015088:	3501      	adds	r5, #1
 801508a:	68e3      	ldr	r3, [r4, #12]
 801508c:	9903      	ldr	r1, [sp, #12]
 801508e:	1a5b      	subs	r3, r3, r1
 8015090:	42ab      	cmp	r3, r5
 8015092:	dcf2      	bgt.n	801507a <_printf_i+0x21e>
 8015094:	e7eb      	b.n	801506e <_printf_i+0x212>
 8015096:	2500      	movs	r5, #0
 8015098:	f104 0619 	add.w	r6, r4, #25
 801509c:	e7f5      	b.n	801508a <_printf_i+0x22e>
 801509e:	bf00      	nop
 80150a0:	08016509 	.word	0x08016509
 80150a4:	0801651a 	.word	0x0801651a

080150a8 <_sbrk_r>:
 80150a8:	b538      	push	{r3, r4, r5, lr}
 80150aa:	4d06      	ldr	r5, [pc, #24]	; (80150c4 <_sbrk_r+0x1c>)
 80150ac:	2300      	movs	r3, #0
 80150ae:	4604      	mov	r4, r0
 80150b0:	4608      	mov	r0, r1
 80150b2:	602b      	str	r3, [r5, #0]
 80150b4:	f000 f8b2 	bl	801521c <_sbrk>
 80150b8:	1c43      	adds	r3, r0, #1
 80150ba:	d102      	bne.n	80150c2 <_sbrk_r+0x1a>
 80150bc:	682b      	ldr	r3, [r5, #0]
 80150be:	b103      	cbz	r3, 80150c2 <_sbrk_r+0x1a>
 80150c0:	6023      	str	r3, [r4, #0]
 80150c2:	bd38      	pop	{r3, r4, r5, pc}
 80150c4:	20008f68 	.word	0x20008f68

080150c8 <memmove>:
 80150c8:	4288      	cmp	r0, r1
 80150ca:	b510      	push	{r4, lr}
 80150cc:	eb01 0402 	add.w	r4, r1, r2
 80150d0:	d902      	bls.n	80150d8 <memmove+0x10>
 80150d2:	4284      	cmp	r4, r0
 80150d4:	4623      	mov	r3, r4
 80150d6:	d807      	bhi.n	80150e8 <memmove+0x20>
 80150d8:	1e43      	subs	r3, r0, #1
 80150da:	42a1      	cmp	r1, r4
 80150dc:	d008      	beq.n	80150f0 <memmove+0x28>
 80150de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150e6:	e7f8      	b.n	80150da <memmove+0x12>
 80150e8:	4402      	add	r2, r0
 80150ea:	4601      	mov	r1, r0
 80150ec:	428a      	cmp	r2, r1
 80150ee:	d100      	bne.n	80150f2 <memmove+0x2a>
 80150f0:	bd10      	pop	{r4, pc}
 80150f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150fa:	e7f7      	b.n	80150ec <memmove+0x24>

080150fc <__malloc_lock>:
 80150fc:	4801      	ldr	r0, [pc, #4]	; (8015104 <__malloc_lock+0x8>)
 80150fe:	f7ff bc4d 	b.w	801499c <__retarget_lock_acquire_recursive>
 8015102:	bf00      	nop
 8015104:	20008f5c 	.word	0x20008f5c

08015108 <__malloc_unlock>:
 8015108:	4801      	ldr	r0, [pc, #4]	; (8015110 <__malloc_unlock+0x8>)
 801510a:	f7ff bc48 	b.w	801499e <__retarget_lock_release_recursive>
 801510e:	bf00      	nop
 8015110:	20008f5c 	.word	0x20008f5c

08015114 <_free_r>:
 8015114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015116:	2900      	cmp	r1, #0
 8015118:	d044      	beq.n	80151a4 <_free_r+0x90>
 801511a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801511e:	9001      	str	r0, [sp, #4]
 8015120:	2b00      	cmp	r3, #0
 8015122:	f1a1 0404 	sub.w	r4, r1, #4
 8015126:	bfb8      	it	lt
 8015128:	18e4      	addlt	r4, r4, r3
 801512a:	f7ff ffe7 	bl	80150fc <__malloc_lock>
 801512e:	4a1e      	ldr	r2, [pc, #120]	; (80151a8 <_free_r+0x94>)
 8015130:	9801      	ldr	r0, [sp, #4]
 8015132:	6813      	ldr	r3, [r2, #0]
 8015134:	b933      	cbnz	r3, 8015144 <_free_r+0x30>
 8015136:	6063      	str	r3, [r4, #4]
 8015138:	6014      	str	r4, [r2, #0]
 801513a:	b003      	add	sp, #12
 801513c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015140:	f7ff bfe2 	b.w	8015108 <__malloc_unlock>
 8015144:	42a3      	cmp	r3, r4
 8015146:	d908      	bls.n	801515a <_free_r+0x46>
 8015148:	6825      	ldr	r5, [r4, #0]
 801514a:	1961      	adds	r1, r4, r5
 801514c:	428b      	cmp	r3, r1
 801514e:	bf01      	itttt	eq
 8015150:	6819      	ldreq	r1, [r3, #0]
 8015152:	685b      	ldreq	r3, [r3, #4]
 8015154:	1949      	addeq	r1, r1, r5
 8015156:	6021      	streq	r1, [r4, #0]
 8015158:	e7ed      	b.n	8015136 <_free_r+0x22>
 801515a:	461a      	mov	r2, r3
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	b10b      	cbz	r3, 8015164 <_free_r+0x50>
 8015160:	42a3      	cmp	r3, r4
 8015162:	d9fa      	bls.n	801515a <_free_r+0x46>
 8015164:	6811      	ldr	r1, [r2, #0]
 8015166:	1855      	adds	r5, r2, r1
 8015168:	42a5      	cmp	r5, r4
 801516a:	d10b      	bne.n	8015184 <_free_r+0x70>
 801516c:	6824      	ldr	r4, [r4, #0]
 801516e:	4421      	add	r1, r4
 8015170:	1854      	adds	r4, r2, r1
 8015172:	42a3      	cmp	r3, r4
 8015174:	6011      	str	r1, [r2, #0]
 8015176:	d1e0      	bne.n	801513a <_free_r+0x26>
 8015178:	681c      	ldr	r4, [r3, #0]
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	6053      	str	r3, [r2, #4]
 801517e:	4421      	add	r1, r4
 8015180:	6011      	str	r1, [r2, #0]
 8015182:	e7da      	b.n	801513a <_free_r+0x26>
 8015184:	d902      	bls.n	801518c <_free_r+0x78>
 8015186:	230c      	movs	r3, #12
 8015188:	6003      	str	r3, [r0, #0]
 801518a:	e7d6      	b.n	801513a <_free_r+0x26>
 801518c:	6825      	ldr	r5, [r4, #0]
 801518e:	1961      	adds	r1, r4, r5
 8015190:	428b      	cmp	r3, r1
 8015192:	bf04      	itt	eq
 8015194:	6819      	ldreq	r1, [r3, #0]
 8015196:	685b      	ldreq	r3, [r3, #4]
 8015198:	6063      	str	r3, [r4, #4]
 801519a:	bf04      	itt	eq
 801519c:	1949      	addeq	r1, r1, r5
 801519e:	6021      	streq	r1, [r4, #0]
 80151a0:	6054      	str	r4, [r2, #4]
 80151a2:	e7ca      	b.n	801513a <_free_r+0x26>
 80151a4:	b003      	add	sp, #12
 80151a6:	bd30      	pop	{r4, r5, pc}
 80151a8:	20008f60 	.word	0x20008f60

080151ac <_realloc_r>:
 80151ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b0:	4680      	mov	r8, r0
 80151b2:	4614      	mov	r4, r2
 80151b4:	460e      	mov	r6, r1
 80151b6:	b921      	cbnz	r1, 80151c2 <_realloc_r+0x16>
 80151b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151bc:	4611      	mov	r1, r2
 80151be:	f7ff bc0f 	b.w	80149e0 <_malloc_r>
 80151c2:	b92a      	cbnz	r2, 80151d0 <_realloc_r+0x24>
 80151c4:	f7ff ffa6 	bl	8015114 <_free_r>
 80151c8:	4625      	mov	r5, r4
 80151ca:	4628      	mov	r0, r5
 80151cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d0:	f000 f81b 	bl	801520a <_malloc_usable_size_r>
 80151d4:	4284      	cmp	r4, r0
 80151d6:	4607      	mov	r7, r0
 80151d8:	d802      	bhi.n	80151e0 <_realloc_r+0x34>
 80151da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80151de:	d812      	bhi.n	8015206 <_realloc_r+0x5a>
 80151e0:	4621      	mov	r1, r4
 80151e2:	4640      	mov	r0, r8
 80151e4:	f7ff fbfc 	bl	80149e0 <_malloc_r>
 80151e8:	4605      	mov	r5, r0
 80151ea:	2800      	cmp	r0, #0
 80151ec:	d0ed      	beq.n	80151ca <_realloc_r+0x1e>
 80151ee:	42bc      	cmp	r4, r7
 80151f0:	4622      	mov	r2, r4
 80151f2:	4631      	mov	r1, r6
 80151f4:	bf28      	it	cs
 80151f6:	463a      	movcs	r2, r7
 80151f8:	f7ff fb46 	bl	8014888 <memcpy>
 80151fc:	4631      	mov	r1, r6
 80151fe:	4640      	mov	r0, r8
 8015200:	f7ff ff88 	bl	8015114 <_free_r>
 8015204:	e7e1      	b.n	80151ca <_realloc_r+0x1e>
 8015206:	4635      	mov	r5, r6
 8015208:	e7df      	b.n	80151ca <_realloc_r+0x1e>

0801520a <_malloc_usable_size_r>:
 801520a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801520e:	1f18      	subs	r0, r3, #4
 8015210:	2b00      	cmp	r3, #0
 8015212:	bfbc      	itt	lt
 8015214:	580b      	ldrlt	r3, [r1, r0]
 8015216:	18c0      	addlt	r0, r0, r3
 8015218:	4770      	bx	lr
	...

0801521c <_sbrk>:
 801521c:	4a04      	ldr	r2, [pc, #16]	; (8015230 <_sbrk+0x14>)
 801521e:	6811      	ldr	r1, [r2, #0]
 8015220:	4603      	mov	r3, r0
 8015222:	b909      	cbnz	r1, 8015228 <_sbrk+0xc>
 8015224:	4903      	ldr	r1, [pc, #12]	; (8015234 <_sbrk+0x18>)
 8015226:	6011      	str	r1, [r2, #0]
 8015228:	6810      	ldr	r0, [r2, #0]
 801522a:	4403      	add	r3, r0
 801522c:	6013      	str	r3, [r2, #0]
 801522e:	4770      	bx	lr
 8015230:	20008f6c 	.word	0x20008f6c
 8015234:	20008f70 	.word	0x20008f70

08015238 <_init>:
 8015238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801523a:	bf00      	nop
 801523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801523e:	bc08      	pop	{r3}
 8015240:	469e      	mov	lr, r3
 8015242:	4770      	bx	lr

08015244 <_fini>:
 8015244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015246:	bf00      	nop
 8015248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801524a:	bc08      	pop	{r3}
 801524c:	469e      	mov	lr, r3
 801524e:	4770      	bx	lr
