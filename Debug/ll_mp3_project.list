
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e0  08015360  08015360  00025360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016640  08016640  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08016640  08016640  00026640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016648  08016648  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016648  08016648  00026648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801664c  0801664c  0002664c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08016650  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00008f10  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008f8c  20008f8c  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005d78d  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000099ce  00000000  00000000  0008d839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004830  00000000  00000000  00097208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004340  00000000  00000000  0009ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000345df  00000000  00000000  0009fd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004498c  00000000  00000000  000d4357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001246b8  00000000  00000000  00118ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0023d39b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00013778  00000000  00000000  0023d3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  00250b64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015348 	.word	0x08015348

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08015348 	.word	0x08015348

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20002f7c 	.word	0x20002f7c
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <ds3231_register_driver>:
static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size);

static inline uint8_t B2D(uint8_t bcd);
static inline uint8_t D2B(uint8_t decimal);

void ds3231_register_driver(i2cdrv_t* drv) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	ds3231i2cdrv = drv;
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <ds3231_register_driver+0x1c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000098 	.word	0x20000098

08000654 <ds3231_get_time>:

bool ds3231_get_time(ds3231_time_t *info) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t data[7];

	if(ds3231_read_reg(DS3231_REG_SEC, data, 7) != true) {
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2207      	movs	r2, #7
 8000662:	4619      	mov	r1, r3
 8000664:	2000      	movs	r0, #0
 8000666:	f000 f89d 	bl	80007a4 <ds3231_read_reg>
 800066a:	4603      	mov	r3, r0
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d004      	beq.n	8000680 <ds3231_get_time+0x2c>
		hal_cli_printf("ds3231 read register failed");
 8000676:	482a      	ldr	r0, [pc, #168]	; (8000720 <ds3231_get_time+0xcc>)
 8000678:	f00f fb06 	bl	800fc88 <hal_cli_printf>
		return false;
 800067c:	2300      	movs	r3, #0
 800067e:	e04a      	b.n	8000716 <ds3231_get_time+0xc2>
	}

	info->sec = B2D(data[0] & 0x7F);
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f8a5 	bl	80007d8 <B2D>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	701a      	strb	r2, [r3, #0]
	info->min = B2D(data[1] & 0x7F);
 8000696:	7a7b      	ldrb	r3, [r7, #9]
 8000698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f89a 	bl	80007d8 <B2D>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	705a      	strb	r2, [r3, #1]
	info->hour = B2D(data[2] & 0x3F);
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f88f 	bl	80007d8 <B2D>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	709a      	strb	r2, [r3, #2]
	info->day = B2D(data[3] & 0x07);
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f884 	bl	80007d8 <B2D>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	70da      	strb	r2, [r3, #3]
	info->date = B2D(data[4] & 0x3F);
 80006d8:	7b3b      	ldrb	r3, [r7, #12]
 80006da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f879 	bl	80007d8 <B2D>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	711a      	strb	r2, [r3, #4]
	info->month = B2D(data[5] & 0x1F);
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f86e 	bl	80007d8 <B2D>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	715a      	strb	r2, [r3, #5]
	info->year = B2D(data[6] & 0xFF);
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f866 	bl	80007d8 <B2D>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	719a      	strb	r2, [r3, #6]

	return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08015360 	.word	0x08015360

08000724 <ds3231_day_to_string>:
void ds3231_print_time(ds3231_time_t *info) {
	hal_cli_printf("hms : %d %d %d",info->hour, info->min, info->sec);
	hal_cli_printf("ymdd : %d %d %d %s", info->year, info->month, info->date, ds3231_day_to_string(info->day));
}

char* ds3231_day_to_string(ds3231_day_t day) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	switch(day) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3b01      	subs	r3, #1
 8000732:	2b06      	cmp	r3, #6
 8000734:	d81e      	bhi.n	8000774 <ds3231_day_to_string+0x50>
 8000736:	a201      	add	r2, pc, #4	; (adr r2, 800073c <ds3231_day_to_string+0x18>)
 8000738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073c:	08000759 	.word	0x08000759
 8000740:	0800075d 	.word	0x0800075d
 8000744:	08000761 	.word	0x08000761
 8000748:	08000765 	.word	0x08000765
 800074c:	08000769 	.word	0x08000769
 8000750:	0800076d 	.word	0x0800076d
 8000754:	08000771 	.word	0x08000771
	case DS3231_DAY_SUN:
		return "Sun";
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <ds3231_day_to_string+0x60>)
 800075a:	e00f      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_MON:
		return "Mon";
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <ds3231_day_to_string+0x64>)
 800075e:	e00d      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_TUE:
		return "Tue";
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <ds3231_day_to_string+0x68>)
 8000762:	e00b      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_WED:
		return "Wed";
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <ds3231_day_to_string+0x6c>)
 8000766:	e009      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_THU:
		return "Thu";
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <ds3231_day_to_string+0x70>)
 800076a:	e007      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_FRI:
		return "Fri";
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <ds3231_day_to_string+0x74>)
 800076e:	e005      	b.n	800077c <ds3231_day_to_string+0x58>
	case DS3231_DAY_SAT:
		return "Sat";
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <ds3231_day_to_string+0x78>)
 8000772:	e003      	b.n	800077c <ds3231_day_to_string+0x58>
	default:
		hal_cli_printf("ds3231 day to string argument error");
 8000774:	480a      	ldr	r0, [pc, #40]	; (80007a0 <ds3231_day_to_string+0x7c>)
 8000776:	f00f fa87 	bl	800fc88 <hal_cli_printf>
		return 0;
 800077a:	2300      	movs	r3, #0
	}
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	080153a0 	.word	0x080153a0
 8000788:	080153a4 	.word	0x080153a4
 800078c:	080153a8 	.word	0x080153a8
 8000790:	080153ac 	.word	0x080153ac
 8000794:	080153b0 	.word	0x080153b0
 8000798:	080153b4 	.word	0x080153b4
 800079c:	080153b8 	.word	0x080153b8
 80007a0:	080153bc 	.word	0x080153bc

080007a4 <ds3231_read_reg>:

static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	73fb      	strb	r3, [r7, #15]
	return hal_i2c_receive(
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <ds3231_read_reg+0x30>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	21d0      	movs	r1, #208	; 0xd0
 80007c4:	f010 ffe2 	bl	801178c <hal_i2c_receive>
 80007c8:	4603      	mov	r3, r0
			DS3231_DEV_ADDR,
			reg,
			data,
			size,
			DS3231_I2C_TIMEOUT);
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000098 	.word	0x20000098

080007d8 <B2D>:

static inline uint8_t B2D(uint8_t bcd) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	091b      	lsrs	r3, r3, #4
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	0092      	lsls	r2, r2, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	619a      	str	r2, [r3, #24]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	041a      	lsls	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	619a      	str	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <u8x8_stm32_gpio_and_delay>:
#define SSD1306_TIMEOUT		100
#define SSD1306_SPIDRV		&spi2drv

// u8g2 gpio & delay control callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	460b      	mov	r3, r1
 8000850:	72fb      	strb	r3, [r7, #11]
 8000852:	4613      	mov	r3, r2
 8000854:	72bb      	strb	r3, [r7, #10]
  /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
  switch(msg)
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	3b28      	subs	r3, #40	; 0x28
 800085a:	2b23      	cmp	r3, #35	; 0x23
 800085c:	d87a      	bhi.n	8000954 <u8x8_stm32_gpio_and_delay+0x110>
 800085e:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <u8x8_stm32_gpio_and_delay+0x20>)
 8000860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000864:	08000955 	.word	0x08000955
 8000868:	080008f5 	.word	0x080008f5
 800086c:	08000955 	.word	0x08000955
 8000870:	08000955 	.word	0x08000955
 8000874:	08000955 	.word	0x08000955
 8000878:	08000955 	.word	0x08000955
 800087c:	08000955 	.word	0x08000955
 8000880:	08000955 	.word	0x08000955
 8000884:	08000955 	.word	0x08000955
 8000888:	08000955 	.word	0x08000955
 800088c:	08000955 	.word	0x08000955
 8000890:	08000955 	.word	0x08000955
 8000894:	08000955 	.word	0x08000955
 8000898:	08000955 	.word	0x08000955
 800089c:	08000955 	.word	0x08000955
 80008a0:	08000955 	.word	0x08000955
 80008a4:	08000955 	.word	0x08000955
 80008a8:	08000955 	.word	0x08000955
 80008ac:	08000955 	.word	0x08000955
 80008b0:	08000955 	.word	0x08000955
 80008b4:	08000955 	.word	0x08000955
 80008b8:	08000955 	.word	0x08000955
 80008bc:	08000955 	.word	0x08000955
 80008c0:	08000955 	.word	0x08000955
 80008c4:	08000955 	.word	0x08000955
 80008c8:	08000955 	.word	0x08000955
 80008cc:	08000955 	.word	0x08000955
 80008d0:	08000955 	.word	0x08000955
 80008d4:	08000955 	.word	0x08000955
 80008d8:	08000955 	.word	0x08000955
 80008dc:	08000955 	.word	0x08000955
 80008e0:	08000955 	.word	0x08000955
 80008e4:	08000955 	.word	0x08000955
 80008e8:	08000907 	.word	0x08000907
 80008ec:	08000921 	.word	0x08000921
 80008f0:	0800093b 	.word	0x0800093b
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    /* Insert codes for initialization */
    break;
  case U8X8_MSG_DELAY_MILLI:
    /* ms Delay */
	hal_delay_us(10*arg_int);
 80008f4:	7aba      	ldrb	r2, [r7, #10]
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4618      	mov	r0, r3
 8000900:	f00f fc7e 	bl	8010200 <hal_delay_us>
    break;
 8000904:	e026      	b.n	8000954 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_CS:
    /* Insert codes for SS pin control */
    if(arg_int) {
 8000906:	7abb      	ldrb	r3, [r7, #10]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d004      	beq.n	8000916 <u8x8_stm32_gpio_and_delay+0xd2>
      LL_GPIO_SetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 800090c:	2104      	movs	r1, #4
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000910:	f7ff ff7b 	bl	800080a <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
    }
    break;
 8000914:	e01e      	b.n	8000954 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000916:	2104      	movs	r1, #4
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <u8x8_stm32_gpio_and_delay+0x11c>)
 800091a:	f7ff ff84 	bl	8000826 <LL_GPIO_ResetOutputPin>
    break;
 800091e:	e019      	b.n	8000954 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_DC:
    /* Insert codes for DC pin control */
    if(arg_int) {
 8000920:	7abb      	ldrb	r3, [r7, #10]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <u8x8_stm32_gpio_and_delay+0xec>
      LL_GPIO_SetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000926:	2102      	movs	r1, #2
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <u8x8_stm32_gpio_and_delay+0x11c>)
 800092a:	f7ff ff6e 	bl	800080a <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
    }
    break;
 800092e:	e011      	b.n	8000954 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000930:	2102      	movs	r1, #2
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000934:	f7ff ff77 	bl	8000826 <LL_GPIO_ResetOutputPin>
    break;
 8000938:	e00c      	b.n	8000954 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_RESET:
    /* Insert codes for RST pin control */
    if(arg_int) {
 800093a:	7abb      	ldrb	r3, [r7, #10]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d004      	beq.n	800094a <u8x8_stm32_gpio_and_delay+0x106>
      LL_GPIO_SetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 8000940:	2101      	movs	r1, #1
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000944:	f7ff ff61 	bl	800080a <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
    }
    break;
 8000948:	e003      	b.n	8000952 <u8x8_stm32_gpio_and_delay+0x10e>
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 800094a:	2101      	movs	r1, #1
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <u8x8_stm32_gpio_and_delay+0x11c>)
 800094e:	f7ff ff6a 	bl	8000826 <LL_GPIO_ResetOutputPin>
    break;
 8000952:	bf00      	nop
  }
  return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020800 	.word	0x40020800

08000964 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	72fb      	strb	r3, [r7, #11]
 8000972:	4613      	mov	r3, r2
 8000974:	72bb      	strb	r3, [r7, #10]
  uint8_t* data = arg_ptr;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	617b      	str	r3, [r7, #20]

  switch(msg) {
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	3b14      	subs	r3, #20
 800097e:	2b0c      	cmp	r3, #12
 8000980:	d842      	bhi.n	8000a08 <u8x8_byte_stm32_hw_spi+0xa4>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <u8x8_byte_stm32_hw_spi+0x24>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000a0d 	.word	0x08000a0d
 800098c:	08000a09 	.word	0x08000a09
 8000990:	08000a09 	.word	0x08000a09
 8000994:	080009bd 	.word	0x080009bd
 8000998:	080009d9 	.word	0x080009d9
 800099c:	080009f1 	.word	0x080009f1
 80009a0:	08000a09 	.word	0x08000a09
 80009a4:	08000a09 	.word	0x08000a09
 80009a8:	08000a09 	.word	0x08000a09
 80009ac:	08000a09 	.word	0x08000a09
 80009b0:	08000a09 	.word	0x08000a09
 80009b4:	08000a09 	.word	0x08000a09
 80009b8:	080009cb 	.word	0x080009cb
  case U8X8_MSG_BYTE_SEND:
    /* Insert codes to transmit data */
	hal_spi_transfer(SSD1306_SPIDRV, data, arg_int, SSD1306_TIMEOUT);
 80009bc:	7aba      	ldrb	r2, [r7, #10]
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	6979      	ldr	r1, [r7, #20]
 80009c2:	4815      	ldr	r0, [pc, #84]	; (8000a18 <u8x8_byte_stm32_hw_spi+0xb4>)
 80009c4:	f011 ff26 	bl	8012814 <hal_spi_transfer>
    break;
 80009c8:	e021      	b.n	8000a0e <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_INIT:
    /* Insert codes to begin SPI transmission */
    break;
  case U8X8_MSG_BYTE_SET_DC:
    /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
    u8x8_gpio_SetDC(u8x8, arg_int);
 80009ca:	7abb      	ldrb	r3, [r7, #10]
 80009cc:	461a      	mov	r2, r3
 80009ce:	214a      	movs	r1, #74	; 0x4a
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f00e fe64 	bl	800f69e <u8x8_gpio_call>
    break;
 80009d6:	e01a      	b.n	8000a0e <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_START_TRANSFER:
    /* Select slave, U8X8_MSG_GPIO_CS will be called */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	2149      	movs	r1, #73	; 0x49
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f00e fe5b 	bl	800f69e <u8x8_gpio_call>
    hal_delay_us(100);
 80009e8:	2064      	movs	r0, #100	; 0x64
 80009ea:	f00f fc09 	bl	8010200 <hal_delay_us>
    break;
 80009ee:	e00e      	b.n	8000a0e <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_END_TRANSFER:
	hal_delay_us(100);
 80009f0:	2064      	movs	r0, #100	; 0x64
 80009f2:	f00f fc05 	bl	8010200 <hal_delay_us>
    /* Insert codes to end SPI transmission */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	461a      	mov	r2, r3
 80009fe:	2149      	movs	r1, #73	; 0x49
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f00e fe4c 	bl	800f69e <u8x8_gpio_call>
    break;
 8000a06:	e002      	b.n	8000a0e <u8x8_byte_stm32_hw_spi+0xaa>
  default:
    return 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e001      	b.n	8000a10 <u8x8_byte_stm32_hw_spi+0xac>
    break;
 8000a0c:	bf00      	nop
  }
  return 1;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20005a78 	.word	0x20005a78

08000a1c <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	431a      	orrs	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <LL_GPIO_IsInputPinSet>:
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	691a      	ldr	r2, [r3, #16]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	4013      	ands	r3, r2
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	bf0c      	ite	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d005      	beq.n	8000a8a <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	889a      	ldrh	r2, [r3, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8000a88:	e006      	b.n	8000a98 <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	889b      	ldrh	r3, [r3, #4]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	0412      	lsls	r2, r2, #16
 8000a96:	619a      	str	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <hal_gpio_readpin>:
	} else {
		return false;
	}
}

static inline uint32_t hal_gpio_readpin(const GpioPin* gpio) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	return LL_GPIO_IsInputPinSet(gpio->port, gpio->pin);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	889b      	ldrh	r3, [r3, #4]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	f7ff ffc3 	bl	8000a42 <LL_GPIO_IsInputPinSet>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <VS1053_Init>:
/* endFill byte is required to stop playing */
uint8_t endFillByte;

/* Initialize VS1053 */
bool VS1053_Init()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	XCS_HIGH;		    /* XCS High */
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4841      	ldr	r0, [pc, #260]	; (8000bd8 <VS1053_Init+0x110>)
 8000ad2:	f7ff ffcb 	bl	8000a6c <hal_gpio_write>
	XDCS_HIGH;		    /* XDCS High */
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4840      	ldr	r0, [pc, #256]	; (8000bdc <VS1053_Init+0x114>)
 8000ada:	f7ff ffc7 	bl	8000a6c <hal_gpio_write>
	VS1053_Reset();     /* Hard Reset */
 8000ade:	f000 f883 	bl	8000be8 <VS1053_Reset>

	/* MP3 Mode GPIO configuration */
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC017)) return false; /* GPIO direction */
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	f24c 0117 	movw	r1, #49175	; 0xc017
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f999 	bl	8000e20 <VS1053_SciWrite>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f083 0301 	eor.w	r3, r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <VS1053_Init+0x36>
 8000afa:	2300      	movs	r3, #0
 8000afc:	e067      	b.n	8000bce <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 3)) return false;
 8000afe:	2306      	movs	r3, #6
 8000b00:	2103      	movs	r1, #3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f98c 	bl	8000e20 <VS1053_SciWrite>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f083 0301 	eor.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <VS1053_Init+0x50>
 8000b14:	2300      	movs	r3, #0
 8000b16:	e05a      	b.n	8000bce <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC019)) return false; /* GPIO output */
 8000b18:	2307      	movs	r3, #7
 8000b1a:	f24c 0119 	movw	r1, #49177	; 0xc019
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f97e 	bl	8000e20 <VS1053_SciWrite>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f083 0301 	eor.w	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <VS1053_Init+0x6c>
 8000b30:	2300      	movs	r3, #0
 8000b32:	e04c      	b.n	8000bce <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000b34:	2306      	movs	r3, #6
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f971 	bl	8000e20 <VS1053_SciWrite>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <VS1053_Init+0x86>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e03f      	b.n	8000bce <VS1053_Init+0x106>

	/* Soft reset */
	if(!VS1053_SoftReset()) return false;
 8000b4e:	f000 f86d 	bl	8000c2c <VS1053_SoftReset>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f083 0301 	eor.w	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <VS1053_Init+0x9a>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e035      	b.n	8000bce <VS1053_Init+0x106>

	/* x4.0 Clock */
	if(!VS1053_SciWrite(VS1053_REG_CLOCKF, 0x8000)) return false;
 8000b62:	2303      	movs	r3, #3
 8000b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f959 	bl	8000e20 <VS1053_SciWrite>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f083 0301 	eor.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <VS1053_Init+0xb6>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e027      	b.n	8000bce <VS1053_Init+0x106>

	LL_SPI_SetBaudRatePrescaler(vs1053spidrv->spi, LL_SPI_BAUDRATEPRESCALER_DIV32); /* 90MHz / 16 = about 5.6mhz */
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <VS1053_Init+0x118>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2120      	movs	r1, #32
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff48 	bl	8000a1c <LL_SPI_SetBaudRatePrescaler>

	/* Read endFill Byte */
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f944 	bl	8000e20 <VS1053_SciWrite>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <VS1053_Init+0xe0>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e012      	b.n	8000bce <VS1053_Init+0x106>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000ba8:	2206      	movs	r2, #6
 8000baa:	1dbb      	adds	r3, r7, #6
 8000bac:	4619      	mov	r1, r3
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f000 f97c 	bl	8000eac <VS1053_SciRead>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <VS1053_Init+0xfc>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e004      	b.n	8000bce <VS1053_Init+0x106>
	endFillByte = regVal & 0xFF;
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <VS1053_Init+0x11c>)
 8000bca:	701a      	strb	r2, [r3, #0]

	return true;
 8000bcc:	2301      	movs	r3, #1
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0801653c 	.word	0x0801653c
 8000bdc:	08016544 	.word	0x08016544
 8000be0:	20000000 	.word	0x20000000
 8000be4:	2000009c 	.word	0x2000009c

08000be8 <VS1053_Reset>:

/* Hard reset */
void VS1053_Reset()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8000bee:	23ff      	movs	r3, #255	; 0xff
 8000bf0:	71fb      	strb	r3, [r7, #7]
	XRST_LOW;		                                    /* XRST Low */
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <VS1053_Reset+0x3c>)
 8000bf6:	f7ff ff39 	bl	8000a6c <hal_gpio_write>
	hal_spi_transfer(vs1053spidrv, &dummy, 1, VS1053_SPI_TIMEOUT); /* Tx Dummy */
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <VS1053_Reset+0x40>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	1df9      	adds	r1, r7, #7
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	2201      	movs	r2, #1
 8000c04:	f011 fe06 	bl	8012814 <hal_spi_transfer>
	LL_mDelay(10);										/* 10ms Delay */
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f004 fb2b 	bl	8005264 <LL_mDelay>
	XRST_HIGH;			                                /* XRST High */
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <VS1053_Reset+0x3c>)
 8000c12:	f7ff ff2b 	bl	8000a6c <hal_gpio_write>
	LL_mDelay(10);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f004 fb24 	bl	8005264 <LL_mDelay>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	0801654c 	.word	0x0801654c
 8000c28:	20000000 	.word	0x20000000

08000c2c <VS1053_SoftReset>:

/* Soft reset */
bool VS1053_SoftReset()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_MODE, 0x4804)) return false;	/* SM LINE1 | SM SDINEW | SM RESET */
 8000c30:	2300      	movs	r3, #0
 8000c32:	f644 0104 	movw	r1, #18436	; 0x4804
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f8f2 	bl	8000e20 <VS1053_SciWrite>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f083 0301 	eor.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <VS1053_SoftReset+0x20>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e003      	b.n	8000c54 <VS1053_SoftReset+0x28>
	LL_mDelay(100);
 8000c4c:	2064      	movs	r0, #100	; 0x64
 8000c4e:	f004 fb09 	bl	8005264 <LL_mDelay>
	return true;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <VS1053_SetVolume>:

/* Volume control */
bool VS1053_SetVolume(uint8_t volumeLeft, uint8_t volumeRight)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
    uint16_t volume;
    volume = ( volumeLeft << 8 ) + volumeRight;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	4413      	add	r3, r2
 8000c76:	81fb      	strh	r3, [r7, #14]

    if(!VS1053_SciWrite(VS1053_REG_VOL, volume)) return false;
 8000c78:	220b      	movs	r2, #11
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4610      	mov	r0, r2
 8000c80:	f000 f8ce 	bl	8000e20 <VS1053_SciWrite>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f083 0301 	eor.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <VS1053_SetVolume+0x3c>
 8000c90:	2300      	movs	r3, #0
 8000c92:	e000      	b.n	8000c96 <VS1053_SetVolume+0x3e>
    return true;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <VS1053_SetMode>:


/* Mode control */
bool VS1053_SetMode(uint16_t mode)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_MODE, mode)) return false;
 8000ca8:	2200      	movs	r2, #0
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	4619      	mov	r1, r3
 8000cae:	4610      	mov	r0, r2
 8000cb0:	f000 f8b6 	bl	8000e20 <VS1053_SciWrite>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f083 0301 	eor.w	r3, r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <VS1053_SetMode+0x26>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e000      	b.n	8000cc6 <VS1053_SetMode+0x28>
	return true;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <VS1053_GetMode>:

bool VS1053_GetMode(uint16_t *mode)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
	if(!VS1053_SciRead(VS1053_REG_MODE, mode)) return false;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f8e6 	bl	8000eac <VS1053_SciRead>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f083 0301 	eor.w	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <VS1053_GetMode+0x22>
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <VS1053_GetMode+0x24>
	return true;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <VS1053_AutoResync>:

/* Resync control */
bool VS1053_AutoResync()
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E29)) return false; /* Auto Resync */
 8000cfe:	2307      	movs	r3, #7
 8000d00:	f641 6129 	movw	r1, #7721	; 0x1e29
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f88b 	bl	8000e20 <VS1053_SciWrite>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f083 0301 	eor.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <VS1053_AutoResync+0x20>
 8000d16:	2300      	movs	r3, #0
 8000d18:	e00d      	b.n	8000d36 <VS1053_AutoResync+0x3c>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f87e 	bl	8000e20 <VS1053_SciWrite>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <VS1053_AutoResync+0x3a>
 8000d30:	2300      	movs	r3, #0
 8000d32:	e000      	b.n	8000d36 <VS1053_AutoResync+0x3c>
	return true;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <VS1053_SetDecodeTime>:

/* Set decode time */
bool VS1053_SetDecodeTime(uint16_t time)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000d44:	2204      	movs	r2, #4
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	f000 f868 	bl	8000e20 <VS1053_SciWrite>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f083 0301 	eor.w	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <VS1053_SetDecodeTime+0x26>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e00e      	b.n	8000d7e <VS1053_SetDecodeTime+0x44>
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000d60:	2204      	movs	r2, #4
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4610      	mov	r0, r2
 8000d68:	f000 f85a 	bl	8000e20 <VS1053_SciWrite>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <VS1053_SetDecodeTime+0x42>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e000      	b.n	8000d7e <VS1053_SetDecodeTime+0x44>
	return true;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <VS1053_SendEndFill>:
	return time;
}

/* Send endfill bytes */
bool VS1053_SendEndFill(uint16_t num)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000d92:	2307      	movs	r3, #7
 8000d94:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f841 	bl	8000e20 <VS1053_SciWrite>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f083 0301 	eor.w	r3, r3, #1
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <VS1053_SendEndFill+0x26>
 8000daa:	2300      	movs	r3, #0
 8000dac:	e022      	b.n	8000df4 <VS1053_SendEndFill+0x6c>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000dae:	2206      	movs	r2, #6
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	4610      	mov	r0, r2
 8000db8:	f000 f878 	bl	8000eac <VS1053_SciRead>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f083 0301 	eor.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <VS1053_SendEndFill+0x44>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e013      	b.n	8000df4 <VS1053_SendEndFill+0x6c>
	endFillByte = regVal & 0xFF;
 8000dcc:	89bb      	ldrh	r3, [r7, #12]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <VS1053_SendEndFill+0x74>)
 8000dd2:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < num; i++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	81fb      	strh	r3, [r7, #14]
 8000dd8:	e007      	b.n	8000dea <VS1053_SendEndFill+0x62>
	{
		VS1053_SdiWrite(endFillByte);
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <VS1053_SendEndFill+0x74>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f8da 	bl	8000f98 <VS1053_SdiWrite>
	for(uint16_t i = 0; i < num; i++)
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	3301      	adds	r3, #1
 8000de8:	81fb      	strh	r3, [r7, #14]
 8000dea:	89fa      	ldrh	r2, [r7, #14]
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d3f3      	bcc.n	8000dda <VS1053_SendEndFill+0x52>
	}
	return true;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000009c 	.word	0x2000009c

08000e00 <VS1053_IsBusy>:

/* Check DREQ pin */
inline bool VS1053_IsBusy()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	if(hal_gpio_readpin(&gpio_vs1053_dreq) == 1) return false;
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <VS1053_IsBusy+0x1c>)
 8000e06:	f7ff fe4d 	bl	8000aa4 <hal_gpio_readpin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <VS1053_IsBusy+0x14>
 8000e10:	2300      	movs	r3, #0
 8000e12:	e000      	b.n	8000e16 <VS1053_IsBusy+0x16>
	else return true; // busy
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08016554 	.word	0x08016554

08000e20 <VS1053_SciWrite>:

/* SCI Tx */
bool VS1053_SciWrite( uint8_t address, uint16_t input )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	buffer[0] = VS1053_WRITE_CMD;
 8000e30:	2302      	movs	r3, #2
 8000e32:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	737b      	strb	r3, [r7, #13]
	buffer[2] = input >> 8;			/* Input MSB */
 8000e38:	88bb      	ldrh	r3, [r7, #4]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	73bb      	strb	r3, [r7, #14]
	buffer[3] = input & 0x00FF;		/* Input LSB */
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	73fb      	strb	r3, [r7, #15]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000e48:	bf00      	nop
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <VS1053_SciWrite+0x80>)
 8000e4c:	f7ff fe2a 	bl	8000aa4 <hal_gpio_readpin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f9      	beq.n	8000e4a <VS1053_SciWrite+0x2a>

	XCS_LOW;			/* XCS Low */
 8000e56:	2100      	movs	r1, #0
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <VS1053_SciWrite+0x84>)
 8000e5a:	f7ff fe07 	bl	8000a6c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, buffer, sizeof(buffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <VS1053_SciWrite+0x88>)
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	f107 010c 	add.w	r1, r7, #12
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	2204      	movs	r2, #4
 8000e6a:	f011 fcd3 	bl	8012814 <hal_spi_transfer>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f083 0301 	eor.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <VS1053_SciWrite+0x5e>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e00b      	b.n	8000e96 <VS1053_SciWrite+0x76>
	XCS_HIGH;			/* XCS High */
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <VS1053_SciWrite+0x84>)
 8000e82:	f7ff fdf3 	bl	8000a6c <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000e86:	bf00      	nop
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <VS1053_SciWrite+0x80>)
 8000e8a:	f7ff fe0b 	bl	8000aa4 <hal_gpio_readpin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f9      	beq.n	8000e88 <VS1053_SciWrite+0x68>

	return true;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08016554 	.word	0x08016554
 8000ea4:	0801653c 	.word	0x0801653c
 8000ea8:	20000000 	.word	0x20000000

08000eac <VS1053_SciRead>:

/* SCI TxRx */
bool VS1053_SciRead( uint8_t address, uint16_t *res)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8000eb8:	23ff      	movs	r3, #255	; 0xff
 8000eba:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];

	txBuffer[0] = VS1053_READ_CMD;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = address;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	737b      	strb	r3, [r7, #13]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000ec4:	bf00      	nop
 8000ec6:	4831      	ldr	r0, [pc, #196]	; (8000f8c <VS1053_SciRead+0xe0>)
 8000ec8:	f7ff fdec 	bl	8000aa4 <hal_gpio_readpin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f9      	beq.n	8000ec6 <VS1053_SciRead+0x1a>

	XCS_LOW;        /* XCS Low */
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	482e      	ldr	r0, [pc, #184]	; (8000f90 <VS1053_SciRead+0xe4>)
 8000ed6:	f7ff fdc9 	bl	8000a6c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, txBuffer, sizeof(txBuffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <VS1053_SciRead+0xe8>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	f107 010c 	add.w	r1, r7, #12
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	f011 fc95 	bl	8012814 <hal_spi_transfer>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f083 0301 	eor.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <VS1053_SciRead+0x4e>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e044      	b.n	8000f84 <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[0], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <VS1053_SciRead+0xe8>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	f107 0208 	add.w	r2, r7, #8
 8000f02:	f107 010f 	add.w	r1, r7, #15
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f011 fcdc 	bl	80128c8 <hal_spi_txrx>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f083 0301 	eor.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <VS1053_SciRead+0x74>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e031      	b.n	8000f84 <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[1], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <VS1053_SciRead+0xe8>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	f107 010f 	add.w	r1, r7, #15
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	f011 fcc8 	bl	80128c8 <hal_spi_txrx>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <VS1053_SciRead+0x9c>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e01d      	b.n	8000f84 <VS1053_SciRead+0xd8>
	XCS_HIGH;       /* XCS High */
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <VS1053_SciRead+0xe4>)
 8000f4c:	f7ff fd8e 	bl	8000a6c <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000f50:	bf00      	nop
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <VS1053_SciRead+0xe0>)
 8000f54:	f7ff fda6 	bl	8000aa4 <hal_gpio_readpin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f9      	beq.n	8000f52 <VS1053_SciRead+0xa6>

	*res = rxBuffer[0];     /* Received data */
 8000f5e:	7a3b      	ldrb	r3, [r7, #8]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	801a      	strh	r2, [r3, #0]
	*res <<= 8;				/* MSB */
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	801a      	strh	r2, [r3, #0]
	*res |= rxBuffer[1];	/* LSB */
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	881a      	ldrh	r2, [r3, #0]
 8000f76:	7a7b      	ldrb	r3, [r7, #9]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	801a      	strh	r2, [r3, #0]

	return true;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	08016554 	.word	0x08016554
 8000f90:	0801653c 	.word	0x0801653c
 8000f94:	20000000 	.word	0x20000000

08000f98 <VS1053_SdiWrite>:

/* SDI Tx */
bool VS1053_SdiWrite( uint8_t input )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000fa2:	bf00      	nop
 8000fa4:	4810      	ldr	r0, [pc, #64]	; (8000fe8 <VS1053_SdiWrite+0x50>)
 8000fa6:	f7ff fd7d 	bl	8000aa4 <hal_gpio_readpin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f9      	beq.n	8000fa4 <VS1053_SdiWrite+0xc>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <VS1053_SdiWrite+0x54>)
 8000fb4:	f7ff fd5a 	bl	8000a6c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, &input, 1, VS1053_SPI_TIMEOUT) != true) return false;		/* SPI Tx 1 byte */
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <VS1053_SdiWrite+0x58>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	1df9      	adds	r1, r7, #7
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f011 fc27 	bl	8012814 <hal_spi_transfer>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f083 0301 	eor.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <VS1053_SdiWrite+0x3e>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e004      	b.n	8000fe0 <VS1053_SdiWrite+0x48>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <VS1053_SdiWrite+0x54>)
 8000fda:	f7ff fd47 	bl	8000a6c <hal_gpio_write>

	return true;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08016554 	.word	0x08016554
 8000fec:	08016544 	.word	0x08016544
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <VS1053_SdiWrite32>:

/* SDI Tx 32 bytes */
bool VS1053_SdiWrite32( uint8_t *input32 )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000ffc:	bf00      	nop
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <VS1053_SdiWrite32+0x50>)
 8001000:	f7ff fd50 	bl	8000aa4 <hal_gpio_readpin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f9      	beq.n	8000ffe <VS1053_SdiWrite32+0xa>

	XDCS_LOW;			/* XDCS Low(SDI) */
 800100a:	2100      	movs	r1, #0
 800100c:	480e      	ldr	r0, [pc, #56]	; (8001048 <VS1053_SdiWrite32+0x54>)
 800100e:	f7ff fd2d 	bl	8000a6c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, input32, 32, VS1053_SPI_TIMEOUT) != true) return false; /* SPI Tx 32 bytes */
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <VS1053_SdiWrite32+0x58>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	2364      	movs	r3, #100	; 0x64
 8001018:	2220      	movs	r2, #32
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f011 fbfa 	bl	8012814 <hal_spi_transfer>
 8001020:	4603      	mov	r3, r0
 8001022:	f083 0301 	eor.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <VS1053_SdiWrite32+0x3c>
 800102c:	2300      	movs	r3, #0
 800102e:	e004      	b.n	800103a <VS1053_SdiWrite32+0x46>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8001030:	2101      	movs	r1, #1
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <VS1053_SdiWrite32+0x54>)
 8001034:	f7ff fd1a 	bl	8000a6c <hal_gpio_write>

	return true;
 8001038:	2301      	movs	r3, #1
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	08016554 	.word	0x08016554
 8001048:	08016544 	.word	0x08016544
 800104c:	20000000 	.word	0x20000000

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f8fc 	bl	8001276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2005      	movs	r0, #5
 8001080:	f011 ff9e 	bl	8012fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f011 ff70 	bl	8012f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	200000a0 	.word	0x200000a0

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200000a0 	.word	0x200000a0

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff4c 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129e:	f7ff ff61 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	6978      	ldr	r0, [r7, #20]
 80012aa:	f7ff ffb1 	bl	8001210 <NVIC_EncodePriority>
 80012ae:	4602      	mov	r2, r0
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff80 	bl	80011bc <__NVIC_SetPriority>
}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff54 	bl	8001180 <__NVIC_EnableIRQ>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff fee6 	bl	80010bc <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e099      	b.n	8001430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	e00f      	b.n	800133e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131e:	f7ff fecd 	bl	80010bc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b05      	cmp	r3, #5
 800132a:	d908      	bls.n	800133e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e078      	b.n	8001430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e8      	bne.n	800131e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_DMA_Init+0x158>)
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4313      	orrs	r3, r2
 800138e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4313      	orrs	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f023 0307 	bic.w	r3, r3, #7
 80013be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d117      	bne.n	8001402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00e      	beq.n	8001402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fa9d 	bl	8001924 <DMA_CheckFifoParam>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013fe:	2301      	movs	r3, #1
 8001400:	e016      	b.n	8001430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa54 	bl	80018b8 <DMA_CalcBaseAndBitshift>
 8001410:	4603      	mov	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	223f      	movs	r2, #63	; 0x3f
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	f010803f 	.word	0xf010803f

0800143c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_DMA_Start_IT+0x26>
 800145e:	2302      	movs	r3, #2
 8001460:	e040      	b.n	80014e4 <HAL_DMA_Start_IT+0xa8>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d12f      	bne.n	80014d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f9e6 	bl	800185c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	409a      	lsls	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0216 	orr.w	r2, r2, #22
 80014aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0208 	orr.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e005      	b.n	80014e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014de:	2302      	movs	r3, #2
 80014e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d004      	beq.n	800150a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00c      	b.n	8001524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800153c:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <HAL_DMA_IRQHandler+0x248>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a8e      	ldr	r2, [pc, #568]	; (800177c <HAL_DMA_IRQHandler+0x24c>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0a9b      	lsrs	r3, r3, #10
 8001548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2208      	movs	r2, #8
 800155c:	409a      	lsls	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01a      	beq.n	800159c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	2208      	movs	r2, #8
 800158a:	409a      	lsls	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2201      	movs	r2, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d012      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f043 0202 	orr.w	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2204      	movs	r2, #4
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d012      	beq.n	8001608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	2204      	movs	r2, #4
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2210      	movs	r2, #16
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d043      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03c      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	2210      	movs	r2, #16
 800162c:	409a      	lsls	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d018      	beq.n	8001672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d024      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
 800165e:	e01f      	b.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
 8001670:	e016      	b.n	80016a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0208 	bic.w	r2, r2, #8
 800168e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2220      	movs	r2, #32
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 808f 	beq.w	80017d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8087 	beq.w	80017d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	2220      	movs	r2, #32
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d136      	bne.n	8001748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0216 	bic.w	r2, r2, #22
 80016e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_DMA_IRQHandler+0x1da>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0208 	bic.w	r2, r2, #8
 8001718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	223f      	movs	r2, #63	; 0x3f
 8001720:	409a      	lsls	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173a:	2b00      	cmp	r3, #0
 800173c:	d07e      	beq.n	800183c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
        }
        return;
 8001746:	e079      	b.n	800183c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01d      	beq.n	8001792 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10d      	bne.n	8001780 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	2b00      	cmp	r3, #0
 800176a:	d031      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
 8001774:	e02c      	b.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
 8001776:	bf00      	nop
 8001778:	20000014 	.word	0x20000014
 800177c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
 8001790:	e01e      	b.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10f      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0210 	bic.w	r2, r2, #16
 80017ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d032      	beq.n	800183e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d022      	beq.n	800182a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2205      	movs	r2, #5
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3301      	adds	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	d307      	bcc.n	8001818 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f2      	bne.n	80017fc <HAL_DMA_IRQHandler+0x2cc>
 8001816:	e000      	b.n	800181a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001818:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e000      	b.n	800183e <HAL_DMA_IRQHandler+0x30e>
        return;
 800183c:	bf00      	nop
    }
  }
}
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b40      	cmp	r3, #64	; 0x40
 8001888:	d108      	bne.n	800189c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800189a:	e007      	b.n	80018ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3b10      	subs	r3, #16
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <DMA_CalcBaseAndBitshift+0x64>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <DMA_CalcBaseAndBitshift+0x68>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d909      	bls.n	80018fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	1d1a      	adds	r2, r3, #4
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58
 80018f8:	e007      	b.n	800190a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001902:	f023 0303 	bic.w	r3, r3, #3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	aaaaaaab 	.word	0xaaaaaaab
 8001920:	08015894 	.word	0x08015894

08001924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d11f      	bne.n	800197e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d856      	bhi.n	80019f2 <DMA_CheckFifoParam+0xce>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <DMA_CheckFifoParam+0x28>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	0800195d 	.word	0x0800195d
 8001950:	0800196f 	.word	0x0800196f
 8001954:	0800195d 	.word	0x0800195d
 8001958:	080019f3 	.word	0x080019f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d046      	beq.n	80019f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196c:	e043      	b.n	80019f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001976:	d140      	bne.n	80019fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800197c:	e03d      	b.n	80019fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001986:	d121      	bne.n	80019cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d837      	bhi.n	80019fe <DMA_CheckFifoParam+0xda>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <DMA_CheckFifoParam+0x70>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019ab 	.word	0x080019ab
 800199c:	080019a5 	.word	0x080019a5
 80019a0:	080019bd 	.word	0x080019bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
      break;
 80019a8:	e030      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d025      	beq.n	8001a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ba:	e022      	b.n	8001a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c4:	d11f      	bne.n	8001a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ca:	e01c      	b.n	8001a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d903      	bls.n	80019da <DMA_CheckFifoParam+0xb6>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d003      	beq.n	80019e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019d8:	e018      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
      break;
 80019de:	e015      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      break;
 80019f0:	e00b      	b.n	8001a0a <DMA_CheckFifoParam+0xe6>
      break;
 80019f2:	bf00      	nop
 80019f4:	e00a      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 80019f6:	bf00      	nop
 80019f8:	e008      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 80019fa:	bf00      	nop
 80019fc:	e006      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 80019fe:	bf00      	nop
 8001a00:	e004      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
 8001a04:	e002      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 8001a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e177      	b.n	8001d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8166 	bne.w	8001d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d005      	beq.n	8001a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d017      	beq.n	8001b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80c0 	beq.w	8001d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbe:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d037      	beq.n	8001c5a <HAL_GPIO_Init+0x23e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_GPIO_Init+0x23a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x236>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x338>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x232>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_GPIO_Init+0x33c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x22e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a53      	ldr	r2, [pc, #332]	; (8001d5c <HAL_GPIO_Init+0x340>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x22a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_GPIO_Init+0x344>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_GPIO_Init+0x348>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x34c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x350>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c32:	2309      	movs	r3, #9
 8001c34:	e012      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c36:	230a      	movs	r3, #10
 8001c38:	e010      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00e      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae84 	bls.w	8001a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40022400 	.word	0x40022400
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000014 	.word	0x20000014

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4903      	ldr	r1, [pc, #12]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	0801659c 	.word	0x0801659c

08001db4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCC_GetClockConfig+0x60>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 020f 	and.w	r2, r3, #15
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40023c00 	.word	0x40023c00

08001e18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e022      	b.n	8001e70 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f010 f965 	bl	801210c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f814 	bl	8001e78 <HAL_SD_InitCard>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00a      	b.n	8001e70 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b08e      	sub	sp, #56	; 0x38
 8001e7c:	af04      	add	r7, sp, #16
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001e94:	2376      	movs	r3, #118	; 0x76
 8001e96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681d      	ldr	r5, [r3, #0]
 8001e9c:	466c      	mov	r4, sp
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f002 f863 	bl	8003f7c <SDIO_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e04f      	b.n	8001f68 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_SD_InitCard+0xf8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 f89b 	bl	800400e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_SD_InitCard+0xf8>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f7ff f8f8 	bl	80010d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 ff6b 	bl	8002dc0 <SD_PowerON>
 8001eea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e02e      	b.n	8001f68 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fe8a 	bl	8002c24 <SD_InitCard>
 8001f10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e01b      	b.n	8001f68 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 f8fa 	bl	8004132 <SDMMC_CmdBlockLength>
 8001f3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00f      	beq.n	8001f66 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_SD_InitCard+0xfc>)
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	422580a0 	.word	0x422580a0
 8001f74:	004005ff 	.word	0x004005ff

08001f78 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08c      	sub	sp, #48	; 0x30
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0c0      	b.n	8002122 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	f040 80b9 	bne.w	8002120 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	441a      	add	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d907      	bls.n	8001fd2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0a7      	b.n	8002122 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a4c      	ldr	r2, [pc, #304]	; (800212c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8001ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a4b      	ldr	r2, [pc, #300]	; (8002130 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002004:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2200      	movs	r2, #0
 800200c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3380      	adds	r3, #128	; 0x80
 800203c:	4619      	mov	r1, r3
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	f7ff f9f9 	bl	800143c <HAL_DMA_Start_IT>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d017      	beq.n	8002080 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e050      	b.n	8002122 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	2b01      	cmp	r3, #1
 800208c:	d002      	beq.n	8002094 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	025b      	lsls	r3, r3, #9
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002098:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020a0:	2390      	movs	r3, #144	; 0x90
 80020a2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80020ac:	2301      	movs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f107 0210 	add.w	r2, r7, #16
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 f80d 	bl	80040da <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d90a      	bls.n	80020dc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2282      	movs	r2, #130	; 0x82
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 f871 	bl	80041ba <SDMMC_CmdReadMultiBlock>
 80020d8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80020da:	e009      	b.n	80020f0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2281      	movs	r2, #129	; 0x81
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 f844 	bl	8004176 <SDMMC_CmdReadSingleBlock>
 80020ee:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d012      	beq.n	800211c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	431a      	orrs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e002      	b.n	8002122 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3730      	adds	r7, #48	; 0x30
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	08002a33 	.word	0x08002a33
 8002130:	08002aa5 	.word	0x08002aa5
 8002134:	004005ff 	.word	0x004005ff
 8002138:	4225858c 	.word	0x4225858c

0800213c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0c5      	b.n	80022f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	f040 80be 	bne.w	80022ee <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	441a      	add	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	429a      	cmp	r2, r3
 8002184:	d907      	bls.n	8002196 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0ac      	b.n	80022f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2203      	movs	r2, #3
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	4a4d      	ldr	r2, [pc, #308]	; (80022fc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80021c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	2200      	movs	r2, #0
 80021d0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d002      	beq.n	80021e0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	025b      	lsls	r3, r3, #9
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d90a      	bls.n	80021fc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	22a0      	movs	r2, #160	; 0xa0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 f825 	bl	8004242 <SDMMC_CmdWriteMultiBlock>
 80021f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80021fa:	e009      	b.n	8002210 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2290      	movs	r2, #144	; 0x90
 8002200:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fff8 	bl	80041fe <SDMMC_CmdWriteSingleBlock>
 800220e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a39      	ldr	r2, [pc, #228]	; (8002300 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	431a      	orrs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e059      	b.n	80022f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3380      	adds	r3, #128	; 0x80
 8002272:	461a      	mov	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	f7ff f8df 	bl	800143c <HAL_DMA_Start_IT>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01c      	beq.n	80022be <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002292:	f023 0302 	bic.w	r3, r3, #2
 8002296:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e018      	b.n	80022f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	025b      	lsls	r3, r3, #9
 80022c8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80022ca:	2390      	movs	r3, #144	; 0x90
 80022cc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80022d6:	2301      	movs	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f107 0210 	add.w	r2, r7, #16
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 fef8 	bl	80040da <SDIO_ConfigData>

      return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
  }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3730      	adds	r7, #48	; 0x30
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	08002a09 	.word	0x08002a09
 80022fc:	08002aa5 	.word	0x08002aa5
 8002300:	004005ff 	.word	0x004005ff
 8002304:	4225858c 	.word	0x4225858c

08002308 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_SD_IRQHandler+0x2e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fdfc 	bl	8002f2c <SD_Read_IT>
 8002334:	e165      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 808f 	beq.w	8002464 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800235e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002362:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d039      	beq.n	80023f2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d104      	bne.n	8002392 <HAL_SD_IRQHandler+0x8a>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d011      	beq.n	80023b6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f001 ff76 	bl	8004288 <SDMMC_CmdStopTransfer>
 800239c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f92f 	bl	8002614 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80023be:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <HAL_SD_IRQHandler+0xda>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f002 fff2 	bl	80053cc <HAL_SD_RxCpltCallback>
 80023e8:	e10b      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f002 ffe4 	bl	80053b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80023f0:	e107      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8102 	beq.w	8002602 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d011      	beq.n	800242c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f001 ff3b 	bl	8004288 <SDMMC_CmdStopTransfer>
 8002412:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8f4 	bl	8002614 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 80e5 	bne.w	8002602 <HAL_SD_IRQHandler+0x2fa>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 80df 	bne.w	8002602 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0208 	bic.w	r2, r2, #8
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f002 ffab 	bl	80053b8 <HAL_SD_TxCpltCallback>
}
 8002462:	e0ce      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_SD_IRQHandler+0x17c>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fda6 	bl	8002fce <SD_Write_IT>
 8002482:	e0be      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248a:	f240 233a 	movw	r3, #570	; 0x23a
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80b6 	beq.w	8002602 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	f043 0202 	orr.w	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	f043 0208 	orr.w	r2, r3, #8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	f043 0208 	orr.w	r2, r3, #8
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f240 723a 	movw	r2, #1850	; 0x73a
 8002520:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002530:	f023 0302 	bic.w	r3, r3, #2
 8002534:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f001 fea4 	bl	8004288 <SDMMC_CmdStopTransfer>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f855 	bl	8002614 <HAL_SD_ErrorCallback>
}
 800256a:	e04a      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d045      	beq.n	8002602 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_SD_IRQHandler+0x282>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d011      	beq.n	80025ae <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_SD_IRQHandler+0x304>)
 8002590:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe ffa8 	bl	80014ec <HAL_DMA_Abort_IT>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02f      	beq.n	8002602 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 face 	bl	8002b48 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80025ac:	e029      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <HAL_SD_IRQHandler+0x2ba>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d011      	beq.n	80025e6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_SD_IRQHandler+0x308>)
 80025c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe ff8c 	bl	80014ec <HAL_DMA_Abort_IT>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d013      	beq.n	8002602 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fae9 	bl	8002bb6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80025e4:	e00d      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f002 fed2 	bl	80053a4 <HAL_SD_AbortCallback>
}
 8002600:	e7ff      	b.n	8002602 <HAL_SD_IRQHandler+0x2fa>
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	08002b49 	.word	0x08002b49
 8002610:	08002bb7 	.word	0x08002bb7

08002614 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002636:	0f9b      	lsrs	r3, r3, #30
 8002638:	b2da      	uxtb	r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	b2da      	uxtb	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002654:	0e1b      	lsrs	r3, r3, #24
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	b2da      	uxtb	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002666:	0c1b      	lsrs	r3, r3, #16
 8002668:	b2da      	uxtb	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b2da      	uxtb	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800267e:	b2da      	uxtb	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	0d1b      	lsrs	r3, r3, #20
 800268a:	b29a      	uxth	r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	b2da      	uxtb	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026a6:	0bdb      	lsrs	r3, r3, #15
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b8:	0b9b      	lsrs	r3, r3, #14
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026dc:	0b1b      	lsrs	r3, r3, #12
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d163      	bne.n	80027c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fc:	009a      	lsls	r2, r3, #2
 80026fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002702:	4013      	ands	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002708:	0f92      	lsrs	r2, r2, #30
 800270a:	431a      	orrs	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002714:	0edb      	lsrs	r3, r3, #27
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	b2da      	uxtb	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002726:	0e1b      	lsrs	r3, r3, #24
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	b2da      	uxtb	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002738:	0d5b      	lsrs	r3, r3, #21
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	b2da      	uxtb	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	b2da      	uxtb	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275c:	0bdb      	lsrs	r3, r3, #15
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	b2da      	uxtb	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	7e1b      	ldrb	r3, [r3, #24]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	3302      	adds	r3, #2
 8002780:	2201      	movs	r2, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800278a:	fb03 f202 	mul.w	r2, r3, r2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7a1b      	ldrb	r3, [r3, #8]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	2201      	movs	r2, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027ac:	0a52      	lsrs	r2, r2, #9
 80027ae:	fb03 f202 	mul.w	r2, r3, r2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	661a      	str	r2, [r3, #96]	; 0x60
 80027be:	e031      	b.n	8002824 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d11d      	bne.n	8002804 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	431a      	orrs	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	3301      	adds	r3, #1
 80027e4:	029a      	lsls	r2, r3, #10
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	661a      	str	r2, [r3, #96]	; 0x60
 8002802:	e00f      	b.n	8002824 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_SD_GetCardCSD+0x344>)
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e09d      	b.n	8002960 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002828:	0b9b      	lsrs	r3, r3, #14
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283a:	09db      	lsrs	r3, r3, #7
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002842:	b2da      	uxtb	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002852:	b2da      	uxtb	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	0fdb      	lsrs	r3, r3, #31
 800285e:	b2da      	uxtb	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	0f5b      	lsrs	r3, r3, #29
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	b2da      	uxtb	r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	b2da      	uxtb	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	0d9b      	lsrs	r3, r3, #22
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	b2da      	uxtb	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	0d5b      	lsrs	r3, r3, #21
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	0c1b      	lsrs	r3, r3, #16
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	0bdb      	lsrs	r3, r3, #15
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	0b9b      	lsrs	r3, r3, #14
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	0b5b      	lsrs	r3, r3, #13
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	0b1b      	lsrs	r3, r3, #12
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	b2da      	uxtb	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	b2da      	uxtb	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800294e:	b2da      	uxtb	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	004005ff 	.word	0x004005ff

08002970 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa7e 	bl	8002edc <SD_SendStatus>
 80029e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80029fe:	693b      	ldr	r3, [r7, #16]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	2b82      	cmp	r3, #130	; 0x82
 8002a46:	d111      	bne.n	8002a6c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f001 fc1b 	bl	8004288 <SDMMC_CmdStopTransfer>
 8002a52:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff fdd4 	bl	8002614 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0208 	bic.w	r2, r2, #8
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f002 fc99 	bl	80053cc <HAL_SD_RxCpltCallback>
#endif
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe fec6 	bl	8001844 <HAL_DMA_GetError>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d03e      	beq.n	8002b3c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d002      	beq.n	8002ada <SD_DMAError+0x36>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d12d      	bne.n	8002b36 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <SD_DMAError+0xa0>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002af0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff62 	bl	80029c8 <HAL_SD_GetCardState>
 8002b04:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d002      	beq.n	8002b12 <SD_DMAError+0x6e>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10a      	bne.n	8002b28 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fbb6 	bl	8004288 <SDMMC_CmdStopTransfer>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	431a      	orrs	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff fd6c 	bl	8002614 <HAL_SD_ErrorCallback>
#endif
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	004005ff 	.word	0x004005ff

08002b48 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7ff ff31 	bl	80029c8 <HAL_SD_GetCardState>
 8002b66:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b06      	cmp	r3, #6
 8002b7a:	d002      	beq.n	8002b82 <SD_DMATxAbort+0x3a>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10a      	bne.n	8002b98 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fb7e 	bl	8004288 <SDMMC_CmdStopTransfer>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	431a      	orrs	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f002 fbff 	bl	80053a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002ba6:	e002      	b.n	8002bae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fd33 	bl	8002614 <HAL_SD_ErrorCallback>
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f240 523a 	movw	r2, #1338	; 0x53a
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff fefa 	bl	80029c8 <HAL_SD_GetCardState>
 8002bd4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d002      	beq.n	8002bf0 <SD_DMARxAbort+0x3a>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d10a      	bne.n	8002c06 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 fb47 	bl	8004288 <SDMMC_CmdStopTransfer>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f002 fbc8 	bl	80053a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002c14:	e002      	b.n	8002c1c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fcfc 	bl	8002614 <HAL_SD_ErrorCallback>
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c24:	b5b0      	push	{r4, r5, r7, lr}
 8002c26:	b094      	sub	sp, #80	; 0x50
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 f9f8 	bl	800402a <SDIO_GetPowerState>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c44:	e0b8      	b.n	8002db8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d02f      	beq.n	8002cae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fbdf 	bl	8004416 <SDMMC_CmdSendCID>
 8002c58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SD_InitCard+0x40>
    {
      return errorstate;
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	e0a9      	b.n	8002db8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 fa22 	bl	80040b4 <SDIO_GetResponse>
 8002c70:	4602      	mov	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 fa19 	bl	80040b4 <SDIO_GetResponse>
 8002c82:	4602      	mov	r2, r0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fa10 	bl	80040b4 <SDIO_GetResponse>
 8002c94:	4602      	mov	r2, r0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	210c      	movs	r1, #12
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fa07 	bl	80040b4 <SDIO_GetResponse>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d00d      	beq.n	8002cd2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f107 020e 	add.w	r2, r7, #14
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fbe5 	bl	8004490 <SDMMC_CmdSetRelAdd>
 8002cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <SD_InitCard+0xae>
    {
      return errorstate;
 8002cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd0:	e072      	b.n	8002db8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d036      	beq.n	8002d48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f001 fbaf 	bl	8004452 <SDMMC_CmdSendCSD>
 8002cf4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfe:	e05b      	b.n	8002db8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 f9d4 	bl	80040b4 <SDIO_GetResponse>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2104      	movs	r1, #4
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f9cb 	bl	80040b4 <SDIO_GetResponse>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2108      	movs	r1, #8
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 f9c2 	bl	80040b4 <SDIO_GetResponse>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	210c      	movs	r1, #12
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f9b9 	bl	80040b4 <SDIO_GetResponse>
 8002d42:	4602      	mov	r2, r0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 f9b0 	bl	80040b4 <SDIO_GetResponse>
 8002d54:	4603      	mov	r3, r0
 8002d56:	0d1a      	lsrs	r2, r3, #20
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fc60 	bl	8002628 <HAL_SD_GetCardCSD>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d72:	e021      	b.n	8002db8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	2200      	movs	r2, #0
 8002d80:	461c      	mov	r4, r3
 8002d82:	4615      	mov	r5, r2
 8002d84:	4622      	mov	r2, r4
 8002d86:	462b      	mov	r3, r5
 8002d88:	4608      	mov	r0, r1
 8002d8a:	f001 fa9f 	bl	80042cc <SDMMC_CmdSelDesel>
 8002d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <SD_InitCard+0x176>
  {
    return errorstate;
 8002d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d98:	e00e      	b.n	8002db8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681d      	ldr	r5, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	466c      	mov	r4, sp
 8002da2:	f103 0210 	add.w	r2, r3, #16
 8002da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002dac:	3304      	adds	r3, #4
 8002dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db0:	4628      	mov	r0, r5
 8002db2:	f001 f8e3 	bl	8003f7c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3740      	adds	r7, #64	; 0x40
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bdb0      	pop	{r4, r5, r7, pc}

08002dc0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fa9a 	bl	8004312 <SDMMC_CmdGoIdleState>
 8002dde:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <SD_PowerON+0x2a>
  {
    return errorstate;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	e072      	b.n	8002ed0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 faad 	bl	800434e <SDMMC_CmdOperCond>
 8002df4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 fa83 	bl	8004312 <SDMMC_CmdGoIdleState>
 8002e0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	e05b      	b.n	8002ed0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d137      	bne.n	8002e96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 faad 	bl	800438c <SDMMC_CmdAppCommand>
 8002e32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02d      	beq.n	8002e96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e3e:	e047      	b.n	8002ed0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 faa0 	bl	800438c <SDMMC_CmdAppCommand>
 8002e4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <SD_PowerON+0x98>
    {
      return errorstate;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	e03b      	b.n	8002ed0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	491e      	ldr	r1, [pc, #120]	; (8002ed8 <SD_PowerON+0x118>)
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 fab6 	bl	80043d0 <SDMMC_CmdAppOperCommand>
 8002e64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e70:	e02e      	b.n	8002ed0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 f91b 	bl	80040b4 <SDIO_GetResponse>
 8002e7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	0fdb      	lsrs	r3, r3, #31
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <SD_PowerON+0xcc>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <SD_PowerON+0xce>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]

    count++;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d802      	bhi.n	8002ea6 <SD_PowerON+0xe6>
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0cc      	beq.n	8002e40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d902      	bls.n	8002eb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb4:	e00c      	b.n	8002ed0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ec6:	e002      	b.n	8002ece <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	c1100000 	.word	0xc1100000

08002edc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ef0:	e018      	b.n	8002f24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f001 fae7 	bl	80044d2 <SDMMC_CmdSendStatus>
 8002f04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	e009      	b.n	8002f24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f001 f8cc 	bl	80040b4 <SDIO_GetResponse>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03f      	beq.n	8002fc6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e033      	b.n	8002fb4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 f83e 	bl	8003fd2 <SDIO_ReadFIFO>
 8002f56:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3301      	adds	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0e1b      	lsrs	r3, r3, #24
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b07      	cmp	r3, #7
 8002fb8:	d9c8      	bls.n	8002f4c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d043      	beq.n	8003070 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e037      	b.n	800305e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3b01      	subs	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4313      	orrs	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	3b01      	subs	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	061a      	lsls	r2, r3, #24
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4313      	orrs	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3b01      	subs	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f107 0208 	add.w	r2, r7, #8
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f000 ffca 	bl	8003fec <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3301      	adds	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b07      	cmp	r3, #7
 8003062:	d9c4      	bls.n	8002fee <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e041      	b.n	800310e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f839 	bl	8003116 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f000 f9d8 	bl	800346c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d001      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e04e      	b.n	80031e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d022      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d01d      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_TIM_Base_Start_IT+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_TIM_Base_Start_IT+0xd4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_TIM_Base_Start_IT+0xd8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_TIM_Base_Start_IT+0xdc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d111      	bne.n	80031d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d010      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	e007      	b.n	80031e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40010400 	.word	0x40010400
 8003204:	40014000 	.word	0x40014000
 8003208:	40001800 	.word	0x40001800

0800320c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0202 	mvn.w	r2, #2
 8003238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8ee 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8e0 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8f1 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b04      	cmp	r3, #4
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0204 	mvn.w	r2, #4
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8c4 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8b6 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8c7 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0208 	mvn.w	r2, #8
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2204      	movs	r2, #4
 80032e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f89a 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f88c 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f89d 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b10      	cmp	r3, #16
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0210 	mvn.w	r2, #16
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2208      	movs	r2, #8
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f870 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f862 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f873 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0201 	mvn.w	r2, #1
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f00f feb4 	bl	80130f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d10e      	bne.n	80033bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b80      	cmp	r3, #128	; 0x80
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f902 	bl	80035c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f838 	bl	8003458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b20      	cmp	r3, #32
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0220 	mvn.w	r2, #32
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8cc 	bl	80035ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a40      	ldr	r2, [pc, #256]	; (8003580 <TIM_Base_SetConfig+0x114>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d00f      	beq.n	80034ac <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3d      	ldr	r2, [pc, #244]	; (8003584 <TIM_Base_SetConfig+0x118>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3c      	ldr	r2, [pc, #240]	; (8003588 <TIM_Base_SetConfig+0x11c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <TIM_Base_SetConfig+0x120>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0x40>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <TIM_Base_SetConfig+0x124>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d108      	bne.n	80034be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <TIM_Base_SetConfig+0x114>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02b      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034cc:	d027      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <TIM_Base_SetConfig+0x118>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d023      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <TIM_Base_SetConfig+0x11c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01f      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	; (800358c <TIM_Base_SetConfig+0x120>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01b      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <TIM_Base_SetConfig+0x124>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d017      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a28      	ldr	r2, [pc, #160]	; (8003594 <TIM_Base_SetConfig+0x128>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a27      	ldr	r2, [pc, #156]	; (8003598 <TIM_Base_SetConfig+0x12c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00f      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a26      	ldr	r2, [pc, #152]	; (800359c <TIM_Base_SetConfig+0x130>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00b      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <TIM_Base_SetConfig+0x134>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a24      	ldr	r2, [pc, #144]	; (80035a4 <TIM_Base_SetConfig+0x138>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <TIM_Base_SetConfig+0x13c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d108      	bne.n	8003530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <TIM_Base_SetConfig+0x114>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0xf8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <TIM_Base_SetConfig+0x124>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d103      	bne.n	800356c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	615a      	str	r2, [r3, #20]
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40010400 	.word	0x40010400
 8003594:	40014000 	.word	0x40014000
 8003598:	40014400 	.word	0x40014400
 800359c:	40014800 	.word	0x40014800
 80035a0:	40001800 	.word	0x40001800
 80035a4:	40001c00 	.word	0x40001c00
 80035a8:	40002000 	.word	0x40002000

080035ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800362e:	481c      	ldr	r0, [pc, #112]	; (80036a0 <LL_ADC_CommonInit+0x80>)
 8003630:	f7ff ffe3 	bl	80035fa <LL_ADC_IsEnabled>
 8003634:	4604      	mov	r4, r0
 8003636:	481b      	ldr	r0, [pc, #108]	; (80036a4 <LL_ADC_CommonInit+0x84>)
 8003638:	f7ff ffdf 	bl	80035fa <LL_ADC_IsEnabled>
 800363c:	4603      	mov	r3, r0
 800363e:	431c      	orrs	r4, r3
 8003640:	4819      	ldr	r0, [pc, #100]	; (80036a8 <LL_ADC_CommonInit+0x88>)
 8003642:	f7ff ffda 	bl	80035fa <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	4323      	orrs	r3, r4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d120      	bne.n	8003690 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <LL_ADC_CommonInit+0x8c>)
 800365c:	4013      	ands	r3, r2
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	6852      	ldr	r2, [r2, #4]
 8003666:	4311      	orrs	r1, r2
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	4311      	orrs	r1, r2
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68d2      	ldr	r2, [r2, #12]
 8003672:	430a      	orrs	r2, r1
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e00b      	b.n	8003694 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <LL_ADC_CommonInit+0x8c>)
 8003682:	4013      	ands	r3, r2
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	e001      	b.n	8003694 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bd90      	pop	{r4, r7, pc}
 800369e:	bf00      	nop
 80036a0:	40012000 	.word	0x40012000
 80036a4:	40012100 	.word	0x40012100
 80036a8:	40012200 	.word	0x40012200
 80036ac:	fffc10e0 	.word	0xfffc10e0

080036b0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ff9b 	bl	80035fa <LL_ADC_IsEnabled>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d117      	bne.n	80036fa <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80036d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	6811      	ldr	r1, [r2, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6892      	ldr	r2, [r2, #8]
 80036de:	430a      	orrs	r2, r1
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e001      	b.n	80036fe <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ff6f 	bl	80035fa <LL_ADC_IsEnabled>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d12b      	bne.n	800377a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	e005      	b.n	800374a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <LL_ADC_REG_Init+0x80>)
 8003750:	4013      	ands	r3, r2
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	4311      	orrs	r1, r2
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	6912      	ldr	r2, [r2, #16]
 8003764:	430a      	orrs	r2, r1
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff2e 	bl	80035d4 <LL_ADC_REG_SetSequencerLength>
 8003778:	e001      	b.n	800377e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	c0fffcfd 	.word	0xc0fffcfd

0800378c <LL_GPIO_SetPinMode>:
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2103      	movs	r1, #3
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	61bb      	str	r3, [r7, #24]
  return result;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]
}
 80037de:	bf00      	nop
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_GPIO_SetPinOutputType>:
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <LL_GPIO_SetPinSpeed>:
{
 800381a:	b480      	push	{r7}
 800381c:	b089      	sub	sp, #36	; 0x24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	613b      	str	r3, [r7, #16]
  return result;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2103      	movs	r1, #3
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	401a      	ands	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	61bb      	str	r3, [r7, #24]
  return result;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]
}
 800386c:	bf00      	nop
 800386e:	3724      	adds	r7, #36	; 0x24
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_GPIO_SetPinPull>:
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	613b      	str	r3, [r7, #16]
  return result;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2103      	movs	r1, #3
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	61bb      	str	r3, [r7, #24]
  return result;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	60da      	str	r2, [r3, #12]
}
 80038ca:	bf00      	nop
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <LL_GPIO_SetAFPin_0_7>:
{
 80038d6:	b480      	push	{r7}
 80038d8:	b089      	sub	sp, #36	; 0x24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1a      	ldr	r2, [r3, #32]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	613b      	str	r3, [r7, #16]
  return result;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	210f      	movs	r1, #15
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	401a      	ands	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	61bb      	str	r3, [r7, #24]
  return result;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	621a      	str	r2, [r3, #32]
}
 8003928:	bf00      	nop
 800392a:	3724      	adds	r7, #36	; 0x24
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_GPIO_SetAFPin_8_15>:
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	613b      	str	r3, [r7, #16]
  return result;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	210f      	movs	r1, #15
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	401a      	ands	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	61bb      	str	r3, [r7, #24]
  return result;
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
}
 800398a:	bf00      	nop
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	613b      	str	r3, [r7, #16]
  return result;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039c0:	e050      	b.n	8003a64 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d042      	beq.n	8003a5e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d003      	beq.n	80039e8 <LL_GPIO_Init+0x52>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d10d      	bne.n	8003a04 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	461a      	mov	r2, r3
 80039ee:	69b9      	ldr	r1, [r7, #24]
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff12 	bl	800381a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	461a      	mov	r2, r3
 80039fc:	69b9      	ldr	r1, [r7, #24]
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff fef3 	bl	80037ea <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ff33 	bl	8003878 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d11a      	bne.n	8003a50 <LL_GPIO_Init+0xba>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	60bb      	str	r3, [r7, #8]
  return result;
 8003a26:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b07      	cmp	r3, #7
 8003a30:	d807      	bhi.n	8003a42 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	461a      	mov	r2, r3
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff4b 	bl	80038d6 <LL_GPIO_SetAFPin_0_7>
 8003a40:	e006      	b.n	8003a50 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	461a      	mov	r2, r3
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ff72 	bl	8003934 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	461a      	mov	r2, r3
 8003a56:	69b9      	ldr	r1, [r7, #24]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fe97 	bl	800378c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1a7      	bne.n	80039c2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 0201 	bic.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	601a      	str	r2, [r3, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f023 021f 	bic.w	r2, r3, #31
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003afc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a42      	ldr	r2, [pc, #264]	; (8003c3c <LL_I2C_ConfigSpeed+0x124>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0c9b      	lsrs	r3, r3, #18
 8003b38:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	493a      	ldr	r1, [pc, #232]	; (8003c40 <LL_I2C_ConfigSpeed+0x128>)
 8003b56:	428b      	cmp	r3, r1
 8003b58:	d802      	bhi.n	8003b60 <LL_I2C_ConfigSpeed+0x48>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e009      	b.n	8003b74 <LL_I2C_ConfigSpeed+0x5c>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4936      	ldr	r1, [pc, #216]	; (8003c44 <LL_I2C_ConfigSpeed+0x12c>)
 8003b6c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	3301      	adds	r3, #1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <LL_I2C_ConfigSpeed+0x128>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d939      	bls.n	8003bf6 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d117      	bne.n	8003bb8 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb0:	e01d      	b.n	8003bee <LL_I2C_ConfigSpeed+0xd6>
 8003bb2:	f248 0301 	movw	r3, #32769	; 0x8001
 8003bb6:	e01a      	b.n	8003bee <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009a      	lsls	r2, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009a      	lsls	r2, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be8:	e001      	b.n	8003bee <LL_I2C_ConfigSpeed+0xd6>
 8003bea:	f248 0301 	movw	r3, #32769	; 0x8001
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e011      	b.n	8003c1a <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c04:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	e000      	b.n	8003c18 <LL_I2C_ConfigSpeed+0x100>
 8003c16:	2304      	movs	r3, #4
 8003c18:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	61da      	str	r2, [r3, #28]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	431bde83 	.word	0x431bde83
 8003c40:	000186a0 	.word	0x000186a0
 8003c44:	10624dd3 	.word	0x10624dd3

08003c48 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 021a 	bic.w	r2, r3, #26
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fefc 	bl	8003a9c <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ca4:	f107 0308 	add.w	r3, r7, #8
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f89d 	bl	8003de8 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68d9      	ldr	r1, [r3, #12]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff feff 	bl	8003abc <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff25 	bl	8003b18 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6959      	ldr	r1, [r3, #20]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff05 	bl	8003ae8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ffaf 	bl	8003c48 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fec6 	bl	8003a7c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ffb9 	bl	8003c6e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <LL_RCC_GetSysClkSource+0x18>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <LL_RCC_GetAHBPrescaler+0x18>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800

08003d40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800

08003d5c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800

08003d78 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <LL_RCC_PLL_GetMainSource+0x18>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <LL_RCC_PLL_GetN+0x18>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40023800 	.word	0x40023800

08003db0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <LL_RCC_PLL_GetP+0x18>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800

08003dcc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <LL_RCC_PLL_GetDivider+0x18>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003df0:	f000 f820 	bl	8003e34 <RCC_GetSystemClockFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f840 	bl	8003e84 <RCC_GetHCLKClockFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f84e 	bl	8003eb0 <RCC_GetPCLK1ClockFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f85a 	bl	8003ed8 <RCC_GetPCLK2ClockFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e3e:	f7ff ff63 	bl	8003d08 <LL_RCC_GetSysClkSource>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d00c      	beq.n	8003e62 <RCC_GetSystemClockFreq+0x2e>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d80f      	bhi.n	8003e6c <RCC_GetSystemClockFreq+0x38>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <RCC_GetSystemClockFreq+0x22>
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d003      	beq.n	8003e5c <RCC_GetSystemClockFreq+0x28>
 8003e54:	e00a      	b.n	8003e6c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <RCC_GetSystemClockFreq+0x48>)
 8003e58:	607b      	str	r3, [r7, #4]
      break;
 8003e5a:	e00a      	b.n	8003e72 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <RCC_GetSystemClockFreq+0x4c>)
 8003e5e:	607b      	str	r3, [r7, #4]
      break;
 8003e60:	e007      	b.n	8003e72 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003e62:	2008      	movs	r0, #8
 8003e64:	f000 f84c 	bl	8003f00 <RCC_PLL_GetFreqDomain_SYS>
 8003e68:	6078      	str	r0, [r7, #4]
      break;
 8003e6a:	e002      	b.n	8003e72 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <RCC_GetSystemClockFreq+0x48>)
 8003e6e:	607b      	str	r3, [r7, #4]
      break;
 8003e70:	bf00      	nop
  }

  return frequency;
 8003e72:	687b      	ldr	r3, [r7, #4]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	007a1200 	.word	0x007a1200

08003e84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003e8c:	f7ff ff4a 	bl	8003d24 <LL_RCC_GetAHBPrescaler>
 8003e90:	4603      	mov	r3, r0
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	4a04      	ldr	r2, [pc, #16]	; (8003eac <RCC_GetHCLKClockFreq+0x28>)
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	40d3      	lsrs	r3, r2
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	0801658c 	.word	0x0801658c

08003eb0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003eb8:	f7ff ff42 	bl	8003d40 <LL_RCC_GetAPB1Prescaler>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	0a9b      	lsrs	r3, r3, #10
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <RCC_GetPCLK1ClockFreq+0x24>)
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	40d3      	lsrs	r3, r2
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	0801659c 	.word	0x0801659c

08003ed8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ee0:	f7ff ff3c 	bl	8003d5c <LL_RCC_GetAPB2Prescaler>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	0b5b      	lsrs	r3, r3, #13
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <RCC_GetPCLK2ClockFreq+0x24>)
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	40d3      	lsrs	r3, r2
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	0801659c 	.word	0x0801659c

08003f00 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f14:	f7ff ff30 	bl	8003d78 <LL_RCC_PLL_GetMainSource>
 8003f18:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f26:	d003      	beq.n	8003f30 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003f28:	e005      	b.n	8003f36 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f2c:	617b      	str	r3, [r7, #20]
      break;
 8003f2e:	e005      	b.n	8003f3c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f32:	617b      	str	r3, [r7, #20]
      break;
 8003f34:	e002      	b.n	8003f3c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f38:	617b      	str	r3, [r7, #20]
      break;
 8003f3a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d113      	bne.n	8003f6a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f42:	f7ff ff43 	bl	8003dcc <LL_RCC_PLL_GetDivider>
 8003f46:	4602      	mov	r2, r0
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f4e:	f7ff ff21 	bl	8003d94 <LL_RCC_PLL_GetN>
 8003f52:	4603      	mov	r3, r0
 8003f54:	fb03 f404 	mul.w	r4, r3, r4
 8003f58:	f7ff ff2a 	bl	8003db0 <LL_RCC_PLL_GetP>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	3301      	adds	r3, #1
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f68:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003f6a:	693b      	ldr	r3, [r7, #16]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd90      	pop	{r4, r7, pc}
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	007a1200 	.word	0x007a1200

08003f7c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	f107 001c 	add.w	r0, r7, #28
 8003f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003f92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003f94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003f96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003f9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003f9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003fa2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003fa6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003fb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	b004      	add	sp, #16
 8003fd0:	4770      	bx	lr

08003fd2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0303 	and.w	r3, r3, #3
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004064:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800406a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004070:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004080:	f023 030f 	bic.w	r3, r3, #15
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	b2db      	uxtb	r3, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3314      	adds	r3, #20
 80040c2:	461a      	mov	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
}  
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004100:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004106:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800410c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0

}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b088      	sub	sp, #32
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004140:	2310      	movs	r3, #16
 8004142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004144:	2340      	movs	r3, #64	; 0x40
 8004146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800414c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff74 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	2110      	movs	r1, #16
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f9d7 	bl	8004518 <SDMMC_GetCmdResp1>
 800416a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800416c:	69fb      	ldr	r3, [r7, #28]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b088      	sub	sp, #32
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004184:	2311      	movs	r3, #17
 8004186:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004194:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff52 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	2111      	movs	r1, #17
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f9b5 	bl	8004518 <SDMMC_GetCmdResp1>
 80041ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041b0:	69fb      	ldr	r3, [r7, #28]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b088      	sub	sp, #32
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80041c8:	2312      	movs	r3, #18
 80041ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041da:	f107 0308 	add.w	r3, r7, #8
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff30 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	2112      	movs	r1, #18
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f993 	bl	8004518 <SDMMC_GetCmdResp1>
 80041f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041f4:	69fb      	ldr	r3, [r7, #28]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800420c:	2318      	movs	r3, #24
 800420e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004210:	2340      	movs	r3, #64	; 0x40
 8004212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800421c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff0e 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	2118      	movs	r1, #24
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f971 	bl	8004518 <SDMMC_GetCmdResp1>
 8004236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004238:	69fb      	ldr	r3, [r7, #28]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004250:	2319      	movs	r3, #25
 8004252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800425c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff feec 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	2119      	movs	r1, #25
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f94f 	bl	8004518 <SDMMC_GetCmdResp1>
 800427a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800427c:	69fb      	ldr	r3, [r7, #28]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004294:	230c      	movs	r3, #12
 8004296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004298:	2340      	movs	r3, #64	; 0x40
 800429a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff feca 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <SDMMC_CmdStopTransfer+0x40>)
 80042b4:	210c      	movs	r1, #12
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f92e 	bl	8004518 <SDMMC_GetCmdResp1>
 80042bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042be:	69fb      	ldr	r3, [r7, #28]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	05f5e100 	.word	0x05f5e100

080042cc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80042dc:	2307      	movs	r3, #7
 80042de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042e0:	2340      	movs	r3, #64	; 0x40
 80042e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042ee:	f107 0310 	add.w	r3, r7, #16
 80042f2:	4619      	mov	r1, r3
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7ff fea6 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	2107      	movs	r1, #7
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f909 	bl	8004518 <SDMMC_GetCmdResp1>
 8004306:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	; 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b088      	sub	sp, #32
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800432a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fe85 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fb23 	bl	8004988 <SDMMC_GetCmdError>
 8004342:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004344:	69fb      	ldr	r3, [r7, #28]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b088      	sub	sp, #32
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004356:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800435a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800435c:	2308      	movs	r3, #8
 800435e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004360:	2340      	movs	r3, #64	; 0x40
 8004362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800436c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fe66 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fab6 	bl	80048ec <SDMMC_GetCmdResp7>
 8004380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004382:	69fb      	ldr	r3, [r7, #28]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800439a:	2337      	movs	r3, #55	; 0x37
 800439c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800439e:	2340      	movs	r3, #64	; 0x40
 80043a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fe47 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	2137      	movs	r1, #55	; 0x37
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8aa 	bl	8004518 <SDMMC_GetCmdResp1>
 80043c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043c6:	69fb      	ldr	r3, [r7, #28]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80043e6:	2329      	movs	r3, #41	; 0x29
 80043e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043f8:	f107 0308 	add.w	r3, r7, #8
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fe21 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f9bd 	bl	8004784 <SDMMC_GetCmdResp3>
 800440a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800440c:	69fb      	ldr	r3, [r7, #28]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b088      	sub	sp, #32
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004422:	2302      	movs	r3, #2
 8004424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004426:	23c0      	movs	r3, #192	; 0xc0
 8004428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800442e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004434:	f107 0308 	add.w	r3, r7, #8
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fe03 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f957 	bl	80046f4 <SDMMC_GetCmdResp2>
 8004446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004448:	69fb      	ldr	r3, [r7, #28]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b088      	sub	sp, #32
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004460:	2309      	movs	r3, #9
 8004462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004464:	23c0      	movs	r3, #192	; 0xc0
 8004466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800446c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004470:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fde4 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f938 	bl	80046f4 <SDMMC_GetCmdResp2>
 8004484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004486:	69fb      	ldr	r3, [r7, #28]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800449e:	2303      	movs	r3, #3
 80044a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044a2:	2340      	movs	r3, #64	; 0x40
 80044a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044b0:	f107 0308 	add.w	r3, r7, #8
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fdc5 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	2103      	movs	r1, #3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f99d 	bl	8004800 <SDMMC_GetCmdResp6>
 80044c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044c8:	69fb      	ldr	r3, [r7, #28]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b088      	sub	sp, #32
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80044e0:	230d      	movs	r3, #13
 80044e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044e4:	2340      	movs	r3, #64	; 0x40
 80044e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044f2:	f107 0308 	add.w	r3, r7, #8
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fda4 	bl	8004046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	210d      	movs	r1, #13
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f807 	bl	8004518 <SDMMC_GetCmdResp1>
 800450a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800450c:	69fb      	ldr	r3, [r7, #28]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	460b      	mov	r3, r1
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004526:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <SDMMC_GetCmdResp1+0x1d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a70      	ldr	r2, [pc, #448]	; (80046ec <SDMMC_GetCmdResp1+0x1d4>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	0a5a      	lsrs	r2, r3, #9
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	61fa      	str	r2, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004548:	e0c9      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ef      	beq.n	800453a <SDMMC_GetCmdResp1+0x22>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ea      	bne.n	800453a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2204      	movs	r2, #4
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004576:	2304      	movs	r3, #4
 8004578:	e0b1      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800458c:	2301      	movs	r3, #1
 800458e:	e0a6      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	22c5      	movs	r2, #197	; 0xc5
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fd7f 	bl	800409a <SDIO_GetCommandResponse>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	7afb      	ldrb	r3, [r7, #11]
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d001      	beq.n	80045aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e099      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80045aa:	2100      	movs	r1, #0
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff fd81 	bl	80040b4 <SDIO_GetResponse>
 80045b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <SDMMC_GetCmdResp1+0x1d8>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80045be:	2300      	movs	r3, #0
 80045c0:	e08d      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da02      	bge.n	80045ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80045c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045cc:	e087      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80045d8:	2340      	movs	r3, #64	; 0x40
 80045da:	e080      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	e079      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80045f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045f8:	e071      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004608:	e069      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004618:	e061      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004628:	e059      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004638:	e051      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004648:	e049      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004658:	e041      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004668:	e039      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004678:	e031      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004684:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004688:	e029      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004694:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004698:	e021      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80046a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046a8:	e019      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80046b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046b8:	e011      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80046c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046c8:	e009      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80046d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80046d8:	e001      	b.n	80046de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80046da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000014 	.word	0x20000014
 80046ec:	10624dd3 	.word	0x10624dd3
 80046f0:	fdffe008 	.word	0xfdffe008

080046f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046fc:	4b1f      	ldr	r3, [pc, #124]	; (800477c <SDMMC_GetCmdResp2+0x88>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1f      	ldr	r2, [pc, #124]	; (8004780 <SDMMC_GetCmdResp2+0x8c>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	0a5b      	lsrs	r3, r3, #9
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1e5a      	subs	r2, r3, #1
 8004716:	60fa      	str	r2, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800471c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004720:	e026      	b.n	8004770 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ef      	beq.n	8004712 <SDMMC_GetCmdResp2+0x1e>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ea      	bne.n	8004712 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2204      	movs	r2, #4
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800474e:	2304      	movs	r3, #4
 8004750:	e00e      	b.n	8004770 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004764:	2301      	movs	r3, #1
 8004766:	e003      	b.n	8004770 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	22c5      	movs	r2, #197	; 0xc5
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000014 	.word	0x20000014
 8004780:	10624dd3 	.word	0x10624dd3

08004784 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <SDMMC_GetCmdResp3+0x74>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <SDMMC_GetCmdResp3+0x78>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	0a5b      	lsrs	r3, r3, #9
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1e5a      	subs	r2, r3, #1
 80047a6:	60fa      	str	r2, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047b0:	e01b      	b.n	80047ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <SDMMC_GetCmdResp3+0x1e>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ea      	bne.n	80047a2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2204      	movs	r2, #4
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047de:	2304      	movs	r3, #4
 80047e0:	e003      	b.n	80047ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	22c5      	movs	r2, #197	; 0xc5
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000014 	.word	0x20000014
 80047fc:	10624dd3 	.word	0x10624dd3

08004800 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	460b      	mov	r3, r1
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800480e:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <SDMMC_GetCmdResp6+0xe4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a35      	ldr	r2, [pc, #212]	; (80048e8 <SDMMC_GetCmdResp6+0xe8>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	0a5b      	lsrs	r3, r3, #9
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	1e5a      	subs	r2, r3, #1
 8004828:	61fa      	str	r2, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800482e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004832:	e052      	b.n	80048da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ef      	beq.n	8004824 <SDMMC_GetCmdResp6+0x24>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ea      	bne.n	8004824 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2204      	movs	r2, #4
 800485e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004860:	2304      	movs	r3, #4
 8004862:	e03a      	b.n	80048da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004876:	2301      	movs	r3, #1
 8004878:	e02f      	b.n	80048da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff fc0d 	bl	800409a <SDIO_GetCommandResponse>
 8004880:	4603      	mov	r3, r0
 8004882:	461a      	mov	r2, r3
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	4293      	cmp	r3, r2
 8004888:	d001      	beq.n	800488e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800488a:	2301      	movs	r3, #1
 800488c:	e025      	b.n	80048da <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	22c5      	movs	r2, #197	; 0xc5
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004894:	2100      	movs	r1, #0
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fc0c 	bl	80040b4 <SDIO_GetResponse>
 800489c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e011      	b.n	80048da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80048c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048c4:	e009      	b.n	80048da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80048d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d4:	e001      	b.n	80048da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80048d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000014 	.word	0x20000014
 80048e8:	10624dd3 	.word	0x10624dd3

080048ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <SDMMC_GetCmdResp7+0x94>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a22      	ldr	r2, [pc, #136]	; (8004984 <SDMMC_GetCmdResp7+0x98>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0a5b      	lsrs	r3, r3, #9
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1e5a      	subs	r2, r3, #1
 800490e:	60fa      	str	r2, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004918:	e02c      	b.n	8004974 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ef      	beq.n	800490a <SDMMC_GetCmdResp7+0x1e>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ea      	bne.n	800490a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2204      	movs	r2, #4
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004946:	2304      	movs	r3, #4
 8004948:	e014      	b.n	8004974 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800495c:	2301      	movs	r3, #1
 800495e:	e009      	b.n	8004974 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004972:	2300      	movs	r3, #0
  
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	20000014 	.word	0x20000014
 8004984:	10624dd3 	.word	0x10624dd3

08004988 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <SDMMC_GetCmdError+0x50>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a11      	ldr	r2, [pc, #68]	; (80049dc <SDMMC_GetCmdError+0x54>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	0a5b      	lsrs	r3, r3, #9
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1e5a      	subs	r2, r3, #1
 80049aa:	60fa      	str	r2, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049b4:	e009      	b.n	80049ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f1      	beq.n	80049a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	22c5      	movs	r2, #197	; 0xc5
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000014 	.word	0x20000014
 80049dc:	10624dd3 	.word	0x10624dd3

080049e0 <LL_SPI_IsEnabled>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d101      	bne.n	80049f8 <LL_SPI_IsEnabled+0x18>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <LL_SPI_IsEnabled+0x1a>
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff ffd3 	bl	80049e0 <LL_SPI_IsEnabled>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d139      	bne.n	8004ab4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a48:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	6811      	ldr	r1, [r2, #0]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	6852      	ldr	r2, [r2, #4]
 8004a54:	4311      	orrs	r1, r2
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	4311      	orrs	r1, r2
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	4311      	orrs	r1, r2
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	6912      	ldr	r2, [r2, #16]
 8004a66:	4311      	orrs	r1, r2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	6952      	ldr	r2, [r2, #20]
 8004a6c:	4311      	orrs	r1, r2
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	6992      	ldr	r2, [r2, #24]
 8004a72:	4311      	orrs	r1, r2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	69d2      	ldr	r2, [r2, #28]
 8004a78:	4311      	orrs	r1, r2
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	6a12      	ldr	r2, [r2, #32]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f023 0204 	bic.w	r2, r3, #4
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa2:	d105      	bne.n	8004ab0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ffab 	bl	8004a06 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	61da      	str	r2, [r3, #28]
  return status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	615a      	str	r2, [r3, #20]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a3d      	ldr	r2, [pc, #244]	; (8004c48 <LL_TIM_Init+0x108>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <LL_TIM_Init+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <LL_TIM_Init+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3a      	ldr	r2, [pc, #232]	; (8004c4c <LL_TIM_Init+0x10c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <LL_TIM_Init+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a39      	ldr	r2, [pc, #228]	; (8004c50 <LL_TIM_Init+0x110>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <LL_TIM_Init+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a38      	ldr	r2, [pc, #224]	; (8004c54 <LL_TIM_Init+0x114>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <LL_TIM_Init+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a37      	ldr	r2, [pc, #220]	; (8004c58 <LL_TIM_Init+0x118>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d106      	bne.n	8004b8e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2d      	ldr	r2, [pc, #180]	; (8004c48 <LL_TIM_Init+0x108>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02b      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d027      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <LL_TIM_Init+0x10c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d023      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <LL_TIM_Init+0x110>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01f      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <LL_TIM_Init+0x114>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01b      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a27      	ldr	r2, [pc, #156]	; (8004c58 <LL_TIM_Init+0x118>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d017      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a26      	ldr	r2, [pc, #152]	; (8004c5c <LL_TIM_Init+0x11c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <LL_TIM_Init+0x120>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00f      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <LL_TIM_Init+0x124>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	; (8004c68 <LL_TIM_Init+0x128>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <LL_TIM_Init+0x12c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <LL_TIM_Init+0xae>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <LL_TIM_Init+0x130>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d106      	bne.n	8004bfc <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff6c 	bl	8004ae6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff58 	bl	8004aca <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <LL_TIM_Init+0x108>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <LL_TIM_Init+0xea>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <LL_TIM_Init+0x118>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d105      	bne.n	8004c36 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ff66 	bl	8004b02 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ff71 	bl	8004b1e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40010400 	.word	0x40010400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800
 8004c68:	40001800 	.word	0x40001800
 8004c6c:	40001c00 	.word	0x40001c00
 8004c70:	40002000 	.word	0x40002000

08004c74 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	611a      	str	r2, [r3, #16]
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	615a      	str	r2, [r3, #20]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b0c0      	sub	sp, #256	; 0x100
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cf4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004cf8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004cfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d08:	f040 810c 	bne.w	8004f24 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d1e:	4622      	mov	r2, r4
 8004d20:	462b      	mov	r3, r5
 8004d22:	1891      	adds	r1, r2, r2
 8004d24:	6639      	str	r1, [r7, #96]	; 0x60
 8004d26:	415b      	adcs	r3, r3
 8004d28:	667b      	str	r3, [r7, #100]	; 0x64
 8004d2a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004d2e:	4621      	mov	r1, r4
 8004d30:	eb12 0801 	adds.w	r8, r2, r1
 8004d34:	4629      	mov	r1, r5
 8004d36:	eb43 0901 	adc.w	r9, r3, r1
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4e:	4690      	mov	r8, r2
 8004d50:	4699      	mov	r9, r3
 8004d52:	4623      	mov	r3, r4
 8004d54:	eb18 0303 	adds.w	r3, r8, r3
 8004d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d5c:	462b      	mov	r3, r5
 8004d5e:	eb49 0303 	adc.w	r3, r9, r3
 8004d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	469a      	mov	sl, r3
 8004d6e:	4693      	mov	fp, r2
 8004d70:	eb1a 030a 	adds.w	r3, sl, sl
 8004d74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d76:	eb4b 030b 	adc.w	r3, fp, fp
 8004d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d84:	f7fb fad4 	bl	8000330 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4b64      	ldr	r3, [pc, #400]	; (8004f20 <LL_USART_SetBaudRate+0x238>)
 8004d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	b29c      	uxth	r4, r3
 8004d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004da4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004da8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	6539      	str	r1, [r7, #80]	; 0x50
 8004db4:	415b      	adcs	r3, r3
 8004db6:	657b      	str	r3, [r7, #84]	; 0x54
 8004db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	1851      	adds	r1, r2, r1
 8004dc0:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	414b      	adcs	r3, r1
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	00cb      	lsls	r3, r1, #3
 8004dd8:	4651      	mov	r1, sl
 8004dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dde:	4651      	mov	r1, sl
 8004de0:	00ca      	lsls	r2, r1, #3
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	4642      	mov	r2, r8
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004df0:	464b      	mov	r3, r9
 8004df2:	460a      	mov	r2, r1
 8004df4:	eb42 0303 	adc.w	r3, r2, r3
 8004df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004dfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e06:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004e0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e0e:	460b      	mov	r3, r1
 8004e10:	18db      	adds	r3, r3, r3
 8004e12:	643b      	str	r3, [r7, #64]	; 0x40
 8004e14:	4613      	mov	r3, r2
 8004e16:	eb42 0303 	adc.w	r3, r2, r3
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e20:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e24:	f7fb fa84 	bl	8000330 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4b3c      	ldr	r3, [pc, #240]	; (8004f20 <LL_USART_SetBaudRate+0x238>)
 8004e30:	fba3 2301 	umull	r2, r3, r3, r1
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2264      	movs	r2, #100	; 0x64
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	1acb      	subs	r3, r1, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e44:	4b36      	ldr	r3, [pc, #216]	; (8004f20 <LL_USART_SetBaudRate+0x238>)
 8004e46:	fba3 2302 	umull	r2, r3, r3, r2
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	4423      	add	r3, r4
 8004e5a:	b29c      	uxth	r4, r3
 8004e5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e66:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e6a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004e6e:	4642      	mov	r2, r8
 8004e70:	464b      	mov	r3, r9
 8004e72:	1891      	adds	r1, r2, r2
 8004e74:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e76:	415b      	adcs	r3, r3
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e7e:	4641      	mov	r1, r8
 8004e80:	1851      	adds	r1, r2, r1
 8004e82:	6339      	str	r1, [r7, #48]	; 0x30
 8004e84:	4649      	mov	r1, r9
 8004e86:	414b      	adcs	r3, r1
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e96:	4659      	mov	r1, fp
 8004e98:	00cb      	lsls	r3, r1, #3
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	00ca      	lsls	r2, r1, #3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4642      	mov	r2, r8
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	460a      	mov	r2, r1
 8004eb6:	eb42 0303 	adc.w	r3, r2, r3
 8004eba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ebe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004ecc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	18db      	adds	r3, r3, r3
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	eb42 0303 	adc.w	r3, r2, r3
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004ee6:	f7fb fa23 	bl	8000330 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <LL_USART_SetBaudRate+0x238>)
 8004ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2164      	movs	r1, #100	; 0x64
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <LL_USART_SetBaudRate+0x238>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	4423      	add	r3, r4
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8004f1e:	e107      	b.n	8005130 <LL_USART_SetBaudRate+0x448>
 8004f20:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f2e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f32:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004f36:	4642      	mov	r2, r8
 8004f38:	464b      	mov	r3, r9
 8004f3a:	1891      	adds	r1, r2, r2
 8004f3c:	6239      	str	r1, [r7, #32]
 8004f3e:	415b      	adcs	r3, r3
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f46:	4641      	mov	r1, r8
 8004f48:	1854      	adds	r4, r2, r1
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	eb43 0501 	adc.w	r5, r3, r1
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	00eb      	lsls	r3, r5, #3
 8004f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5e:	00e2      	lsls	r2, r4, #3
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	18e3      	adds	r3, r4, r3
 8004f68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	eb45 0303 	adc.w	r3, r5, r3
 8004f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f80:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004f90:	4629      	mov	r1, r5
 8004f92:	008b      	lsls	r3, r1, #2
 8004f94:	4621      	mov	r1, r4
 8004f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	008a      	lsls	r2, r1, #2
 8004f9e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004fa2:	f7fb f9c5 	bl	8000330 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4b64      	ldr	r3, [pc, #400]	; (800513c <LL_USART_SetBaudRate+0x454>)
 8004fac:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	b29c      	uxth	r4, r3
 8004fb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fc6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004fca:	4642      	mov	r2, r8
 8004fcc:	464b      	mov	r3, r9
 8004fce:	1891      	adds	r1, r2, r2
 8004fd0:	61b9      	str	r1, [r7, #24]
 8004fd2:	415b      	adcs	r3, r3
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fda:	4641      	mov	r1, r8
 8004fdc:	1851      	adds	r1, r2, r1
 8004fde:	6139      	str	r1, [r7, #16]
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	414b      	adcs	r3, r1
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ff2:	4659      	mov	r1, fp
 8004ff4:	00cb      	lsls	r3, r1, #3
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	00ca      	lsls	r2, r1, #3
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	4603      	mov	r3, r0
 8005006:	4642      	mov	r2, r8
 8005008:	189b      	adds	r3, r3, r2
 800500a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800500e:	464b      	mov	r3, r9
 8005010:	460a      	mov	r2, r1
 8005012:	eb42 0303 	adc.w	r3, r2, r3
 8005016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800501a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005024:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005034:	4649      	mov	r1, r9
 8005036:	008b      	lsls	r3, r1, #2
 8005038:	4641      	mov	r1, r8
 800503a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503e:	4641      	mov	r1, r8
 8005040:	008a      	lsls	r2, r1, #2
 8005042:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005046:	f7fb f973 	bl	8000330 <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4b3b      	ldr	r3, [pc, #236]	; (800513c <LL_USART_SetBaudRate+0x454>)
 8005050:	fba3 1302 	umull	r1, r3, r3, r2
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	2164      	movs	r1, #100	; 0x64
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	3332      	adds	r3, #50	; 0x32
 8005062:	4a36      	ldr	r2, [pc, #216]	; (800513c <LL_USART_SetBaudRate+0x454>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	b29b      	uxth	r3, r3
 800506c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005070:	b29b      	uxth	r3, r3
 8005072:	4423      	add	r3, r4
 8005074:	b29c      	uxth	r4, r3
 8005076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800507a:	2200      	movs	r2, #0
 800507c:	67bb      	str	r3, [r7, #120]	; 0x78
 800507e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	1891      	adds	r1, r2, r2
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	415b      	adcs	r3, r3
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005094:	4641      	mov	r1, r8
 8005096:	1851      	adds	r1, r2, r1
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	4649      	mov	r1, r9
 800509c:	414b      	adcs	r3, r1
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050ac:	4659      	mov	r1, fp
 80050ae:	00cb      	lsls	r3, r1, #3
 80050b0:	4651      	mov	r1, sl
 80050b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b6:	4651      	mov	r1, sl
 80050b8:	00ca      	lsls	r2, r1, #3
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	4642      	mov	r2, r8
 80050c2:	189b      	adds	r3, r3, r2
 80050c4:	673b      	str	r3, [r7, #112]	; 0x70
 80050c6:	464b      	mov	r3, r9
 80050c8:	460a      	mov	r2, r1
 80050ca:	eb42 0303 	adc.w	r3, r2, r3
 80050ce:	677b      	str	r3, [r7, #116]	; 0x74
 80050d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050d4:	2200      	movs	r2, #0
 80050d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80050e6:	4649      	mov	r1, r9
 80050e8:	008b      	lsls	r3, r1, #2
 80050ea:	4641      	mov	r1, r8
 80050ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f0:	4641      	mov	r1, r8
 80050f2:	008a      	lsls	r2, r1, #2
 80050f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80050f8:	f7fb f91a 	bl	8000330 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4b0e      	ldr	r3, [pc, #56]	; (800513c <LL_USART_SetBaudRate+0x454>)
 8005102:	fba3 1302 	umull	r1, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2164      	movs	r1, #100	; 0x64
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	3332      	adds	r3, #50	; 0x32
 8005114:	4a09      	ldr	r2, [pc, #36]	; (800513c <LL_USART_SetBaudRate+0x454>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	b29b      	uxth	r3, r3
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	b29b      	uxth	r3, r3
 8005124:	4423      	add	r3, r4
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005136:	46bd      	mov	sp, r7
 8005138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800513c:	51eb851f 	.word	0x51eb851f

08005140 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fd8e 	bl	8004c74 <LL_USART_IsEnabled>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d16c      	bne.n	8005238 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005166:	f023 030c 	bic.w	r3, r3, #12
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	6851      	ldr	r1, [r2, #4]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	4311      	orrs	r1, r2
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	6912      	ldr	r2, [r2, #16]
 8005178:	4311      	orrs	r1, r2
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	6992      	ldr	r2, [r2, #24]
 800517e:	430a      	orrs	r2, r1
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fd85 	bl	8004c9c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fd92 	bl	8004cc2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800519e:	f107 0308 	add.w	r3, r7, #8
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fe20 	bl	8003de8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a26      	ldr	r2, [pc, #152]	; (8005244 <LL_USART_Init+0x104>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d102      	bne.n	80051b6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e02f      	b.n	8005216 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a23      	ldr	r2, [pc, #140]	; (8005248 <LL_USART_Init+0x108>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d102      	bne.n	80051c4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e028      	b.n	8005216 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a21      	ldr	r2, [pc, #132]	; (800524c <LL_USART_Init+0x10c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d102      	bne.n	80051d2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	e021      	b.n	8005216 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <LL_USART_Init+0x110>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d102      	bne.n	80051e0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e01a      	b.n	8005216 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <LL_USART_Init+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d102      	bne.n	80051ee <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e013      	b.n	8005216 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <LL_USART_Init+0x118>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d102      	bne.n	80051fc <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	e00c      	b.n	8005216 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <LL_USART_Init+0x11c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d102      	bne.n	800520a <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	e005      	b.n	8005216 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a14      	ldr	r2, [pc, #80]	; (8005260 <LL_USART_Init+0x120>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d101      	bne.n	8005216 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8005224:	2300      	movs	r3, #0
 8005226:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fd58 	bl	8004ce8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005238:	7ffb      	ldrb	r3, [r7, #31]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40011000 	.word	0x40011000
 8005248:	40004400 	.word	0x40004400
 800524c:	40004800 	.word	0x40004800
 8005250:	40011400 	.word	0x40011400
 8005254:	40004c00 	.word	0x40004c00
 8005258:	40005000 	.word	0x40005000
 800525c:	40007800 	.word	0x40007800
 8005260:	40007c00 	.word	0x40007c00

08005264 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800526c:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <LL_mDelay+0x48>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005272:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527a:	d00c      	beq.n	8005296 <LL_mDelay+0x32>
  {
    Delay++;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3301      	adds	r3, #1
 8005280:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8005282:	e008      	b.n	8005296 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <LL_mDelay+0x48>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <LL_mDelay+0x32>
    {
      Delay--;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	607b      	str	r3, [r7, #4]
  while (Delay)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f3      	bne.n	8005284 <LL_mDelay+0x20>
    }
  }
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000e010 	.word	0xe000e010

080052b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80052b8:	4a04      	ldr	r2, [pc, #16]	; (80052cc <LL_SetSystemCoreClock+0x1c>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6013      	str	r3, [r2, #0]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000014 	.word	0x20000014

080052d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80052da:	f000 f888 	bl	80053ee <BSP_SD_IsDetected>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d001      	beq.n	80052e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e005      	b.n	80052f4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80052e8:	4804      	ldr	r0, [pc, #16]	; (80052fc <BSP_SD_Init+0x2c>)
 80052ea:	f7fc fd95 	bl	8001e18 <HAL_SD_Init>
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80052f2:	79fb      	ldrb	r3, [r7, #7]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20005994 	.word	0x20005994

08005300 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	68f9      	ldr	r1, [r7, #12]
 8005316:	4806      	ldr	r0, [pc, #24]	; (8005330 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005318:	f7fc fe2e 	bl	8001f78 <HAL_SD_ReadBlocks_DMA>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20005994 	.word	0x20005994

08005334 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	68f9      	ldr	r1, [r7, #12]
 800534a:	4806      	ldr	r0, [pc, #24]	; (8005364 <BSP_SD_WriteBlocks_DMA+0x30>)
 800534c:	f7fc fef6 	bl	800213c <HAL_SD_WriteBlocks_DMA>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20005994 	.word	0x20005994

08005368 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800536c:	4805      	ldr	r0, [pc, #20]	; (8005384 <BSP_SD_GetCardState+0x1c>)
 800536e:	f7fd fb2b 	bl	80029c8 <HAL_SD_GetCardState>
 8005372:	4603      	mov	r3, r0
 8005374:	2b04      	cmp	r3, #4
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
}
 800537e:	4618      	mov	r0, r3
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20005994 	.word	0x20005994

08005388 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4803      	ldr	r0, [pc, #12]	; (80053a0 <BSP_SD_GetCardInfo+0x18>)
 8005394:	f7fd faec 	bl	8002970 <HAL_SD_GetCardInfo>
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20005994 	.word	0x20005994

080053a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80053ac:	f000 f818 	bl	80053e0 <BSP_SD_AbortCallback>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80053c0:	f003 fcc8 	bl	8008d54 <BSP_SD_WriteCpltCallback>
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80053d4:	f003 fcca 	bl	8008d6c <BSP_SD_ReadCpltCallback>
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0

}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80053f4:	2301      	movs	r3, #1
 80053f6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	b2db      	uxtb	r3, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	2b7f      	cmp	r3, #127	; 0x7f
 8005418:	d802      	bhi.n	8005420 <ff_convert+0x18>
		c = chr;
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	81fb      	strh	r3, [r7, #14]
 800541e:	e025      	b.n	800546c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	2bff      	cmp	r3, #255	; 0xff
 800542a:	d805      	bhi.n	8005438 <ff_convert+0x30>
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	3b80      	subs	r3, #128	; 0x80
 8005430:	4a12      	ldr	r2, [pc, #72]	; (800547c <ff_convert+0x74>)
 8005432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005436:	e000      	b.n	800543a <ff_convert+0x32>
 8005438:	2300      	movs	r3, #0
 800543a:	81fb      	strh	r3, [r7, #14]
 800543c:	e016      	b.n	800546c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800543e:	2300      	movs	r3, #0
 8005440:	81fb      	strh	r3, [r7, #14]
 8005442:	e009      	b.n	8005458 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005444:	89fb      	ldrh	r3, [r7, #14]
 8005446:	4a0d      	ldr	r2, [pc, #52]	; (800547c <ff_convert+0x74>)
 8005448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	429a      	cmp	r2, r3
 8005450:	d006      	beq.n	8005460 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005452:	89fb      	ldrh	r3, [r7, #14]
 8005454:	3301      	adds	r3, #1
 8005456:	81fb      	strh	r3, [r7, #14]
 8005458:	89fb      	ldrh	r3, [r7, #14]
 800545a:	2b7f      	cmp	r3, #127	; 0x7f
 800545c:	d9f2      	bls.n	8005444 <ff_convert+0x3c>
 800545e:	e000      	b.n	8005462 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005460:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005462:	89fb      	ldrh	r3, [r7, #14]
 8005464:	3380      	adds	r3, #128	; 0x80
 8005466:	b29b      	uxth	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800546c:	89fb      	ldrh	r3, [r7, #14]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	0801589c 	.word	0x0801589c

08005480 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005490:	d201      	bcs.n	8005496 <ff_wtoupper+0x16>
 8005492:	4b3e      	ldr	r3, [pc, #248]	; (800558c <ff_wtoupper+0x10c>)
 8005494:	e000      	b.n	8005498 <ff_wtoupper+0x18>
 8005496:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <ff_wtoupper+0x110>)
 8005498:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	1c9a      	adds	r2, r3, #2
 800549e:	617a      	str	r2, [r7, #20]
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80054a4:	8a7b      	ldrh	r3, [r7, #18]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d068      	beq.n	800557c <ff_wtoupper+0xfc>
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	8a7b      	ldrh	r3, [r7, #18]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d364      	bcc.n	800557c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	617a      	str	r2, [r7, #20]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	823b      	strh	r3, [r7, #16]
 80054bc:	8a3b      	ldrh	r3, [r7, #16]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	81fb      	strh	r3, [r7, #14]
 80054c2:	8a3b      	ldrh	r3, [r7, #16]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	8a79      	ldrh	r1, [r7, #18]
 80054cc:	8a3b      	ldrh	r3, [r7, #16]
 80054ce:	440b      	add	r3, r1
 80054d0:	429a      	cmp	r2, r3
 80054d2:	da49      	bge.n	8005568 <ff_wtoupper+0xe8>
			switch (cmd) {
 80054d4:	89fb      	ldrh	r3, [r7, #14]
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d84f      	bhi.n	800557a <ff_wtoupper+0xfa>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <ff_wtoupper+0x60>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005505 	.word	0x08005505
 80054e4:	08005517 	.word	0x08005517
 80054e8:	0800552d 	.word	0x0800552d
 80054ec:	08005535 	.word	0x08005535
 80054f0:	0800553d 	.word	0x0800553d
 80054f4:	08005545 	.word	0x08005545
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	08005555 	.word	0x08005555
 8005500:	0800555d 	.word	0x0800555d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	8a7b      	ldrh	r3, [r7, #18]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	80fb      	strh	r3, [r7, #6]
 8005514:	e027      	b.n	8005566 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	8a7b      	ldrh	r3, [r7, #18]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	b29b      	uxth	r3, r3
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	80fb      	strh	r3, [r7, #6]
 800552a:	e01c      	b.n	8005566 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	3b10      	subs	r3, #16
 8005530:	80fb      	strh	r3, [r7, #6]
 8005532:	e018      	b.n	8005566 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	3b20      	subs	r3, #32
 8005538:	80fb      	strh	r3, [r7, #6]
 800553a:	e014      	b.n	8005566 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	3b30      	subs	r3, #48	; 0x30
 8005540:	80fb      	strh	r3, [r7, #6]
 8005542:	e010      	b.n	8005566 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	3b1a      	subs	r3, #26
 8005548:	80fb      	strh	r3, [r7, #6]
 800554a:	e00c      	b.n	8005566 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	3308      	adds	r3, #8
 8005550:	80fb      	strh	r3, [r7, #6]
 8005552:	e008      	b.n	8005566 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	3b50      	subs	r3, #80	; 0x50
 8005558:	80fb      	strh	r3, [r7, #6]
 800555a:	e004      	b.n	8005566 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8005562:	80fb      	strh	r3, [r7, #6]
 8005564:	bf00      	nop
			}
			break;
 8005566:	e008      	b.n	800557a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d195      	bne.n	800549a <ff_wtoupper+0x1a>
 800556e:	8a3b      	ldrh	r3, [r7, #16]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4413      	add	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8005578:	e78f      	b.n	800549a <ff_wtoupper+0x1a>
			break;
 800557a:	bf00      	nop
	}

	return chr;
 800557c:	88fb      	ldrh	r3, [r7, #6]
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	0801599c 	.word	0x0801599c
 8005590:	08015b90 	.word	0x08015b90

08005594 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <disk_status+0x30>)
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	79fa      	ldrb	r2, [r7, #7]
 80055ac:	4905      	ldr	r1, [pc, #20]	; (80055c4 <disk_status+0x30>)
 80055ae:	440a      	add	r2, r1
 80055b0:	7a12      	ldrb	r2, [r2, #8]
 80055b2:	4610      	mov	r0, r2
 80055b4:	4798      	blx	r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200000d4 	.word	0x200000d4

080055c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <disk_initialize+0x48>)
 80055da:	5cd3      	ldrb	r3, [r2, r3]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d111      	bne.n	8005604 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <disk_initialize+0x48>)
 80055e4:	2101      	movs	r1, #1
 80055e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	4a09      	ldr	r2, [pc, #36]	; (8005610 <disk_initialize+0x48>)
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	79fa      	ldrb	r2, [r7, #7]
 80055f6:	4906      	ldr	r1, [pc, #24]	; (8005610 <disk_initialize+0x48>)
 80055f8:	440a      	add	r2, r1
 80055fa:	7a12      	ldrb	r2, [r2, #8]
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200000d4 	.word	0x200000d4

08005614 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <disk_read+0x3c>)
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	689c      	ldr	r4, [r3, #8]
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	4a07      	ldr	r2, [pc, #28]	; (8005650 <disk_read+0x3c>)
 8005634:	4413      	add	r3, r2
 8005636:	7a18      	ldrb	r0, [r3, #8]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	47a0      	blx	r4
 8005640:	4603      	mov	r3, r0
 8005642:	75fb      	strb	r3, [r7, #23]
  return res;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd90      	pop	{r4, r7, pc}
 800564e:	bf00      	nop
 8005650:	200000d4 	.word	0x200000d4

08005654 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005654:	b590      	push	{r4, r7, lr}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <disk_write+0x3c>)
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68dc      	ldr	r4, [r3, #12]
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4a07      	ldr	r2, [pc, #28]	; (8005690 <disk_write+0x3c>)
 8005674:	4413      	add	r3, r2
 8005676:	7a18      	ldrb	r0, [r3, #8]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	47a0      	blx	r4
 8005680:	4603      	mov	r3, r0
 8005682:	75fb      	strb	r3, [r7, #23]
  return res;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
}
 8005686:	4618      	mov	r0, r3
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	bd90      	pop	{r4, r7, pc}
 800568e:	bf00      	nop
 8005690:	200000d4 	.word	0x200000d4

08005694 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	603a      	str	r2, [r7, #0]
 800569e:	71fb      	strb	r3, [r7, #7]
 80056a0:	460b      	mov	r3, r1
 80056a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <disk_ioctl+0x38>)
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	79fa      	ldrb	r2, [r7, #7]
 80056b2:	4906      	ldr	r1, [pc, #24]	; (80056cc <disk_ioctl+0x38>)
 80056b4:	440a      	add	r2, r1
 80056b6:	7a10      	ldrb	r0, [r2, #8]
 80056b8:	79b9      	ldrb	r1, [r7, #6]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	4798      	blx	r3
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	200000d4 	.word	0x200000d4

080056d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80056d4:	4904      	ldr	r1, [pc, #16]	; (80056e8 <MX_FATFS_Init+0x18>)
 80056d6:	4805      	ldr	r0, [pc, #20]	; (80056ec <MX_FATFS_Init+0x1c>)
 80056d8:	f003 f9c4 	bl	8008a64 <FATFS_LinkDriver>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <MX_FATFS_Init+0x20>)
 80056e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056e4:	bf00      	nop
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	200000a8 	.word	0x200000a8
 80056ec:	08015cdc 	.word	0x08015cdc
 80056f0:	200000a4 	.word	0x200000a4

080056f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80056f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3301      	adds	r3, #1
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005714:	89fb      	ldrh	r3, [r7, #14]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	b21a      	sxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	b21b      	sxth	r3, r3
 8005720:	4313      	orrs	r3, r2
 8005722:	b21b      	sxth	r3, r3
 8005724:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005726:	89fb      	ldrh	r3, [r7, #14]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3303      	adds	r3, #3
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	3202      	adds	r2, #2
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	3201      	adds	r2, #1
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
	return rv;
 800576c:	68fb      	ldr	r3, [r7, #12]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	887a      	ldrh	r2, [r7, #2]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	1c53      	adds	r3, r2, #1
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	6179      	str	r1, [r7, #20]
 800582e:	7812      	ldrb	r2, [r2, #0]
 8005830:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f1      	bne.n	8005822 <mem_cpy+0x1a>
	}
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	617a      	str	r2, [r7, #20]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3b01      	subs	r3, #1
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f3      	bne.n	800585a <mem_set+0x10>
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005880:	b480      	push	{r7}
 8005882:	b089      	sub	sp, #36	; 0x24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	61fa      	str	r2, [r7, #28]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	4619      	mov	r1, r3
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	61ba      	str	r2, [r7, #24]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	1acb      	subs	r3, r1, r3
 80058ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <mem_cmp+0x40>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0eb      	beq.n	8005898 <mem_cmp+0x18>

	return r;
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3724      	adds	r7, #36	; 0x24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80058d8:	e002      	b.n	80058e0 <chk_chr+0x12>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3301      	adds	r3, #1
 80058de:	607b      	str	r3, [r7, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <chk_chr+0x26>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d1f2      	bne.n	80058da <chk_chr+0xc>
	return *str;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	781b      	ldrb	r3, [r3, #0]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e029      	b.n	800596c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005918:	4a27      	ldr	r2, [pc, #156]	; (80059b8 <chk_lock+0xb4>)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	4413      	add	r3, r2
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01d      	beq.n	8005962 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005926:	4a24      	ldr	r2, [pc, #144]	; (80059b8 <chk_lock+0xb4>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	4413      	add	r3, r2
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d116      	bne.n	8005966 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <chk_lock+0xb4>)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	4413      	add	r3, r2
 8005940:	3304      	adds	r3, #4
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005948:	429a      	cmp	r2, r3
 800594a:	d10c      	bne.n	8005966 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800594c:	4a1a      	ldr	r2, [pc, #104]	; (80059b8 <chk_lock+0xb4>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	4413      	add	r3, r2
 8005954:	3308      	adds	r3, #8
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800595c:	429a      	cmp	r2, r3
 800595e:	d102      	bne.n	8005966 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005960:	e007      	b.n	8005972 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005962:	2301      	movs	r3, #1
 8005964:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d9d2      	bls.n	8005918 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d109      	bne.n	800598c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <chk_lock+0x80>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d101      	bne.n	8005988 <chk_lock+0x84>
 8005984:	2300      	movs	r3, #0
 8005986:	e010      	b.n	80059aa <chk_lock+0xa6>
 8005988:	2312      	movs	r3, #18
 800598a:	e00e      	b.n	80059aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d108      	bne.n	80059a4 <chk_lock+0xa0>
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <chk_lock+0xb4>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	4413      	add	r3, r2
 800599a:	330c      	adds	r3, #12
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a2:	d101      	bne.n	80059a8 <chk_lock+0xa4>
 80059a4:	2310      	movs	r3, #16
 80059a6:	e000      	b.n	80059aa <chk_lock+0xa6>
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	200000b4 	.word	0x200000b4

080059bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	e002      	b.n	80059ce <enq_lock+0x12>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3301      	adds	r3, #1
 80059cc:	607b      	str	r3, [r7, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d806      	bhi.n	80059e2 <enq_lock+0x26>
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <enq_lock+0x40>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	4413      	add	r3, r2
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f2      	bne.n	80059c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	200000b4 	.word	0x200000b4

08005a00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e01f      	b.n	8005a50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005a10:	4a41      	ldr	r2, [pc, #260]	; (8005b18 <inc_lock+0x118>)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	4413      	add	r3, r2
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d113      	bne.n	8005a4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005a22:	4a3d      	ldr	r2, [pc, #244]	; (8005b18 <inc_lock+0x118>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	4413      	add	r3, r2
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d109      	bne.n	8005a4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005a36:	4a38      	ldr	r2, [pc, #224]	; (8005b18 <inc_lock+0x118>)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3308      	adds	r3, #8
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d006      	beq.n	8005a58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d9dc      	bls.n	8005a10 <inc_lock+0x10>
 8005a56:	e000      	b.n	8005a5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005a58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d132      	bne.n	8005ac6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e002      	b.n	8005a6c <inc_lock+0x6c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d806      	bhi.n	8005a80 <inc_lock+0x80>
 8005a72:	4a29      	ldr	r2, [pc, #164]	; (8005b18 <inc_lock+0x118>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	4413      	add	r3, r2
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f2      	bne.n	8005a66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d101      	bne.n	8005a8a <inc_lock+0x8a>
 8005a86:	2300      	movs	r3, #0
 8005a88:	e040      	b.n	8005b0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4922      	ldr	r1, [pc, #136]	; (8005b18 <inc_lock+0x118>)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	440b      	add	r3, r1
 8005a96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	491e      	ldr	r1, [pc, #120]	; (8005b18 <inc_lock+0x118>)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	440b      	add	r3, r1
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	491a      	ldr	r1, [pc, #104]	; (8005b18 <inc_lock+0x118>)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <inc_lock+0x118>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	4413      	add	r3, r2
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d009      	beq.n	8005ae0 <inc_lock+0xe0>
 8005acc:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <inc_lock+0x118>)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	4413      	add	r3, r2
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <inc_lock+0xe0>
 8005adc:	2300      	movs	r3, #0
 8005ade:	e015      	b.n	8005b0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <inc_lock+0xf8>
 8005ae6:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <inc_lock+0x118>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	4413      	add	r3, r2
 8005aee:	330c      	adds	r3, #12
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	e001      	b.n	8005afc <inc_lock+0xfc>
 8005af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005afc:	4906      	ldr	r1, [pc, #24]	; (8005b18 <inc_lock+0x118>)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	440b      	add	r3, r1
 8005b04:	330c      	adds	r3, #12
 8005b06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	200000b4 	.word	0x200000b4

08005b1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d825      	bhi.n	8005b7c <dec_lock+0x60>
		n = Files[i].ctr;
 8005b30:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <dec_lock+0x74>)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	4413      	add	r3, r2
 8005b38:	330c      	adds	r3, #12
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b3e:	89fb      	ldrh	r3, [r7, #14]
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b44:	d101      	bne.n	8005b4a <dec_lock+0x2e>
 8005b46:	2300      	movs	r3, #0
 8005b48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005b4a:	89fb      	ldrh	r3, [r7, #14]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <dec_lock+0x3a>
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005b56:	4a0e      	ldr	r2, [pc, #56]	; (8005b90 <dec_lock+0x74>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	4413      	add	r3, r2
 8005b5e:	330c      	adds	r3, #12
 8005b60:	89fa      	ldrh	r2, [r7, #14]
 8005b62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005b64:	89fb      	ldrh	r3, [r7, #14]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <dec_lock+0x5a>
 8005b6a:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <dec_lock+0x74>)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	4413      	add	r3, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	737b      	strb	r3, [r7, #13]
 8005b7a:	e001      	b.n	8005b80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005b80:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	200000b4 	.word	0x200000b4

08005b94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e010      	b.n	8005bc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ba2:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <clear_lock+0x44>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	4413      	add	r3, r2
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d105      	bne.n	8005bbe <clear_lock+0x2a>
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <clear_lock+0x44>)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	4413      	add	r3, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d9eb      	bls.n	8005ba2 <clear_lock+0xe>
	}
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	200000b4 	.word	0x200000b4

08005bdc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	78db      	ldrb	r3, [r3, #3]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d034      	beq.n	8005c5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	7858      	ldrb	r0, [r3, #1]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c00:	2301      	movs	r3, #1
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	f7ff fd26 	bl	8005654 <disk_write>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
 8005c12:	e022      	b.n	8005c5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	1ad2      	subs	r2, r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d217      	bcs.n	8005c5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	789b      	ldrb	r3, [r3, #2]
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	e010      	b.n	8005c54 <sync_window+0x78>
					wsect += fs->fsize;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	7858      	ldrb	r0, [r3, #1]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c46:	2301      	movs	r3, #1
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	f7ff fd03 	bl	8005654 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d8eb      	bhi.n	8005c32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d01b      	beq.n	8005cb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ffad 	bl	8005bdc <sync_window>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d113      	bne.n	8005cb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7858      	ldrb	r0, [r3, #1]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c96:	2301      	movs	r3, #1
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	f7ff fcbb 	bl	8005614 <disk_read>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff87 	bl	8005bdc <sync_window>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d159      	bne.n	8005d8c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d149      	bne.n	8005d74 <sync_fs+0xb4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	791b      	ldrb	r3, [r3, #4]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d145      	bne.n	8005d74 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	899b      	ldrh	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	f7ff fda8 	bl	800584a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3338      	adds	r3, #56	; 0x38
 8005cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d02:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff fd37 	bl	800577a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3338      	adds	r3, #56	; 0x38
 8005d10:	4921      	ldr	r1, [pc, #132]	; (8005d98 <sync_fs+0xd8>)
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fd4c 	bl	80057b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3338      	adds	r3, #56	; 0x38
 8005d1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d20:	491e      	ldr	r1, [pc, #120]	; (8005d9c <sync_fs+0xdc>)
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fd44 	bl	80057b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3338      	adds	r3, #56	; 0x38
 8005d2c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7ff fd3a 	bl	80057b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3338      	adds	r3, #56	; 0x38
 8005d40:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f7ff fd30 	bl	80057b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7858      	ldrb	r0, [r3, #1]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f7ff fc73 	bl	8005654 <disk_write>
			fs->fsi_flag = 0;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fc89 	bl	8005694 <disk_ioctl>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <sync_fs+0xcc>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	41615252 	.word	0x41615252
 8005d9c:	61417272 	.word	0x61417272

08005da0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	3b02      	subs	r3, #2
 8005dae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	3b02      	subs	r3, #2
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d301      	bcc.n	8005dc0 <clust2sect+0x20>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e008      	b.n	8005dd2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	895b      	ldrh	r3, [r3, #10]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	fb03 f202 	mul.w	r2, r3, r2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	4413      	add	r3, r2
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d904      	bls.n	8005dfe <get_fat+0x20>
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e0bb      	b.n	8005f7c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	f000 8083 	beq.w	8005f1a <get_fat+0x13c>
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	f300 80a7 	bgt.w	8005f68 <get_fat+0x18a>
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d002      	beq.n	8005e24 <get_fat+0x46>
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d056      	beq.n	8005ed0 <get_fat+0xf2>
 8005e22:	e0a1      	b.n	8005f68 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	899b      	ldrh	r3, [r3, #12]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e42:	4413      	add	r3, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	6938      	ldr	r0, [r7, #16]
 8005e48:	f7ff ff0c 	bl	8005c64 <move_window>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 808d 	bne.w	8005f6e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	60fa      	str	r2, [r7, #12]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	8992      	ldrh	r2, [r2, #12]
 8005e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e62:	fb01 f202 	mul.w	r2, r1, r2
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	899b      	ldrh	r3, [r3, #12]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e82:	4413      	add	r3, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	6938      	ldr	r0, [r7, #16]
 8005e88:	f7ff feec 	bl	8005c64 <move_window>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d16f      	bne.n	8005f72 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	899b      	ldrh	r3, [r3, #12]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e9e:	fb01 f202 	mul.w	r2, r1, r2
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <get_fat+0xe8>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	e002      	b.n	8005ecc <get_fat+0xee>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ecc:	617b      	str	r3, [r7, #20]
			break;
 8005ece:	e055      	b.n	8005f7c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	899b      	ldrh	r3, [r3, #12]
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	4619      	mov	r1, r3
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6938      	ldr	r0, [r7, #16]
 8005eea:	f7ff febb 	bl	8005c64 <move_window>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d140      	bne.n	8005f76 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	8992      	ldrh	r2, [r2, #12]
 8005f02:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f06:	fb00 f202 	mul.w	r2, r0, r2
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fbf8 	bl	8005704 <ld_word>
 8005f14:	4603      	mov	r3, r0
 8005f16:	617b      	str	r3, [r7, #20]
			break;
 8005f18:	e030      	b.n	8005f7c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	899b      	ldrh	r3, [r3, #12]
 8005f22:	089b      	lsrs	r3, r3, #2
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f2e:	4413      	add	r3, r2
 8005f30:	4619      	mov	r1, r3
 8005f32:	6938      	ldr	r0, [r7, #16]
 8005f34:	f7ff fe96 	bl	8005c64 <move_window>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d11d      	bne.n	8005f7a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	8992      	ldrh	r2, [r2, #12]
 8005f4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f50:	fb00 f202 	mul.w	r2, r0, r2
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	440b      	add	r3, r1
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fbeb 	bl	8005734 <ld_dword>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f64:	617b      	str	r3, [r7, #20]
			break;
 8005f66:	e009      	b.n	8005f7c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e006      	b.n	8005f7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f6e:	bf00      	nop
 8005f70:	e004      	b.n	8005f7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f7a:	bf00      	nop
		}
	}

	return val;
 8005f7c:	697b      	ldr	r3, [r7, #20]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005f86:	b590      	push	{r4, r7, lr}
 8005f88:	b089      	sub	sp, #36	; 0x24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005f92:	2302      	movs	r3, #2
 8005f94:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	f240 8102 	bls.w	80061a2 <put_fat+0x21c>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	f080 80fc 	bcs.w	80061a2 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	f000 80b6 	beq.w	8006120 <put_fat+0x19a>
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	f300 80fd 	bgt.w	80061b4 <put_fat+0x22e>
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d003      	beq.n	8005fc6 <put_fat+0x40>
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	f000 8083 	beq.w	80060ca <put_fat+0x144>
 8005fc4:	e0f6      	b.n	80061b4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	899b      	ldrh	r3, [r3, #12]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff fe3b 	bl	8005c64 <move_window>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ff2:	7ffb      	ldrb	r3, [r7, #31]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 80d6 	bne.w	80061a6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	61ba      	str	r2, [r7, #24]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	8992      	ldrh	r2, [r2, #12]
 800600a:	fbb3 f0f2 	udiv	r0, r3, r2
 800600e:	fb00 f202 	mul.w	r2, r0, r2
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	440b      	add	r3, r1
 8006016:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <put_fat+0xb8>
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	b25b      	sxtb	r3, r3
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	b25a      	sxtb	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	b25b      	sxtb	r3, r3
 8006036:	4313      	orrs	r3, r2
 8006038:	b25b      	sxtb	r3, r3
 800603a:	b2db      	uxtb	r3, r3
 800603c:	e001      	b.n	8006042 <put_fat+0xbc>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	899b      	ldrh	r3, [r3, #12]
 8006054:	4619      	mov	r1, r3
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	fbb3 f3f1 	udiv	r3, r3, r1
 800605c:	4413      	add	r3, r2
 800605e:	4619      	mov	r1, r3
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fdff 	bl	8005c64 <move_window>
 8006066:	4603      	mov	r3, r0
 8006068:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800606a:	7ffb      	ldrb	r3, [r7, #31]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 809c 	bne.w	80061aa <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	899b      	ldrh	r3, [r3, #12]
 800607c:	461a      	mov	r2, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	fbb3 f0f2 	udiv	r0, r3, r2
 8006084:	fb00 f202 	mul.w	r2, r0, r2
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	440b      	add	r3, r1
 800608c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <put_fat+0x11a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e00e      	b.n	80060be <put_fat+0x138>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	b25b      	sxtb	r3, r3
 80060a6:	f023 030f 	bic.w	r3, r3, #15
 80060aa:	b25a      	sxtb	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	b25b      	sxtb	r3, r3
 80060b8:	4313      	orrs	r3, r2
 80060ba:	b25b      	sxtb	r3, r3
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	70da      	strb	r2, [r3, #3]
			break;
 80060c8:	e074      	b.n	80061b4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	899b      	ldrh	r3, [r3, #12]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	fbb3 f3f1 	udiv	r3, r3, r1
 80060de:	4413      	add	r3, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff fdbe 	bl	8005c64 <move_window>
 80060e8:	4603      	mov	r3, r0
 80060ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060ec:	7ffb      	ldrb	r3, [r7, #31]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d15d      	bne.n	80061ae <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	8992      	ldrh	r2, [r2, #12]
 8006100:	fbb3 f0f2 	udiv	r0, r3, r2
 8006104:	fb00 f202 	mul.w	r2, r0, r2
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	440b      	add	r3, r1
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	b292      	uxth	r2, r2
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fb31 	bl	800577a <st_word>
			fs->wflag = 1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	70da      	strb	r2, [r3, #3]
			break;
 800611e:	e049      	b.n	80061b4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	899b      	ldrh	r3, [r3, #12]
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	b29b      	uxth	r3, r3
 800612c:	4619      	mov	r1, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	fbb3 f3f1 	udiv	r3, r3, r1
 8006134:	4413      	add	r3, r2
 8006136:	4619      	mov	r1, r3
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fd93 	bl	8005c64 <move_window>
 800613e:	4603      	mov	r3, r0
 8006140:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d134      	bne.n	80061b2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	8992      	ldrh	r2, [r2, #12]
 800615c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006160:	fb00 f202 	mul.w	r2, r0, r2
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	440b      	add	r3, r1
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fae3 	bl	8005734 <ld_dword>
 800616e:	4603      	mov	r3, r0
 8006170:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006174:	4323      	orrs	r3, r4
 8006176:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	8992      	ldrh	r2, [r2, #12]
 8006186:	fbb3 f0f2 	udiv	r0, r3, r2
 800618a:	fb00 f202 	mul.w	r2, r0, r2
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	440b      	add	r3, r1
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fb0b 	bl	80057b0 <st_dword>
			fs->wflag = 1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	70da      	strb	r2, [r3, #3]
			break;
 80061a0:	e008      	b.n	80061b4 <put_fat+0x22e>
		}
	}
 80061a2:	bf00      	nop
 80061a4:	e006      	b.n	80061b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061a6:	bf00      	nop
 80061a8:	e004      	b.n	80061b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061aa:	bf00      	nop
 80061ac:	e002      	b.n	80061b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80061b2:	bf00      	nop
	return res;
 80061b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3724      	adds	r7, #36	; 0x24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd90      	pop	{r4, r7, pc}

080061be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b088      	sub	sp, #32
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d904      	bls.n	80061e4 <remove_chain+0x26>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d301      	bcc.n	80061e8 <remove_chain+0x2a>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e04b      	b.n	8006280 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80061ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	69b8      	ldr	r0, [r7, #24]
 80061f6:	f7ff fec6 	bl	8005f86 <put_fat>
 80061fa:	4603      	mov	r3, r0
 80061fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80061fe:	7ffb      	ldrb	r3, [r7, #31]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <remove_chain+0x4a>
 8006204:	7ffb      	ldrb	r3, [r7, #31]
 8006206:	e03b      	b.n	8006280 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f7ff fde7 	bl	8005dde <get_fat>
 8006210:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d031      	beq.n	800627c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <remove_chain+0x64>
 800621e:	2302      	movs	r3, #2
 8006220:	e02e      	b.n	8006280 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006228:	d101      	bne.n	800622e <remove_chain+0x70>
 800622a:	2301      	movs	r3, #1
 800622c:	e028      	b.n	8006280 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800622e:	2200      	movs	r2, #0
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	69b8      	ldr	r0, [r7, #24]
 8006234:	f7ff fea7 	bl	8005f86 <put_fat>
 8006238:	4603      	mov	r3, r0
 800623a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800623c:	7ffb      	ldrb	r3, [r7, #31]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <remove_chain+0x88>
 8006242:	7ffb      	ldrb	r3, [r7, #31]
 8006244:	e01c      	b.n	8006280 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	3b02      	subs	r3, #2
 8006250:	429a      	cmp	r2, r3
 8006252:	d20b      	bcs.n	800626c <remove_chain+0xae>
			fs->free_clst++;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	b2da      	uxtb	r2, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	429a      	cmp	r2, r3
 8006278:	d3c6      	bcc.n	8006208 <remove_chain+0x4a>
 800627a:	e000      	b.n	800627e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800627c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10d      	bne.n	80062ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <create_chain+0x2c>
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d31b      	bcc.n	80062ec <create_chain+0x64>
 80062b4:	2301      	movs	r3, #1
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e018      	b.n	80062ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fd8e 	bl	8005dde <get_fat>
 80062c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d801      	bhi.n	80062ce <create_chain+0x46>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e070      	b.n	80063b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d4:	d101      	bne.n	80062da <create_chain+0x52>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	e06a      	b.n	80063b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d201      	bcs.n	80062e8 <create_chain+0x60>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	e063      	b.n	80063b0 <create_chain+0x128>
		scl = clst;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d307      	bcc.n	8006310 <create_chain+0x88>
				ncl = 2;
 8006300:	2302      	movs	r3, #2
 8006302:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	d901      	bls.n	8006310 <create_chain+0x88>
 800630c:	2300      	movs	r3, #0
 800630e:	e04f      	b.n	80063b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006310:	69f9      	ldr	r1, [r7, #28]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fd63 	bl	8005dde <get_fat>
 8006318:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00e      	beq.n	800633e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d003      	beq.n	800632e <create_chain+0xa6>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632c:	d101      	bne.n	8006332 <create_chain+0xaa>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	e03e      	b.n	80063b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	d1da      	bne.n	80062f0 <create_chain+0x68>
 800633a:	2300      	movs	r3, #0
 800633c:	e038      	b.n	80063b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800633e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006344:	69f9      	ldr	r1, [r7, #28]
 8006346:	6938      	ldr	r0, [r7, #16]
 8006348:	f7ff fe1d 	bl	8005f86 <put_fat>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d109      	bne.n	800636a <create_chain+0xe2>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d006      	beq.n	800636a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6938      	ldr	r0, [r7, #16]
 8006362:	f7ff fe10 	bl	8005f86 <put_fat>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d116      	bne.n	800639e <create_chain+0x116>
		fs->last_clst = ncl;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	3b02      	subs	r3, #2
 8006380:	429a      	cmp	r2, r3
 8006382:	d804      	bhi.n	800638e <create_chain+0x106>
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	1e5a      	subs	r2, r3, #1
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	791b      	ldrb	r3, [r3, #4]
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	711a      	strb	r2, [r3, #4]
 800639c:	e007      	b.n	80063ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d102      	bne.n	80063aa <create_chain+0x122>
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a8:	e000      	b.n	80063ac <create_chain+0x124>
 80063aa:	2301      	movs	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80063ae:	69fb      	ldr	r3, [r7, #28]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	3304      	adds	r3, #4
 80063ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	899b      	ldrh	r3, [r3, #12]
 80063d4:	461a      	mov	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	8952      	ldrh	r2, [r2, #10]
 80063e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1d1a      	adds	r2, r3, #4
 80063ea:	613a      	str	r2, [r7, #16]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <clmt_clust+0x42>
 80063f6:	2300      	movs	r3, #0
 80063f8:	e010      	b.n	800641c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d307      	bcc.n	8006412 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3304      	adds	r3, #4
 800640e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006410:	e7e9      	b.n	80063e6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006412:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	4413      	add	r3, r2
}
 800641c:	4618      	mov	r0, r3
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800643e:	d204      	bcs.n	800644a <dir_sdi+0x22>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <dir_sdi+0x26>
		return FR_INT_ERR;
 800644a:	2302      	movs	r3, #2
 800644c:	e071      	b.n	8006532 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <dir_sdi+0x46>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d902      	bls.n	800646e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10c      	bne.n	800648e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	8912      	ldrh	r2, [r2, #8]
 800647c:	4293      	cmp	r3, r2
 800647e:	d301      	bcc.n	8006484 <dir_sdi+0x5c>
 8006480:	2302      	movs	r3, #2
 8006482:	e056      	b.n	8006532 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	61da      	str	r2, [r3, #28]
 800648c:	e02d      	b.n	80064ea <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	895b      	ldrh	r3, [r3, #10]
 8006492:	461a      	mov	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	899b      	ldrh	r3, [r3, #12]
 8006498:	fb02 f303 	mul.w	r3, r2, r3
 800649c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800649e:	e019      	b.n	80064d4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fc9a 	bl	8005dde <get_fat>
 80064aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064b2:	d101      	bne.n	80064b8 <dir_sdi+0x90>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e03c      	b.n	8006532 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d904      	bls.n	80064c8 <dir_sdi+0xa0>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d301      	bcc.n	80064cc <dir_sdi+0xa4>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e032      	b.n	8006532 <dir_sdi+0x10a>
			ofs -= csz;
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d2e1      	bcs.n	80064a0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80064dc:	6979      	ldr	r1, [r7, #20]
 80064de:	6938      	ldr	r0, [r7, #16]
 80064e0:	f7ff fc5e 	bl	8005da0 <clust2sect>
 80064e4:	4602      	mov	r2, r0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <dir_sdi+0xd4>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e01a      	b.n	8006532 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	899b      	ldrh	r3, [r3, #12]
 8006504:	4619      	mov	r1, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	fbb3 f3f1 	udiv	r3, r3, r1
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	899b      	ldrh	r3, [r3, #12]
 800651c:	461a      	mov	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	fbb3 f0f2 	udiv	r0, r3, r2
 8006524:	fb00 f202 	mul.w	r2, r0, r2
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	18ca      	adds	r2, r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	3320      	adds	r3, #32
 8006550:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <dir_next+0x28>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006560:	d301      	bcc.n	8006566 <dir_next+0x2c>
 8006562:	2304      	movs	r3, #4
 8006564:	e0bb      	b.n	80066de <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	899b      	ldrh	r3, [r3, #12]
 800656a:	461a      	mov	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006572:	fb01 f202 	mul.w	r2, r1, r2
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 809d 	bne.w	80066b8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	8912      	ldrh	r2, [r2, #8]
 8006598:	4293      	cmp	r3, r2
 800659a:	f0c0 808d 	bcc.w	80066b8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	61da      	str	r2, [r3, #28]
 80065a4:	2304      	movs	r3, #4
 80065a6:	e09a      	b.n	80066de <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	899b      	ldrh	r3, [r3, #12]
 80065ac:	461a      	mov	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	8952      	ldrh	r2, [r2, #10]
 80065b8:	3a01      	subs	r2, #1
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d17b      	bne.n	80066b8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7ff fc08 	bl	8005dde <get_fat>
 80065ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d801      	bhi.n	80065da <dir_next+0xa0>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e081      	b.n	80066de <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e0:	d101      	bne.n	80065e6 <dir_next+0xac>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e07b      	b.n	80066de <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d359      	bcc.n	80066a4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	2304      	movs	r3, #4
 80065fe:	e06e      	b.n	80066de <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7ff fe3d 	bl	8006288 <create_chain>
 800660e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <dir_next+0xe0>
 8006616:	2307      	movs	r3, #7
 8006618:	e061      	b.n	80066de <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <dir_next+0xea>
 8006620:	2302      	movs	r3, #2
 8006622:	e05c      	b.n	80066de <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800662a:	d101      	bne.n	8006630 <dir_next+0xf6>
 800662c:	2301      	movs	r3, #1
 800662e:	e056      	b.n	80066de <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7ff fad3 	bl	8005bdc <sync_window>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <dir_next+0x106>
 800663c:	2301      	movs	r3, #1
 800663e:	e04e      	b.n	80066de <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	899b      	ldrh	r3, [r3, #12]
 800664a:	461a      	mov	r2, r3
 800664c:	2100      	movs	r1, #0
 800664e:	f7ff f8fc 	bl	800584a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fba1 	bl	8005da0 <clust2sect>
 800665e:	4602      	mov	r2, r0
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	635a      	str	r2, [r3, #52]	; 0x34
 8006664:	e012      	b.n	800668c <dir_next+0x152>
						fs->wflag = 1;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff fab5 	bl	8005bdc <sync_window>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <dir_next+0x142>
 8006678:	2301      	movs	r3, #1
 800667a:	e030      	b.n	80066de <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	3301      	adds	r3, #1
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	635a      	str	r2, [r3, #52]	; 0x34
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	895b      	ldrh	r3, [r3, #10]
 8006690:	461a      	mov	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4293      	cmp	r3, r2
 8006696:	d3e6      	bcc.n	8006666 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80066aa:	6979      	ldr	r1, [r7, #20]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff fb77 	bl	8005da0 <clust2sect>
 80066b2:	4602      	mov	r2, r0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	899b      	ldrh	r3, [r3, #12]
 80066c8:	461a      	mov	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80066d0:	fb00 f202 	mul.w	r2, r0, r2
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	18ca      	adds	r2, r1, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b086      	sub	sp, #24
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80066f6:	2100      	movs	r1, #0
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fe95 	bl	8006428 <dir_sdi>
 80066fe:	4603      	mov	r3, r0
 8006700:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d12b      	bne.n	8006760 <dir_alloc+0x7a>
		n = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	4619      	mov	r1, r3
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff faa6 	bl	8005c64 <move_window>
 8006718:	4603      	mov	r3, r0
 800671a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11d      	bne.n	800675e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2be5      	cmp	r3, #229	; 0xe5
 800672a:	d004      	beq.n	8006736 <dir_alloc+0x50>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d107      	bne.n	8006746 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	3301      	adds	r3, #1
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d102      	bne.n	800674a <dir_alloc+0x64>
 8006744:	e00c      	b.n	8006760 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800674a:	2101      	movs	r1, #1
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fef4 	bl	800653a <dir_next>
 8006752:	4603      	mov	r3, r0
 8006754:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0d7      	beq.n	800670c <dir_alloc+0x26>
 800675c:	e000      	b.n	8006760 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800675e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	2b04      	cmp	r3, #4
 8006764:	d101      	bne.n	800676a <dir_alloc+0x84>
 8006766:	2307      	movs	r3, #7
 8006768:	75fb      	strb	r3, [r7, #23]
	return res;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	331a      	adds	r3, #26
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe ffbe 	bl	8005704 <ld_word>
 8006788:	4603      	mov	r3, r0
 800678a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d109      	bne.n	80067a8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe ffb3 	bl	8005704 <ld_word>
 800679e:	4603      	mov	r3, r0
 80067a0:	041b      	lsls	r3, r3, #16
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	331a      	adds	r3, #26
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	b292      	uxth	r2, r2
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe ffd6 	bl	800577a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d109      	bne.n	80067ea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f103 0214 	add.w	r2, r3, #20
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	0c1b      	lsrs	r3, r3, #16
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f7fe ffc8 	bl	800577a <st_word>
	}
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	331a      	adds	r3, #26
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe ff7e 	bl	8005704 <ld_word>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <cmp_lfn+0x1e>
 800680e:	2300      	movs	r3, #0
 8006810:	e059      	b.n	80068c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800681a:	1e5a      	subs	r2, r3, #1
 800681c:	4613      	mov	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006828:	2301      	movs	r3, #1
 800682a:	81fb      	strh	r3, [r7, #14]
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	e033      	b.n	800689a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006832:	4a27      	ldr	r2, [pc, #156]	; (80068d0 <cmp_lfn+0xdc>)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	4413      	add	r3, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe ff5f 	bl	8005704 <ld_word>
 8006846:	4603      	mov	r3, r0
 8006848:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800684a:	89fb      	ldrh	r3, [r7, #14]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01a      	beq.n	8006886 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2bfe      	cmp	r3, #254	; 0xfe
 8006854:	d812      	bhi.n	800687c <cmp_lfn+0x88>
 8006856:	89bb      	ldrh	r3, [r7, #12]
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fe11 	bl	8005480 <ff_wtoupper>
 800685e:	4603      	mov	r3, r0
 8006860:	461c      	mov	r4, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	617a      	str	r2, [r7, #20]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fe05 	bl	8005480 <ff_wtoupper>
 8006876:	4603      	mov	r3, r0
 8006878:	429c      	cmp	r4, r3
 800687a:	d001      	beq.n	8006880 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800687c:	2300      	movs	r3, #0
 800687e:	e022      	b.n	80068c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006880:	89bb      	ldrh	r3, [r7, #12]
 8006882:	81fb      	strh	r3, [r7, #14]
 8006884:	e006      	b.n	8006894 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006886:	89bb      	ldrh	r3, [r7, #12]
 8006888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800688c:	4293      	cmp	r3, r2
 800688e:	d001      	beq.n	8006894 <cmp_lfn+0xa0>
 8006890:	2300      	movs	r3, #0
 8006892:	e018      	b.n	80068c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3301      	adds	r3, #1
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b0c      	cmp	r3, #12
 800689e:	d9c8      	bls.n	8006832 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <cmp_lfn+0xd0>
 80068ac:	89fb      	ldrh	r3, [r7, #14]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d008      	beq.n	80068c4 <cmp_lfn+0xd0>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <cmp_lfn+0xd0>
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80068c4:	2301      	movs	r3, #1
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd90      	pop	{r4, r7, pc}
 80068ce:	bf00      	nop
 80068d0:	08015ccc 	.word	0x08015ccc

080068d4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	331a      	adds	r3, #26
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe ff0e 	bl	8005704 <ld_word>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <pick_lfn+0x1e>
 80068ee:	2300      	movs	r3, #0
 80068f0:	e04d      	b.n	800698e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fa:	1e5a      	subs	r2, r3, #1
 80068fc:	4613      	mov	r3, r2
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006908:	2301      	movs	r3, #1
 800690a:	81fb      	strh	r3, [r7, #14]
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	e028      	b.n	8006964 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006912:	4a21      	ldr	r2, [pc, #132]	; (8006998 <pick_lfn+0xc4>)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	4413      	add	r3, r2
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe feef 	bl	8005704 <ld_word>
 8006926:	4603      	mov	r3, r0
 8006928:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800692a:	89fb      	ldrh	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00f      	beq.n	8006950 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2bfe      	cmp	r3, #254	; 0xfe
 8006934:	d901      	bls.n	800693a <pick_lfn+0x66>
 8006936:	2300      	movs	r3, #0
 8006938:	e029      	b.n	800698e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800693a:	89bb      	ldrh	r3, [r7, #12]
 800693c:	81fb      	strh	r3, [r7, #14]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	617a      	str	r2, [r7, #20]
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	89fa      	ldrh	r2, [r7, #14]
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e006      	b.n	800695e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006950:	89bb      	ldrh	r3, [r7, #12]
 8006952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006956:	4293      	cmp	r3, r2
 8006958:	d001      	beq.n	800695e <pick_lfn+0x8a>
 800695a:	2300      	movs	r3, #0
 800695c:	e017      	b.n	800698e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0c      	cmp	r3, #12
 8006968:	d9d3      	bls.n	8006912 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2bfe      	cmp	r3, #254	; 0xfe
 800697a:	d901      	bls.n	8006980 <pick_lfn+0xac>
 800697c:	2300      	movs	r3, #0
 800697e:	e006      	b.n	800698e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4413      	add	r3, r2
 8006988:	2200      	movs	r2, #0
 800698a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	08015ccc 	.word	0x08015ccc

0800699c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	460b      	mov	r3, r1
 80069ac:	71fb      	strb	r3, [r7, #7]
 80069ae:	4613      	mov	r3, r2
 80069b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	330d      	adds	r3, #13
 80069b6:	79ba      	ldrb	r2, [r7, #6]
 80069b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	330b      	adds	r3, #11
 80069be:	220f      	movs	r2, #15
 80069c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	330c      	adds	r3, #12
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	331a      	adds	r3, #26
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe fed2 	bl	800577a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	1e5a      	subs	r2, r3, #1
 80069da:	4613      	mov	r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	82fb      	strh	r3, [r7, #22]
 80069ea:	2300      	movs	r3, #0
 80069ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <put_lfn+0x6c>
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	61fa      	str	r2, [r7, #28]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a08:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <put_lfn+0xcc>)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	8afa      	ldrh	r2, [r7, #22]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fead 	bl	800577a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a20:	8afb      	ldrh	r3, [r7, #22]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <put_lfn+0x90>
 8006a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a2a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	d9da      	bls.n	80069ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a38:	8afb      	ldrh	r3, [r7, #22]
 8006a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d006      	beq.n	8006a50 <put_lfn+0xb4>
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d103      	bne.n	8006a58 <put_lfn+0xbc>
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a56:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	79fa      	ldrb	r2, [r7, #7]
 8006a5c:	701a      	strb	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08015ccc 	.word	0x08015ccc

08006a6c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	; 0x30
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006a7a:	220b      	movs	r2, #11
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7fe fec2 	bl	8005808 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d92b      	bls.n	8006ae2 <gen_numname+0x76>
		sr = seq;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006a8e:	e022      	b.n	8006ad6 <gen_numname+0x6a>
			wc = *lfn++;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a9e:	e017      	b.n	8006ad0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005a      	lsls	r2, r3, #1
 8006aa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006aae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <gen_numname+0x5e>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006ac4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006ac8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	3301      	adds	r3, #1
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	2b0f      	cmp	r3, #15
 8006ad4:	d9e4      	bls.n	8006aa0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1d8      	bne.n	8006a90 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006ae2:	2307      	movs	r3, #7
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	3330      	adds	r3, #48	; 0x30
 8006af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006afa:	2b39      	cmp	r3, #57	; 0x39
 8006afc:	d904      	bls.n	8006b08 <gen_numname+0x9c>
 8006afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b02:	3307      	adds	r3, #7
 8006b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	1e5a      	subs	r2, r3, #1
 8006b0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b0e:	3330      	adds	r3, #48	; 0x30
 8006b10:	443b      	add	r3, r7
 8006b12:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b16:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1df      	bne.n	8006ae6 <gen_numname+0x7a>
	ns[i] = '~';
 8006b26:	f107 0214 	add.w	r2, r7, #20
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	4413      	add	r3, r2
 8006b2e:	227e      	movs	r2, #126	; 0x7e
 8006b30:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
 8006b36:	e002      	b.n	8006b3e <gen_numname+0xd2>
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d205      	bcs.n	8006b52 <gen_numname+0xe6>
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	4413      	add	r3, r2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d1f2      	bne.n	8006b38 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	2b07      	cmp	r3, #7
 8006b56:	d807      	bhi.n	8006b68 <gen_numname+0xfc>
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b5e:	3330      	adds	r3, #48	; 0x30
 8006b60:	443b      	add	r3, r7
 8006b62:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006b66:	e000      	b.n	8006b6a <gen_numname+0xfe>
 8006b68:	2120      	movs	r1, #32
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	460a      	mov	r2, r1
 8006b76:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	2b07      	cmp	r3, #7
 8006b7c:	d9e9      	bls.n	8006b52 <gen_numname+0xe6>
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	3730      	adds	r7, #48	; 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006b94:	230b      	movs	r3, #11
 8006b96:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	0852      	lsrs	r2, r2, #1
 8006b9e:	01db      	lsls	r3, r3, #7
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	6079      	str	r1, [r7, #4]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	4413      	add	r3, r2
 8006bae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ed      	bne.n	8006b98 <sum_sfn+0x10>
	return sum;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006bde:	23ff      	movs	r3, #255	; 0xff
 8006be0:	757b      	strb	r3, [r7, #21]
 8006be2:	23ff      	movs	r3, #255	; 0xff
 8006be4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006be6:	e081      	b.n	8006cec <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f7ff f838 	bl	8005c64 <move_window>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d17c      	bne.n	8006cf8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006c06:	7dbb      	ldrb	r3, [r7, #22]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	75fb      	strb	r3, [r7, #23]
 8006c10:	e077      	b.n	8006d02 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	330b      	adds	r3, #11
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c1e:	73fb      	strb	r3, [r7, #15]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7bfa      	ldrb	r2, [r7, #15]
 8006c24:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006c26:	7dbb      	ldrb	r3, [r7, #22]
 8006c28:	2be5      	cmp	r3, #229	; 0xe5
 8006c2a:	d00e      	beq.n	8006c4a <dir_read+0x80>
 8006c2c:	7dbb      	ldrb	r3, [r7, #22]
 8006c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c30:	d00b      	beq.n	8006c4a <dir_read+0x80>
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	f023 0320 	bic.w	r3, r3, #32
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2301      	moveq	r3, #1
 8006c3e:	2300      	movne	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d002      	beq.n	8006c50 <dir_read+0x86>
				ord = 0xFF;
 8006c4a:	23ff      	movs	r3, #255	; 0xff
 8006c4c:	757b      	strb	r3, [r7, #21]
 8006c4e:	e044      	b.n	8006cda <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	d12f      	bne.n	8006cb6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006c56:	7dbb      	ldrb	r3, [r7, #22]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00d      	beq.n	8006c7c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	7b5b      	ldrb	r3, [r3, #13]
 8006c66:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006c68:	7dbb      	ldrb	r3, [r7, #22]
 8006c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6e:	75bb      	strb	r3, [r7, #22]
 8006c70:	7dbb      	ldrb	r3, [r7, #22]
 8006c72:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695a      	ldr	r2, [r3, #20]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006c7c:	7dba      	ldrb	r2, [r7, #22]
 8006c7e:	7d7b      	ldrb	r3, [r7, #21]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d115      	bne.n	8006cb0 <dir_read+0xe6>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	330d      	adds	r3, #13
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	7d3a      	ldrb	r2, [r7, #20]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d10e      	bne.n	8006cb0 <dir_read+0xe6>
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7ff fe19 	bl	80068d4 <pick_lfn>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <dir_read+0xe6>
 8006ca8:	7d7b      	ldrb	r3, [r7, #21]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	e000      	b.n	8006cb2 <dir_read+0xe8>
 8006cb0:	23ff      	movs	r3, #255	; 0xff
 8006cb2:	757b      	strb	r3, [r7, #21]
 8006cb4:	e011      	b.n	8006cda <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006cb6:	7d7b      	ldrb	r3, [r7, #21]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <dir_read+0x106>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff ff61 	bl	8006b88 <sum_sfn>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	461a      	mov	r2, r3
 8006cca:	7d3b      	ldrb	r3, [r7, #20]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d015      	beq.n	8006cfc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8006cd8:	e010      	b.n	8006cfc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff fc2c 	bl	800653a <dir_next>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <dir_read+0x136>
	while (dp->sect) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f af79 	bne.w	8006be8 <dir_read+0x1e>
 8006cf6:	e004      	b.n	8006d02 <dir_read+0x138>
		if (res != FR_OK) break;
 8006cf8:	bf00      	nop
 8006cfa:	e002      	b.n	8006d02 <dir_read+0x138>
					break;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <dir_read+0x138>
		if (res != FR_OK) break;
 8006d00:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <dir_read+0x144>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	61da      	str	r2, [r3, #28]
	return res;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d26:	2100      	movs	r1, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fb7d 	bl	8006428 <dir_sdi>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <dir_find+0x24>
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	e0a9      	b.n	8006e90 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d3c:	23ff      	movs	r3, #255	; 0xff
 8006d3e:	753b      	strb	r3, [r7, #20]
 8006d40:	7d3b      	ldrb	r3, [r7, #20]
 8006d42:	757b      	strb	r3, [r7, #21]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	4619      	mov	r1, r3
 8006d52:	6938      	ldr	r0, [r7, #16]
 8006d54:	f7fe ff86 	bl	8005c64 <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 8090 	bne.w	8006e84 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d6c:	7dbb      	ldrb	r3, [r7, #22]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <dir_find+0x60>
 8006d72:	2304      	movs	r3, #4
 8006d74:	75fb      	strb	r3, [r7, #23]
 8006d76:	e08a      	b.n	8006e8e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	330b      	adds	r3, #11
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	73fb      	strb	r3, [r7, #15]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006d8c:	7dbb      	ldrb	r3, [r7, #22]
 8006d8e:	2be5      	cmp	r3, #229	; 0xe5
 8006d90:	d007      	beq.n	8006da2 <dir_find+0x8a>
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d009      	beq.n	8006db0 <dir_find+0x98>
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	d006      	beq.n	8006db0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006da2:	23ff      	movs	r3, #255	; 0xff
 8006da4:	757b      	strb	r3, [r7, #21]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30
 8006dae:	e05e      	b.n	8006e6e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b0f      	cmp	r3, #15
 8006db4:	d136      	bne.n	8006e24 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d154      	bne.n	8006e6e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006dc4:	7dbb      	ldrb	r3, [r7, #22]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00d      	beq.n	8006dea <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	7b5b      	ldrb	r3, [r3, #13]
 8006dd4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006dd6:	7dbb      	ldrb	r3, [r7, #22]
 8006dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ddc:	75bb      	strb	r3, [r7, #22]
 8006dde:	7dbb      	ldrb	r3, [r7, #22]
 8006de0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006dea:	7dba      	ldrb	r2, [r7, #22]
 8006dec:	7d7b      	ldrb	r3, [r7, #21]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d115      	bne.n	8006e1e <dir_find+0x106>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	330d      	adds	r3, #13
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	7d3a      	ldrb	r2, [r7, #20]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d10e      	bne.n	8006e1e <dir_find+0x106>
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	f7ff fcf2 	bl	80067f4 <cmp_lfn>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <dir_find+0x106>
 8006e16:	7d7b      	ldrb	r3, [r7, #21]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	e000      	b.n	8006e20 <dir_find+0x108>
 8006e1e:	23ff      	movs	r3, #255	; 0xff
 8006e20:	757b      	strb	r3, [r7, #21]
 8006e22:	e024      	b.n	8006e6e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e24:	7d7b      	ldrb	r3, [r7, #21]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <dir_find+0x126>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff feaa 	bl	8006b88 <sum_sfn>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	7d3b      	ldrb	r3, [r7, #20]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d024      	beq.n	8006e88 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <dir_find+0x14a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a18      	ldr	r0, [r3, #32]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3324      	adds	r3, #36	; 0x24
 8006e54:	220b      	movs	r2, #11
 8006e56:	4619      	mov	r1, r3
 8006e58:	f7fe fd12 	bl	8005880 <mem_cmp>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d014      	beq.n	8006e8c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e62:	23ff      	movs	r3, #255	; 0xff
 8006e64:	757b      	strb	r3, [r7, #21]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff fb62 	bl	800653a <dir_next>
 8006e76:	4603      	mov	r3, r0
 8006e78:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f43f af65 	beq.w	8006d4c <dir_find+0x34>
 8006e82:	e004      	b.n	8006e8e <dir_find+0x176>
		if (res != FR_OK) break;
 8006e84:	bf00      	nop
 8006e86:	e002      	b.n	8006e8e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e8c:	bf00      	nop

	return res;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006eac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <dir_register+0x20>
 8006eb4:	2306      	movs	r3, #6
 8006eb6:	e0e0      	b.n	800707a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006eb8:	2300      	movs	r3, #0
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	e002      	b.n	8006ec4 <dir_register+0x2c>
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f4      	bne.n	8006ebe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	220c      	movs	r2, #12
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe fc91 	bl	8005808 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d032      	beq.n	8006f56 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2240      	movs	r2, #64	; 0x40
 8006ef4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006ef8:	2301      	movs	r3, #1
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006efc:	e016      	b.n	8006f2c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	f107 010c 	add.w	r1, r7, #12
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	f7ff fdad 	bl	8006a6c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff ff00 	bl	8006d18 <dir_find>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	3301      	adds	r3, #1
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	2b63      	cmp	r3, #99	; 0x63
 8006f30:	d9e5      	bls.n	8006efe <dir_register+0x66>
 8006f32:	e000      	b.n	8006f36 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006f34:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	2b64      	cmp	r3, #100	; 0x64
 8006f3a:	d101      	bne.n	8006f40 <dir_register+0xa8>
 8006f3c:	2307      	movs	r3, #7
 8006f3e:	e09c      	b.n	800707a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d002      	beq.n	8006f4e <dir_register+0xb6>
 8006f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f4c:	e095      	b.n	800707a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006f4e:	7dfa      	ldrb	r2, [r7, #23]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <dir_register+0xd8>
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	330c      	adds	r3, #12
 8006f64:	4a47      	ldr	r2, [pc, #284]	; (8007084 <dir_register+0x1ec>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	089b      	lsrs	r3, r3, #2
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	e000      	b.n	8006f72 <dir_register+0xda>
 8006f70:	2301      	movs	r3, #1
 8006f72:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006f74:	6a39      	ldr	r1, [r7, #32]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fbb5 	bl	80066e6 <dir_alloc>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d148      	bne.n	800701c <dir_register+0x184>
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	623b      	str	r3, [r7, #32]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d042      	beq.n	800701c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	015b      	lsls	r3, r3, #5
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fa40 	bl	8006428 <dir_sdi>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d132      	bne.n	800701c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3324      	adds	r3, #36	; 0x24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fde4 	bl	8006b88 <sum_sfn>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	69f8      	ldr	r0, [r7, #28]
 8006fcc:	f7fe fe4a 	bl	8005c64 <move_window>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d11d      	bne.n	800701a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	6918      	ldr	r0, [r3, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a19      	ldr	r1, [r3, #32]
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	7efb      	ldrb	r3, [r7, #27]
 8006fec:	f7ff fcd6 	bl	800699c <put_lfn>
				fs->wflag = 1;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff fa9e 	bl	800653a <dir_next>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007008:	2b00      	cmp	r3, #0
 800700a:	d107      	bne.n	800701c <dir_register+0x184>
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	3b01      	subs	r3, #1
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1d5      	bne.n	8006fc4 <dir_register+0x12c>
 8007018:	e000      	b.n	800701c <dir_register+0x184>
				if (res != FR_OK) break;
 800701a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800701c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007020:	2b00      	cmp	r3, #0
 8007022:	d128      	bne.n	8007076 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	4619      	mov	r1, r3
 800702a:	69f8      	ldr	r0, [r7, #28]
 800702c:	f7fe fe1a 	bl	8005c64 <move_window>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d11b      	bne.n	8007076 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	2220      	movs	r2, #32
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fbff 	bl	800584a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a18      	ldr	r0, [r3, #32]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	220b      	movs	r2, #11
 8007056:	4619      	mov	r1, r3
 8007058:	f7fe fbd6 	bl	8005808 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	330c      	adds	r3, #12
 8007068:	f002 0218 	and.w	r2, r2, #24
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2201      	movs	r2, #1
 8007074:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800707a:	4618      	mov	r0, r3
 800707c:	3730      	adds	r7, #48	; 0x30
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	4ec4ec4f 	.word	0x4ec4ec4f

08007088 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80c9 	beq.w	800723a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b0:	d032      	beq.n	8007118 <get_fileinfo+0x90>
			i = j = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80070ba:	e01b      	b.n	80070f4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80070bc:	89fb      	ldrh	r3, [r7, #14]
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe f9a1 	bl	8005408 <ff_convert>
 80070c6:	4603      	mov	r3, r0
 80070c8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80070ca:	89fb      	ldrh	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <get_fileinfo+0x4e>
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	e01a      	b.n	800710c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2bfe      	cmp	r3, #254	; 0xfe
 80070da:	d902      	bls.n	80070e2 <get_fileinfo+0x5a>
 80070dc:	2300      	movs	r3, #0
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e014      	b.n	800710c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	89fa      	ldrh	r2, [r7, #14]
 80070ea:	b2d1      	uxtb	r1, r2
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	4413      	add	r3, r2
 80070f0:	460a      	mov	r2, r1
 80070f2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	61b9      	str	r1, [r7, #24]
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	81fb      	strh	r3, [r7, #14]
 8007106:	89fb      	ldrh	r3, [r7, #14]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1d7      	bne.n	80070bc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	3316      	adds	r3, #22
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	3316      	adds	r3, #22
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800712c:	e04c      	b.n	80071c8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	1c59      	adds	r1, r3, #1
 8007136:	61f9      	str	r1, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	2b20      	cmp	r3, #32
 8007142:	d100      	bne.n	8007146 <get_fileinfo+0xbe>
 8007144:	e040      	b.n	80071c8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	2b05      	cmp	r3, #5
 800714a:	d101      	bne.n	8007150 <get_fileinfo+0xc8>
 800714c:	23e5      	movs	r3, #229	; 0xe5
 800714e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	2b09      	cmp	r3, #9
 8007154:	d10f      	bne.n	8007176 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8007156:	89bb      	ldrh	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d105      	bne.n	8007168 <get_fileinfo+0xe0>
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	4413      	add	r3, r2
 8007162:	3316      	adds	r3, #22
 8007164:	222e      	movs	r2, #46	; 0x2e
 8007166:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	61ba      	str	r2, [r7, #24]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	222e      	movs	r2, #46	; 0x2e
 8007174:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	4413      	add	r3, r2
 800717c:	3309      	adds	r3, #9
 800717e:	7dfa      	ldrb	r2, [r7, #23]
 8007180:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007182:	89bb      	ldrh	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d11c      	bne.n	80071c2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d913      	bls.n	80071b6 <get_fileinfo+0x12e>
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b5a      	cmp	r3, #90	; 0x5a
 8007192:	d810      	bhi.n	80071b6 <get_fileinfo+0x12e>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	330c      	adds	r3, #12
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d901      	bls.n	80071a8 <get_fileinfo+0x120>
 80071a4:	2310      	movs	r3, #16
 80071a6:	e000      	b.n	80071aa <get_fileinfo+0x122>
 80071a8:	2308      	movs	r3, #8
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	3320      	adds	r3, #32
 80071b4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	4413      	add	r3, r2
 80071bc:	3316      	adds	r3, #22
 80071be:	7dfa      	ldrb	r2, [r7, #23]
 80071c0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	3301      	adds	r3, #1
 80071c6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	2b0a      	cmp	r3, #10
 80071cc:	d9af      	bls.n	800712e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80071ce:	89bb      	ldrh	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4413      	add	r3, r2
 80071da:	3316      	adds	r3, #22
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	330c      	adds	r3, #12
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <get_fileinfo+0x168>
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4413      	add	r3, r2
 80071f6:	3309      	adds	r3, #9
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	7ada      	ldrb	r2, [r3, #11]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	331c      	adds	r3, #28
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fa91 	bl	8005734 <ld_dword>
 8007212:	4602      	mov	r2, r0
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	3316      	adds	r3, #22
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fa88 	bl	8005734 <ld_dword>
 8007224:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	b29a      	uxth	r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	80da      	strh	r2, [r3, #6]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	0c1b      	lsrs	r3, r3, #16
 8007232:	b29a      	uxth	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	809a      	strh	r2, [r3, #4]
 8007238:	e000      	b.n	800723c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800723a:	bf00      	nop
}
 800723c:	3720      	adds	r7, #32
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08a      	sub	sp, #40	; 0x28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	61ba      	str	r2, [r7, #24]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4413      	add	r3, r2
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007274:	2b1f      	cmp	r3, #31
 8007276:	d940      	bls.n	80072fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800727a:	2b2f      	cmp	r3, #47	; 0x2f
 800727c:	d006      	beq.n	800728c <create_name+0x48>
 800727e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007280:	2b5c      	cmp	r3, #92	; 0x5c
 8007282:	d110      	bne.n	80072a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007284:	e002      	b.n	800728c <create_name+0x48>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	3301      	adds	r3, #1
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	4413      	add	r3, r2
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b2f      	cmp	r3, #47	; 0x2f
 8007296:	d0f6      	beq.n	8007286 <create_name+0x42>
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b5c      	cmp	r3, #92	; 0x5c
 80072a2:	d0f0      	beq.n	8007286 <create_name+0x42>
			break;
 80072a4:	e02a      	b.n	80072fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2bfe      	cmp	r3, #254	; 0xfe
 80072aa:	d901      	bls.n	80072b0 <create_name+0x6c>
 80072ac:	2306      	movs	r3, #6
 80072ae:	e17d      	b.n	80075ac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80072b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80072b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b8:	2101      	movs	r1, #1
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe f8a4 	bl	8005408 <ff_convert>
 80072c0:	4603      	mov	r3, r0
 80072c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80072c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <create_name+0x8a>
 80072ca:	2306      	movs	r3, #6
 80072cc:	e16e      	b.n	80075ac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80072ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d0:	2b7f      	cmp	r3, #127	; 0x7f
 80072d2:	d809      	bhi.n	80072e8 <create_name+0xa4>
 80072d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d6:	4619      	mov	r1, r3
 80072d8:	488d      	ldr	r0, [pc, #564]	; (8007510 <create_name+0x2cc>)
 80072da:	f7fe faf8 	bl	80058ce <chk_chr>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <create_name+0xa4>
 80072e4:	2306      	movs	r3, #6
 80072e6:	e161      	b.n	80075ac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	617a      	str	r2, [r7, #20]
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80072f8:	e7b4      	b.n	8007264 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80072fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	441a      	add	r2, r3
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007308:	2b1f      	cmp	r3, #31
 800730a:	d801      	bhi.n	8007310 <create_name+0xcc>
 800730c:	2304      	movs	r3, #4
 800730e:	e000      	b.n	8007312 <create_name+0xce>
 8007310:	2300      	movs	r3, #0
 8007312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007316:	e011      	b.n	800733c <create_name+0xf8>
		w = lfn[di - 1];
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800731e:	3b01      	subs	r3, #1
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800732a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800732c:	2b20      	cmp	r3, #32
 800732e:	d002      	beq.n	8007336 <create_name+0xf2>
 8007330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007332:	2b2e      	cmp	r3, #46	; 0x2e
 8007334:	d106      	bne.n	8007344 <create_name+0x100>
		di--;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3b01      	subs	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1ea      	bne.n	8007318 <create_name+0xd4>
 8007342:	e000      	b.n	8007346 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007344:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	2200      	movs	r2, #0
 8007350:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <create_name+0x118>
 8007358:	2306      	movs	r3, #6
 800735a:	e127      	b.n	80075ac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3324      	adds	r3, #36	; 0x24
 8007360:	220b      	movs	r2, #11
 8007362:	2120      	movs	r1, #32
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fa70 	bl	800584a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800736a:	2300      	movs	r3, #0
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	e002      	b.n	8007376 <create_name+0x132>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	3301      	adds	r3, #1
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	2b20      	cmp	r3, #32
 8007382:	d0f5      	beq.n	8007370 <create_name+0x12c>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	2b2e      	cmp	r3, #46	; 0x2e
 8007390:	d0ee      	beq.n	8007370 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <create_name+0x168>
 8007398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800739c:	f043 0303 	orr.w	r3, r3, #3
 80073a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80073a4:	e002      	b.n	80073ac <create_name+0x168>
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <create_name+0x182>
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073b8:	3b01      	subs	r3, #1
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	2b2e      	cmp	r3, #46	; 0x2e
 80073c4:	d1ef      	bne.n	80073a6 <create_name+0x162>

	i = b = 0; ni = 8;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073cc:	2300      	movs	r3, #0
 80073ce:	623b      	str	r3, [r7, #32]
 80073d0:	2308      	movs	r3, #8
 80073d2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	61ba      	str	r2, [r7, #24]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80073e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8090 	beq.w	800750c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80073ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d006      	beq.n	8007400 <create_name+0x1bc>
 80073f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073f4:	2b2e      	cmp	r3, #46	; 0x2e
 80073f6:	d10a      	bne.n	800740e <create_name+0x1ca>
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d006      	beq.n	800740e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007404:	f043 0303 	orr.w	r3, r3, #3
 8007408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800740c:	e07d      	b.n	800750a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800740e:	6a3a      	ldr	r2, [r7, #32]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	429a      	cmp	r2, r3
 8007414:	d203      	bcs.n	800741e <create_name+0x1da>
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	429a      	cmp	r2, r3
 800741c:	d123      	bne.n	8007466 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2b0b      	cmp	r3, #11
 8007422:	d106      	bne.n	8007432 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007428:	f043 0303 	orr.w	r3, r3, #3
 800742c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007430:	e075      	b.n	800751e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	429a      	cmp	r2, r3
 8007438:	d005      	beq.n	8007446 <create_name+0x202>
 800743a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800743e:	f043 0303 	orr.w	r3, r3, #3
 8007442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	429a      	cmp	r2, r3
 800744c:	d866      	bhi.n	800751c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	61bb      	str	r3, [r7, #24]
 8007452:	2308      	movs	r3, #8
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	230b      	movs	r3, #11
 8007458:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800745a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007464:	e051      	b.n	800750a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007468:	2b7f      	cmp	r3, #127	; 0x7f
 800746a:	d914      	bls.n	8007496 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800746c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f7fd ffc9 	bl	8005408 <ff_convert>
 8007476:	4603      	mov	r3, r0
 8007478:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800747a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <create_name+0x246>
 8007480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007482:	3b80      	subs	r3, #128	; 0x80
 8007484:	4a23      	ldr	r2, [pc, #140]	; (8007514 <create_name+0x2d0>)
 8007486:	5cd3      	ldrb	r3, [r2, r3]
 8007488:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800748a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800748e:	f043 0302 	orr.w	r3, r3, #2
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <create_name+0x268>
 800749c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800749e:	4619      	mov	r1, r3
 80074a0:	481d      	ldr	r0, [pc, #116]	; (8007518 <create_name+0x2d4>)
 80074a2:	f7fe fa14 	bl	80058ce <chk_chr>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80074ac:	235f      	movs	r3, #95	; 0x5f
 80074ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b4:	f043 0303 	orr.w	r3, r3, #3
 80074b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074bc:	e01b      	b.n	80074f6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80074be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d909      	bls.n	80074d8 <create_name+0x294>
 80074c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c6:	2b5a      	cmp	r3, #90	; 0x5a
 80074c8:	d806      	bhi.n	80074d8 <create_name+0x294>
					b |= 2;
 80074ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074ce:	f043 0302 	orr.w	r3, r3, #2
 80074d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074d6:	e00e      	b.n	80074f6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80074d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074da:	2b60      	cmp	r3, #96	; 0x60
 80074dc:	d90b      	bls.n	80074f6 <create_name+0x2b2>
 80074de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074e0:	2b7a      	cmp	r3, #122	; 0x7a
 80074e2:	d808      	bhi.n	80074f6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80074e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f2:	3b20      	subs	r3, #32
 80074f4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	623a      	str	r2, [r7, #32]
 80074fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074fe:	b2d1      	uxtb	r1, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	4413      	add	r3, r2
 8007504:	460a      	mov	r2, r1
 8007506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800750a:	e763      	b.n	80073d4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800750c:	bf00      	nop
 800750e:	e006      	b.n	800751e <create_name+0x2da>
 8007510:	080153e0 	.word	0x080153e0
 8007514:	08015c4c 	.word	0x08015c4c
 8007518:	080153ec 	.word	0x080153ec
			if (si > di) break;			/* No extension */
 800751c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007524:	2be5      	cmp	r3, #229	; 0xe5
 8007526:	d103      	bne.n	8007530 <create_name+0x2ec>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2205      	movs	r2, #5
 800752c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d104      	bne.n	8007540 <create_name+0x2fc>
 8007536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007544:	f003 030c 	and.w	r3, r3, #12
 8007548:	2b0c      	cmp	r3, #12
 800754a:	d005      	beq.n	8007558 <create_name+0x314>
 800754c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	2b03      	cmp	r3, #3
 8007556:	d105      	bne.n	8007564 <create_name+0x320>
 8007558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755c:	f043 0302 	orr.w	r3, r3, #2
 8007560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d117      	bne.n	80075a0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	2b01      	cmp	r3, #1
 800757a:	d105      	bne.n	8007588 <create_name+0x344>
 800757c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007580:	f043 0310 	orr.w	r3, r3, #16
 8007584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007588:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800758c:	f003 030c 	and.w	r3, r3, #12
 8007590:	2b04      	cmp	r3, #4
 8007592:	d105      	bne.n	80075a0 <create_name+0x35c>
 8007594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007598:	f043 0308 	orr.w	r3, r3, #8
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80075aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3728      	adds	r7, #40	; 0x28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80075c8:	e002      	b.n	80075d0 <follow_path+0x1c>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	3301      	adds	r3, #1
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b2f      	cmp	r3, #47	; 0x2f
 80075d6:	d0f8      	beq.n	80075ca <follow_path+0x16>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b5c      	cmp	r3, #92	; 0x5c
 80075de:	d0f4      	beq.n	80075ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2200      	movs	r2, #0
 80075e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b1f      	cmp	r3, #31
 80075ec:	d80a      	bhi.n	8007604 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2280      	movs	r2, #128	; 0x80
 80075f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80075f6:	2100      	movs	r1, #0
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fe ff15 	bl	8006428 <dir_sdi>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]
 8007602:	e048      	b.n	8007696 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007604:	463b      	mov	r3, r7
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fe1b 	bl	8007244 <create_name>
 800760e:	4603      	mov	r3, r0
 8007610:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d139      	bne.n	800768c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fb7d 	bl	8006d18 <dir_find>
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007628:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b04      	cmp	r3, #4
 8007634:	d12c      	bne.n	8007690 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007636:	7afb      	ldrb	r3, [r7, #11]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d127      	bne.n	8007690 <follow_path+0xdc>
 8007640:	2305      	movs	r3, #5
 8007642:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007644:	e024      	b.n	8007690 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d121      	bne.n	8007694 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	799b      	ldrb	r3, [r3, #6]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800765c:	2305      	movs	r3, #5
 800765e:	75fb      	strb	r3, [r7, #23]
 8007660:	e019      	b.n	8007696 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	8992      	ldrh	r2, [r2, #12]
 8007670:	fbb3 f0f2 	udiv	r0, r3, r2
 8007674:	fb00 f202 	mul.w	r2, r0, r2
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	440b      	add	r3, r1
 800767c:	4619      	mov	r1, r3
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff f878 	bl	8006774 <ld_clust>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800768a:	e7bb      	b.n	8007604 <follow_path+0x50>
			if (res != FR_OK) break;
 800768c:	bf00      	nop
 800768e:	e002      	b.n	8007696 <follow_path+0xe2>
				break;
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007694:	bf00      	nop
			}
		}
	}

	return res;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d031      	beq.n	800771a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	e002      	b.n	80076c4 <get_ldnumber+0x24>
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	3301      	adds	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b1f      	cmp	r3, #31
 80076ca:	d903      	bls.n	80076d4 <get_ldnumber+0x34>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b3a      	cmp	r3, #58	; 0x3a
 80076d2:	d1f4      	bne.n	80076be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b3a      	cmp	r3, #58	; 0x3a
 80076da:	d11c      	bne.n	8007716 <get_ldnumber+0x76>
			tp = *path;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	60fa      	str	r2, [r7, #12]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	3b30      	subs	r3, #48	; 0x30
 80076ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	d80e      	bhi.n	8007712 <get_ldnumber+0x72>
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d10a      	bne.n	8007712 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d107      	bne.n	8007712 <get_ldnumber+0x72>
					vol = (int)i;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	e002      	b.n	800771c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800771a:	693b      	ldr	r3, [r7, #16]
}
 800771c:	4618      	mov	r0, r3
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	70da      	strb	r2, [r3, #3]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800773e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fe fa8e 	bl	8005c64 <move_window>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <check_fs+0x2a>
 800774e:	2304      	movs	r3, #4
 8007750:	e038      	b.n	80077c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3338      	adds	r3, #56	; 0x38
 8007756:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800775a:	4618      	mov	r0, r3
 800775c:	f7fd ffd2 	bl	8005704 <ld_word>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007768:	429a      	cmp	r2, r3
 800776a:	d001      	beq.n	8007770 <check_fs+0x48>
 800776c:	2303      	movs	r3, #3
 800776e:	e029      	b.n	80077c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007776:	2be9      	cmp	r3, #233	; 0xe9
 8007778:	d009      	beq.n	800778e <check_fs+0x66>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007780:	2beb      	cmp	r3, #235	; 0xeb
 8007782:	d11e      	bne.n	80077c2 <check_fs+0x9a>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800778a:	2b90      	cmp	r3, #144	; 0x90
 800778c:	d119      	bne.n	80077c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3338      	adds	r3, #56	; 0x38
 8007792:	3336      	adds	r3, #54	; 0x36
 8007794:	4618      	mov	r0, r3
 8007796:	f7fd ffcd 	bl	8005734 <ld_dword>
 800779a:	4603      	mov	r3, r0
 800779c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <check_fs+0xa4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d101      	bne.n	80077aa <check_fs+0x82>
 80077a6:	2300      	movs	r3, #0
 80077a8:	e00c      	b.n	80077c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3338      	adds	r3, #56	; 0x38
 80077ae:	3352      	adds	r3, #82	; 0x52
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fd ffbf 	bl	8005734 <ld_dword>
 80077b6:	4603      	mov	r3, r0
 80077b8:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <check_fs+0xa8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d101      	bne.n	80077c2 <check_fs+0x9a>
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80077c2:	2302      	movs	r3, #2
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	00544146 	.word	0x00544146
 80077d0:	33544146 	.word	0x33544146

080077d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b096      	sub	sp, #88	; 0x58
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff ff59 	bl	80076a0 <get_ldnumber>
 80077ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80077f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da01      	bge.n	80077fa <find_volume+0x26>
 80077f6:	230b      	movs	r3, #11
 80077f8:	e262      	b.n	8007cc0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80077fa:	4a9f      	ldr	r2, [pc, #636]	; (8007a78 <find_volume+0x2a4>)
 80077fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007802:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <find_volume+0x3a>
 800780a:	230c      	movs	r3, #12
 800780c:	e258      	b.n	8007cc0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007812:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01a      	beq.n	800785a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	4618      	mov	r0, r3
 800782a:	f7fd feb3 	bl	8005594 <disk_status>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <find_volume+0x82>
 8007846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007852:	230a      	movs	r3, #10
 8007854:	e234      	b.n	8007cc0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8007856:	2300      	movs	r3, #0
 8007858:	e232      	b.n	8007cc0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007862:	b2da      	uxtb	r2, r3
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fd feab 	bl	80055c8 <disk_initialize>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007878:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007884:	2303      	movs	r3, #3
 8007886:	e21b      	b.n	8007cc0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <find_volume+0xca>
 800788e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800789a:	230a      	movs	r3, #10
 800789c:	e210      	b.n	8007cc0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	7858      	ldrb	r0, [r3, #1]
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	330c      	adds	r3, #12
 80078a6:	461a      	mov	r2, r3
 80078a8:	2102      	movs	r1, #2
 80078aa:	f7fd fef3 	bl	8005694 <disk_ioctl>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <find_volume+0xe4>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e203      	b.n	8007cc0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	899b      	ldrh	r3, [r3, #12]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d80d      	bhi.n	80078de <find_volume+0x10a>
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	899b      	ldrh	r3, [r3, #12]
 80078c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ca:	d308      	bcc.n	80078de <find_volume+0x10a>
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	899b      	ldrh	r3, [r3, #12]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	899b      	ldrh	r3, [r3, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	4013      	ands	r3, r2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <find_volume+0x10e>
 80078de:	2301      	movs	r3, #1
 80078e0:	e1ee      	b.n	8007cc0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80078e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078ea:	f7ff ff1d 	bl	8007728 <check_fs>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80078f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d149      	bne.n	8007990 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078fc:	2300      	movs	r3, #0
 80078fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007900:	e01e      	b.n	8007940 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007910:	4413      	add	r3, r2
 8007912:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	3304      	adds	r3, #4
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d006      	beq.n	800792c <find_volume+0x158>
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	3308      	adds	r3, #8
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd ff06 	bl	8005734 <ld_dword>
 8007928:	4602      	mov	r2, r0
 800792a:	e000      	b.n	800792e <find_volume+0x15a>
 800792c:	2200      	movs	r2, #0
 800792e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	3358      	adds	r3, #88	; 0x58
 8007934:	443b      	add	r3, r7
 8007936:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800793a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800793c:	3301      	adds	r3, #1
 800793e:	643b      	str	r3, [r7, #64]	; 0x40
 8007940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007942:	2b03      	cmp	r3, #3
 8007944:	d9dd      	bls.n	8007902 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007946:	2300      	movs	r3, #0
 8007948:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800794a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <find_volume+0x182>
 8007950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007952:	3b01      	subs	r3, #1
 8007954:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	3358      	adds	r3, #88	; 0x58
 800795c:	443b      	add	r3, r7
 800795e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007962:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <find_volume+0x1a2>
 800796a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800796c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800796e:	f7ff fedb 	bl	8007728 <check_fs>
 8007972:	4603      	mov	r3, r0
 8007974:	e000      	b.n	8007978 <find_volume+0x1a4>
 8007976:	2303      	movs	r3, #3
 8007978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800797c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007980:	2b01      	cmp	r3, #1
 8007982:	d905      	bls.n	8007990 <find_volume+0x1bc>
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	3301      	adds	r3, #1
 8007988:	643b      	str	r3, [r7, #64]	; 0x40
 800798a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798c:	2b03      	cmp	r3, #3
 800798e:	d9e2      	bls.n	8007956 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007994:	2b04      	cmp	r3, #4
 8007996:	d101      	bne.n	800799c <find_volume+0x1c8>
 8007998:	2301      	movs	r3, #1
 800799a:	e191      	b.n	8007cc0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800799c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d901      	bls.n	80079a8 <find_volume+0x1d4>
 80079a4:	230d      	movs	r3, #13
 80079a6:	e18b      	b.n	8007cc0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	3338      	adds	r3, #56	; 0x38
 80079ac:	330b      	adds	r3, #11
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fd fea8 	bl	8005704 <ld_word>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	899b      	ldrh	r3, [r3, #12]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d001      	beq.n	80079c4 <find_volume+0x1f0>
 80079c0:	230d      	movs	r3, #13
 80079c2:	e17d      	b.n	8007cc0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	3338      	adds	r3, #56	; 0x38
 80079c8:	3316      	adds	r3, #22
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fd fe9a 	bl	8005704 <ld_word>
 80079d0:	4603      	mov	r3, r0
 80079d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80079d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <find_volume+0x214>
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	3338      	adds	r3, #56	; 0x38
 80079de:	3324      	adds	r3, #36	; 0x24
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd fea7 	bl	8005734 <ld_dword>
 80079e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	789b      	ldrb	r3, [r3, #2]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d005      	beq.n	8007a0c <find_volume+0x238>
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	789b      	ldrb	r3, [r3, #2]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d001      	beq.n	8007a0c <find_volume+0x238>
 8007a08:	230d      	movs	r3, #13
 8007a0a:	e159      	b.n	8007cc0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	789b      	ldrb	r3, [r3, #2]
 8007a10:	461a      	mov	r2, r3
 8007a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a14:	fb02 f303 	mul.w	r3, r2, r3
 8007a18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	895b      	ldrh	r3, [r3, #10]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <find_volume+0x26c>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	895b      	ldrh	r3, [r3, #10]
 8007a32:	461a      	mov	r2, r3
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	895b      	ldrh	r3, [r3, #10]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <find_volume+0x270>
 8007a40:	230d      	movs	r3, #13
 8007a42:	e13d      	b.n	8007cc0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	3338      	adds	r3, #56	; 0x38
 8007a48:	3311      	adds	r3, #17
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd fe5a 	bl	8005704 <ld_word>
 8007a50:	4603      	mov	r3, r0
 8007a52:	461a      	mov	r2, r3
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	891b      	ldrh	r3, [r3, #8]
 8007a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5e:	8992      	ldrh	r2, [r2, #12]
 8007a60:	0952      	lsrs	r2, r2, #5
 8007a62:	b292      	uxth	r2, r2
 8007a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a68:	fb01 f202 	mul.w	r2, r1, r2
 8007a6c:	1a9b      	subs	r3, r3, r2
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <find_volume+0x2a8>
 8007a74:	230d      	movs	r3, #13
 8007a76:	e123      	b.n	8007cc0 <find_volume+0x4ec>
 8007a78:	200000ac 	.word	0x200000ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	3338      	adds	r3, #56	; 0x38
 8007a80:	3313      	adds	r3, #19
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd fe3e 	bl	8005704 <ld_word>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <find_volume+0x2cc>
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	3338      	adds	r3, #56	; 0x38
 8007a96:	3320      	adds	r3, #32
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fd fe4b 	bl	8005734 <ld_dword>
 8007a9e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	3338      	adds	r3, #56	; 0x38
 8007aa4:	330e      	adds	r3, #14
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fd fe2c 	bl	8005704 <ld_word>
 8007aac:	4603      	mov	r3, r0
 8007aae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <find_volume+0x2e6>
 8007ab6:	230d      	movs	r3, #13
 8007ab8:	e102      	b.n	8007cc0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007aba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abe:	4413      	add	r3, r2
 8007ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac2:	8911      	ldrh	r1, [r2, #8]
 8007ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac6:	8992      	ldrh	r2, [r2, #12]
 8007ac8:	0952      	lsrs	r2, r2, #5
 8007aca:	b292      	uxth	r2, r2
 8007acc:	fbb1 f2f2 	udiv	r2, r1, r2
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d201      	bcs.n	8007ae2 <find_volume+0x30e>
 8007ade:	230d      	movs	r3, #13
 8007ae0:	e0ee      	b.n	8007cc0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aea:	8952      	ldrh	r2, [r2, #10]
 8007aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <find_volume+0x328>
 8007af8:	230d      	movs	r3, #13
 8007afa:	e0e1      	b.n	8007cc0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007afc:	2303      	movs	r3, #3
 8007afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d802      	bhi.n	8007b12 <find_volume+0x33e>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d802      	bhi.n	8007b22 <find_volume+0x34e>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b2e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b34:	441a      	add	r2, r3
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007b3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	441a      	add	r2, r3
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007b44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d11e      	bne.n	8007b8a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	3338      	adds	r3, #56	; 0x38
 8007b50:	332a      	adds	r3, #42	; 0x2a
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fd fdd6 	bl	8005704 <ld_word>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <find_volume+0x38e>
 8007b5e:	230d      	movs	r3, #13
 8007b60:	e0ae      	b.n	8007cc0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	891b      	ldrh	r3, [r3, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <find_volume+0x39a>
 8007b6a:	230d      	movs	r3, #13
 8007b6c:	e0a8      	b.n	8007cc0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	3338      	adds	r3, #56	; 0x38
 8007b72:	332c      	adds	r3, #44	; 0x2c
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fd fddd 	bl	8005734 <ld_dword>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
 8007b88:	e01f      	b.n	8007bca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	891b      	ldrh	r3, [r3, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <find_volume+0x3c2>
 8007b92:	230d      	movs	r3, #13
 8007b94:	e094      	b.n	8007cc0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9c:	441a      	add	r2, r3
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d103      	bne.n	8007bb2 <find_volume+0x3de>
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	e00a      	b.n	8007bc8 <find_volume+0x3f4>
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	69da      	ldr	r2, [r3, #28]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4413      	add	r3, r2
 8007bbc:	085a      	lsrs	r2, r3, #1
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007bc8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	899b      	ldrh	r3, [r3, #12]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bdc:	8989      	ldrh	r1, [r1, #12]
 8007bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d201      	bcs.n	8007bea <find_volume+0x416>
 8007be6:	230d      	movs	r3, #13
 8007be8:	e06a      	b.n	8007cc0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bf0:	619a      	str	r2, [r3, #24]
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	2280      	movs	r2, #128	; 0x80
 8007bfe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007c00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d149      	bne.n	8007c9c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	3338      	adds	r3, #56	; 0x38
 8007c0c:	3330      	adds	r3, #48	; 0x30
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd fd78 	bl	8005704 <ld_word>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d140      	bne.n	8007c9c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c22:	f7fe f81f 	bl	8005c64 <move_window>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d137      	bne.n	8007c9c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	2200      	movs	r2, #0
 8007c30:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	3338      	adds	r3, #56	; 0x38
 8007c36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fd fd62 	bl	8005704 <ld_word>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d127      	bne.n	8007c9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	3338      	adds	r3, #56	; 0x38
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fd fd6f 	bl	8005734 <ld_dword>
 8007c56:	4603      	mov	r3, r0
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <find_volume+0x4f4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d11e      	bne.n	8007c9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	3338      	adds	r3, #56	; 0x38
 8007c62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd fd64 	bl	8005734 <ld_dword>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <find_volume+0x4f8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d113      	bne.n	8007c9c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	3338      	adds	r3, #56	; 0x38
 8007c78:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fd fd59 	bl	8005734 <ld_dword>
 8007c82:	4602      	mov	r2, r0
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	3338      	adds	r3, #56	; 0x38
 8007c8c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fd4f 	bl	8005734 <ld_dword>
 8007c96:	4602      	mov	r2, r0
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007ca2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <find_volume+0x4fc>)
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	4b08      	ldr	r3, [pc, #32]	; (8007cd0 <find_volume+0x4fc>)
 8007cae:	801a      	strh	r2, [r3, #0]
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <find_volume+0x4fc>)
 8007cb2:	881a      	ldrh	r2, [r3, #0]
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007cb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cba:	f7fd ff6b 	bl	8005b94 <clear_lock>
#endif
	return FR_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3758      	adds	r7, #88	; 0x58
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	41615252 	.word	0x41615252
 8007ccc:	61417272 	.word	0x61417272
 8007cd0:	200000b0 	.word	0x200000b0

08007cd4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007cde:	2309      	movs	r3, #9
 8007ce0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01c      	beq.n	8007d22 <validate+0x4e>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d018      	beq.n	8007d22 <validate+0x4e>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d013      	beq.n	8007d22 <validate+0x4e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	889a      	ldrh	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	88db      	ldrh	r3, [r3, #6]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d10c      	bne.n	8007d22 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fd fc40 	bl	8005594 <disk_status>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <validate+0x4e>
			res = FR_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <validate+0x5a>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	e000      	b.n	8007d30 <validate+0x5c>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	6013      	str	r3, [r2, #0]
	return res;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007d52:	f107 0310 	add.w	r3, r7, #16
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fca2 	bl	80076a0 <get_ldnumber>
 8007d5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	da01      	bge.n	8007d68 <f_mount+0x28>
 8007d64:	230b      	movs	r3, #11
 8007d66:	e02b      	b.n	8007dc0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d68:	4a17      	ldr	r2, [pc, #92]	; (8007dc8 <f_mount+0x88>)
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d78:	69b8      	ldr	r0, [r7, #24]
 8007d7a:	f7fd ff0b 	bl	8005b94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2200      	movs	r2, #0
 8007d82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	490d      	ldr	r1, [pc, #52]	; (8007dc8 <f_mount+0x88>)
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <f_mount+0x66>
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d001      	beq.n	8007daa <f_mount+0x6a>
 8007da6:	2300      	movs	r3, #0
 8007da8:	e00a      	b.n	8007dc0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007daa:	f107 010c 	add.w	r1, r7, #12
 8007dae:	f107 0308 	add.w	r3, r7, #8
 8007db2:	2200      	movs	r2, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff fd0d 	bl	80077d4 <find_volume>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3720      	adds	r7, #32
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	200000ac 	.word	0x200000ac

08007dcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dd8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ddc:	6018      	str	r0, [r3, #0]
 8007dde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007de2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007de6:	6019      	str	r1, [r3, #0]
 8007de8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007df0:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007df2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007df6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <f_open+0x38>
 8007e00:	2309      	movs	r3, #9
 8007e02:	e2a6      	b.n	8008352 <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007e04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e08:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e0c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007e10:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007e14:	7812      	ldrb	r2, [r2, #0]
 8007e16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007e1a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007e1c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e20:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007e2a:	f107 0308 	add.w	r3, r7, #8
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fcd0 	bl	80077d4 <find_volume>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007e3a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 827a 	bne.w	8008338 <f_open+0x56c>
		dj.obj.fs = fs;
 8007e44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e48:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 8007e4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e50:	f107 0210 	add.w	r2, r7, #16
 8007e54:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007e56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fba4 	bl	80075b4 <follow_path>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007e72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d11e      	bne.n	8007eb8 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007e7a:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8007e7e:	b25b      	sxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	da03      	bge.n	8007e8c <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007e84:	2306      	movs	r3, #6
 8007e86:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007e8a:	e015      	b.n	8007eb8 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e8c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e90:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fd fd29 	bl	8005904 <chk_lock>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007eb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ebc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	f003 031c 	and.w	r3, r3, #28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80a7 	beq.w	800801a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007ecc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01f      	beq.n	8007f14 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007ed4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d10e      	bne.n	8007efa <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007edc:	f7fd fd6e 	bl	80059bc <enq_lock>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d006      	beq.n	8007ef4 <f_open+0x128>
 8007ee6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe ffd4 	bl	8006e98 <dir_register>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	e000      	b.n	8007ef6 <f_open+0x12a>
 8007ef4:	2312      	movs	r3, #18
 8007ef6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007efa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007efe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f02:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007f06:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	f042 0208 	orr.w	r2, r2, #8
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	e015      	b.n	8007f40 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f14:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007f18:	f003 0311 	and.w	r3, r3, #17
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <f_open+0x15c>
					res = FR_DENIED;
 8007f20:	2307      	movs	r3, #7
 8007f22:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007f26:	e00b      	b.n	8007f40 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007f28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f2c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <f_open+0x174>
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 8088 	bne.w	800805a <f_open+0x28e>
 8007f4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f4e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d07e      	beq.n	800805a <f_open+0x28e>
				dw = GET_FATTIME();
 8007f5c:	f7fd fbca 	bl	80056f4 <get_fattime>
 8007f60:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007f64:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007f68:	330e      	adds	r3, #14
 8007f6a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fd fc1e 	bl	80057b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007f74:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007f78:	3316      	adds	r3, #22
 8007f7a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd fc16 	bl	80057b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007f84:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007f88:	330b      	adds	r3, #11
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007f8e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f92:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fbeb 	bl	8006774 <ld_clust>
 8007f9e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007fa2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007fa6:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8007faa:	2200      	movs	r2, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fc00 	bl	80067b2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007fb2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007fb6:	331c      	adds	r3, #28
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fd fbf8 	bl	80057b0 <st_dword>
					fs->wflag = 1;
 8007fc0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007fc8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d044      	beq.n	800805a <f_open+0x28e>
						dw = fs->winsect;
 8007fd0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007fda:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fe f8ea 	bl	80061be <remove_chain>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007ff0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d130      	bne.n	800805a <f_open+0x28e>
							res = move_window(fs, dw);
 8007ff8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007ffc:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd fe2f 	bl	8005c64 <move_window>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800800c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008010:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008014:	3a01      	subs	r2, #1
 8008016:	615a      	str	r2, [r3, #20]
 8008018:	e01f      	b.n	800805a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800801a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800801e:	2b00      	cmp	r3, #0
 8008020:	d11b      	bne.n	800805a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008022:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8008026:	f003 0310 	and.w	r3, r3, #16
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <f_open+0x26a>
					res = FR_NO_FILE;
 800802e:	2304      	movs	r3, #4
 8008030:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008034:	e011      	b.n	800805a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008036:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800803a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <f_open+0x28e>
 8008048:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <f_open+0x28e>
						res = FR_DENIED;
 8008054:	2307      	movs	r3, #7
 8008056:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800805a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800805e:	2b00      	cmp	r3, #0
 8008060:	d14a      	bne.n	80080f8 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008062:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008066:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8008074:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008078:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800807c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008080:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800808a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800808c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008092:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008096:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800809e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80080a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080b2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f023 0301 	bic.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bf14      	ite	ne
 80080c0:	2301      	movne	r3, #1
 80080c2:	2300      	moveq	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fd fc96 	bl	8005a00 <inc_lock>
 80080d4:	4602      	mov	r2, r0
 80080d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80080e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <f_open+0x32c>
 80080f2:	2302      	movs	r3, #2
 80080f4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80080f8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 811b 	bne.w	8008338 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008102:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008106:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fb31 	bl	8006774 <ld_clust>
 8008112:	4602      	mov	r2, r0
 8008114:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008118:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008120:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008124:	331c      	adds	r3, #28
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd fb04 	bl	8005734 <ld_dword>
 800812c:	4602      	mov	r2, r0
 800812e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008132:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800813a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800813e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2200      	movs	r2, #0
 8008146:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008148:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800814c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008150:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008158:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800815c:	88da      	ldrh	r2, [r3, #6]
 800815e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008162:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800816a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800816e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008178:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008180:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008184:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2200      	movs	r2, #0
 800818c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800818e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008192:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2200      	movs	r2, #0
 800819a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800819c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3330      	adds	r3, #48	; 0x30
 80081b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fd fb44 	bl	800584a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081c6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 0320 	and.w	r3, r3, #32
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80b1 	beq.w	8008338 <f_open+0x56c>
 80081d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80a8 	beq.w	8008338 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081f8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008200:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008204:	895b      	ldrh	r3, [r3, #10]
 8008206:	461a      	mov	r2, r3
 8008208:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800820c:	899b      	ldrh	r3, [r3, #12]
 800820e:	fb02 f303 	mul.w	r3, r2, r3
 8008212:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008216:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800821a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008226:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800822a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008236:	e021      	b.n	800827c <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8008238:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800823c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008246:	4618      	mov	r0, r3
 8008248:	f7fd fdc9 	bl	8005dde <get_fat>
 800824c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8008250:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008254:	2b01      	cmp	r3, #1
 8008256:	d802      	bhi.n	800825e <f_open+0x492>
 8008258:	2302      	movs	r3, #2
 800825a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800825e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008266:	d102      	bne.n	800826e <f_open+0x4a2>
 8008268:	2301      	movs	r3, #1
 800826a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800826e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008272:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800827c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008280:	2b00      	cmp	r3, #0
 8008282:	d105      	bne.n	8008290 <f_open+0x4c4>
 8008284:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008288:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800828c:	429a      	cmp	r2, r3
 800828e:	d8d3      	bhi.n	8008238 <f_open+0x46c>
				}
				fp->clust = clst;
 8008290:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008294:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800829e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082a0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d147      	bne.n	8008338 <f_open+0x56c>
 80082a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80082ac:	899b      	ldrh	r3, [r3, #12]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80082b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80082b8:	fb01 f202 	mul.w	r2, r1, r2
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d03a      	beq.n	8008338 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80082c2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80082c6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fd fd68 	bl	8005da0 <clust2sect>
 80082d0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80082d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <f_open+0x518>
						res = FR_INT_ERR;
 80082dc:	2302      	movs	r3, #2
 80082de:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80082e2:	e029      	b.n	8008338 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80082e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80082e8:	899b      	ldrh	r3, [r3, #12]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80082f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80082f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082f8:	441a      	add	r2, r3
 80082fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008306:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800830a:	7858      	ldrb	r0, [r3, #1]
 800830c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008310:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800831a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800831e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6a1a      	ldr	r2, [r3, #32]
 8008326:	2301      	movs	r3, #1
 8008328:	f7fd f974 	bl	8005614 <disk_read>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <f_open+0x56c>
 8008332:	2301      	movs	r3, #1
 8008334:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008338:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800833c:	2b00      	cmp	r3, #0
 800833e:	d006      	beq.n	800834e <f_open+0x582>
 8008340:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008344:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800834e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8008352:	4618      	mov	r0, r3
 8008354:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08e      	sub	sp, #56	; 0x38
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f107 0214 	add.w	r2, r7, #20
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fca9 	bl	8007cd4 <validate>
 8008382:	4603      	mov	r3, r0
 8008384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800838c:	2b00      	cmp	r3, #0
 800838e:	d107      	bne.n	80083a0 <f_read+0x44>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	7d5b      	ldrb	r3, [r3, #21]
 8008394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <f_read+0x4a>
 80083a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083a4:	e135      	b.n	8008612 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	7d1b      	ldrb	r3, [r3, #20]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <f_read+0x5a>
 80083b2:	2307      	movs	r3, #7
 80083b4:	e12d      	b.n	8008612 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f240 811e 	bls.w	8008608 <f_read+0x2ac>
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80083d0:	e11a      	b.n	8008608 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	8992      	ldrh	r2, [r2, #12]
 80083da:	fbb3 f1f2 	udiv	r1, r3, r2
 80083de:	fb01 f202 	mul.w	r2, r1, r2
 80083e2:	1a9b      	subs	r3, r3, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f040 80d5 	bne.w	8008594 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	8992      	ldrh	r2, [r2, #12]
 80083f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	8952      	ldrh	r2, [r2, #10]
 80083fa:	3a01      	subs	r2, #1
 80083fc:	4013      	ands	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d12f      	bne.n	8008466 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
 8008414:	e013      	b.n	800843e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	4619      	mov	r1, r3
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7fd ffc7 	bl	80063b8 <clmt_clust>
 800842a:	6338      	str	r0, [r7, #48]	; 0x30
 800842c:	e007      	b.n	800843e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	4619      	mov	r1, r3
 8008436:	4610      	mov	r0, r2
 8008438:	f7fd fcd1 	bl	8005dde <get_fat>
 800843c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2b01      	cmp	r3, #1
 8008442:	d804      	bhi.n	800844e <f_read+0xf2>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2202      	movs	r2, #2
 8008448:	755a      	strb	r2, [r3, #21]
 800844a:	2302      	movs	r3, #2
 800844c:	e0e1      	b.n	8008612 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008454:	d104      	bne.n	8008460 <f_read+0x104>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	755a      	strb	r2, [r3, #21]
 800845c:	2301      	movs	r3, #1
 800845e:	e0d8      	b.n	8008612 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008464:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fd fc96 	bl	8005da0 <clust2sect>
 8008474:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <f_read+0x12a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	755a      	strb	r2, [r3, #21]
 8008482:	2302      	movs	r3, #2
 8008484:	e0c5      	b.n	8008612 <f_read+0x2b6>
			sect += csect;
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	899b      	ldrh	r3, [r3, #12]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	fbb3 f3f2 	udiv	r3, r3, r2
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d041      	beq.n	8008526 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	4413      	add	r3, r2
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	8952      	ldrh	r2, [r2, #10]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d905      	bls.n	80084bc <f_read+0x160>
					cc = fs->csize - csect;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	461a      	mov	r2, r3
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	7858      	ldrb	r0, [r3, #1]
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084c6:	f7fd f8a5 	bl	8005614 <disk_read>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <f_read+0x17e>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	755a      	strb	r2, [r3, #21]
 80084d6:	2301      	movs	r3, #1
 80084d8:	e09b      	b.n	8008612 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	7d1b      	ldrb	r3, [r3, #20]
 80084de:	b25b      	sxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	da18      	bge.n	8008516 <f_read+0x1ba>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a1a      	ldr	r2, [r3, #32]
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d911      	bls.n	8008516 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1a      	ldr	r2, [r3, #32]
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	8992      	ldrh	r2, [r2, #12]
 80084fe:	fb02 f303 	mul.w	r3, r2, r3
 8008502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008504:	18d0      	adds	r0, r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	899b      	ldrh	r3, [r3, #12]
 8008510:	461a      	mov	r2, r3
 8008512:	f7fd f979 	bl	8005808 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	899b      	ldrh	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008524:	e05c      	b.n	80085e0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	429a      	cmp	r2, r3
 800852e:	d02e      	beq.n	800858e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	7d1b      	ldrb	r3, [r3, #20]
 8008534:	b25b      	sxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	da18      	bge.n	800856c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	7858      	ldrb	r0, [r3, #1]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a1a      	ldr	r2, [r3, #32]
 8008548:	2301      	movs	r3, #1
 800854a:	f7fd f883 	bl	8005654 <disk_write>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <f_read+0x202>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	755a      	strb	r2, [r3, #21]
 800855a:	2301      	movs	r3, #1
 800855c:	e059      	b.n	8008612 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	7d1b      	ldrb	r3, [r3, #20]
 8008562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008566:	b2da      	uxtb	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	7858      	ldrb	r0, [r3, #1]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008576:	2301      	movs	r3, #1
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	f7fd f84b 	bl	8005614 <disk_read>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <f_read+0x232>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	755a      	strb	r2, [r3, #21]
 800858a:	2301      	movs	r3, #1
 800858c:	e041      	b.n	8008612 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	899b      	ldrh	r3, [r3, #12]
 8008598:	4618      	mov	r0, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	8992      	ldrh	r2, [r2, #12]
 80085a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a6:	fb01 f202 	mul.w	r2, r1, r2
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	1ac3      	subs	r3, r0, r3
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80085b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d901      	bls.n	80085bc <f_read+0x260>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	8992      	ldrh	r2, [r2, #12]
 80085ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80085ce:	fb00 f202 	mul.w	r2, r0, r2
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	440b      	add	r3, r1
 80085d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d8:	4619      	mov	r1, r3
 80085da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085dc:	f7fd f914 	bl	8005808 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	4413      	add	r3, r2
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	619a      	str	r2, [r3, #24]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	441a      	add	r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f47f aee1 	bne.w	80083d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3738      	adds	r7, #56	; 0x38
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b086      	sub	sp, #24
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f107 0208 	add.w	r2, r7, #8
 8008628:	4611      	mov	r1, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fb52 	bl	8007cd4 <validate>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d168      	bne.n	800870c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	7d1b      	ldrb	r3, [r3, #20]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d062      	beq.n	800870c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7d1b      	ldrb	r3, [r3, #20]
 800864a:	b25b      	sxtb	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	da15      	bge.n	800867c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	7858      	ldrb	r0, [r3, #1]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1a      	ldr	r2, [r3, #32]
 800865e:	2301      	movs	r3, #1
 8008660:	f7fc fff8 	bl	8005654 <disk_write>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <f_sync+0x54>
 800866a:	2301      	movs	r3, #1
 800866c:	e04f      	b.n	800870e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7d1b      	ldrb	r3, [r3, #20]
 8008672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008676:	b2da      	uxtb	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800867c:	f7fd f83a 	bl	80056f4 <get_fattime>
 8008680:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f7fd faea 	bl	8005c64 <move_window>
 8008690:	4603      	mov	r3, r0
 8008692:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d138      	bne.n	800870c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	330b      	adds	r3, #11
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	330b      	adds	r3, #11
 80086aa:	f042 0220 	orr.w	r2, r2, #32
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	461a      	mov	r2, r3
 80086bc:	68f9      	ldr	r1, [r7, #12]
 80086be:	f7fe f878 	bl	80067b2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f103 021c 	add.w	r2, r3, #28
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fd f86e 	bl	80057b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3316      	adds	r3, #22
 80086d8:	6939      	ldr	r1, [r7, #16]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fd f868 	bl	80057b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3312      	adds	r3, #18
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fd f847 	bl	800577a <st_word>
					fs->wflag = 1;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2201      	movs	r2, #1
 80086f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fd fae3 	bl	8005cc0 <sync_fs>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7d1b      	ldrb	r3, [r3, #20]
 8008702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008706:	b2da      	uxtb	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff ff7b 	bl	800861a <f_sync>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d118      	bne.n	8008760 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f107 0208 	add.w	r2, r7, #8
 8008734:	4611      	mov	r1, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff facc 	bl	8007cd4 <validate>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10c      	bne.n	8008760 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	4618      	mov	r0, r3
 800874c:	f7fd f9e6 	bl	8005b1c <dec_lock>
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008770:	af00      	add	r7, sp, #0
 8008772:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008776:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800877a:	6018      	str	r0, [r3, #0]
 800877c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008780:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8008784:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008786:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800878a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <f_opendir+0x2e>
 8008794:	2309      	movs	r3, #9
 8008796:	e0a0      	b.n	80088da <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 8008798:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800879c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80087a6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80087aa:	463b      	mov	r3, r7
 80087ac:	2200      	movs	r2, #0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff f810 	bl	80077d4 <find_volume>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 80087ba:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 8081 	bne.w	80088c6 <f_opendir+0x15c>
		obj->fs = fs;
 80087c4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80087c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80087cc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80087ce:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80087d2:	f107 020c 	add.w	r2, r7, #12
 80087d6:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80087d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80087dc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80087e6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80087ea:	4611      	mov	r1, r2
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	f7fe fee1 	bl	80075b4 <follow_path>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 80087f8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d15b      	bne.n	80088b8 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008800:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008804:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800880e:	b25b      	sxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	db1a      	blt.n	800884a <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008814:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008818:	799b      	ldrb	r3, [r3, #6]
 800881a:	f003 0310 	and.w	r3, r3, #16
 800881e:	2b00      	cmp	r3, #0
 8008820:	d010      	beq.n	8008844 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008822:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008826:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800882a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7fd ff9d 	bl	8006774 <ld_clust>
 800883a:	4602      	mov	r2, r0
 800883c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	e002      	b.n	800884a <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008844:	2305      	movs	r3, #5
 8008846:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800884a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800884e:	2b00      	cmp	r3, #0
 8008850:	d132      	bne.n	80088b8 <f_opendir+0x14e>
				obj->id = fs->id;
 8008852:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008856:	88da      	ldrh	r2, [r3, #6]
 8008858:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800885c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800885e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008862:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008866:	2100      	movs	r1, #0
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	f7fd fddd 	bl	8006428 <dir_sdi>
 800886e:	4603      	mov	r3, r0
 8008870:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008874:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11d      	bne.n	80088b8 <f_opendir+0x14e>
					if (obj->sclust) {
 800887c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d014      	beq.n	80088b0 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008886:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800888a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800888e:	2100      	movs	r1, #0
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	f7fd f8b5 	bl	8005a00 <inc_lock>
 8008896:	4602      	mov	r2, r0
 8008898:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800889c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800889e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d107      	bne.n	80088b8 <f_opendir+0x14e>
 80088a8:	2312      	movs	r3, #18
 80088aa:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80088ae:	e003      	b.n	80088b8 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80088b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80088b4:	2200      	movs	r2, #0
 80088b6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80088b8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d102      	bne.n	80088c6 <f_opendir+0x15c>
 80088c0:	2305      	movs	r3, #5
 80088c2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80088c6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <f_opendir+0x16c>
 80088ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80088d6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 80088da:	4618      	mov	r0, r3
 80088dc:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80088f0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80088f4:	6018      	str	r0, [r3, #0]
 80088f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80088fa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80088fe:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008900:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008904:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff f9df 	bl	8007cd4 <validate>
 8008916:	4603      	mov	r3, r0
 8008918:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800891c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008920:	2b00      	cmp	r3, #0
 8008922:	d14b      	bne.n	80089bc <f_readdir+0xd8>
		if (!fno) {
 8008924:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008928:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008932:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008936:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800893a:	2100      	movs	r1, #0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f7fd fd73 	bl	8006428 <dir_sdi>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008948:	e038      	b.n	80089bc <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800894a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800894e:	f107 0208 	add.w	r2, r7, #8
 8008952:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 8008954:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008958:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800895c:	2100      	movs	r1, #0
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	f7fe f933 	bl	8006bca <dir_read>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800896a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800896e:	2b04      	cmp	r3, #4
 8008970:	d102      	bne.n	8008978 <f_readdir+0x94>
 8008972:	2300      	movs	r3, #0
 8008974:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8008978:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d11d      	bne.n	80089bc <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008980:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008984:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8008988:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800898c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008990:	6811      	ldr	r1, [r2, #0]
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	f7fe fb78 	bl	8007088 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008998:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800899c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80089a0:	2100      	movs	r1, #0
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	f7fd fdc9 	bl	800653a <dir_next>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80089ae:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d102      	bne.n	80089bc <f_readdir+0xd8>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80089bc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80089da:	2301      	movs	r3, #1
 80089dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80089e2:	4b1f      	ldr	r3, [pc, #124]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 80089e4:	7a5b      	ldrb	r3, [r3, #9]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d131      	bne.n	8008a50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80089ec:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 80089ee:	7a5b      	ldrb	r3, [r3, #9]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 80089f6:	2100      	movs	r1, #0
 80089f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80089fa:	4b19      	ldr	r3, [pc, #100]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 80089fc:	7a5b      	ldrb	r3, [r3, #9]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	4a17      	ldr	r2, [pc, #92]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a0a:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 8008a0c:	7a5b      	ldrb	r3, [r3, #9]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 8008a14:	4413      	add	r3, r2
 8008a16:	79fa      	ldrb	r2, [r7, #7]
 8008a18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a1a:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 8008a1c:	7a5b      	ldrb	r3, [r3, #9]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	b2d1      	uxtb	r1, r2
 8008a24:	4a0e      	ldr	r2, [pc, #56]	; (8008a60 <FATFS_LinkDriverEx+0x94>)
 8008a26:	7251      	strb	r1, [r2, #9]
 8008a28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a2a:	7dbb      	ldrb	r3, [r7, #22]
 8008a2c:	3330      	adds	r3, #48	; 0x30
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3301      	adds	r3, #1
 8008a38:	223a      	movs	r2, #58	; 0x3a
 8008a3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	3302      	adds	r3, #2
 8008a40:	222f      	movs	r2, #47	; 0x2f
 8008a42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3303      	adds	r3, #3
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	200000d4 	.word	0x200000d4

08008a64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a6e:	2200      	movs	r2, #0
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff ffaa 	bl	80089cc <FATFS_LinkDriverEx>
 8008a78:	4603      	mov	r3, r0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008a8a:	f7f8 fb17 	bl	80010bc <HAL_GetTick>
 8008a8e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008a90:	e006      	b.n	8008aa0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008a92:	f7fc fc69 	bl	8005368 <BSP_SD_GetCardState>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e009      	b.n	8008ab4 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008aa0:	f7f8 fb0c 	bl	80010bc <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d8f0      	bhi.n	8008a92 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008ac6:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <SD_CheckStatus+0x38>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008acc:	f7fc fc4c 	bl	8005368 <BSP_SD_GetCardState>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d107      	bne.n	8008ae6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008ad6:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <SD_CheckStatus+0x38>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <SD_CheckStatus+0x38>)
 8008ae4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008ae6:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <SD_CheckStatus+0x38>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	b2db      	uxtb	r3, r3
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000009 	.word	0x20000009

08008af8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008b02:	f7fc fbe5 	bl	80052d0 <BSP_SD_Init>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d107      	bne.n	8008b1c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff ffd4 	bl	8008abc <SD_CheckStatus>
 8008b14:	4603      	mov	r3, r0
 8008b16:	461a      	mov	r2, r3
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <SD_initialize+0x34>)
 8008b1a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008b1c:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <SD_initialize+0x34>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	b2db      	uxtb	r3, r3
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000009 	.word	0x20000009

08008b30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff ffbd 	bl	8008abc <SD_CheckStatus>
 8008b42:	4603      	mov	r3, r0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008b60:	f247 5030 	movw	r0, #30000	; 0x7530
 8008b64:	f7ff ff8d 	bl	8008a82 <SD_CheckStatusWithTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	da01      	bge.n	8008b72 <SD_read+0x26>
  {
    return res;
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	e03b      	b.n	8008bea <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	f7fc fbc2 	bl	8005300 <BSP_SD_ReadBlocks_DMA>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d132      	bne.n	8008be8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008b82:	4b1c      	ldr	r3, [pc, #112]	; (8008bf4 <SD_read+0xa8>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008b88:	f7f8 fa98 	bl	80010bc <HAL_GetTick>
 8008b8c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008b8e:	bf00      	nop
 8008b90:	4b18      	ldr	r3, [pc, #96]	; (8008bf4 <SD_read+0xa8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d108      	bne.n	8008baa <SD_read+0x5e>
 8008b98:	f7f8 fa90 	bl	80010bc <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	f247 522f 	movw	r2, #29999	; 0x752f
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d9f2      	bls.n	8008b90 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008baa:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <SD_read+0xa8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]
 8008bb6:	e017      	b.n	8008be8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <SD_read+0xa8>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008bbe:	f7f8 fa7d 	bl	80010bc <HAL_GetTick>
 8008bc2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008bc4:	e007      	b.n	8008bd6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008bc6:	f7fc fbcf 	bl	8005368 <BSP_SD_GetCardState>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <SD_read+0x8a>
          {
            res = RES_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008bd4:	e008      	b.n	8008be8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008bd6:	f7f8 fa71 	bl	80010bc <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	f247 522f 	movw	r2, #29999	; 0x752f
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d9ee      	bls.n	8008bc6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200000e4 	.word	0x200000e4

08008bf8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008c0c:	4b24      	ldr	r3, [pc, #144]	; (8008ca0 <SD_write+0xa8>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008c12:	f247 5030 	movw	r0, #30000	; 0x7530
 8008c16:	f7ff ff34 	bl	8008a82 <SD_CheckStatusWithTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da01      	bge.n	8008c24 <SD_write+0x2c>
  {
    return res;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	e038      	b.n	8008c96 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f7fc fb83 	bl	8005334 <BSP_SD_WriteBlocks_DMA>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d12f      	bne.n	8008c94 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008c34:	f7f8 fa42 	bl	80010bc <HAL_GetTick>
 8008c38:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008c3a:	bf00      	nop
 8008c3c:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <SD_write+0xa8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d108      	bne.n	8008c56 <SD_write+0x5e>
 8008c44:	f7f8 fa3a 	bl	80010bc <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d9f2      	bls.n	8008c3c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008c56:	4b12      	ldr	r3, [pc, #72]	; (8008ca0 <SD_write+0xa8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	75fb      	strb	r3, [r7, #23]
 8008c62:	e017      	b.n	8008c94 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008c64:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <SD_write+0xa8>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008c6a:	f7f8 fa27 	bl	80010bc <HAL_GetTick>
 8008c6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008c70:	e007      	b.n	8008c82 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008c72:	f7fc fb79 	bl	8005368 <BSP_SD_GetCardState>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <SD_write+0x8a>
          {
            res = RES_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8008c80:	e008      	b.n	8008c94 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008c82:	f7f8 fa1b 	bl	80010bc <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d9ee      	bls.n	8008c72 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200000e0 	.word	0x200000e0

08008ca4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08c      	sub	sp, #48	; 0x30
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	603a      	str	r2, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008cba:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <SD_ioctl+0xac>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <SD_ioctl+0x28>
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e03c      	b.n	8008d46 <SD_ioctl+0xa2>

  switch (cmd)
 8008ccc:	79bb      	ldrb	r3, [r7, #6]
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d834      	bhi.n	8008d3c <SD_ioctl+0x98>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <SD_ioctl+0x34>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008ce9 	.word	0x08008ce9
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d23 	.word	0x08008d23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008cee:	e028      	b.n	8008d42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008cf0:	f107 030c 	add.w	r3, r7, #12
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fc fb47 	bl	8005388 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008d06:	e01c      	b.n	8008d42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008d08:	f107 030c 	add.w	r3, r7, #12
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fc fb3b 	bl	8005388 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008d20:	e00f      	b.n	8008d42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008d22:	f107 030c 	add.w	r3, r7, #12
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc fb2e 	bl	8005388 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	0a5a      	lsrs	r2, r3, #9
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008d3a:	e002      	b.n	8008d42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008d3c:	2304      	movs	r3, #4
 8008d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3730      	adds	r7, #48	; 0x30
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000009 	.word	0x20000009

08008d54 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008d58:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <BSP_SD_WriteCpltCallback+0x14>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	200000e0 	.word	0x200000e0

08008d6c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <BSP_SD_ReadCpltCallback+0x14>)
 8008d72:	2201      	movs	r2, #1
 8008d74:	601a      	str	r2, [r3, #0]
}
 8008d76:	bf00      	nop
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	200000e4 	.word	0x200000e4

08008d84 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08a      	sub	sp, #40	; 0x28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008d90:	f001 ff72 	bl	800ac78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008d94:	4b67      	ldr	r3, [pc, #412]	; (8008f34 <pvPortMalloc+0x1b0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008d9c:	f000 f938 	bl	8009010 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008da0:	4b65      	ldr	r3, [pc, #404]	; (8008f38 <pvPortMalloc+0x1b4>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f040 80a7 	bne.w	8008efc <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d02d      	beq.n	8008e10 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008db4:	2208      	movs	r2, #8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d227      	bcs.n	8008e10 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d021      	beq.n	8008e16 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f023 0307 	bic.w	r3, r3, #7
 8008dd8:	3308      	adds	r3, #8
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d214      	bcs.n	8008e0a <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	3308      	adds	r3, #8
 8008de8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d010      	beq.n	8008e16 <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e0e:	e002      	b.n	8008e16 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	e000      	b.n	8008e18 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e16:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d06e      	beq.n	8008efc <pvPortMalloc+0x178>
 8008e1e:	4b47      	ldr	r3, [pc, #284]	; (8008f3c <pvPortMalloc+0x1b8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d869      	bhi.n	8008efc <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008e28:	4b45      	ldr	r3, [pc, #276]	; (8008f40 <pvPortMalloc+0x1bc>)
 8008e2a:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008e2c:	4b44      	ldr	r3, [pc, #272]	; (8008f40 <pvPortMalloc+0x1bc>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e32:	e004      	b.n	8008e3e <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d903      	bls.n	8008e50 <pvPortMalloc+0xcc>
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1f1      	bne.n	8008e34 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008e50:	4b38      	ldr	r3, [pc, #224]	; (8008f34 <pvPortMalloc+0x1b0>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d050      	beq.n	8008efc <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2208      	movs	r2, #8
 8008e60:	4413      	add	r3, r2
 8008e62:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	1ad2      	subs	r2, r2, r3
 8008e74:	2308      	movs	r3, #8
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d91f      	bls.n	8008ebc <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4413      	add	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <pvPortMalloc+0x120>
        __asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	613b      	str	r3, [r7, #16]
    }
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eb6:	69b8      	ldr	r0, [r7, #24]
 8008eb8:	f000 f90c 	bl	80090d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ebc:	4b1f      	ldr	r3, [pc, #124]	; (8008f3c <pvPortMalloc+0x1b8>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	4a1d      	ldr	r2, [pc, #116]	; (8008f3c <pvPortMalloc+0x1b8>)
 8008ec8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eca:	4b1c      	ldr	r3, [pc, #112]	; (8008f3c <pvPortMalloc+0x1b8>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b1d      	ldr	r3, [pc, #116]	; (8008f44 <pvPortMalloc+0x1c0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d203      	bcs.n	8008ede <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ed6:	4b19      	ldr	r3, [pc, #100]	; (8008f3c <pvPortMalloc+0x1b8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a1a      	ldr	r2, [pc, #104]	; (8008f44 <pvPortMalloc+0x1c0>)
 8008edc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <pvPortMalloc+0x1b4>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008ef2:	4b15      	ldr	r3, [pc, #84]	; (8008f48 <pvPortMalloc+0x1c4>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	4a13      	ldr	r2, [pc, #76]	; (8008f48 <pvPortMalloc+0x1c4>)
 8008efa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008efc:	f001 feca 	bl	800ac94 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8008f06:	f007 ff6b 	bl	8010de0 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <pvPortMalloc+0x1a6>
        __asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	60fb      	str	r3, [r7, #12]
    }
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <pvPortMalloc+0x1a4>
    return pvReturn;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3728      	adds	r7, #40	; 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200028f0 	.word	0x200028f0
 8008f38:	20002904 	.word	0x20002904
 8008f3c:	200028f4 	.word	0x200028f4
 8008f40:	200028e8 	.word	0x200028e8
 8008f44:	200028f8 	.word	0x200028f8
 8008f48:	200028fc 	.word	0x200028fc

08008f4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d04d      	beq.n	8008ffa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008f5e:	2308      	movs	r3, #8
 8008f60:	425b      	negs	r3, r3
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	4413      	add	r3, r2
 8008f66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	4b24      	ldr	r3, [pc, #144]	; (8009004 <vPortFree+0xb8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10a      	bne.n	8008f90 <vPortFree+0x44>
        __asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	60fb      	str	r3, [r7, #12]
    }
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <vPortFree+0x62>
        __asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	60bb      	str	r3, [r7, #8]
    }
 8008faa:	bf00      	nop
 8008fac:	e7fe      	b.n	8008fac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	4b14      	ldr	r3, [pc, #80]	; (8009004 <vPortFree+0xb8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01e      	beq.n	8008ffa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d11a      	bne.n	8008ffa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <vPortFree+0xb8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	401a      	ands	r2, r3
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008fd4:	f001 fe50 	bl	800ac78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <vPortFree+0xbc>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	4a09      	ldr	r2, [pc, #36]	; (8009008 <vPortFree+0xbc>)
 8008fe4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fe6:	6938      	ldr	r0, [r7, #16]
 8008fe8:	f000 f874 	bl	80090d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008fec:	4b07      	ldr	r3, [pc, #28]	; (800900c <vPortFree+0xc0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	4a06      	ldr	r2, [pc, #24]	; (800900c <vPortFree+0xc0>)
 8008ff4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008ff6:	f001 fe4d 	bl	800ac94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008ffa:	bf00      	nop
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20002904 	.word	0x20002904
 8009008:	200028f4 	.word	0x200028f4
 800900c:	20002900 	.word	0x20002900

08009010 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009016:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800901a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800901c:	4b27      	ldr	r3, [pc, #156]	; (80090bc <prvHeapInit+0xac>)
 800901e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00c      	beq.n	8009044 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3307      	adds	r3, #7
 800902e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 0307 	bic.w	r3, r3, #7
 8009036:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	4a1f      	ldr	r2, [pc, #124]	; (80090bc <prvHeapInit+0xac>)
 8009040:	4413      	add	r3, r2
 8009042:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009048:	4a1d      	ldr	r2, [pc, #116]	; (80090c0 <prvHeapInit+0xb0>)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800904e:	4b1c      	ldr	r3, [pc, #112]	; (80090c0 <prvHeapInit+0xb0>)
 8009050:	2200      	movs	r2, #0
 8009052:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	4413      	add	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800905c:	2208      	movs	r2, #8
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	1a9b      	subs	r3, r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 0307 	bic.w	r3, r3, #7
 800906a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4a15      	ldr	r2, [pc, #84]	; (80090c4 <prvHeapInit+0xb4>)
 8009070:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <prvHeapInit+0xb4>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2200      	movs	r2, #0
 8009078:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800907a:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <prvHeapInit+0xb4>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	1ad2      	subs	r2, r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009090:	4b0c      	ldr	r3, [pc, #48]	; (80090c4 <prvHeapInit+0xb4>)
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4a0a      	ldr	r2, [pc, #40]	; (80090c8 <prvHeapInit+0xb8>)
 800909e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4a09      	ldr	r2, [pc, #36]	; (80090cc <prvHeapInit+0xbc>)
 80090a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090a8:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <prvHeapInit+0xc0>)
 80090aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090ae:	601a      	str	r2, [r3, #0]
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	200000e8 	.word	0x200000e8
 80090c0:	200028e8 	.word	0x200028e8
 80090c4:	200028f0 	.word	0x200028f0
 80090c8:	200028f8 	.word	0x200028f8
 80090cc:	200028f4 	.word	0x200028f4
 80090d0:	20002904 	.word	0x20002904

080090d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090dc:	4b28      	ldr	r3, [pc, #160]	; (8009180 <prvInsertBlockIntoFreeList+0xac>)
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	e002      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x14>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d8f7      	bhi.n	80090e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4413      	add	r3, r2
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d108      	bne.n	8009116 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	441a      	add	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	441a      	add	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d118      	bne.n	800915c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b15      	ldr	r3, [pc, #84]	; (8009184 <prvInsertBlockIntoFreeList+0xb0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d00d      	beq.n	8009152 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	441a      	add	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	e008      	b.n	8009164 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009152:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <prvInsertBlockIntoFreeList+0xb0>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e003      	b.n	8009164 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d002      	beq.n	8009172 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	200028e8 	.word	0x200028e8
 8009184:	200028f0 	.word	0x200028f0

08009188 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f103 0208 	add.w	r2, r3, #8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f103 0208 	add.w	r2, r3, #8
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f103 0208 	add.w	r2, r3, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80091e2:	b480      	push	{r7}
 80091e4:	b085      	sub	sp, #20
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
}
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800922a:	b480      	push	{r7}
 800922c:	b085      	sub	sp, #20
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009240:	d103      	bne.n	800924a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e00c      	b.n	8009264 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3308      	adds	r3, #8
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e002      	b.n	8009258 <vListInsert+0x2e>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	429a      	cmp	r2, r3
 8009262:	d2f6      	bcs.n	8009252 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	601a      	str	r2, [r3, #0]
}
 8009290:	bf00      	nop
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6892      	ldr	r2, [r2, #8]
 80092b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6852      	ldr	r2, [r2, #4]
 80092bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d103      	bne.n	80092d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	1e5a      	subs	r2, r3, #1
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3b04      	subs	r3, #4
 8009300:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009308:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3b04      	subs	r3, #4
 800930e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 0201 	bic.w	r2, r3, #1
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3b04      	subs	r3, #4
 800931e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009320:	4a0c      	ldr	r2, [pc, #48]	; (8009354 <pxPortInitialiseStack+0x64>)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3b14      	subs	r3, #20
 800932a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3b04      	subs	r3, #4
 8009336:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f06f 0202 	mvn.w	r2, #2
 800933e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	3b20      	subs	r3, #32
 8009344:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009346:	68fb      	ldr	r3, [r7, #12]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	08009359 	.word	0x08009359

08009358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8009362:	4b12      	ldr	r3, [pc, #72]	; (80093ac <prvTaskExitError+0x54>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800936a:	d00a      	beq.n	8009382 <prvTaskExitError+0x2a>
        __asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60fb      	str	r3, [r7, #12]
    }
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <prvTaskExitError+0x28>
        __asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	60bb      	str	r3, [r7, #8]
    }
 8009394:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8009396:	bf00      	nop
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0fc      	beq.n	8009398 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800939e:	bf00      	nop
 80093a0:	bf00      	nop
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	2000000c 	.word	0x2000000c

080093b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <pxCurrentTCBConst2>)
 80093b2:	6819      	ldr	r1, [r3, #0]
 80093b4:	6808      	ldr	r0, [r1, #0]
 80093b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ba:	f380 8809 	msr	PSP, r0
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8811 	msr	BASEPRI, r0
 80093ca:	4770      	bx	lr
 80093cc:	f3af 8000 	nop.w

080093d0 <pxCurrentTCBConst2>:
 80093d0:	20002950 	.word	0x20002950
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop

080093d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80093d8:	4808      	ldr	r0, [pc, #32]	; (80093fc <prvPortStartFirstTask+0x24>)
 80093da:	6800      	ldr	r0, [r0, #0]
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f380 8808 	msr	MSP, r0
 80093e2:	f04f 0000 	mov.w	r0, #0
 80093e6:	f380 8814 	msr	CONTROL, r0
 80093ea:	b662      	cpsie	i
 80093ec:	b661      	cpsie	f
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	df00      	svc	0
 80093f8:	bf00      	nop
 80093fa:	0000      	.short	0x0000
 80093fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009400:	bf00      	nop
 8009402:	bf00      	nop

08009404 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800940a:	4b46      	ldr	r3, [pc, #280]	; (8009524 <xPortStartScheduler+0x120>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a46      	ldr	r2, [pc, #280]	; (8009528 <xPortStartScheduler+0x124>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d10a      	bne.n	800942a <xPortStartScheduler+0x26>
        __asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	613b      	str	r3, [r7, #16]
    }
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800942a:	4b3e      	ldr	r3, [pc, #248]	; (8009524 <xPortStartScheduler+0x120>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a3f      	ldr	r2, [pc, #252]	; (800952c <xPortStartScheduler+0x128>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d10a      	bne.n	800944a <xPortStartScheduler+0x46>
        __asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60fb      	str	r3, [r7, #12]
    }
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800944a:	4b39      	ldr	r3, [pc, #228]	; (8009530 <xPortStartScheduler+0x12c>)
 800944c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	22ff      	movs	r2, #255	; 0xff
 800945a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800946c:	b2da      	uxtb	r2, r3
 800946e:	4b31      	ldr	r3, [pc, #196]	; (8009534 <xPortStartScheduler+0x130>)
 8009470:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009472:	4b31      	ldr	r3, [pc, #196]	; (8009538 <xPortStartScheduler+0x134>)
 8009474:	2207      	movs	r2, #7
 8009476:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009478:	e009      	b.n	800948e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800947a:	4b2f      	ldr	r3, [pc, #188]	; (8009538 <xPortStartScheduler+0x134>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3b01      	subs	r3, #1
 8009480:	4a2d      	ldr	r2, [pc, #180]	; (8009538 <xPortStartScheduler+0x134>)
 8009482:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b80      	cmp	r3, #128	; 0x80
 8009498:	d0ef      	beq.n	800947a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800949a:	4b27      	ldr	r3, [pc, #156]	; (8009538 <xPortStartScheduler+0x134>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f1c3 0307 	rsb	r3, r3, #7
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d00a      	beq.n	80094bc <xPortStartScheduler+0xb8>
        __asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60bb      	str	r3, [r7, #8]
    }
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094bc:	4b1e      	ldr	r3, [pc, #120]	; (8009538 <xPortStartScheduler+0x134>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	4a1d      	ldr	r2, [pc, #116]	; (8009538 <xPortStartScheduler+0x134>)
 80094c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094c6:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <xPortStartScheduler+0x134>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094ce:	4a1a      	ldr	r2, [pc, #104]	; (8009538 <xPortStartScheduler+0x134>)
 80094d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80094da:	4b18      	ldr	r3, [pc, #96]	; (800953c <xPortStartScheduler+0x138>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a17      	ldr	r2, [pc, #92]	; (800953c <xPortStartScheduler+0x138>)
 80094e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80094e6:	4b15      	ldr	r3, [pc, #84]	; (800953c <xPortStartScheduler+0x138>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a14      	ldr	r2, [pc, #80]	; (800953c <xPortStartScheduler+0x138>)
 80094ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80094f2:	f000 f8e3 	bl	80096bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80094f6:	4b12      	ldr	r3, [pc, #72]	; (8009540 <xPortStartScheduler+0x13c>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80094fc:	f000 f902 	bl	8009704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009500:	4b10      	ldr	r3, [pc, #64]	; (8009544 <xPortStartScheduler+0x140>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a0f      	ldr	r2, [pc, #60]	; (8009544 <xPortStartScheduler+0x140>)
 8009506:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800950a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800950c:	f7ff ff64 	bl	80093d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009510:	f001 fd42 	bl	800af98 <vTaskSwitchContext>
    prvTaskExitError();
 8009514:	f7ff ff20 	bl	8009358 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	e000ed00 	.word	0xe000ed00
 8009528:	410fc271 	.word	0x410fc271
 800952c:	410fc270 	.word	0x410fc270
 8009530:	e000e400 	.word	0xe000e400
 8009534:	20002908 	.word	0x20002908
 8009538:	2000290c 	.word	0x2000290c
 800953c:	e000ed20 	.word	0xe000ed20
 8009540:	2000000c 	.word	0x2000000c
 8009544:	e000ef34 	.word	0xe000ef34

08009548 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
        __asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	607b      	str	r3, [r7, #4]
    }
 8009560:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009562:	4b0f      	ldr	r3, [pc, #60]	; (80095a0 <vPortEnterCritical+0x58>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	4a0d      	ldr	r2, [pc, #52]	; (80095a0 <vPortEnterCritical+0x58>)
 800956a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800956c:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <vPortEnterCritical+0x58>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d10f      	bne.n	8009594 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <vPortEnterCritical+0x5c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <vPortEnterCritical+0x4c>
        __asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	603b      	str	r3, [r7, #0]
    }
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <vPortEnterCritical+0x4a>
    }
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	2000000c 	.word	0x2000000c
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80095ae:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <vPortExitCritical+0x50>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <vPortExitCritical+0x24>
        __asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	607b      	str	r3, [r7, #4]
    }
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80095cc:	4b0a      	ldr	r3, [pc, #40]	; (80095f8 <vPortExitCritical+0x50>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <vPortExitCritical+0x50>)
 80095d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <vPortExitCritical+0x50>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d105      	bne.n	80095ea <vPortExitCritical+0x42>
 80095de:	2300      	movs	r3, #0
 80095e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80095e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	2000000c 	.word	0x2000000c
 80095fc:	00000000 	.word	0x00000000

08009600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009600:	f3ef 8009 	mrs	r0, PSP
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	4b15      	ldr	r3, [pc, #84]	; (8009660 <pxCurrentTCBConst>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	f01e 0f10 	tst.w	lr, #16
 8009610:	bf08      	it	eq
 8009612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961a:	6010      	str	r0, [r2, #0]
 800961c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009624:	f380 8811 	msr	BASEPRI, r0
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f001 fcb2 	bl	800af98 <vTaskSwitchContext>
 8009634:	f04f 0000 	mov.w	r0, #0
 8009638:	f380 8811 	msr	BASEPRI, r0
 800963c:	bc09      	pop	{r0, r3}
 800963e:	6819      	ldr	r1, [r3, #0]
 8009640:	6808      	ldr	r0, [r1, #0]
 8009642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009646:	f01e 0f10 	tst.w	lr, #16
 800964a:	bf08      	it	eq
 800964c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009650:	f380 8809 	msr	PSP, r0
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	f3af 8000 	nop.w

08009660 <pxCurrentTCBConst>:
 8009660:	20002950 	.word	0x20002950
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop

08009668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
        __asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	607b      	str	r3, [r7, #4]
    }
 8009680:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8009682:	f003 fe33 	bl	800d2ec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009686:	f001 fbc9 	bl	800ae1c <xTaskIncrementTick>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d006      	beq.n	800969e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8009690:	f003 fe8a 	bl	800d3a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <SysTick_Handler+0x50>)
 8009696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	e001      	b.n	80096a2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800969e:	f003 fe67 	bl	800d370 <SEGGER_SYSVIEW_RecordExitISR>
 80096a2:	2300      	movs	r3, #0
 80096a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f383 8811 	msr	BASEPRI, r3
    }
 80096ac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <vPortSetupTimerInterrupt+0x38>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <vPortSetupTimerInterrupt+0x3c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <vPortSetupTimerInterrupt+0x40>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	4a09      	ldr	r2, [pc, #36]	; (8009700 <vPortSetupTimerInterrupt+0x44>)
 80096da:	3b01      	subs	r3, #1
 80096dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096e0:	2207      	movs	r2, #7
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000e010 	.word	0xe000e010
 80096f4:	e000e018 	.word	0xe000e018
 80096f8:	20000014 	.word	0x20000014
 80096fc:	10624dd3 	.word	0x10624dd3
 8009700:	e000e014 	.word	0xe000e014

08009704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009714 <vPortEnableVFP+0x10>
 8009708:	6801      	ldr	r1, [r0, #0]
 800970a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800970e:	6001      	str	r1, [r0, #0]
 8009710:	4770      	bx	lr
 8009712:	0000      	.short	0x0000
 8009714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop

0800971c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8009722:	f000 f83b 	bl	800979c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009726:	f3ef 8305 	mrs	r3, IPSR
 800972a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b0f      	cmp	r3, #15
 8009730:	d914      	bls.n	800975c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009732:	4a16      	ldr	r2, [pc, #88]	; (800978c <vPortValidateInterruptPriority+0x70>)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800973c:	4b14      	ldr	r3, [pc, #80]	; (8009790 <vPortValidateInterruptPriority+0x74>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	7afa      	ldrb	r2, [r7, #11]
 8009742:	429a      	cmp	r2, r3
 8009744:	d20a      	bcs.n	800975c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	607b      	str	r3, [r7, #4]
    }
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <vPortValidateInterruptPriority+0x78>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <vPortValidateInterruptPriority+0x7c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d90a      	bls.n	8009782 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	603b      	str	r3, [r7, #0]
    }
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <vPortValidateInterruptPriority+0x64>
    }
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	e000e3f0 	.word	0xe000e3f0
 8009790:	20002908 	.word	0x20002908
 8009794:	e000ed0c 	.word	0xe000ed0c
 8009798:	2000290c 	.word	0x2000290c

0800979c <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097a2:	4b1f      	ldr	r3, [pc, #124]	; (8009820 <vSetVarulMaxPRIGROUPValue+0x84>)
 80097a4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	22ff      	movs	r2, #255	; 0xff
 80097aa:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097b4:	4b1b      	ldr	r3, [pc, #108]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 80097b6:	2207      	movs	r2, #7
 80097b8:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ba:	e009      	b.n	80097d0 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80097bc:	4b19      	ldr	r3, [pc, #100]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	4a18      	ldr	r2, [pc, #96]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 80097c4:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d8:	2b80      	cmp	r3, #128	; 0x80
 80097da:	d0ef      	beq.n	80097bc <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097dc:	4b11      	ldr	r3, [pc, #68]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f1c3 0307 	rsb	r3, r3, #7
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d00a      	beq.n	80097fe <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	60bb      	str	r3, [r7, #8]
    }
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	4a07      	ldr	r2, [pc, #28]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009806:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009810:	4a04      	ldr	r2, [pc, #16]	; (8009824 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009812:	6013      	str	r3, [r2, #0]
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	e000e400 	.word	0xe000e400
 8009824:	2000290c 	.word	0x2000290c

08009828 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <xQueueGenericReset+0x2a>
        __asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60bb      	str	r3, [r7, #8]
    }
 800984e:	bf00      	nop
 8009850:	e7fe      	b.n	8009850 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8009852:	f7ff fe79 	bl	8009548 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009862:	fb01 f303 	mul.w	r3, r1, r3
 8009866:	441a      	add	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	3b01      	subs	r3, #1
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009888:	fb01 f303 	mul.w	r3, r1, r3
 800988c:	441a      	add	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	22ff      	movs	r2, #255	; 0xff
 800989e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d114      	bne.n	80098d2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01a      	beq.n	80098e6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3310      	adds	r3, #16
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 fc53 	bl	800b160 <xTaskRemoveFromEventList>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d012      	beq.n	80098e6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80098c0:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <xQueueGenericReset+0xcc>)
 80098c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	e009      	b.n	80098e6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3310      	adds	r3, #16
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff fc56 	bl	8009188 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3324      	adds	r3, #36	; 0x24
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff fc51 	bl	8009188 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80098e6:	f7ff fe5f 	bl	80095a8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80098ea:	2301      	movs	r3, #1
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08e      	sub	sp, #56	; 0x38
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <xQueueGenericCreateStatic+0x52>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <xQueueGenericCreateStatic+0x56>
 800994a:	2301      	movs	r3, #1
 800994c:	e000      	b.n	8009950 <xQueueGenericCreateStatic+0x58>
 800994e:	2300      	movs	r3, #0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	623b      	str	r3, [r7, #32]
    }
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <xQueueGenericCreateStatic+0x7e>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <xQueueGenericCreateStatic+0x82>
 8009976:	2301      	movs	r3, #1
 8009978:	e000      	b.n	800997c <xQueueGenericCreateStatic+0x84>
 800997a:	2300      	movs	r3, #0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	61fb      	str	r3, [r7, #28]
    }
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8009996:	2350      	movs	r3, #80	; 0x50
 8009998:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b50      	cmp	r3, #80	; 0x50
 800999e:	d00a      	beq.n	80099b6 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	61bb      	str	r3, [r7, #24]
    }
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099b6:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 80099bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00d      	beq.n	80099de <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	4613      	mov	r3, r2
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	68b9      	ldr	r1, [r7, #8]
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f868 	bl	8009aae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80099e0:	4618      	mov	r0, r3
 80099e2:	3730      	adds	r7, #48	; 0x30
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08c      	sub	sp, #48	; 0x30
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	4613      	mov	r3, r2
 80099f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <xQueueGenericCreate+0x2a>
        __asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	61bb      	str	r3, [r7, #24]
    }
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	fb02 f303 	mul.w	r3, r2, r3
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d006      	beq.n	8009a30 <xQueueGenericCreate+0x48>
 8009a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d101      	bne.n	8009a34 <xQueueGenericCreate+0x4c>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e000      	b.n	8009a36 <xQueueGenericCreate+0x4e>
 8009a34:	2300      	movs	r3, #0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <xQueueGenericCreate+0x68>
        __asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	617b      	str	r3, [r7, #20]
    }
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8009a56:	d90a      	bls.n	8009a6e <xQueueGenericCreate+0x86>
        __asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	613b      	str	r3, [r7, #16]
    }
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	3350      	adds	r3, #80	; 0x50
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff f986 	bl	8008d84 <pvPortMalloc>
 8009a78:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d011      	beq.n	8009aa4 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	3350      	adds	r3, #80	; 0x50
 8009a88:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a92:	79fa      	ldrb	r2, [r7, #7]
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 f805 	bl	8009aae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
    }
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3728      	adds	r7, #40	; 0x28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d103      	bne.n	8009aca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	69ba      	ldr	r2, [r7, #24]
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	e002      	b.n	8009ad0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009adc:	2101      	movs	r1, #1
 8009ade:	69b8      	ldr	r0, [r7, #24]
 8009ae0:	f7ff fea2 	bl	8009828 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	78fa      	ldrb	r2, [r7, #3]
 8009ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	68f9      	ldr	r1, [r7, #12]
 8009af2:	2073      	movs	r0, #115	; 0x73
 8009af4:	f003 f82a 	bl	800cb4c <SEGGER_SYSVIEW_RecordU32x3>
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00e      	beq.n	8009b2c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009b20:	2300      	movs	r3, #0
 8009b22:	2200      	movs	r2, #0
 8009b24:	2100      	movs	r1, #0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f81c 	bl	8009b64 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	617b      	str	r3, [r7, #20]
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6939      	ldr	r1, [r7, #16]
 8009b4c:	6978      	ldr	r0, [r7, #20]
 8009b4e:	f7ff ff4b 	bl	80099e8 <xQueueGenericCreate>
 8009b52:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff ffd3 	bl	8009b00 <prvInitialiseMutex>

        return xNewQueue;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
    }
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b090      	sub	sp, #64	; 0x40
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b72:	2300      	movs	r3, #0
 8009b74:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <xQueueGenericSend+0x32>
        __asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d103      	bne.n	8009ba4 <xQueueGenericSend+0x40>
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <xQueueGenericSend+0x44>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e000      	b.n	8009baa <xQueueGenericSend+0x46>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <xQueueGenericSend+0x60>
        __asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d103      	bne.n	8009bd2 <xQueueGenericSend+0x6e>
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d101      	bne.n	8009bd6 <xQueueGenericSend+0x72>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e000      	b.n	8009bd8 <xQueueGenericSend+0x74>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <xQueueGenericSend+0x8e>
        __asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	623b      	str	r3, [r7, #32]
    }
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bf2:	f001 fcaf 	bl	800b554 <xTaskGetSchedulerState>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <xQueueGenericSend+0x9e>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <xQueueGenericSend+0xa2>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <xQueueGenericSend+0xa4>
 8009c06:	2300      	movs	r3, #0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <xQueueGenericSend+0xbe>
        __asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	61fb      	str	r3, [r7, #28]
    }
 8009c1e:	bf00      	nop
 8009c20:	e7fe      	b.n	8009c20 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009c22:	f7ff fc91 	bl	8009548 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d302      	bcc.n	8009c38 <xQueueGenericSend+0xd4>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d136      	bne.n	8009ca6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f003 fd12 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	205a      	movs	r0, #90	; 0x5a
 8009c4e:	f002 fff3 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c58:	f000 fbcc 	bl	800a3f4 <prvCopyDataToQueue>
 8009c5c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d010      	beq.n	8009c88 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	3324      	adds	r3, #36	; 0x24
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 fa78 	bl	800b160 <xTaskRemoveFromEventList>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d013      	beq.n	8009c9e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009c76:	4b4d      	ldr	r3, [pc, #308]	; (8009dac <xQueueGenericSend+0x248>)
 8009c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	e00a      	b.n	8009c9e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d007      	beq.n	8009c9e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009c8e:	4b47      	ldr	r3, [pc, #284]	; (8009dac <xQueueGenericSend+0x248>)
 8009c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8009c9e:	f7ff fc83 	bl	80095a8 <vPortExitCritical>
                return pdPASS;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e07d      	b.n	8009da2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d110      	bne.n	8009cce <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009cac:	f7ff fc7c 	bl	80095a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f003 fcd6 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	205a      	movs	r0, #90	; 0x5a
 8009cc6:	f002 ffb7 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e069      	b.n	8009da2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d106      	bne.n	8009ce2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009cd4:	f107 0314 	add.w	r3, r7, #20
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 faa9 	bl	800b230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009ce2:	f7ff fc61 	bl	80095a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009ce6:	f000 ffc7 	bl	800ac78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009cea:	f7ff fc2d 	bl	8009548 <vPortEnterCritical>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cf4:	b25b      	sxtb	r3, r3
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cfa:	d103      	bne.n	8009d04 <xQueueGenericSend+0x1a0>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d0a:	b25b      	sxtb	r3, r3
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d10:	d103      	bne.n	8009d1a <xQueueGenericSend+0x1b6>
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d1a:	f7ff fc45 	bl	80095a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d1e:	1d3a      	adds	r2, r7, #4
 8009d20:	f107 0314 	add.w	r3, r7, #20
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 fa98 	bl	800b25c <xTaskCheckForTimeOut>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d124      	bne.n	8009d7c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d34:	f000 fc56 	bl	800a5e4 <prvIsQueueFull>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	3310      	adds	r3, #16
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4611      	mov	r1, r2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f9b8 	bl	800b0bc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d4e:	f000 fbe1 	bl	800a514 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009d52:	f000 ff9f 	bl	800ac94 <xTaskResumeAll>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f47f af62 	bne.w	8009c22 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <xQueueGenericSend+0x248>)
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	e758      	b.n	8009c22 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d72:	f000 fbcf 	bl	800a514 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009d76:	f000 ff8d 	bl	800ac94 <xTaskResumeAll>
 8009d7a:	e752      	b.n	8009c22 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d7e:	f000 fbc9 	bl	800a514 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009d82:	f000 ff87 	bl	800ac94 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f003 fc6b 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	460b      	mov	r3, r1
 8009d98:	4601      	mov	r1, r0
 8009d9a:	205a      	movs	r0, #90	; 0x5a
 8009d9c:	f002 ff4c 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8009da0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3738      	adds	r7, #56	; 0x38
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b090      	sub	sp, #64	; 0x40
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d103      	bne.n	8009dec <xQueueGenericSendFromISR+0x3c>
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <xQueueGenericSendFromISR+0x40>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <xQueueGenericSendFromISR+0x42>
 8009df0:	2300      	movs	r3, #0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d103      	bne.n	8009e1a <xQueueGenericSendFromISR+0x6a>
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d101      	bne.n	8009e1e <xQueueGenericSendFromISR+0x6e>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <xQueueGenericSendFromISR+0x70>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	623b      	str	r3, [r7, #32]
    }
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e3a:	f7ff fc6f 	bl	800971c <vPortValidateInterruptPriority>
        __asm volatile
 8009e3e:	f3ef 8211 	mrs	r2, BASEPRI
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	61fa      	str	r2, [r7, #28]
 8009e54:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8009e56:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d302      	bcc.n	8009e6c <xQueueGenericSendFromISR+0xbc>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d148      	bne.n	8009efe <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f003 fbf0 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 8009e84:	4601      	mov	r1, r0
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	2060      	movs	r0, #96	; 0x60
 8009e8c:	f002 fe04 	bl	800ca98 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e96:	f000 faad 	bl	800a3f4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009e9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ea2:	d112      	bne.n	8009eca <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d025      	beq.n	8009ef8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	3324      	adds	r3, #36	; 0x24
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 f955 	bl	800b160 <xTaskRemoveFromEventList>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01d      	beq.n	8009ef8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d01a      	beq.n	8009ef8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	e016      	b.n	8009ef8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009eca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ece:	2b7f      	cmp	r3, #127	; 0x7f
 8009ed0:	d10a      	bne.n	8009ee8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	617b      	str	r3, [r7, #20]
    }
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009eec:	3301      	adds	r3, #1
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	b25a      	sxtb	r2, r3
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8009efc:	e00b      	b.n	8009f16 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	4618      	mov	r0, r3
 8009f02:	f003 fbaf 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 8009f06:	4601      	mov	r1, r0
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	2060      	movs	r0, #96	; 0x60
 8009f0e:	f002 fdc3 	bl	800ca98 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f18:	613b      	str	r3, [r7, #16]
        __asm volatile
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f383 8811 	msr	BASEPRI, r3
    }
 8009f20:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3740      	adds	r7, #64	; 0x40
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b08f      	sub	sp, #60	; 0x3c
 8009f30:	af02      	add	r7, sp, #8
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <xQueueReceive+0x30>
        __asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	623b      	str	r3, [r7, #32]
    }
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d103      	bne.n	8009f6a <xQueueReceive+0x3e>
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <xQueueReceive+0x42>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <xQueueReceive+0x44>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueReceive+0x5e>
        __asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	61fb      	str	r3, [r7, #28]
    }
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f8a:	f001 fae3 	bl	800b554 <xTaskGetSchedulerState>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d102      	bne.n	8009f9a <xQueueReceive+0x6e>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <xQueueReceive+0x72>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e000      	b.n	8009fa0 <xQueueReceive+0x74>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xQueueReceive+0x8e>
        __asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	61bb      	str	r3, [r7, #24]
    }
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009fba:	f7ff fac5 	bl	8009548 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d02f      	beq.n	800a02a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fce:	f000 fa7b 	bl	800a4c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f003 fb45 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	2000      	movs	r0, #0
 8009fde:	f003 fb41 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	9100      	str	r1, [sp, #0]
 8009fea:	4621      	mov	r1, r4
 8009fec:	205c      	movs	r0, #92	; 0x5c
 8009fee:	f002 fe23 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	1e5a      	subs	r2, r3, #1
 8009ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00f      	beq.n	800a022 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	3310      	adds	r3, #16
 800a006:	4618      	mov	r0, r3
 800a008:	f001 f8aa 	bl	800b160 <xTaskRemoveFromEventList>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d007      	beq.n	800a022 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a012:	4b4d      	ldr	r3, [pc, #308]	; (800a148 <xQueueReceive+0x21c>)
 800a014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a022:	f7ff fac1 	bl	80095a8 <vPortExitCritical>
                return pdPASS;
 800a026:	2301      	movs	r3, #1
 800a028:	e08a      	b.n	800a140 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d113      	bne.n	800a058 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a030:	f7ff faba 	bl	80095a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	4618      	mov	r0, r3
 800a038:	f003 fb14 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a03c:	4604      	mov	r4, r0
 800a03e:	2000      	movs	r0, #0
 800a040:	f003 fb10 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a044:	4602      	mov	r2, r0
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2101      	movs	r1, #1
 800a04a:	9100      	str	r1, [sp, #0]
 800a04c:	4621      	mov	r1, r4
 800a04e:	205c      	movs	r0, #92	; 0x5c
 800a050:	f002 fdf2 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800a054:	2300      	movs	r3, #0
 800a056:	e073      	b.n	800a140 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a05e:	f107 0310 	add.w	r3, r7, #16
 800a062:	4618      	mov	r0, r3
 800a064:	f001 f8e4 	bl	800b230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a068:	2301      	movs	r3, #1
 800a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a06c:	f7ff fa9c 	bl	80095a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a070:	f000 fe02 	bl	800ac78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a074:	f7ff fa68 	bl	8009548 <vPortEnterCritical>
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a07e:	b25b      	sxtb	r3, r3
 800a080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a084:	d103      	bne.n	800a08e <xQueueReceive+0x162>
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a094:	b25b      	sxtb	r3, r3
 800a096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a09a:	d103      	bne.n	800a0a4 <xQueueReceive+0x178>
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0a4:	f7ff fa80 	bl	80095a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0a8:	1d3a      	adds	r2, r7, #4
 800a0aa:	f107 0310 	add.w	r3, r7, #16
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 f8d3 	bl	800b25c <xTaskCheckForTimeOut>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d124      	bne.n	800a106 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0be:	f000 fa7b 	bl	800a5b8 <prvIsQueueEmpty>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d018      	beq.n	800a0fa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	3324      	adds	r3, #36	; 0x24
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fff3 	bl	800b0bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a0d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0d8:	f000 fa1c 	bl	800a514 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a0dc:	f000 fdda 	bl	800ac94 <xTaskResumeAll>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f47f af69 	bne.w	8009fba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800a0e8:	4b17      	ldr	r3, [pc, #92]	; (800a148 <xQueueReceive+0x21c>)
 800a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	e75f      	b.n	8009fba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800a0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0fc:	f000 fa0a 	bl	800a514 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a100:	f000 fdc8 	bl	800ac94 <xTaskResumeAll>
 800a104:	e759      	b.n	8009fba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800a106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a108:	f000 fa04 	bl	800a514 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a10c:	f000 fdc2 	bl	800ac94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a112:	f000 fa51 	bl	800a5b8 <prvIsQueueEmpty>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f43f af4e 	beq.w	8009fba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	4618      	mov	r0, r3
 800a122:	f003 fa9f 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a126:	4604      	mov	r4, r0
 800a128:	2000      	movs	r0, #0
 800a12a:	f003 fa9b 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a12e:	4602      	mov	r2, r0
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2101      	movs	r1, #1
 800a134:	9100      	str	r1, [sp, #0]
 800a136:	4621      	mov	r1, r4
 800a138:	205c      	movs	r0, #92	; 0x5c
 800a13a:	f002 fd7d 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800a13e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800a140:	4618      	mov	r0, r3
 800a142:	3734      	adds	r7, #52	; 0x34
 800a144:	46bd      	mov	sp, r7
 800a146:	bd90      	pop	{r4, r7, pc}
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800a14c:	b590      	push	{r4, r7, lr}
 800a14e:	b091      	sub	sp, #68	; 0x44
 800a150:	af02      	add	r7, sp, #8
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a156:	2300      	movs	r3, #0
 800a158:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800a15e:	2300      	movs	r3, #0
 800a160:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10a      	bne.n	800a17e <xQueueSemaphoreTake+0x32>
        __asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	623b      	str	r3, [r7, #32]
    }
 800a17a:	bf00      	nop
 800a17c:	e7fe      	b.n	800a17c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <xQueueSemaphoreTake+0x50>
        __asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	61fb      	str	r3, [r7, #28]
    }
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a19c:	f001 f9da 	bl	800b554 <xTaskGetSchedulerState>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <xQueueSemaphoreTake+0x60>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <xQueueSemaphoreTake+0x64>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e000      	b.n	800a1b2 <xQueueSemaphoreTake+0x66>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <xQueueSemaphoreTake+0x80>
        __asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	61bb      	str	r3, [r7, #24]
    }
 800a1c8:	bf00      	nop
 800a1ca:	e7fe      	b.n	800a1ca <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a1cc:	f7ff f9bc 	bl	8009548 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d034      	beq.n	800a246 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f003 fa40 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	f003 fa3c 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	9100      	str	r1, [sp, #0]
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	205c      	movs	r0, #92	; 0x5c
 800a1f8:	f002 fd1e 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fe:	1e5a      	subs	r2, r3, #1
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a20c:	f001 fb32 	bl	800b874 <pvTaskIncrementMutexHeldCount>
 800a210:	4602      	mov	r2, r0
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00f      	beq.n	800a23e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	3310      	adds	r3, #16
 800a222:	4618      	mov	r0, r3
 800a224:	f000 ff9c 	bl	800b160 <xTaskRemoveFromEventList>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d007      	beq.n	800a23e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a22e:	4b64      	ldr	r3, [pc, #400]	; (800a3c0 <xQueueSemaphoreTake+0x274>)
 800a230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a23e:	f7ff f9b3 	bl	80095a8 <vPortExitCritical>
                return pdPASS;
 800a242:	2301      	movs	r3, #1
 800a244:	e0b7      	b.n	800a3b6 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d121      	bne.n	800a290 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00a      	beq.n	800a268 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	617b      	str	r3, [r7, #20]
    }
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800a268:	f7ff f99e 	bl	80095a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	4618      	mov	r0, r3
 800a270:	f003 f9f8 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a274:	4604      	mov	r4, r0
 800a276:	2000      	movs	r0, #0
 800a278:	f003 f9f4 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a27c:	4602      	mov	r2, r0
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2101      	movs	r1, #1
 800a282:	9100      	str	r1, [sp, #0]
 800a284:	4621      	mov	r1, r4
 800a286:	205c      	movs	r0, #92	; 0x5c
 800a288:	f002 fcd6 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800a28c:	2300      	movs	r3, #0
 800a28e:	e092      	b.n	800a3b6 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a292:	2b00      	cmp	r3, #0
 800a294:	d106      	bne.n	800a2a4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a296:	f107 030c 	add.w	r3, r7, #12
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 ffc8 	bl	800b230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a2a4:	f7ff f980 	bl	80095a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a2a8:	f000 fce6 	bl	800ac78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a2ac:	f7ff f94c 	bl	8009548 <vPortEnterCritical>
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2b6:	b25b      	sxtb	r3, r3
 800a2b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2bc:	d103      	bne.n	800a2c6 <xQueueSemaphoreTake+0x17a>
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2cc:	b25b      	sxtb	r3, r3
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d2:	d103      	bne.n	800a2dc <xQueueSemaphoreTake+0x190>
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2dc:	f7ff f964 	bl	80095a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2e0:	463a      	mov	r2, r7
 800a2e2:	f107 030c 	add.w	r3, r7, #12
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 ffb7 	bl	800b25c <xTaskCheckForTimeOut>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d132      	bne.n	800a35a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2f6:	f000 f95f 	bl	800a5b8 <prvIsQueueEmpty>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d026      	beq.n	800a34e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d109      	bne.n	800a31c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 800a308:	f7ff f91e 	bl	8009548 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	4618      	mov	r0, r3
 800a312:	f001 f93d 	bl	800b590 <xTaskPriorityInherit>
 800a316:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800a318:	f7ff f946 	bl	80095a8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	3324      	adds	r3, #36	; 0x24
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	4611      	mov	r1, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fec9 	bl	800b0bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a32a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a32c:	f000 f8f2 	bl	800a514 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a330:	f000 fcb0 	bl	800ac94 <xTaskResumeAll>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	f47f af48 	bne.w	800a1cc <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800a33c:	4b20      	ldr	r3, [pc, #128]	; (800a3c0 <xQueueSemaphoreTake+0x274>)
 800a33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	e73e      	b.n	800a1cc <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800a34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a350:	f000 f8e0 	bl	800a514 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a354:	f000 fc9e 	bl	800ac94 <xTaskResumeAll>
 800a358:	e738      	b.n	800a1cc <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800a35a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a35c:	f000 f8da 	bl	800a514 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a360:	f000 fc98 	bl	800ac94 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a366:	f000 f927 	bl	800a5b8 <prvIsQueueEmpty>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f43f af2d 	beq.w	800a1cc <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00d      	beq.n	800a394 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 800a378:	f7ff f8e6 	bl	8009548 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a37e:	f000 f821 	bl	800a3c4 <prvGetDisinheritPriorityAfterTimeout>
 800a382:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 f9e8 	bl	800b760 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800a390:	f7ff f90a 	bl	80095a8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	4618      	mov	r0, r3
 800a398:	f003 f964 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a39c:	4604      	mov	r4, r0
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f003 f960 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	9100      	str	r1, [sp, #0]
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	205c      	movs	r0, #92	; 0x5c
 800a3b0:	f002 fc42 	bl	800cc38 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800a3b4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	373c      	adds	r7, #60	; 0x3c
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd90      	pop	{r4, r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	e001      	b.n	800a3e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
    }
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a400:	2300      	movs	r3, #0
 800a402:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10d      	bne.n	800a42e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d14d      	bne.n	800a4b6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 f928 	bl	800b674 <xTaskPriorityDisinherit>
 800a424:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	609a      	str	r2, [r3, #8]
 800a42c:	e043      	b.n	800a4b6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d119      	bne.n	800a468 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6858      	ldr	r0, [r3, #4]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43c:	461a      	mov	r2, r3
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	f00a faaa 	bl	8014998 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44c:	441a      	add	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d32b      	bcc.n	800a4b6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	e026      	b.n	800a4b6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	68d8      	ldr	r0, [r3, #12]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a470:	461a      	mov	r2, r3
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	f00a fa90 	bl	8014998 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	68da      	ldr	r2, [r3, #12]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	425b      	negs	r3, r3
 800a482:	441a      	add	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	68da      	ldr	r2, [r3, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d207      	bcs.n	800a4a4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	425b      	negs	r3, r3
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d105      	bne.n	800a4b6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800a4be:	697b      	ldr	r3, [r7, #20]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d018      	beq.n	800a50c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68da      	ldr	r2, [r3, #12]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	441a      	add	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d303      	bcc.n	800a4fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68d9      	ldr	r1, [r3, #12]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	461a      	mov	r2, r3
 800a506:	6838      	ldr	r0, [r7, #0]
 800a508:	f00a fa46 	bl	8014998 <memcpy>
    }
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800a51c:	f7ff f814 	bl	8009548 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a526:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a528:	e011      	b.n	800a54e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d012      	beq.n	800a558 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	3324      	adds	r3, #36	; 0x24
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fe12 	bl	800b160 <xTaskRemoveFromEventList>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800a542:	f000 fef1 	bl	800b328 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	3b01      	subs	r3, #1
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a552:	2b00      	cmp	r3, #0
 800a554:	dce9      	bgt.n	800a52a <prvUnlockQueue+0x16>
 800a556:	e000      	b.n	800a55a <prvUnlockQueue+0x46>
                        break;
 800a558:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	22ff      	movs	r2, #255	; 0xff
 800a55e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800a562:	f7ff f821 	bl	80095a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800a566:	f7fe ffef 	bl	8009548 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a570:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a572:	e011      	b.n	800a598 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d012      	beq.n	800a5a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3310      	adds	r3, #16
 800a580:	4618      	mov	r0, r3
 800a582:	f000 fded 	bl	800b160 <xTaskRemoveFromEventList>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a58c:	f000 fecc 	bl	800b328 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	3b01      	subs	r3, #1
 800a594:	b2db      	uxtb	r3, r3
 800a596:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	dce9      	bgt.n	800a574 <prvUnlockQueue+0x60>
 800a5a0:	e000      	b.n	800a5a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800a5a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	22ff      	movs	r2, #255	; 0xff
 800a5a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800a5ac:	f7fe fffc 	bl	80095a8 <vPortExitCritical>
}
 800a5b0:	bf00      	nop
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a5c0:	f7fe ffc2 	bl	8009548 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d102      	bne.n	800a5d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e001      	b.n	800a5d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a5d6:	f7fe ffe7 	bl	80095a8 <vPortExitCritical>

    return xReturn;
 800a5da:	68fb      	ldr	r3, [r7, #12]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a5ec:	f7fe ffac 	bl	8009548 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d102      	bne.n	800a602 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	e001      	b.n	800a606 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a606:	f7fe ffcf 	bl	80095a8 <vPortExitCritical>

    return xReturn;
 800a60a:	68fb      	ldr	r3, [r7, #12]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
 800a622:	e01e      	b.n	800a662 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a624:	4a13      	ldr	r2, [pc, #76]	; (800a674 <vQueueAddToRegistry+0x60>)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d115      	bne.n	800a65c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a630:	4910      	ldr	r1, [pc, #64]	; (800a674 <vQueueAddToRegistry+0x60>)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800a63a:	4a0e      	ldr	r2, [pc, #56]	; (800a674 <vQueueAddToRegistry+0x60>)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	4413      	add	r3, r2
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4618      	mov	r0, r3
 800a64a:	f003 f80b 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800a64e:	4601      	mov	r1, r0
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	2071      	movs	r0, #113	; 0x71
 800a656:	f002 fa1f 	bl	800ca98 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800a65a:	e006      	b.n	800a66a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2b07      	cmp	r3, #7
 800a666:	d9dd      	bls.n	800a624 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20002910 	.word	0x20002910

0800a678 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a688:	f7fe ff5e 	bl	8009548 <vPortEnterCritical>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a692:	b25b      	sxtb	r3, r3
 800a694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a698:	d103      	bne.n	800a6a2 <vQueueWaitForMessageRestricted+0x2a>
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ae:	d103      	bne.n	800a6b8 <vQueueWaitForMessageRestricted+0x40>
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6b8:	f7fe ff76 	bl	80095a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d106      	bne.n	800a6d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	3324      	adds	r3, #36	; 0x24
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fd19 	bl	800b104 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a6d2:	6978      	ldr	r0, [r7, #20]
 800a6d4:	f7ff ff1e 	bl	800a514 <prvUnlockQueue>
    }
 800a6d8:	bf00      	nop
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08e      	sub	sp, #56	; 0x38
 800a6e4:	af04      	add	r7, sp, #16
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <xTaskCreateStatic+0x2a>
        __asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	623b      	str	r3, [r7, #32]
    }
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xTaskCreateStatic+0x46>
        __asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	61fb      	str	r3, [r7, #28]
    }
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800a726:	235c      	movs	r3, #92	; 0x5c
 800a728:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b5c      	cmp	r3, #92	; 0x5c
 800a72e:	d00a      	beq.n	800a746 <xTaskCreateStatic+0x66>
        __asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	61bb      	str	r3, [r7, #24]
    }
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a746:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d01e      	beq.n	800a78c <xTaskCreateStatic+0xac>
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01b      	beq.n	800a78c <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a75c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	2202      	movs	r2, #2
 800a762:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a766:	2300      	movs	r3, #0
 800a768:	9303      	str	r3, [sp, #12]
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	9302      	str	r3, [sp, #8]
 800a76e:	f107 0314 	add.w	r3, r7, #20
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 f850 	bl	800a824 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a786:	f000 f8e3 	bl	800a950 <prvAddNewTaskToReadyList>
 800a78a:	e001      	b.n	800a790 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800a790:	697b      	ldr	r3, [r7, #20]
    }
 800a792:	4618      	mov	r0, r3
 800a794:	3728      	adds	r7, #40	; 0x28
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b08c      	sub	sp, #48	; 0x30
 800a79e:	af04      	add	r7, sp, #16
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	603b      	str	r3, [r7, #0]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7aa:	88fb      	ldrh	r3, [r7, #6]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fae8 	bl	8008d84 <pvPortMalloc>
 800a7b4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00e      	beq.n	800a7da <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7bc:	205c      	movs	r0, #92	; 0x5c
 800a7be:	f7fe fae1 	bl	8008d84 <pvPortMalloc>
 800a7c2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	631a      	str	r2, [r3, #48]	; 0x30
 800a7d0:	e005      	b.n	800a7de <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a7d2:	6978      	ldr	r0, [r7, #20]
 800a7d4:	f7fe fbba 	bl	8008f4c <vPortFree>
 800a7d8:	e001      	b.n	800a7de <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d017      	beq.n	800a814 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7ec:	88fa      	ldrh	r2, [r7, #6]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	9303      	str	r3, [sp, #12]
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	9302      	str	r3, [sp, #8]
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 f80e 	bl	800a824 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a808:	69f8      	ldr	r0, [r7, #28]
 800a80a:	f000 f8a1 	bl	800a950 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a80e:	2301      	movs	r3, #1
 800a810:	61bb      	str	r3, [r7, #24]
 800a812:	e002      	b.n	800a81a <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a818:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a81a:	69bb      	ldr	r3, [r7, #24]
    }
 800a81c:	4618      	mov	r0, r3
 800a81e:	3720      	adds	r7, #32
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	461a      	mov	r2, r3
 800a83c:	21a5      	movs	r1, #165	; 0xa5
 800a83e:	f00a f8b9 	bl	80149b4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a84c:	3b01      	subs	r3, #1
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	f023 0307 	bic.w	r3, r3, #7
 800a85a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f003 0307 	and.w	r3, r3, #7
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <prvInitialiseNewTask+0x58>
        __asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	617b      	str	r3, [r7, #20]
    }
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01f      	beq.n	800a8c2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a882:	2300      	movs	r3, #0
 800a884:	61fb      	str	r3, [r7, #28]
 800a886:	e012      	b.n	800a8ae <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	4413      	add	r3, r2
 800a88e:	7819      	ldrb	r1, [r3, #0]
 800a890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	4413      	add	r3, r2
 800a896:	3334      	adds	r3, #52	; 0x34
 800a898:	460a      	mov	r2, r1
 800a89a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d006      	beq.n	800a8b6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	2b0f      	cmp	r3, #15
 800a8b2:	d9e9      	bls.n	800a888 <prvInitialiseNewTask+0x64>
 800a8b4:	e000      	b.n	800a8b8 <prvInitialiseNewTask+0x94>
            {
                break;
 800a8b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8c0:	e003      	b.n	800a8ca <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	2b37      	cmp	r3, #55	; 0x37
 800a8ce:	d901      	bls.n	800a8d4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8d0:	2337      	movs	r3, #55	; 0x37
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8de:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fc6c 	bl	80091c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	3318      	adds	r3, #24
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fe fc67 	bl	80091c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a90e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	3354      	adds	r3, #84	; 0x54
 800a914:	2204      	movs	r2, #4
 800a916:	2100      	movs	r1, #0
 800a918:	4618      	mov	r0, r3
 800a91a:	f00a f84b 	bl	80149b4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	3358      	adds	r3, #88	; 0x58
 800a922:	2201      	movs	r2, #1
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f00a f844 	bl	80149b4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	68f9      	ldr	r1, [r7, #12]
 800a930:	69b8      	ldr	r0, [r7, #24]
 800a932:	f7fe fcdd 	bl	80092f0 <pxPortInitialiseStack>
 800a936:	4602      	mov	r2, r0
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a946:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a948:	bf00      	nop
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a950:	b5b0      	push	{r4, r5, r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af02      	add	r7, sp, #8
 800a956:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a958:	f7fe fdf6 	bl	8009548 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a95c:	4b3c      	ldr	r3, [pc, #240]	; (800aa50 <prvAddNewTaskToReadyList+0x100>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3301      	adds	r3, #1
 800a962:	4a3b      	ldr	r2, [pc, #236]	; (800aa50 <prvAddNewTaskToReadyList+0x100>)
 800a964:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a966:	4b3b      	ldr	r3, [pc, #236]	; (800aa54 <prvAddNewTaskToReadyList+0x104>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d109      	bne.n	800a982 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a96e:	4a39      	ldr	r2, [pc, #228]	; (800aa54 <prvAddNewTaskToReadyList+0x104>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a974:	4b36      	ldr	r3, [pc, #216]	; (800aa50 <prvAddNewTaskToReadyList+0x100>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d110      	bne.n	800a99e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a97c:	f000 fcf8 	bl	800b370 <prvInitialiseTaskLists>
 800a980:	e00d      	b.n	800a99e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a982:	4b35      	ldr	r3, [pc, #212]	; (800aa58 <prvAddNewTaskToReadyList+0x108>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a98a:	4b32      	ldr	r3, [pc, #200]	; (800aa54 <prvAddNewTaskToReadyList+0x104>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a994:	429a      	cmp	r2, r3
 800a996:	d802      	bhi.n	800a99e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a998:	4a2e      	ldr	r2, [pc, #184]	; (800aa54 <prvAddNewTaskToReadyList+0x104>)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a99e:	4b2f      	ldr	r3, [pc, #188]	; (800aa5c <prvAddNewTaskToReadyList+0x10c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	4a2d      	ldr	r2, [pc, #180]	; (800aa5c <prvAddNewTaskToReadyList+0x10c>)
 800a9a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9a8:	4b2c      	ldr	r3, [pc, #176]	; (800aa5c <prvAddNewTaskToReadyList+0x10c>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d016      	beq.n	800a9e4 <prvAddNewTaskToReadyList+0x94>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f002 fd2d 	bl	800d418 <SEGGER_SYSVIEW_OnTaskCreate>
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ce:	461d      	mov	r5, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	461c      	mov	r4, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	1ae3      	subs	r3, r4, r3
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	462b      	mov	r3, r5
 800a9e0:	f003 f84e 	bl	800da80 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f002 fd9a 	bl	800d520 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f0:	4b1b      	ldr	r3, [pc, #108]	; (800aa60 <prvAddNewTaskToReadyList+0x110>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d903      	bls.n	800aa00 <prvAddNewTaskToReadyList+0xb0>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a18      	ldr	r2, [pc, #96]	; (800aa60 <prvAddNewTaskToReadyList+0x110>)
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa04:	4613      	mov	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4a15      	ldr	r2, [pc, #84]	; (800aa64 <prvAddNewTaskToReadyList+0x114>)
 800aa0e:	441a      	add	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f7fe fbe3 	bl	80091e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800aa1c:	f7fe fdc4 	bl	80095a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800aa20:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <prvAddNewTaskToReadyList+0x108>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00e      	beq.n	800aa46 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa28:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <prvAddNewTaskToReadyList+0x104>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d207      	bcs.n	800aa46 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <prvAddNewTaskToReadyList+0x118>)
 800aa38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20002e24 	.word	0x20002e24
 800aa54:	20002950 	.word	0x20002950
 800aa58:	20002e30 	.word	0x20002e30
 800aa5c:	20002e40 	.word	0x20002e40
 800aa60:	20002e2c 	.word	0x20002e2c
 800aa64:	20002954 	.word	0x20002954
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800aa74:	f7fe fd68 	bl	8009548 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d102      	bne.n	800aa84 <vTaskDelete+0x18>
 800aa7e:	4b39      	ldr	r3, [pc, #228]	; (800ab64 <vTaskDelete+0xf8>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	e000      	b.n	800aa86 <vTaskDelete+0x1a>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fc05 	bl	800929c <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3318      	adds	r3, #24
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fbfc 	bl	800929c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800aaa4:	4b30      	ldr	r3, [pc, #192]	; (800ab68 <vTaskDelete+0xfc>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	4a2f      	ldr	r2, [pc, #188]	; (800ab68 <vTaskDelete+0xfc>)
 800aaac:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800aaae:	4b2d      	ldr	r3, [pc, #180]	; (800ab64 <vTaskDelete+0xf8>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d118      	bne.n	800aaea <vTaskDelete+0x7e>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3304      	adds	r3, #4
 800aabc:	4619      	mov	r1, r3
 800aabe:	482b      	ldr	r0, [pc, #172]	; (800ab6c <vTaskDelete+0x100>)
 800aac0:	f7fe fb8f 	bl	80091e2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800aac4:	4b2a      	ldr	r3, [pc, #168]	; (800ab70 <vTaskDelete+0x104>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	4a29      	ldr	r2, [pc, #164]	; (800ab70 <vTaskDelete+0x104>)
 800aacc:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f002 fdc7 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800aad6:	4603      	mov	r3, r0
 800aad8:	4619      	mov	r1, r3
 800aada:	2022      	movs	r0, #34	; 0x22
 800aadc:	f001 ffa0 	bl	800ca20 <SEGGER_SYSVIEW_RecordU32>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f003 f834 	bl	800db50 <SYSVIEW_DeleteTask>
 800aae8:	e016      	b.n	800ab18 <vTaskDelete+0xac>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800aaea:	4b22      	ldr	r3, [pc, #136]	; (800ab74 <vTaskDelete+0x108>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	4a20      	ldr	r2, [pc, #128]	; (800ab74 <vTaskDelete+0x108>)
 800aaf2:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f002 fdb4 	bl	800d664 <SEGGER_SYSVIEW_ShrinkId>
 800aafc:	4603      	mov	r3, r0
 800aafe:	4619      	mov	r1, r3
 800ab00:	2022      	movs	r0, #34	; 0x22
 800ab02:	f001 ff8d 	bl	800ca20 <SEGGER_SYSVIEW_RecordU32>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f003 f821 	bl	800db50 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 fcd4 	bl	800b4bc <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800ab14:	f000 fd02 	bl	800b51c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800ab18:	f7fe fd46 	bl	80095a8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800ab1c:	4b16      	ldr	r3, [pc, #88]	; (800ab78 <vTaskDelete+0x10c>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d01b      	beq.n	800ab5c <vTaskDelete+0xf0>
        {
            if( pxTCB == pxCurrentTCB )
 800ab24:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <vTaskDelete+0xf8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d116      	bne.n	800ab5c <vTaskDelete+0xf0>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800ab2e:	4b13      	ldr	r3, [pc, #76]	; (800ab7c <vTaskDelete+0x110>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <vTaskDelete+0xe0>
        __asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	60bb      	str	r3, [r7, #8]
    }
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <vTaskDelete+0xde>
                portYIELD_WITHIN_API();
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <vTaskDelete+0x114>)
 800ab4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800ab5c:	bf00      	nop
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20002950 	.word	0x20002950
 800ab68:	20002e40 	.word	0x20002e40
 800ab6c:	20002df8 	.word	0x20002df8
 800ab70:	20002e0c 	.word	0x20002e0c
 800ab74:	20002e24 	.word	0x20002e24
 800ab78:	20002e30 	.word	0x20002e30
 800ab7c:	20002e4c 	.word	0x20002e4c
 800ab80:	e000ed04 	.word	0xe000ed04

0800ab84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b08a      	sub	sp, #40	; 0x28
 800ab88:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab92:	463a      	mov	r2, r7
 800ab94:	1d39      	adds	r1, r7, #4
 800ab96:	f107 0308 	add.w	r3, r7, #8
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f006 f93e 	bl	8010e1c <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	9202      	str	r2, [sp, #8]
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	2300      	movs	r3, #0
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	2300      	movs	r3, #0
 800abb0:	460a      	mov	r2, r1
 800abb2:	4929      	ldr	r1, [pc, #164]	; (800ac58 <vTaskStartScheduler+0xd4>)
 800abb4:	4829      	ldr	r0, [pc, #164]	; (800ac5c <vTaskStartScheduler+0xd8>)
 800abb6:	f7ff fd93 	bl	800a6e0 <xTaskCreateStatic>
 800abba:	4603      	mov	r3, r0
 800abbc:	4a28      	ldr	r2, [pc, #160]	; (800ac60 <vTaskStartScheduler+0xdc>)
 800abbe:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800abc0:	4b27      	ldr	r3, [pc, #156]	; (800ac60 <vTaskStartScheduler+0xdc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800abc8:	2301      	movs	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	e001      	b.n	800abd2 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d102      	bne.n	800abde <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800abd8:	f000 ff32 	bl	800ba40 <xTimerCreateTimerTask>
 800abdc:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d124      	bne.n	800ac2e <vTaskStartScheduler+0xaa>
        __asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	613b      	str	r3, [r7, #16]
    }
 800abf6:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800abf8:	4b1a      	ldr	r3, [pc, #104]	; (800ac64 <vTaskStartScheduler+0xe0>)
 800abfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abfe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800ac00:	4b19      	ldr	r3, [pc, #100]	; (800ac68 <vTaskStartScheduler+0xe4>)
 800ac02:	2201      	movs	r2, #1
 800ac04:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac06:	4b19      	ldr	r3, [pc, #100]	; (800ac6c <vTaskStartScheduler+0xe8>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800ac0c:	4b18      	ldr	r3, [pc, #96]	; (800ac70 <vTaskStartScheduler+0xec>)
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <vTaskStartScheduler+0xdc>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d102      	bne.n	800ac1e <vTaskStartScheduler+0x9a>
 800ac18:	f002 fbe2 	bl	800d3e0 <SEGGER_SYSVIEW_OnIdle>
 800ac1c:	e004      	b.n	800ac28 <vTaskStartScheduler+0xa4>
 800ac1e:	4b14      	ldr	r3, [pc, #80]	; (800ac70 <vTaskStartScheduler+0xec>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f002 fc3a 	bl	800d49c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800ac28:	f7fe fbec 	bl	8009404 <xPortStartScheduler>
 800ac2c:	e00e      	b.n	800ac4c <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac34:	d10a      	bne.n	800ac4c <vTaskStartScheduler+0xc8>
        __asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	60fb      	str	r3, [r7, #12]
    }
 800ac48:	bf00      	nop
 800ac4a:	e7fe      	b.n	800ac4a <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800ac4c:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <vTaskStartScheduler+0xf0>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
}
 800ac50:	bf00      	nop
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	08015428 	.word	0x08015428
 800ac5c:	0800b341 	.word	0x0800b341
 800ac60:	20002e48 	.word	0x20002e48
 800ac64:	20002e44 	.word	0x20002e44
 800ac68:	20002e30 	.word	0x20002e30
 800ac6c:	20002e28 	.word	0x20002e28
 800ac70:	20002950 	.word	0x20002950
 800ac74:	20000010 	.word	0x20000010

0800ac78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac78:	b480      	push	{r7}
 800ac7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <vTaskSuspendAll+0x18>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3301      	adds	r3, #1
 800ac82:	4a03      	ldr	r2, [pc, #12]	; (800ac90 <vTaskSuspendAll+0x18>)
 800ac84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800ac86:	bf00      	nop
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	20002e4c 	.word	0x20002e4c

0800ac94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800aca2:	4b44      	ldr	r3, [pc, #272]	; (800adb4 <xTaskResumeAll+0x120>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <xTaskResumeAll+0x2c>
        __asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	603b      	str	r3, [r7, #0]
    }
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800acc0:	f7fe fc42 	bl	8009548 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800acc4:	4b3b      	ldr	r3, [pc, #236]	; (800adb4 <xTaskResumeAll+0x120>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3b01      	subs	r3, #1
 800acca:	4a3a      	ldr	r2, [pc, #232]	; (800adb4 <xTaskResumeAll+0x120>)
 800accc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acce:	4b39      	ldr	r3, [pc, #228]	; (800adb4 <xTaskResumeAll+0x120>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d166      	bne.n	800ada4 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800acd6:	4b38      	ldr	r3, [pc, #224]	; (800adb8 <xTaskResumeAll+0x124>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d062      	beq.n	800ada4 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acde:	e033      	b.n	800ad48 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ace0:	4b36      	ldr	r3, [pc, #216]	; (800adbc <xTaskResumeAll+0x128>)
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3318      	adds	r3, #24
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe fad5 	bl	800929c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3304      	adds	r3, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe fad0 	bl	800929c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f002 fc0e 	bl	800d520 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad08:	4b2d      	ldr	r3, [pc, #180]	; (800adc0 <xTaskResumeAll+0x12c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d903      	bls.n	800ad18 <xTaskResumeAll+0x84>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	4a2a      	ldr	r2, [pc, #168]	; (800adc0 <xTaskResumeAll+0x12c>)
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4a27      	ldr	r2, [pc, #156]	; (800adc4 <xTaskResumeAll+0x130>)
 800ad26:	441a      	add	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7fe fa57 	bl	80091e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad38:	4b23      	ldr	r3, [pc, #140]	; (800adc8 <xTaskResumeAll+0x134>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d302      	bcc.n	800ad48 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800ad42:	4b22      	ldr	r3, [pc, #136]	; (800adcc <xTaskResumeAll+0x138>)
 800ad44:	2201      	movs	r2, #1
 800ad46:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad48:	4b1c      	ldr	r3, [pc, #112]	; (800adbc <xTaskResumeAll+0x128>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1c7      	bne.n	800ace0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800ad56:	f000 fbe1 	bl	800b51c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad5a:	4b1d      	ldr	r3, [pc, #116]	; (800add0 <xTaskResumeAll+0x13c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d010      	beq.n	800ad88 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800ad66:	f000 f859 	bl	800ae1c <xTaskIncrementTick>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800ad70:	4b16      	ldr	r3, [pc, #88]	; (800adcc <xTaskResumeAll+0x138>)
 800ad72:	2201      	movs	r2, #1
 800ad74:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f1      	bne.n	800ad66 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800ad82:	4b13      	ldr	r3, [pc, #76]	; (800add0 <xTaskResumeAll+0x13c>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800ad88:	4b10      	ldr	r3, [pc, #64]	; (800adcc <xTaskResumeAll+0x138>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d009      	beq.n	800ada4 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800ad90:	2301      	movs	r3, #1
 800ad92:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800ad94:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <xTaskResumeAll+0x140>)
 800ad96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800ada4:	f7fe fc00 	bl	80095a8 <vPortExitCritical>

    return xAlreadyYielded;
 800ada8:	68bb      	ldr	r3, [r7, #8]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20002e4c 	.word	0x20002e4c
 800adb8:	20002e24 	.word	0x20002e24
 800adbc:	20002de4 	.word	0x20002de4
 800adc0:	20002e2c 	.word	0x20002e2c
 800adc4:	20002954 	.word	0x20002954
 800adc8:	20002950 	.word	0x20002950
 800adcc:	20002e38 	.word	0x20002e38
 800add0:	20002e34 	.word	0x20002e34
 800add4:	e000ed04 	.word	0xe000ed04

0800add8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800adde:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <xTaskGetTickCount+0x1c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800ade4:	687b      	ldr	r3, [r7, #4]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20002e28 	.word	0x20002e28

0800adf8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adfe:	f7fe fc8d 	bl	800971c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ae02:	2300      	movs	r3, #0
 800ae04:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800ae06:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <xTaskGetTickCountFromISR+0x20>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800ae0c:	683b      	ldr	r3, [r7, #0]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20002e28 	.word	0x20002e28

0800ae1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae26:	4b51      	ldr	r3, [pc, #324]	; (800af6c <xTaskIncrementTick+0x150>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f040 8093 	bne.w	800af56 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae30:	4b4f      	ldr	r3, [pc, #316]	; (800af70 <xTaskIncrementTick+0x154>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800ae38:	4a4d      	ldr	r2, [pc, #308]	; (800af70 <xTaskIncrementTick+0x154>)
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d120      	bne.n	800ae86 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800ae44:	4b4b      	ldr	r3, [pc, #300]	; (800af74 <xTaskIncrementTick+0x158>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <xTaskIncrementTick+0x48>
        __asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	603b      	str	r3, [r7, #0]
    }
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <xTaskIncrementTick+0x46>
 800ae64:	4b43      	ldr	r3, [pc, #268]	; (800af74 <xTaskIncrementTick+0x158>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	4b43      	ldr	r3, [pc, #268]	; (800af78 <xTaskIncrementTick+0x15c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a41      	ldr	r2, [pc, #260]	; (800af74 <xTaskIncrementTick+0x158>)
 800ae70:	6013      	str	r3, [r2, #0]
 800ae72:	4a41      	ldr	r2, [pc, #260]	; (800af78 <xTaskIncrementTick+0x15c>)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	4b40      	ldr	r3, [pc, #256]	; (800af7c <xTaskIncrementTick+0x160>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	4a3f      	ldr	r2, [pc, #252]	; (800af7c <xTaskIncrementTick+0x160>)
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	f000 fb4b 	bl	800b51c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800ae86:	4b3e      	ldr	r3, [pc, #248]	; (800af80 <xTaskIncrementTick+0x164>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d34d      	bcc.n	800af2c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae90:	4b38      	ldr	r3, [pc, #224]	; (800af74 <xTaskIncrementTick+0x158>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d104      	bne.n	800aea4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9a:	4b39      	ldr	r3, [pc, #228]	; (800af80 <xTaskIncrementTick+0x164>)
 800ae9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aea0:	601a      	str	r2, [r3, #0]
                    break;
 800aea2:	e043      	b.n	800af2c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea4:	4b33      	ldr	r3, [pc, #204]	; (800af74 <xTaskIncrementTick+0x158>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800aeb4:	693a      	ldr	r2, [r7, #16]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d203      	bcs.n	800aec4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800aebc:	4a30      	ldr	r2, [pc, #192]	; (800af80 <xTaskIncrementTick+0x164>)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aec2:	e033      	b.n	800af2c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	3304      	adds	r3, #4
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe f9e7 	bl	800929c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d004      	beq.n	800aee0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	3318      	adds	r3, #24
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe f9de 	bl	800929c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f002 fb1c 	bl	800d520 <SEGGER_SYSVIEW_OnTaskStartReady>
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeec:	4b25      	ldr	r3, [pc, #148]	; (800af84 <xTaskIncrementTick+0x168>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d903      	bls.n	800aefc <xTaskIncrementTick+0xe0>
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	4a22      	ldr	r2, [pc, #136]	; (800af84 <xTaskIncrementTick+0x168>)
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4a1f      	ldr	r2, [pc, #124]	; (800af88 <xTaskIncrementTick+0x16c>)
 800af0a:	441a      	add	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	3304      	adds	r3, #4
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f7fe f965 	bl	80091e2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	4b1b      	ldr	r3, [pc, #108]	; (800af8c <xTaskIncrementTick+0x170>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	429a      	cmp	r2, r3
 800af24:	d3b4      	bcc.n	800ae90 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800af26:	2301      	movs	r3, #1
 800af28:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af2a:	e7b1      	b.n	800ae90 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af2c:	4b17      	ldr	r3, [pc, #92]	; (800af8c <xTaskIncrementTick+0x170>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af32:	4915      	ldr	r1, [pc, #84]	; (800af88 <xTaskIncrementTick+0x16c>)
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	440b      	add	r3, r1
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d901      	bls.n	800af48 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800af44:	2301      	movs	r3, #1
 800af46:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800af48:	4b11      	ldr	r3, [pc, #68]	; (800af90 <xTaskIncrementTick+0x174>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800af50:	2301      	movs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	e004      	b.n	800af60 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800af56:	4b0f      	ldr	r3, [pc, #60]	; (800af94 <xTaskIncrementTick+0x178>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3301      	adds	r3, #1
 800af5c:	4a0d      	ldr	r2, [pc, #52]	; (800af94 <xTaskIncrementTick+0x178>)
 800af5e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800af60:	697b      	ldr	r3, [r7, #20]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20002e4c 	.word	0x20002e4c
 800af70:	20002e28 	.word	0x20002e28
 800af74:	20002ddc 	.word	0x20002ddc
 800af78:	20002de0 	.word	0x20002de0
 800af7c:	20002e3c 	.word	0x20002e3c
 800af80:	20002e44 	.word	0x20002e44
 800af84:	20002e2c 	.word	0x20002e2c
 800af88:	20002954 	.word	0x20002954
 800af8c:	20002950 	.word	0x20002950
 800af90:	20002e38 	.word	0x20002e38
 800af94:	20002e34 	.word	0x20002e34

0800af98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af9e:	4b41      	ldr	r3, [pc, #260]	; (800b0a4 <vTaskSwitchContext+0x10c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800afa6:	4b40      	ldr	r3, [pc, #256]	; (800b0a8 <vTaskSwitchContext+0x110>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800afac:	e076      	b.n	800b09c <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 800afae:	4b3e      	ldr	r3, [pc, #248]	; (800b0a8 <vTaskSwitchContext+0x110>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800afb4:	4b3d      	ldr	r3, [pc, #244]	; (800b0ac <vTaskSwitchContext+0x114>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afba:	613b      	str	r3, [r7, #16]
 800afbc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d111      	bne.n	800aff0 <vTaskSwitchContext+0x58>
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	3304      	adds	r3, #4
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d10b      	bne.n	800aff0 <vTaskSwitchContext+0x58>
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	3308      	adds	r3, #8
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d105      	bne.n	800aff0 <vTaskSwitchContext+0x58>
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	330c      	adds	r3, #12
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	429a      	cmp	r2, r3
 800afee:	d008      	beq.n	800b002 <vTaskSwitchContext+0x6a>
 800aff0:	4b2e      	ldr	r3, [pc, #184]	; (800b0ac <vTaskSwitchContext+0x114>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	4b2d      	ldr	r3, [pc, #180]	; (800b0ac <vTaskSwitchContext+0x114>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3334      	adds	r3, #52	; 0x34
 800affa:	4619      	mov	r1, r3
 800affc:	4610      	mov	r0, r2
 800affe:	f005 fefd 	bl	8010dfc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b002:	4b2b      	ldr	r3, [pc, #172]	; (800b0b0 <vTaskSwitchContext+0x118>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	e010      	b.n	800b02c <vTaskSwitchContext+0x94>
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <vTaskSwitchContext+0x8e>
        __asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	607b      	str	r3, [r7, #4]
    }
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <vTaskSwitchContext+0x8c>
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	3b01      	subs	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	4921      	ldr	r1, [pc, #132]	; (800b0b4 <vTaskSwitchContext+0x11c>)
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	440b      	add	r3, r1
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0e4      	beq.n	800b00a <vTaskSwitchContext+0x72>
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4a1a      	ldr	r2, [pc, #104]	; (800b0b4 <vTaskSwitchContext+0x11c>)
 800b04c:	4413      	add	r3, r2
 800b04e:	60bb      	str	r3, [r7, #8]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	605a      	str	r2, [r3, #4]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	3308      	adds	r3, #8
 800b062:	429a      	cmp	r2, r3
 800b064:	d104      	bne.n	800b070 <vTaskSwitchContext+0xd8>
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	605a      	str	r2, [r3, #4]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	4a0d      	ldr	r2, [pc, #52]	; (800b0ac <vTaskSwitchContext+0x114>)
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	4a0d      	ldr	r2, [pc, #52]	; (800b0b0 <vTaskSwitchContext+0x118>)
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <vTaskSwitchContext+0x114>)
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <vTaskSwitchContext+0x120>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d102      	bne.n	800b092 <vTaskSwitchContext+0xfa>
 800b08c:	f002 f9a8 	bl	800d3e0 <SEGGER_SYSVIEW_OnIdle>
}
 800b090:	e004      	b.n	800b09c <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 800b092:	4b06      	ldr	r3, [pc, #24]	; (800b0ac <vTaskSwitchContext+0x114>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4618      	mov	r0, r3
 800b098:	f002 fa00 	bl	800d49c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800b09c:	bf00      	nop
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20002e4c 	.word	0x20002e4c
 800b0a8:	20002e38 	.word	0x20002e38
 800b0ac:	20002950 	.word	0x20002950
 800b0b0:	20002e2c 	.word	0x20002e2c
 800b0b4:	20002954 	.word	0x20002954
 800b0b8:	20002e48 	.word	0x20002e48

0800b0bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10a      	bne.n	800b0e2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	60fb      	str	r3, [r7, #12]
    }
 800b0de:	bf00      	nop
 800b0e0:	e7fe      	b.n	800b0e0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0e2:	4b07      	ldr	r3, [pc, #28]	; (800b100 <vTaskPlaceOnEventList+0x44>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3318      	adds	r3, #24
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7fe f89d 	bl	800922a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	6838      	ldr	r0, [r7, #0]
 800b0f4:	f000 fc44 	bl	800b980 <prvAddCurrentTaskToDelayedList>
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20002950 	.word	0x20002950

0800b104 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10a      	bne.n	800b12c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	617b      	str	r3, [r7, #20]
    }
 800b128:	bf00      	nop
 800b12a:	e7fe      	b.n	800b12a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b12c:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <vTaskPlaceOnEventListRestricted+0x58>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3318      	adds	r3, #24
 800b132:	4619      	mov	r1, r3
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7fe f854 	bl	80091e2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800b140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b144:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800b146:	2024      	movs	r0, #36	; 0x24
 800b148:	f001 fc4c 	bl	800c9e4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	68b8      	ldr	r0, [r7, #8]
 800b150:	f000 fc16 	bl	800b980 <prvAddCurrentTaskToDelayedList>
    }
 800b154:	bf00      	nop
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	20002950 	.word	0x20002950

0800b160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10a      	bne.n	800b18c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	60fb      	str	r3, [r7, #12]
    }
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	3318      	adds	r3, #24
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe f883 	bl	800929c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b196:	4b20      	ldr	r3, [pc, #128]	; (800b218 <xTaskRemoveFromEventList+0xb8>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d121      	bne.n	800b1e2 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe f87a 	bl	800929c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f002 f9b8 	bl	800d520 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b4:	4b19      	ldr	r3, [pc, #100]	; (800b21c <xTaskRemoveFromEventList+0xbc>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d903      	bls.n	800b1c4 <xTaskRemoveFromEventList+0x64>
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	4a16      	ldr	r2, [pc, #88]	; (800b21c <xTaskRemoveFromEventList+0xbc>)
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4a13      	ldr	r2, [pc, #76]	; (800b220 <xTaskRemoveFromEventList+0xc0>)
 800b1d2:	441a      	add	r2, r3
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4610      	mov	r0, r2
 800b1dc:	f7fe f801 	bl	80091e2 <vListInsertEnd>
 800b1e0:	e005      	b.n	800b1ee <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	3318      	adds	r3, #24
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	480e      	ldr	r0, [pc, #56]	; (800b224 <xTaskRemoveFromEventList+0xc4>)
 800b1ea:	f7fd fffa 	bl	80091e2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <xTaskRemoveFromEventList+0xc8>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d905      	bls.n	800b208 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <xTaskRemoveFromEventList+0xcc>)
 800b202:	2201      	movs	r2, #1
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	e001      	b.n	800b20c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800b208:	2300      	movs	r3, #0
 800b20a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b20c:	697b      	ldr	r3, [r7, #20]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20002e4c 	.word	0x20002e4c
 800b21c:	20002e2c 	.word	0x20002e2c
 800b220:	20002954 	.word	0x20002954
 800b224:	20002de4 	.word	0x20002de4
 800b228:	20002950 	.word	0x20002950
 800b22c:	20002e38 	.word	0x20002e38

0800b230 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b238:	4b06      	ldr	r3, [pc, #24]	; (800b254 <vTaskInternalSetTimeOutState+0x24>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b240:	4b05      	ldr	r3, [pc, #20]	; (800b258 <vTaskInternalSetTimeOutState+0x28>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	20002e3c 	.word	0x20002e3c
 800b258:	20002e28 	.word	0x20002e28

0800b25c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	613b      	str	r3, [r7, #16]
    }
 800b27e:	bf00      	nop
 800b280:	e7fe      	b.n	800b280 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	60fb      	str	r3, [r7, #12]
    }
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800b29e:	f7fe f953 	bl	8009548 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800b2a2:	4b1f      	ldr	r3, [pc, #124]	; (800b320 <xTaskCheckForTimeOut+0xc4>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2ba:	d102      	bne.n	800b2c2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	61fb      	str	r3, [r7, #28]
 800b2c0:	e026      	b.n	800b310 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	4b17      	ldr	r3, [pc, #92]	; (800b324 <xTaskCheckForTimeOut+0xc8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d00a      	beq.n	800b2e4 <xTaskCheckForTimeOut+0x88>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d305      	bcc.n	800b2e4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e015      	b.n	800b310 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d20b      	bcs.n	800b306 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	1ad2      	subs	r2, r2, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff ff98 	bl	800b230 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800b300:	2300      	movs	r3, #0
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	e004      	b.n	800b310 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800b30c:	2301      	movs	r3, #1
 800b30e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800b310:	f7fe f94a 	bl	80095a8 <vPortExitCritical>

    return xReturn;
 800b314:	69fb      	ldr	r3, [r7, #28]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3720      	adds	r7, #32
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20002e28 	.word	0x20002e28
 800b324:	20002e3c 	.word	0x20002e3c

0800b328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b328:	b480      	push	{r7}
 800b32a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800b32c:	4b03      	ldr	r3, [pc, #12]	; (800b33c <vTaskMissedYield+0x14>)
 800b32e:	2201      	movs	r2, #1
 800b330:	601a      	str	r2, [r3, #0]
}
 800b332:	bf00      	nop
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	20002e38 	.word	0x20002e38

0800b340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800b348:	f000 f852 	bl	800b3f0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <prvIdleTask+0x28>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d9f9      	bls.n	800b348 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800b354:	4b05      	ldr	r3, [pc, #20]	; (800b36c <prvIdleTask+0x2c>)
 800b356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800b364:	e7f0      	b.n	800b348 <prvIdleTask+0x8>
 800b366:	bf00      	nop
 800b368:	20002954 	.word	0x20002954
 800b36c:	e000ed04 	.word	0xe000ed04

0800b370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b376:	2300      	movs	r3, #0
 800b378:	607b      	str	r3, [r7, #4]
 800b37a:	e00c      	b.n	800b396 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4a12      	ldr	r2, [pc, #72]	; (800b3d0 <prvInitialiseTaskLists+0x60>)
 800b388:	4413      	add	r3, r2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fd fefc 	bl	8009188 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3301      	adds	r3, #1
 800b394:	607b      	str	r3, [r7, #4]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b37      	cmp	r3, #55	; 0x37
 800b39a:	d9ef      	bls.n	800b37c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800b39c:	480d      	ldr	r0, [pc, #52]	; (800b3d4 <prvInitialiseTaskLists+0x64>)
 800b39e:	f7fd fef3 	bl	8009188 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800b3a2:	480d      	ldr	r0, [pc, #52]	; (800b3d8 <prvInitialiseTaskLists+0x68>)
 800b3a4:	f7fd fef0 	bl	8009188 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800b3a8:	480c      	ldr	r0, [pc, #48]	; (800b3dc <prvInitialiseTaskLists+0x6c>)
 800b3aa:	f7fd feed 	bl	8009188 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800b3ae:	480c      	ldr	r0, [pc, #48]	; (800b3e0 <prvInitialiseTaskLists+0x70>)
 800b3b0:	f7fd feea 	bl	8009188 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800b3b4:	480b      	ldr	r0, [pc, #44]	; (800b3e4 <prvInitialiseTaskLists+0x74>)
 800b3b6:	f7fd fee7 	bl	8009188 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800b3ba:	4b0b      	ldr	r3, [pc, #44]	; (800b3e8 <prvInitialiseTaskLists+0x78>)
 800b3bc:	4a05      	ldr	r2, [pc, #20]	; (800b3d4 <prvInitialiseTaskLists+0x64>)
 800b3be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <prvInitialiseTaskLists+0x7c>)
 800b3c2:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <prvInitialiseTaskLists+0x68>)
 800b3c4:	601a      	str	r2, [r3, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20002954 	.word	0x20002954
 800b3d4:	20002db4 	.word	0x20002db4
 800b3d8:	20002dc8 	.word	0x20002dc8
 800b3dc:	20002de4 	.word	0x20002de4
 800b3e0:	20002df8 	.word	0x20002df8
 800b3e4:	20002e10 	.word	0x20002e10
 800b3e8:	20002ddc 	.word	0x20002ddc
 800b3ec:	20002de0 	.word	0x20002de0

0800b3f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3f6:	e019      	b.n	800b42c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800b3f8:	f7fe f8a6 	bl	8009548 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3fc:	4b10      	ldr	r3, [pc, #64]	; (800b440 <prvCheckTasksWaitingTermination+0x50>)
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3304      	adds	r3, #4
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fd ff47 	bl	800929c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800b40e:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <prvCheckTasksWaitingTermination+0x54>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3b01      	subs	r3, #1
 800b414:	4a0b      	ldr	r2, [pc, #44]	; (800b444 <prvCheckTasksWaitingTermination+0x54>)
 800b416:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800b418:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <prvCheckTasksWaitingTermination+0x58>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	4a0a      	ldr	r2, [pc, #40]	; (800b448 <prvCheckTasksWaitingTermination+0x58>)
 800b420:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800b422:	f7fe f8c1 	bl	80095a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f848 	bl	800b4bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <prvCheckTasksWaitingTermination+0x58>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e1      	bne.n	800b3f8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20002df8 	.word	0x20002df8
 800b444:	20002e24 	.word	0x20002e24
 800b448:	20002e0c 	.word	0x20002e0c

0800b44c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800b454:	2300      	movs	r3, #0
 800b456:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b458:	e005      	b.n	800b466 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3301      	adds	r3, #1
 800b45e:	607b      	str	r3, [r7, #4]
            ulCount++;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2ba5      	cmp	r3, #165	; 0xa5
 800b46c:	d0f5      	beq.n	800b45a <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	089b      	lsrs	r3, r3, #2
 800b472:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	b29b      	uxth	r3, r3
    }
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d102      	bne.n	800b498 <uxTaskGetStackHighWaterMark+0x14>
 800b492:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <uxTaskGetStackHighWaterMark+0x34>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	e000      	b.n	800b49a <uxTaskGetStackHighWaterMark+0x16>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a0:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b4a2:	6938      	ldr	r0, [r7, #16]
 800b4a4:	f7ff ffd2 	bl	800b44c <prvTaskCheckFreeStackSpace>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
    }
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3718      	adds	r7, #24
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20002950 	.word	0x20002950

0800b4bc <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d108      	bne.n	800b4e0 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fd fd3a 	bl	8008f4c <vPortFree>
                    vPortFree( pxTCB );
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7fd fd37 	bl	8008f4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b4de:	e018      	b.n	800b512 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d103      	bne.n	800b4f2 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7fd fd2e 	bl	8008f4c <vPortFree>
    }
 800b4f0:	e00f      	b.n	800b512 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d00a      	beq.n	800b512 <prvDeleteTCB+0x56>
        __asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	60fb      	str	r3, [r7, #12]
    }
 800b50e:	bf00      	nop
 800b510:	e7fe      	b.n	800b510 <prvDeleteTCB+0x54>
    }
 800b512:	bf00      	nop
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
	...

0800b51c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b520:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <prvResetNextTaskUnblockTime+0x30>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d104      	bne.n	800b534 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b52a:	4b09      	ldr	r3, [pc, #36]	; (800b550 <prvResetNextTaskUnblockTime+0x34>)
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b530:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b532:	e005      	b.n	800b540 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b534:	4b05      	ldr	r3, [pc, #20]	; (800b54c <prvResetNextTaskUnblockTime+0x30>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a04      	ldr	r2, [pc, #16]	; (800b550 <prvResetNextTaskUnblockTime+0x34>)
 800b53e:	6013      	str	r3, [r2, #0]
}
 800b540:	bf00      	nop
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	20002ddc 	.word	0x20002ddc
 800b550:	20002e44 	.word	0x20002e44

0800b554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b55a:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <xTaskGetSchedulerState+0x34>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d102      	bne.n	800b568 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b562:	2301      	movs	r3, #1
 800b564:	607b      	str	r3, [r7, #4]
 800b566:	e008      	b.n	800b57a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b568:	4b08      	ldr	r3, [pc, #32]	; (800b58c <xTaskGetSchedulerState+0x38>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b570:	2302      	movs	r3, #2
 800b572:	607b      	str	r3, [r7, #4]
 800b574:	e001      	b.n	800b57a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b576:	2300      	movs	r3, #0
 800b578:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b57a:	687b      	ldr	r3, [r7, #4]
    }
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	20002e30 	.word	0x20002e30
 800b58c:	20002e4c 	.word	0x20002e4c

0800b590 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d05a      	beq.n	800b65c <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5aa:	4b2f      	ldr	r3, [pc, #188]	; (800b668 <xTaskPriorityInherit+0xd8>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d24a      	bcs.n	800b64a <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	db06      	blt.n	800b5ca <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5bc:	4b2a      	ldr	r3, [pc, #168]	; (800b668 <xTaskPriorityInherit+0xd8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6959      	ldr	r1, [r3, #20]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4a24      	ldr	r2, [pc, #144]	; (800b66c <xTaskPriorityInherit+0xdc>)
 800b5dc:	4413      	add	r3, r2
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	d126      	bne.n	800b630 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fd fe58 	bl	800929c <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5ec:	4b1e      	ldr	r3, [pc, #120]	; (800b668 <xTaskPriorityInherit+0xd8>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 ff91 	bl	800d520 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b602:	4b1b      	ldr	r3, [pc, #108]	; (800b670 <xTaskPriorityInherit+0xe0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d903      	bls.n	800b612 <xTaskPriorityInherit+0x82>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60e:	4a18      	ldr	r2, [pc, #96]	; (800b670 <xTaskPriorityInherit+0xe0>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4a13      	ldr	r2, [pc, #76]	; (800b66c <xTaskPriorityInherit+0xdc>)
 800b620:	441a      	add	r2, r3
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7fd fdda 	bl	80091e2 <vListInsertEnd>
 800b62e:	e004      	b.n	800b63a <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b630:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <xTaskPriorityInherit+0xd8>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4619      	mov	r1, r3
 800b63e:	2049      	movs	r0, #73	; 0x49
 800b640:	f001 f9ee 	bl	800ca20 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	e008      	b.n	800b65c <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b64e:	4b06      	ldr	r3, [pc, #24]	; (800b668 <xTaskPriorityInherit+0xd8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	429a      	cmp	r2, r3
 800b656:	d201      	bcs.n	800b65c <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b658:	2301      	movs	r3, #1
 800b65a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b65c:	68fb      	ldr	r3, [r7, #12]
    }
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20002950 	.word	0x20002950
 800b66c:	20002954 	.word	0x20002954
 800b670:	20002e2c 	.word	0x20002e2c

0800b674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d05f      	beq.n	800b74a <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b68a:	4b32      	ldr	r3, [pc, #200]	; (800b754 <xTaskPriorityDisinherit+0xe0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	429a      	cmp	r2, r3
 800b692:	d00a      	beq.n	800b6aa <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	60fb      	str	r3, [r7, #12]
    }
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	60bb      	str	r3, [r7, #8]
    }
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6cc:	1e5a      	subs	r2, r3, #1
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d035      	beq.n	800b74a <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d131      	bne.n	800b74a <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fd fdd6 	bl	800929c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	204a      	movs	r0, #74	; 0x4a
 800b6f6:	f001 f993 	bl	800ca20 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	4618      	mov	r0, r3
 800b712:	f001 ff05 	bl	800d520 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71a:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <xTaskPriorityDisinherit+0xe4>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d903      	bls.n	800b72a <xTaskPriorityDisinherit+0xb6>
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b726:	4a0c      	ldr	r2, [pc, #48]	; (800b758 <xTaskPriorityDisinherit+0xe4>)
 800b728:	6013      	str	r3, [r2, #0]
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4a09      	ldr	r2, [pc, #36]	; (800b75c <xTaskPriorityDisinherit+0xe8>)
 800b738:	441a      	add	r2, r3
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f7fd fd4e 	bl	80091e2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b746:	2301      	movs	r3, #1
 800b748:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b74a:	697b      	ldr	r3, [r7, #20]
    }
 800b74c:	4618      	mov	r0, r3
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20002950 	.word	0x20002950
 800b758:	20002e2c 	.word	0x20002e2c
 800b75c:	20002954 	.word	0x20002954

0800b760 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b76e:	2301      	movs	r3, #1
 800b770:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d073      	beq.n	800b860 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	60fb      	str	r3, [r7, #12]
    }
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d902      	bls.n	800b7a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	e002      	b.n	800b7ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7aa:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b0:	69fa      	ldr	r2, [r7, #28]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d054      	beq.n	800b860 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d14f      	bne.n	800b860 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b7c0:	4b29      	ldr	r3, [pc, #164]	; (800b868 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	69ba      	ldr	r2, [r7, #24]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d10a      	bne.n	800b7e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	60bb      	str	r3, [r7, #8]
    }
 800b7dc:	bf00      	nop
 800b7de:	e7fe      	b.n	800b7de <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	204a      	movs	r0, #74	; 0x4a
 800b7e6:	f001 f91b 	bl	800ca20 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ee:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	db04      	blt.n	800b808 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	6959      	ldr	r1, [r3, #20]
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4a15      	ldr	r2, [pc, #84]	; (800b86c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b818:	4413      	add	r3, r2
 800b81a:	4299      	cmp	r1, r3
 800b81c:	d120      	bne.n	800b860 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	3304      	adds	r3, #4
 800b822:	4618      	mov	r0, r3
 800b824:	f7fd fd3a 	bl	800929c <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 fe78 	bl	800d520 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b834:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d903      	bls.n	800b844 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b840:	4a0b      	ldr	r2, [pc, #44]	; (800b870 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b848:	4613      	mov	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4a06      	ldr	r2, [pc, #24]	; (800b86c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b852:	441a      	add	r2, r3
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	3304      	adds	r3, #4
 800b858:	4619      	mov	r1, r3
 800b85a:	4610      	mov	r0, r2
 800b85c:	f7fd fcc1 	bl	80091e2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b860:	bf00      	nop
 800b862:	3720      	adds	r7, #32
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20002950 	.word	0x20002950
 800b86c:	20002954 	.word	0x20002954
 800b870:	20002e2c 	.word	0x20002e2c

0800b874 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b874:	b480      	push	{r7}
 800b876:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b878:	4b07      	ldr	r3, [pc, #28]	; (800b898 <pvTaskIncrementMutexHeldCount+0x24>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <pvTaskIncrementMutexHeldCount+0x24>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b886:	3201      	adds	r2, #1
 800b888:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800b88a:	4b03      	ldr	r3, [pc, #12]	; (800b898 <pvTaskIncrementMutexHeldCount+0x24>)
 800b88c:	681b      	ldr	r3, [r3, #0]
    }
 800b88e:	4618      	mov	r0, r3
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	20002950 	.word	0x20002950

0800b89c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	613b      	str	r3, [r7, #16]
    }
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 800b8c4:	f7fd fe40 	bl	8009548 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800b8c8:	4b2b      	ldr	r3, [pc, #172]	; (800b978 <ulTaskGenericNotifyTake+0xdc>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3314      	adds	r3, #20
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d115      	bne.n	800b906 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800b8da:	4b27      	ldr	r3, [pc, #156]	; (800b978 <ulTaskGenericNotifyTake+0xdc>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	3358      	adds	r3, #88	; 0x58
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00b      	beq.n	800b906 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f845 	bl	800b980 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800b8f6:	4b21      	ldr	r3, [pc, #132]	; (800b97c <ulTaskGenericNotifyTake+0xe0>)
 800b8f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b906:	f7fd fe4f 	bl	80095a8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800b90a:	f7fd fe1d 	bl	8009548 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	4619      	mov	r1, r3
 800b914:	2042      	movs	r0, #66	; 0x42
 800b916:	f001 f8bf 	bl	800ca98 <SEGGER_SYSVIEW_RecordU32x2>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800b91a:	4b17      	ldr	r3, [pc, #92]	; (800b978 <ulTaskGenericNotifyTake+0xdc>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3314      	adds	r3, #20
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d014      	beq.n	800b95a <ulTaskGenericNotifyTake+0xbe>
            {
                if( xClearCountOnExit != pdFALSE )
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <ulTaskGenericNotifyTake+0xac>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800b936:	4b10      	ldr	r3, [pc, #64]	; (800b978 <ulTaskGenericNotifyTake+0xdc>)
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3314      	adds	r3, #20
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	2200      	movs	r2, #0
 800b944:	605a      	str	r2, [r3, #4]
 800b946:	e008      	b.n	800b95a <ulTaskGenericNotifyTake+0xbe>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800b948:	4b0b      	ldr	r3, [pc, #44]	; (800b978 <ulTaskGenericNotifyTake+0xdc>)
 800b94a:	6819      	ldr	r1, [r3, #0]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	1e5a      	subs	r2, r3, #1
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3314      	adds	r3, #20
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	440b      	add	r3, r1
 800b958:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800b95a:	4b07      	ldr	r3, [pc, #28]	; (800b978 <ulTaskGenericNotifyTake+0xdc>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	3358      	adds	r3, #88	; 0x58
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800b968:	f7fd fe1e 	bl	80095a8 <vPortExitCritical>

        return ulReturn;
 800b96c:	697b      	ldr	r3, [r7, #20]
    }
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20002950 	.word	0x20002950
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b98a:	4b27      	ldr	r3, [pc, #156]	; (800ba28 <prvAddCurrentTaskToDelayedList+0xa8>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b990:	4b26      	ldr	r3, [pc, #152]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xac>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3304      	adds	r3, #4
 800b996:	4618      	mov	r0, r3
 800b998:	f7fd fc80 	bl	800929c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9a2:	d10a      	bne.n	800b9ba <prvAddCurrentTaskToDelayedList+0x3a>
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9aa:	4b20      	ldr	r3, [pc, #128]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xac>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	481f      	ldr	r0, [pc, #124]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b9b4:	f7fd fc15 	bl	80091e2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b9b8:	e032      	b.n	800ba20 <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4413      	add	r3, r2
 800b9c0:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9c2:	4b1a      	ldr	r3, [pc, #104]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xac>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d20f      	bcs.n	800b9f2 <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b9d2:	4b16      	ldr	r3, [pc, #88]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xac>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2104      	movs	r1, #4
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f001 fde3 	bl	800d5a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9de:	4b15      	ldr	r3, [pc, #84]	; (800ba34 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	4b12      	ldr	r3, [pc, #72]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xac>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f7fd fc1d 	bl	800922a <vListInsert>
}
 800b9f0:	e016      	b.n	800ba20 <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 800b9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xac>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2104      	movs	r1, #4
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 fdd3 	bl	800d5a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xac>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3304      	adds	r3, #4
 800ba08:	4619      	mov	r1, r3
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	f7fd fc0d 	bl	800922a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d202      	bcs.n	800ba20 <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800ba1a:	4a08      	ldr	r2, [pc, #32]	; (800ba3c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	6013      	str	r3, [r2, #0]
}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	20002e28 	.word	0x20002e28
 800ba2c:	20002950 	.word	0x20002950
 800ba30:	20002e10 	.word	0x20002e10
 800ba34:	20002de0 	.word	0x20002de0
 800ba38:	20002ddc 	.word	0x20002ddc
 800ba3c:	20002e44 	.word	0x20002e44

0800ba40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08a      	sub	sp, #40	; 0x28
 800ba44:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800ba4a:	f000 fb63 	bl	800c114 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800ba4e:	4b1c      	ldr	r3, [pc, #112]	; (800bac0 <xTimerCreateTimerTask+0x80>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d021      	beq.n	800ba9a <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba5e:	1d3a      	adds	r2, r7, #4
 800ba60:	f107 0108 	add.w	r1, r7, #8
 800ba64:	f107 030c 	add.w	r3, r7, #12
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f005 f9f1 	bl	8010e50 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	9202      	str	r2, [sp, #8]
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	2305      	movs	r3, #5
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	460a      	mov	r2, r1
 800ba80:	4910      	ldr	r1, [pc, #64]	; (800bac4 <xTimerCreateTimerTask+0x84>)
 800ba82:	4811      	ldr	r0, [pc, #68]	; (800bac8 <xTimerCreateTimerTask+0x88>)
 800ba84:	f7fe fe2c 	bl	800a6e0 <xTaskCreateStatic>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	4a10      	ldr	r2, [pc, #64]	; (800bacc <xTimerCreateTimerTask+0x8c>)
 800ba8c:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800ba8e:	4b0f      	ldr	r3, [pc, #60]	; (800bacc <xTimerCreateTimerTask+0x8c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800ba96:	2301      	movs	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	613b      	str	r3, [r7, #16]
    }
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800bab6:	697b      	ldr	r3, [r7, #20]
    }
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20002e80 	.word	0x20002e80
 800bac4:	08015430 	.word	0x08015430
 800bac8:	0800bcbd 	.word	0x0800bcbd
 800bacc:	20002e84 	.word	0x20002e84

0800bad0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af02      	add	r7, sp, #8
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bade:	202c      	movs	r0, #44	; 0x2c
 800bae0:	f7fd f950 	bl	8008d84 <pvPortMalloc>
 800bae4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00d      	beq.n	800bb08 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	68b9      	ldr	r1, [r7, #8]
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 f805 	bl	800bb12 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800bb08:	697b      	ldr	r3, [r7, #20]
        }
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	607a      	str	r2, [r7, #4]
 800bb1e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10a      	bne.n	800bb3c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	617b      	str	r3, [r7, #20]
    }
 800bb38:	bf00      	nop
 800bb3a:	e7fe      	b.n	800bb3a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d01e      	beq.n	800bb80 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800bb42:	f000 fae7 	bl	800c114 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	6a3a      	ldr	r2, [r7, #32]
 800bb5c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	3304      	adds	r3, #4
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fd fb30 	bl	80091c8 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d008      	beq.n	800bb80 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb74:	f043 0304 	orr.w	r3, r3, #4
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800bb80:	bf00      	nop
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08a      	sub	sp, #40	; 0x28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10a      	bne.n	800bbb6 <xTimerGenericCommand+0x2e>
        __asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	623b      	str	r3, [r7, #32]
    }
 800bbb2:	bf00      	nop
 800bbb4:	e7fe      	b.n	800bbb4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800bbb6:	4b1a      	ldr	r3, [pc, #104]	; (800bc20 <xTimerGenericCommand+0x98>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d02a      	beq.n	800bc14 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b05      	cmp	r3, #5
 800bbce:	dc18      	bgt.n	800bc02 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbd0:	f7ff fcc0 	bl	800b554 <xTaskGetSchedulerState>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d109      	bne.n	800bbee <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbda:	4b11      	ldr	r3, [pc, #68]	; (800bc20 <xTimerGenericCommand+0x98>)
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	f107 0110 	add.w	r1, r7, #16
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbe6:	f7fd ffbd 	bl	8009b64 <xQueueGenericSend>
 800bbea:	6278      	str	r0, [r7, #36]	; 0x24
 800bbec:	e012      	b.n	800bc14 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbee:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <xTimerGenericCommand+0x98>)
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	f107 0110 	add.w	r1, r7, #16
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f7fd ffb3 	bl	8009b64 <xQueueGenericSend>
 800bbfe:	6278      	str	r0, [r7, #36]	; 0x24
 800bc00:	e008      	b.n	800bc14 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc02:	4b07      	ldr	r3, [pc, #28]	; (800bc20 <xTimerGenericCommand+0x98>)
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	f107 0110 	add.w	r1, r7, #16
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	f7fe f8cf 	bl	8009db0 <xQueueGenericSendFromISR>
 800bc12:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800bc16:	4618      	mov	r0, r3
 800bc18:	3728      	adds	r7, #40	; 0x28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20002e80 	.word	0x20002e80

0800bc24 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2e:	4b22      	ldr	r3, [pc, #136]	; (800bcb8 <prvProcessExpiredTimer+0x94>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fd fb2d 	bl	800929c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d022      	beq.n	800bc96 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	699a      	ldr	r2, [r3, #24]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	18d1      	adds	r1, r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	6978      	ldr	r0, [r7, #20]
 800bc5e:	f000 f8d1 	bl	800be04 <prvInsertTimerInActiveList>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d01f      	beq.n	800bca8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	2100      	movs	r1, #0
 800bc72:	6978      	ldr	r0, [r7, #20]
 800bc74:	f7ff ff88 	bl	800bb88 <xTimerGenericCommand>
 800bc78:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d113      	bne.n	800bca8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	60fb      	str	r3, [r7, #12]
    }
 800bc92:	bf00      	nop
 800bc94:	e7fe      	b.n	800bc94 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc9c:	f023 0301 	bic.w	r3, r3, #1
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	6978      	ldr	r0, [r7, #20]
 800bcae:	4798      	blx	r3
    }
 800bcb0:	bf00      	nop
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20002e78 	.word	0x20002e78

0800bcbc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcc4:	f107 0308 	add.w	r3, r7, #8
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 f857 	bl	800bd7c <prvGetNextExpireTime>
 800bcce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f000 f803 	bl	800bce0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800bcda:	f000 f8d5 	bl	800be88 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcde:	e7f1      	b.n	800bcc4 <prvTimerTask+0x8>

0800bce0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800bcea:	f7fe ffc5 	bl	800ac78 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcee:	f107 0308 	add.w	r3, r7, #8
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 f866 	bl	800bdc4 <prvSampleTimeNow>
 800bcf8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d130      	bne.n	800bd62 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <prvProcessTimerOrBlockTask+0x3c>
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d806      	bhi.n	800bd1c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800bd0e:	f7fe ffc1 	bl	800ac94 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd12:	68f9      	ldr	r1, [r7, #12]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff ff85 	bl	800bc24 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800bd1a:	e024      	b.n	800bd66 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d008      	beq.n	800bd34 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd22:	4b13      	ldr	r3, [pc, #76]	; (800bd70 <prvProcessTimerOrBlockTask+0x90>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <prvProcessTimerOrBlockTask+0x50>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <prvProcessTimerOrBlockTask+0x52>
 800bd30:	2300      	movs	r3, #0
 800bd32:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd34:	4b0f      	ldr	r3, [pc, #60]	; (800bd74 <prvProcessTimerOrBlockTask+0x94>)
 800bd36:	6818      	ldr	r0, [r3, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	4619      	mov	r1, r3
 800bd42:	f7fe fc99 	bl	800a678 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800bd46:	f7fe ffa5 	bl	800ac94 <xTaskResumeAll>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800bd50:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <prvProcessTimerOrBlockTask+0x98>)
 800bd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	f3bf 8f6f 	isb	sy
    }
 800bd60:	e001      	b.n	800bd66 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800bd62:	f7fe ff97 	bl	800ac94 <xTaskResumeAll>
    }
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20002e7c 	.word	0x20002e7c
 800bd74:	20002e80 	.word	0x20002e80
 800bd78:	e000ed04 	.word	0xe000ed04

0800bd7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd84:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <prvGetNextExpireTime+0x44>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <prvGetNextExpireTime+0x16>
 800bd8e:	2201      	movs	r2, #1
 800bd90:	e000      	b.n	800bd94 <prvGetNextExpireTime+0x18>
 800bd92:	2200      	movs	r2, #0
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d105      	bne.n	800bdac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bda0:	4b07      	ldr	r3, [pc, #28]	; (800bdc0 <prvGetNextExpireTime+0x44>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	e001      	b.n	800bdb0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
    }
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	20002e78 	.word	0x20002e78

0800bdc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800bdcc:	f7ff f804 	bl	800add8 <xTaskGetTickCount>
 800bdd0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800bdd2:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <prvSampleTimeNow+0x3c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d205      	bcs.n	800bde8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800bddc:	f000 f936 	bl	800c04c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	e002      	b.n	800bdee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800bdee:	4a04      	ldr	r2, [pc, #16]	; (800be00 <prvSampleTimeNow+0x3c>)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
    }
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20002e88 	.word	0x20002e88

0800be04 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	429a      	cmp	r2, r3
 800be28:	d812      	bhi.n	800be50 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	1ad2      	subs	r2, r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	429a      	cmp	r2, r3
 800be36:	d302      	bcc.n	800be3e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800be38:	2301      	movs	r3, #1
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	e01b      	b.n	800be76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be3e:	4b10      	ldr	r3, [pc, #64]	; (800be80 <prvInsertTimerInActiveList+0x7c>)
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3304      	adds	r3, #4
 800be46:	4619      	mov	r1, r3
 800be48:	4610      	mov	r0, r2
 800be4a:	f7fd f9ee 	bl	800922a <vListInsert>
 800be4e:	e012      	b.n	800be76 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	429a      	cmp	r2, r3
 800be56:	d206      	bcs.n	800be66 <prvInsertTimerInActiveList+0x62>
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d302      	bcc.n	800be66 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	617b      	str	r3, [r7, #20]
 800be64:	e007      	b.n	800be76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be66:	4b07      	ldr	r3, [pc, #28]	; (800be84 <prvInsertTimerInActiveList+0x80>)
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3304      	adds	r3, #4
 800be6e:	4619      	mov	r1, r3
 800be70:	4610      	mov	r0, r2
 800be72:	f7fd f9da 	bl	800922a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800be76:	697b      	ldr	r3, [r7, #20]
    }
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20002e7c 	.word	0x20002e7c
 800be84:	20002e78 	.word	0x20002e78

0800be88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08e      	sub	sp, #56	; 0x38
 800be8c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be8e:	e0ca      	b.n	800c026 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	da18      	bge.n	800bec8 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be96:	1d3b      	adds	r3, r7, #4
 800be98:	3304      	adds	r3, #4
 800be9a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10a      	bne.n	800beb8 <prvProcessReceivedCommands+0x30>
        __asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	61fb      	str	r3, [r7, #28]
    }
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bebe:	6850      	ldr	r0, [r2, #4]
 800bec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bec2:	6892      	ldr	r2, [r2, #8]
 800bec4:	4611      	mov	r1, r2
 800bec6:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f2c0 80aa 	blt.w	800c024 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d004      	beq.n	800bee6 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bede:	3304      	adds	r3, #4
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fd f9db 	bl	800929c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bee6:	463b      	mov	r3, r7
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff ff6b 	bl	800bdc4 <prvSampleTimeNow>
 800beee:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b09      	cmp	r3, #9
 800bef4:	f200 8097 	bhi.w	800c026 <prvProcessReceivedCommands+0x19e>
 800bef8:	a201      	add	r2, pc, #4	; (adr r2, 800bf00 <prvProcessReceivedCommands+0x78>)
 800befa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befe:	bf00      	nop
 800bf00:	0800bf29 	.word	0x0800bf29
 800bf04:	0800bf29 	.word	0x0800bf29
 800bf08:	0800bf29 	.word	0x0800bf29
 800bf0c:	0800bf9d 	.word	0x0800bf9d
 800bf10:	0800bfb1 	.word	0x0800bfb1
 800bf14:	0800bffb 	.word	0x0800bffb
 800bf18:	0800bf29 	.word	0x0800bf29
 800bf1c:	0800bf29 	.word	0x0800bf29
 800bf20:	0800bf9d 	.word	0x0800bf9d
 800bf24:	0800bfb1 	.word	0x0800bfb1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf2e:	f043 0301 	orr.w	r3, r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	18d1      	adds	r1, r2, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf48:	f7ff ff5c 	bl	800be04 <prvInsertTimerInActiveList>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d069      	beq.n	800c026 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf58:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d05e      	beq.n	800c026 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	441a      	add	r2, r3
 800bf70:	2300      	movs	r3, #0
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	2300      	movs	r3, #0
 800bf76:	2100      	movs	r1, #0
 800bf78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf7a:	f7ff fe05 	bl	800bb88 <xTimerGenericCommand>
 800bf7e:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d14f      	bne.n	800c026 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	61bb      	str	r3, [r7, #24]
    }
 800bf98:	bf00      	nop
 800bf9a:	e7fe      	b.n	800bf9a <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfa2:	f023 0301 	bic.w	r3, r3, #1
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800bfae:	e03a      	b.n	800c026 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfb6:	f043 0301 	orr.w	r3, r3, #1
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	617b      	str	r3, [r7, #20]
    }
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	699a      	ldr	r2, [r3, #24]
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	18d1      	adds	r1, r2, r3
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff4:	f7ff ff06 	bl	800be04 <prvInsertTimerInActiveList>
                        break;
 800bff8:	e015      	b.n	800c026 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c000:	f003 0302 	and.w	r3, r3, #2
 800c004:	2b00      	cmp	r3, #0
 800c006:	d103      	bne.n	800c010 <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 800c008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c00a:	f7fc ff9f 	bl	8008f4c <vPortFree>
 800c00e:	e00a      	b.n	800c026 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c016:	f023 0301 	bic.w	r3, r3, #1
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c022:	e000      	b.n	800c026 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800c024:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c026:	4b08      	ldr	r3, [pc, #32]	; (800c048 <prvProcessReceivedCommands+0x1c0>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	1d39      	adds	r1, r7, #4
 800c02c:	2200      	movs	r2, #0
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fd ff7c 	bl	8009f2c <xQueueReceive>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	f47f af2a 	bne.w	800be90 <prvProcessReceivedCommands+0x8>
        }
    }
 800c03c:	bf00      	nop
 800c03e:	bf00      	nop
 800c040:	3730      	adds	r7, #48	; 0x30
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20002e80 	.word	0x20002e80

0800c04c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c052:	e048      	b.n	800c0e6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c054:	4b2d      	ldr	r3, [pc, #180]	; (800c10c <prvSwitchTimerLists+0xc0>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c05e:	4b2b      	ldr	r3, [pc, #172]	; (800c10c <prvSwitchTimerLists+0xc0>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fd f915 	bl	800929c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b00      	cmp	r3, #0
 800c086:	d02e      	beq.n	800c0e6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	4413      	add	r3, r2
 800c090:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	429a      	cmp	r2, r3
 800c098:	d90e      	bls.n	800c0b8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0a6:	4b19      	ldr	r3, [pc, #100]	; (800c10c <prvSwitchTimerLists+0xc0>)
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	f7fd f8ba 	bl	800922a <vListInsert>
 800c0b6:	e016      	b.n	800c0e6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f7ff fd60 	bl	800bb88 <xTimerGenericCommand>
 800c0c8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	603b      	str	r3, [r7, #0]
    }
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0e6:	4b09      	ldr	r3, [pc, #36]	; (800c10c <prvSwitchTimerLists+0xc0>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1b1      	bne.n	800c054 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800c0f0:	4b06      	ldr	r3, [pc, #24]	; (800c10c <prvSwitchTimerLists+0xc0>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800c0f6:	4b06      	ldr	r3, [pc, #24]	; (800c110 <prvSwitchTimerLists+0xc4>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a04      	ldr	r2, [pc, #16]	; (800c10c <prvSwitchTimerLists+0xc0>)
 800c0fc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c0fe:	4a04      	ldr	r2, [pc, #16]	; (800c110 <prvSwitchTimerLists+0xc4>)
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	6013      	str	r3, [r2, #0]
    }
 800c104:	bf00      	nop
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	20002e78 	.word	0x20002e78
 800c110:	20002e7c 	.word	0x20002e7c

0800c114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c11a:	f7fd fa15 	bl	8009548 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c11e:	4b15      	ldr	r3, [pc, #84]	; (800c174 <prvCheckForValidListAndQueue+0x60>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d120      	bne.n	800c168 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800c126:	4814      	ldr	r0, [pc, #80]	; (800c178 <prvCheckForValidListAndQueue+0x64>)
 800c128:	f7fd f82e 	bl	8009188 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c12c:	4813      	ldr	r0, [pc, #76]	; (800c17c <prvCheckForValidListAndQueue+0x68>)
 800c12e:	f7fd f82b 	bl	8009188 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c132:	4b13      	ldr	r3, [pc, #76]	; (800c180 <prvCheckForValidListAndQueue+0x6c>)
 800c134:	4a10      	ldr	r2, [pc, #64]	; (800c178 <prvCheckForValidListAndQueue+0x64>)
 800c136:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c138:	4b12      	ldr	r3, [pc, #72]	; (800c184 <prvCheckForValidListAndQueue+0x70>)
 800c13a:	4a10      	ldr	r2, [pc, #64]	; (800c17c <prvCheckForValidListAndQueue+0x68>)
 800c13c:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c13e:	2300      	movs	r3, #0
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	4b11      	ldr	r3, [pc, #68]	; (800c188 <prvCheckForValidListAndQueue+0x74>)
 800c144:	4a11      	ldr	r2, [pc, #68]	; (800c18c <prvCheckForValidListAndQueue+0x78>)
 800c146:	2110      	movs	r1, #16
 800c148:	200a      	movs	r0, #10
 800c14a:	f7fd fbd5 	bl	80098f8 <xQueueGenericCreateStatic>
 800c14e:	4603      	mov	r3, r0
 800c150:	4a08      	ldr	r2, [pc, #32]	; (800c174 <prvCheckForValidListAndQueue+0x60>)
 800c152:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800c154:	4b07      	ldr	r3, [pc, #28]	; (800c174 <prvCheckForValidListAndQueue+0x60>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d005      	beq.n	800c168 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c15c:	4b05      	ldr	r3, [pc, #20]	; (800c174 <prvCheckForValidListAndQueue+0x60>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	490b      	ldr	r1, [pc, #44]	; (800c190 <prvCheckForValidListAndQueue+0x7c>)
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fa56 	bl	800a614 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c168:	f7fd fa1e 	bl	80095a8 <vPortExitCritical>
    }
 800c16c:	bf00      	nop
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	20002e80 	.word	0x20002e80
 800c178:	20002e50 	.word	0x20002e50
 800c17c:	20002e64 	.word	0x20002e64
 800c180:	20002e78 	.word	0x20002e78
 800c184:	20002e7c 	.word	0x20002e7c
 800c188:	20002f2c 	.word	0x20002f2c
 800c18c:	20002e8c 	.word	0x20002e8c
 800c190:	08015438 	.word	0x08015438

0800c194 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800c19a:	4b24      	ldr	r3, [pc, #144]	; (800c22c <_DoInit+0x98>)
 800c19c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2203      	movs	r2, #3
 800c1a2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2203      	movs	r2, #3
 800c1a8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a20      	ldr	r2, [pc, #128]	; (800c230 <_DoInit+0x9c>)
 800c1ae:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a20      	ldr	r2, [pc, #128]	; (800c234 <_DoInit+0xa0>)
 800c1b4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1bc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a17      	ldr	r2, [pc, #92]	; (800c230 <_DoInit+0x9c>)
 800c1d4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a17      	ldr	r2, [pc, #92]	; (800c238 <_DoInit+0xa4>)
 800c1da:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2210      	movs	r2, #16
 800c1e0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3307      	adds	r3, #7
 800c1f8:	4a10      	ldr	r2, [pc, #64]	; (800c23c <_DoInit+0xa8>)
 800c1fa:	6810      	ldr	r0, [r2, #0]
 800c1fc:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c1fe:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a0e      	ldr	r2, [pc, #56]	; (800c240 <_DoInit+0xac>)
 800c206:	6810      	ldr	r0, [r2, #0]
 800c208:	6018      	str	r0, [r3, #0]
 800c20a:	8891      	ldrh	r1, [r2, #4]
 800c20c:	7992      	ldrb	r2, [r2, #6]
 800c20e:	8099      	strh	r1, [r3, #4]
 800c210:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c212:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2220      	movs	r2, #32
 800c21a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c21c:	f3bf 8f5f 	dmb	sy
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	20002f7c 	.word	0x20002f7c
 800c230:	08015440 	.word	0x08015440
 800c234:	20003024 	.word	0x20003024
 800c238:	20004024 	.word	0x20004024
 800c23c:	0801544c 	.word	0x0801544c
 800c240:	08015450 	.word	0x08015450

0800c244 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c244:	b580      	push	{r7, lr}
 800c246:	b08c      	sub	sp, #48	; 0x30
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c250:	4b3e      	ldr	r3, [pc, #248]	; (800c34c <SEGGER_RTT_ReadNoLock+0x108>)
 800c252:	623b      	str	r3, [r7, #32]
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <SEGGER_RTT_ReadNoLock+0x1e>
 800c25e:	f7ff ff99 	bl	800c194 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	4613      	mov	r3, r2
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	4413      	add	r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	3360      	adds	r3, #96	; 0x60
 800c26e:	4a37      	ldr	r2, [pc, #220]	; (800c34c <SEGGER_RTT_ReadNoLock+0x108>)
 800c270:	4413      	add	r3, r2
 800c272:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c284:	2300      	movs	r3, #0
 800c286:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d92b      	bls.n	800c2e8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	689a      	ldr	r2, [r3, #8]
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	bf28      	it	cs
 800c2a2:	4613      	movcs	r3, r2
 800c2a4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	4413      	add	r3, r2
 800c2ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	6939      	ldr	r1, [r7, #16]
 800c2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2b6:	f008 fb6f 	bl	8014998 <memcpy>
    NumBytesRead += NumBytesRem;
 800c2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	4413      	add	r3, r2
 800c2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c2d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d101      	bne.n	800c2e8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c2e8:	69ba      	ldr	r2, [r7, #24]
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	bf28      	it	cs
 800c2f8:	4613      	movcs	r3, r2
 800c2fa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d019      	beq.n	800c336 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	4413      	add	r3, r2
 800c30a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	6939      	ldr	r1, [r7, #16]
 800c310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c312:	f008 fb41 	bl	8014998 <memcpy>
    NumBytesRead += NumBytesRem;
 800c316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	4413      	add	r3, r2
 800c31c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	4413      	add	r3, r2
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	4413      	add	r3, r2
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c340:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c344:	4618      	mov	r0, r3
 800c346:	3730      	adds	r7, #48	; 0x30
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20002f7c 	.word	0x20002f7c

0800c350 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c350:	b580      	push	{r7, lr}
 800c352:	b088      	sub	sp, #32
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c35e:	4b3d      	ldr	r3, [pc, #244]	; (800c454 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c360:	61bb      	str	r3, [r7, #24]
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c36c:	f7ff ff12 	bl	800c194 <_DoInit>
  SEGGER_RTT_LOCK();
 800c370:	f3ef 8311 	mrs	r3, BASEPRI
 800c374:	f04f 0120 	mov.w	r1, #32
 800c378:	f381 8811 	msr	BASEPRI, r1
 800c37c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c37e:	4b35      	ldr	r3, [pc, #212]	; (800c454 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c380:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c386:	6939      	ldr	r1, [r7, #16]
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	4613      	mov	r3, r2
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	4413      	add	r3, r2
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	440b      	add	r3, r1
 800c396:	3304      	adds	r3, #4
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d008      	beq.n	800c3b0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	69fa      	ldr	r2, [r7, #28]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	dbeb      	blt.n	800c386 <SEGGER_RTT_AllocUpBuffer+0x36>
 800c3ae:	e000      	b.n	800c3b2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c3b0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	da3f      	bge.n	800c43c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c3bc:	6939      	ldr	r1, [r7, #16]
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	005b      	lsls	r3, r3, #1
 800c3c6:	4413      	add	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	440b      	add	r3, r1
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c3d0:	6939      	ldr	r1, [r7, #16]
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	440b      	add	r3, r1
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c3e6:	6939      	ldr	r1, [r7, #16]
 800c3e8:	69fa      	ldr	r2, [r7, #28]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	005b      	lsls	r3, r3, #1
 800c3ee:	4413      	add	r3, r2
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	440b      	add	r3, r1
 800c3f4:	3320      	adds	r3, #32
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c3fa:	6939      	ldr	r1, [r7, #16]
 800c3fc:	69fa      	ldr	r2, [r7, #28]
 800c3fe:	4613      	mov	r3, r2
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	4413      	add	r3, r2
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	440b      	add	r3, r1
 800c408:	3328      	adds	r3, #40	; 0x28
 800c40a:	2200      	movs	r2, #0
 800c40c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c40e:	6939      	ldr	r1, [r7, #16]
 800c410:	69fa      	ldr	r2, [r7, #28]
 800c412:	4613      	mov	r3, r2
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4413      	add	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	440b      	add	r3, r1
 800c41c:	3324      	adds	r3, #36	; 0x24
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c422:	6939      	ldr	r1, [r7, #16]
 800c424:	69fa      	ldr	r2, [r7, #28]
 800c426:	4613      	mov	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	440b      	add	r3, r1
 800c430:	332c      	adds	r3, #44	; 0x2c
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c436:	f3bf 8f5f 	dmb	sy
 800c43a:	e002      	b.n	800c442 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c43c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c440:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c448:	69fb      	ldr	r3, [r7, #28]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20002f7c 	.word	0x20002f7c

0800c458 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08a      	sub	sp, #40	; 0x28
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800c466:	4b21      	ldr	r3, [pc, #132]	; (800c4ec <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c468:	623b      	str	r3, [r7, #32]
 800c46a:	6a3b      	ldr	r3, [r7, #32]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c474:	f7ff fe8e 	bl	800c194 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c478:	4b1c      	ldr	r3, [pc, #112]	; (800c4ec <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c47a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d82c      	bhi.n	800c4dc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800c482:	f3ef 8311 	mrs	r3, BASEPRI
 800c486:	f04f 0120 	mov.w	r1, #32
 800c48a:	f381 8811 	msr	BASEPRI, r1
 800c48e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4613      	mov	r3, r2
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	4413      	add	r3, r2
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	3360      	adds	r3, #96	; 0x60
 800c49c:	69fa      	ldr	r2, [r7, #28]
 800c49e:	4413      	add	r3, r2
 800c4a0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00e      	beq.n	800c4c6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ca:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c4cc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c4da:	e002      	b.n	800c4e2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800c4dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3728      	adds	r7, #40	; 0x28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	20002f7c 	.word	0x20002f7c

0800c4f0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c4f0:	b480      	push	{r7}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00f      	beq.n	800c526 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800c506:	e002      	b.n	800c50e <_EncodeStr+0x1e>
      Len++;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	3301      	adds	r3, #1
 800c50c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	4413      	add	r3, r2
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1f6      	bne.n	800c508 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d901      	bls.n	800c526 <_EncodeStr+0x36>
      Len = Limit;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2bfe      	cmp	r3, #254	; 0xfe
 800c52a:	d806      	bhi.n	800c53a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	60fa      	str	r2, [r7, #12]
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	b2d2      	uxtb	r2, r2
 800c536:	701a      	strb	r2, [r3, #0]
 800c538:	e011      	b.n	800c55e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	60fa      	str	r2, [r7, #12]
 800c540:	22ff      	movs	r2, #255	; 0xff
 800c542:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	60fa      	str	r2, [r7, #12]
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	b2d2      	uxtb	r2, r2
 800c54e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	0a19      	lsrs	r1, r3, #8
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	60fa      	str	r2, [r7, #12]
 800c55a:	b2ca      	uxtb	r2, r1
 800c55c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c562:	e00a      	b.n	800c57a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	1c53      	adds	r3, r2, #1
 800c568:	60bb      	str	r3, [r7, #8]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	1c59      	adds	r1, r3, #1
 800c56e:	60f9      	str	r1, [r7, #12]
 800c570:	7812      	ldrb	r2, [r2, #0]
 800c572:	701a      	strb	r2, [r3, #0]
    n++;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	3301      	adds	r3, #1
 800c578:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d3f0      	bcc.n	800c564 <_EncodeStr+0x74>
  }
  return pPayload;
 800c582:	68fb      	ldr	r3, [r7, #12]
}
 800c584:	4618      	mov	r0, r3
 800c586:	371c      	adds	r7, #28
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3304      	adds	r3, #4
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c5ae:	4b36      	ldr	r3, [pc, #216]	; (800c688 <_HandleIncomingPacket+0xe0>)
 800c5b0:	7e1b      	ldrb	r3, [r3, #24]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	1cfb      	adds	r3, r7, #3
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	f7ff fe43 	bl	800c244 <SEGGER_RTT_ReadNoLock>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	dd54      	ble.n	800c672 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800c5c8:	78fb      	ldrb	r3, [r7, #3]
 800c5ca:	2b80      	cmp	r3, #128	; 0x80
 800c5cc:	d032      	beq.n	800c634 <_HandleIncomingPacket+0x8c>
 800c5ce:	2b80      	cmp	r3, #128	; 0x80
 800c5d0:	dc42      	bgt.n	800c658 <_HandleIncomingPacket+0xb0>
 800c5d2:	2b07      	cmp	r3, #7
 800c5d4:	dc16      	bgt.n	800c604 <_HandleIncomingPacket+0x5c>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	dd3e      	ble.n	800c658 <_HandleIncomingPacket+0xb0>
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	2b06      	cmp	r3, #6
 800c5de:	d83b      	bhi.n	800c658 <_HandleIncomingPacket+0xb0>
 800c5e0:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <_HandleIncomingPacket+0x40>)
 800c5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e6:	bf00      	nop
 800c5e8:	0800c60b 	.word	0x0800c60b
 800c5ec:	0800c611 	.word	0x0800c611
 800c5f0:	0800c617 	.word	0x0800c617
 800c5f4:	0800c61d 	.word	0x0800c61d
 800c5f8:	0800c623 	.word	0x0800c623
 800c5fc:	0800c629 	.word	0x0800c629
 800c600:	0800c62f 	.word	0x0800c62f
 800c604:	2b7f      	cmp	r3, #127	; 0x7f
 800c606:	d036      	beq.n	800c676 <_HandleIncomingPacket+0xce>
 800c608:	e026      	b.n	800c658 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c60a:	f000 fba7 	bl	800cd5c <SEGGER_SYSVIEW_Start>
      break;
 800c60e:	e037      	b.n	800c680 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c610:	f000 fc5e 	bl	800ced0 <SEGGER_SYSVIEW_Stop>
      break;
 800c614:	e034      	b.n	800c680 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c616:	f000 fe37 	bl	800d288 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c61a:	e031      	b.n	800c680 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c61c:	f000 fdfc 	bl	800d218 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c620:	e02e      	b.n	800c680 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c622:	f000 fc7b 	bl	800cf1c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c626:	e02b      	b.n	800c680 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c628:	f001 f8ca 	bl	800d7c0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c62c:	e028      	b.n	800c680 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c62e:	f001 f8a9 	bl	800d784 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c632:	e025      	b.n	800c680 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c634:	4b14      	ldr	r3, [pc, #80]	; (800c688 <_HandleIncomingPacket+0xe0>)
 800c636:	7e1b      	ldrb	r3, [r3, #24]
 800c638:	4618      	mov	r0, r3
 800c63a:	1cfb      	adds	r3, r7, #3
 800c63c:	2201      	movs	r2, #1
 800c63e:	4619      	mov	r1, r3
 800c640:	f7ff fe00 	bl	800c244 <SEGGER_RTT_ReadNoLock>
 800c644:	4603      	mov	r3, r0
 800c646:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	dd15      	ble.n	800c67a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c64e:	78fb      	ldrb	r3, [r7, #3]
 800c650:	4618      	mov	r0, r3
 800c652:	f001 f817 	bl	800d684 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c656:	e010      	b.n	800c67a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	b25b      	sxtb	r3, r3
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	da0e      	bge.n	800c67e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c660:	4b09      	ldr	r3, [pc, #36]	; (800c688 <_HandleIncomingPacket+0xe0>)
 800c662:	7e1b      	ldrb	r3, [r3, #24]
 800c664:	4618      	mov	r0, r3
 800c666:	1cfb      	adds	r3, r7, #3
 800c668:	2201      	movs	r2, #1
 800c66a:	4619      	mov	r1, r3
 800c66c:	f7ff fdea 	bl	800c244 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c670:	e005      	b.n	800c67e <_HandleIncomingPacket+0xd6>
    }
  }
 800c672:	bf00      	nop
 800c674:	e004      	b.n	800c680 <_HandleIncomingPacket+0xd8>
      break;
 800c676:	bf00      	nop
 800c678:	e002      	b.n	800c680 <_HandleIncomingPacket+0xd8>
      break;
 800c67a:	bf00      	nop
 800c67c:	e000      	b.n	800c680 <_HandleIncomingPacket+0xd8>
      break;
 800c67e:	bf00      	nop
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	2000443c 	.word	0x2000443c

0800c68c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08c      	sub	sp, #48	; 0x30
 800c690:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c692:	2301      	movs	r3, #1
 800c694:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c696:	1d3b      	adds	r3, r7, #4
 800c698:	3301      	adds	r3, #1
 800c69a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6a0:	4b31      	ldr	r3, [pc, #196]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6a6:	e00b      	b.n	800c6c0 <_TrySendOverflowPacket+0x34>
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	1c59      	adds	r1, r3, #1
 800c6b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c6b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6b6:	b2d2      	uxtb	r2, r2
 800c6b8:	701a      	strb	r2, [r3, #0]
 800c6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6bc:	09db      	lsrs	r3, r3, #7
 800c6be:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	2b7f      	cmp	r3, #127	; 0x7f
 800c6c4:	d8f0      	bhi.n	800c6a8 <_TrySendOverflowPacket+0x1c>
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6ce:	b2d2      	uxtb	r2, r2
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c6d6:	4b25      	ldr	r3, [pc, #148]	; (800c76c <_TrySendOverflowPacket+0xe0>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c6dc:	4b22      	ldr	r3, [pc, #136]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	69ba      	ldr	r2, [r7, #24]
 800c6e2:	1ad3      	subs	r3, r2, r3
 800c6e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	623b      	str	r3, [r7, #32]
 800c6ee:	e00b      	b.n	800c708 <_TrySendOverflowPacket+0x7c>
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	1c59      	adds	r1, r3, #1
 800c6f8:	6279      	str	r1, [r7, #36]	; 0x24
 800c6fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6fe:	b2d2      	uxtb	r2, r2
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	6a3b      	ldr	r3, [r7, #32]
 800c704:	09db      	lsrs	r3, r3, #7
 800c706:	623b      	str	r3, [r7, #32]
 800c708:	6a3b      	ldr	r3, [r7, #32]
 800c70a:	2b7f      	cmp	r3, #127	; 0x7f
 800c70c:	d8f0      	bhi.n	800c6f0 <_TrySendOverflowPacket+0x64>
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	627a      	str	r2, [r7, #36]	; 0x24
 800c714:	6a3a      	ldr	r2, [r7, #32]
 800c716:	b2d2      	uxtb	r2, r2
 800c718:	701a      	strb	r2, [r3, #0]
 800c71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c71e:	4b12      	ldr	r3, [pc, #72]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c720:	785b      	ldrb	r3, [r3, #1]
 800c722:	4618      	mov	r0, r3
 800c724:	1d3b      	adds	r3, r7, #4
 800c726:	69fa      	ldr	r2, [r7, #28]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	461a      	mov	r2, r3
 800c72c:	1d3b      	adds	r3, r7, #4
 800c72e:	4619      	mov	r1, r3
 800c730:	f7f3 fd5e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c734:	4603      	mov	r3, r0
 800c736:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d009      	beq.n	800c752 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c73e:	4a0a      	ldr	r2, [pc, #40]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c744:	4b08      	ldr	r3, [pc, #32]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	3b01      	subs	r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	e004      	b.n	800c75c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c752:	4b05      	ldr	r3, [pc, #20]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c754:	695b      	ldr	r3, [r3, #20]
 800c756:	3301      	adds	r3, #1
 800c758:	4a03      	ldr	r2, [pc, #12]	; (800c768 <_TrySendOverflowPacket+0xdc>)
 800c75a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c75c:	693b      	ldr	r3, [r7, #16]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3730      	adds	r7, #48	; 0x30
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	2000443c 	.word	0x2000443c
 800c76c:	e0001004 	.word	0xe0001004

0800c770 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c770:	b580      	push	{r7, lr}
 800c772:	b08a      	sub	sp, #40	; 0x28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c77c:	4b6c      	ldr	r3, [pc, #432]	; (800c930 <_SendPacket+0x1c0>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d010      	beq.n	800c7a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c784:	4b6a      	ldr	r3, [pc, #424]	; (800c930 <_SendPacket+0x1c0>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 80a3 	beq.w	800c8d4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c78e:	4b68      	ldr	r3, [pc, #416]	; (800c930 <_SendPacket+0x1c0>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d109      	bne.n	800c7aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c796:	f7ff ff79 	bl	800c68c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c79a:	4b65      	ldr	r3, [pc, #404]	; (800c930 <_SendPacket+0x1c0>)
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	f040 809a 	bne.w	800c8d8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c7a4:	e001      	b.n	800c7aa <_SendPacket+0x3a>
    goto Send;
 800c7a6:	bf00      	nop
 800c7a8:	e000      	b.n	800c7ac <_SendPacket+0x3c>
Send:
 800c7aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b1f      	cmp	r3, #31
 800c7b0:	d809      	bhi.n	800c7c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c7b2:	4b5f      	ldr	r3, [pc, #380]	; (800c930 <_SendPacket+0x1c0>)
 800c7b4:	69da      	ldr	r2, [r3, #28]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f040 808b 	bne.w	800c8dc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b17      	cmp	r3, #23
 800c7ca:	d807      	bhi.n	800c7dc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	60fb      	str	r3, [r7, #12]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	e03d      	b.n	800c858 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800c7e8:	d912      	bls.n	800c810 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	09da      	lsrs	r2, r3, #7
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	b2d2      	uxtb	r2, r2
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	3a01      	subs	r2, #1
 800c802:	60fa      	str	r2, [r7, #12]
 800c804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	701a      	strb	r2, [r3, #0]
 800c80e:	e006      	b.n	800c81e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3b01      	subs	r3, #1
 800c814:	60fb      	str	r3, [r7, #12]
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b7f      	cmp	r3, #127	; 0x7f
 800c822:	d912      	bls.n	800c84a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	09da      	lsrs	r2, r3, #7
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	60fb      	str	r3, [r7, #12]
 800c82e:	b2d2      	uxtb	r2, r2
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	3a01      	subs	r2, #1
 800c83c:	60fa      	str	r2, [r7, #12]
 800c83e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c842:	b2da      	uxtb	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	701a      	strb	r2, [r3, #0]
 800c848:	e006      	b.n	800c858 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	b2da      	uxtb	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c858:	4b36      	ldr	r3, [pc, #216]	; (800c934 <_SendPacket+0x1c4>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c85e:	4b34      	ldr	r3, [pc, #208]	; (800c930 <_SendPacket+0x1c0>)
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	69ba      	ldr	r2, [r7, #24]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	627b      	str	r3, [r7, #36]	; 0x24
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	623b      	str	r3, [r7, #32]
 800c870:	e00b      	b.n	800c88a <_SendPacket+0x11a>
 800c872:	6a3b      	ldr	r3, [r7, #32]
 800c874:	b2da      	uxtb	r2, r3
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	1c59      	adds	r1, r3, #1
 800c87a:	6279      	str	r1, [r7, #36]	; 0x24
 800c87c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c880:	b2d2      	uxtb	r2, r2
 800c882:	701a      	strb	r2, [r3, #0]
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	09db      	lsrs	r3, r3, #7
 800c888:	623b      	str	r3, [r7, #32]
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	2b7f      	cmp	r3, #127	; 0x7f
 800c88e:	d8f0      	bhi.n	800c872 <_SendPacket+0x102>
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	627a      	str	r2, [r7, #36]	; 0x24
 800c896:	6a3a      	ldr	r2, [r7, #32]
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	701a      	strb	r2, [r3, #0]
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c8a0:	4b23      	ldr	r3, [pc, #140]	; (800c930 <_SendPacket+0x1c0>)
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68f9      	ldr	r1, [r7, #12]
 800c8b0:	f7f3 fc9e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d003      	beq.n	800c8c6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c8be:	4a1c      	ldr	r2, [pc, #112]	; (800c930 <_SendPacket+0x1c0>)
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	60d3      	str	r3, [r2, #12]
 800c8c4:	e00b      	b.n	800c8de <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c8c6:	4b1a      	ldr	r3, [pc, #104]	; (800c930 <_SendPacket+0x1c0>)
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	4b18      	ldr	r3, [pc, #96]	; (800c930 <_SendPacket+0x1c0>)
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	e004      	b.n	800c8de <_SendPacket+0x16e>
    goto SendDone;
 800c8d4:	bf00      	nop
 800c8d6:	e002      	b.n	800c8de <_SendPacket+0x16e>
      goto SendDone;
 800c8d8:	bf00      	nop
 800c8da:	e000      	b.n	800c8de <_SendPacket+0x16e>
      goto SendDone;
 800c8dc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c8de:	4b14      	ldr	r3, [pc, #80]	; (800c930 <_SendPacket+0x1c0>)
 800c8e0:	7e1b      	ldrb	r3, [r3, #24]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4a14      	ldr	r2, [pc, #80]	; (800c938 <_SendPacket+0x1c8>)
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	440b      	add	r3, r1
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	4413      	add	r3, r2
 800c8f0:	336c      	adds	r3, #108	; 0x6c
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	4b0e      	ldr	r3, [pc, #56]	; (800c930 <_SendPacket+0x1c0>)
 800c8f6:	7e1b      	ldrb	r3, [r3, #24]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	490f      	ldr	r1, [pc, #60]	; (800c938 <_SendPacket+0x1c8>)
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	005b      	lsls	r3, r3, #1
 800c900:	4403      	add	r3, r0
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	440b      	add	r3, r1
 800c906:	3370      	adds	r3, #112	; 0x70
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d00b      	beq.n	800c926 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c90e:	4b08      	ldr	r3, [pc, #32]	; (800c930 <_SendPacket+0x1c0>)
 800c910:	789b      	ldrb	r3, [r3, #2]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d107      	bne.n	800c926 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c916:	4b06      	ldr	r3, [pc, #24]	; (800c930 <_SendPacket+0x1c0>)
 800c918:	2201      	movs	r2, #1
 800c91a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c91c:	f7ff fe44 	bl	800c5a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c920:	4b03      	ldr	r3, [pc, #12]	; (800c930 <_SendPacket+0x1c0>)
 800c922:	2200      	movs	r2, #0
 800c924:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c926:	bf00      	nop
 800c928:	3728      	adds	r7, #40	; 0x28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	2000443c 	.word	0x2000443c
 800c934:	e0001004 	.word	0xe0001004
 800c938:	20002f7c 	.word	0x20002f7c

0800c93c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af02      	add	r7, sp, #8
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c94a:	2300      	movs	r3, #0
 800c94c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c950:	4917      	ldr	r1, [pc, #92]	; (800c9b0 <SEGGER_SYSVIEW_Init+0x74>)
 800c952:	4818      	ldr	r0, [pc, #96]	; (800c9b4 <SEGGER_SYSVIEW_Init+0x78>)
 800c954:	f7ff fcfc 	bl	800c350 <SEGGER_RTT_AllocUpBuffer>
 800c958:	4603      	mov	r3, r0
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	4b16      	ldr	r3, [pc, #88]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c95e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c960:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c962:	785a      	ldrb	r2, [r3, #1]
 800c964:	4b14      	ldr	r3, [pc, #80]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c966:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c968:	4b13      	ldr	r3, [pc, #76]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c96a:	7e1b      	ldrb	r3, [r3, #24]
 800c96c:	4618      	mov	r0, r3
 800c96e:	2300      	movs	r3, #0
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	2308      	movs	r3, #8
 800c974:	4a11      	ldr	r2, [pc, #68]	; (800c9bc <SEGGER_SYSVIEW_Init+0x80>)
 800c976:	490f      	ldr	r1, [pc, #60]	; (800c9b4 <SEGGER_SYSVIEW_Init+0x78>)
 800c978:	f7ff fd6e 	bl	800c458 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c97c:	4b0e      	ldr	r3, [pc, #56]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c97e:	2200      	movs	r2, #0
 800c980:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c982:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <SEGGER_SYSVIEW_Init+0x84>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a0c      	ldr	r2, [pc, #48]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c988:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c98a:	4a0b      	ldr	r2, [pc, #44]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c990:	4a09      	ldr	r2, [pc, #36]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c996:	4a08      	ldr	r2, [pc, #32]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c99c:	4a06      	ldr	r2, [pc, #24]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c9a2:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c9a8:	bf00      	nop
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20004034 	.word	0x20004034
 800c9b4:	08015458 	.word	0x08015458
 800c9b8:	2000443c 	.word	0x2000443c
 800c9bc:	20004434 	.word	0x20004434
 800c9c0:	e0001004 	.word	0xe0001004

0800c9c4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c9cc:	4a04      	ldr	r2, [pc, #16]	; (800c9e0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6113      	str	r3, [r2, #16]
}
 800c9d2:	bf00      	nop
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	2000443c 	.word	0x2000443c

0800c9e4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c9ec:	f3ef 8311 	mrs	r3, BASEPRI
 800c9f0:	f04f 0120 	mov.w	r1, #32
 800c9f4:	f381 8811 	msr	BASEPRI, r1
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	4808      	ldr	r0, [pc, #32]	; (800ca1c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c9fc:	f7ff fdc8 	bl	800c590 <_PreparePacket>
 800ca00:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	68b9      	ldr	r1, [r7, #8]
 800ca06:	68b8      	ldr	r0, [r7, #8]
 800ca08:	f7ff feb2 	bl	800c770 <_SendPacket>
  RECORD_END();
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f383 8811 	msr	BASEPRI, r3
}
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	2000446c 	.word	0x2000446c

0800ca20 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca2a:	f3ef 8311 	mrs	r3, BASEPRI
 800ca2e:	f04f 0120 	mov.w	r1, #32
 800ca32:	f381 8811 	msr	BASEPRI, r1
 800ca36:	617b      	str	r3, [r7, #20]
 800ca38:	4816      	ldr	r0, [pc, #88]	; (800ca94 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ca3a:	f7ff fda9 	bl	800c590 <_PreparePacket>
 800ca3e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	61fb      	str	r3, [r7, #28]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	61bb      	str	r3, [r7, #24]
 800ca4c:	e00b      	b.n	800ca66 <SEGGER_SYSVIEW_RecordU32+0x46>
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	1c59      	adds	r1, r3, #1
 800ca56:	61f9      	str	r1, [r7, #28]
 800ca58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca5c:	b2d2      	uxtb	r2, r2
 800ca5e:	701a      	strb	r2, [r3, #0]
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	09db      	lsrs	r3, r3, #7
 800ca64:	61bb      	str	r3, [r7, #24]
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	2b7f      	cmp	r3, #127	; 0x7f
 800ca6a:	d8f0      	bhi.n	800ca4e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	61fa      	str	r2, [r7, #28]
 800ca72:	69ba      	ldr	r2, [r7, #24]
 800ca74:	b2d2      	uxtb	r2, r2
 800ca76:	701a      	strb	r2, [r3, #0]
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	68f9      	ldr	r1, [r7, #12]
 800ca80:	6938      	ldr	r0, [r7, #16]
 800ca82:	f7ff fe75 	bl	800c770 <_SendPacket>
  RECORD_END();
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f383 8811 	msr	BASEPRI, r3
}
 800ca8c:	bf00      	nop
 800ca8e:	3720      	adds	r7, #32
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	2000446c 	.word	0x2000446c

0800ca98 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08c      	sub	sp, #48	; 0x30
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800caa4:	f3ef 8311 	mrs	r3, BASEPRI
 800caa8:	f04f 0120 	mov.w	r1, #32
 800caac:	f381 8811 	msr	BASEPRI, r1
 800cab0:	61fb      	str	r3, [r7, #28]
 800cab2:	4825      	ldr	r0, [pc, #148]	; (800cb48 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800cab4:	f7ff fd6c 	bl	800c590 <_PreparePacket>
 800cab8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cac6:	e00b      	b.n	800cae0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	1c59      	adds	r1, r3, #1
 800cad0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cad2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	09db      	lsrs	r3, r3, #7
 800cade:	62bb      	str	r3, [r7, #40]	; 0x28
 800cae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae2:	2b7f      	cmp	r3, #127	; 0x7f
 800cae4:	d8f0      	bhi.n	800cac8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800caec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	701a      	strb	r2, [r3, #0]
 800caf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	627b      	str	r3, [r7, #36]	; 0x24
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	623b      	str	r3, [r7, #32]
 800cafe:	e00b      	b.n	800cb18 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	1c59      	adds	r1, r3, #1
 800cb08:	6279      	str	r1, [r7, #36]	; 0x24
 800cb0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb0e:	b2d2      	uxtb	r2, r2
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	6a3b      	ldr	r3, [r7, #32]
 800cb14:	09db      	lsrs	r3, r3, #7
 800cb16:	623b      	str	r3, [r7, #32]
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	2b7f      	cmp	r3, #127	; 0x7f
 800cb1c:	d8f0      	bhi.n	800cb00 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	1c5a      	adds	r2, r3, #1
 800cb22:	627a      	str	r2, [r7, #36]	; 0x24
 800cb24:	6a3a      	ldr	r2, [r7, #32]
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	701a      	strb	r2, [r3, #0]
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	6979      	ldr	r1, [r7, #20]
 800cb32:	69b8      	ldr	r0, [r7, #24]
 800cb34:	f7ff fe1c 	bl	800c770 <_SendPacket>
  RECORD_END();
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	f383 8811 	msr	BASEPRI, r3
}
 800cb3e:	bf00      	nop
 800cb40:	3730      	adds	r7, #48	; 0x30
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	2000446c 	.word	0x2000446c

0800cb4c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08e      	sub	sp, #56	; 0x38
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800cb5a:	f3ef 8311 	mrs	r3, BASEPRI
 800cb5e:	f04f 0120 	mov.w	r1, #32
 800cb62:	f381 8811 	msr	BASEPRI, r1
 800cb66:	61fb      	str	r3, [r7, #28]
 800cb68:	4832      	ldr	r0, [pc, #200]	; (800cc34 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800cb6a:	f7ff fd11 	bl	800c590 <_PreparePacket>
 800cb6e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	637b      	str	r3, [r7, #52]	; 0x34
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	633b      	str	r3, [r7, #48]	; 0x30
 800cb7c:	e00b      	b.n	800cb96 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb84:	1c59      	adds	r1, r3, #1
 800cb86:	6379      	str	r1, [r7, #52]	; 0x34
 800cb88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb8c:	b2d2      	uxtb	r2, r2
 800cb8e:	701a      	strb	r2, [r3, #0]
 800cb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb92:	09db      	lsrs	r3, r3, #7
 800cb94:	633b      	str	r3, [r7, #48]	; 0x30
 800cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb98:	2b7f      	cmp	r3, #127	; 0x7f
 800cb9a:	d8f0      	bhi.n	800cb7e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800cb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	637a      	str	r2, [r7, #52]	; 0x34
 800cba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cba4:	b2d2      	uxtb	r2, r2
 800cba6:	701a      	strb	r2, [r3, #0]
 800cba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbb4:	e00b      	b.n	800cbce <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	1c59      	adds	r1, r3, #1
 800cbbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cbc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbc4:	b2d2      	uxtb	r2, r2
 800cbc6:	701a      	strb	r2, [r3, #0]
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	09db      	lsrs	r3, r3, #7
 800cbcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	2b7f      	cmp	r3, #127	; 0x7f
 800cbd2:	d8f0      	bhi.n	800cbb6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cbda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbdc:	b2d2      	uxtb	r2, r2
 800cbde:	701a      	strb	r2, [r3, #0]
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	627b      	str	r3, [r7, #36]	; 0x24
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	623b      	str	r3, [r7, #32]
 800cbec:	e00b      	b.n	800cc06 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	1c59      	adds	r1, r3, #1
 800cbf6:	6279      	str	r1, [r7, #36]	; 0x24
 800cbf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbfc:	b2d2      	uxtb	r2, r2
 800cbfe:	701a      	strb	r2, [r3, #0]
 800cc00:	6a3b      	ldr	r3, [r7, #32]
 800cc02:	09db      	lsrs	r3, r3, #7
 800cc04:	623b      	str	r3, [r7, #32]
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	2b7f      	cmp	r3, #127	; 0x7f
 800cc0a:	d8f0      	bhi.n	800cbee <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	627a      	str	r2, [r7, #36]	; 0x24
 800cc12:	6a3a      	ldr	r2, [r7, #32]
 800cc14:	b2d2      	uxtb	r2, r2
 800cc16:	701a      	strb	r2, [r3, #0]
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	6979      	ldr	r1, [r7, #20]
 800cc20:	69b8      	ldr	r0, [r7, #24]
 800cc22:	f7ff fda5 	bl	800c770 <_SendPacket>
  RECORD_END();
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	f383 8811 	msr	BASEPRI, r3
}
 800cc2c:	bf00      	nop
 800cc2e:	3738      	adds	r7, #56	; 0x38
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	2000446c 	.word	0x2000446c

0800cc38 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b090      	sub	sp, #64	; 0x40
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cc46:	f3ef 8311 	mrs	r3, BASEPRI
 800cc4a:	f04f 0120 	mov.w	r1, #32
 800cc4e:	f381 8811 	msr	BASEPRI, r1
 800cc52:	61fb      	str	r3, [r7, #28]
 800cc54:	4840      	ldr	r0, [pc, #256]	; (800cd58 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800cc56:	f7ff fc9b 	bl	800c590 <_PreparePacket>
 800cc5a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc68:	e00b      	b.n	800cc82 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc70:	1c59      	adds	r1, r3, #1
 800cc72:	63f9      	str	r1, [r7, #60]	; 0x3c
 800cc74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc78:	b2d2      	uxtb	r2, r2
 800cc7a:	701a      	strb	r2, [r3, #0]
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	09db      	lsrs	r3, r3, #7
 800cc80:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	2b7f      	cmp	r3, #127	; 0x7f
 800cc86:	d8f0      	bhi.n	800cc6a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800cc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc8a:	1c5a      	adds	r2, r3, #1
 800cc8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cc8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc90:	b2d2      	uxtb	r2, r2
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	637b      	str	r3, [r7, #52]	; 0x34
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	633b      	str	r3, [r7, #48]	; 0x30
 800cca0:	e00b      	b.n	800ccba <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca8:	1c59      	adds	r1, r3, #1
 800ccaa:	6379      	str	r1, [r7, #52]	; 0x34
 800ccac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccb0:	b2d2      	uxtb	r2, r2
 800ccb2:	701a      	strb	r2, [r3, #0]
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb6:	09db      	lsrs	r3, r3, #7
 800ccb8:	633b      	str	r3, [r7, #48]	; 0x30
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	2b7f      	cmp	r3, #127	; 0x7f
 800ccbe:	d8f0      	bhi.n	800cca2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ccc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	637a      	str	r2, [r7, #52]	; 0x34
 800ccc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	701a      	strb	r2, [r3, #0]
 800cccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccd8:	e00b      	b.n	800ccf2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	1c59      	adds	r1, r3, #1
 800cce2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cce8:	b2d2      	uxtb	r2, r2
 800ccea:	701a      	strb	r2, [r3, #0]
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	09db      	lsrs	r3, r3, #7
 800ccf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	2b7f      	cmp	r3, #127	; 0x7f
 800ccf6:	d8f0      	bhi.n	800ccda <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ccfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd0e:	623b      	str	r3, [r7, #32]
 800cd10:	e00b      	b.n	800cd2a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	1c59      	adds	r1, r3, #1
 800cd1a:	6279      	str	r1, [r7, #36]	; 0x24
 800cd1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd20:	b2d2      	uxtb	r2, r2
 800cd22:	701a      	strb	r2, [r3, #0]
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	09db      	lsrs	r3, r3, #7
 800cd28:	623b      	str	r3, [r7, #32]
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	2b7f      	cmp	r3, #127	; 0x7f
 800cd2e:	d8f0      	bhi.n	800cd12 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	627a      	str	r2, [r7, #36]	; 0x24
 800cd36:	6a3a      	ldr	r2, [r7, #32]
 800cd38:	b2d2      	uxtb	r2, r2
 800cd3a:	701a      	strb	r2, [r3, #0]
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	6979      	ldr	r1, [r7, #20]
 800cd44:	69b8      	ldr	r0, [r7, #24]
 800cd46:	f7ff fd13 	bl	800c770 <_SendPacket>
  RECORD_END();
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	f383 8811 	msr	BASEPRI, r3
}
 800cd50:	bf00      	nop
 800cd52:	3740      	adds	r7, #64	; 0x40
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	2000446c 	.word	0x2000446c

0800cd5c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08c      	sub	sp, #48	; 0x30
 800cd60:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800cd62:	4b58      	ldr	r3, [pc, #352]	; (800cec4 <SEGGER_SYSVIEW_Start+0x168>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800cd68:	f3ef 8311 	mrs	r3, BASEPRI
 800cd6c:	f04f 0120 	mov.w	r1, #32
 800cd70:	f381 8811 	msr	BASEPRI, r1
 800cd74:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800cd76:	4b53      	ldr	r3, [pc, #332]	; (800cec4 <SEGGER_SYSVIEW_Start+0x168>)
 800cd78:	785b      	ldrb	r3, [r3, #1]
 800cd7a:	220a      	movs	r2, #10
 800cd7c:	4952      	ldr	r1, [pc, #328]	; (800cec8 <SEGGER_SYSVIEW_Start+0x16c>)
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7f3 fa36 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800cd8a:	200a      	movs	r0, #10
 800cd8c:	f7ff fe2a 	bl	800c9e4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cd90:	f3ef 8311 	mrs	r3, BASEPRI
 800cd94:	f04f 0120 	mov.w	r1, #32
 800cd98:	f381 8811 	msr	BASEPRI, r1
 800cd9c:	60bb      	str	r3, [r7, #8]
 800cd9e:	484b      	ldr	r0, [pc, #300]	; (800cecc <SEGGER_SYSVIEW_Start+0x170>)
 800cda0:	f7ff fbf6 	bl	800c590 <_PreparePacket>
 800cda4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdae:	4b45      	ldr	r3, [pc, #276]	; (800cec4 <SEGGER_SYSVIEW_Start+0x168>)
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdb4:	e00b      	b.n	800cdce <SEGGER_SYSVIEW_Start+0x72>
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbc:	1c59      	adds	r1, r3, #1
 800cdbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cdc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cdc4:	b2d2      	uxtb	r2, r2
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	09db      	lsrs	r3, r3, #7
 800cdcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	2b7f      	cmp	r3, #127	; 0x7f
 800cdd2:	d8f0      	bhi.n	800cdb6 <SEGGER_SYSVIEW_Start+0x5a>
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	701a      	strb	r2, [r3, #0]
 800cde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
 800cde8:	4b36      	ldr	r3, [pc, #216]	; (800cec4 <SEGGER_SYSVIEW_Start+0x168>)
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	623b      	str	r3, [r7, #32]
 800cdee:	e00b      	b.n	800ce08 <SEGGER_SYSVIEW_Start+0xac>
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	1c59      	adds	r1, r3, #1
 800cdf8:	6279      	str	r1, [r7, #36]	; 0x24
 800cdfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cdfe:	b2d2      	uxtb	r2, r2
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	09db      	lsrs	r3, r3, #7
 800ce06:	623b      	str	r3, [r7, #32]
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce0c:	d8f0      	bhi.n	800cdf0 <SEGGER_SYSVIEW_Start+0x94>
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	627a      	str	r2, [r7, #36]	; 0x24
 800ce14:	6a3a      	ldr	r2, [r7, #32]
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	61fb      	str	r3, [r7, #28]
 800ce22:	4b28      	ldr	r3, [pc, #160]	; (800cec4 <SEGGER_SYSVIEW_Start+0x168>)
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	61bb      	str	r3, [r7, #24]
 800ce28:	e00b      	b.n	800ce42 <SEGGER_SYSVIEW_Start+0xe6>
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	1c59      	adds	r1, r3, #1
 800ce32:	61f9      	str	r1, [r7, #28]
 800ce34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce38:	b2d2      	uxtb	r2, r2
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	09db      	lsrs	r3, r3, #7
 800ce40:	61bb      	str	r3, [r7, #24]
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b7f      	cmp	r3, #127	; 0x7f
 800ce46:	d8f0      	bhi.n	800ce2a <SEGGER_SYSVIEW_Start+0xce>
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	61fa      	str	r2, [r7, #28]
 800ce4e:	69ba      	ldr	r2, [r7, #24]
 800ce50:	b2d2      	uxtb	r2, r2
 800ce52:	701a      	strb	r2, [r3, #0]
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	617b      	str	r3, [r7, #20]
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	e00b      	b.n	800ce7a <SEGGER_SYSVIEW_Start+0x11e>
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	1c59      	adds	r1, r3, #1
 800ce6a:	6179      	str	r1, [r7, #20]
 800ce6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce70:	b2d2      	uxtb	r2, r2
 800ce72:	701a      	strb	r2, [r3, #0]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	09db      	lsrs	r3, r3, #7
 800ce78:	613b      	str	r3, [r7, #16]
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	2b7f      	cmp	r3, #127	; 0x7f
 800ce7e:	d8f0      	bhi.n	800ce62 <SEGGER_SYSVIEW_Start+0x106>
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	617a      	str	r2, [r7, #20]
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	b2d2      	uxtb	r2, r2
 800ce8a:	701a      	strb	r2, [r3, #0]
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ce90:	2218      	movs	r2, #24
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff fc6b 	bl	800c770 <_SendPacket>
      RECORD_END();
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cea0:	4b08      	ldr	r3, [pc, #32]	; (800cec4 <SEGGER_SYSVIEW_Start+0x168>)
 800cea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800cea8:	4b06      	ldr	r3, [pc, #24]	; (800cec4 <SEGGER_SYSVIEW_Start+0x168>)
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800ceae:	f000 f9eb 	bl	800d288 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800ceb2:	f000 f9b1 	bl	800d218 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800ceb6:	f000 fc83 	bl	800d7c0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800ceba:	bf00      	nop
 800cebc:	3730      	adds	r7, #48	; 0x30
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	2000443c 	.word	0x2000443c
 800cec8:	08015cf0 	.word	0x08015cf0
 800cecc:	2000446c 	.word	0x2000446c

0800ced0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ced6:	f3ef 8311 	mrs	r3, BASEPRI
 800ceda:	f04f 0120 	mov.w	r1, #32
 800cede:	f381 8811 	msr	BASEPRI, r1
 800cee2:	607b      	str	r3, [r7, #4]
 800cee4:	480b      	ldr	r0, [pc, #44]	; (800cf14 <SEGGER_SYSVIEW_Stop+0x44>)
 800cee6:	f7ff fb53 	bl	800c590 <_PreparePacket>
 800ceea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800ceec:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <SEGGER_SYSVIEW_Stop+0x48>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d007      	beq.n	800cf04 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cef4:	220b      	movs	r2, #11
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6838      	ldr	r0, [r7, #0]
 800cefa:	f7ff fc39 	bl	800c770 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800cefe:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <SEGGER_SYSVIEW_Stop+0x48>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f383 8811 	msr	BASEPRI, r3
}
 800cf0a:	bf00      	nop
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	2000446c 	.word	0x2000446c
 800cf18:	2000443c 	.word	0x2000443c

0800cf1c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08c      	sub	sp, #48	; 0x30
 800cf20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cf22:	f3ef 8311 	mrs	r3, BASEPRI
 800cf26:	f04f 0120 	mov.w	r1, #32
 800cf2a:	f381 8811 	msr	BASEPRI, r1
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	4845      	ldr	r0, [pc, #276]	; (800d048 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800cf32:	f7ff fb2d 	bl	800c590 <_PreparePacket>
 800cf36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf40:	4b42      	ldr	r3, [pc, #264]	; (800d04c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf46:	e00b      	b.n	800cf60 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	1c59      	adds	r1, r3, #1
 800cf50:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cf52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	701a      	strb	r2, [r3, #0]
 800cf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5c:	09db      	lsrs	r3, r3, #7
 800cf5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	2b7f      	cmp	r3, #127	; 0x7f
 800cf64:	d8f0      	bhi.n	800cf48 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf6e:	b2d2      	uxtb	r2, r2
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7a:	4b34      	ldr	r3, [pc, #208]	; (800d04c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	623b      	str	r3, [r7, #32]
 800cf80:	e00b      	b.n	800cf9a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800cf82:	6a3b      	ldr	r3, [r7, #32]
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	1c59      	adds	r1, r3, #1
 800cf8a:	6279      	str	r1, [r7, #36]	; 0x24
 800cf8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf90:	b2d2      	uxtb	r2, r2
 800cf92:	701a      	strb	r2, [r3, #0]
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	09db      	lsrs	r3, r3, #7
 800cf98:	623b      	str	r3, [r7, #32]
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	2b7f      	cmp	r3, #127	; 0x7f
 800cf9e:	d8f0      	bhi.n	800cf82 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	627a      	str	r2, [r7, #36]	; 0x24
 800cfa6:	6a3a      	ldr	r2, [r7, #32]
 800cfa8:	b2d2      	uxtb	r2, r2
 800cfaa:	701a      	strb	r2, [r3, #0]
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	61fb      	str	r3, [r7, #28]
 800cfb4:	4b25      	ldr	r3, [pc, #148]	; (800d04c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	61bb      	str	r3, [r7, #24]
 800cfba:	e00b      	b.n	800cfd4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	1c59      	adds	r1, r3, #1
 800cfc4:	61f9      	str	r1, [r7, #28]
 800cfc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cfca:	b2d2      	uxtb	r2, r2
 800cfcc:	701a      	strb	r2, [r3, #0]
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	09db      	lsrs	r3, r3, #7
 800cfd2:	61bb      	str	r3, [r7, #24]
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	2b7f      	cmp	r3, #127	; 0x7f
 800cfd8:	d8f0      	bhi.n	800cfbc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	61fa      	str	r2, [r7, #28]
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	b2d2      	uxtb	r2, r2
 800cfe4:	701a      	strb	r2, [r3, #0]
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	617b      	str	r3, [r7, #20]
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
 800cff2:	e00b      	b.n	800d00c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	1c59      	adds	r1, r3, #1
 800cffc:	6179      	str	r1, [r7, #20]
 800cffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	701a      	strb	r2, [r3, #0]
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	09db      	lsrs	r3, r3, #7
 800d00a:	613b      	str	r3, [r7, #16]
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	2b7f      	cmp	r3, #127	; 0x7f
 800d010:	d8f0      	bhi.n	800cff4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	1c5a      	adds	r2, r3, #1
 800d016:	617a      	str	r2, [r7, #20]
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	b2d2      	uxtb	r2, r2
 800d01c:	701a      	strb	r2, [r3, #0]
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d022:	2218      	movs	r2, #24
 800d024:	6879      	ldr	r1, [r7, #4]
 800d026:	68b8      	ldr	r0, [r7, #8]
 800d028:	f7ff fba2 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d032:	4b06      	ldr	r3, [pc, #24]	; (800d04c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d036:	2b00      	cmp	r3, #0
 800d038:	d002      	beq.n	800d040 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d03a:	4b04      	ldr	r3, [pc, #16]	; (800d04c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	4798      	blx	r3
  }
}
 800d040:	bf00      	nop
 800d042:	3730      	adds	r7, #48	; 0x30
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	2000446c 	.word	0x2000446c
 800d04c:	2000443c 	.word	0x2000443c

0800d050 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d050:	b580      	push	{r7, lr}
 800d052:	b092      	sub	sp, #72	; 0x48
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d058:	f3ef 8311 	mrs	r3, BASEPRI
 800d05c:	f04f 0120 	mov.w	r1, #32
 800d060:	f381 8811 	msr	BASEPRI, r1
 800d064:	617b      	str	r3, [r7, #20]
 800d066:	486a      	ldr	r0, [pc, #424]	; (800d210 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d068:	f7ff fa92 	bl	800c590 <_PreparePacket>
 800d06c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	647b      	str	r3, [r7, #68]	; 0x44
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	4b66      	ldr	r3, [pc, #408]	; (800d214 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d07c:	691b      	ldr	r3, [r3, #16]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	643b      	str	r3, [r7, #64]	; 0x40
 800d082:	e00b      	b.n	800d09c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d086:	b2da      	uxtb	r2, r3
 800d088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d08a:	1c59      	adds	r1, r3, #1
 800d08c:	6479      	str	r1, [r7, #68]	; 0x44
 800d08e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d092:	b2d2      	uxtb	r2, r2
 800d094:	701a      	strb	r2, [r3, #0]
 800d096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d098:	09db      	lsrs	r3, r3, #7
 800d09a:	643b      	str	r3, [r7, #64]	; 0x40
 800d09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09e:	2b7f      	cmp	r3, #127	; 0x7f
 800d0a0:	d8f0      	bhi.n	800d084 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800d0a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0aa:	b2d2      	uxtb	r2, r2
 800d0ac:	701a      	strb	r2, [r3, #0]
 800d0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0bc:	e00b      	b.n	800d0d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d0c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d0cc:	b2d2      	uxtb	r2, r2
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d2:	09db      	lsrs	r3, r3, #7
 800d0d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d8:	2b7f      	cmp	r3, #127	; 0x7f
 800d0da:	d8f0      	bhi.n	800d0be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d0e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0e4:	b2d2      	uxtb	r2, r2
 800d0e6:	701a      	strb	r2, [r3, #0]
 800d0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	2220      	movs	r2, #32
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7ff f9fb 	bl	800c4f0 <_EncodeStr>
 800d0fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d0fc:	2209      	movs	r2, #9
 800d0fe:	68f9      	ldr	r1, [r7, #12]
 800d100:	6938      	ldr	r0, [r7, #16]
 800d102:	f7ff fb35 	bl	800c770 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	637b      	str	r3, [r7, #52]	; 0x34
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	4b40      	ldr	r3, [pc, #256]	; (800d214 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	633b      	str	r3, [r7, #48]	; 0x30
 800d11a:	e00b      	b.n	800d134 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d122:	1c59      	adds	r1, r3, #1
 800d124:	6379      	str	r1, [r7, #52]	; 0x34
 800d126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d12a:	b2d2      	uxtb	r2, r2
 800d12c:	701a      	strb	r2, [r3, #0]
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	09db      	lsrs	r3, r3, #7
 800d132:	633b      	str	r3, [r7, #48]	; 0x30
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	2b7f      	cmp	r3, #127	; 0x7f
 800d138:	d8f0      	bhi.n	800d11c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	637a      	str	r2, [r7, #52]	; 0x34
 800d140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d142:	b2d2      	uxtb	r2, r2
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d148:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	62bb      	str	r3, [r7, #40]	; 0x28
 800d154:	e00b      	b.n	800d16e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	1c59      	adds	r1, r3, #1
 800d15e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d164:	b2d2      	uxtb	r2, r2
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16a:	09db      	lsrs	r3, r3, #7
 800d16c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	2b7f      	cmp	r3, #127	; 0x7f
 800d172:	d8f0      	bhi.n	800d156 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d17c:	b2d2      	uxtb	r2, r2
 800d17e:	701a      	strb	r2, [r3, #0]
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	627b      	str	r3, [r7, #36]	; 0x24
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	623b      	str	r3, [r7, #32]
 800d18e:	e00b      	b.n	800d1a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	b2da      	uxtb	r2, r3
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	1c59      	adds	r1, r3, #1
 800d198:	6279      	str	r1, [r7, #36]	; 0x24
 800d19a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d19e:	b2d2      	uxtb	r2, r2
 800d1a0:	701a      	strb	r2, [r3, #0]
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	09db      	lsrs	r3, r3, #7
 800d1a6:	623b      	str	r3, [r7, #32]
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	2b7f      	cmp	r3, #127	; 0x7f
 800d1ac:	d8f0      	bhi.n	800d190 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	627a      	str	r2, [r7, #36]	; 0x24
 800d1b4:	6a3a      	ldr	r2, [r7, #32]
 800d1b6:	b2d2      	uxtb	r2, r2
 800d1b8:	701a      	strb	r2, [r3, #0]
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	61fb      	str	r3, [r7, #28]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	61bb      	str	r3, [r7, #24]
 800d1c6:	e00b      	b.n	800d1e0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	1c59      	adds	r1, r3, #1
 800d1d0:	61f9      	str	r1, [r7, #28]
 800d1d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1d6:	b2d2      	uxtb	r2, r2
 800d1d8:	701a      	strb	r2, [r3, #0]
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	09db      	lsrs	r3, r3, #7
 800d1de:	61bb      	str	r3, [r7, #24]
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	2b7f      	cmp	r3, #127	; 0x7f
 800d1e4:	d8f0      	bhi.n	800d1c8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	61fa      	str	r2, [r7, #28]
 800d1ec:	69ba      	ldr	r2, [r7, #24]
 800d1ee:	b2d2      	uxtb	r2, r2
 800d1f0:	701a      	strb	r2, [r3, #0]
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d1f6:	2215      	movs	r2, #21
 800d1f8:	68f9      	ldr	r1, [r7, #12]
 800d1fa:	6938      	ldr	r0, [r7, #16]
 800d1fc:	f7ff fab8 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f383 8811 	msr	BASEPRI, r3
}
 800d206:	bf00      	nop
 800d208:	3748      	adds	r7, #72	; 0x48
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	2000446c 	.word	0x2000446c
 800d214:	2000443c 	.word	0x2000443c

0800d218 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d21c:	4b07      	ldr	r3, [pc, #28]	; (800d23c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d008      	beq.n	800d236 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d224:	4b05      	ldr	r3, [pc, #20]	; (800d23c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d226:	6a1b      	ldr	r3, [r3, #32]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d22e:	4b03      	ldr	r3, [pc, #12]	; (800d23c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	4798      	blx	r3
  }
}
 800d236:	bf00      	nop
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	2000443c 	.word	0x2000443c

0800d240 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d248:	f3ef 8311 	mrs	r3, BASEPRI
 800d24c:	f04f 0120 	mov.w	r1, #32
 800d250:	f381 8811 	msr	BASEPRI, r1
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	480b      	ldr	r0, [pc, #44]	; (800d284 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d258:	f7ff f99a 	bl	800c590 <_PreparePacket>
 800d25c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d25e:	2280      	movs	r2, #128	; 0x80
 800d260:	6879      	ldr	r1, [r7, #4]
 800d262:	6938      	ldr	r0, [r7, #16]
 800d264:	f7ff f944 	bl	800c4f0 <_EncodeStr>
 800d268:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d26a:	220e      	movs	r2, #14
 800d26c:	68f9      	ldr	r1, [r7, #12]
 800d26e:	6938      	ldr	r0, [r7, #16]
 800d270:	f7ff fa7e 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f383 8811 	msr	BASEPRI, r3
}
 800d27a:	bf00      	nop
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	2000446c 	.word	0x2000446c

0800d288 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d288:	b590      	push	{r4, r7, lr}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d28e:	4b15      	ldr	r3, [pc, #84]	; (800d2e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d01a      	beq.n	800d2cc <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d296:	4b13      	ldr	r3, [pc, #76]	; (800d2e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d015      	beq.n	800d2cc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d2a0:	4b10      	ldr	r3, [pc, #64]	; (800d2e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4798      	blx	r3
 800d2a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d2ac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d2ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2b2:	f04f 0200 	mov.w	r2, #0
 800d2b6:	f04f 0300 	mov.w	r3, #0
 800d2ba:	000a      	movs	r2, r1
 800d2bc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d2be:	4613      	mov	r3, r2
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	200d      	movs	r0, #13
 800d2c6:	f7ff fbe7 	bl	800ca98 <SEGGER_SYSVIEW_RecordU32x2>
 800d2ca:	e006      	b.n	800d2da <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d2cc:	4b06      	ldr	r3, [pc, #24]	; (800d2e8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	200c      	movs	r0, #12
 800d2d4:	f7ff fba4 	bl	800ca20 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d2d8:	bf00      	nop
 800d2da:	bf00      	nop
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd90      	pop	{r4, r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	2000443c 	.word	0x2000443c
 800d2e8:	e0001004 	.word	0xe0001004

0800d2ec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d2f2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2f6:	f04f 0120 	mov.w	r1, #32
 800d2fa:	f381 8811 	msr	BASEPRI, r1
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	4819      	ldr	r0, [pc, #100]	; (800d368 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d302:	f7ff f945 	bl	800c590 <_PreparePacket>
 800d306:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d30c:	4b17      	ldr	r3, [pc, #92]	; (800d36c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d314:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	617b      	str	r3, [r7, #20]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	613b      	str	r3, [r7, #16]
 800d31e:	e00b      	b.n	800d338 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	b2da      	uxtb	r2, r3
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	1c59      	adds	r1, r3, #1
 800d328:	6179      	str	r1, [r7, #20]
 800d32a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	701a      	strb	r2, [r3, #0]
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	09db      	lsrs	r3, r3, #7
 800d336:	613b      	str	r3, [r7, #16]
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	2b7f      	cmp	r3, #127	; 0x7f
 800d33c:	d8f0      	bhi.n	800d320 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	617a      	str	r2, [r7, #20]
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d34e:	2202      	movs	r2, #2
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	68b8      	ldr	r0, [r7, #8]
 800d354:	f7ff fa0c 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f383 8811 	msr	BASEPRI, r3
}
 800d35e:	bf00      	nop
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	2000446c 	.word	0x2000446c
 800d36c:	e000ed04 	.word	0xe000ed04

0800d370 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d376:	f3ef 8311 	mrs	r3, BASEPRI
 800d37a:	f04f 0120 	mov.w	r1, #32
 800d37e:	f381 8811 	msr	BASEPRI, r1
 800d382:	607b      	str	r3, [r7, #4]
 800d384:	4807      	ldr	r0, [pc, #28]	; (800d3a4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d386:	f7ff f903 	bl	800c590 <_PreparePacket>
 800d38a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d38c:	2203      	movs	r2, #3
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6838      	ldr	r0, [r7, #0]
 800d392:	f7ff f9ed 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f383 8811 	msr	BASEPRI, r3
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	2000446c 	.word	0x2000446c

0800d3a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3ae:	f3ef 8311 	mrs	r3, BASEPRI
 800d3b2:	f04f 0120 	mov.w	r1, #32
 800d3b6:	f381 8811 	msr	BASEPRI, r1
 800d3ba:	607b      	str	r3, [r7, #4]
 800d3bc:	4807      	ldr	r0, [pc, #28]	; (800d3dc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d3be:	f7ff f8e7 	bl	800c590 <_PreparePacket>
 800d3c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d3c4:	2212      	movs	r2, #18
 800d3c6:	6839      	ldr	r1, [r7, #0]
 800d3c8:	6838      	ldr	r0, [r7, #0]
 800d3ca:	f7ff f9d1 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f383 8811 	msr	BASEPRI, r3
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	2000446c 	.word	0x2000446c

0800d3e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3e6:	f3ef 8311 	mrs	r3, BASEPRI
 800d3ea:	f04f 0120 	mov.w	r1, #32
 800d3ee:	f381 8811 	msr	BASEPRI, r1
 800d3f2:	607b      	str	r3, [r7, #4]
 800d3f4:	4807      	ldr	r0, [pc, #28]	; (800d414 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d3f6:	f7ff f8cb 	bl	800c590 <_PreparePacket>
 800d3fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d3fc:	2211      	movs	r2, #17
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6838      	ldr	r0, [r7, #0]
 800d402:	f7ff f9b5 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f383 8811 	msr	BASEPRI, r3
}
 800d40c:	bf00      	nop
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	2000446c 	.word	0x2000446c

0800d418 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d420:	f3ef 8311 	mrs	r3, BASEPRI
 800d424:	f04f 0120 	mov.w	r1, #32
 800d428:	f381 8811 	msr	BASEPRI, r1
 800d42c:	617b      	str	r3, [r7, #20]
 800d42e:	4819      	ldr	r0, [pc, #100]	; (800d494 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d430:	f7ff f8ae 	bl	800c590 <_PreparePacket>
 800d434:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d43a:	4b17      	ldr	r3, [pc, #92]	; (800d498 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	61fb      	str	r3, [r7, #28]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	61bb      	str	r3, [r7, #24]
 800d44c:	e00b      	b.n	800d466 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	b2da      	uxtb	r2, r3
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	1c59      	adds	r1, r3, #1
 800d456:	61f9      	str	r1, [r7, #28]
 800d458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	09db      	lsrs	r3, r3, #7
 800d464:	61bb      	str	r3, [r7, #24]
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	2b7f      	cmp	r3, #127	; 0x7f
 800d46a:	d8f0      	bhi.n	800d44e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	61fa      	str	r2, [r7, #28]
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	b2d2      	uxtb	r2, r2
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d47c:	2208      	movs	r2, #8
 800d47e:	68f9      	ldr	r1, [r7, #12]
 800d480:	6938      	ldr	r0, [r7, #16]
 800d482:	f7ff f975 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f383 8811 	msr	BASEPRI, r3
}
 800d48c:	bf00      	nop
 800d48e:	3720      	adds	r7, #32
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	2000446c 	.word	0x2000446c
 800d498:	2000443c 	.word	0x2000443c

0800d49c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d4a4:	f3ef 8311 	mrs	r3, BASEPRI
 800d4a8:	f04f 0120 	mov.w	r1, #32
 800d4ac:	f381 8811 	msr	BASEPRI, r1
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	4819      	ldr	r0, [pc, #100]	; (800d518 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d4b4:	f7ff f86c 	bl	800c590 <_PreparePacket>
 800d4b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d4be:	4b17      	ldr	r3, [pc, #92]	; (800d51c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d4c0:	691b      	ldr	r3, [r3, #16]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	61fb      	str	r3, [r7, #28]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	61bb      	str	r3, [r7, #24]
 800d4d0:	e00b      	b.n	800d4ea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	1c59      	adds	r1, r3, #1
 800d4da:	61f9      	str	r1, [r7, #28]
 800d4dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4e0:	b2d2      	uxtb	r2, r2
 800d4e2:	701a      	strb	r2, [r3, #0]
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	09db      	lsrs	r3, r3, #7
 800d4e8:	61bb      	str	r3, [r7, #24]
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b7f      	cmp	r3, #127	; 0x7f
 800d4ee:	d8f0      	bhi.n	800d4d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	1c5a      	adds	r2, r3, #1
 800d4f4:	61fa      	str	r2, [r7, #28]
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	b2d2      	uxtb	r2, r2
 800d4fa:	701a      	strb	r2, [r3, #0]
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d500:	2204      	movs	r2, #4
 800d502:	68f9      	ldr	r1, [r7, #12]
 800d504:	6938      	ldr	r0, [r7, #16]
 800d506:	f7ff f933 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f383 8811 	msr	BASEPRI, r3
}
 800d510:	bf00      	nop
 800d512:	3720      	adds	r7, #32
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	2000446c 	.word	0x2000446c
 800d51c:	2000443c 	.word	0x2000443c

0800d520 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d528:	f3ef 8311 	mrs	r3, BASEPRI
 800d52c:	f04f 0120 	mov.w	r1, #32
 800d530:	f381 8811 	msr	BASEPRI, r1
 800d534:	617b      	str	r3, [r7, #20]
 800d536:	4819      	ldr	r0, [pc, #100]	; (800d59c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d538:	f7ff f82a 	bl	800c590 <_PreparePacket>
 800d53c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d542:	4b17      	ldr	r3, [pc, #92]	; (800d5a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	61fb      	str	r3, [r7, #28]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	61bb      	str	r3, [r7, #24]
 800d554:	e00b      	b.n	800d56e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	1c59      	adds	r1, r3, #1
 800d55e:	61f9      	str	r1, [r7, #28]
 800d560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d564:	b2d2      	uxtb	r2, r2
 800d566:	701a      	strb	r2, [r3, #0]
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	09db      	lsrs	r3, r3, #7
 800d56c:	61bb      	str	r3, [r7, #24]
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b7f      	cmp	r3, #127	; 0x7f
 800d572:	d8f0      	bhi.n	800d556 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	1c5a      	adds	r2, r3, #1
 800d578:	61fa      	str	r2, [r7, #28]
 800d57a:	69ba      	ldr	r2, [r7, #24]
 800d57c:	b2d2      	uxtb	r2, r2
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d584:	2206      	movs	r2, #6
 800d586:	68f9      	ldr	r1, [r7, #12]
 800d588:	6938      	ldr	r0, [r7, #16]
 800d58a:	f7ff f8f1 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f383 8811 	msr	BASEPRI, r3
}
 800d594:	bf00      	nop
 800d596:	3720      	adds	r7, #32
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	2000446c 	.word	0x2000446c
 800d5a0:	2000443c 	.word	0x2000443c

0800d5a4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b08a      	sub	sp, #40	; 0x28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d5ae:	f3ef 8311 	mrs	r3, BASEPRI
 800d5b2:	f04f 0120 	mov.w	r1, #32
 800d5b6:	f381 8811 	msr	BASEPRI, r1
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	4827      	ldr	r0, [pc, #156]	; (800d65c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d5be:	f7fe ffe7 	bl	800c590 <_PreparePacket>
 800d5c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d5c8:	4b25      	ldr	r3, [pc, #148]	; (800d660 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	623b      	str	r3, [r7, #32]
 800d5da:	e00b      	b.n	800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	1c59      	adds	r1, r3, #1
 800d5e4:	6279      	str	r1, [r7, #36]	; 0x24
 800d5e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d5ea:	b2d2      	uxtb	r2, r2
 800d5ec:	701a      	strb	r2, [r3, #0]
 800d5ee:	6a3b      	ldr	r3, [r7, #32]
 800d5f0:	09db      	lsrs	r3, r3, #7
 800d5f2:	623b      	str	r3, [r7, #32]
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	2b7f      	cmp	r3, #127	; 0x7f
 800d5f8:	d8f0      	bhi.n	800d5dc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	627a      	str	r2, [r7, #36]	; 0x24
 800d600:	6a3a      	ldr	r2, [r7, #32]
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	61fb      	str	r3, [r7, #28]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	61bb      	str	r3, [r7, #24]
 800d612:	e00b      	b.n	800d62c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	b2da      	uxtb	r2, r3
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	1c59      	adds	r1, r3, #1
 800d61c:	61f9      	str	r1, [r7, #28]
 800d61e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d622:	b2d2      	uxtb	r2, r2
 800d624:	701a      	strb	r2, [r3, #0]
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	09db      	lsrs	r3, r3, #7
 800d62a:	61bb      	str	r3, [r7, #24]
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	2b7f      	cmp	r3, #127	; 0x7f
 800d630:	d8f0      	bhi.n	800d614 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	61fa      	str	r2, [r7, #28]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	b2d2      	uxtb	r2, r2
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d642:	2207      	movs	r2, #7
 800d644:	68f9      	ldr	r1, [r7, #12]
 800d646:	6938      	ldr	r0, [r7, #16]
 800d648:	f7ff f892 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	f383 8811 	msr	BASEPRI, r3
}
 800d652:	bf00      	nop
 800d654:	3728      	adds	r7, #40	; 0x28
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	2000446c 	.word	0x2000446c
 800d660:	2000443c 	.word	0x2000443c

0800d664 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d66c:	4b04      	ldr	r3, [pc, #16]	; (800d680 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	1ad3      	subs	r3, r2, r3
}
 800d674:	4618      	mov	r0, r3
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	2000443c 	.word	0x2000443c

0800d684 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d684:	b580      	push	{r7, lr}
 800d686:	b08c      	sub	sp, #48	; 0x30
 800d688:	af00      	add	r7, sp, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d68e:	4b3b      	ldr	r3, [pc, #236]	; (800d77c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d06d      	beq.n	800d772 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d696:	4b39      	ldr	r3, [pc, #228]	; (800d77c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d69c:	2300      	movs	r3, #0
 800d69e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6a0:	e008      	b.n	800d6b4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d007      	beq.n	800d6be <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d3f2      	bcc.n	800d6a2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800d6bc:	e000      	b.n	800d6c0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d6be:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d055      	beq.n	800d772 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d6c6:	f3ef 8311 	mrs	r3, BASEPRI
 800d6ca:	f04f 0120 	mov.w	r1, #32
 800d6ce:	f381 8811 	msr	BASEPRI, r1
 800d6d2:	617b      	str	r3, [r7, #20]
 800d6d4:	482a      	ldr	r0, [pc, #168]	; (800d780 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d6d6:	f7fe ff5b 	bl	800c590 <_PreparePacket>
 800d6da:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d6e4:	79fb      	ldrb	r3, [r7, #7]
 800d6e6:	623b      	str	r3, [r7, #32]
 800d6e8:	e00b      	b.n	800d702 <SEGGER_SYSVIEW_SendModule+0x7e>
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	1c59      	adds	r1, r3, #1
 800d6f2:	6279      	str	r1, [r7, #36]	; 0x24
 800d6f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d6f8:	b2d2      	uxtb	r2, r2
 800d6fa:	701a      	strb	r2, [r3, #0]
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	09db      	lsrs	r3, r3, #7
 800d700:	623b      	str	r3, [r7, #32]
 800d702:	6a3b      	ldr	r3, [r7, #32]
 800d704:	2b7f      	cmp	r3, #127	; 0x7f
 800d706:	d8f0      	bhi.n	800d6ea <SEGGER_SYSVIEW_SendModule+0x66>
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	627a      	str	r2, [r7, #36]	; 0x24
 800d70e:	6a3a      	ldr	r2, [r7, #32]
 800d710:	b2d2      	uxtb	r2, r2
 800d712:	701a      	strb	r2, [r3, #0]
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	61fb      	str	r3, [r7, #28]
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	61bb      	str	r3, [r7, #24]
 800d722:	e00b      	b.n	800d73c <SEGGER_SYSVIEW_SendModule+0xb8>
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	b2da      	uxtb	r2, r3
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	1c59      	adds	r1, r3, #1
 800d72c:	61f9      	str	r1, [r7, #28]
 800d72e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d732:	b2d2      	uxtb	r2, r2
 800d734:	701a      	strb	r2, [r3, #0]
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	09db      	lsrs	r3, r3, #7
 800d73a:	61bb      	str	r3, [r7, #24]
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	2b7f      	cmp	r3, #127	; 0x7f
 800d740:	d8f0      	bhi.n	800d724 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	1c5a      	adds	r2, r3, #1
 800d746:	61fa      	str	r2, [r7, #28]
 800d748:	69ba      	ldr	r2, [r7, #24]
 800d74a:	b2d2      	uxtb	r2, r2
 800d74c:	701a      	strb	r2, [r3, #0]
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2280      	movs	r2, #128	; 0x80
 800d758:	4619      	mov	r1, r3
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f7fe fec8 	bl	800c4f0 <_EncodeStr>
 800d760:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d762:	2216      	movs	r2, #22
 800d764:	68f9      	ldr	r1, [r7, #12]
 800d766:	6938      	ldr	r0, [r7, #16]
 800d768:	f7ff f802 	bl	800c770 <_SendPacket>
      RECORD_END();
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d772:	bf00      	nop
 800d774:	3730      	adds	r7, #48	; 0x30
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20004464 	.word	0x20004464
 800d780:	2000446c 	.word	0x2000446c

0800d784 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d78a:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00f      	beq.n	800d7b2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d792:	4b0a      	ldr	r3, [pc, #40]	; (800d7bc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1f2      	bne.n	800d798 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d7b2:	bf00      	nop
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	20004464 	.word	0x20004464

0800d7c0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d7c6:	f3ef 8311 	mrs	r3, BASEPRI
 800d7ca:	f04f 0120 	mov.w	r1, #32
 800d7ce:	f381 8811 	msr	BASEPRI, r1
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	4817      	ldr	r0, [pc, #92]	; (800d834 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d7d6:	f7fe fedb 	bl	800c590 <_PreparePacket>
 800d7da:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	617b      	str	r3, [r7, #20]
 800d7e4:	4b14      	ldr	r3, [pc, #80]	; (800d838 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	613b      	str	r3, [r7, #16]
 800d7ea:	e00b      	b.n	800d804 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	1c59      	adds	r1, r3, #1
 800d7f4:	6179      	str	r1, [r7, #20]
 800d7f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d7fa:	b2d2      	uxtb	r2, r2
 800d7fc:	701a      	strb	r2, [r3, #0]
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	09db      	lsrs	r3, r3, #7
 800d802:	613b      	str	r3, [r7, #16]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	2b7f      	cmp	r3, #127	; 0x7f
 800d808:	d8f0      	bhi.n	800d7ec <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	617a      	str	r2, [r7, #20]
 800d810:	693a      	ldr	r2, [r7, #16]
 800d812:	b2d2      	uxtb	r2, r2
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d81a:	221b      	movs	r2, #27
 800d81c:	6879      	ldr	r1, [r7, #4]
 800d81e:	68b8      	ldr	r0, [r7, #8]
 800d820:	f7fe ffa6 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f383 8811 	msr	BASEPRI, r3
}
 800d82a:	bf00      	nop
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	2000446c 	.word	0x2000446c
 800d838:	20004468 	.word	0x20004468

0800d83c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08a      	sub	sp, #40	; 0x28
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d844:	f3ef 8311 	mrs	r3, BASEPRI
 800d848:	f04f 0120 	mov.w	r1, #32
 800d84c:	f381 8811 	msr	BASEPRI, r1
 800d850:	617b      	str	r3, [r7, #20]
 800d852:	4827      	ldr	r0, [pc, #156]	; (800d8f0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d854:	f7fe fe9c 	bl	800c590 <_PreparePacket>
 800d858:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d85a:	2280      	movs	r2, #128	; 0x80
 800d85c:	6879      	ldr	r1, [r7, #4]
 800d85e:	6938      	ldr	r0, [r7, #16]
 800d860:	f7fe fe46 	bl	800c4f0 <_EncodeStr>
 800d864:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	627b      	str	r3, [r7, #36]	; 0x24
 800d86a:	2301      	movs	r3, #1
 800d86c:	623b      	str	r3, [r7, #32]
 800d86e:	e00b      	b.n	800d888 <SEGGER_SYSVIEW_Warn+0x4c>
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	b2da      	uxtb	r2, r3
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	1c59      	adds	r1, r3, #1
 800d878:	6279      	str	r1, [r7, #36]	; 0x24
 800d87a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d87e:	b2d2      	uxtb	r2, r2
 800d880:	701a      	strb	r2, [r3, #0]
 800d882:	6a3b      	ldr	r3, [r7, #32]
 800d884:	09db      	lsrs	r3, r3, #7
 800d886:	623b      	str	r3, [r7, #32]
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	2b7f      	cmp	r3, #127	; 0x7f
 800d88c:	d8f0      	bhi.n	800d870 <SEGGER_SYSVIEW_Warn+0x34>
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	627a      	str	r2, [r7, #36]	; 0x24
 800d894:	6a3a      	ldr	r2, [r7, #32]
 800d896:	b2d2      	uxtb	r2, r2
 800d898:	701a      	strb	r2, [r3, #0]
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	61fb      	str	r3, [r7, #28]
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	61bb      	str	r3, [r7, #24]
 800d8a6:	e00b      	b.n	800d8c0 <SEGGER_SYSVIEW_Warn+0x84>
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	1c59      	adds	r1, r3, #1
 800d8b0:	61f9      	str	r1, [r7, #28]
 800d8b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d8b6:	b2d2      	uxtb	r2, r2
 800d8b8:	701a      	strb	r2, [r3, #0]
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	09db      	lsrs	r3, r3, #7
 800d8be:	61bb      	str	r3, [r7, #24]
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c4:	d8f0      	bhi.n	800d8a8 <SEGGER_SYSVIEW_Warn+0x6c>
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	61fa      	str	r2, [r7, #28]
 800d8cc:	69ba      	ldr	r2, [r7, #24]
 800d8ce:	b2d2      	uxtb	r2, r2
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d8d6:	221a      	movs	r2, #26
 800d8d8:	68f9      	ldr	r1, [r7, #12]
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f7fe ff48 	bl	800c770 <_SendPacket>
  RECORD_END();
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	f383 8811 	msr	BASEPRI, r3
}
 800d8e6:	bf00      	nop
 800d8e8:	3728      	adds	r7, #40	; 0x28
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	2000446c 	.word	0x2000446c

0800d8f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800d8f8:	4803      	ldr	r0, [pc, #12]	; (800d908 <_cbSendSystemDesc+0x14>)
 800d8fa:	f7ff fca1 	bl	800d240 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800d8fe:	4803      	ldr	r0, [pc, #12]	; (800d90c <_cbSendSystemDesc+0x18>)
 800d900:	f7ff fc9e 	bl	800d240 <SEGGER_SYSVIEW_SendSysDesc>
}
 800d904:	bf00      	nop
 800d906:	bd80      	pop	{r7, pc}
 800d908:	08015460 	.word	0x08015460
 800d90c:	08015494 	.word	0x08015494

0800d910 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800d914:	4b06      	ldr	r3, [pc, #24]	; (800d930 <SEGGER_SYSVIEW_Conf+0x20>)
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	4b05      	ldr	r3, [pc, #20]	; (800d930 <SEGGER_SYSVIEW_Conf+0x20>)
 800d91a:	6819      	ldr	r1, [r3, #0]
 800d91c:	4b05      	ldr	r3, [pc, #20]	; (800d934 <SEGGER_SYSVIEW_Conf+0x24>)
 800d91e:	4a06      	ldr	r2, [pc, #24]	; (800d938 <SEGGER_SYSVIEW_Conf+0x28>)
 800d920:	f7ff f80c 	bl	800c93c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800d924:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d928:	f7ff f84c 	bl	800c9c4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800d92c:	bf00      	nop
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	20000014 	.word	0x20000014
 800d934:	0800d8f5 	.word	0x0800d8f5
 800d938:	08015cfc 	.word	0x08015cfc

0800d93c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800d93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d93e:	b085      	sub	sp, #20
 800d940:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800d942:	2300      	movs	r3, #0
 800d944:	607b      	str	r3, [r7, #4]
 800d946:	e048      	b.n	800d9da <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800d948:	4929      	ldr	r1, [pc, #164]	; (800d9f0 <_cbSendTaskList+0xb4>)
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	440b      	add	r3, r1
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fd fd93 	bl	800b484 <uxTaskGetStackHighWaterMark>
 800d95e:	4601      	mov	r1, r0
 800d960:	4823      	ldr	r0, [pc, #140]	; (800d9f0 <_cbSendTaskList+0xb4>)
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	4613      	mov	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4403      	add	r3, r0
 800d96e:	3310      	adds	r3, #16
 800d970:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800d972:	491f      	ldr	r1, [pc, #124]	; (800d9f0 <_cbSendTaskList+0xb4>)
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	4613      	mov	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4413      	add	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	440b      	add	r3, r1
 800d980:	6818      	ldr	r0, [r3, #0]
 800d982:	491b      	ldr	r1, [pc, #108]	; (800d9f0 <_cbSendTaskList+0xb4>)
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	4613      	mov	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4413      	add	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	440b      	add	r3, r1
 800d990:	3304      	adds	r3, #4
 800d992:	6819      	ldr	r1, [r3, #0]
 800d994:	4c16      	ldr	r4, [pc, #88]	; (800d9f0 <_cbSendTaskList+0xb4>)
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	4613      	mov	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4423      	add	r3, r4
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	681c      	ldr	r4, [r3, #0]
 800d9a6:	4d12      	ldr	r5, [pc, #72]	; (800d9f0 <_cbSendTaskList+0xb4>)
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	442b      	add	r3, r5
 800d9b4:	330c      	adds	r3, #12
 800d9b6:	681d      	ldr	r5, [r3, #0]
 800d9b8:	4e0d      	ldr	r6, [pc, #52]	; (800d9f0 <_cbSendTaskList+0xb4>)
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4413      	add	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4433      	add	r3, r6
 800d9c6:	3310      	adds	r3, #16
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	462b      	mov	r3, r5
 800d9ce:	4622      	mov	r2, r4
 800d9d0:	f000 f97a 	bl	800dcc8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	607b      	str	r3, [r7, #4]
 800d9da:	4b06      	ldr	r3, [pc, #24]	; (800d9f4 <_cbSendTaskList+0xb8>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d3b1      	bcc.n	800d948 <_cbSendTaskList+0xc>
  }
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	20004550 	.word	0x20004550
 800d9f4:	200045f0 	.word	0x200045f0

0800d9f8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800d9f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800da00:	f7fd f9fa 	bl	800adf8 <xTaskGetTickCountFromISR>
 800da04:	4603      	mov	r3, r0
 800da06:	2200      	movs	r2, #0
 800da08:	469a      	mov	sl, r3
 800da0a:	4693      	mov	fp, r2
 800da0c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800da10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	f04f 0a00 	mov.w	sl, #0
 800da1c:	f04f 0b00 	mov.w	fp, #0
 800da20:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800da24:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800da28:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800da2c:	4652      	mov	r2, sl
 800da2e:	465b      	mov	r3, fp
 800da30:	1a14      	subs	r4, r2, r0
 800da32:	eb63 0501 	sbc.w	r5, r3, r1
 800da36:	f04f 0200 	mov.w	r2, #0
 800da3a:	f04f 0300 	mov.w	r3, #0
 800da3e:	00ab      	lsls	r3, r5, #2
 800da40:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800da44:	00a2      	lsls	r2, r4, #2
 800da46:	4614      	mov	r4, r2
 800da48:	461d      	mov	r5, r3
 800da4a:	eb14 0800 	adds.w	r8, r4, r0
 800da4e:	eb45 0901 	adc.w	r9, r5, r1
 800da52:	f04f 0200 	mov.w	r2, #0
 800da56:	f04f 0300 	mov.w	r3, #0
 800da5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800da5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800da62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800da66:	4690      	mov	r8, r2
 800da68:	4699      	mov	r9, r3
 800da6a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800da6e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800da72:	4610      	mov	r0, r2
 800da74:	4619      	mov	r1, r3
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800da80 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af02      	add	r7, sp, #8
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800da8e:	2205      	movs	r2, #5
 800da90:	492b      	ldr	r1, [pc, #172]	; (800db40 <SYSVIEW_AddTask+0xc0>)
 800da92:	68b8      	ldr	r0, [r7, #8]
 800da94:	f006 ff70 	bl	8014978 <memcmp>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d04b      	beq.n	800db36 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800da9e:	4b29      	ldr	r3, [pc, #164]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b07      	cmp	r3, #7
 800daa4:	d903      	bls.n	800daae <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800daa6:	4828      	ldr	r0, [pc, #160]	; (800db48 <SYSVIEW_AddTask+0xc8>)
 800daa8:	f7ff fec8 	bl	800d83c <SEGGER_SYSVIEW_Warn>
    return;
 800daac:	e044      	b.n	800db38 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800daae:	4b25      	ldr	r3, [pc, #148]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	4926      	ldr	r1, [pc, #152]	; (800db4c <SYSVIEW_AddTask+0xcc>)
 800dab4:	4613      	mov	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	4413      	add	r3, r2
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	440b      	add	r3, r1
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800dac2:	4b20      	ldr	r3, [pc, #128]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	4921      	ldr	r1, [pc, #132]	; (800db4c <SYSVIEW_AddTask+0xcc>)
 800dac8:	4613      	mov	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4413      	add	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	440b      	add	r3, r1
 800dad2:	3304      	adds	r3, #4
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800dad8:	4b1a      	ldr	r3, [pc, #104]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	491b      	ldr	r1, [pc, #108]	; (800db4c <SYSVIEW_AddTask+0xcc>)
 800dade:	4613      	mov	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4413      	add	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	440b      	add	r3, r1
 800dae8:	3308      	adds	r3, #8
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800daee:	4b15      	ldr	r3, [pc, #84]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	4916      	ldr	r1, [pc, #88]	; (800db4c <SYSVIEW_AddTask+0xcc>)
 800daf4:	4613      	mov	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	440b      	add	r3, r1
 800dafe:	330c      	adds	r3, #12
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800db04:	4b0f      	ldr	r3, [pc, #60]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	4910      	ldr	r1, [pc, #64]	; (800db4c <SYSVIEW_AddTask+0xcc>)
 800db0a:	4613      	mov	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4413      	add	r3, r2
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	440b      	add	r3, r1
 800db14:	3310      	adds	r3, #16
 800db16:	69ba      	ldr	r2, [r7, #24]
 800db18:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800db1a:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3301      	adds	r3, #1
 800db20:	4a08      	ldr	r2, [pc, #32]	; (800db44 <SYSVIEW_AddTask+0xc4>)
 800db22:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	68b9      	ldr	r1, [r7, #8]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f000 f8ca 	bl	800dcc8 <SYSVIEW_SendTaskInfo>
 800db34:	e000      	b.n	800db38 <SYSVIEW_AddTask+0xb8>
    return;
 800db36:	bf00      	nop

}
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	080154a4 	.word	0x080154a4
 800db44:	200045f0 	.word	0x200045f0
 800db48:	080154ac 	.word	0x080154ac
 800db4c:	20004550 	.word	0x20004550

0800db50 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800db58:	4b59      	ldr	r3, [pc, #356]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 80ab 	beq.w	800dcb8 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800db62:	2300      	movs	r3, #0
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	e00d      	b.n	800db84 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800db68:	4956      	ldr	r1, [pc, #344]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	4613      	mov	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	440b      	add	r3, r1
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d008      	beq.n	800db90 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3301      	adds	r3, #1
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	4b4e      	ldr	r3, [pc, #312]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d3ec      	bcc.n	800db68 <SYSVIEW_DeleteTask+0x18>
 800db8e:	e000      	b.n	800db92 <SYSVIEW_DeleteTask+0x42>
      break;
 800db90:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800db92:	4b4b      	ldr	r3, [pc, #300]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3b01      	subs	r3, #1
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d111      	bne.n	800dbc2 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4613      	mov	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4413      	add	r3, r2
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4a46      	ldr	r2, [pc, #280]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dbaa:	4413      	add	r3, r2
 800dbac:	2214      	movs	r2, #20
 800dbae:	2100      	movs	r1, #0
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f006 feff 	bl	80149b4 <memset>
    _NumTasks--;
 800dbb6:	4b42      	ldr	r3, [pc, #264]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	4a40      	ldr	r2, [pc, #256]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dbbe:	6013      	str	r3, [r2, #0]
 800dbc0:	e07b      	b.n	800dcba <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800dbc2:	4b3f      	ldr	r3, [pc, #252]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d276      	bcs.n	800dcba <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800dbcc:	4b3c      	ldr	r3, [pc, #240]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	1e5a      	subs	r2, r3, #1
 800dbd2:	493c      	ldr	r1, [pc, #240]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	440b      	add	r3, r1
 800dbde:	6819      	ldr	r1, [r3, #0]
 800dbe0:	4838      	ldr	r0, [pc, #224]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dbe2:	68fa      	ldr	r2, [r7, #12]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	4413      	add	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4403      	add	r3, r0
 800dbee:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800dbf0:	4b33      	ldr	r3, [pc, #204]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	1e5a      	subs	r2, r3, #1
 800dbf6:	4933      	ldr	r1, [pc, #204]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	440b      	add	r3, r1
 800dc02:	3304      	adds	r3, #4
 800dc04:	6819      	ldr	r1, [r3, #0]
 800dc06:	482f      	ldr	r0, [pc, #188]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4403      	add	r3, r0
 800dc14:	3304      	adds	r3, #4
 800dc16:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800dc18:	4b29      	ldr	r3, [pc, #164]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	1e5a      	subs	r2, r3, #1
 800dc1e:	4929      	ldr	r1, [pc, #164]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	440b      	add	r3, r1
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	6819      	ldr	r1, [r3, #0]
 800dc2e:	4825      	ldr	r0, [pc, #148]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	4613      	mov	r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	4413      	add	r3, r2
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4403      	add	r3, r0
 800dc3c:	3308      	adds	r3, #8
 800dc3e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800dc40:	4b1f      	ldr	r3, [pc, #124]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	1e5a      	subs	r2, r3, #1
 800dc46:	491f      	ldr	r1, [pc, #124]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	440b      	add	r3, r1
 800dc52:	330c      	adds	r3, #12
 800dc54:	6819      	ldr	r1, [r3, #0]
 800dc56:	481b      	ldr	r0, [pc, #108]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4403      	add	r3, r0
 800dc64:	330c      	adds	r3, #12
 800dc66:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800dc68:	4b15      	ldr	r3, [pc, #84]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	1e5a      	subs	r2, r3, #1
 800dc6e:	4915      	ldr	r1, [pc, #84]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dc70:	4613      	mov	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	440b      	add	r3, r1
 800dc7a:	3310      	adds	r3, #16
 800dc7c:	6819      	ldr	r1, [r3, #0]
 800dc7e:	4811      	ldr	r0, [pc, #68]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	4613      	mov	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4413      	add	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4403      	add	r3, r0
 800dc8c:	3310      	adds	r3, #16
 800dc8e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800dc90:	4b0b      	ldr	r3, [pc, #44]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	1e5a      	subs	r2, r3, #1
 800dc96:	4613      	mov	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4413      	add	r3, r2
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	4a09      	ldr	r2, [pc, #36]	; (800dcc4 <SYSVIEW_DeleteTask+0x174>)
 800dca0:	4413      	add	r3, r2
 800dca2:	2214      	movs	r2, #20
 800dca4:	2100      	movs	r1, #0
 800dca6:	4618      	mov	r0, r3
 800dca8:	f006 fe84 	bl	80149b4 <memset>
    _NumTasks--;
 800dcac:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	4a03      	ldr	r2, [pc, #12]	; (800dcc0 <SYSVIEW_DeleteTask+0x170>)
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	e000      	b.n	800dcba <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800dcb8:	bf00      	nop
  }
}
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	200045f0 	.word	0x200045f0
 800dcc4:	20004550 	.word	0x20004550

0800dcc8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08a      	sub	sp, #40	; 0x28
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800dcd6:	f107 0314 	add.w	r3, r7, #20
 800dcda:	2214      	movs	r2, #20
 800dcdc:	2100      	movs	r1, #0
 800dcde:	4618      	mov	r0, r3
 800dce0:	f006 fe68 	bl	80149b4 <memset>
  TaskInfo.TaskID     = TaskID;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800dcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800dcf8:	f107 0314 	add.w	r3, r7, #20
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7ff f9a7 	bl	800d050 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800dd02:	bf00      	nop
 800dd04:	3728      	adds	r7, #40	; 0x28
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b086      	sub	sp, #24
 800dd0e:	af02      	add	r7, sp, #8
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	4608      	mov	r0, r1
 800dd14:	4611      	mov	r1, r2
 800dd16:	461a      	mov	r2, r3
 800dd18:	4603      	mov	r3, r0
 800dd1a:	70fb      	strb	r3, [r7, #3]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	70bb      	strb	r3, [r7, #2]
 800dd20:	4613      	mov	r3, r2
 800dd22:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 800dd24:	78fb      	ldrb	r3, [r7, #3]
 800dd26:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800dd28:	78fa      	ldrb	r2, [r7, #3]
 800dd2a:	787b      	ldrb	r3, [r7, #1]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	b2d8      	uxtb	r0, r3
 800dd30:	78ba      	ldrb	r2, [r7, #2]
 800dd32:	7e3b      	ldrb	r3, [r7, #24]
 800dd34:	4413      	add	r3, r2
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	78ba      	ldrb	r2, [r7, #2]
 800dd3a:	78f9      	ldrb	r1, [r7, #3]
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	4603      	mov	r3, r0
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 ff9c 	bl	800ec7e <u8g2_IsIntersection>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d02e      	beq.n	800ddaa <u8g2_DrawFrame+0xa0>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800dd4c:	787b      	ldrb	r3, [r7, #1]
 800dd4e:	78ba      	ldrb	r2, [r7, #2]
 800dd50:	78f9      	ldrb	r1, [r7, #3]
 800dd52:	2000      	movs	r0, #0
 800dd54:	9000      	str	r0, [sp, #0]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fedb 	bl	800eb12 <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800dd5c:	7e3b      	ldrb	r3, [r7, #24]
 800dd5e:	78ba      	ldrb	r2, [r7, #2]
 800dd60:	78f9      	ldrb	r1, [r7, #3]
 800dd62:	2001      	movs	r0, #1
 800dd64:	9000      	str	r0, [sp, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fed3 	bl	800eb12 <u8g2_DrawHVLine>
  x+=w;
 800dd6c:	78fa      	ldrb	r2, [r7, #3]
 800dd6e:	787b      	ldrb	r3, [r7, #1]
 800dd70:	4413      	add	r3, r2
 800dd72:	70fb      	strb	r3, [r7, #3]
  x--;
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800dd7a:	7e3b      	ldrb	r3, [r7, #24]
 800dd7c:	78ba      	ldrb	r2, [r7, #2]
 800dd7e:	78f9      	ldrb	r1, [r7, #3]
 800dd80:	2001      	movs	r0, #1
 800dd82:	9000      	str	r0, [sp, #0]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 fec4 	bl	800eb12 <u8g2_DrawHVLine>
  y+=h;
 800dd8a:	78ba      	ldrb	r2, [r7, #2]
 800dd8c:	7e3b      	ldrb	r3, [r7, #24]
 800dd8e:	4413      	add	r3, r2
 800dd90:	70bb      	strb	r3, [r7, #2]
  y--;
 800dd92:	78bb      	ldrb	r3, [r7, #2]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800dd98:	787b      	ldrb	r3, [r7, #1]
 800dd9a:	78ba      	ldrb	r2, [r7, #2]
 800dd9c:	7bf9      	ldrb	r1, [r7, #15]
 800dd9e:	2000      	movs	r0, #0
 800dda0:	9000      	str	r0, [sp, #0]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 feb5 	bl	800eb12 <u8g2_DrawHVLine>
 800dda8:	e000      	b.n	800ddac <u8g2_DrawFrame+0xa2>
    return;
 800ddaa:	bf00      	nop
}
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	7c1b      	ldrb	r3, [r3, #16]
 800ddc0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddc8:	461a      	mov	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	fb02 f303 	mul.w	r3, r2, r3
 800ddd0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	00db      	lsls	r3, r3, #3
 800ddd6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	2100      	movs	r1, #0
 800dde0:	4618      	mov	r0, r3
 800dde2:	f006 fde7 	bl	80149b4 <memset>
}
 800dde6:	bf00      	nop
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b086      	sub	sp, #24
 800ddf2:	af02      	add	r7, sp, #8
 800ddf4:	6078      	str	r0, [r7, #4]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	70fb      	strb	r3, [r7, #3]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	7c1b      	ldrb	r3, [r3, #16]
 800de04:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800de06:	78fb      	ldrb	r3, [r7, #3]
 800de08:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800de10:	7bfb      	ldrb	r3, [r7, #15]
 800de12:	b29b      	uxth	r3, r3
 800de14:	89ba      	ldrh	r2, [r7, #12]
 800de16:	fb12 f303 	smulbb	r3, r2, r3
 800de1a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800de1c:	89bb      	ldrh	r3, [r7, #12]
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800de22:	89bb      	ldrh	r3, [r7, #12]
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	4413      	add	r3, r2
 800de28:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800de2a:	7bf9      	ldrb	r1, [r7, #15]
 800de2c:	78ba      	ldrb	r2, [r7, #2]
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	460b      	mov	r3, r1
 800de34:	2100      	movs	r1, #0
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f001 fbd1 	bl	800f5de <u8x8_DrawTile>
}
 800de3c:	bf00      	nop
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de56:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de5e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	7c5b      	ldrb	r3, [r3, #17]
 800de66:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800de68:	7bba      	ldrb	r2, [r7, #14]
 800de6a:	7bfb      	ldrb	r3, [r7, #15]
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff ffbd 	bl	800ddee <u8g2_send_tile_row>
    src_row++;
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	3301      	adds	r3, #1
 800de78:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800de7a:	7bbb      	ldrb	r3, [r7, #14]
 800de7c:	3301      	adds	r3, #1
 800de7e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800de80:	7bfa      	ldrb	r2, [r7, #15]
 800de82:	7b7b      	ldrb	r3, [r7, #13]
 800de84:	429a      	cmp	r2, r3
 800de86:	d203      	bcs.n	800de90 <u8g2_send_buffer+0x4c>
 800de88:	7bba      	ldrb	r2, [r7, #14]
 800de8a:	7b3b      	ldrb	r3, [r7, #12]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d3eb      	bcc.n	800de68 <u8g2_send_buffer+0x24>
}
 800de90:	bf00      	nop
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff ffcf 	bl	800de44 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f001 fbea 	bl	800f680 <u8x8_RefreshDisplay>
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2208      	movs	r2, #8
 800dec0:	701a      	strb	r2, [r3, #0]
  return buf;
 800dec2:	4b03      	ldr	r3, [pc, #12]	; (800ded0 <u8g2_m_16_8_f+0x1c>)
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	200045f4 	.word	0x200045f4

0800ded4 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af02      	add	r7, sp, #8
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a0b      	ldr	r2, [pc, #44]	; (800df18 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800deea:	490c      	ldr	r1, [pc, #48]	; (800df1c <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f001 fc2b 	bl	800f748 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800def2:	f107 0313 	add.w	r3, r7, #19
 800def6:	4618      	mov	r0, r3
 800def8:	f7ff ffdc 	bl	800deb4 <u8g2_m_16_8_f>
 800defc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800defe:	7cfa      	ldrb	r2, [r7, #19]
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	4b06      	ldr	r3, [pc, #24]	; (800df20 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800df06:	6979      	ldr	r1, [r7, #20]
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 ffa1 	bl	800ee50 <u8g2_SetupBuffer>
}
 800df0e:	bf00      	nop
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	0800f301 	.word	0x0800f301
 800df1c:	0800f4d9 	.word	0x0800f4d9
 800df20:	0800ecd5 	.word	0x0800ecd5

0800df24 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800df30:	78fb      	ldrb	r3, [r7, #3]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	4413      	add	r3, r2
 800df36:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	781b      	ldrb	r3, [r3, #0]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800df54:	78fb      	ldrb	r3, [r7, #3]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	4413      	add	r3, r2
 800df5a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	81fb      	strh	r3, [r7, #14]
    font++;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	3301      	adds	r3, #1
 800df66:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800df68:	89fb      	ldrh	r3, [r7, #14]
 800df6a:	021b      	lsls	r3, r3, #8
 800df6c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	b29a      	uxth	r2, r3
 800df74:	89fb      	ldrh	r3, [r7, #14]
 800df76:	4413      	add	r3, r2
 800df78:	81fb      	strh	r3, [r7, #14]
    return pos;
 800df7a:	89fb      	ldrh	r3, [r7, #14]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3714      	adds	r7, #20
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800df92:	2100      	movs	r1, #0
 800df94:	6838      	ldr	r0, [r7, #0]
 800df96:	f7ff ffc5 	bl	800df24 <u8g2_font_get_byte>
 800df9a:	4603      	mov	r3, r0
 800df9c:	461a      	mov	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	6838      	ldr	r0, [r7, #0]
 800dfa6:	f7ff ffbd 	bl	800df24 <u8g2_font_get_byte>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	461a      	mov	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800dfb2:	2102      	movs	r1, #2
 800dfb4:	6838      	ldr	r0, [r7, #0]
 800dfb6:	f7ff ffb5 	bl	800df24 <u8g2_font_get_byte>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800dfc2:	2103      	movs	r1, #3
 800dfc4:	6838      	ldr	r0, [r7, #0]
 800dfc6:	f7ff ffad 	bl	800df24 <u8g2_font_get_byte>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	461a      	mov	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800dfd2:	2104      	movs	r1, #4
 800dfd4:	6838      	ldr	r0, [r7, #0]
 800dfd6:	f7ff ffa5 	bl	800df24 <u8g2_font_get_byte>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	461a      	mov	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800dfe2:	2105      	movs	r1, #5
 800dfe4:	6838      	ldr	r0, [r7, #0]
 800dfe6:	f7ff ff9d 	bl	800df24 <u8g2_font_get_byte>
 800dfea:	4603      	mov	r3, r0
 800dfec:	461a      	mov	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800dff2:	2106      	movs	r1, #6
 800dff4:	6838      	ldr	r0, [r7, #0]
 800dff6:	f7ff ff95 	bl	800df24 <u8g2_font_get_byte>
 800dffa:	4603      	mov	r3, r0
 800dffc:	461a      	mov	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800e002:	2107      	movs	r1, #7
 800e004:	6838      	ldr	r0, [r7, #0]
 800e006:	f7ff ff8d 	bl	800df24 <u8g2_font_get_byte>
 800e00a:	4603      	mov	r3, r0
 800e00c:	461a      	mov	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800e012:	2108      	movs	r1, #8
 800e014:	6838      	ldr	r0, [r7, #0]
 800e016:	f7ff ff85 	bl	800df24 <u8g2_font_get_byte>
 800e01a:	4603      	mov	r3, r0
 800e01c:	461a      	mov	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800e022:	2109      	movs	r1, #9
 800e024:	6838      	ldr	r0, [r7, #0]
 800e026:	f7ff ff7d 	bl	800df24 <u8g2_font_get_byte>
 800e02a:	4603      	mov	r3, r0
 800e02c:	b25a      	sxtb	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800e032:	210a      	movs	r1, #10
 800e034:	6838      	ldr	r0, [r7, #0]
 800e036:	f7ff ff75 	bl	800df24 <u8g2_font_get_byte>
 800e03a:	4603      	mov	r3, r0
 800e03c:	b25a      	sxtb	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800e042:	210b      	movs	r1, #11
 800e044:	6838      	ldr	r0, [r7, #0]
 800e046:	f7ff ff6d 	bl	800df24 <u8g2_font_get_byte>
 800e04a:	4603      	mov	r3, r0
 800e04c:	b25a      	sxtb	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800e052:	210c      	movs	r1, #12
 800e054:	6838      	ldr	r0, [r7, #0]
 800e056:	f7ff ff65 	bl	800df24 <u8g2_font_get_byte>
 800e05a:	4603      	mov	r3, r0
 800e05c:	b25a      	sxtb	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800e062:	210d      	movs	r1, #13
 800e064:	6838      	ldr	r0, [r7, #0]
 800e066:	f7ff ff5d 	bl	800df24 <u8g2_font_get_byte>
 800e06a:	4603      	mov	r3, r0
 800e06c:	b25a      	sxtb	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800e072:	210e      	movs	r1, #14
 800e074:	6838      	ldr	r0, [r7, #0]
 800e076:	f7ff ff55 	bl	800df24 <u8g2_font_get_byte>
 800e07a:	4603      	mov	r3, r0
 800e07c:	b25a      	sxtb	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800e082:	210f      	movs	r1, #15
 800e084:	6838      	ldr	r0, [r7, #0]
 800e086:	f7ff ff4d 	bl	800df24 <u8g2_font_get_byte>
 800e08a:	4603      	mov	r3, r0
 800e08c:	b25a      	sxtb	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800e092:	2110      	movs	r1, #16
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f7ff ff45 	bl	800df24 <u8g2_font_get_byte>
 800e09a:	4603      	mov	r3, r0
 800e09c:	b25a      	sxtb	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800e0a2:	2111      	movs	r1, #17
 800e0a4:	6838      	ldr	r0, [r7, #0]
 800e0a6:	f7ff ff4f 	bl	800df48 <u8g2_font_get_word>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800e0b2:	2113      	movs	r1, #19
 800e0b4:	6838      	ldr	r0, [r7, #0]
 800e0b6:	f7ff ff47 	bl	800df48 <u8g2_font_get_word>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	461a      	mov	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800e0c2:	2115      	movs	r1, #21
 800e0c4:	6838      	ldr	r0, [r7, #0]
 800e0c6:	f7ff ff3f 	bl	800df48 <u8g2_font_get_word>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	82da      	strh	r2, [r3, #22]
#endif
}
 800e0d2:	bf00      	nop
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b085      	sub	sp, #20
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	7a9b      	ldrb	r3, [r3, #10]
 800e0ea:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800e0f4:	7bfa      	ldrb	r2, [r7, #15]
 800e0f6:	7b7b      	ldrb	r3, [r7, #13]
 800e0f8:	fa42 f303 	asr.w	r3, r2, r3
 800e0fc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800e0fe:	7b7b      	ldrb	r3, [r7, #13]
 800e100:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800e102:	7bba      	ldrb	r2, [r7, #14]
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	4413      	add	r3, r2
 800e108:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800e10a:	7bbb      	ldrb	r3, [r7, #14]
 800e10c:	2b07      	cmp	r3, #7
 800e10e:	d91a      	bls.n	800e146 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800e110:	2308      	movs	r3, #8
 800e112:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800e114:	7b3a      	ldrb	r2, [r7, #12]
 800e116:	7b7b      	ldrb	r3, [r7, #13]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	1c5a      	adds	r2, r3, #1
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	461a      	mov	r2, r3
 800e12e:	7b3b      	ldrb	r3, [r7, #12]
 800e130:	fa02 f303 	lsl.w	r3, r2, r3
 800e134:	b25a      	sxtb	r2, r3
 800e136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	b25b      	sxtb	r3, r3
 800e13e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800e140:	7bbb      	ldrb	r3, [r7, #14]
 800e142:	3b08      	subs	r3, #8
 800e144:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800e146:	78fb      	ldrb	r3, [r7, #3]
 800e148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e14c:	fa02 f303 	lsl.w	r3, r2, r3
 800e150:	b2db      	uxtb	r3, r3
 800e152:	43db      	mvns	r3, r3
 800e154:	b2da      	uxtb	r2, r3
 800e156:	7bfb      	ldrb	r3, [r7, #15]
 800e158:	4013      	ands	r3, r2
 800e15a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	7bba      	ldrb	r2, [r7, #14]
 800e160:	729a      	strb	r2, [r3, #10]
  return val;
 800e162:	7bfb      	ldrb	r3, [r7, #15]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800e17c:	78fb      	ldrb	r3, [r7, #3]
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7ff ffaa 	bl	800e0da <u8g2_font_decode_get_unsigned_bits>
 800e186:	4603      	mov	r3, r0
 800e188:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800e18a:	2301      	movs	r3, #1
 800e18c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800e18e:	78fb      	ldrb	r3, [r7, #3]
 800e190:	3b01      	subs	r3, #1
 800e192:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800e194:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e198:	78fb      	ldrb	r3, [r7, #3]
 800e19a:	fa02 f303 	lsl.w	r3, r2, r3
 800e19e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800e1a0:	7bfa      	ldrb	r2, [r7, #15]
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	73fb      	strb	r3, [r7, #15]
  return v;
 800e1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800e1b6:	b490      	push	{r4, r7}
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	4604      	mov	r4, r0
 800e1be:	4608      	mov	r0, r1
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	4623      	mov	r3, r4
 800e1c6:	71fb      	strb	r3, [r7, #7]
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	71bb      	strb	r3, [r7, #6]
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	717b      	strb	r3, [r7, #5]
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800e1d4:	793b      	ldrb	r3, [r7, #4]
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d010      	beq.n	800e1fc <u8g2_add_vector_y+0x46>
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	dc13      	bgt.n	800e206 <u8g2_add_vector_y+0x50>
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <u8g2_add_vector_y+0x32>
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d005      	beq.n	800e1f2 <u8g2_add_vector_y+0x3c>
 800e1e6:	e00e      	b.n	800e206 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 800e1e8:	797a      	ldrb	r2, [r7, #5]
 800e1ea:	79fb      	ldrb	r3, [r7, #7]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	71fb      	strb	r3, [r7, #7]
      break;
 800e1f0:	e00e      	b.n	800e210 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 800e1f2:	79ba      	ldrb	r2, [r7, #6]
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	71fb      	strb	r3, [r7, #7]
      break;
 800e1fa:	e009      	b.n	800e210 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 800e1fc:	797b      	ldrb	r3, [r7, #5]
 800e1fe:	79fa      	ldrb	r2, [r7, #7]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	71fb      	strb	r3, [r7, #7]
      break;
 800e204:	e004      	b.n	800e210 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800e206:	79bb      	ldrb	r3, [r7, #6]
 800e208:	79fa      	ldrb	r2, [r7, #7]
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	71fb      	strb	r3, [r7, #7]
      break;      
 800e20e:	bf00      	nop
  }
  return dy;
 800e210:	79fb      	ldrb	r3, [r7, #7]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bc90      	pop	{r4, r7}
 800e21a:	4770      	bx	lr

0800e21c <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800e21c:	b490      	push	{r4, r7}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	4604      	mov	r4, r0
 800e224:	4608      	mov	r0, r1
 800e226:	4611      	mov	r1, r2
 800e228:	461a      	mov	r2, r3
 800e22a:	4623      	mov	r3, r4
 800e22c:	71fb      	strb	r3, [r7, #7]
 800e22e:	4603      	mov	r3, r0
 800e230:	71bb      	strb	r3, [r7, #6]
 800e232:	460b      	mov	r3, r1
 800e234:	717b      	strb	r3, [r7, #5]
 800e236:	4613      	mov	r3, r2
 800e238:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800e23a:	793b      	ldrb	r3, [r7, #4]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d010      	beq.n	800e262 <u8g2_add_vector_x+0x46>
 800e240:	2b02      	cmp	r3, #2
 800e242:	dc13      	bgt.n	800e26c <u8g2_add_vector_x+0x50>
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <u8g2_add_vector_x+0x32>
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d005      	beq.n	800e258 <u8g2_add_vector_x+0x3c>
 800e24c:	e00e      	b.n	800e26c <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800e24e:	79ba      	ldrb	r2, [r7, #6]
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	4413      	add	r3, r2
 800e254:	71fb      	strb	r3, [r7, #7]
      break;
 800e256:	e00e      	b.n	800e276 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 800e258:	797b      	ldrb	r3, [r7, #5]
 800e25a:	79fa      	ldrb	r2, [r7, #7]
 800e25c:	1ad3      	subs	r3, r2, r3
 800e25e:	71fb      	strb	r3, [r7, #7]
      break;
 800e260:	e009      	b.n	800e276 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 800e262:	79bb      	ldrb	r3, [r7, #6]
 800e264:	79fa      	ldrb	r2, [r7, #7]
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	71fb      	strb	r3, [r7, #7]
      break;
 800e26a:	e004      	b.n	800e276 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 800e26c:	797a      	ldrb	r2, [r7, #5]
 800e26e:	79fb      	ldrb	r3, [r7, #7]
 800e270:	4413      	add	r3, r2
 800e272:	71fb      	strb	r3, [r7, #7]
      break;      
 800e274:	bf00      	nop
  }
  return dx;
 800e276:	79fb      	ldrb	r3, [r7, #7]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bc90      	pop	{r4, r7}
 800e280:	4770      	bx	lr

0800e282 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b088      	sub	sp, #32
 800e286:	af02      	add	r7, sp, #8
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	460b      	mov	r3, r1
 800e28c:	70fb      	strb	r3, [r7, #3]
 800e28e:	4613      	mov	r3, r2
 800e290:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3358      	adds	r3, #88	; 0x58
 800e296:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800e298:	78fb      	ldrb	r3, [r7, #3]
 800e29a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800e2a2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800e2aa:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e2b2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800e2b4:	7bfa      	ldrb	r2, [r7, #15]
 800e2b6:	7d7b      	ldrb	r3, [r7, #21]
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800e2c0:	7dfa      	ldrb	r2, [r7, #23]
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d201      	bcs.n	800e2cc <u8g2_font_decode_len+0x4a>
      current = cnt;
 800e2c8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ca:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	791b      	ldrb	r3, [r3, #4]
 800e2d0:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	795b      	ldrb	r3, [r3, #5]
 800e2d6:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800e2d8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800e2dc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	7b9b      	ldrb	r3, [r3, #14]
 800e2e4:	7bb8      	ldrb	r0, [r7, #14]
 800e2e6:	f7ff ff99 	bl	800e21c <u8g2_add_vector_x>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800e2ee:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800e2f2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	7b9b      	ldrb	r3, [r3, #14]
 800e2fa:	7b78      	ldrb	r0, [r7, #13]
 800e2fc:	f7ff ff5b 	bl	800e1b6 <u8g2_add_vector_y>
 800e300:	4603      	mov	r3, r0
 800e302:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800e304:	78bb      	ldrb	r3, [r7, #2]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00f      	beq.n	800e32a <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	7b1a      	ldrb	r2, [r3, #12]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	7b9b      	ldrb	r3, [r3, #14]
 800e318:	7db8      	ldrb	r0, [r7, #22]
 800e31a:	7b7a      	ldrb	r2, [r7, #13]
 800e31c:	7bb9      	ldrb	r1, [r7, #14]
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	4603      	mov	r3, r0
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fbf5 	bl	800eb12 <u8g2_DrawHVLine>
 800e328:	e012      	b.n	800e350 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	7adb      	ldrb	r3, [r3, #11]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10e      	bne.n	800e350 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	7b5a      	ldrb	r2, [r3, #13]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	7b9b      	ldrb	r3, [r3, #14]
 800e340:	7db8      	ldrb	r0, [r7, #22]
 800e342:	7b7a      	ldrb	r2, [r7, #13]
 800e344:	7bb9      	ldrb	r1, [r7, #14]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	4603      	mov	r3, r0
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fbe1 	bl	800eb12 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800e350:	7dfa      	ldrb	r2, [r7, #23]
 800e352:	7bfb      	ldrb	r3, [r7, #15]
 800e354:	429a      	cmp	r2, r3
 800e356:	d309      	bcc.n	800e36c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800e358:	7dfa      	ldrb	r2, [r7, #23]
 800e35a:	7bfb      	ldrb	r3, [r7, #15]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800e360:	2300      	movs	r3, #0
 800e362:	757b      	strb	r3, [r7, #21]
    ly++;
 800e364:	7d3b      	ldrb	r3, [r7, #20]
 800e366:	3301      	adds	r3, #1
 800e368:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800e36a:	e79f      	b.n	800e2ac <u8g2_font_decode_len+0x2a>
      break;
 800e36c:	bf00      	nop
  }
  lx += cnt;
 800e36e:	7d7a      	ldrb	r2, [r7, #21]
 800e370:	7dfb      	ldrb	r3, [r7, #23]
 800e372:	4413      	add	r3, r2
 800e374:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800e376:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800e37e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	71da      	strb	r2, [r3, #7]
  
}
 800e386:	bf00      	nop
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b084      	sub	sp, #16
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
 800e396:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3358      	adds	r3, #88	; 0x58
 800e39c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff fe91 	bl	800e0da <u8g2_font_decode_get_unsigned_bits>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	b25a      	sxtb	r2, r3
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	68f8      	ldr	r0, [r7, #12]
 800e3ca:	f7ff fe86 	bl	800e0da <u8g2_font_decode_get_unsigned_bits>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b25a      	sxtb	r2, r3
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	7b1b      	ldrb	r3, [r3, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	bf0c      	ite	eq
 800e3e8:	2301      	moveq	r3, #1
 800e3ea:	2300      	movne	r3, #0
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	735a      	strb	r2, [r3, #13]
}
 800e3f4:	bf00      	nop
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af02      	add	r7, sp, #8
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	3358      	adds	r3, #88	; 0x58
 800e40a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f7ff ffbd 	bl	800e38e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e41a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800e422:	4619      	mov	r1, r3
 800e424:	6938      	ldr	r0, [r7, #16]
 800e426:	f7ff fea3 	bl	800e170 <u8g2_font_decode_get_signed_bits>
 800e42a:	4603      	mov	r3, r0
 800e42c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800e434:	4619      	mov	r1, r3
 800e436:	6938      	ldr	r0, [r7, #16]
 800e438:	f7ff fe9a 	bl	800e170 <u8g2_font_decode_get_signed_bits>
 800e43c:	4603      	mov	r3, r0
 800e43e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e446:	4619      	mov	r1, r3
 800e448:	6938      	ldr	r0, [r7, #16]
 800e44a:	f7ff fe91 	bl	800e170 <u8g2_font_decode_get_signed_bits>
 800e44e:	4603      	mov	r3, r0
 800e450:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f340 80cf 	ble.w	800e5fc <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	7918      	ldrb	r0, [r3, #4]
 800e462:	7bfa      	ldrb	r2, [r7, #15]
 800e464:	7b7b      	ldrb	r3, [r7, #13]
 800e466:	4413      	add	r3, r2
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	425b      	negs	r3, r3
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	b25a      	sxtb	r2, r3
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	7b9b      	ldrb	r3, [r3, #14]
 800e474:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800e478:	f7ff fed0 	bl	800e21c <u8g2_add_vector_x>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	7958      	ldrb	r0, [r3, #5]
 800e488:	7bfa      	ldrb	r2, [r7, #15]
 800e48a:	7b7b      	ldrb	r3, [r7, #13]
 800e48c:	4413      	add	r3, r2
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	425b      	negs	r3, r3
 800e492:	b2db      	uxtb	r3, r3
 800e494:	b25a      	sxtb	r2, r3
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	7b9b      	ldrb	r3, [r3, #14]
 800e49a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800e49e:	f7ff fe8a 	bl	800e1b6 <u8g2_add_vector_y>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	791b      	ldrb	r3, [r3, #4]
 800e4ae:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	795b      	ldrb	r3, [r3, #5]
 800e4b4:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800e4b6:	7dfb      	ldrb	r3, [r7, #23]
 800e4b8:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800e4ba:	7d7b      	ldrb	r3, [r7, #21]
 800e4bc:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	7b9b      	ldrb	r3, [r3, #14]
 800e4c2:	2b03      	cmp	r3, #3
 800e4c4:	d852      	bhi.n	800e56c <u8g2_font_decode_glyph+0x170>
 800e4c6:	a201      	add	r2, pc, #4	; (adr r2, 800e4cc <u8g2_font_decode_glyph+0xd0>)
 800e4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4cc:	0800e4dd 	.word	0x0800e4dd
 800e4d0:	0800e4f5 	.word	0x0800e4f5
 800e4d4:	0800e519 	.word	0x0800e519
 800e4d8:	0800e549 	.word	0x0800e549
      {
	case 0:
	    x1 += decode->glyph_width;
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	7dbb      	ldrb	r3, [r7, #22]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 800e4ea:	7bfa      	ldrb	r2, [r7, #15]
 800e4ec:	7d3b      	ldrb	r3, [r7, #20]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	753b      	strb	r3, [r7, #20]
	    break;
 800e4f2:	e03b      	b.n	800e56c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 800e4f4:	7bfb      	ldrb	r3, [r7, #15]
 800e4f6:	7dfa      	ldrb	r2, [r7, #23]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e4fc:	7dfb      	ldrb	r3, [r7, #23]
 800e4fe:	3301      	adds	r3, #1
 800e500:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800e502:	7dbb      	ldrb	r3, [r7, #22]
 800e504:	3301      	adds	r3, #1
 800e506:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	7d3b      	ldrb	r3, [r7, #20]
 800e512:	4413      	add	r3, r2
 800e514:	753b      	strb	r3, [r7, #20]
	    break;
 800e516:	e029      	b.n	800e56c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	7dfa      	ldrb	r2, [r7, #23]
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e526:	7dfb      	ldrb	r3, [r7, #23]
 800e528:	3301      	adds	r3, #1
 800e52a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800e52c:	7dbb      	ldrb	r3, [r7, #22]
 800e52e:	3301      	adds	r3, #1
 800e530:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 800e532:	7bfb      	ldrb	r3, [r7, #15]
 800e534:	7d7a      	ldrb	r2, [r7, #21]
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e53a:	7d7b      	ldrb	r3, [r7, #21]
 800e53c:	3301      	adds	r3, #1
 800e53e:	757b      	strb	r3, [r7, #21]
	    y1++;
 800e540:	7d3b      	ldrb	r3, [r7, #20]
 800e542:	3301      	adds	r3, #1
 800e544:	753b      	strb	r3, [r7, #20]
	    break;	  
 800e546:	e011      	b.n	800e56c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 800e548:	7bfa      	ldrb	r2, [r7, #15]
 800e54a:	7dbb      	ldrb	r3, [r7, #22]
 800e54c:	4413      	add	r3, r2
 800e54e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e556:	b2db      	uxtb	r3, r3
 800e558:	7d7a      	ldrb	r2, [r7, #21]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800e55e:	7d7b      	ldrb	r3, [r7, #21]
 800e560:	3301      	adds	r3, #1
 800e562:	757b      	strb	r3, [r7, #21]
	    y1++;
 800e564:	7d3b      	ldrb	r3, [r7, #20]
 800e566:	3301      	adds	r3, #1
 800e568:	753b      	strb	r3, [r7, #20]
	    break;	  
 800e56a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800e56c:	7db8      	ldrb	r0, [r7, #22]
 800e56e:	7d7a      	ldrb	r2, [r7, #21]
 800e570:	7df9      	ldrb	r1, [r7, #23]
 800e572:	7d3b      	ldrb	r3, [r7, #20]
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	4603      	mov	r3, r0
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fb80 	bl	800ec7e <u8g2_IsIntersection>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d102      	bne.n	800e58a <u8g2_font_decode_glyph+0x18e>
	return d;
 800e584:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e588:	e03a      	b.n	800e600 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	2200      	movs	r2, #0
 800e58e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	2200      	movs	r2, #0
 800e594:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800e59c:	4619      	mov	r1, r3
 800e59e:	6938      	ldr	r0, [r7, #16]
 800e5a0:	f7ff fd9b 	bl	800e0da <u8g2_font_decode_get_unsigned_bits>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6938      	ldr	r0, [r7, #16]
 800e5b2:	f7ff fd92 	bl	800e0da <u8g2_font_decode_get_unsigned_bits>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800e5ba:	7afb      	ldrb	r3, [r7, #11]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7ff fe5e 	bl	800e282 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800e5c6:	7abb      	ldrb	r3, [r7, #10]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff fe58 	bl	800e282 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	6938      	ldr	r0, [r7, #16]
 800e5d6:	f7ff fd80 	bl	800e0da <u8g2_font_decode_get_unsigned_bits>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1ec      	bne.n	800e5ba <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800e5e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	dd00      	ble.n	800e5f0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800e5ee:	e7d2      	b.n	800e596 <u8g2_font_decode_glyph+0x19a>
	break;
 800e5f0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	7b1a      	ldrb	r2, [r3, #12]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 800e5fc:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	460b      	mov	r3, r1
 800e612:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e618:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	3317      	adds	r3, #23
 800e61e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800e620:	887b      	ldrh	r3, [r7, #2]
 800e622:	2bff      	cmp	r3, #255	; 0xff
 800e624:	d82a      	bhi.n	800e67c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800e626:	887b      	ldrh	r3, [r7, #2]
 800e628:	2b60      	cmp	r3, #96	; 0x60
 800e62a:	d907      	bls.n	800e63c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e632:	461a      	mov	r2, r3
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	4413      	add	r3, r2
 800e638:	617b      	str	r3, [r7, #20]
 800e63a:	e009      	b.n	800e650 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800e63c:	887b      	ldrh	r3, [r7, #2]
 800e63e:	2b40      	cmp	r3, #64	; 0x40
 800e640:	d906      	bls.n	800e650 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800e648:	461a      	mov	r2, r3
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	4413      	add	r3, r2
 800e64e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	3301      	adds	r3, #1
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d04e      	beq.n	800e6f8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	887a      	ldrh	r2, [r7, #2]
 800e662:	429a      	cmp	r2, r3
 800e664:	d102      	bne.n	800e66c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	3302      	adds	r3, #2
 800e66a:	e049      	b.n	800e700 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	3301      	adds	r3, #1
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	461a      	mov	r2, r3
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	4413      	add	r3, r2
 800e678:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800e67a:	e7e9      	b.n	800e650 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e682:	461a      	mov	r2, r3
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	4413      	add	r3, r2
 800e688:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800e68e:	2100      	movs	r1, #0
 800e690:	6938      	ldr	r0, [r7, #16]
 800e692:	f7ff fc59 	bl	800df48 <u8g2_font_get_word>
 800e696:	4603      	mov	r3, r0
 800e698:	461a      	mov	r2, r3
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	4413      	add	r3, r2
 800e69e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800e6a0:	2102      	movs	r1, #2
 800e6a2:	6938      	ldr	r0, [r7, #16]
 800e6a4:	f7ff fc50 	bl	800df48 <u8g2_font_get_word>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800e6b2:	89fa      	ldrh	r2, [r7, #14]
 800e6b4:	887b      	ldrh	r3, [r7, #2]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d3e9      	bcc.n	800e68e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800e6c0:	89fb      	ldrh	r3, [r7, #14]
 800e6c2:	021b      	lsls	r3, r3, #8
 800e6c4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	89fb      	ldrh	r3, [r7, #14]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800e6d4:	89fb      	ldrh	r3, [r7, #14]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d010      	beq.n	800e6fc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800e6da:	89fa      	ldrh	r2, [r7, #14]
 800e6dc:	887b      	ldrh	r3, [r7, #2]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d102      	bne.n	800e6e8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	3303      	adds	r3, #3
 800e6e6:	e00b      	b.n	800e700 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	3302      	adds	r3, #2
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800e6f6:	e7e0      	b.n	800e6ba <u8g2_font_get_glyph_data+0xb2>
	break;
 800e6f8:	bf00      	nop
 800e6fa:	e000      	b.n	800e6fe <u8g2_font_get_glyph_data+0xf6>
	break;
 800e6fc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	4608      	mov	r0, r1
 800e712:	4611      	mov	r1, r2
 800e714:	461a      	mov	r2, r3
 800e716:	4603      	mov	r3, r0
 800e718:	70fb      	strb	r3, [r7, #3]
 800e71a:	460b      	mov	r3, r1
 800e71c:	70bb      	strb	r3, [r7, #2]
 800e71e:	4613      	mov	r3, r2
 800e720:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 800e722:	2300      	movs	r3, #0
 800e724:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	78fa      	ldrb	r2, [r7, #3]
 800e72a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	78ba      	ldrb	r2, [r7, #2]
 800e732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800e736:	883b      	ldrh	r3, [r7, #0]
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7ff ff64 	bl	800e608 <u8g2_font_get_glyph_data>
 800e740:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d005      	beq.n	800e754 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800e748:	68b9      	ldr	r1, [r7, #8]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7ff fe56 	bl	800e3fc <u8g2_font_decode_glyph>
 800e750:	4603      	mov	r3, r0
 800e752:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 800e754:	7bfb      	ldrb	r3, [r7, #15]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	4608      	mov	r0, r1
 800e76a:	4611      	mov	r1, r2
 800e76c:	461a      	mov	r2, r3
 800e76e:	4603      	mov	r3, r0
 800e770:	70fb      	strb	r3, [r7, #3]
 800e772:	460b      	mov	r3, r1
 800e774:	70bb      	strb	r3, [r7, #2]
 800e776:	4613      	mov	r3, r2
 800e778:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800e780:	2b03      	cmp	r3, #3
 800e782:	d833      	bhi.n	800e7ec <u8g2_DrawGlyph+0x8c>
 800e784:	a201      	add	r2, pc, #4	; (adr r2, 800e78c <u8g2_DrawGlyph+0x2c>)
 800e786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e78a:	bf00      	nop
 800e78c:	0800e79d 	.word	0x0800e79d
 800e790:	0800e7b1 	.word	0x0800e7b1
 800e794:	0800e7c5 	.word	0x0800e7c5
 800e798:	0800e7d9 	.word	0x0800e7d9
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	4798      	blx	r3
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	78bb      	ldrb	r3, [r7, #2]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	70bb      	strb	r3, [r7, #2]
      break;
 800e7ae:	e01d      	b.n	800e7ec <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	4798      	blx	r3
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	1a9b      	subs	r3, r3, r2
 800e7c0:	70fb      	strb	r3, [r7, #3]
      break;
 800e7c2:	e013      	b.n	800e7ec <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	4798      	blx	r3
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	78bb      	ldrb	r3, [r7, #2]
 800e7d2:	1a9b      	subs	r3, r3, r2
 800e7d4:	70bb      	strb	r3, [r7, #2]
      break;
 800e7d6:	e009      	b.n	800e7ec <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	4798      	blx	r3
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	70fb      	strb	r3, [r7, #3]
      break;
 800e7ea:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800e7ec:	883b      	ldrh	r3, [r7, #0]
 800e7ee:	78ba      	ldrb	r2, [r7, #2]
 800e7f0:	78f9      	ldrb	r1, [r7, #3]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7ff ff88 	bl	800e708 <u8g2_font_draw_glyph>
 800e7f8:	4603      	mov	r3, r0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop

0800e804 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	607b      	str	r3, [r7, #4]
 800e80e:	460b      	mov	r3, r1
 800e810:	72fb      	strb	r3, [r7, #11]
 800e812:	4613      	mov	r3, r2
 800e814:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f000 fc6e 	bl	800f0f8 <u8x8_utf8_init>
  sum = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	7812      	ldrb	r2, [r2, #0]
 800e828:	4611      	mov	r1, r2
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	4798      	blx	r3
 800e82e:	4603      	mov	r3, r0
 800e830:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800e832:	8abb      	ldrh	r3, [r7, #20]
 800e834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e838:	4293      	cmp	r3, r2
 800e83a:	d038      	beq.n	800e8ae <u8g2_draw_string+0xaa>
      break;
    str++;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	3301      	adds	r3, #1
 800e840:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800e842:	8abb      	ldrh	r3, [r7, #20]
 800e844:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e848:	4293      	cmp	r3, r2
 800e84a:	d0e9      	beq.n	800e820 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800e84c:	8abb      	ldrh	r3, [r7, #20]
 800e84e:	7aba      	ldrb	r2, [r7, #10]
 800e850:	7af9      	ldrb	r1, [r7, #11]
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f7ff ff84 	bl	800e760 <u8g2_DrawGlyph>
 800e858:	4603      	mov	r3, r0
 800e85a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800e862:	2b03      	cmp	r3, #3
 800e864:	d81e      	bhi.n	800e8a4 <u8g2_draw_string+0xa0>
 800e866:	a201      	add	r2, pc, #4	; (adr r2, 800e86c <u8g2_draw_string+0x68>)
 800e868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e86c:	0800e87d 	.word	0x0800e87d
 800e870:	0800e887 	.word	0x0800e887
 800e874:	0800e891 	.word	0x0800e891
 800e878:	0800e89b 	.word	0x0800e89b
      {
	case 0:
	  x += delta;
 800e87c:	7afa      	ldrb	r2, [r7, #11]
 800e87e:	7cfb      	ldrb	r3, [r7, #19]
 800e880:	4413      	add	r3, r2
 800e882:	72fb      	strb	r3, [r7, #11]
	  break;
 800e884:	e00e      	b.n	800e8a4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800e886:	7aba      	ldrb	r2, [r7, #10]
 800e888:	7cfb      	ldrb	r3, [r7, #19]
 800e88a:	4413      	add	r3, r2
 800e88c:	72bb      	strb	r3, [r7, #10]
	  break;
 800e88e:	e009      	b.n	800e8a4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800e890:	7afa      	ldrb	r2, [r7, #11]
 800e892:	7cfb      	ldrb	r3, [r7, #19]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	72fb      	strb	r3, [r7, #11]
	  break;
 800e898:	e004      	b.n	800e8a4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800e89a:	7aba      	ldrb	r2, [r7, #10]
 800e89c:	7cfb      	ldrb	r3, [r7, #19]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	72bb      	strb	r3, [r7, #10]
	  break;
 800e8a2:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800e8a4:	7dfa      	ldrb	r2, [r7, #23]
 800e8a6:	7cfb      	ldrb	r3, [r7, #19]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800e8ac:	e7b8      	b.n	800e820 <u8g2_draw_string+0x1c>
      break;
 800e8ae:	bf00      	nop
    }
  }
  return sum;
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3718      	adds	r7, #24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop

0800e8bc <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	607b      	str	r3, [r7, #4]
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	72fb      	strb	r3, [r7, #11]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	4a06      	ldr	r2, [pc, #24]	; (800e8ec <u8g2_DrawStr+0x30>)
 800e8d2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800e8d4:	7aba      	ldrb	r2, [r7, #10]
 800e8d6:	7af9      	ldrb	r1, [r7, #11]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f7ff ff92 	bl	800e804 <u8g2_draw_string>
 800e8e0:	4603      	mov	r3, r0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	0800f115 	.word	0x0800f115

0800e8f0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d05d      	beq.n	800e9bc <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d04d      	beq.n	800e9be <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d11c      	bne.n	800e966 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 800e938:	429a      	cmp	r2, r3
 800e93a:	da05      	bge.n	800e948 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 800e954:	429a      	cmp	r2, r3
 800e956:	dd32      	ble.n	800e9be <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800e964:	e02b      	b.n	800e9be <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800e96c:	461a      	mov	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800e974:	4619      	mov	r1, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800e97c:	440b      	add	r3, r1
 800e97e:	429a      	cmp	r2, r3
 800e980:	da0d      	bge.n	800e99e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800e988:	b2da      	uxtb	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800e990:	b2db      	uxtb	r3, r3
 800e992:	4413      	add	r3, r2
 800e994:	b2db      	uxtb	r3, r3
 800e996:	b25a      	sxtb	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	dd07      	ble.n	800e9be <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800e9ba:	e000      	b.n	800e9be <u8g2_UpdateRefHeight+0xce>
    return;
 800e9bc:	bf00      	nop
  }  
}
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  return 0;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a04      	ldr	r2, [pc, #16]	; (800e9fc <u8g2_SetFontPosBaseline+0x1c>)
 800e9ec:	655a      	str	r2, [r3, #84]	; 0x54
}
 800e9ee:	bf00      	nop
 800e9f0:	370c      	adds	r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	0800e9c9 	.word	0x0800e9c9

0800ea00 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d00b      	beq.n	800ea2c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3368      	adds	r3, #104	; 0x68
 800ea1e:	6839      	ldr	r1, [r7, #0]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff fab1 	bl	800df88 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff ff62 	bl	800e8f0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800ea2c:	bf00      	nop
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	4611      	mov	r1, r2
 800ea40:	461a      	mov	r2, r3
 800ea42:	460b      	mov	r3, r1
 800ea44:	71fb      	strb	r3, [r7, #7]
 800ea46:	4613      	mov	r3, r2
 800ea48:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	781a      	ldrb	r2, [r3, #0]
 800ea58:	7dbb      	ldrb	r3, [r7, #22]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800ea5e:	7dfa      	ldrb	r2, [r7, #23]
 800ea60:	7dbb      	ldrb	r3, [r7, #22]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d90b      	bls.n	800ea7e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800ea66:	7dfa      	ldrb	r2, [r7, #23]
 800ea68:	79bb      	ldrb	r3, [r7, #6]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d205      	bcs.n	800ea7a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800ea6e:	79bb      	ldrb	r3, [r7, #6]
 800ea70:	75bb      	strb	r3, [r7, #22]
      b--;
 800ea72:	7dbb      	ldrb	r3, [r7, #22]
 800ea74:	3b01      	subs	r3, #1
 800ea76:	75bb      	strb	r3, [r7, #22]
 800ea78:	e001      	b.n	800ea7e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800ea7e:	7dfa      	ldrb	r2, [r7, #23]
 800ea80:	79bb      	ldrb	r3, [r7, #6]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d301      	bcc.n	800ea8a <u8g2_clip_intersection2+0x56>
    return 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	e01c      	b.n	800eac4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800ea8a:	7dba      	ldrb	r2, [r7, #22]
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d801      	bhi.n	800ea96 <u8g2_clip_intersection2+0x62>
    return 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	e016      	b.n	800eac4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800ea96:	7dfa      	ldrb	r2, [r7, #23]
 800ea98:	79fb      	ldrb	r3, [r7, #7]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d201      	bcs.n	800eaa2 <u8g2_clip_intersection2+0x6e>
    a = c;
 800ea9e:	79fb      	ldrb	r3, [r7, #7]
 800eaa0:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800eaa2:	7dba      	ldrb	r2, [r7, #22]
 800eaa4:	79bb      	ldrb	r3, [r7, #6]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d901      	bls.n	800eaae <u8g2_clip_intersection2+0x7a>
    b = d;
 800eaaa:	79bb      	ldrb	r3, [r7, #6]
 800eaac:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	7dfa      	ldrb	r2, [r7, #23]
 800eab2:	701a      	strb	r2, [r3, #0]
  b -= a;
 800eab4:	7dba      	ldrb	r2, [r7, #22]
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	7dba      	ldrb	r2, [r7, #22]
 800eac0:	701a      	strb	r2, [r3, #0]
  return 1;
 800eac2:	2301      	movs	r3, #1
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	371c      	adds	r7, #28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	4608      	mov	r0, r1
 800eada:	4611      	mov	r1, r2
 800eadc:	461a      	mov	r2, r3
 800eade:	4603      	mov	r3, r0
 800eae0:	70fb      	strb	r3, [r7, #3]
 800eae2:	460b      	mov	r3, r1
 800eae4:	70bb      	strb	r3, [r7, #2]
 800eae6:	4613      	mov	r3, r2
 800eae8:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eaf0:	78ba      	ldrb	r2, [r7, #2]
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800eafa:	7878      	ldrb	r0, [r7, #1]
 800eafc:	78ba      	ldrb	r2, [r7, #2]
 800eafe:	78f9      	ldrb	r1, [r7, #3]
 800eb00:	7e3b      	ldrb	r3, [r7, #24]
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	4603      	mov	r3, r0
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	47a0      	blx	r4
}
 800eb0a:	bf00      	nop
 800eb0c:	370c      	adds	r7, #12
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd90      	pop	{r4, r7, pc}

0800eb12 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800eb12:	b590      	push	{r4, r7, lr}
 800eb14:	b085      	sub	sp, #20
 800eb16:	af02      	add	r7, sp, #8
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	4608      	mov	r0, r1
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	461a      	mov	r2, r3
 800eb20:	4603      	mov	r3, r0
 800eb22:	70fb      	strb	r3, [r7, #3]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70bb      	strb	r3, [r7, #2]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d06d      	beq.n	800ec12 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800eb36:	787b      	ldrb	r3, [r7, #1]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d06a      	beq.n	800ec12 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800eb3c:	787b      	ldrb	r3, [r7, #1]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d918      	bls.n	800eb74 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800eb42:	7e3b      	ldrb	r3, [r7, #24]
 800eb44:	2b02      	cmp	r3, #2
 800eb46:	d109      	bne.n	800eb5c <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800eb48:	78fa      	ldrb	r2, [r7, #3]
 800eb4a:	787b      	ldrb	r3, [r7, #1]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	70fb      	strb	r3, [r7, #3]
	  x++;
 800eb52:	78fb      	ldrb	r3, [r7, #3]
 800eb54:	3301      	adds	r3, #1
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	70fb      	strb	r3, [r7, #3]
 800eb5a:	e00b      	b.n	800eb74 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800eb5c:	7e3b      	ldrb	r3, [r7, #24]
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d108      	bne.n	800eb74 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800eb62:	78ba      	ldrb	r2, [r7, #2]
 800eb64:	787b      	ldrb	r3, [r7, #1]
 800eb66:	1ad3      	subs	r3, r2, r3
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	70bb      	strb	r3, [r7, #2]
	  y++;
 800eb6c:	78bb      	ldrb	r3, [r7, #2]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800eb74:	7e3b      	ldrb	r3, [r7, #24]
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800eb7c:	7e3b      	ldrb	r3, [r7, #24]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d119      	bne.n	800ebb6 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800eb88:	78bb      	ldrb	r3, [r7, #2]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d838      	bhi.n	800ec00 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800eb94:	78bb      	ldrb	r3, [r7, #2]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d934      	bls.n	800ec04 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eba6:	1c79      	adds	r1, r7, #1
 800eba8:	1cf8      	adds	r0, r7, #3
 800ebaa:	f7ff ff43 	bl	800ea34 <u8g2_clip_intersection2>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d119      	bne.n	800ebe8 <u8g2_DrawHVLine+0xd6>
	  return;
 800ebb4:	e02d      	b.n	800ec12 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ebbc:	78fb      	ldrb	r3, [r7, #3]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d822      	bhi.n	800ec08 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ebc8:	78fb      	ldrb	r3, [r7, #3]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d91e      	bls.n	800ec0c <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ebda:	1c79      	adds	r1, r7, #1
 800ebdc:	1cb8      	adds	r0, r7, #2
 800ebde:	f7ff ff29 	bl	800ea34 <u8g2_clip_intersection2>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d013      	beq.n	800ec10 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebec:	689c      	ldr	r4, [r3, #8]
 800ebee:	78f9      	ldrb	r1, [r7, #3]
 800ebf0:	78ba      	ldrb	r2, [r7, #2]
 800ebf2:	7878      	ldrb	r0, [r7, #1]
 800ebf4:	7e3b      	ldrb	r3, [r7, #24]
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	47a0      	blx	r4
 800ebfe:	e008      	b.n	800ec12 <u8g2_DrawHVLine+0x100>
	  return;
 800ec00:	bf00      	nop
 800ec02:	e006      	b.n	800ec12 <u8g2_DrawHVLine+0x100>
	  return;
 800ec04:	bf00      	nop
 800ec06:	e004      	b.n	800ec12 <u8g2_DrawHVLine+0x100>
	  return;
 800ec08:	bf00      	nop
 800ec0a:	e002      	b.n	800ec12 <u8g2_DrawHVLine+0x100>
	  return;
 800ec0c:	bf00      	nop
 800ec0e:	e000      	b.n	800ec12 <u8g2_DrawHVLine+0x100>
	  return;
 800ec10:	bf00      	nop
    }
}
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd90      	pop	{r4, r7, pc}

0800ec18 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800ec18:	b490      	push	{r4, r7}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	4604      	mov	r4, r0
 800ec20:	4608      	mov	r0, r1
 800ec22:	4611      	mov	r1, r2
 800ec24:	461a      	mov	r2, r3
 800ec26:	4623      	mov	r3, r4
 800ec28:	71fb      	strb	r3, [r7, #7]
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	71bb      	strb	r3, [r7, #6]
 800ec2e:	460b      	mov	r3, r1
 800ec30:	717b      	strb	r3, [r7, #5]
 800ec32:	4613      	mov	r3, r2
 800ec34:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800ec36:	797a      	ldrb	r2, [r7, #5]
 800ec38:	79bb      	ldrb	r3, [r7, #6]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d20d      	bcs.n	800ec5a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800ec3e:	793a      	ldrb	r2, [r7, #4]
 800ec40:	79fb      	ldrb	r3, [r7, #7]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d901      	bls.n	800ec4a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800ec46:	2301      	movs	r3, #1
 800ec48:	e014      	b.n	800ec74 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800ec4a:	797a      	ldrb	r2, [r7, #5]
 800ec4c:	793b      	ldrb	r3, [r7, #4]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d901      	bls.n	800ec56 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800ec52:	2301      	movs	r3, #1
 800ec54:	e00e      	b.n	800ec74 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	e00c      	b.n	800ec74 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800ec5a:	793a      	ldrb	r2, [r7, #4]
 800ec5c:	79fb      	ldrb	r3, [r7, #7]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d907      	bls.n	800ec72 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800ec62:	797a      	ldrb	r2, [r7, #5]
 800ec64:	793b      	ldrb	r3, [r7, #4]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d901      	bls.n	800ec6e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e002      	b.n	800ec74 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e000      	b.n	800ec74 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800ec72:	2300      	movs	r3, #0
    }
  }
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bc90      	pop	{r4, r7}
 800ec7c:	4770      	bx	lr

0800ec7e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b082      	sub	sp, #8
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	4608      	mov	r0, r1
 800ec88:	4611      	mov	r1, r2
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	70fb      	strb	r3, [r7, #3]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70bb      	strb	r3, [r7, #2]
 800ec94:	4613      	mov	r3, r2
 800ec96:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800eca4:	7c3b      	ldrb	r3, [r7, #16]
 800eca6:	78ba      	ldrb	r2, [r7, #2]
 800eca8:	f7ff ffb6 	bl	800ec18 <u8g2_is_intersection_decision_tree>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <u8g2_IsIntersection+0x38>
    return 0; 
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	e00a      	b.n	800eccc <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800ecc2:	787b      	ldrb	r3, [r7, #1]
 800ecc4:	78fa      	ldrb	r2, [r7, #3]
 800ecc6:	f7ff ffa7 	bl	800ec18 <u8g2_is_intersection_decision_tree>
 800ecca:	4603      	mov	r3, r0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b087      	sub	sp, #28
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	4608      	mov	r0, r1
 800ecde:	4611      	mov	r1, r2
 800ece0:	461a      	mov	r2, r3
 800ece2:	4603      	mov	r3, r0
 800ece4:	70fb      	strb	r3, [r7, #3]
 800ece6:	460b      	mov	r3, r1
 800ece8:	70bb      	strb	r3, [r7, #2]
 800ecea:	4613      	mov	r3, r2
 800ecec:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800ecee:	78bb      	ldrb	r3, [r7, #2]
 800ecf0:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800ecf2:	7cfb      	ldrb	r3, [r7, #19]
 800ecf4:	f003 0307 	and.w	r3, r3, #7
 800ecf8:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800ecfe:	7c3a      	ldrb	r2, [r7, #16]
 800ed00:	7cfb      	ldrb	r3, [r7, #19]
 800ed02:	fa02 f303 	lsl.w	r3, r2, r3
 800ed06:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d801      	bhi.n	800ed1e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800ed1a:	7c3b      	ldrb	r3, [r7, #16]
 800ed1c:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d001      	beq.n	800ed2c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800ed28:	7c3b      	ldrb	r3, [r7, #16]
 800ed2a:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800ed2c:	78bb      	ldrb	r3, [r7, #2]
 800ed2e:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800ed30:	89fb      	ldrh	r3, [r7, #14]
 800ed32:	f023 0307 	bic.w	r3, r3, #7
 800ed36:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	7c1b      	ldrb	r3, [r3, #16]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	89fa      	ldrh	r2, [r7, #14]
 800ed42:	fb12 f303 	smulbb	r3, r2, r3
 800ed46:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4c:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800ed4e:	89fb      	ldrh	r3, [r7, #14]
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	4413      	add	r3, r2
 800ed54:	617b      	str	r3, [r7, #20]
  ptr += x;
 800ed56:	78fb      	ldrb	r3, [r7, #3]
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800ed5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d117      	bne.n	800ed96 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	781a      	ldrb	r2, [r3, #0]
 800ed6a:	7cbb      	ldrb	r3, [r7, #18]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	781a      	ldrb	r2, [r3, #0]
 800ed78:	7c7b      	ldrb	r3, [r7, #17]
 800ed7a:	4053      	eors	r3, r2
 800ed7c:	b2da      	uxtb	r2, r3
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	701a      	strb	r2, [r3, #0]
	ptr++;
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	3301      	adds	r3, #1
 800ed86:	617b      	str	r3, [r7, #20]
	len--;
 800ed88:	787b      	ldrb	r3, [r7, #1]
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800ed8e:	787b      	ldrb	r3, [r7, #1]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d1e8      	bne.n	800ed66 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800ed94:	e039      	b.n	800ee0a <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	781a      	ldrb	r2, [r3, #0]
 800ed9a:	7cbb      	ldrb	r3, [r7, #18]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	781a      	ldrb	r2, [r3, #0]
 800eda8:	7c7b      	ldrb	r3, [r7, #17]
 800edaa:	4053      	eors	r3, r2
 800edac:	b2da      	uxtb	r2, r3
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800edb2:	7cfb      	ldrb	r3, [r7, #19]
 800edb4:	3301      	adds	r3, #1
 800edb6:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800edb8:	7cfb      	ldrb	r3, [r7, #19]
 800edba:	f003 0307 	and.w	r3, r3, #7
 800edbe:	74fb      	strb	r3, [r7, #19]
      len--;
 800edc0:	787b      	ldrb	r3, [r7, #1]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800edc6:	7cfb      	ldrb	r3, [r7, #19]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d115      	bne.n	800edf8 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800edd2:	461a      	mov	r2, r3
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	4413      	add	r3, r2
 800edd8:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d801      	bhi.n	800ede8 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800ede4:	2301      	movs	r3, #1
 800ede6:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d008      	beq.n	800ee04 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800edf2:	2301      	movs	r3, #1
 800edf4:	747b      	strb	r3, [r7, #17]
 800edf6:	e005      	b.n	800ee04 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800edf8:	7cbb      	ldrb	r3, [r7, #18]
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800edfe:	7c7b      	ldrb	r3, [r7, #17]
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800ee04:	787b      	ldrb	r3, [r7, #1]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1c5      	bne.n	800ed96 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800ee0a:	bf00      	nop
 800ee0c:	371c      	adds	r7, #28
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr

0800ee16 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b082      	sub	sp, #8
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	22ff      	movs	r2, #255	; 0xff
 800ee32:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	22ff      	movs	r2, #255	; 0xff
 800ee3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	4798      	blx	r3
}
 800ee48:	bf00      	nop
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	683a      	ldr	r2, [r7, #0]
 800ee6a:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	68ba      	ldr	r2, [r7, #8]
 800ee70:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	79fa      	ldrb	r2, [r7, #7]
 800ee76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2201      	movs	r2, #1
 800ee96:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	69ba      	ldr	r2, [r7, #24]
 800eea6:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7ff ffaf 	bl	800ee16 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f7ff fd91 	bl	800e9e0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800eec6:	bf00      	nop
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800eece:	b480      	push	{r7}
 800eed0:	b085      	sub	sp, #20
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eee2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800eee4:	7bfb      	ldrb	r3, [r7, #15]
 800eee6:	00db      	lsls	r3, r3, #3
 800eee8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7bfa      	ldrb	r2, [r7, #15]
 800eeee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	7c1b      	ldrb	r3, [r3, #16]
 800eef6:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
 800eefa:	2b1f      	cmp	r3, #31
 800eefc:	d901      	bls.n	800ef02 <u8g2_update_dimension_common+0x34>
    t = 31;
 800eefe:	231f      	movs	r3, #31
 800ef00:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
 800ef04:	00db      	lsls	r3, r3, #3
 800ef06:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	7bfa      	ldrb	r2, [r7, #15]
 800ef0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef16:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	00db      	lsls	r3, r3, #3
 800ef1c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	7bfa      	ldrb	r2, [r7, #15]
 800ef22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef2c:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800ef36:	4413      	add	r3, r2
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	7c52      	ldrb	r2, [r2, #17]
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	dd06      	ble.n	800ef4e <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	7c5a      	ldrb	r2, [r3, #17]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ef72:	7bfb      	ldrb	r3, [r7, #15]
 800ef74:	4413      	add	r3, r2
 800ef76:	b2da      	uxtb	r2, r3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	22f0      	movs	r2, #240	; 0xf0
 800ef82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	8a9b      	ldrh	r3, [r3, #20]
 800ef8a:	2bf0      	cmp	r3, #240	; 0xf0
 800ef8c:	d805      	bhi.n	800ef9a <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	8a9b      	ldrh	r3, [r3, #20]
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	8adb      	ldrh	r3, [r3, #22]
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800efa6:	bf00      	nop
 800efa8:	3714      	adds	r7, #20
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b084      	sub	sp, #16
 800efb6:	af02      	add	r7, sp, #8
 800efb8:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	4603      	mov	r3, r0
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f7ff fe51 	bl	800ec7e <u8g2_IsIntersection>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d104      	bne.n	800efec <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800efea:	e03b      	b.n	800f064 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f000:	429a      	cmp	r2, r3
 800f002:	d205      	bcs.n	800f010 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d905      	bls.n	800f02c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f038:	429a      	cmp	r2, r3
 800f03a:	d205      	bcs.n	800f048 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f054:	429a      	cmp	r2, r3
 800f056:	d905      	bls.n	800f064 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800f064:	bf00      	nop
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7ff ff2a 	bl	800eece <u8g2_update_dimension_common>
}
 800f07a:	bf00      	nop
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b082      	sub	sp, #8
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7ff ff7b 	bl	800efb2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af02      	add	r7, sp, #8
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	4608      	mov	r0, r1
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	70fb      	strb	r3, [r7, #3]
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	70bb      	strb	r3, [r7, #2]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800f0de:	7878      	ldrb	r0, [r7, #1]
 800f0e0:	78ba      	ldrb	r2, [r7, #2]
 800f0e2:	78f9      	ldrb	r1, [r7, #3]
 800f0e4:	7c3b      	ldrb	r3, [r7, #16]
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7ff fcf0 	bl	800ead0 <u8g2_draw_hv_line_2dir>
}
 800f0f0:	bf00      	nop
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800f108:	bf00      	nop
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d002      	beq.n	800f12c <u8x8_ascii_next+0x18>
 800f126:	78fb      	ldrb	r3, [r7, #3]
 800f128:	2b0a      	cmp	r3, #10
 800f12a:	d102      	bne.n	800f132 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800f12c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f130:	e001      	b.n	800f136 <u8x8_ascii_next+0x22>
  return b;
 800f132:	78fb      	ldrb	r3, [r7, #3]
 800f134:	b29b      	uxth	r3, r3
}
 800f136:	4618      	mov	r0, r3
 800f138:	370c      	adds	r7, #12
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr

0800f142 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800f142:	b590      	push	{r4, r7, lr}
 800f144:	b083      	sub	sp, #12
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
 800f14a:	460b      	mov	r3, r1
 800f14c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	691c      	ldr	r4, [r3, #16]
 800f152:	78fa      	ldrb	r2, [r7, #3]
 800f154:	2300      	movs	r3, #0
 800f156:	2120      	movs	r1, #32
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	47a0      	blx	r4
 800f15c:	4603      	mov	r3, r0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	370c      	adds	r7, #12
 800f162:	46bd      	mov	sp, r7
 800f164:	bd90      	pop	{r4, r7, pc}

0800f166 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800f166:	b590      	push	{r4, r7, lr}
 800f168:	b085      	sub	sp, #20
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	460b      	mov	r3, r1
 800f170:	607a      	str	r2, [r7, #4]
 800f172:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	691c      	ldr	r4, [r3, #16]
 800f178:	7afa      	ldrb	r2, [r7, #11]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2117      	movs	r1, #23
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	47a0      	blx	r4
 800f182:	4603      	mov	r3, r0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3714      	adds	r7, #20
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd90      	pop	{r4, r7, pc}

0800f18c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800f198:	1cfb      	adds	r3, r7, #3
 800f19a:	461a      	mov	r2, r3
 800f19c:	2101      	movs	r1, #1
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff ffe1 	bl	800f166 <u8x8_byte_SendBytes>
 800f1a4:	4603      	mov	r3, r0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3708      	adds	r7, #8
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800f1ae:	b590      	push	{r4, r7, lr}
 800f1b0:	b083      	sub	sp, #12
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	68dc      	ldr	r4, [r3, #12]
 800f1be:	78fa      	ldrb	r2, [r7, #3]
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	2115      	movs	r1, #21
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	47a0      	blx	r4
 800f1c8:	4603      	mov	r3, r0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	370c      	adds	r7, #12
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd90      	pop	{r4, r7, pc}

0800f1d2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800f1d2:	b590      	push	{r4, r7, lr}
 800f1d4:	b083      	sub	sp, #12
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	460b      	mov	r3, r1
 800f1dc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	68dc      	ldr	r4, [r3, #12]
 800f1e2:	78fa      	ldrb	r2, [r7, #3]
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	2116      	movs	r1, #22
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	47a0      	blx	r4
 800f1ec:	4603      	mov	r3, r0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	370c      	adds	r7, #12
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd90      	pop	{r4, r7, pc}

0800f1f6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800f1f6:	b590      	push	{r4, r7, lr}
 800f1f8:	b085      	sub	sp, #20
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	60f8      	str	r0, [r7, #12]
 800f1fe:	460b      	mov	r3, r1
 800f200:	607a      	str	r2, [r7, #4]
 800f202:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	68dc      	ldr	r4, [r3, #12]
 800f208:	7afa      	ldrb	r2, [r7, #11]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2117      	movs	r1, #23
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	47a0      	blx	r4
 800f212:	4603      	mov	r3, r0
}
 800f214:	4618      	mov	r0, r3
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd90      	pop	{r4, r7, pc}

0800f21c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800f21c:	b590      	push	{r4, r7, lr}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	68dc      	ldr	r4, [r3, #12]
 800f228:	2300      	movs	r3, #0
 800f22a:	2200      	movs	r2, #0
 800f22c:	2118      	movs	r1, #24
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	47a0      	blx	r4
 800f232:	4603      	mov	r3, r0
}
 800f234:	4618      	mov	r0, r3
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd90      	pop	{r4, r7, pc}

0800f23c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800f23c:	b590      	push	{r4, r7, lr}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	68dc      	ldr	r4, [r3, #12]
 800f248:	2300      	movs	r3, #0
 800f24a:	2200      	movs	r2, #0
 800f24c:	2119      	movs	r1, #25
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	47a0      	blx	r4
 800f252:	4603      	mov	r3, r0
}
 800f254:	4618      	mov	r0, r3
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd90      	pop	{r4, r7, pc}

0800f25c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800f25c:	b590      	push	{r4, r7, lr}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	73fb      	strb	r3, [r7, #15]
    data++;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	3301      	adds	r3, #1
 800f270:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800f272:	7bfb      	ldrb	r3, [r7, #15]
 800f274:	2bfe      	cmp	r3, #254	; 0xfe
 800f276:	d031      	beq.n	800f2dc <u8x8_cad_SendSequence+0x80>
 800f278:	2bfe      	cmp	r3, #254	; 0xfe
 800f27a:	dc3d      	bgt.n	800f2f8 <u8x8_cad_SendSequence+0x9c>
 800f27c:	2b19      	cmp	r3, #25
 800f27e:	dc3b      	bgt.n	800f2f8 <u8x8_cad_SendSequence+0x9c>
 800f280:	2b18      	cmp	r3, #24
 800f282:	da23      	bge.n	800f2cc <u8x8_cad_SendSequence+0x70>
 800f284:	2b16      	cmp	r3, #22
 800f286:	dc02      	bgt.n	800f28e <u8x8_cad_SendSequence+0x32>
 800f288:	2b15      	cmp	r3, #21
 800f28a:	da03      	bge.n	800f294 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800f28c:	e034      	b.n	800f2f8 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800f28e:	2b17      	cmp	r3, #23
 800f290:	d00e      	beq.n	800f2b0 <u8x8_cad_SendSequence+0x54>
	return;
 800f292:	e031      	b.n	800f2f8 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	68dc      	ldr	r4, [r3, #12]
 800f29e:	7bba      	ldrb	r2, [r7, #14]
 800f2a0:	7bf9      	ldrb	r1, [r7, #15]
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	47a0      	blx	r4
	  data++;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	603b      	str	r3, [r7, #0]
	  break;
 800f2ae:	e022      	b.n	800f2f6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800f2b6:	f107 030e 	add.w	r3, r7, #14
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	2101      	movs	r1, #1
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7ff ff99 	bl	800f1f6 <u8x8_cad_SendData>
	  data++;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	603b      	str	r3, [r7, #0]
	  break;
 800f2ca:	e014      	b.n	800f2f6 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	68dc      	ldr	r4, [r3, #12]
 800f2d0:	7bf9      	ldrb	r1, [r7, #15]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	47a0      	blx	r4
	  break;
 800f2da:	e00c      	b.n	800f2f6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800f2e2:	7bbb      	ldrb	r3, [r7, #14]
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	2129      	movs	r1, #41	; 0x29
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f9d8 	bl	800f69e <u8x8_gpio_call>
	  data++;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	603b      	str	r3, [r7, #0]
	  break;
 800f2f4:	bf00      	nop
    cmd = *data;
 800f2f6:	e7b6      	b.n	800f266 <u8x8_cad_SendSequence+0xa>
	return;
 800f2f8:	bf00      	nop
    }
  }
}
 800f2fa:	3714      	adds	r7, #20
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd90      	pop	{r4, r7, pc}

0800f300 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800f300:	b590      	push	{r4, r7, lr}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	607b      	str	r3, [r7, #4]
 800f30a:	460b      	mov	r3, r1
 800f30c:	72fb      	strb	r3, [r7, #11]
 800f30e:	4613      	mov	r3, r2
 800f310:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800f312:	7afb      	ldrb	r3, [r7, #11]
 800f314:	3b14      	subs	r3, #20
 800f316:	2b05      	cmp	r3, #5
 800f318:	d82f      	bhi.n	800f37a <u8x8_cad_001+0x7a>
 800f31a:	a201      	add	r2, pc, #4	; (adr r2, 800f320 <u8x8_cad_001+0x20>)
 800f31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f320:	0800f369 	.word	0x0800f369
 800f324:	0800f339 	.word	0x0800f339
 800f328:	0800f34d 	.word	0x0800f34d
 800f32c:	0800f361 	.word	0x0800f361
 800f330:	0800f369 	.word	0x0800f369
 800f334:	0800f369 	.word	0x0800f369
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800f338:	2100      	movs	r1, #0
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f7ff ff01 	bl	800f142 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800f340:	7abb      	ldrb	r3, [r7, #10]
 800f342:	4619      	mov	r1, r3
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f7ff ff21 	bl	800f18c <u8x8_byte_SendByte>
      break;
 800f34a:	e018      	b.n	800f37e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800f34c:	2100      	movs	r1, #0
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f7ff fef7 	bl	800f142 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800f354:	7abb      	ldrb	r3, [r7, #10]
 800f356:	4619      	mov	r1, r3
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f7ff ff17 	bl	800f18c <u8x8_byte_SendByte>
      break;
 800f35e:	e00e      	b.n	800f37e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800f360:	2101      	movs	r1, #1
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f7ff feed 	bl	800f142 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	691c      	ldr	r4, [r3, #16]
 800f36c:	7aba      	ldrb	r2, [r7, #10]
 800f36e:	7af9      	ldrb	r1, [r7, #11]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	47a0      	blx	r4
 800f376:	4603      	mov	r3, r0
 800f378:	e002      	b.n	800f380 <u8x8_cad_001+0x80>
    default:
      return 0;
 800f37a:	2300      	movs	r3, #0
 800f37c:	e000      	b.n	800f380 <u8x8_cad_001+0x80>
  }
  return 1;
 800f37e:	2301      	movs	r3, #1
}
 800f380:	4618      	mov	r0, r3
 800f382:	3714      	adds	r7, #20
 800f384:	46bd      	mov	sp, r7
 800f386:	bd90      	pop	{r4, r7, pc}

0800f388 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b086      	sub	sp, #24
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	607b      	str	r3, [r7, #4]
 800f392:	460b      	mov	r3, r1
 800f394:	72fb      	strb	r3, [r7, #11]
 800f396:	4613      	mov	r3, r2
 800f398:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800f39a:	7afb      	ldrb	r3, [r7, #11]
 800f39c:	3b0b      	subs	r3, #11
 800f39e:	2b04      	cmp	r3, #4
 800f3a0:	f200 808a 	bhi.w	800f4b8 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800f3a4:	a201      	add	r2, pc, #4	; (adr r2, 800f3ac <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800f3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3aa:	bf00      	nop
 800f3ac:	0800f3c1 	.word	0x0800f3c1
 800f3b0:	0800f4b9 	.word	0x0800f4b9
 800f3b4:	0800f3db 	.word	0x0800f3db
 800f3b8:	0800f40d 	.word	0x0800f40d
 800f3bc:	0800f42d 	.word	0x0800f42d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800f3c0:	7abb      	ldrb	r3, [r7, #10]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d104      	bne.n	800f3d0 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800f3c6:	4940      	ldr	r1, [pc, #256]	; (800f4c8 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f7ff ff47 	bl	800f25c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800f3ce:	e075      	b.n	800f4bc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800f3d0:	493e      	ldr	r1, [pc, #248]	; (800f4cc <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f7ff ff42 	bl	800f25c <u8x8_cad_SendSequence>
      break;
 800f3d8:	e070      	b.n	800f4bc <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800f3da:	7abb      	ldrb	r3, [r7, #10]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d10a      	bne.n	800f3f6 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800f3e0:	493b      	ldr	r1, [pc, #236]	; (800f4d0 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f7ff ff3a 	bl	800f25c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	7c9a      	ldrb	r2, [r3, #18]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800f3f4:	e062      	b.n	800f4bc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800f3f6:	4937      	ldr	r1, [pc, #220]	; (800f4d4 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f7ff ff2f 	bl	800f25c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	7cda      	ldrb	r2, [r3, #19]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800f40a:	e057      	b.n	800f4bc <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	f7ff ff05 	bl	800f21c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800f412:	2181      	movs	r1, #129	; 0x81
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f7ff feca 	bl	800f1ae <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800f41a:	7abb      	ldrb	r3, [r7, #10]
 800f41c:	4619      	mov	r1, r3
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f7ff fed7 	bl	800f1d2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7ff ff09 	bl	800f23c <u8x8_cad_EndTransfer>
      break;
 800f42a:	e047      	b.n	800f4bc <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f7ff fef5 	bl	800f21c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	795b      	ldrb	r3, [r3, #5]
 800f436:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800f438:	7dfb      	ldrb	r3, [r7, #23]
 800f43a:	00db      	lsls	r3, r3, #3
 800f43c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f444:	7dfb      	ldrb	r3, [r7, #23]
 800f446:	4413      	add	r3, r2
 800f448:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800f44a:	2140      	movs	r1, #64	; 0x40
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f7ff feae 	bl	800f1ae <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800f452:	7dfb      	ldrb	r3, [r7, #23]
 800f454:	091b      	lsrs	r3, r3, #4
 800f456:	b2db      	uxtb	r3, r3
 800f458:	f043 0310 	orr.w	r3, r3, #16
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	4619      	mov	r1, r3
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f7ff fea4 	bl	800f1ae <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800f466:	7dfb      	ldrb	r3, [r7, #23]
 800f468:	f003 030f 	and.w	r3, r3, #15
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	4619      	mov	r1, r3
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f7ff feae 	bl	800f1d2 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	799b      	ldrb	r3, [r3, #6]
 800f47a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	4619      	mov	r1, r3
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff fea5 	bl	800f1d2 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	791b      	ldrb	r3, [r3, #4]
 800f48c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800f494:	7dbb      	ldrb	r3, [r7, #22]
 800f496:	00db      	lsls	r3, r3, #3
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	693a      	ldr	r2, [r7, #16]
 800f49c:	4619      	mov	r1, r3
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f7ff fea9 	bl	800f1f6 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800f4a4:	7abb      	ldrb	r3, [r7, #10]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800f4aa:	7abb      	ldrb	r3, [r7, #10]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d1eb      	bne.n	800f488 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f7ff fec3 	bl	800f23c <u8x8_cad_EndTransfer>
      break;
 800f4b6:	e001      	b.n	800f4bc <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	e000      	b.n	800f4be <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800f4bc:	2301      	movs	r3, #1
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3718      	adds	r7, #24
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	08016444 	.word	0x08016444
 800f4cc:	0801644c 	.word	0x0801644c
 800f4d0:	08016454 	.word	0x08016454
 800f4d4:	0801645c 	.word	0x0801645c

0800f4d8 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	607b      	str	r3, [r7, #4]
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	72fb      	strb	r3, [r7, #11]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800f4ea:	7aba      	ldrb	r2, [r7, #10]
 800f4ec:	7af9      	ldrb	r1, [r7, #11]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f7ff ff49 	bl	800f388 <u8x8_d_ssd1306_sh1106_generic>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d001      	beq.n	800f500 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e014      	b.n	800f52a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800f500:	7afb      	ldrb	r3, [r7, #11]
 800f502:	2b09      	cmp	r3, #9
 800f504:	d009      	beq.n	800f51a <u8x8_d_ssd1306_128x64_noname+0x42>
 800f506:	2b0a      	cmp	r3, #10
 800f508:	d10c      	bne.n	800f524 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f000 f82a 	bl	800f564 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800f510:	4908      	ldr	r1, [pc, #32]	; (800f534 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f7ff fea2 	bl	800f25c <u8x8_cad_SendSequence>
      break;
 800f518:	e006      	b.n	800f528 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800f51a:	4907      	ldr	r1, [pc, #28]	; (800f538 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f000 f80d 	bl	800f53c <u8x8_d_helper_display_setup_memory>
      break;
 800f522:	e001      	b.n	800f528 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800f524:	2300      	movs	r3, #0
 800f526:	e000      	b.n	800f52a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800f528:	2301      	movs	r3, #1
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	0801640c 	.word	0x0801640c
 800f538:	08016464 	.word	0x08016464

0800f53c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	7c9a      	ldrb	r2, [r3, #18]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800f558:	bf00      	nop
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800f564:	b590      	push	{r4, r7, lr}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	695c      	ldr	r4, [r3, #20]
 800f570:	2300      	movs	r3, #0
 800f572:	2200      	movs	r2, #0
 800f574:	2128      	movs	r1, #40	; 0x28
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	68dc      	ldr	r4, [r3, #12]
 800f57e:	2300      	movs	r3, #0
 800f580:	2200      	movs	r2, #0
 800f582:	2114      	movs	r1, #20
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800f588:	2201      	movs	r2, #1
 800f58a:	214b      	movs	r1, #75	; 0x4b
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 f886 	bl	800f69e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	791b      	ldrb	r3, [r3, #4]
 800f598:	461a      	mov	r2, r3
 800f59a:	2129      	movs	r1, #41	; 0x29
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 f87e 	bl	800f69e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	214b      	movs	r1, #75	; 0x4b
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 f879 	bl	800f69e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	791b      	ldrb	r3, [r3, #4]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	2129      	movs	r1, #41	; 0x29
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 f871 	bl	800f69e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800f5bc:	2201      	movs	r2, #1
 800f5be:	214b      	movs	r1, #75	; 0x4b
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 f86c 	bl	800f69e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	795b      	ldrb	r3, [r3, #5]
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	2129      	movs	r1, #41	; 0x29
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 f864 	bl	800f69e <u8x8_gpio_call>
}    
 800f5d6:	bf00      	nop
 800f5d8:	370c      	adds	r7, #12
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd90      	pop	{r4, r7, pc}

0800f5de <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800f5de:	b590      	push	{r4, r7, lr}
 800f5e0:	b085      	sub	sp, #20
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
 800f5e6:	4608      	mov	r0, r1
 800f5e8:	4611      	mov	r1, r2
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	70fb      	strb	r3, [r7, #3]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	70bb      	strb	r3, [r7, #2]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800f5f8:	78fb      	ldrb	r3, [r7, #3]
 800f5fa:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800f5fc:	78bb      	ldrb	r3, [r7, #2]
 800f5fe:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800f600:	787b      	ldrb	r3, [r7, #1]
 800f602:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	689c      	ldr	r4, [r3, #8]
 800f60c:	f107 0308 	add.w	r3, r7, #8
 800f610:	2201      	movs	r2, #1
 800f612:	210f      	movs	r1, #15
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	47a0      	blx	r4
 800f618:	4603      	mov	r3, r0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd90      	pop	{r4, r7, pc}

0800f622 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800f622:	b590      	push	{r4, r7, lr}
 800f624:	b083      	sub	sp, #12
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	689c      	ldr	r4, [r3, #8]
 800f62e:	2300      	movs	r3, #0
 800f630:	2200      	movs	r2, #0
 800f632:	2109      	movs	r1, #9
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	47a0      	blx	r4
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd90      	pop	{r4, r7, pc}

0800f640 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800f640:	b590      	push	{r4, r7, lr}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	689c      	ldr	r4, [r3, #8]
 800f64c:	2300      	movs	r3, #0
 800f64e:	2200      	movs	r2, #0
 800f650:	210a      	movs	r1, #10
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	47a0      	blx	r4
}
 800f656:	bf00      	nop
 800f658:	370c      	adds	r7, #12
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd90      	pop	{r4, r7, pc}

0800f65e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800f65e:	b590      	push	{r4, r7, lr}
 800f660:	b083      	sub	sp, #12
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	460b      	mov	r3, r1
 800f668:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	689c      	ldr	r4, [r3, #8]
 800f66e:	78fa      	ldrb	r2, [r7, #3]
 800f670:	2300      	movs	r3, #0
 800f672:	210b      	movs	r1, #11
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	47a0      	blx	r4
}
 800f678:	bf00      	nop
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd90      	pop	{r4, r7, pc}

0800f680 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800f680:	b590      	push	{r4, r7, lr}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	689c      	ldr	r4, [r3, #8]
 800f68c:	2300      	movs	r3, #0
 800f68e:	2200      	movs	r2, #0
 800f690:	2110      	movs	r1, #16
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	47a0      	blx	r4
}
 800f696:	bf00      	nop
 800f698:	370c      	adds	r7, #12
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd90      	pop	{r4, r7, pc}

0800f69e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800f69e:	b590      	push	{r4, r7, lr}
 800f6a0:	b083      	sub	sp, #12
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	70fb      	strb	r3, [r7, #3]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	695c      	ldr	r4, [r3, #20]
 800f6b2:	78ba      	ldrb	r2, [r7, #2]
 800f6b4:	78f9      	ldrb	r1, [r7, #3]
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	47a0      	blx	r4
}
 800f6bc:	bf00      	nop
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd90      	pop	{r4, r7, pc}

0800f6c4 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	607b      	str	r3, [r7, #4]
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	72fb      	strb	r3, [r7, #11]
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3714      	adds	r7, #20
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4a13      	ldr	r2, [pc, #76]	; (800f744 <u8x8_SetupDefaults+0x60>)
 800f6f6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a12      	ldr	r2, [pc, #72]	; (800f744 <u8x8_SetupDefaults+0x60>)
 800f6fc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a10      	ldr	r2, [pc, #64]	; (800f744 <u8x8_SetupDefaults+0x60>)
 800f702:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a0f      	ldr	r2, [pc, #60]	; (800f744 <u8x8_SetupDefaults+0x60>)
 800f708:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	22ff      	movs	r2, #255	; 0xff
 800f72c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	22ff      	movs	r2, #255	; 0xff
 800f734:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr
 800f744:	0800f6c5 	.word	0x0800f6c5

0800f748 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
 800f754:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f7ff ffc4 	bl	800f6e4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	68ba      	ldr	r2, [r7, #8]
 800f760:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	69ba      	ldr	r2, [r7, #24]
 800f772:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f7ff ff54 	bl	800f622 <u8x8_SetupMemory>
}
 800f77a:	bf00      	nop
 800f77c:	3710      	adds	r7, #16
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <LL_ADC_REG_SetSequencerRanks>:
{
 800f782:	b480      	push	{r7}
 800f784:	b089      	sub	sp, #36	; 0x24
 800f786:	af00      	add	r7, sp, #0
 800f788:	60f8      	str	r0, [r7, #12]
 800f78a:	60b9      	str	r1, [r7, #8]
 800f78c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	332c      	adds	r3, #44	; 0x2c
 800f792:	4619      	mov	r1, r3
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f79a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800f79e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f7a0:	69ba      	ldr	r2, [r7, #24]
 800f7a2:	fa92 f2a2 	rbit	r2, r2
 800f7a6:	617a      	str	r2, [r7, #20]
  return result;
 800f7a8:	697a      	ldr	r2, [r7, #20]
 800f7aa:	fab2 f282 	clz	r2, r2
 800f7ae:	b2d2      	uxtb	r2, r2
 800f7b0:	40d3      	lsrs	r3, r2
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	440b      	add	r3, r1
 800f7b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	f003 031f 	and.w	r3, r3, #31
 800f7c2:	211f      	movs	r1, #31
 800f7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800f7c8:	43db      	mvns	r3, r3
 800f7ca:	401a      	ands	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f003 011f 	and.w	r1, r3, #31
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	f003 031f 	and.w	r3, r3, #31
 800f7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f7dc:	431a      	orrs	r2, r3
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	601a      	str	r2, [r3, #0]
}
 800f7e2:	bf00      	nop
 800f7e4:	3724      	adds	r7, #36	; 0x24
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	431a      	orrs	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	609a      	str	r2, [r3, #8]
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <LL_ADC_SetChannelSamplingTime>:
{
 800f814:	b480      	push	{r7}
 800f816:	b08d      	sub	sp, #52	; 0x34
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	330c      	adds	r3, #12
 800f824:	4619      	mov	r1, r3
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f82c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f830:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f832:	69ba      	ldr	r2, [r7, #24]
 800f834:	fa92 f2a2 	rbit	r2, r2
 800f838:	617a      	str	r2, [r7, #20]
  return result;
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	fab2 f282 	clz	r2, r2
 800f840:	b2d2      	uxtb	r2, r2
 800f842:	40d3      	lsrs	r3, r2
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	440b      	add	r3, r1
 800f848:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 800f84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800f854:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800f858:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f85a:	6a39      	ldr	r1, [r7, #32]
 800f85c:	fa91 f1a1 	rbit	r1, r1
 800f860:	61f9      	str	r1, [r7, #28]
  return result;
 800f862:	69f9      	ldr	r1, [r7, #28]
 800f864:	fab1 f181 	clz	r1, r1
 800f868:	b2c9      	uxtb	r1, r1
 800f86a:	40cb      	lsrs	r3, r1
 800f86c:	2107      	movs	r1, #7
 800f86e:	fa01 f303 	lsl.w	r3, r1, r3
 800f872:	43db      	mvns	r3, r3
 800f874:	401a      	ands	r2, r3
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800f87c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800f880:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f884:	fa91 f1a1 	rbit	r1, r1
 800f888:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800f88a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f88c:	fab1 f181 	clz	r1, r1
 800f890:	b2c9      	uxtb	r1, r1
 800f892:	40cb      	lsrs	r3, r1
 800f894:	6879      	ldr	r1, [r7, #4]
 800f896:	fa01 f303 	lsl.w	r3, r1, r3
 800f89a:	431a      	orrs	r2, r3
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	601a      	str	r2, [r3, #0]
}
 800f8a0:	bf00      	nop
 800f8a2:	3734      	adds	r7, #52	; 0x34
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <LL_ADC_Enable>:
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	f043 0201 	orr.w	r2, r3, #1
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	609a      	str	r2, [r3, #8]
}
 800f8c0:	bf00      	nop
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	609a      	str	r2, [r3, #8]
}
 800f8e0:	bf00      	nop
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8f8:	b29b      	uxth	r3, r3
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f003 0302 	and.w	r3, r3, #2
 800f916:	2b02      	cmp	r3, #2
 800f918:	bf0c      	ite	eq
 800f91a:	2301      	moveq	r3, #1
 800f91c:	2300      	movne	r3, #0
 800f91e:	b2db      	uxtb	r3, r3
}
 800f920:	4618      	mov	r0, r3
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <adc_init>:

#define ADC1_CONVERSION_TIMEOUT 1000

static void adc1_init(void);

void adc_init(AdcID id) {
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	4603      	mov	r3, r0
 800f934:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d108      	bne.n	800f94e <adc_init+0x22>
	case AdcId1:
		adc1_init();
 800f93c:	f000 f85c 	bl	800f9f8 <adc1_init>
		LL_ADC_Enable(ADC1);
 800f940:	4808      	ldr	r0, [pc, #32]	; (800f964 <adc_init+0x38>)
 800f942:	f7ff ffb3 	bl	800f8ac <LL_ADC_Enable>
		hal_cli_printf("adc1 init");
 800f946:	4808      	ldr	r0, [pc, #32]	; (800f968 <adc_init+0x3c>)
 800f948:	f000 f99e 	bl	800fc88 <hal_cli_printf>
		break;
 800f94c:	e005      	b.n	800f95a <adc_init+0x2e>

	default:
		hal_cli_printf("adc%d not exist",id);
 800f94e:	79fb      	ldrb	r3, [r7, #7]
 800f950:	4619      	mov	r1, r3
 800f952:	4806      	ldr	r0, [pc, #24]	; (800f96c <adc_init+0x40>)
 800f954:	f000 f998 	bl	800fc88 <hal_cli_printf>
		break;
 800f958:	bf00      	nop
	}
}
 800f95a:	bf00      	nop
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	40012000 	.word	0x40012000
 800f968:	080154fc 	.word	0x080154fc
 800f96c:	08015508 	.word	0x08015508

0800f970 <hal_adc_getdata>:

bool hal_adc_getdata(AdcID id, uint32_t* data) {
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
 800f976:	4603      	mov	r3, r0
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	73fb      	strb	r3, [r7, #15]
	coretex_timer timer;
	timer = hal_get_delay_timer(ADC1_CONVERSION_TIMEOUT);
 800f97c:	463b      	mov	r3, r7
 800f97e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f982:	4618      	mov	r0, r3
 800f984:	f000 fc62 	bl	801024c <hal_get_delay_timer>
 800f988:	f107 0310 	add.w	r3, r7, #16
 800f98c:	463a      	mov	r2, r7
 800f98e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f992:	e883 0003 	stmia.w	r3, {r0, r1}

	switch(id) {
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d11d      	bne.n	800f9d8 <hal_adc_getdata+0x68>
		case AdcId1:
			LL_ADC_REG_StartConversionSWStart(ADC1);
 800f99c:	4813      	ldr	r0, [pc, #76]	; (800f9ec <hal_adc_getdata+0x7c>)
 800f99e:	f7ff ff95 	bl	800f8cc <LL_ADC_REG_StartConversionSWStart>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800f9a2:	e009      	b.n	800f9b8 <hal_adc_getdata+0x48>
				if(hal_delay_timer_is_expired(&timer))
 800f9a4:	f107 0310 	add.w	r3, r7, #16
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f000 fc75 	bl	8010298 <hal_delay_timer_is_expired>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d001      	beq.n	800f9b8 <hal_adc_getdata+0x48>
					return false;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	e015      	b.n	800f9e4 <hal_adc_getdata+0x74>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800f9b8:	480c      	ldr	r0, [pc, #48]	; (800f9ec <hal_adc_getdata+0x7c>)
 800f9ba:	f7ff ffa4 	bl	800f906 <LL_ADC_IsActiveFlag_EOCS>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d0ef      	beq.n	800f9a4 <hal_adc_getdata+0x34>
			}
			*data = LL_ADC_REG_ReadConversionData12(ADC1);
 800f9c4:	4809      	ldr	r0, [pc, #36]	; (800f9ec <hal_adc_getdata+0x7c>)
 800f9c6:	f7ff ff91 	bl	800f8ec <LL_ADC_REG_ReadConversionData12>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	601a      	str	r2, [r3, #0]
			break;
 800f9d2:	bf00      	nop
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
			return false;
			break;
	}

	return true;
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	e005      	b.n	800f9e4 <hal_adc_getdata+0x74>
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
 800f9d8:	2229      	movs	r2, #41	; 0x29
 800f9da:	4905      	ldr	r1, [pc, #20]	; (800f9f0 <hal_adc_getdata+0x80>)
 800f9dc:	4805      	ldr	r0, [pc, #20]	; (800f9f4 <hal_adc_getdata+0x84>)
 800f9de:	f000 f953 	bl	800fc88 <hal_cli_printf>
			return false;
 800f9e2:	2300      	movs	r3, #0
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3718      	adds	r7, #24
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	40012000 	.word	0x40012000
 800f9f0:	08015518 	.word	0x08015518
 800f9f4:	08015528 	.word	0x08015528

0800f9f8 <adc1_init>:

static void adc1_init(void)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08c      	sub	sp, #48	; 0x30
 800f9fc:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800f9fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa02:	2200      	movs	r2, #0
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	605a      	str	r2, [r3, #4]
 800fa08:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800fa0a:	f107 0310 	add.w	r3, r7, #16
 800fa0e:	2200      	movs	r2, #0
 800fa10:	601a      	str	r2, [r3, #0]
 800fa12:	605a      	str	r2, [r3, #4]
 800fa14:	609a      	str	r2, [r3, #8]
 800fa16:	60da      	str	r2, [r3, #12]
 800fa18:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800fa1a:	463b      	mov	r3, r7
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	601a      	str	r2, [r3, #0]
 800fa20:	605a      	str	r2, [r3, #4]
 800fa22:	609a      	str	r2, [r3, #8]
 800fa24:	60da      	str	r2, [r3, #12]

  hal_gpio_init(&gpio_adc1_channel7, GpioModeAnalog, GpioPullNo, GpioSpeedFreqLow);
 800fa26:	2300      	movs	r3, #0
 800fa28:	2200      	movs	r2, #0
 800fa2a:	2105      	movs	r1, #5
 800fa2c:	481e      	ldr	r0, [pc, #120]	; (800faa8 <adc1_init+0xb0>)
 800fa2e:	f000 fe81 	bl	8010734 <hal_gpio_init>

  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800fa32:	2300      	movs	r3, #0
 800fa34:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800fa36:	2300      	movs	r3, #0
 800fa38:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800fa3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa42:	4619      	mov	r1, r3
 800fa44:	4819      	ldr	r0, [pc, #100]	; (800faac <adc1_init+0xb4>)
 800fa46:	f7f3 fe33 	bl	80036b0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800fa52:	2300      	movs	r3, #0
 800fa54:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800fa56:	2300      	movs	r3, #0
 800fa58:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800fa5e:	f107 0310 	add.w	r3, r7, #16
 800fa62:	4619      	mov	r1, r3
 800fa64:	4811      	ldr	r0, [pc, #68]	; (800faac <adc1_init+0xb4>)
 800fa66:	f7f3 fe4f 	bl	8003708 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800fa6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fa6e:	480f      	ldr	r0, [pc, #60]	; (800faac <adc1_init+0xb4>)
 800fa70:	f7ff febd 	bl	800f7ee <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800fa74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fa78:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800fa7e:	463b      	mov	r3, r7
 800fa80:	4619      	mov	r1, r3
 800fa82:	480b      	ldr	r0, [pc, #44]	; (800fab0 <adc1_init+0xb8>)
 800fa84:	f7f3 fdcc 	bl	8003620 <LL_ADC_CommonInit>


  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800fa88:	4a0a      	ldr	r2, [pc, #40]	; (800fab4 <adc1_init+0xbc>)
 800fa8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fa8e:	4807      	ldr	r0, [pc, #28]	; (800faac <adc1_init+0xb4>)
 800fa90:	f7ff fe77 	bl	800f782 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 800fa94:	2200      	movs	r2, #0
 800fa96:	4907      	ldr	r1, [pc, #28]	; (800fab4 <adc1_init+0xbc>)
 800fa98:	4804      	ldr	r0, [pc, #16]	; (800faac <adc1_init+0xb4>)
 800fa9a:	f7ff febb 	bl	800f814 <LL_ADC_SetChannelSamplingTime>
}
 800fa9e:	bf00      	nop
 800faa0:	3730      	adds	r7, #48	; 0x30
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	080164c4 	.word	0x080164c4
 800faac:	40012000 	.word	0x40012000
 800fab0:	40012300 	.word	0x40012300
 800fab4:	03500007 	.word	0x03500007

0800fab8 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800fab8:	b480      	push	{r7}
 800faba:	b089      	sub	sp, #36	; 0x24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	330c      	adds	r3, #12
 800fac4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	e853 3f00 	ldrex	r3, [r3]
 800facc:	60bb      	str	r3, [r7, #8]
   return(result);
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f043 0310 	orr.w	r3, r3, #16
 800fad4:	61fb      	str	r3, [r7, #28]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	330c      	adds	r3, #12
 800fada:	69fa      	ldr	r2, [r7, #28]
 800fadc:	61ba      	str	r2, [r7, #24]
 800fade:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae0:	6979      	ldr	r1, [r7, #20]
 800fae2:	69ba      	ldr	r2, [r7, #24]
 800fae4:	e841 2300 	strex	r3, r2, [r1]
 800fae8:	613b      	str	r3, [r7, #16]
   return(result);
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1e7      	bne.n	800fac0 <LL_USART_EnableIT_IDLE+0x8>
}
 800faf0:	bf00      	nop
 800faf2:	bf00      	nop
 800faf4:	3724      	adds	r7, #36	; 0x24
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr

0800fafe <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800fafe:	b480      	push	{r7}
 800fb00:	b089      	sub	sp, #36	; 0x24
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3314      	adds	r3, #20
 800fb0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	e853 3f00 	ldrex	r3, [r3]
 800fb12:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb1a:	61fb      	str	r3, [r7, #28]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3314      	adds	r3, #20
 800fb20:	69fa      	ldr	r2, [r7, #28]
 800fb22:	61ba      	str	r2, [r7, #24]
 800fb24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb26:	6979      	ldr	r1, [r7, #20]
 800fb28:	69ba      	ldr	r2, [r7, #24]
 800fb2a:	e841 2300 	strex	r3, r2, [r1]
 800fb2e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1e7      	bne.n	800fb06 <LL_USART_EnableDMAReq_RX+0x8>
}
 800fb36:	bf00      	nop
 800fb38:	bf00      	nop
 800fb3a:	3724      	adds	r7, #36	; 0x24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800fb4e:	4a0c      	ldr	r2, [pc, #48]	; (800fb80 <LL_DMA_EnableStream+0x3c>)
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	4413      	add	r3, r2
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	461a      	mov	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	4908      	ldr	r1, [pc, #32]	; (800fb80 <LL_DMA_EnableStream+0x3c>)
 800fb60:	683a      	ldr	r2, [r7, #0]
 800fb62:	440a      	add	r2, r1
 800fb64:	7812      	ldrb	r2, [r2, #0]
 800fb66:	4611      	mov	r1, r2
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	440a      	add	r2, r1
 800fb6c:	f043 0301 	orr.w	r3, r3, #1
 800fb70:	6013      	str	r3, [r2, #0]
}
 800fb72:	bf00      	nop
 800fb74:	370c      	adds	r7, #12
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	0801647c 	.word	0x0801647c

0800fb84 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800fb90:	4a0d      	ldr	r2, [pc, #52]	; (800fbc8 <LL_DMA_SetDataLength+0x44>)
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	4413      	add	r3, r2
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	0c1b      	lsrs	r3, r3, #16
 800fba2:	041b      	lsls	r3, r3, #16
 800fba4:	4908      	ldr	r1, [pc, #32]	; (800fbc8 <LL_DMA_SetDataLength+0x44>)
 800fba6:	68ba      	ldr	r2, [r7, #8]
 800fba8:	440a      	add	r2, r1
 800fbaa:	7812      	ldrb	r2, [r2, #0]
 800fbac:	4611      	mov	r1, r2
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	440a      	add	r2, r1
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	604b      	str	r3, [r1, #4]
}
 800fbba:	bf00      	nop
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	0801647c 	.word	0x0801647c

0800fbcc <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800fbd8:	4a07      	ldr	r2, [pc, #28]	; (800fbf8 <LL_DMA_SetMemoryAddress+0x2c>)
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	4413      	add	r3, r2
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	60d3      	str	r3, [r2, #12]
}
 800fbec:	bf00      	nop
 800fbee:	3714      	adds	r7, #20
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr
 800fbf8:	0801647c 	.word	0x0801647c

0800fbfc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800fc08:	4a07      	ldr	r2, [pc, #28]	; (800fc28 <LL_DMA_SetPeriphAddress+0x2c>)
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	461a      	mov	r2, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4413      	add	r3, r2
 800fc16:	461a      	mov	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6093      	str	r3, [r2, #8]
}
 800fc1c:	bf00      	nop
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr
 800fc28:	0801647c 	.word	0x0801647c

0800fc2c <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 800fc32:	f7fb f8d1 	bl	800add8 <xTaskGetTickCount>
 800fc36:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	4a10      	ldr	r2, [pc, #64]	; (800fc7c <print_boottime+0x50>)
 800fc3c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc40:	099b      	lsrs	r3, r3, #6
 800fc42:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4a0d      	ldr	r2, [pc, #52]	; (800fc7c <print_boottime+0x50>)
 800fc48:	fba2 1203 	umull	r1, r2, r2, r3
 800fc4c:	0992      	lsrs	r2, r2, #6
 800fc4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fc52:	fb01 f202 	mul.w	r2, r1, r2
 800fc56:	1a9b      	subs	r3, r3, r2
 800fc58:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	68ba      	ldr	r2, [r7, #8]
 800fc5e:	4908      	ldr	r1, [pc, #32]	; (800fc80 <print_boottime+0x54>)
 800fc60:	4808      	ldr	r0, [pc, #32]	; (800fc84 <print_boottime+0x58>)
 800fc62:	f004 fee3 	bl	8014a2c <siprintf>
 800fc66:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	4905      	ldr	r1, [pc, #20]	; (800fc84 <print_boottime+0x58>)
 800fc6e:	2000      	movs	r0, #0
 800fc70:	f003 ff92 	bl	8013b98 <hal_uart_transfer>
}
 800fc74:	bf00      	nop
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	10624dd3 	.word	0x10624dd3
 800fc80:	08015538 	.word	0x08015538
 800fc84:	200049f8 	.word	0x200049f8

0800fc88 <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 800fc88:	b40f      	push	{r0, r1, r2, r3}
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 800fc90:	4b17      	ldr	r3, [pc, #92]	; (800fcf0 <hal_cli_printf+0x68>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fa fa57 	bl	800a14c <xQueueSemaphoreTake>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d11d      	bne.n	800fce0 <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 800fca4:	f7ff ffc2 	bl	800fc2c <print_boottime>

	va_start(valist, fmt);
 800fca8:	f107 0314 	add.w	r3, r7, #20
 800fcac:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 800fcae:	683a      	ldr	r2, [r7, #0]
 800fcb0:	6939      	ldr	r1, [r7, #16]
 800fcb2:	4810      	ldr	r0, [pc, #64]	; (800fcf4 <hal_cli_printf+0x6c>)
 800fcb4:	f004 fef0 	bl	8014a98 <vsiprintf>
 800fcb8:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	490d      	ldr	r1, [pc, #52]	; (800fcf4 <hal_cli_printf+0x6c>)
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	f003 ff69 	bl	8013b98 <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 800fcc6:	2202      	movs	r2, #2
 800fcc8:	490b      	ldr	r1, [pc, #44]	; (800fcf8 <hal_cli_printf+0x70>)
 800fcca:	2000      	movs	r0, #0
 800fccc:	f003 ff64 	bl	8013b98 <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 800fcd0:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <hal_cli_printf+0x68>)
 800fcd2:	6818      	ldr	r0, [r3, #0]
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	2100      	movs	r1, #0
 800fcda:	f7f9 ff43 	bl	8009b64 <xQueueGenericSend>
 800fcde:	e000      	b.n	800fce2 <hal_cli_printf+0x5a>
		return;
 800fce0:	bf00      	nop
}
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fcea:	b004      	add	sp, #16
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	200049f4 	.word	0x200049f4
 800fcf4:	200049f8 	.word	0x200049f8
 800fcf8:	08015544 	.word	0x08015544

0800fcfc <hal_cli_init>:

void hal_cli_init(void) {
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 800fd00:	4b17      	ldr	r3, [pc, #92]	; (800fd60 <hal_cli_init+0x64>)
 800fd02:	2200      	movs	r2, #0
 800fd04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 800fd08:	4b15      	ldr	r3, [pc, #84]	; (800fd60 <hal_cli_init+0x64>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 800fd10:	4b13      	ldr	r3, [pc, #76]	; (800fd60 <hal_cli_init+0x64>)
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 800fd18:	2001      	movs	r0, #1
 800fd1a:	f7f9 ff0b 	bl	8009b34 <xQueueCreateMutex>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	4a10      	ldr	r2, [pc, #64]	; (800fd64 <hal_cli_init+0x68>)
 800fd22:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 800fd24:	4b10      	ldr	r3, [pc, #64]	; (800fd68 <hal_cli_init+0x6c>)
 800fd26:	461a      	mov	r2, r3
 800fd28:	2102      	movs	r1, #2
 800fd2a:	4810      	ldr	r0, [pc, #64]	; (800fd6c <hal_cli_init+0x70>)
 800fd2c:	f7ff ff4e 	bl	800fbcc <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800fd30:	4a0f      	ldr	r2, [pc, #60]	; (800fd70 <hal_cli_init+0x74>)
 800fd32:	2102      	movs	r1, #2
 800fd34:	480d      	ldr	r0, [pc, #52]	; (800fd6c <hal_cli_init+0x70>)
 800fd36:	f7ff ff61 	bl	800fbfc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 800fd3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd3e:	2102      	movs	r1, #2
 800fd40:	480a      	ldr	r0, [pc, #40]	; (800fd6c <hal_cli_init+0x70>)
 800fd42:	f7ff ff1f 	bl	800fb84 <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 800fd46:	480b      	ldr	r0, [pc, #44]	; (800fd74 <hal_cli_init+0x78>)
 800fd48:	f7ff fed9 	bl	800fafe <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800fd4c:	2102      	movs	r1, #2
 800fd4e:	4807      	ldr	r0, [pc, #28]	; (800fd6c <hal_cli_init+0x70>)
 800fd50:	f7ff fef8 	bl	800fb44 <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 800fd54:	4807      	ldr	r0, [pc, #28]	; (800fd74 <hal_cli_init+0x78>)
 800fd56:	f7ff feaf 	bl	800fab8 <LL_USART_EnableIT_IDLE>
}
 800fd5a:	bf00      	nop
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	200049f8 	.word	0x200049f8
 800fd64:	200049f4 	.word	0x200049f4
 800fd68:	20004af8 	.word	0x20004af8
 800fd6c:	40026400 	.word	0x40026400
 800fd70:	40011004 	.word	0x40011004
 800fd74:	40011000 	.word	0x40011000

0800fd78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800fd80:	4b08      	ldr	r3, [pc, #32]	; (800fda4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fd82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd84:	4907      	ldr	r1, [pc, #28]	; (800fda4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4313      	orrs	r3, r2
 800fd8a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fd8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4013      	ands	r3, r2
 800fd94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fd96:	68fb      	ldr	r3, [r7, #12]
}
 800fd98:	bf00      	nop
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr
 800fda4:	40023800 	.word	0x40023800

0800fda8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b085      	sub	sp, #20
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800fdb0:	4b08      	ldr	r3, [pc, #32]	; (800fdd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800fdb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fdb4:	4907      	ldr	r1, [pc, #28]	; (800fdd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4313      	orrs	r3, r2
 800fdba:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800fdbc:	4b05      	ldr	r3, [pc, #20]	; (800fdd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800fdbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
}
 800fdc8:	bf00      	nop
 800fdca:	3714      	adds	r7, #20
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr
 800fdd4:	40023800 	.word	0x40023800

0800fdd8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800fde0:	4b08      	ldr	r3, [pc, #32]	; (800fe04 <LL_APB2_GRP1_EnableClock+0x2c>)
 800fde2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fde4:	4907      	ldr	r1, [pc, #28]	; (800fe04 <LL_APB2_GRP1_EnableClock+0x2c>)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4313      	orrs	r3, r2
 800fdea:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800fdec:	4b05      	ldr	r3, [pc, #20]	; (800fe04 <LL_APB2_GRP1_EnableClock+0x2c>)
 800fdee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	4013      	ands	r3, r2
 800fdf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
}
 800fdf8:	bf00      	nop
 800fdfa:	3714      	adds	r7, #20
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	40023800 	.word	0x40023800

0800fe08 <LL_RCC_HSE_Enable>:
{
 800fe08:	b480      	push	{r7}
 800fe0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800fe0c:	4b05      	ldr	r3, [pc, #20]	; (800fe24 <LL_RCC_HSE_Enable+0x1c>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a04      	ldr	r2, [pc, #16]	; (800fe24 <LL_RCC_HSE_Enable+0x1c>)
 800fe12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe16:	6013      	str	r3, [r2, #0]
}
 800fe18:	bf00      	nop
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
 800fe22:	bf00      	nop
 800fe24:	40023800 	.word	0x40023800

0800fe28 <LL_RCC_HSE_IsReady>:
{
 800fe28:	b480      	push	{r7}
 800fe2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800fe2c:	4b07      	ldr	r3, [pc, #28]	; (800fe4c <LL_RCC_HSE_IsReady+0x24>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fe38:	bf0c      	ite	eq
 800fe3a:	2301      	moveq	r3, #1
 800fe3c:	2300      	movne	r3, #0
 800fe3e:	b2db      	uxtb	r3, r3
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	40023800 	.word	0x40023800

0800fe50 <LL_RCC_SetSysClkSource>:
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800fe58:	4b06      	ldr	r3, [pc, #24]	; (800fe74 <LL_RCC_SetSysClkSource+0x24>)
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	f023 0203 	bic.w	r2, r3, #3
 800fe60:	4904      	ldr	r1, [pc, #16]	; (800fe74 <LL_RCC_SetSysClkSource+0x24>)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4313      	orrs	r3, r2
 800fe66:	608b      	str	r3, [r1, #8]
}
 800fe68:	bf00      	nop
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr
 800fe74:	40023800 	.word	0x40023800

0800fe78 <LL_RCC_GetSysClkSource>:
{
 800fe78:	b480      	push	{r7}
 800fe7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800fe7c:	4b04      	ldr	r3, [pc, #16]	; (800fe90 <LL_RCC_GetSysClkSource+0x18>)
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	f003 030c 	and.w	r3, r3, #12
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	40023800 	.word	0x40023800

0800fe94 <LL_RCC_SetAHBPrescaler>:
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800fe9c:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <LL_RCC_SetAHBPrescaler+0x24>)
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fea4:	4904      	ldr	r1, [pc, #16]	; (800feb8 <LL_RCC_SetAHBPrescaler+0x24>)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4313      	orrs	r3, r2
 800feaa:	608b      	str	r3, [r1, #8]
}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr
 800feb8:	40023800 	.word	0x40023800

0800febc <LL_RCC_SetAPB1Prescaler>:
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800fec4:	4b06      	ldr	r3, [pc, #24]	; (800fee0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fecc:	4904      	ldr	r1, [pc, #16]	; (800fee0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	608b      	str	r3, [r1, #8]
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	40023800 	.word	0x40023800

0800fee4 <LL_RCC_SetAPB2Prescaler>:
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800feec:	4b06      	ldr	r3, [pc, #24]	; (800ff08 <LL_RCC_SetAPB2Prescaler+0x24>)
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fef4:	4904      	ldr	r1, [pc, #16]	; (800ff08 <LL_RCC_SetAPB2Prescaler+0x24>)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4313      	orrs	r3, r2
 800fefa:	608b      	str	r3, [r1, #8]
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr
 800ff08:	40023800 	.word	0x40023800

0800ff0c <LL_RCC_SetTIMPrescaler>:
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800ff14:	4b07      	ldr	r3, [pc, #28]	; (800ff34 <LL_RCC_SetTIMPrescaler+0x28>)
 800ff16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ff1e:	4905      	ldr	r1, [pc, #20]	; (800ff34 <LL_RCC_SetTIMPrescaler+0x28>)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800ff28:	bf00      	nop
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr
 800ff34:	40023800 	.word	0x40023800

0800ff38 <LL_RCC_PLL_Enable>:
{
 800ff38:	b480      	push	{r7}
 800ff3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ff3c:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <LL_RCC_PLL_Enable+0x1c>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a04      	ldr	r2, [pc, #16]	; (800ff54 <LL_RCC_PLL_Enable+0x1c>)
 800ff42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ff46:	6013      	str	r3, [r2, #0]
}
 800ff48:	bf00      	nop
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	40023800 	.word	0x40023800

0800ff58 <LL_RCC_PLL_IsReady>:
{
 800ff58:	b480      	push	{r7}
 800ff5a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800ff5c:	4b07      	ldr	r3, [pc, #28]	; (800ff7c <LL_RCC_PLL_IsReady+0x24>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff68:	bf0c      	ite	eq
 800ff6a:	2301      	moveq	r3, #1
 800ff6c:	2300      	movne	r3, #0
 800ff6e:	b2db      	uxtb	r3, r3
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	40023800 	.word	0x40023800

0800ff80 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	607a      	str	r2, [r7, #4]
 800ff8c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800ff8e:	4b0d      	ldr	r3, [pc, #52]	; (800ffc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ff90:	685a      	ldr	r2, [r3, #4]
 800ff92:	4b0d      	ldr	r3, [pc, #52]	; (800ffc8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800ff94:	4013      	ands	r3, r2
 800ff96:	68f9      	ldr	r1, [r7, #12]
 800ff98:	68ba      	ldr	r2, [r7, #8]
 800ff9a:	4311      	orrs	r1, r2
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	0192      	lsls	r2, r2, #6
 800ffa0:	430a      	orrs	r2, r1
 800ffa2:	4908      	ldr	r1, [pc, #32]	; (800ffc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800ffa8:	4b06      	ldr	r3, [pc, #24]	; (800ffc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ffb0:	4904      	ldr	r1, [pc, #16]	; (800ffc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	604b      	str	r3, [r1, #4]
}
 800ffb8:	bf00      	nop
 800ffba:	3714      	adds	r7, #20
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr
 800ffc4:	40023800 	.word	0x40023800
 800ffc8:	ffbf8000 	.word	0xffbf8000

0800ffcc <LL_RCC_PLL_ConfigDomain_48M>:
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
 800ffd8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800ffda:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800ffdc:	685a      	ldr	r2, [r3, #4]
 800ffde:	4b0a      	ldr	r3, [pc, #40]	; (8010008 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	68f9      	ldr	r1, [r7, #12]
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	4311      	orrs	r1, r2
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	0192      	lsls	r2, r2, #6
 800ffec:	4311      	orrs	r1, r2
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	430a      	orrs	r2, r1
 800fff2:	4904      	ldr	r1, [pc, #16]	; (8010004 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800fff4:	4313      	orrs	r3, r2
 800fff6:	604b      	str	r3, [r1, #4]
}
 800fff8:	bf00      	nop
 800fffa:	3714      	adds	r7, #20
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	40023800 	.word	0x40023800
 8010008:	f0bf8000 	.word	0xf0bf8000

0801000c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8010014:	4b06      	ldr	r3, [pc, #24]	; (8010030 <LL_FLASH_SetLatency+0x24>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f023 020f 	bic.w	r2, r3, #15
 801001c:	4904      	ldr	r1, [pc, #16]	; (8010030 <LL_FLASH_SetLatency+0x24>)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4313      	orrs	r3, r2
 8010022:	600b      	str	r3, [r1, #0]
}
 8010024:	bf00      	nop
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	40023c00 	.word	0x40023c00

08010034 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8010034:	b480      	push	{r7}
 8010036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8010038:	4b04      	ldr	r3, [pc, #16]	; (801004c <LL_FLASH_GetLatency+0x18>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f003 030f 	and.w	r3, r3, #15
}
 8010040:	4618      	mov	r0, r3
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr
 801004a:	bf00      	nop
 801004c:	40023c00 	.word	0x40023c00

08010050 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8010050:	b480      	push	{r7}
 8010052:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8010054:	4b05      	ldr	r3, [pc, #20]	; (801006c <LL_PWR_EnableOverDriveMode+0x1c>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a04      	ldr	r2, [pc, #16]	; (801006c <LL_PWR_EnableOverDriveMode+0x1c>)
 801005a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801005e:	6013      	str	r3, [r2, #0]
}
 8010060:	bf00      	nop
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	40007000 	.word	0x40007000

08010070 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8010078:	4b06      	ldr	r3, [pc, #24]	; (8010094 <LL_PWR_SetRegulVoltageScaling+0x24>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010080:	4904      	ldr	r1, [pc, #16]	; (8010094 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4313      	orrs	r3, r2
 8010086:	600b      	str	r3, [r1, #0]
}
 8010088:	bf00      	nop
 801008a:	370c      	adds	r7, #12
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr
 8010094:	40007000 	.word	0x40007000

08010098 <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 8010098:	b580      	push	{r7, lr}
 801009a:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 801009c:	2001      	movs	r0, #1
 801009e:	f7ff fe6b 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80100a2:	2002      	movs	r0, #2
 80100a4:	f7ff fe68 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80100a8:	2004      	movs	r0, #4
 80100aa:	f7ff fe65 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80100ae:	2008      	movs	r0, #8
 80100b0:	f7ff fe62 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80100b4:	2010      	movs	r0, #16
 80100b6:	f7ff fe5f 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80100ba:	2020      	movs	r0, #32
 80100bc:	f7ff fe5c 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80100c0:	2040      	movs	r0, #64	; 0x40
 80100c2:	f7ff fe59 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80100c6:	2080      	movs	r0, #128	; 0x80
 80100c8:	f7ff fe56 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80100cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80100d0:	f7ff fe52 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80100d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80100d8:	f7ff fe4e 	bl	800fd78 <LL_AHB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80100dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80100e0:	f7ff fe7a 	bl	800fdd8 <LL_APB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80100e4:	2004      	movs	r0, #4
 80100e6:	f7ff fe5f 	bl	800fda8 <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80100ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80100ee:	f7ff fe5b 	bl	800fda8 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 80100f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80100f6:	f7ff fe57 	bl	800fda8 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80100fa:	2010      	movs	r0, #16
 80100fc:	f7ff fe6c 	bl	800fdd8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8010100:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010104:	f7ff fe50 	bl	800fda8 <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8010108:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801010c:	f7ff fe4c 	bl	800fda8 <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8010110:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010114:	f7ff fe60 	bl	800fdd8 <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 8010118:	bf00      	nop
 801011a:	bd80      	pop	{r7, pc}

0801011c <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8010122:	2005      	movs	r0, #5
 8010124:	f7ff ff72 	bl	801000c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8010128:	bf00      	nop
 801012a:	f7ff ff83 	bl	8010034 <LL_FLASH_GetLatency>
 801012e:	4603      	mov	r3, r0
 8010130:	2b05      	cmp	r3, #5
 8010132:	d1fa      	bne.n	801012a <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8010134:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8010138:	f7ff ff9a 	bl	8010070 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 801013c:	f7ff ff88 	bl	8010050 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 8010140:	f7ff fe62 	bl	800fe08 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8010144:	bf00      	nop
 8010146:	f7ff fe6f 	bl	800fe28 <LL_RCC_HSE_IsReady>
 801014a:	4603      	mov	r3, r0
 801014c:	2b01      	cmp	r3, #1
 801014e:	d1fa      	bne.n	8010146 <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 8010150:	2300      	movs	r3, #0
 8010152:	22b4      	movs	r2, #180	; 0xb4
 8010154:	2104      	movs	r1, #4
 8010156:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801015a:	f7ff ff11 	bl	800ff80 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 801015e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010162:	22b4      	movs	r2, #180	; 0xb4
 8010164:	2104      	movs	r1, #4
 8010166:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801016a:	f7ff ff2f 	bl	800ffcc <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 801016e:	f7ff fee3 	bl	800ff38 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8010172:	bf00      	nop
 8010174:	f7ff fef0 	bl	800ff58 <LL_RCC_PLL_IsReady>
 8010178:	4603      	mov	r3, r0
 801017a:	2b01      	cmp	r3, #1
 801017c:	d1fa      	bne.n	8010174 <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 801017e:	2000      	movs	r0, #0
 8010180:	f7ff fe88 	bl	800fe94 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8010184:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8010188:	f7ff fe98 	bl	800febc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 801018c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010190:	f7ff fea8 	bl	800fee4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8010194:	2002      	movs	r0, #2
 8010196:	f7ff fe5b 	bl	800fe50 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 801019a:	bf00      	nop
 801019c:	f7ff fe6c 	bl	800fe78 <LL_RCC_GetSysClkSource>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b08      	cmp	r3, #8
 80101a4:	d1fa      	bne.n	801019c <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 80101a6:	4808      	ldr	r0, [pc, #32]	; (80101c8 <hal_clock_init_early+0xac>)
 80101a8:	f7f5 f882 	bl	80052b0 <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80101ac:	463b      	mov	r3, r7
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7f3 fe1a 	bl	8003de8 <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80101b4:	2005      	movs	r0, #5
 80101b6:	f002 ff03 	bl	8012fc0 <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80101ba:	2000      	movs	r0, #0
 80101bc:	f7ff fea6 	bl	800ff0c <LL_RCC_SetTIMPrescaler>
}
 80101c0:	bf00      	nop
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	0aba9500 	.word	0x0aba9500

080101cc <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 80101cc:	b480      	push	{r7}
 80101ce:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80101d0:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <hal_dwt_init_early+0x2c>)
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	4a08      	ldr	r2, [pc, #32]	; (80101f8 <hal_dwt_init_early+0x2c>)
 80101d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80101da:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80101dc:	4b07      	ldr	r3, [pc, #28]	; (80101fc <hal_dwt_init_early+0x30>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a06      	ldr	r2, [pc, #24]	; (80101fc <hal_dwt_init_early+0x30>)
 80101e2:	f043 0301 	orr.w	r3, r3, #1
 80101e6:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 80101e8:	4b04      	ldr	r3, [pc, #16]	; (80101fc <hal_dwt_init_early+0x30>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	605a      	str	r2, [r3, #4]
}
 80101ee:	bf00      	nop
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	e000edf0 	.word	0xe000edf0
 80101fc:	e0001000 	.word	0xe0001000

08010200 <hal_delay_us>:
#include "delay.h"
#include <stdbool.h>

void hal_delay_us(uint32_t microseconds) {
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8010208:	4b0d      	ldr	r3, [pc, #52]	; (8010240 <hal_delay_us+0x40>)
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	60fb      	str	r3, [r7, #12]
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
 801020e:	4b0d      	ldr	r3, [pc, #52]	; (8010244 <hal_delay_us+0x44>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	4a0d      	ldr	r2, [pc, #52]	; (8010248 <hal_delay_us+0x48>)
 8010214:	fba2 2303 	umull	r2, r3, r2, r3
 8010218:	0c9a      	lsrs	r2, r3, #18
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	fb02 f303 	mul.w	r3, r2, r3
 8010220:	60bb      	str	r3, [r7, #8]
    while((DWT->CYCCNT - start) < time_ticks) {
 8010222:	bf00      	nop
 8010224:	4b06      	ldr	r3, [pc, #24]	; (8010240 <hal_delay_us+0x40>)
 8010226:	685a      	ldr	r2, [r3, #4]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	68ba      	ldr	r2, [r7, #8]
 801022e:	429a      	cmp	r2, r3
 8010230:	d8f8      	bhi.n	8010224 <hal_delay_us+0x24>
    };
}
 8010232:	bf00      	nop
 8010234:	bf00      	nop
 8010236:	3714      	adds	r7, #20
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr
 8010240:	e0001000 	.word	0xe0001000
 8010244:	20000014 	.word	0x20000014
 8010248:	431bde83 	.word	0x431bde83

0801024c <hal_get_delay_timer>:

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 8010256:	4b0d      	ldr	r3, [pc, #52]	; (801028c <hal_get_delay_timer+0x40>)
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000) * timeout;
 801025c:	4b0c      	ldr	r3, [pc, #48]	; (8010290 <hal_get_delay_timer+0x44>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4a0c      	ldr	r2, [pc, #48]	; (8010294 <hal_get_delay_timer+0x48>)
 8010262:	fba2 2303 	umull	r2, r3, r2, r3
 8010266:	099b      	lsrs	r3, r3, #6
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	fb02 f303 	mul.w	r3, r2, r3
 801026e:	60fb      	str	r3, [r7, #12]
	return tmp;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	461a      	mov	r2, r3
 8010274:	f107 0308 	add.w	r3, r7, #8
 8010278:	e893 0003 	ldmia.w	r3, {r0, r1}
 801027c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	3714      	adds	r7, #20
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	e0001000 	.word	0xe0001000
 8010290:	20000014 	.word	0x20000014
 8010294:	10624dd3 	.word	0x10624dd3

08010298 <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 80102a0:	4b08      	ldr	r3, [pc, #32]	; (80102c4 <hal_delay_timer_is_expired+0x2c>)
 80102a2:	685a      	ldr	r2, [r3, #4]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	1ad2      	subs	r2, r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	bf2c      	ite	cs
 80102b2:	2301      	movcs	r3, #1
 80102b4:	2300      	movcc	r3, #0
 80102b6:	b2db      	uxtb	r3, r3
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr
 80102c4:	e0001000 	.word	0xe0001000

080102c8 <LL_GPIO_SetPinMode>:
{
 80102c8:	b480      	push	{r7}
 80102ca:	b089      	sub	sp, #36	; 0x24
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	fa93 f3a3 	rbit	r3, r3
 80102e2:	613b      	str	r3, [r7, #16]
  return result;
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	fab3 f383 	clz	r3, r3
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	005b      	lsls	r3, r3, #1
 80102ee:	2103      	movs	r1, #3
 80102f0:	fa01 f303 	lsl.w	r3, r1, r3
 80102f4:	43db      	mvns	r3, r3
 80102f6:	401a      	ands	r2, r3
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	fa93 f3a3 	rbit	r3, r3
 8010302:	61bb      	str	r3, [r7, #24]
  return result;
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	fab3 f383 	clz	r3, r3
 801030a:	b2db      	uxtb	r3, r3
 801030c:	005b      	lsls	r3, r3, #1
 801030e:	6879      	ldr	r1, [r7, #4]
 8010310:	fa01 f303 	lsl.w	r3, r1, r3
 8010314:	431a      	orrs	r2, r3
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	601a      	str	r2, [r3, #0]
}
 801031a:	bf00      	nop
 801031c:	3724      	adds	r7, #36	; 0x24
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <LL_GPIO_SetPinOutputType>:
{
 8010326:	b480      	push	{r7}
 8010328:	b085      	sub	sp, #20
 801032a:	af00      	add	r7, sp, #0
 801032c:	60f8      	str	r0, [r7, #12]
 801032e:	60b9      	str	r1, [r7, #8]
 8010330:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	685a      	ldr	r2, [r3, #4]
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	43db      	mvns	r3, r3
 801033a:	401a      	ands	r2, r3
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	6879      	ldr	r1, [r7, #4]
 8010340:	fb01 f303 	mul.w	r3, r1, r3
 8010344:	431a      	orrs	r2, r3
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	605a      	str	r2, [r3, #4]
}
 801034a:	bf00      	nop
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <LL_GPIO_SetPinSpeed>:
{
 8010356:	b480      	push	{r7}
 8010358:	b089      	sub	sp, #36	; 0x24
 801035a:	af00      	add	r7, sp, #0
 801035c:	60f8      	str	r0, [r7, #12]
 801035e:	60b9      	str	r1, [r7, #8]
 8010360:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	689a      	ldr	r2, [r3, #8]
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	fa93 f3a3 	rbit	r3, r3
 8010370:	613b      	str	r3, [r7, #16]
  return result;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	fab3 f383 	clz	r3, r3
 8010378:	b2db      	uxtb	r3, r3
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	2103      	movs	r1, #3
 801037e:	fa01 f303 	lsl.w	r3, r1, r3
 8010382:	43db      	mvns	r3, r3
 8010384:	401a      	ands	r2, r3
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	fa93 f3a3 	rbit	r3, r3
 8010390:	61bb      	str	r3, [r7, #24]
  return result;
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	fab3 f383 	clz	r3, r3
 8010398:	b2db      	uxtb	r3, r3
 801039a:	005b      	lsls	r3, r3, #1
 801039c:	6879      	ldr	r1, [r7, #4]
 801039e:	fa01 f303 	lsl.w	r3, r1, r3
 80103a2:	431a      	orrs	r2, r3
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	609a      	str	r2, [r3, #8]
}
 80103a8:	bf00      	nop
 80103aa:	3724      	adds	r7, #36	; 0x24
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <LL_GPIO_SetPinPull>:
{
 80103b4:	b480      	push	{r7}
 80103b6:	b089      	sub	sp, #36	; 0x24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	68da      	ldr	r2, [r3, #12]
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	fa93 f3a3 	rbit	r3, r3
 80103ce:	613b      	str	r3, [r7, #16]
  return result;
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	fab3 f383 	clz	r3, r3
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	005b      	lsls	r3, r3, #1
 80103da:	2103      	movs	r1, #3
 80103dc:	fa01 f303 	lsl.w	r3, r1, r3
 80103e0:	43db      	mvns	r3, r3
 80103e2:	401a      	ands	r2, r3
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	fa93 f3a3 	rbit	r3, r3
 80103ee:	61bb      	str	r3, [r7, #24]
  return result;
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	fab3 f383 	clz	r3, r3
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	005b      	lsls	r3, r3, #1
 80103fa:	6879      	ldr	r1, [r7, #4]
 80103fc:	fa01 f303 	lsl.w	r3, r1, r3
 8010400:	431a      	orrs	r2, r3
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	60da      	str	r2, [r3, #12]
}
 8010406:	bf00      	nop
 8010408:	3724      	adds	r7, #36	; 0x24
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <LL_GPIO_SetAFPin_0_7>:
{
 8010412:	b480      	push	{r7}
 8010414:	b089      	sub	sp, #36	; 0x24
 8010416:	af00      	add	r7, sp, #0
 8010418:	60f8      	str	r0, [r7, #12]
 801041a:	60b9      	str	r1, [r7, #8]
 801041c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	6a1a      	ldr	r2, [r3, #32]
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	fa93 f3a3 	rbit	r3, r3
 801042c:	613b      	str	r3, [r7, #16]
  return result;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	fab3 f383 	clz	r3, r3
 8010434:	b2db      	uxtb	r3, r3
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	210f      	movs	r1, #15
 801043a:	fa01 f303 	lsl.w	r3, r1, r3
 801043e:	43db      	mvns	r3, r3
 8010440:	401a      	ands	r2, r3
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	fa93 f3a3 	rbit	r3, r3
 801044c:	61bb      	str	r3, [r7, #24]
  return result;
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	fab3 f383 	clz	r3, r3
 8010454:	b2db      	uxtb	r3, r3
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	6879      	ldr	r1, [r7, #4]
 801045a:	fa01 f303 	lsl.w	r3, r1, r3
 801045e:	431a      	orrs	r2, r3
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	621a      	str	r2, [r3, #32]
}
 8010464:	bf00      	nop
 8010466:	3724      	adds	r7, #36	; 0x24
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <LL_GPIO_SetAFPin_8_15>:
{
 8010470:	b480      	push	{r7}
 8010472:	b089      	sub	sp, #36	; 0x24
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	0a1b      	lsrs	r3, r3, #8
 8010484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	fa93 f3a3 	rbit	r3, r3
 801048c:	613b      	str	r3, [r7, #16]
  return result;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	fab3 f383 	clz	r3, r3
 8010494:	b2db      	uxtb	r3, r3
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	210f      	movs	r1, #15
 801049a:	fa01 f303 	lsl.w	r3, r1, r3
 801049e:	43db      	mvns	r3, r3
 80104a0:	401a      	ands	r2, r3
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	0a1b      	lsrs	r3, r3, #8
 80104a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	fa93 f3a3 	rbit	r3, r3
 80104ae:	61bb      	str	r3, [r7, #24]
  return result;
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	fab3 f383 	clz	r3, r3
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	fa01 f303 	lsl.w	r3, r1, r3
 80104c0:	431a      	orrs	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80104c6:	bf00      	nop
 80104c8:	3724      	adds	r7, #36	; 0x24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr
	...

080104d4 <LL_SYSCFG_SetEXTISource>:
{
 80104d4:	b480      	push	{r7}
 80104d6:	b085      	sub	sp, #20
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80104de:	4a13      	ldr	r2, [pc, #76]	; (801052c <LL_SYSCFG_SetEXTISource+0x58>)
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	3302      	adds	r3, #2
 80104e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	0c1b      	lsrs	r3, r3, #16
 80104ee:	43db      	mvns	r3, r3
 80104f0:	ea02 0103 	and.w	r1, r2, r3
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	0c1b      	lsrs	r3, r3, #16
 80104f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	fa93 f3a3 	rbit	r3, r3
 8010500:	60bb      	str	r3, [r7, #8]
  return result;
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	fab3 f383 	clz	r3, r3
 8010508:	b2db      	uxtb	r3, r3
 801050a:	461a      	mov	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	fa03 f202 	lsl.w	r2, r3, r2
 8010512:	4806      	ldr	r0, [pc, #24]	; (801052c <LL_SYSCFG_SetEXTISource+0x58>)
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	b2db      	uxtb	r3, r3
 8010518:	430a      	orrs	r2, r1
 801051a:	3302      	adds	r3, #2
 801051c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8010520:	bf00      	nop
 8010522:	3714      	adds	r7, #20
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr
 801052c:	40013800 	.word	0x40013800

08010530 <LL_SYSCFG_GetEXTISource>:
{
 8010530:	b480      	push	{r7}
 8010532:	b085      	sub	sp, #20
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8010538:	4a0d      	ldr	r2, [pc, #52]	; (8010570 <LL_SYSCFG_GetEXTISource+0x40>)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	b2db      	uxtb	r3, r3
 801053e:	3302      	adds	r3, #2
 8010540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	0c1b      	lsrs	r3, r3, #16
 8010548:	4013      	ands	r3, r2
 801054a:	687a      	ldr	r2, [r7, #4]
 801054c:	0c12      	lsrs	r2, r2, #16
 801054e:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	fa92 f2a2 	rbit	r2, r2
 8010556:	60ba      	str	r2, [r7, #8]
  return result;
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	fab2 f282 	clz	r2, r2
 801055e:	b2d2      	uxtb	r2, r2
 8010560:	40d3      	lsrs	r3, r2
}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	40013800 	.word	0x40013800

08010574 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 801057c:	4b05      	ldr	r3, [pc, #20]	; (8010594 <LL_EXTI_EnableIT_0_31+0x20>)
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	4904      	ldr	r1, [pc, #16]	; (8010594 <LL_EXTI_EnableIT_0_31+0x20>)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4313      	orrs	r3, r2
 8010586:	600b      	str	r3, [r1, #0]
}
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	40013c00 	.word	0x40013c00

08010598 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80105a0:	4b06      	ldr	r3, [pc, #24]	; (80105bc <LL_EXTI_DisableIT_0_31+0x24>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	43db      	mvns	r3, r3
 80105a8:	4904      	ldr	r1, [pc, #16]	; (80105bc <LL_EXTI_DisableIT_0_31+0x24>)
 80105aa:	4013      	ands	r3, r2
 80105ac:	600b      	str	r3, [r1, #0]
}
 80105ae:	bf00      	nop
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	40013c00 	.word	0x40013c00

080105c0 <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 80105c8:	4b07      	ldr	r3, [pc, #28]	; (80105e8 <LL_EXTI_IsEnabledIT_0_31+0x28>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4013      	ands	r3, r2
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	bf0c      	ite	eq
 80105d6:	2301      	moveq	r3, #1
 80105d8:	2300      	movne	r3, #0
 80105da:	b2db      	uxtb	r3, r3
}
 80105dc:	4618      	mov	r0, r3
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	40013c00 	.word	0x40013c00

080105ec <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80105f4:	4b05      	ldr	r3, [pc, #20]	; (801060c <LL_EXTI_EnableEvent_0_31+0x20>)
 80105f6:	685a      	ldr	r2, [r3, #4]
 80105f8:	4904      	ldr	r1, [pc, #16]	; (801060c <LL_EXTI_EnableEvent_0_31+0x20>)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4313      	orrs	r3, r2
 80105fe:	604b      	str	r3, [r1, #4]

}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr
 801060c:	40013c00 	.word	0x40013c00

08010610 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8010618:	4b05      	ldr	r3, [pc, #20]	; (8010630 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801061a:	689a      	ldr	r2, [r3, #8]
 801061c:	4904      	ldr	r1, [pc, #16]	; (8010630 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	4313      	orrs	r3, r2
 8010622:	608b      	str	r3, [r1, #8]

}
 8010624:	bf00      	nop
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr
 8010630:	40013c00 	.word	0x40013c00

08010634 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 801063c:	4b06      	ldr	r3, [pc, #24]	; (8010658 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801063e:	689a      	ldr	r2, [r3, #8]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	43db      	mvns	r3, r3
 8010644:	4904      	ldr	r1, [pc, #16]	; (8010658 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8010646:	4013      	ands	r3, r2
 8010648:	608b      	str	r3, [r1, #8]

}
 801064a:	bf00      	nop
 801064c:	370c      	adds	r7, #12
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	40013c00 	.word	0x40013c00

0801065c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8010664:	4b05      	ldr	r3, [pc, #20]	; (801067c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8010666:	68da      	ldr	r2, [r3, #12]
 8010668:	4904      	ldr	r1, [pc, #16]	; (801067c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4313      	orrs	r3, r2
 801066e:	60cb      	str	r3, [r1, #12]
}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr
 801067c:	40013c00 	.word	0x40013c00

08010680 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8010688:	4b06      	ldr	r3, [pc, #24]	; (80106a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 801068a:	68da      	ldr	r2, [r3, #12]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	43db      	mvns	r3, r3
 8010690:	4904      	ldr	r1, [pc, #16]	; (80106a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8010692:	4013      	ands	r3, r2
 8010694:	60cb      	str	r3, [r1, #12]
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	40013c00 	.word	0x40013c00

080106a8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80106b0:	4b07      	ldr	r3, [pc, #28]	; (80106d0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80106b2:	695a      	ldr	r2, [r3, #20]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4013      	ands	r3, r2
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	bf0c      	ite	eq
 80106be:	2301      	moveq	r3, #1
 80106c0:	2300      	movne	r3, #0
 80106c2:	b2db      	uxtb	r3, r3
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr
 80106d0:	40013c00 	.word	0x40013c00

080106d4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80106dc:	4a04      	ldr	r2, [pc, #16]	; (80106f0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6153      	str	r3, [r2, #20]
}
 80106e2:	bf00      	nop
 80106e4:	370c      	adds	r7, #12
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	40013c00 	.word	0x40013c00

080106f4 <hal_gpio_get_pin_number>:
static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio);
static void hal_gpio_exti_call(uint16_t pin_num);

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 80106fc:	2300      	movs	r3, #0
 80106fe:	73fb      	strb	r3, [r7, #15]
 8010700:	e00c      	b.n	801071c <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	889b      	ldrh	r3, [r3, #4]
 8010706:	461a      	mov	r2, r3
 8010708:	7bfb      	ldrb	r3, [r7, #15]
 801070a:	fa42 f303 	asr.w	r3, r2, r3
 801070e:	f003 0301 	and.w	r3, r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 8010716:	7bfb      	ldrb	r3, [r7, #15]
 8010718:	3301      	adds	r3, #1
 801071a:	73fb      	strb	r3, [r7, #15]
 801071c:	7bfb      	ldrb	r3, [r7, #15]
 801071e:	2b0f      	cmp	r3, #15
 8010720:	d9ef      	bls.n	8010702 <hal_gpio_get_pin_number+0xe>
 8010722:	e000      	b.n	8010726 <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 8010724:	bf00      	nop
	}
	return pin_number;
 8010726:	7bfb      	ldrb	r3, [r7, #15]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af02      	add	r7, sp, #8
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	4608      	mov	r0, r1
 801073e:	4611      	mov	r1, r2
 8010740:	461a      	mov	r2, r3
 8010742:	4603      	mov	r3, r0
 8010744:	70fb      	strb	r3, [r7, #3]
 8010746:	460b      	mov	r3, r1
 8010748:	70bb      	strb	r3, [r7, #2]
 801074a:	4613      	mov	r3, r2
 801074c:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 801074e:	787b      	ldrb	r3, [r7, #1]
 8010750:	78ba      	ldrb	r2, [r7, #2]
 8010752:	78f9      	ldrb	r1, [r7, #3]
 8010754:	2010      	movs	r0, #16
 8010756:	9000      	str	r0, [sp, #0]
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 f805 	bl	8010768 <hal_gpio_init_alt>
}
 801075e:	bf00      	nop
 8010760:	3708      	adds	r7, #8
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
	...

08010768 <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	4608      	mov	r0, r1
 8010772:	4611      	mov	r1, r2
 8010774:	461a      	mov	r2, r3
 8010776:	4603      	mov	r3, r0
 8010778:	70fb      	strb	r3, [r7, #3]
 801077a:	460b      	mov	r3, r1
 801077c:	70bb      	strb	r3, [r7, #2]
 801077e:	4613      	mov	r3, r2
 8010780:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	4a8d      	ldr	r2, [pc, #564]	; (80109bc <hal_gpio_init_alt+0x254>)
 8010788:	4293      	cmp	r3, r2
 801078a:	d02b      	beq.n	80107e4 <hal_gpio_init_alt+0x7c>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4a8b      	ldr	r2, [pc, #556]	; (80109c0 <hal_gpio_init_alt+0x258>)
 8010792:	4293      	cmp	r3, r2
 8010794:	d024      	beq.n	80107e0 <hal_gpio_init_alt+0x78>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4a8a      	ldr	r2, [pc, #552]	; (80109c4 <hal_gpio_init_alt+0x25c>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d01d      	beq.n	80107dc <hal_gpio_init_alt+0x74>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4a88      	ldr	r2, [pc, #544]	; (80109c8 <hal_gpio_init_alt+0x260>)
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d016      	beq.n	80107d8 <hal_gpio_init_alt+0x70>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	4a87      	ldr	r2, [pc, #540]	; (80109cc <hal_gpio_init_alt+0x264>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d00f      	beq.n	80107d4 <hal_gpio_init_alt+0x6c>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4a85      	ldr	r2, [pc, #532]	; (80109d0 <hal_gpio_init_alt+0x268>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d008      	beq.n	80107d0 <hal_gpio_init_alt+0x68>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a84      	ldr	r2, [pc, #528]	; (80109d4 <hal_gpio_init_alt+0x26c>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d101      	bne.n	80107cc <hal_gpio_init_alt+0x64>
 80107c8:	2306      	movs	r3, #6
 80107ca:	e00c      	b.n	80107e6 <hal_gpio_init_alt+0x7e>
 80107cc:	2307      	movs	r3, #7
 80107ce:	e00a      	b.n	80107e6 <hal_gpio_init_alt+0x7e>
 80107d0:	2305      	movs	r3, #5
 80107d2:	e008      	b.n	80107e6 <hal_gpio_init_alt+0x7e>
 80107d4:	2304      	movs	r3, #4
 80107d6:	e006      	b.n	80107e6 <hal_gpio_init_alt+0x7e>
 80107d8:	2303      	movs	r3, #3
 80107da:	e004      	b.n	80107e6 <hal_gpio_init_alt+0x7e>
 80107dc:	2302      	movs	r3, #2
 80107de:	e002      	b.n	80107e6 <hal_gpio_init_alt+0x7e>
 80107e0:	2301      	movs	r3, #1
 80107e2:	e000      	b.n	80107e6 <hal_gpio_init_alt+0x7e>
 80107e4:	2300      	movs	r3, #0
 80107e6:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	889b      	ldrh	r3, [r3, #4]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d05f      	beq.n	80108b0 <hal_gpio_init_alt+0x148>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	889b      	ldrh	r3, [r3, #4]
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	d058      	beq.n	80108aa <hal_gpio_init_alt+0x142>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	889b      	ldrh	r3, [r3, #4]
 80107fc:	2b04      	cmp	r3, #4
 80107fe:	d051      	beq.n	80108a4 <hal_gpio_init_alt+0x13c>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	889b      	ldrh	r3, [r3, #4]
 8010804:	2b08      	cmp	r3, #8
 8010806:	d04a      	beq.n	801089e <hal_gpio_init_alt+0x136>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	889b      	ldrh	r3, [r3, #4]
 801080c:	2b10      	cmp	r3, #16
 801080e:	d044      	beq.n	801089a <hal_gpio_init_alt+0x132>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	889b      	ldrh	r3, [r3, #4]
 8010814:	2b20      	cmp	r3, #32
 8010816:	d03e      	beq.n	8010896 <hal_gpio_init_alt+0x12e>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	889b      	ldrh	r3, [r3, #4]
 801081c:	2b40      	cmp	r3, #64	; 0x40
 801081e:	d038      	beq.n	8010892 <hal_gpio_init_alt+0x12a>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	889b      	ldrh	r3, [r3, #4]
 8010824:	2b80      	cmp	r3, #128	; 0x80
 8010826:	d032      	beq.n	801088e <hal_gpio_init_alt+0x126>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	889b      	ldrh	r3, [r3, #4]
 801082c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010830:	d02b      	beq.n	801088a <hal_gpio_init_alt+0x122>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	889b      	ldrh	r3, [r3, #4]
 8010836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801083a:	d024      	beq.n	8010886 <hal_gpio_init_alt+0x11e>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	889b      	ldrh	r3, [r3, #4]
 8010840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010844:	d01d      	beq.n	8010882 <hal_gpio_init_alt+0x11a>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	889b      	ldrh	r3, [r3, #4]
 801084a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801084e:	d016      	beq.n	801087e <hal_gpio_init_alt+0x116>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	889b      	ldrh	r3, [r3, #4]
 8010854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010858:	d00f      	beq.n	801087a <hal_gpio_init_alt+0x112>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	889b      	ldrh	r3, [r3, #4]
 801085e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010862:	d008      	beq.n	8010876 <hal_gpio_init_alt+0x10e>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	889b      	ldrh	r3, [r3, #4]
 8010868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801086c:	d101      	bne.n	8010872 <hal_gpio_init_alt+0x10a>
 801086e:	4b5a      	ldr	r3, [pc, #360]	; (80109d8 <hal_gpio_init_alt+0x270>)
 8010870:	e020      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 8010872:	4b5a      	ldr	r3, [pc, #360]	; (80109dc <hal_gpio_init_alt+0x274>)
 8010874:	e01e      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 8010876:	4b5a      	ldr	r3, [pc, #360]	; (80109e0 <hal_gpio_init_alt+0x278>)
 8010878:	e01c      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 801087a:	4b5a      	ldr	r3, [pc, #360]	; (80109e4 <hal_gpio_init_alt+0x27c>)
 801087c:	e01a      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 801087e:	4b5a      	ldr	r3, [pc, #360]	; (80109e8 <hal_gpio_init_alt+0x280>)
 8010880:	e018      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 8010882:	4b5a      	ldr	r3, [pc, #360]	; (80109ec <hal_gpio_init_alt+0x284>)
 8010884:	e016      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 8010886:	4b5a      	ldr	r3, [pc, #360]	; (80109f0 <hal_gpio_init_alt+0x288>)
 8010888:	e014      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 801088a:	4b5a      	ldr	r3, [pc, #360]	; (80109f4 <hal_gpio_init_alt+0x28c>)
 801088c:	e012      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 801088e:	4b5a      	ldr	r3, [pc, #360]	; (80109f8 <hal_gpio_init_alt+0x290>)
 8010890:	e010      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 8010892:	4b5a      	ldr	r3, [pc, #360]	; (80109fc <hal_gpio_init_alt+0x294>)
 8010894:	e00e      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 8010896:	4b5a      	ldr	r3, [pc, #360]	; (8010a00 <hal_gpio_init_alt+0x298>)
 8010898:	e00c      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 801089a:	4b5a      	ldr	r3, [pc, #360]	; (8010a04 <hal_gpio_init_alt+0x29c>)
 801089c:	e00a      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 801089e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 80108a2:	e007      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 80108a4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80108a8:	e004      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 80108aa:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 80108ae:	e001      	b.n	80108b4 <hal_gpio_init_alt+0x14c>
 80108b0:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80108b4:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	889b      	ldrh	r3, [r3, #4]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d064      	beq.n	8010988 <hal_gpio_init_alt+0x220>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	889b      	ldrh	r3, [r3, #4]
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d05e      	beq.n	8010984 <hal_gpio_init_alt+0x21c>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	889b      	ldrh	r3, [r3, #4]
 80108ca:	2b04      	cmp	r3, #4
 80108cc:	d058      	beq.n	8010980 <hal_gpio_init_alt+0x218>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	889b      	ldrh	r3, [r3, #4]
 80108d2:	2b08      	cmp	r3, #8
 80108d4:	d052      	beq.n	801097c <hal_gpio_init_alt+0x214>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	889b      	ldrh	r3, [r3, #4]
 80108da:	2b10      	cmp	r3, #16
 80108dc:	d04c      	beq.n	8010978 <hal_gpio_init_alt+0x210>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	889b      	ldrh	r3, [r3, #4]
 80108e2:	2b20      	cmp	r3, #32
 80108e4:	d046      	beq.n	8010974 <hal_gpio_init_alt+0x20c>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	889b      	ldrh	r3, [r3, #4]
 80108ea:	2b40      	cmp	r3, #64	; 0x40
 80108ec:	d040      	beq.n	8010970 <hal_gpio_init_alt+0x208>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	889b      	ldrh	r3, [r3, #4]
 80108f2:	2b80      	cmp	r3, #128	; 0x80
 80108f4:	d03a      	beq.n	801096c <hal_gpio_init_alt+0x204>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	889b      	ldrh	r3, [r3, #4]
 80108fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108fe:	d032      	beq.n	8010966 <hal_gpio_init_alt+0x1fe>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	889b      	ldrh	r3, [r3, #4]
 8010904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010908:	d02a      	beq.n	8010960 <hal_gpio_init_alt+0x1f8>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	889b      	ldrh	r3, [r3, #4]
 801090e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010912:	d022      	beq.n	801095a <hal_gpio_init_alt+0x1f2>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	889b      	ldrh	r3, [r3, #4]
 8010918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801091c:	d01a      	beq.n	8010954 <hal_gpio_init_alt+0x1ec>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	889b      	ldrh	r3, [r3, #4]
 8010922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010926:	d012      	beq.n	801094e <hal_gpio_init_alt+0x1e6>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	889b      	ldrh	r3, [r3, #4]
 801092c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010930:	d00a      	beq.n	8010948 <hal_gpio_init_alt+0x1e0>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	889b      	ldrh	r3, [r3, #4]
 8010936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801093a:	d102      	bne.n	8010942 <hal_gpio_init_alt+0x1da>
 801093c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010940:	e023      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010946:	e020      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801094c:	e01d      	b.n	801098a <hal_gpio_init_alt+0x222>
 801094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010952:	e01a      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010958:	e017      	b.n	801098a <hal_gpio_init_alt+0x222>
 801095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801095e:	e014      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010964:	e011      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010966:	f44f 7380 	mov.w	r3, #256	; 0x100
 801096a:	e00e      	b.n	801098a <hal_gpio_init_alt+0x222>
 801096c:	2380      	movs	r3, #128	; 0x80
 801096e:	e00c      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010970:	2340      	movs	r3, #64	; 0x40
 8010972:	e00a      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010974:	2320      	movs	r3, #32
 8010976:	e008      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010978:	2310      	movs	r3, #16
 801097a:	e006      	b.n	801098a <hal_gpio_init_alt+0x222>
 801097c:	2308      	movs	r3, #8
 801097e:	e004      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010980:	2304      	movs	r3, #4
 8010982:	e002      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010984:	2302      	movs	r3, #2
 8010986:	e000      	b.n	801098a <hal_gpio_init_alt+0x222>
 8010988:	2301      	movs	r3, #1
 801098a:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 801098c:	787b      	ldrb	r3, [r7, #1]
 801098e:	2b03      	cmp	r3, #3
 8010990:	d855      	bhi.n	8010a3e <hal_gpio_init_alt+0x2d6>
 8010992:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <hal_gpio_init_alt+0x230>)
 8010994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010998:	080109a9 	.word	0x080109a9
 801099c:	08010a09 	.word	0x08010a09
 80109a0:	08010a1b 	.word	0x08010a1b
 80109a4:	08010a2d 	.word	0x08010a2d
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6818      	ldr	r0, [r3, #0]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	889b      	ldrh	r3, [r3, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	4619      	mov	r1, r3
 80109b4:	f7ff fccf 	bl	8010356 <LL_GPIO_SetPinSpeed>
		break;
 80109b8:	e041      	b.n	8010a3e <hal_gpio_init_alt+0x2d6>
 80109ba:	bf00      	nop
 80109bc:	40020000 	.word	0x40020000
 80109c0:	40020400 	.word	0x40020400
 80109c4:	40020800 	.word	0x40020800
 80109c8:	40020c00 	.word	0x40020c00
 80109cc:	40021000 	.word	0x40021000
 80109d0:	40021400 	.word	0x40021400
 80109d4:	40021800 	.word	0x40021800
 80109d8:	0f000003 	.word	0x0f000003
 80109dc:	f0000003 	.word	0xf0000003
 80109e0:	00f00003 	.word	0x00f00003
 80109e4:	000f0003 	.word	0x000f0003
 80109e8:	f0000002 	.word	0xf0000002
 80109ec:	0f000002 	.word	0x0f000002
 80109f0:	00f00002 	.word	0x00f00002
 80109f4:	000f0002 	.word	0x000f0002
 80109f8:	f0000001 	.word	0xf0000001
 80109fc:	0f000001 	.word	0x0f000001
 8010a00:	00f00001 	.word	0x00f00001
 8010a04:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6818      	ldr	r0, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	889b      	ldrh	r3, [r3, #4]
 8010a10:	2201      	movs	r2, #1
 8010a12:	4619      	mov	r1, r3
 8010a14:	f7ff fc9f 	bl	8010356 <LL_GPIO_SetPinSpeed>
		break;
 8010a18:	e011      	b.n	8010a3e <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6818      	ldr	r0, [r3, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	889b      	ldrh	r3, [r3, #4]
 8010a22:	2202      	movs	r2, #2
 8010a24:	4619      	mov	r1, r3
 8010a26:	f7ff fc96 	bl	8010356 <LL_GPIO_SetPinSpeed>
		break;
 8010a2a:	e008      	b.n	8010a3e <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6818      	ldr	r0, [r3, #0]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	889b      	ldrh	r3, [r3, #4]
 8010a34:	2203      	movs	r2, #3
 8010a36:	4619      	mov	r1, r3
 8010a38:	f7ff fc8d 	bl	8010356 <LL_GPIO_SetPinSpeed>
		break;
 8010a3c:	bf00      	nop
	}

	switch(pull) {
 8010a3e:	78bb      	ldrb	r3, [r7, #2]
 8010a40:	2b02      	cmp	r3, #2
 8010a42:	d018      	beq.n	8010a76 <hal_gpio_init_alt+0x30e>
 8010a44:	2b02      	cmp	r3, #2
 8010a46:	dc1f      	bgt.n	8010a88 <hal_gpio_init_alt+0x320>
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d002      	beq.n	8010a52 <hal_gpio_init_alt+0x2ea>
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d009      	beq.n	8010a64 <hal_gpio_init_alt+0x2fc>
 8010a50:	e01a      	b.n	8010a88 <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6818      	ldr	r0, [r3, #0]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	889b      	ldrh	r3, [r3, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	f7ff fca9 	bl	80103b4 <LL_GPIO_SetPinPull>
		break;
 8010a62:	e011      	b.n	8010a88 <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6818      	ldr	r0, [r3, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	889b      	ldrh	r3, [r3, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	4619      	mov	r1, r3
 8010a70:	f7ff fca0 	bl	80103b4 <LL_GPIO_SetPinPull>
		break;
 8010a74:	e008      	b.n	8010a88 <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6818      	ldr	r0, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	889b      	ldrh	r3, [r3, #4]
 8010a7e:	2202      	movs	r2, #2
 8010a80:	4619      	mov	r1, r3
 8010a82:	f7ff fc97 	bl	80103b4 <LL_GPIO_SetPinPull>
		break;
 8010a86:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 8010a88:	78fb      	ldrb	r3, [r7, #3]
 8010a8a:	2b05      	cmp	r3, #5
 8010a8c:	d93d      	bls.n	8010b0a <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6818      	ldr	r0, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	889b      	ldrh	r3, [r3, #4]
 8010a96:	2200      	movs	r2, #0
 8010a98:	4619      	mov	r1, r3
 8010a9a:	f7ff fc15 	bl	80102c8 <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 8010a9e:	6939      	ldr	r1, [r7, #16]
 8010aa0:	6978      	ldr	r0, [r7, #20]
 8010aa2:	f7ff fd17 	bl	80104d4 <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 8010aa6:	78fb      	ldrb	r3, [r7, #3]
 8010aa8:	2b06      	cmp	r3, #6
 8010aaa:	d002      	beq.n	8010ab2 <hal_gpio_init_alt+0x34a>
 8010aac:	78fb      	ldrb	r3, [r7, #3]
 8010aae:	2b08      	cmp	r3, #8
 8010ab0:	d105      	bne.n	8010abe <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7ff fd5e 	bl	8010574 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f7ff fda9 	bl	8010610 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 8010abe:	78fb      	ldrb	r3, [r7, #3]
 8010ac0:	2b07      	cmp	r3, #7
 8010ac2:	d002      	beq.n	8010aca <hal_gpio_init_alt+0x362>
 8010ac4:	78fb      	ldrb	r3, [r7, #3]
 8010ac6:	2b08      	cmp	r3, #8
 8010ac8:	d105      	bne.n	8010ad6 <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	f7ff fd52 	bl	8010574 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7ff fdc3 	bl	801065c <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 8010ad6:	78fb      	ldrb	r3, [r7, #3]
 8010ad8:	2b09      	cmp	r3, #9
 8010ada:	d002      	beq.n	8010ae2 <hal_gpio_init_alt+0x37a>
 8010adc:	78fb      	ldrb	r3, [r7, #3]
 8010ade:	2b0b      	cmp	r3, #11
 8010ae0:	d105      	bne.n	8010aee <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f7ff fd82 	bl	80105ec <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8010ae8:	68f8      	ldr	r0, [r7, #12]
 8010aea:	f7ff fd91 	bl	8010610 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 8010aee:	78fb      	ldrb	r3, [r7, #3]
 8010af0:	2b0a      	cmp	r3, #10
 8010af2:	d003      	beq.n	8010afc <hal_gpio_init_alt+0x394>
 8010af4:	78fb      	ldrb	r3, [r7, #3]
 8010af6:	2b0b      	cmp	r3, #11
 8010af8:	f040 80a7 	bne.w	8010c4a <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f7ff fd39 	bl	8010574 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f7ff fdaa 	bl	801065c <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 8010b08:	e09f      	b.n	8010c4a <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 8010b0a:	6938      	ldr	r0, [r7, #16]
 8010b0c:	f7ff fd10 	bl	8010530 <LL_SYSCFG_GetEXTISource>
 8010b10:	4602      	mov	r2, r0
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d10e      	bne.n	8010b36 <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f7ff fd51 	bl	80105c0 <LL_EXTI_IsEnabledIT_0_31>
 8010b1e:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d008      	beq.n	8010b36 <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 8010b24:	68f8      	ldr	r0, [r7, #12]
 8010b26:	f7ff fd37 	bl	8010598 <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f7ff fda8 	bl	8010680 <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8010b30:	68f8      	ldr	r0, [r7, #12]
 8010b32:	f7ff fd7f 	bl	8010634 <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 8010b36:	78fb      	ldrb	r3, [r7, #3]
 8010b38:	2b03      	cmp	r3, #3
 8010b3a:	d002      	beq.n	8010b42 <hal_gpio_init_alt+0x3da>
 8010b3c:	78fb      	ldrb	r3, [r7, #3]
 8010b3e:	2b04      	cmp	r3, #4
 8010b40:	d11a      	bne.n	8010b78 <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7ff fdd6 	bl	80106f4 <hal_gpio_get_pin_number>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b07      	cmp	r3, #7
 8010b4c:	d80a      	bhi.n	8010b64 <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6818      	ldr	r0, [r3, #0]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	889b      	ldrh	r3, [r3, #4]
 8010b56:	4619      	mov	r1, r3
 8010b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	f7ff fc58 	bl	8010412 <LL_GPIO_SetAFPin_0_7>
 8010b62:	e009      	b.n	8010b78 <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6818      	ldr	r0, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	889b      	ldrh	r3, [r3, #4]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b72:	461a      	mov	r2, r3
 8010b74:	f7ff fc7c 	bl	8010470 <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 8010b78:	78fb      	ldrb	r3, [r7, #3]
 8010b7a:	2b05      	cmp	r3, #5
 8010b7c:	d864      	bhi.n	8010c48 <hal_gpio_init_alt+0x4e0>
 8010b7e:	a201      	add	r2, pc, #4	; (adr r2, 8010b84 <hal_gpio_init_alt+0x41c>)
 8010b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b84:	08010b9d 	.word	0x08010b9d
 8010b88:	08010baf 	.word	0x08010baf
 8010b8c:	08010bd1 	.word	0x08010bd1
 8010b90:	08010bf3 	.word	0x08010bf3
 8010b94:	08010c15 	.word	0x08010c15
 8010b98:	08010c37 	.word	0x08010c37
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6818      	ldr	r0, [r3, #0]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	889b      	ldrh	r3, [r3, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	f7ff fb8e 	bl	80102c8 <LL_GPIO_SetPinMode>
			break;
 8010bac:	e04d      	b.n	8010c4a <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6818      	ldr	r0, [r3, #0]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	889b      	ldrh	r3, [r3, #4]
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	4619      	mov	r1, r3
 8010bba:	f7ff fb85 	bl	80102c8 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6818      	ldr	r0, [r3, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	889b      	ldrh	r3, [r3, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	4619      	mov	r1, r3
 8010bca:	f7ff fbac 	bl	8010326 <LL_GPIO_SetPinOutputType>
			break;
 8010bce:	e03c      	b.n	8010c4a <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6818      	ldr	r0, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	889b      	ldrh	r3, [r3, #4]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	4619      	mov	r1, r3
 8010bdc:	f7ff fb74 	bl	80102c8 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6818      	ldr	r0, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	889b      	ldrh	r3, [r3, #4]
 8010be8:	2201      	movs	r2, #1
 8010bea:	4619      	mov	r1, r3
 8010bec:	f7ff fb9b 	bl	8010326 <LL_GPIO_SetPinOutputType>
			break;
 8010bf0:	e02b      	b.n	8010c4a <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	889b      	ldrh	r3, [r3, #4]
 8010bfa:	2202      	movs	r2, #2
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	f7ff fb63 	bl	80102c8 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6818      	ldr	r0, [r3, #0]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	889b      	ldrh	r3, [r3, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	f7ff fb8a 	bl	8010326 <LL_GPIO_SetPinOutputType>
			break;
 8010c12:	e01a      	b.n	8010c4a <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6818      	ldr	r0, [r3, #0]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	889b      	ldrh	r3, [r3, #4]
 8010c1c:	2202      	movs	r2, #2
 8010c1e:	4619      	mov	r1, r3
 8010c20:	f7ff fb52 	bl	80102c8 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6818      	ldr	r0, [r3, #0]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	889b      	ldrh	r3, [r3, #4]
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	4619      	mov	r1, r3
 8010c30:	f7ff fb79 	bl	8010326 <LL_GPIO_SetPinOutputType>
			break;
 8010c34:	e009      	b.n	8010c4a <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6818      	ldr	r0, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	889b      	ldrh	r3, [r3, #4]
 8010c3e:	2203      	movs	r2, #3
 8010c40:	4619      	mov	r1, r3
 8010c42:	f7ff fb41 	bl	80102c8 <LL_GPIO_SetPinMode>
			break;
 8010c46:	e000      	b.n	8010c4a <hal_gpio_init_alt+0x4e2>
			break;
 8010c48:	bf00      	nop
}
 8010c4a:	bf00      	nop
 8010c4c:	3718      	adds	r7, #24
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop

08010c54 <hal_gpio_add_exti_callback>:

void hal_gpio_add_exti_callback(const GpioPin* gpio, GpioExtiCallback cb, void* context) {
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b086      	sub	sp, #24
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	607a      	str	r2, [r7, #4]
	uint16_t pin;
	taskENTER_CRITICAL();
 8010c60:	f7f8 fc72 	bl	8009548 <vPortEnterCritical>
	pin = hal_gpio_get_pin_number(gpio);
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f7ff fd45 	bl	80106f4 <hal_gpio_get_pin_number>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	82fb      	strh	r3, [r7, #22]
	gpio_interrupt[pin].callback = cb;
 8010c6e:	8afa      	ldrh	r2, [r7, #22]
 8010c70:	4910      	ldr	r1, [pc, #64]	; (8010cb4 <hal_gpio_add_exti_callback+0x60>)
 8010c72:	4613      	mov	r3, r2
 8010c74:	005b      	lsls	r3, r3, #1
 8010c76:	4413      	add	r3, r2
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	440b      	add	r3, r1
 8010c7c:	68ba      	ldr	r2, [r7, #8]
 8010c7e:	601a      	str	r2, [r3, #0]
	gpio_interrupt[pin].context = context;
 8010c80:	8afa      	ldrh	r2, [r7, #22]
 8010c82:	490c      	ldr	r1, [pc, #48]	; (8010cb4 <hal_gpio_add_exti_callback+0x60>)
 8010c84:	4613      	mov	r3, r2
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	4413      	add	r3, r2
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	440b      	add	r3, r1
 8010c8e:	3304      	adds	r3, #4
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	601a      	str	r2, [r3, #0]
	gpio_interrupt[pin].ready = true;
 8010c94:	8afa      	ldrh	r2, [r7, #22]
 8010c96:	4907      	ldr	r1, [pc, #28]	; (8010cb4 <hal_gpio_add_exti_callback+0x60>)
 8010c98:	4613      	mov	r3, r2
 8010c9a:	005b      	lsls	r3, r3, #1
 8010c9c:	4413      	add	r3, r2
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	440b      	add	r3, r1
 8010ca2:	3308      	adds	r3, #8
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 8010ca8:	f7f8 fc7e 	bl	80095a8 <vPortExitCritical>
}
 8010cac:	bf00      	nop
 8010cae:	3718      	adds	r7, #24
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	20004c0c 	.word	0x20004c0c

08010cb8 <hal_gpio_exti_call>:

static void hal_gpio_exti_call(uint16_t pin_num) {
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	80fb      	strh	r3, [r7, #6]
	if(gpio_interrupt[pin_num].callback && gpio_interrupt[pin_num].ready) {
 8010cc2:	88fa      	ldrh	r2, [r7, #6]
 8010cc4:	4915      	ldr	r1, [pc, #84]	; (8010d1c <hal_gpio_exti_call+0x64>)
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	005b      	lsls	r3, r3, #1
 8010cca:	4413      	add	r3, r2
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	440b      	add	r3, r1
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d01e      	beq.n	8010d14 <hal_gpio_exti_call+0x5c>
 8010cd6:	88fa      	ldrh	r2, [r7, #6]
 8010cd8:	4910      	ldr	r1, [pc, #64]	; (8010d1c <hal_gpio_exti_call+0x64>)
 8010cda:	4613      	mov	r3, r2
 8010cdc:	005b      	lsls	r3, r3, #1
 8010cde:	4413      	add	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	440b      	add	r3, r1
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d012      	beq.n	8010d14 <hal_gpio_exti_call+0x5c>
		gpio_interrupt[pin_num].callback(gpio_interrupt[pin_num].context);
 8010cee:	88fa      	ldrh	r2, [r7, #6]
 8010cf0:	490a      	ldr	r1, [pc, #40]	; (8010d1c <hal_gpio_exti_call+0x64>)
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	005b      	lsls	r3, r3, #1
 8010cf6:	4413      	add	r3, r2
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	440b      	add	r3, r1
 8010cfc:	6819      	ldr	r1, [r3, #0]
 8010cfe:	88fa      	ldrh	r2, [r7, #6]
 8010d00:	4806      	ldr	r0, [pc, #24]	; (8010d1c <hal_gpio_exti_call+0x64>)
 8010d02:	4613      	mov	r3, r2
 8010d04:	005b      	lsls	r3, r3, #1
 8010d06:	4413      	add	r3, r2
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	4403      	add	r3, r0
 8010d0c:	3304      	adds	r3, #4
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4618      	mov	r0, r3
 8010d12:	4788      	blx	r1
	}
}
 8010d14:	bf00      	nop
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	20004c0c 	.word	0x20004c0c

08010d20 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0)) {
 8010d24:	2001      	movs	r0, #1
 8010d26:	f7ff fcbf 	bl	80106a8 <LL_EXTI_IsActiveFlag_0_31>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d005      	beq.n	8010d3c <EXTI0_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8010d30:	2001      	movs	r0, #1
 8010d32:	f7ff fccf 	bl	80106d4 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(0);
 8010d36:	2000      	movs	r0, #0
 8010d38:	f7ff ffbe 	bl	8010cb8 <hal_gpio_exti_call>
    }
}
 8010d3c:	bf00      	nop
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8010d40:	b580      	push	{r7, lr}
 8010d42:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1)) {
 8010d44:	2002      	movs	r0, #2
 8010d46:	f7ff fcaf 	bl	80106a8 <LL_EXTI_IsActiveFlag_0_31>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d005      	beq.n	8010d5c <EXTI1_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8010d50:	2002      	movs	r0, #2
 8010d52:	f7ff fcbf 	bl	80106d4 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(1);
 8010d56:	2001      	movs	r0, #1
 8010d58:	f7ff ffae 	bl	8010cb8 <hal_gpio_exti_call>
    }
}
 8010d5c:	bf00      	nop
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2)) {
 8010d64:	2004      	movs	r0, #4
 8010d66:	f7ff fc9f 	bl	80106a8 <LL_EXTI_IsActiveFlag_0_31>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d005      	beq.n	8010d7c <EXTI2_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8010d70:	2004      	movs	r0, #4
 8010d72:	f7ff fcaf 	bl	80106d4 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(2);
 8010d76:	2002      	movs	r0, #2
 8010d78:	f7ff ff9e 	bl	8010cb8 <hal_gpio_exti_call>
    }
}
 8010d7c:	bf00      	nop
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8010d80:	b580      	push	{r7, lr}
 8010d82:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3)) {
 8010d84:	2008      	movs	r0, #8
 8010d86:	f7ff fc8f 	bl	80106a8 <LL_EXTI_IsActiveFlag_0_31>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d005      	beq.n	8010d9c <EXTI3_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8010d90:	2008      	movs	r0, #8
 8010d92:	f7ff fc9f 	bl	80106d4 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(3);
 8010d96:	2003      	movs	r0, #3
 8010d98:	f7ff ff8e 	bl	8010cb8 <hal_gpio_exti_call>
    }
}
 8010d9c:	bf00      	nop
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 8010da0:	b580      	push	{r7, lr}
 8010da2:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4)) {
 8010da4:	2010      	movs	r0, #16
 8010da6:	f7ff fc7f 	bl	80106a8 <LL_EXTI_IsActiveFlag_0_31>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d005      	beq.n	8010dbc <EXTI4_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8010db0:	2010      	movs	r0, #16
 8010db2:	f7ff fc8f 	bl	80106d4 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(4);
 8010db6:	2004      	movs	r0, #4
 8010db8:	f7ff ff7e 	bl	8010cb8 <hal_gpio_exti_call>
    }
}
 8010dbc:	bf00      	nop
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5)) {
 8010dc4:	2020      	movs	r0, #32
 8010dc6:	f7ff fc6f 	bl	80106a8 <LL_EXTI_IsActiveFlag_0_31>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d005      	beq.n	8010ddc <EXTI9_5_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8010dd0:	2020      	movs	r0, #32
 8010dd2:	f7ff fc7f 	bl	80106d4 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(5);
 8010dd6:	2005      	movs	r0, #5
 8010dd8:	f7ff ff6e 	bl	8010cb8 <hal_gpio_exti_call>
    }
}
 8010ddc:	bf00      	nop
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
        __asm volatile
 8010de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dea:	f383 8811 	msr	BASEPRI, r3
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f3bf 8f4f 	dsb	sy
 8010df6:	607b      	str	r3, [r7, #4]
    }
 8010df8:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 8010dfa:	e7fe      	b.n	8010dfa <vApplicationMallocFailedHook+0x1a>

08010dfc <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
        __asm volatile
 8010e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0a:	f383 8811 	msr	BASEPRI, r3
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	f3bf 8f4f 	dsb	sy
 8010e16:	60fb      	str	r3, [r7, #12]
    }
 8010e18:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 8010e1a:	e7fe      	b.n	8010e1a <vApplicationStackOverflowHook+0x1e>

08010e1c <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	4a07      	ldr	r2, [pc, #28]	; (8010e48 <vApplicationGetIdleTaskMemory+0x2c>)
 8010e2c:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	4a06      	ldr	r2, [pc, #24]	; (8010e4c <vApplicationGetIdleTaskMemory+0x30>)
 8010e32:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e3a:	601a      	str	r2, [r3, #0]
}
 8010e3c:	bf00      	nop
 8010e3e:	3714      	adds	r7, #20
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	20004ccc 	.word	0x20004ccc
 8010e4c:	20004d28 	.word	0x20004d28

08010e50 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	4a07      	ldr	r2, [pc, #28]	; (8010e7c <vApplicationGetTimerTaskMemory+0x2c>)
 8010e60:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	4a06      	ldr	r2, [pc, #24]	; (8010e80 <vApplicationGetTimerTaskMemory+0x30>)
 8010e66:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010e6e:	601a      	str	r2, [r3, #0]
}
 8010e70:	bf00      	nop
 8010e72:	3714      	adds	r7, #20
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr
 8010e7c:	20005528 	.word	0x20005528
 8010e80:	20005584 	.word	0x20005584

08010e84 <__NVIC_GetPriorityGrouping>:
{
 8010e84:	b480      	push	{r7}
 8010e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010e88:	4b04      	ldr	r3, [pc, #16]	; (8010e9c <__NVIC_GetPriorityGrouping+0x18>)
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	0a1b      	lsrs	r3, r3, #8
 8010e8e:	f003 0307 	and.w	r3, r3, #7
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	e000ed00 	.word	0xe000ed00

08010ea0 <__NVIC_EnableIRQ>:
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	db0b      	blt.n	8010eca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	f003 021f 	and.w	r2, r3, #31
 8010eb8:	4907      	ldr	r1, [pc, #28]	; (8010ed8 <__NVIC_EnableIRQ+0x38>)
 8010eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ebe:	095b      	lsrs	r3, r3, #5
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8010ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010eca:	bf00      	nop
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	e000e100 	.word	0xe000e100

08010edc <__NVIC_SetPriority>:
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	6039      	str	r1, [r7, #0]
 8010ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	db0a      	blt.n	8010f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	b2da      	uxtb	r2, r3
 8010ef4:	490c      	ldr	r1, [pc, #48]	; (8010f28 <__NVIC_SetPriority+0x4c>)
 8010ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010efa:	0112      	lsls	r2, r2, #4
 8010efc:	b2d2      	uxtb	r2, r2
 8010efe:	440b      	add	r3, r1
 8010f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010f04:	e00a      	b.n	8010f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	4908      	ldr	r1, [pc, #32]	; (8010f2c <__NVIC_SetPriority+0x50>)
 8010f0c:	79fb      	ldrb	r3, [r7, #7]
 8010f0e:	f003 030f 	and.w	r3, r3, #15
 8010f12:	3b04      	subs	r3, #4
 8010f14:	0112      	lsls	r2, r2, #4
 8010f16:	b2d2      	uxtb	r2, r2
 8010f18:	440b      	add	r3, r1
 8010f1a:	761a      	strb	r2, [r3, #24]
}
 8010f1c:	bf00      	nop
 8010f1e:	370c      	adds	r7, #12
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr
 8010f28:	e000e100 	.word	0xe000e100
 8010f2c:	e000ed00 	.word	0xe000ed00

08010f30 <NVIC_EncodePriority>:
{
 8010f30:	b480      	push	{r7}
 8010f32:	b089      	sub	sp, #36	; 0x24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f003 0307 	and.w	r3, r3, #7
 8010f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	f1c3 0307 	rsb	r3, r3, #7
 8010f4a:	2b04      	cmp	r3, #4
 8010f4c:	bf28      	it	cs
 8010f4e:	2304      	movcs	r3, #4
 8010f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	3304      	adds	r3, #4
 8010f56:	2b06      	cmp	r3, #6
 8010f58:	d902      	bls.n	8010f60 <NVIC_EncodePriority+0x30>
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	3b03      	subs	r3, #3
 8010f5e:	e000      	b.n	8010f62 <NVIC_EncodePriority+0x32>
 8010f60:	2300      	movs	r3, #0
 8010f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f6e:	43da      	mvns	r2, r3
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	401a      	ands	r2, r3
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f82:	43d9      	mvns	r1, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f88:	4313      	orrs	r3, r2
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3724      	adds	r7, #36	; 0x24
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr

08010f96 <LL_I2C_EnableClockStretching>:
{
 8010f96:	b480      	push	{r7}
 8010f98:	b083      	sub	sp, #12
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	601a      	str	r2, [r3, #0]
}
 8010faa:	bf00      	nop
 8010fac:	370c      	adds	r7, #12
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb4:	4770      	bx	lr

08010fb6 <LL_I2C_DisableGeneralCall>:
{
 8010fb6:	b480      	push	{r7}
 8010fb8:	b083      	sub	sp, #12
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	601a      	str	r2, [r3, #0]
}
 8010fca:	bf00      	nop
 8010fcc:	370c      	adds	r7, #12
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr

08010fd6 <LL_I2C_SetOwnAddress2>:
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b083      	sub	sp, #12
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
 8010fde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	431a      	orrs	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	60da      	str	r2, [r3, #12]
}
 8010ff0:	bf00      	nop
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <LL_I2C_DisableOwnAddress2>:
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	f023 0201 	bic.w	r2, r3, #1
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	60da      	str	r2, [r3, #12]
}
 8011010:	bf00      	nop
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <LL_I2C_IsActiveFlag_TXE>:
{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	695b      	ldr	r3, [r3, #20]
 8011028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801102c:	2b80      	cmp	r3, #128	; 0x80
 801102e:	bf0c      	ite	eq
 8011030:	2301      	moveq	r3, #1
 8011032:	2300      	movne	r3, #0
 8011034:	b2db      	uxtb	r3, r3
}
 8011036:	4618      	mov	r0, r3
 8011038:	370c      	adds	r7, #12
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr

08011042 <LL_I2C_IsActiveFlag_BTF>:
{
 8011042:	b480      	push	{r7}
 8011044:	b083      	sub	sp, #12
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	695b      	ldr	r3, [r3, #20]
 801104e:	f003 0304 	and.w	r3, r3, #4
 8011052:	2b04      	cmp	r3, #4
 8011054:	bf0c      	ite	eq
 8011056:	2301      	moveq	r3, #1
 8011058:	2300      	movne	r3, #0
 801105a:	b2db      	uxtb	r3, r3
}
 801105c:	4618      	mov	r0, r3
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <LL_I2C_IsActiveFlag_RXNE>:
{
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	695b      	ldr	r3, [r3, #20]
 8011074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011078:	2b40      	cmp	r3, #64	; 0x40
 801107a:	bf0c      	ite	eq
 801107c:	2301      	moveq	r3, #1
 801107e:	2300      	movne	r3, #0
 8011080:	b2db      	uxtb	r3, r3
}
 8011082:	4618      	mov	r0, r3
 8011084:	370c      	adds	r7, #12
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr

0801108e <LL_I2C_IsActiveFlag_SB>:
{
 801108e:	b480      	push	{r7}
 8011090:	b083      	sub	sp, #12
 8011092:	af00      	add	r7, sp, #0
 8011094:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	695b      	ldr	r3, [r3, #20]
 801109a:	f003 0301 	and.w	r3, r3, #1
 801109e:	2b01      	cmp	r3, #1
 80110a0:	bf0c      	ite	eq
 80110a2:	2301      	moveq	r3, #1
 80110a4:	2300      	movne	r3, #0
 80110a6:	b2db      	uxtb	r3, r3
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	370c      	adds	r7, #12
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr

080110b4 <LL_I2C_IsActiveFlag_ADDR>:
{
 80110b4:	b480      	push	{r7}
 80110b6:	b083      	sub	sp, #12
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	695b      	ldr	r3, [r3, #20]
 80110c0:	f003 0302 	and.w	r3, r3, #2
 80110c4:	2b02      	cmp	r3, #2
 80110c6:	bf0c      	ite	eq
 80110c8:	2301      	moveq	r3, #1
 80110ca:	2300      	movne	r3, #0
 80110cc:	b2db      	uxtb	r3, r3
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr

080110da <LL_I2C_IsActiveFlag_BUSY>:
{
 80110da:	b480      	push	{r7}
 80110dc:	b083      	sub	sp, #12
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	699b      	ldr	r3, [r3, #24]
 80110e6:	f003 0302 	and.w	r3, r3, #2
 80110ea:	2b02      	cmp	r3, #2
 80110ec:	bf0c      	ite	eq
 80110ee:	2301      	moveq	r3, #1
 80110f0:	2300      	movne	r3, #0
 80110f2:	b2db      	uxtb	r3, r3
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	370c      	adds	r7, #12
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr

08011100 <LL_I2C_ClearFlag_ADDR>:
{
 8011100:	b480      	push	{r7}
 8011102:	b085      	sub	sp, #20
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	695b      	ldr	r3, [r3, #20]
 801110c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 801110e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	699b      	ldr	r3, [r3, #24]
 8011114:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8011116:	68fb      	ldr	r3, [r7, #12]
}
 8011118:	bf00      	nop
 801111a:	3714      	adds	r7, #20
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr

08011124 <LL_I2C_AcknowledgeNextData>:
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	431a      	orrs	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	601a      	str	r2, [r3, #0]
}
 801113e:	bf00      	nop
 8011140:	370c      	adds	r7, #12
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr

0801114a <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 801114a:	b480      	push	{r7}
 801114c:	b083      	sub	sp, #12
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	601a      	str	r2, [r3, #0]
}
 801115e:	bf00      	nop
 8011160:	370c      	adds	r7, #12
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr

0801116a <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 801116a:	b480      	push	{r7}
 801116c:	b083      	sub	sp, #12
 801116e:	af00      	add	r7, sp, #0
 8011170:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	601a      	str	r2, [r3, #0]
}
 801117e:	bf00      	nop
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr

0801118a <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 801118a:	b480      	push	{r7}
 801118c:	b083      	sub	sp, #12
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	691b      	ldr	r3, [r3, #16]
 8011196:	b2db      	uxtb	r3, r3
}
 8011198:	4618      	mov	r0, r3
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	460b      	mov	r3, r1
 80111ae:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	691b      	ldr	r3, [r3, #16]
 80111b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	431a      	orrs	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	611a      	str	r2, [r3, #16]
}
 80111c0:	bf00      	nop
 80111c2:	370c      	adds	r7, #12
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr

080111cc <LL_DMA_SetDataTransferDirection>:
{
 80111cc:	b480      	push	{r7}
 80111ce:	b085      	sub	sp, #20
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	60f8      	str	r0, [r7, #12]
 80111d4:	60b9      	str	r1, [r7, #8]
 80111d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80111d8:	4a0d      	ldr	r2, [pc, #52]	; (8011210 <LL_DMA_SetDataTransferDirection+0x44>)
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	4413      	add	r3, r2
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	461a      	mov	r2, r3
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	4413      	add	r3, r2
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80111ec:	4908      	ldr	r1, [pc, #32]	; (8011210 <LL_DMA_SetDataTransferDirection+0x44>)
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	440b      	add	r3, r1
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	4619      	mov	r1, r3
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	440b      	add	r3, r1
 80111fa:	4619      	mov	r1, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	4313      	orrs	r3, r2
 8011200:	600b      	str	r3, [r1, #0]
}
 8011202:	bf00      	nop
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	08016484 	.word	0x08016484

08011214 <LL_DMA_SetMode>:
{
 8011214:	b480      	push	{r7}
 8011216:	b085      	sub	sp, #20
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8011220:	4a0d      	ldr	r2, [pc, #52]	; (8011258 <LL_DMA_SetMode+0x44>)
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	4413      	add	r3, r2
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	461a      	mov	r2, r3
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	4413      	add	r3, r2
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8011234:	4908      	ldr	r1, [pc, #32]	; (8011258 <LL_DMA_SetMode+0x44>)
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	440b      	add	r3, r1
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	4619      	mov	r1, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	440b      	add	r3, r1
 8011242:	4619      	mov	r1, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4313      	orrs	r3, r2
 8011248:	600b      	str	r3, [r1, #0]
}
 801124a:	bf00      	nop
 801124c:	3714      	adds	r7, #20
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	08016484 	.word	0x08016484

0801125c <LL_DMA_SetPeriphIncMode>:
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8011268:	4a0d      	ldr	r2, [pc, #52]	; (80112a0 <LL_DMA_SetPeriphIncMode+0x44>)
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	4413      	add	r3, r2
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	461a      	mov	r2, r3
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	4413      	add	r3, r2
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801127c:	4908      	ldr	r1, [pc, #32]	; (80112a0 <LL_DMA_SetPeriphIncMode+0x44>)
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	440b      	add	r3, r1
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	4619      	mov	r1, r3
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	440b      	add	r3, r1
 801128a:	4619      	mov	r1, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4313      	orrs	r3, r2
 8011290:	600b      	str	r3, [r1, #0]
}
 8011292:	bf00      	nop
 8011294:	3714      	adds	r7, #20
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	08016484 	.word	0x08016484

080112a4 <LL_DMA_SetMemoryIncMode>:
{
 80112a4:	b480      	push	{r7}
 80112a6:	b085      	sub	sp, #20
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80112b0:	4a0d      	ldr	r2, [pc, #52]	; (80112e8 <LL_DMA_SetMemoryIncMode+0x44>)
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	4413      	add	r3, r2
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	461a      	mov	r2, r3
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	4413      	add	r3, r2
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80112c4:	4908      	ldr	r1, [pc, #32]	; (80112e8 <LL_DMA_SetMemoryIncMode+0x44>)
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	440b      	add	r3, r1
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	4619      	mov	r1, r3
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	440b      	add	r3, r1
 80112d2:	4619      	mov	r1, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	600b      	str	r3, [r1, #0]
}
 80112da:	bf00      	nop
 80112dc:	3714      	adds	r7, #20
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop
 80112e8:	08016484 	.word	0x08016484

080112ec <LL_DMA_SetPeriphSize>:
{
 80112ec:	b480      	push	{r7}
 80112ee:	b085      	sub	sp, #20
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80112f8:	4a0d      	ldr	r2, [pc, #52]	; (8011330 <LL_DMA_SetPeriphSize+0x44>)
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	4413      	add	r3, r2
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	461a      	mov	r2, r3
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	4413      	add	r3, r2
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801130c:	4908      	ldr	r1, [pc, #32]	; (8011330 <LL_DMA_SetPeriphSize+0x44>)
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	440b      	add	r3, r1
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	4619      	mov	r1, r3
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	440b      	add	r3, r1
 801131a:	4619      	mov	r1, r3
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4313      	orrs	r3, r2
 8011320:	600b      	str	r3, [r1, #0]
}
 8011322:	bf00      	nop
 8011324:	3714      	adds	r7, #20
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	08016484 	.word	0x08016484

08011334 <LL_DMA_SetMemorySize>:
{
 8011334:	b480      	push	{r7}
 8011336:	b085      	sub	sp, #20
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8011340:	4a0d      	ldr	r2, [pc, #52]	; (8011378 <LL_DMA_SetMemorySize+0x44>)
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	4413      	add	r3, r2
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	461a      	mov	r2, r3
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	4413      	add	r3, r2
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8011354:	4908      	ldr	r1, [pc, #32]	; (8011378 <LL_DMA_SetMemorySize+0x44>)
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	440b      	add	r3, r1
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	4619      	mov	r1, r3
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	440b      	add	r3, r1
 8011362:	4619      	mov	r1, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	4313      	orrs	r3, r2
 8011368:	600b      	str	r3, [r1, #0]
}
 801136a:	bf00      	nop
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop
 8011378:	08016484 	.word	0x08016484

0801137c <LL_DMA_SetStreamPriorityLevel>:
{
 801137c:	b480      	push	{r7}
 801137e:	b085      	sub	sp, #20
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8011388:	4a0d      	ldr	r2, [pc, #52]	; (80113c0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	4413      	add	r3, r2
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	461a      	mov	r2, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	4413      	add	r3, r2
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801139c:	4908      	ldr	r1, [pc, #32]	; (80113c0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	440b      	add	r3, r1
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	4619      	mov	r1, r3
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	440b      	add	r3, r1
 80113aa:	4619      	mov	r1, r3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4313      	orrs	r3, r2
 80113b0:	600b      	str	r3, [r1, #0]
}
 80113b2:	bf00      	nop
 80113b4:	3714      	adds	r7, #20
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	08016484 	.word	0x08016484

080113c4 <LL_DMA_SetChannelSelection>:
{
 80113c4:	b480      	push	{r7}
 80113c6:	b085      	sub	sp, #20
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80113d0:	4a0d      	ldr	r2, [pc, #52]	; (8011408 <LL_DMA_SetChannelSelection+0x44>)
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	4413      	add	r3, r2
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	461a      	mov	r2, r3
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	4413      	add	r3, r2
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80113e4:	4908      	ldr	r1, [pc, #32]	; (8011408 <LL_DMA_SetChannelSelection+0x44>)
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	440b      	add	r3, r1
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	4619      	mov	r1, r3
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	440b      	add	r3, r1
 80113f2:	4619      	mov	r1, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4313      	orrs	r3, r2
 80113f8:	600b      	str	r3, [r1, #0]
}
 80113fa:	bf00      	nop
 80113fc:	3714      	adds	r7, #20
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	08016484 	.word	0x08016484

0801140c <LL_DMA_DisableFifoMode>:
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8011416:	4a0c      	ldr	r2, [pc, #48]	; (8011448 <LL_DMA_DisableFifoMode+0x3c>)
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	4413      	add	r3, r2
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	461a      	mov	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4413      	add	r3, r2
 8011424:	695b      	ldr	r3, [r3, #20]
 8011426:	4908      	ldr	r1, [pc, #32]	; (8011448 <LL_DMA_DisableFifoMode+0x3c>)
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	440a      	add	r2, r1
 801142c:	7812      	ldrb	r2, [r2, #0]
 801142e:	4611      	mov	r1, r2
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	440a      	add	r2, r1
 8011434:	f023 0304 	bic.w	r3, r3, #4
 8011438:	6153      	str	r3, [r2, #20]
}
 801143a:	bf00      	nop
 801143c:	370c      	adds	r7, #12
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	08016484 	.word	0x08016484

0801144c <i2c_init>:

#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	4603      	mov	r3, r0
 8011454:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 8011456:	f7f8 f877 	bl	8009548 <vPortEnterCritical>

	switch(i2c_id) {
 801145a:	79fb      	ldrb	r3, [r7, #7]
 801145c:	2b01      	cmp	r3, #1
 801145e:	d002      	beq.n	8011466 <i2c_init+0x1a>
 8011460:	2b03      	cmp	r3, #3
 8011462:	d00f      	beq.n	8011484 <i2c_init+0x38>
 8011464:	e01d      	b.n	80114a2 <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 8011466:	f000 faab 	bl	80119c0 <i2c1_init>
		i2c1drv.i2c = I2C1;
 801146a:	4b13      	ldr	r3, [pc, #76]	; (80114b8 <i2c_init+0x6c>)
 801146c:	4a13      	ldr	r2, [pc, #76]	; (80114bc <i2c_init+0x70>)
 801146e:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 8011470:	2001      	movs	r0, #1
 8011472:	f7f8 fb5f 	bl	8009b34 <xQueueCreateMutex>
 8011476:	4603      	mov	r3, r0
 8011478:	4a0f      	ldr	r2, [pc, #60]	; (80114b8 <i2c_init+0x6c>)
 801147a:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 801147c:	4810      	ldr	r0, [pc, #64]	; (80114c0 <i2c_init+0x74>)
 801147e:	f7fe fc03 	bl	800fc88 <hal_cli_printf>
		break;
 8011482:	e012      	b.n	80114aa <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 8011484:	f000 fb64 	bl	8011b50 <i2c3_init>
		i2c3drv.i2c = I2C3;
 8011488:	4b0e      	ldr	r3, [pc, #56]	; (80114c4 <i2c_init+0x78>)
 801148a:	4a0f      	ldr	r2, [pc, #60]	; (80114c8 <i2c_init+0x7c>)
 801148c:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 801148e:	2001      	movs	r0, #1
 8011490:	f7f8 fb50 	bl	8009b34 <xQueueCreateMutex>
 8011494:	4603      	mov	r3, r0
 8011496:	4a0b      	ldr	r2, [pc, #44]	; (80114c4 <i2c_init+0x78>)
 8011498:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 801149a:	480c      	ldr	r0, [pc, #48]	; (80114cc <i2c_init+0x80>)
 801149c:	f7fe fbf4 	bl	800fc88 <hal_cli_printf>
		break;
 80114a0:	e003      	b.n	80114aa <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 80114a2:	480b      	ldr	r0, [pc, #44]	; (80114d0 <i2c_init+0x84>)
 80114a4:	f7fe fbf0 	bl	800fc88 <hal_cli_printf>
		break;
 80114a8:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 80114aa:	f7f8 f87d 	bl	80095a8 <vPortExitCritical>
}
 80114ae:	bf00      	nop
 80114b0:	3708      	adds	r7, #8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	20005984 	.word	0x20005984
 80114bc:	40005400 	.word	0x40005400
 80114c0:	08015548 	.word	0x08015548
 80114c4:	2000598c 	.word	0x2000598c
 80114c8:	40005c00 	.word	0x40005c00
 80114cc:	08015554 	.word	0x08015554
 80114d0:	08015560 	.word	0x08015560

080114d4 <hal_i2c_transfer>:

bool hal_i2c_transfer(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b08a      	sub	sp, #40	; 0x28
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6178      	str	r0, [r7, #20]
 80114dc:	60fa      	str	r2, [r7, #12]
 80114de:	60bb      	str	r3, [r7, #8]
 80114e0:	460b      	mov	r3, r1
 80114e2:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 80114e4:	2300      	movs	r3, #0
 80114e6:	627b      	str	r3, [r7, #36]	; 0x24

	timeout *= 1000;
 80114e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80114ee:	fb02 f303 	mul.w	r3, r2, r3
 80114f2:	637b      	str	r3, [r7, #52]	; 0x34

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7f8 fe25 	bl	800a14c <xQueueSemaphoreTake>
 8011502:	4603      	mov	r3, r0
 8011504:	2b01      	cmp	r3, #1
 8011506:	d004      	beq.n	8011512 <hal_i2c_transfer+0x3e>
		hal_cli_printf("i2c semaphore take timeout");
 8011508:	4899      	ldr	r0, [pc, #612]	; (8011770 <hal_i2c_transfer+0x29c>)
 801150a:	f7fe fbbd 	bl	800fc88 <hal_cli_printf>
		return false;
 801150e:	2300      	movs	r3, #0
 8011510:	e129      	b.n	8011766 <hal_i2c_transfer+0x292>
	}

	timer = hal_get_delay_timer(timeout);
 8011512:	463b      	mov	r3, r7
 8011514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011516:	4618      	mov	r0, r3
 8011518:	f7fe fe98 	bl	801024c <hal_get_delay_timer>
 801151c:	f107 031c 	add.w	r3, r7, #28
 8011520:	463a      	mov	r2, r7
 8011522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011526:	e883 0003 	stmia.w	r3, {r0, r1}

	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 801152a:	e013      	b.n	8011554 <hal_i2c_transfer+0x80>
		if(hal_delay_timer_is_expired(&timer)) {
 801152c:	f107 031c 	add.w	r3, r7, #28
 8011530:	4618      	mov	r0, r3
 8011532:	f7fe feb1 	bl	8010298 <hal_delay_timer_is_expired>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00b      	beq.n	8011554 <hal_i2c_transfer+0x80>
			xSemaphoreGive(drv->mutex);
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	6858      	ldr	r0, [r3, #4]
 8011540:	2300      	movs	r3, #0
 8011542:	2200      	movs	r2, #0
 8011544:	2100      	movs	r1, #0
 8011546:	f7f8 fb0d 	bl	8009b64 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 801154a:	488a      	ldr	r0, [pc, #552]	; (8011774 <hal_i2c_transfer+0x2a0>)
 801154c:	f7fe fb9c 	bl	800fc88 <hal_cli_printf>
			return false;
 8011550:	2300      	movs	r3, #0
 8011552:	e108      	b.n	8011766 <hal_i2c_transfer+0x292>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4618      	mov	r0, r3
 801155a:	f7ff fdbe 	bl	80110da <LL_I2C_IsActiveFlag_BUSY>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1e3      	bne.n	801152c <hal_i2c_transfer+0x58>
		}
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4618      	mov	r0, r3
 801156a:	f7ff fdee 	bl	801114a <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 801156e:	e018      	b.n	80115a2 <hal_i2c_transfer+0xce>
		if(hal_delay_timer_is_expired(&timer)) {
 8011570:	f107 031c 	add.w	r3, r7, #28
 8011574:	4618      	mov	r0, r3
 8011576:	f7fe fe8f 	bl	8010298 <hal_delay_timer_is_expired>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d010      	beq.n	80115a2 <hal_i2c_transfer+0xce>
			xSemaphoreGive(drv->mutex);
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	6858      	ldr	r0, [r3, #4]
 8011584:	2300      	movs	r3, #0
 8011586:	2200      	movs	r2, #0
 8011588:	2100      	movs	r1, #0
 801158a:	f7f8 faeb 	bl	8009b64 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4618      	mov	r0, r3
 8011594:	f7ff fde9 	bl	801116a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 8011598:	4877      	ldr	r0, [pc, #476]	; (8011778 <hal_i2c_transfer+0x2a4>)
 801159a:	f7fe fb75 	bl	800fc88 <hal_cli_printf>
			return false;
 801159e:	2300      	movs	r3, #0
 80115a0:	e0e1      	b.n	8011766 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7ff fd71 	bl	801108e <LL_I2C_IsActiveFlag_SB>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d0de      	beq.n	8011570 <hal_i2c_transfer+0x9c>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr);
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	7cfa      	ldrb	r2, [r7, #19]
 80115b8:	4611      	mov	r1, r2
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7ff fdf2 	bl	80111a4 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80115c0:	e018      	b.n	80115f4 <hal_i2c_transfer+0x120>
		if(hal_delay_timer_is_expired(&timer)) {
 80115c2:	f107 031c 	add.w	r3, r7, #28
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fe fe66 	bl	8010298 <hal_delay_timer_is_expired>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d010      	beq.n	80115f4 <hal_i2c_transfer+0x120>
			xSemaphoreGive(drv->mutex);
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	6858      	ldr	r0, [r3, #4]
 80115d6:	2300      	movs	r3, #0
 80115d8:	2200      	movs	r2, #0
 80115da:	2100      	movs	r1, #0
 80115dc:	f7f8 fac2 	bl	8009b64 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7ff fdc0 	bl	801116a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 80115ea:	4864      	ldr	r0, [pc, #400]	; (801177c <hal_i2c_transfer+0x2a8>)
 80115ec:	f7fe fb4c 	bl	800fc88 <hal_cli_printf>
			return false;
 80115f0:	2300      	movs	r3, #0
 80115f2:	e0b8      	b.n	8011766 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff fd5b 	bl	80110b4 <LL_I2C_IsActiveFlag_ADDR>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d0de      	beq.n	80115c2 <hal_i2c_transfer+0xee>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff fd79 	bl	8011100 <LL_I2C_ClearFlag_ADDR>

	/* register address transfer */
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 801160e:	e018      	b.n	8011642 <hal_i2c_transfer+0x16e>
		if(hal_delay_timer_is_expired(&timer)) {
 8011610:	f107 031c 	add.w	r3, r7, #28
 8011614:	4618      	mov	r0, r3
 8011616:	f7fe fe3f 	bl	8010298 <hal_delay_timer_is_expired>
 801161a:	4603      	mov	r3, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d010      	beq.n	8011642 <hal_i2c_transfer+0x16e>
			xSemaphoreGive(drv->mutex);
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	6858      	ldr	r0, [r3, #4]
 8011624:	2300      	movs	r3, #0
 8011626:	2200      	movs	r2, #0
 8011628:	2100      	movs	r1, #0
 801162a:	f7f8 fa9b 	bl	8009b64 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff fd99 	bl	801116a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c register address transmit timeout");
 8011638:	4851      	ldr	r0, [pc, #324]	; (8011780 <hal_i2c_transfer+0x2ac>)
 801163a:	f7fe fb25 	bl	800fc88 <hal_cli_printf>
			return false;
 801163e:	2300      	movs	r3, #0
 8011640:	e091      	b.n	8011766 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4618      	mov	r0, r3
 8011648:	f7ff fce8 	bl	801101c <LL_I2C_IsActiveFlag_TXE>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d0de      	beq.n	8011610 <hal_i2c_transfer+0x13c>
		}
	}
	LL_I2C_TransmitData8(drv->i2c, regaddr);
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	68fa      	ldr	r2, [r7, #12]
 8011658:	b2d2      	uxtb	r2, r2
 801165a:	4611      	mov	r1, r2
 801165c:	4618      	mov	r0, r3
 801165e:	f7ff fda1 	bl	80111a4 <LL_I2C_TransmitData8>


	while(index < size) {
 8011662:	e02b      	b.n	80116bc <hal_i2c_transfer+0x1e8>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8011664:	f107 031c 	add.w	r3, r7, #28
 8011668:	4618      	mov	r0, r3
 801166a:	f7fe fe15 	bl	8010298 <hal_delay_timer_is_expired>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d010      	beq.n	8011696 <hal_i2c_transfer+0x1c2>
				xSemaphoreGive(drv->mutex);
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	6858      	ldr	r0, [r3, #4]
 8011678:	2300      	movs	r3, #0
 801167a:	2200      	movs	r2, #0
 801167c:	2100      	movs	r1, #0
 801167e:	f7f8 fa71 	bl	8009b64 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff fd6f 	bl	801116a <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c TXE flag timeout");
 801168c:	483d      	ldr	r0, [pc, #244]	; (8011784 <hal_i2c_transfer+0x2b0>)
 801168e:	f7fe fafb 	bl	800fc88 <hal_cli_printf>
				return false;
 8011692:	2300      	movs	r3, #0
 8011694:	e067      	b.n	8011766 <hal_i2c_transfer+0x292>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	4618      	mov	r0, r3
 801169c:	f7ff fcbe 	bl	801101c <LL_I2C_IsActiveFlag_TXE>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d0de      	beq.n	8011664 <hal_i2c_transfer+0x190>
			}
		}

		LL_I2C_TransmitData8(drv->i2c, buf[index++]);
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	6818      	ldr	r0, [r3, #0]
 80116aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	627a      	str	r2, [r7, #36]	; 0x24
 80116b0:	68ba      	ldr	r2, [r7, #8]
 80116b2:	4413      	add	r3, r2
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	4619      	mov	r1, r3
 80116b8:	f7ff fd74 	bl	80111a4 <LL_I2C_TransmitData8>
	while(index < size) {
 80116bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d3e8      	bcc.n	8011696 <hal_i2c_transfer+0x1c2>
	}


	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80116c4:	e018      	b.n	80116f8 <hal_i2c_transfer+0x224>
		if(hal_delay_timer_is_expired(&timer)) {
 80116c6:	f107 031c 	add.w	r3, r7, #28
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7fe fde4 	bl	8010298 <hal_delay_timer_is_expired>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d010      	beq.n	80116f8 <hal_i2c_transfer+0x224>
			xSemaphoreGive(drv->mutex);
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	6858      	ldr	r0, [r3, #4]
 80116da:	2300      	movs	r3, #0
 80116dc:	2200      	movs	r2, #0
 80116de:	2100      	movs	r1, #0
 80116e0:	f7f8 fa40 	bl	8009b64 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7ff fd3e 	bl	801116a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c TXE flag timeout");
 80116ee:	4825      	ldr	r0, [pc, #148]	; (8011784 <hal_i2c_transfer+0x2b0>)
 80116f0:	f7fe faca 	bl	800fc88 <hal_cli_printf>
			return false;
 80116f4:	2300      	movs	r3, #0
 80116f6:	e036      	b.n	8011766 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7ff fc8d 	bl	801101c <LL_I2C_IsActiveFlag_TXE>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	d0de      	beq.n	80116c6 <hal_i2c_transfer+0x1f2>
		}
	}

	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 8011708:	e018      	b.n	801173c <hal_i2c_transfer+0x268>
		if(hal_delay_timer_is_expired(&timer)) {
 801170a:	f107 031c 	add.w	r3, r7, #28
 801170e:	4618      	mov	r0, r3
 8011710:	f7fe fdc2 	bl	8010298 <hal_delay_timer_is_expired>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d010      	beq.n	801173c <hal_i2c_transfer+0x268>
			xSemaphoreGive(drv->mutex);
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	6858      	ldr	r0, [r3, #4]
 801171e:	2300      	movs	r3, #0
 8011720:	2200      	movs	r2, #0
 8011722:	2100      	movs	r1, #0
 8011724:	f7f8 fa1e 	bl	8009b64 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4618      	mov	r0, r3
 801172e:	f7ff fd1c 	bl	801116a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c BTF flag timeout");
 8011732:	4815      	ldr	r0, [pc, #84]	; (8011788 <hal_i2c_transfer+0x2b4>)
 8011734:	f7fe faa8 	bl	800fc88 <hal_cli_printf>
			return false;
 8011738:	2300      	movs	r3, #0
 801173a:	e014      	b.n	8011766 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4618      	mov	r0, r3
 8011742:	f7ff fc7e 	bl	8011042 <LL_I2C_IsActiveFlag_BTF>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d0de      	beq.n	801170a <hal_i2c_transfer+0x236>
		}
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4618      	mov	r0, r3
 8011752:	f7ff fd0a 	bl	801116a <LL_I2C_GenerateStopCondition>
	xSemaphoreGive(drv->mutex);
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	6858      	ldr	r0, [r3, #4]
 801175a:	2300      	movs	r3, #0
 801175c:	2200      	movs	r2, #0
 801175e:	2100      	movs	r1, #0
 8011760:	f7f8 fa00 	bl	8009b64 <xQueueGenericSend>

	return true;
 8011764:	2301      	movs	r3, #1
}
 8011766:	4618      	mov	r0, r3
 8011768:	3728      	adds	r7, #40	; 0x28
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	08015574 	.word	0x08015574
 8011774:	08015590 	.word	0x08015590
 8011778:	080155a8 	.word	0x080155a8
 801177c:	080155c4 	.word	0x080155c4
 8011780:	080155e4 	.word	0x080155e4
 8011784:	0801560c 	.word	0x0801560c
 8011788:	08015624 	.word	0x08015624

0801178c <hal_i2c_receive>:


bool hal_i2c_receive(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 801178c:	b590      	push	{r4, r7, lr}
 801178e:	b08d      	sub	sp, #52	; 0x34
 8011790:	af02      	add	r7, sp, #8
 8011792:	6178      	str	r0, [r7, #20]
 8011794:	60fa      	str	r2, [r7, #12]
 8011796:	60bb      	str	r3, [r7, #8]
 8011798:	460b      	mov	r3, r1
 801179a:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	627b      	str	r3, [r7, #36]	; 0x24

	if(hal_i2c_transfer(drv,addr,regaddr,NULL,0,timeout) == false) {
 80117a0:	7cf9      	ldrb	r1, [r7, #19]
 80117a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a4:	9301      	str	r3, [sp, #4]
 80117a6:	2300      	movs	r3, #0
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	2300      	movs	r3, #0
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	6978      	ldr	r0, [r7, #20]
 80117b0:	f7ff fe90 	bl	80114d4 <hal_i2c_transfer>
 80117b4:	4603      	mov	r3, r0
 80117b6:	f083 0301 	eor.w	r3, r3, #1
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d004      	beq.n	80117ca <hal_i2c_receive+0x3e>
		hal_cli_printf("i2c transfer error");
 80117c0:	4879      	ldr	r0, [pc, #484]	; (80119a8 <hal_i2c_receive+0x21c>)
 80117c2:	f7fe fa61 	bl	800fc88 <hal_cli_printf>
		return false;
 80117c6:	2300      	movs	r3, #0
 80117c8:	e0ea      	b.n	80119a0 <hal_i2c_receive+0x214>
	}

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7f8 fcba 	bl	800a14c <xQueueSemaphoreTake>
 80117d8:	4603      	mov	r3, r0
 80117da:	2b01      	cmp	r3, #1
 80117dc:	d004      	beq.n	80117e8 <hal_i2c_receive+0x5c>
		hal_cli_printf("i2c semaphore take timeout");
 80117de:	4873      	ldr	r0, [pc, #460]	; (80119ac <hal_i2c_receive+0x220>)
 80117e0:	f7fe fa52 	bl	800fc88 <hal_cli_printf>
		return false;
 80117e4:	2300      	movs	r3, #0
 80117e6:	e0db      	b.n	80119a0 <hal_i2c_receive+0x214>
	}

	timer = hal_get_delay_timer(timeout);
 80117e8:	463b      	mov	r3, r7
 80117ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fe fd2d 	bl	801024c <hal_get_delay_timer>
 80117f2:	f107 031c 	add.w	r3, r7, #28
 80117f6:	463a      	mov	r2, r7
 80117f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117fc:	e883 0003 	stmia.w	r3, {r0, r1}


	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8011800:	e013      	b.n	801182a <hal_i2c_receive+0x9e>
		if(hal_delay_timer_is_expired(&timer)) {
 8011802:	f107 031c 	add.w	r3, r7, #28
 8011806:	4618      	mov	r0, r3
 8011808:	f7fe fd46 	bl	8010298 <hal_delay_timer_is_expired>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00b      	beq.n	801182a <hal_i2c_receive+0x9e>
			xSemaphoreGive(drv->mutex);
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	6858      	ldr	r0, [r3, #4]
 8011816:	2300      	movs	r3, #0
 8011818:	2200      	movs	r2, #0
 801181a:	2100      	movs	r1, #0
 801181c:	f7f8 f9a2 	bl	8009b64 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 8011820:	4863      	ldr	r0, [pc, #396]	; (80119b0 <hal_i2c_receive+0x224>)
 8011822:	f7fe fa31 	bl	800fc88 <hal_cli_printf>
			return false;
 8011826:	2300      	movs	r3, #0
 8011828:	e0ba      	b.n	80119a0 <hal_i2c_receive+0x214>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	4618      	mov	r0, r3
 8011830:	f7ff fc53 	bl	80110da <LL_I2C_IsActiveFlag_BUSY>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d1e3      	bne.n	8011802 <hal_i2c_receive+0x76>
		}
	}

	if(size == 1) {
 801183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183c:	2b01      	cmp	r3, #1
 801183e:	d106      	bne.n	801184e <hal_i2c_receive+0xc2>
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2100      	movs	r1, #0
 8011846:	4618      	mov	r0, r3
 8011848:	f7ff fc6c 	bl	8011124 <LL_I2C_AcknowledgeNextData>
 801184c:	e006      	b.n	801185c <hal_i2c_receive+0xd0>
	} else {
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_ACK);
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011856:	4618      	mov	r0, r3
 8011858:	f7ff fc64 	bl	8011124 <LL_I2C_AcknowledgeNextData>
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4618      	mov	r0, r3
 8011862:	f7ff fc72 	bl	801114a <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8011866:	e018      	b.n	801189a <hal_i2c_receive+0x10e>
		if(hal_delay_timer_is_expired(&timer)) {
 8011868:	f107 031c 	add.w	r3, r7, #28
 801186c:	4618      	mov	r0, r3
 801186e:	f7fe fd13 	bl	8010298 <hal_delay_timer_is_expired>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d010      	beq.n	801189a <hal_i2c_receive+0x10e>
			xSemaphoreGive(drv->mutex);
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	6858      	ldr	r0, [r3, #4]
 801187c:	2300      	movs	r3, #0
 801187e:	2200      	movs	r2, #0
 8011880:	2100      	movs	r1, #0
 8011882:	f7f8 f96f 	bl	8009b64 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4618      	mov	r0, r3
 801188c:	f7ff fc6d 	bl	801116a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 8011890:	4848      	ldr	r0, [pc, #288]	; (80119b4 <hal_i2c_receive+0x228>)
 8011892:	f7fe f9f9 	bl	800fc88 <hal_cli_printf>
			return false;
 8011896:	2300      	movs	r3, #0
 8011898:	e082      	b.n	80119a0 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4618      	mov	r0, r3
 80118a0:	f7ff fbf5 	bl	801108e <LL_I2C_IsActiveFlag_SB>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d0de      	beq.n	8011868 <hal_i2c_receive+0xdc>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr | 0x01);
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	7cfb      	ldrb	r3, [r7, #19]
 80118b0:	f043 0301 	orr.w	r3, r3, #1
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	4619      	mov	r1, r3
 80118b8:	4610      	mov	r0, r2
 80118ba:	f7ff fc73 	bl	80111a4 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80118be:	e018      	b.n	80118f2 <hal_i2c_receive+0x166>
		if(hal_delay_timer_is_expired(&timer)) {
 80118c0:	f107 031c 	add.w	r3, r7, #28
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fe fce7 	bl	8010298 <hal_delay_timer_is_expired>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d010      	beq.n	80118f2 <hal_i2c_receive+0x166>
			xSemaphoreGive(drv->mutex);
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	6858      	ldr	r0, [r3, #4]
 80118d4:	2300      	movs	r3, #0
 80118d6:	2200      	movs	r2, #0
 80118d8:	2100      	movs	r1, #0
 80118da:	f7f8 f943 	bl	8009b64 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7ff fc41 	bl	801116a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 80118e8:	4833      	ldr	r0, [pc, #204]	; (80119b8 <hal_i2c_receive+0x22c>)
 80118ea:	f7fe f9cd 	bl	800fc88 <hal_cli_printf>
			return false;
 80118ee:	2300      	movs	r3, #0
 80118f0:	e056      	b.n	80119a0 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7ff fbdc 	bl	80110b4 <LL_I2C_IsActiveFlag_ADDR>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0de      	beq.n	80118c0 <hal_i2c_receive+0x134>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	4618      	mov	r0, r3
 8011908:	f7ff fbfa 	bl	8011100 <LL_I2C_ClearFlag_ADDR>

	while(index < size) {
 801190c:	e037      	b.n	801197e <hal_i2c_receive+0x1f2>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 801190e:	f107 031c 	add.w	r3, r7, #28
 8011912:	4618      	mov	r0, r3
 8011914:	f7fe fcc0 	bl	8010298 <hal_delay_timer_is_expired>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d010      	beq.n	8011940 <hal_i2c_receive+0x1b4>
				xSemaphoreGive(drv->mutex);
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	6858      	ldr	r0, [r3, #4]
 8011922:	2300      	movs	r3, #0
 8011924:	2200      	movs	r2, #0
 8011926:	2100      	movs	r1, #0
 8011928:	f7f8 f91c 	bl	8009b64 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4618      	mov	r0, r3
 8011932:	f7ff fc1a 	bl	801116a <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c RXNE flag timeout");
 8011936:	4821      	ldr	r0, [pc, #132]	; (80119bc <hal_i2c_receive+0x230>)
 8011938:	f7fe f9a6 	bl	800fc88 <hal_cli_printf>
				return false;
 801193c:	2300      	movs	r3, #0
 801193e:	e02f      	b.n	80119a0 <hal_i2c_receive+0x214>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4618      	mov	r0, r3
 8011946:	f7ff fb8f 	bl	8011068 <LL_I2C_IsActiveFlag_RXNE>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d0de      	beq.n	801190e <hal_i2c_receive+0x182>
			}
		}
		buf[index++] = LL_I2C_ReceiveData8(drv->i2c);
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	6819      	ldr	r1, [r3, #0]
 8011954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011956:	1c5a      	adds	r2, r3, #1
 8011958:	627a      	str	r2, [r7, #36]	; 0x24
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	18d4      	adds	r4, r2, r3
 801195e:	4608      	mov	r0, r1
 8011960:	f7ff fc13 	bl	801118a <LL_I2C_ReceiveData8>
 8011964:	4603      	mov	r3, r0
 8011966:	7023      	strb	r3, [r4, #0]

		if(index == size - 1)
 8011968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196a:	3b01      	subs	r3, #1
 801196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801196e:	429a      	cmp	r2, r3
 8011970:	d105      	bne.n	801197e <hal_i2c_receive+0x1f2>
			LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2100      	movs	r1, #0
 8011978:	4618      	mov	r0, r3
 801197a:	f7ff fbd3 	bl	8011124 <LL_I2C_AcknowledgeNextData>
	while(index < size) {
 801197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011982:	429a      	cmp	r2, r3
 8011984:	d3dc      	bcc.n	8011940 <hal_i2c_receive+0x1b4>
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	4618      	mov	r0, r3
 801198c:	f7ff fbed 	bl	801116a <LL_I2C_GenerateStopCondition>

	xSemaphoreGive(drv->mutex);
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	6858      	ldr	r0, [r3, #4]
 8011994:	2300      	movs	r3, #0
 8011996:	2200      	movs	r2, #0
 8011998:	2100      	movs	r1, #0
 801199a:	f7f8 f8e3 	bl	8009b64 <xQueueGenericSend>

	return true;
 801199e:	2301      	movs	r3, #1
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	372c      	adds	r7, #44	; 0x2c
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd90      	pop	{r4, r7, pc}
 80119a8:	0801563c 	.word	0x0801563c
 80119ac:	08015574 	.word	0x08015574
 80119b0:	08015590 	.word	0x08015590
 80119b4:	080155a8 	.word	0x080155a8
 80119b8:	080155c4 	.word	0x080155c4
 80119bc:	08015650 	.word	0x08015650

080119c0 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08a      	sub	sp, #40	; 0x28
 80119c4:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80119c6:	463b      	mov	r3, r7
 80119c8:	2220      	movs	r2, #32
 80119ca:	2100      	movs	r1, #0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f002 fff1 	bl	80149b4 <memset>

	hal_gpio_init_alt(
 80119d2:	2304      	movs	r3, #4
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	2303      	movs	r3, #3
 80119d8:	2200      	movs	r2, #0
 80119da:	2104      	movs	r1, #4
 80119dc:	4857      	ldr	r0, [pc, #348]	; (8011b3c <i2c1_init+0x17c>)
 80119de:	f7fe fec3 	bl	8010768 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 80119e2:	2304      	movs	r3, #4
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	2303      	movs	r3, #3
 80119e8:	2200      	movs	r2, #0
 80119ea:	2104      	movs	r1, #4
 80119ec:	4854      	ldr	r0, [pc, #336]	; (8011b40 <i2c1_init+0x180>)
 80119ee:	f7fe febb 	bl	8010768 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_TX_STREAM, DMA_I2C1_TX_CHANNEL);
 80119f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80119f6:	2106      	movs	r1, #6
 80119f8:	4852      	ldr	r0, [pc, #328]	; (8011b44 <i2c1_init+0x184>)
 80119fa:	f7ff fce3 	bl	80113c4 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80119fe:	2240      	movs	r2, #64	; 0x40
 8011a00:	2106      	movs	r1, #6
 8011a02:	4850      	ldr	r0, [pc, #320]	; (8011b44 <i2c1_init+0x184>)
 8011a04:	f7ff fbe2 	bl	80111cc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011a08:	2200      	movs	r2, #0
 8011a0a:	2106      	movs	r1, #6
 8011a0c:	484d      	ldr	r0, [pc, #308]	; (8011b44 <i2c1_init+0x184>)
 8011a0e:	f7ff fcb5 	bl	801137c <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011a12:	2200      	movs	r2, #0
 8011a14:	2106      	movs	r1, #6
 8011a16:	484b      	ldr	r0, [pc, #300]	; (8011b44 <i2c1_init+0x184>)
 8011a18:	f7ff fbfc 	bl	8011214 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	2106      	movs	r1, #6
 8011a20:	4848      	ldr	r0, [pc, #288]	; (8011b44 <i2c1_init+0x184>)
 8011a22:	f7ff fc1b 	bl	801125c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011a2a:	2106      	movs	r1, #6
 8011a2c:	4845      	ldr	r0, [pc, #276]	; (8011b44 <i2c1_init+0x184>)
 8011a2e:	f7ff fc39 	bl	80112a4 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011a32:	2200      	movs	r2, #0
 8011a34:	2106      	movs	r1, #6
 8011a36:	4843      	ldr	r0, [pc, #268]	; (8011b44 <i2c1_init+0x184>)
 8011a38:	f7ff fc58 	bl	80112ec <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	2106      	movs	r1, #6
 8011a40:	4840      	ldr	r0, [pc, #256]	; (8011b44 <i2c1_init+0x184>)
 8011a42:	f7ff fc77 	bl	8011334 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_TX_STREAM);
 8011a46:	2106      	movs	r1, #6
 8011a48:	483e      	ldr	r0, [pc, #248]	; (8011b44 <i2c1_init+0x184>)
 8011a4a:	f7ff fcdf 	bl	801140c <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_RX_STREAM, DMA_I2C1_RX_CHANNEL);
 8011a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011a52:	2100      	movs	r1, #0
 8011a54:	483b      	ldr	r0, [pc, #236]	; (8011b44 <i2c1_init+0x184>)
 8011a56:	f7ff fcb5 	bl	80113c4 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2100      	movs	r1, #0
 8011a5e:	4839      	ldr	r0, [pc, #228]	; (8011b44 <i2c1_init+0x184>)
 8011a60:	f7ff fbb4 	bl	80111cc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8011a64:	2200      	movs	r2, #0
 8011a66:	2100      	movs	r1, #0
 8011a68:	4836      	ldr	r0, [pc, #216]	; (8011b44 <i2c1_init+0x184>)
 8011a6a:	f7ff fc87 	bl	801137c <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MODE_NORMAL);
 8011a6e:	2200      	movs	r2, #0
 8011a70:	2100      	movs	r1, #0
 8011a72:	4834      	ldr	r0, [pc, #208]	; (8011b44 <i2c1_init+0x184>)
 8011a74:	f7ff fbce 	bl	8011214 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011a78:	2200      	movs	r2, #0
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	4831      	ldr	r0, [pc, #196]	; (8011b44 <i2c1_init+0x184>)
 8011a7e:	f7ff fbed 	bl	801125c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011a86:	2100      	movs	r1, #0
 8011a88:	482e      	ldr	r0, [pc, #184]	; (8011b44 <i2c1_init+0x184>)
 8011a8a:	f7ff fc0b 	bl	80112a4 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011a8e:	2200      	movs	r2, #0
 8011a90:	2100      	movs	r1, #0
 8011a92:	482c      	ldr	r0, [pc, #176]	; (8011b44 <i2c1_init+0x184>)
 8011a94:	f7ff fc2a 	bl	80112ec <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011a98:	2200      	movs	r2, #0
 8011a9a:	2100      	movs	r1, #0
 8011a9c:	4829      	ldr	r0, [pc, #164]	; (8011b44 <i2c1_init+0x184>)
 8011a9e:	f7ff fc49 	bl	8011334 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_RX_STREAM);
 8011aa2:	2100      	movs	r1, #0
 8011aa4:	4827      	ldr	r0, [pc, #156]	; (8011b44 <i2c1_init+0x184>)
 8011aa6:	f7ff fcb1 	bl	801140c <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011aaa:	f7ff f9eb 	bl	8010e84 <__NVIC_GetPriorityGrouping>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	2105      	movs	r1, #5
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7ff fa3b 	bl	8010f30 <NVIC_EncodePriority>
 8011aba:	4603      	mov	r3, r0
 8011abc:	4619      	mov	r1, r3
 8011abe:	201f      	movs	r0, #31
 8011ac0:	f7ff fa0c 	bl	8010edc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8011ac4:	201f      	movs	r0, #31
 8011ac6:	f7ff f9eb 	bl	8010ea0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011aca:	f7ff f9db 	bl	8010e84 <__NVIC_GetPriorityGrouping>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	2105      	movs	r1, #5
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7ff fa2b 	bl	8010f30 <NVIC_EncodePriority>
 8011ada:	4603      	mov	r3, r0
 8011adc:	4619      	mov	r1, r3
 8011ade:	2020      	movs	r0, #32
 8011ae0:	f7ff f9fc 	bl	8010edc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8011ae4:	2020      	movs	r0, #32
 8011ae6:	f7ff f9db 	bl	8010ea0 <__NVIC_EnableIRQ>

  /* I2C Initialization */
  LL_I2C_DisableOwnAddress2(I2C1);
 8011aea:	4817      	ldr	r0, [pc, #92]	; (8011b48 <i2c1_init+0x188>)
 8011aec:	f7ff fa86 	bl	8010ffc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8011af0:	4815      	ldr	r0, [pc, #84]	; (8011b48 <i2c1_init+0x188>)
 8011af2:	f7ff fa60 	bl	8010fb6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8011af6:	4814      	ldr	r0, [pc, #80]	; (8011b48 <i2c1_init+0x188>)
 8011af8:	f7ff fa4d 	bl	8010f96 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8011afc:	2300      	movs	r3, #0
 8011afe:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 400000;
 8011b00:	4b12      	ldr	r3, [pc, #72]	; (8011b4c <i2c1_init+0x18c>)
 8011b02:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8011b04:	2300      	movs	r3, #0
 8011b06:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8011b10:	2300      	movs	r3, #0
 8011b12:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8011b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b18:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8011b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011b1e:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8011b20:	463b      	mov	r3, r7
 8011b22:	4619      	mov	r1, r3
 8011b24:	4808      	ldr	r0, [pc, #32]	; (8011b48 <i2c1_init+0x188>)
 8011b26:	f7f2 f8b5 	bl	8003c94 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	4806      	ldr	r0, [pc, #24]	; (8011b48 <i2c1_init+0x188>)
 8011b2e:	f7ff fa52 	bl	8010fd6 <LL_I2C_SetOwnAddress2>
}
 8011b32:	bf00      	nop
 8011b34:	3720      	adds	r7, #32
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	080164dc 	.word	0x080164dc
 8011b40:	080164e4 	.word	0x080164e4
 8011b44:	40026000 	.word	0x40026000
 8011b48:	40005400 	.word	0x40005400
 8011b4c:	00061a80 	.word	0x00061a80

08011b50 <i2c3_init>:

static void i2c3_init(void)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b08a      	sub	sp, #40	; 0x28
 8011b54:	af02      	add	r7, sp, #8
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8011b56:	463b      	mov	r3, r7
 8011b58:	2220      	movs	r2, #32
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f002 ff29 	bl	80149b4 <memset>

	hal_gpio_init_alt(
 8011b62:	2304      	movs	r3, #4
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	2303      	movs	r3, #3
 8011b68:	2200      	movs	r2, #0
 8011b6a:	2104      	movs	r1, #4
 8011b6c:	4829      	ldr	r0, [pc, #164]	; (8011c14 <i2c3_init+0xc4>)
 8011b6e:	f7fe fdfb 	bl	8010768 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

	hal_gpio_init_alt(
 8011b72:	2304      	movs	r3, #4
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	2303      	movs	r3, #3
 8011b78:	2200      	movs	r2, #0
 8011b7a:	2104      	movs	r1, #4
 8011b7c:	4826      	ldr	r0, [pc, #152]	; (8011c18 <i2c3_init+0xc8>)
 8011b7e:	f7fe fdf3 	bl	8010768 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011b82:	f7ff f97f 	bl	8010e84 <__NVIC_GetPriorityGrouping>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2200      	movs	r2, #0
 8011b8a:	2105      	movs	r1, #5
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7ff f9cf 	bl	8010f30 <NVIC_EncodePriority>
 8011b92:	4603      	mov	r3, r0
 8011b94:	4619      	mov	r1, r3
 8011b96:	2048      	movs	r0, #72	; 0x48
 8011b98:	f7ff f9a0 	bl	8010edc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 8011b9c:	2048      	movs	r0, #72	; 0x48
 8011b9e:	f7ff f97f 	bl	8010ea0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011ba2:	f7ff f96f 	bl	8010e84 <__NVIC_GetPriorityGrouping>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2200      	movs	r2, #0
 8011baa:	2105      	movs	r1, #5
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff f9bf 	bl	8010f30 <NVIC_EncodePriority>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	2049      	movs	r0, #73	; 0x49
 8011bb8:	f7ff f990 	bl	8010edc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 8011bbc:	2049      	movs	r0, #73	; 0x49
 8011bbe:	f7ff f96f 	bl	8010ea0 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8011bc2:	4816      	ldr	r0, [pc, #88]	; (8011c1c <i2c3_init+0xcc>)
 8011bc4:	f7ff fa1a 	bl	8010ffc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8011bc8:	4814      	ldr	r0, [pc, #80]	; (8011c1c <i2c3_init+0xcc>)
 8011bca:	f7ff f9f4 	bl	8010fb6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8011bce:	4813      	ldr	r0, [pc, #76]	; (8011c1c <i2c3_init+0xcc>)
 8011bd0:	f7ff f9e1 	bl	8010f96 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 8011bd8:	4b11      	ldr	r3, [pc, #68]	; (8011c20 <i2c3_init+0xd0>)
 8011bda:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8011be0:	2300      	movs	r3, #0
 8011be2:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8011be4:	2300      	movs	r3, #0
 8011be6:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8011be8:	2300      	movs	r3, #0
 8011bea:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8011bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bf0:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8011bf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011bf6:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8011bf8:	463b      	mov	r3, r7
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	4807      	ldr	r0, [pc, #28]	; (8011c1c <i2c3_init+0xcc>)
 8011bfe:	f7f2 f849 	bl	8003c94 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8011c02:	2100      	movs	r1, #0
 8011c04:	4805      	ldr	r0, [pc, #20]	; (8011c1c <i2c3_init+0xcc>)
 8011c06:	f7ff f9e6 	bl	8010fd6 <LL_I2C_SetOwnAddress2>
}
 8011c0a:	bf00      	nop
 8011c0c:	3720      	adds	r7, #32
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	080164ec 	.word	0x080164ec
 8011c18:	080164f4 	.word	0x080164f4
 8011c1c:	40005c00 	.word	0x40005c00
 8011c20:	000186a0 	.word	0x000186a0

08011c24 <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 8011c24:	b480      	push	{r7}
 8011c26:	af00      	add	r7, sp, #0

}
 8011c28:	bf00      	nop
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr

08011c32 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8011c32:	b480      	push	{r7}
 8011c34:	af00      	add	r7, sp, #0

}
 8011c36:	bf00      	nop
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr

08011c40 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8011c40:	b480      	push	{r7}
 8011c42:	af00      	add	r7, sp, #0

}
 8011c44:	bf00      	nop
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr

08011c4e <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8011c4e:	b480      	push	{r7}
 8011c50:	af00      	add	r7, sp, #0

}
 8011c52:	bf00      	nop
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr

08011c5c <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	af00      	add	r7, sp, #0

}
 8011c60:	bf00      	nop
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr

08011c6a <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 8011c6a:	b480      	push	{r7}
 8011c6c:	af00      	add	r7, sp, #0

}
 8011c6e:	bf00      	nop
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr

08011c78 <initThread>:
#include "input_app.h"

#include "event.h"


static void initThread(void* param) {
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af02      	add	r7, sp, #8
 8011c7e:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter initThread");
 8011c80:	482a      	ldr	r0, [pc, #168]	; (8011d2c <initThread+0xb4>)
 8011c82:	f7fe f801 	bl	800fc88 <hal_cli_printf>

	sdio_init();
 8011c86:	f000 fa21 	bl	80120cc <sdio_init>
	MX_FATFS_Init();
 8011c8a:	f7f3 fd21 	bl	80056d0 <MX_FATFS_Init>

	i2c_init(I2cId1);
 8011c8e:	2001      	movs	r0, #1
 8011c90:	f7ff fbdc 	bl	801144c <i2c_init>
	i2c_init(I2cId3);
 8011c94:	2003      	movs	r0, #3
 8011c96:	f7ff fbd9 	bl	801144c <i2c_init>

	spi_init(SpiId2);
 8011c9a:	2002      	movs	r0, #2
 8011c9c:	f000 fd7c 	bl	8012798 <spi_init>
	spi_init(SpiId4);
 8011ca0:	2004      	movs	r0, #4
 8011ca2:	f000 fd79 	bl	8012798 <spi_init>

	adc_init(AdcId1);
 8011ca6:	2001      	movs	r0, #1
 8011ca8:	f7fd fe40 	bl	800f92c <adc_init>

	tim_init(TimId4);
 8011cac:	2004      	movs	r0, #4
 8011cae:	f001 fb81 	bl	80133b4 <tim_init>

	hal_resources_init();
 8011cb2:	f000 f93f 	bl	8011f34 <hal_resources_init>

	xTaskCreate(mp3Thread, "mp3player", 512, NULL, 3, NULL);
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	9301      	str	r3, [sp, #4]
 8011cba:	2303      	movs	r3, #3
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cc4:	491a      	ldr	r1, [pc, #104]	; (8011d30 <initThread+0xb8>)
 8011cc6:	481b      	ldr	r0, [pc, #108]	; (8011d34 <initThread+0xbc>)
 8011cc8:	f7f8 fd67 	bl	800a79a <xTaskCreate>
	xTaskCreate(displayThread, "display", 512, NULL, 3, NULL);
 8011ccc:	2300      	movs	r3, #0
 8011cce:	9301      	str	r3, [sp, #4]
 8011cd0:	2303      	movs	r3, #3
 8011cd2:	9300      	str	r3, [sp, #0]
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cda:	4917      	ldr	r1, [pc, #92]	; (8011d38 <initThread+0xc0>)
 8011cdc:	4817      	ldr	r0, [pc, #92]	; (8011d3c <initThread+0xc4>)
 8011cde:	f7f8 fd5c 	bl	800a79a <xTaskCreate>
	xTaskCreate(inputThread, "input", 256, NULL, 3, NULL);
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	9301      	str	r3, [sp, #4]
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	2300      	movs	r3, #0
 8011cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011cf0:	4913      	ldr	r1, [pc, #76]	; (8011d40 <initThread+0xc8>)
 8011cf2:	4814      	ldr	r0, [pc, #80]	; (8011d44 <initThread+0xcc>)
 8011cf4:	f7f8 fd51 	bl	800a79a <xTaskCreate>

	mp3_queue = xQueueCreate(10, sizeof(InputEvent));
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2108      	movs	r1, #8
 8011cfc:	200a      	movs	r0, #10
 8011cfe:	f7f7 fe73 	bl	80099e8 <xQueueGenericCreate>
 8011d02:	4603      	mov	r3, r0
 8011d04:	4a10      	ldr	r2, [pc, #64]	; (8011d48 <initThread+0xd0>)
 8011d06:	6013      	str	r3, [r2, #0]
	display_queue = xQueueCreate(10, sizeof(InputEvent));
 8011d08:	2200      	movs	r2, #0
 8011d0a:	2108      	movs	r1, #8
 8011d0c:	200a      	movs	r0, #10
 8011d0e:	f7f7 fe6b 	bl	80099e8 <xQueueGenericCreate>
 8011d12:	4603      	mov	r3, r0
 8011d14:	4a0d      	ldr	r2, [pc, #52]	; (8011d4c <initThread+0xd4>)
 8011d16:	6013      	str	r3, [r2, #0]

	hal_cli_printf("exit initThread");
 8011d18:	480d      	ldr	r0, [pc, #52]	; (8011d50 <initThread+0xd8>)
 8011d1a:	f7fd ffb5 	bl	800fc88 <hal_cli_printf>

	vTaskDelete(NULL);
 8011d1e:	2000      	movs	r0, #0
 8011d20:	f7f8 fea4 	bl	800aa6c <vTaskDelete>
}
 8011d24:	bf00      	nop
 8011d26:	3708      	adds	r7, #8
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	08015668 	.word	0x08015668
 8011d30:	0801567c 	.word	0x0801567c
 8011d34:	080144d9 	.word	0x080144d9
 8011d38:	08015688 	.word	0x08015688
 8011d3c:	080140f5 	.word	0x080140f5
 8011d40:	08015690 	.word	0x08015690
 8011d44:	0801431d 	.word	0x0801431d
 8011d48:	20006ebc 	.word	0x20006ebc
 8011d4c:	20006ec0 	.word	0x20006ec0
 8011d50:	08015698 	.word	0x08015698

08011d54 <main>:

int main(void) {
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af02      	add	r7, sp, #8
	HAL_Init();
 8011d5a:	f7ef f979 	bl	8001050 <HAL_Init>

	hal_bus_init_early();
 8011d5e:	f7fe f99b 	bl	8010098 <hal_bus_init_early>
	hal_clock_init_early();
 8011d62:	f7fe f9db 	bl	801011c <hal_clock_init_early>
	hal_dwt_init_early();
 8011d66:	f7fe fa31 	bl	80101cc <hal_dwt_init_early>

	hal_resources_init_early();
 8011d6a:	f000 f8c7 	bl	8011efc <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 8011d6e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8011d72:	2000      	movs	r0, #0
 8011d74:	f001 ff00 	bl	8013b78 <hal_uart_init>
	hal_cli_init();
 8011d78:	f7fd ffc0 	bl	800fcfc <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 8011d7c:	4809      	ldr	r0, [pc, #36]	; (8011da4 <main+0x50>)
 8011d7e:	f7fd ff83 	bl	800fc88 <hal_cli_printf>

	traceSTART();
 8011d82:	f7fb fdc5 	bl	800d910 <SEGGER_SYSVIEW_Conf>
	xTaskCreate(initThread, "init", 256, NULL, 3, NULL);
 8011d86:	2300      	movs	r3, #0
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	2303      	movs	r3, #3
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d94:	4904      	ldr	r1, [pc, #16]	; (8011da8 <main+0x54>)
 8011d96:	4805      	ldr	r0, [pc, #20]	; (8011dac <main+0x58>)
 8011d98:	f7f8 fcff 	bl	800a79a <xTaskCreate>
	vTaskStartScheduler();
 8011d9c:	f7f8 fef2 	bl	800ab84 <vTaskStartScheduler>

	for(;;);
 8011da0:	e7fe      	b.n	8011da0 <main+0x4c>
 8011da2:	bf00      	nop
 8011da4:	080156a8 	.word	0x080156a8
 8011da8:	080156c0 	.word	0x080156c0
 8011dac:	08011c79 	.word	0x08011c79

08011db0 <__NVIC_GetPriorityGrouping>:
{
 8011db0:	b480      	push	{r7}
 8011db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011db4:	4b04      	ldr	r3, [pc, #16]	; (8011dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	0a1b      	lsrs	r3, r3, #8
 8011dba:	f003 0307 	and.w	r3, r3, #7
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr
 8011dc8:	e000ed00 	.word	0xe000ed00

08011dcc <__NVIC_EnableIRQ>:
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	db0b      	blt.n	8011df6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011dde:	79fb      	ldrb	r3, [r7, #7]
 8011de0:	f003 021f 	and.w	r2, r3, #31
 8011de4:	4907      	ldr	r1, [pc, #28]	; (8011e04 <__NVIC_EnableIRQ+0x38>)
 8011de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011dea:	095b      	lsrs	r3, r3, #5
 8011dec:	2001      	movs	r0, #1
 8011dee:	fa00 f202 	lsl.w	r2, r0, r2
 8011df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011df6:	bf00      	nop
 8011df8:	370c      	adds	r7, #12
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	e000e100 	.word	0xe000e100

08011e08 <__NVIC_SetPriority>:
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	4603      	mov	r3, r0
 8011e10:	6039      	str	r1, [r7, #0]
 8011e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	db0a      	blt.n	8011e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	b2da      	uxtb	r2, r3
 8011e20:	490c      	ldr	r1, [pc, #48]	; (8011e54 <__NVIC_SetPriority+0x4c>)
 8011e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e26:	0112      	lsls	r2, r2, #4
 8011e28:	b2d2      	uxtb	r2, r2
 8011e2a:	440b      	add	r3, r1
 8011e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011e30:	e00a      	b.n	8011e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	b2da      	uxtb	r2, r3
 8011e36:	4908      	ldr	r1, [pc, #32]	; (8011e58 <__NVIC_SetPriority+0x50>)
 8011e38:	79fb      	ldrb	r3, [r7, #7]
 8011e3a:	f003 030f 	and.w	r3, r3, #15
 8011e3e:	3b04      	subs	r3, #4
 8011e40:	0112      	lsls	r2, r2, #4
 8011e42:	b2d2      	uxtb	r2, r2
 8011e44:	440b      	add	r3, r1
 8011e46:	761a      	strb	r2, [r3, #24]
}
 8011e48:	bf00      	nop
 8011e4a:	370c      	adds	r7, #12
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr
 8011e54:	e000e100 	.word	0xe000e100
 8011e58:	e000ed00 	.word	0xe000ed00

08011e5c <NVIC_EncodePriority>:
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b089      	sub	sp, #36	; 0x24
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f003 0307 	and.w	r3, r3, #7
 8011e6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	f1c3 0307 	rsb	r3, r3, #7
 8011e76:	2b04      	cmp	r3, #4
 8011e78:	bf28      	it	cs
 8011e7a:	2304      	movcs	r3, #4
 8011e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	3304      	adds	r3, #4
 8011e82:	2b06      	cmp	r3, #6
 8011e84:	d902      	bls.n	8011e8c <NVIC_EncodePriority+0x30>
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	3b03      	subs	r3, #3
 8011e8a:	e000      	b.n	8011e8e <NVIC_EncodePriority+0x32>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	fa02 f303 	lsl.w	r3, r2, r3
 8011e9a:	43da      	mvns	r2, r3
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	401a      	ands	r2, r3
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8011eae:	43d9      	mvns	r1, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011eb4:	4313      	orrs	r3, r2
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3724      	adds	r7, #36	; 0x24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr

08011ec2 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8011ec2:	b480      	push	{r7}
 8011ec4:	b083      	sub	sp, #12
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8011ece:	78fb      	ldrb	r3, [r7, #3]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d005      	beq.n	8011ee0 <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	889a      	ldrh	r2, [r3, #4]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8011ede:	e006      	b.n	8011eee <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	889b      	ldrh	r3, [r3, #4]
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	0412      	lsls	r2, r2, #16
 8011eec:	619a      	str	r2, [r3, #24]
}
 8011eee:	bf00      	nop
 8011ef0:	370c      	adds	r7, #12
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr
	...

08011efc <hal_resources_init_early>:
		{.gpio = &gpio_button_center, .key = InputKeyCenter},
		{.gpio = &gpio_button_up, .key = InputKeyUp},
		{.gpio = &gpio_button_down, .key = InputKeyDown},
};

void hal_resources_init_early(void) {
 8011efc:	b580      	push	{r7, lr}
 8011efe:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8011f00:	2300      	movs	r3, #0
 8011f02:	2201      	movs	r2, #1
 8011f04:	2101      	movs	r1, #1
 8011f06:	4809      	ldr	r0, [pc, #36]	; (8011f2c <hal_resources_init_early+0x30>)
 8011f08:	f7fe fc14 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 8011f0c:	2101      	movs	r1, #1
 8011f0e:	4807      	ldr	r0, [pc, #28]	; (8011f2c <hal_resources_init_early+0x30>)
 8011f10:	f7ff ffd7 	bl	8011ec2 <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8011f14:	2300      	movs	r3, #0
 8011f16:	2201      	movs	r2, #1
 8011f18:	2101      	movs	r1, #1
 8011f1a:	4805      	ldr	r0, [pc, #20]	; (8011f30 <hal_resources_init_early+0x34>)
 8011f1c:	f7fe fc0a 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 8011f20:	2101      	movs	r1, #1
 8011f22:	4803      	ldr	r0, [pc, #12]	; (8011f30 <hal_resources_init_early+0x34>)
 8011f24:	f7ff ffcd 	bl	8011ec2 <hal_gpio_write>
}
 8011f28:	bf00      	nop
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	0801648c 	.word	0x0801648c
 8011f30:	08016494 	.word	0x08016494

08011f34 <hal_resources_init>:

void hal_resources_init(void) {
 8011f34:	b580      	push	{r7, lr}
 8011f36:	af00      	add	r7, sp, #0
	/* button */
	hal_gpio_init(&gpio_button_left, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011f38:	2300      	movs	r3, #0
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	2107      	movs	r1, #7
 8011f3e:	4857      	ldr	r0, [pc, #348]	; (801209c <hal_resources_init+0x168>)
 8011f40:	f7fe fbf8 	bl	8010734 <hal_gpio_init>
	hal_gpio_init(&gpio_button_right, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011f44:	2300      	movs	r3, #0
 8011f46:	2201      	movs	r2, #1
 8011f48:	2107      	movs	r1, #7
 8011f4a:	4855      	ldr	r0, [pc, #340]	; (80120a0 <hal_resources_init+0x16c>)
 8011f4c:	f7fe fbf2 	bl	8010734 <hal_gpio_init>
	hal_gpio_init(&gpio_button_center, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011f50:	2300      	movs	r3, #0
 8011f52:	2201      	movs	r2, #1
 8011f54:	2107      	movs	r1, #7
 8011f56:	4853      	ldr	r0, [pc, #332]	; (80120a4 <hal_resources_init+0x170>)
 8011f58:	f7fe fbec 	bl	8010734 <hal_gpio_init>
	hal_gpio_init(&gpio_button_up, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	2201      	movs	r2, #1
 8011f60:	2107      	movs	r1, #7
 8011f62:	4851      	ldr	r0, [pc, #324]	; (80120a8 <hal_resources_init+0x174>)
 8011f64:	f7fe fbe6 	bl	8010734 <hal_gpio_init>
	hal_gpio_init(&gpio_button_down, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011f68:	2300      	movs	r3, #0
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	2107      	movs	r1, #7
 8011f6e:	484f      	ldr	r0, [pc, #316]	; (80120ac <hal_resources_init+0x178>)
 8011f70:	f7fe fbe0 	bl	8010734 <hal_gpio_init>

	NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011f74:	f7ff ff1c 	bl	8011db0 <__NVIC_GetPriorityGrouping>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	2105      	movs	r1, #5
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7ff ff6c 	bl	8011e5c <NVIC_EncodePriority>
 8011f84:	4603      	mov	r3, r0
 8011f86:	4619      	mov	r1, r3
 8011f88:	2006      	movs	r0, #6
 8011f8a:	f7ff ff3d 	bl	8011e08 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8011f8e:	2006      	movs	r0, #6
 8011f90:	f7ff ff1c 	bl	8011dcc <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011f94:	f7ff ff0c 	bl	8011db0 <__NVIC_GetPriorityGrouping>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	2105      	movs	r1, #5
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7ff ff5c 	bl	8011e5c <NVIC_EncodePriority>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	2007      	movs	r0, #7
 8011faa:	f7ff ff2d 	bl	8011e08 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI1_IRQn);
 8011fae:	2007      	movs	r0, #7
 8011fb0:	f7ff ff0c 	bl	8011dcc <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011fb4:	f7ff fefc 	bl	8011db0 <__NVIC_GetPriorityGrouping>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2200      	movs	r2, #0
 8011fbc:	2105      	movs	r1, #5
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7ff ff4c 	bl	8011e5c <NVIC_EncodePriority>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	2017      	movs	r0, #23
 8011fca:	f7ff ff1d 	bl	8011e08 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8011fce:	2017      	movs	r0, #23
 8011fd0:	f7ff fefc 	bl	8011dcc <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011fd4:	f7ff feec 	bl	8011db0 <__NVIC_GetPriorityGrouping>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	2200      	movs	r2, #0
 8011fdc:	2105      	movs	r1, #5
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7ff ff3c 	bl	8011e5c <NVIC_EncodePriority>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	2009      	movs	r0, #9
 8011fea:	f7ff ff0d 	bl	8011e08 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8011fee:	2009      	movs	r0, #9
 8011ff0:	f7ff feec 	bl	8011dcc <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011ff4:	f7ff fedc 	bl	8011db0 <__NVIC_GetPriorityGrouping>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	2105      	movs	r1, #5
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7ff ff2c 	bl	8011e5c <NVIC_EncodePriority>
 8012004:	4603      	mov	r3, r0
 8012006:	4619      	mov	r1, r3
 8012008:	200a      	movs	r0, #10
 801200a:	f7ff fefd 	bl	8011e08 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn);
 801200e:	200a      	movs	r0, #10
 8012010:	f7ff fedc 	bl	8011dcc <__NVIC_EnableIRQ>

	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8012014:	2300      	movs	r3, #0
 8012016:	2201      	movs	r2, #1
 8012018:	2101      	movs	r1, #1
 801201a:	4825      	ldr	r0, [pc, #148]	; (80120b0 <hal_resources_init+0x17c>)
 801201c:	f7fe fb8a 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 8012020:	2101      	movs	r1, #1
 8012022:	4823      	ldr	r0, [pc, #140]	; (80120b0 <hal_resources_init+0x17c>)
 8012024:	f7ff ff4d 	bl	8011ec2 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8012028:	2300      	movs	r3, #0
 801202a:	2201      	movs	r2, #1
 801202c:	2101      	movs	r1, #1
 801202e:	4821      	ldr	r0, [pc, #132]	; (80120b4 <hal_resources_init+0x180>)
 8012030:	f7fe fb80 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 8012034:	2101      	movs	r1, #1
 8012036:	481f      	ldr	r0, [pc, #124]	; (80120b4 <hal_resources_init+0x180>)
 8012038:	f7ff ff43 	bl	8011ec2 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 801203c:	2300      	movs	r3, #0
 801203e:	2201      	movs	r2, #1
 8012040:	2101      	movs	r1, #1
 8012042:	481d      	ldr	r0, [pc, #116]	; (80120b8 <hal_resources_init+0x184>)
 8012044:	f7fe fb76 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 8012048:	2101      	movs	r1, #1
 801204a:	481b      	ldr	r0, [pc, #108]	; (80120b8 <hal_resources_init+0x184>)
 801204c:	f7ff ff39 	bl	8011ec2 <hal_gpio_write>

	/* vs1053 */
	hal_gpio_init(&gpio_vs1053_cs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8012050:	2300      	movs	r3, #0
 8012052:	2200      	movs	r2, #0
 8012054:	2101      	movs	r1, #1
 8012056:	4819      	ldr	r0, [pc, #100]	; (80120bc <hal_resources_init+0x188>)
 8012058:	f7fe fb6c 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 801205c:	2101      	movs	r1, #1
 801205e:	4818      	ldr	r0, [pc, #96]	; (80120c0 <hal_resources_init+0x18c>)
 8012060:	f7ff ff2f 	bl	8011ec2 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dcs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8012064:	2300      	movs	r3, #0
 8012066:	2200      	movs	r2, #0
 8012068:	2101      	movs	r1, #1
 801206a:	4815      	ldr	r0, [pc, #84]	; (80120c0 <hal_resources_init+0x18c>)
 801206c:	f7fe fb62 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 8012070:	2101      	movs	r1, #1
 8012072:	4813      	ldr	r0, [pc, #76]	; (80120c0 <hal_resources_init+0x18c>)
 8012074:	f7ff ff25 	bl	8011ec2 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_rst, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8012078:	2300      	movs	r3, #0
 801207a:	2200      	movs	r2, #0
 801207c:	2101      	movs	r1, #1
 801207e:	4811      	ldr	r0, [pc, #68]	; (80120c4 <hal_resources_init+0x190>)
 8012080:	f7fe fb58 	bl	8010734 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_rst, 1);
 8012084:	2101      	movs	r1, #1
 8012086:	480f      	ldr	r0, [pc, #60]	; (80120c4 <hal_resources_init+0x190>)
 8012088:	f7ff ff1b 	bl	8011ec2 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dreq, GpioModeInput, GpioPullNo, GpioSpeedFreqLow);
 801208c:	2300      	movs	r3, #0
 801208e:	2200      	movs	r2, #0
 8012090:	2100      	movs	r1, #0
 8012092:	480d      	ldr	r0, [pc, #52]	; (80120c8 <hal_resources_init+0x194>)
 8012094:	f7fe fb4e 	bl	8010734 <hal_gpio_init>
}
 8012098:	bf00      	nop
 801209a:	bd80      	pop	{r7, pc}
 801209c:	0801649c 	.word	0x0801649c
 80120a0:	080164a4 	.word	0x080164a4
 80120a4:	080164ac 	.word	0x080164ac
 80120a8:	080164b4 	.word	0x080164b4
 80120ac:	080164bc 	.word	0x080164bc
 80120b0:	08016524 	.word	0x08016524
 80120b4:	0801652c 	.word	0x0801652c
 80120b8:	08016534 	.word	0x08016534
 80120bc:	0801653c 	.word	0x0801653c
 80120c0:	08016544 	.word	0x08016544
 80120c4:	0801654c 	.word	0x0801654c
 80120c8:	08016554 	.word	0x08016554

080120cc <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 80120cc:	b480      	push	{r7}
 80120ce:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 80120d0:	4b0c      	ldr	r3, [pc, #48]	; (8012104 <sdio_init+0x38>)
 80120d2:	4a0d      	ldr	r2, [pc, #52]	; (8012108 <sdio_init+0x3c>)
 80120d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80120d6:	4b0b      	ldr	r3, [pc, #44]	; (8012104 <sdio_init+0x38>)
 80120d8:	2200      	movs	r2, #0
 80120da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80120dc:	4b09      	ldr	r3, [pc, #36]	; (8012104 <sdio_init+0x38>)
 80120de:	2200      	movs	r2, #0
 80120e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80120e2:	4b08      	ldr	r3, [pc, #32]	; (8012104 <sdio_init+0x38>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80120e8:	4b06      	ldr	r3, [pc, #24]	; (8012104 <sdio_init+0x38>)
 80120ea:	2200      	movs	r2, #0
 80120ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80120ee:	4b05      	ldr	r3, [pc, #20]	; (8012104 <sdio_init+0x38>)
 80120f0:	2200      	movs	r2, #0
 80120f2:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 80120f4:	4b03      	ldr	r3, [pc, #12]	; (8012104 <sdio_init+0x38>)
 80120f6:	2200      	movs	r2, #0
 80120f8:	619a      	str	r2, [r3, #24]
}
 80120fa:	bf00      	nop
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	20005994 	.word	0x20005994
 8012108:	40012c00 	.word	0x40012c00

0801210c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b08c      	sub	sp, #48	; 0x30
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8012114:	2300      	movs	r3, #0
 8012116:	61bb      	str	r3, [r7, #24]
 8012118:	4b60      	ldr	r3, [pc, #384]	; (801229c <HAL_SD_MspInit+0x190>)
 801211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801211c:	4a5f      	ldr	r2, [pc, #380]	; (801229c <HAL_SD_MspInit+0x190>)
 801211e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012122:	6313      	str	r3, [r2, #48]	; 0x30
 8012124:	4b5d      	ldr	r3, [pc, #372]	; (801229c <HAL_SD_MspInit+0x190>)
 8012126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801212c:	61bb      	str	r3, [r7, #24]
 801212e:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8012130:	2200      	movs	r2, #0
 8012132:	2105      	movs	r1, #5
 8012134:	203b      	movs	r0, #59	; 0x3b
 8012136:	f7ef f8a9 	bl	800128c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801213a:	203b      	movs	r0, #59	; 0x3b
 801213c:	f7ef f8c2 	bl	80012c4 <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012140:	f107 031c 	add.w	r3, r7, #28
 8012144:	2200      	movs	r2, #0
 8012146:	601a      	str	r2, [r3, #0]
 8012148:	605a      	str	r2, [r3, #4]
 801214a:	609a      	str	r2, [r3, #8]
 801214c:	60da      	str	r2, [r3, #12]
 801214e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4a52      	ldr	r2, [pc, #328]	; (80122a0 <HAL_SD_MspInit+0x194>)
 8012156:	4293      	cmp	r3, r2
 8012158:	f040 809c 	bne.w	8012294 <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 801215c:	2300      	movs	r3, #0
 801215e:	617b      	str	r3, [r7, #20]
 8012160:	4b4e      	ldr	r3, [pc, #312]	; (801229c <HAL_SD_MspInit+0x190>)
 8012162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012164:	4a4d      	ldr	r2, [pc, #308]	; (801229c <HAL_SD_MspInit+0x190>)
 8012166:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801216a:	6453      	str	r3, [r2, #68]	; 0x44
 801216c:	4b4b      	ldr	r3, [pc, #300]	; (801229c <HAL_SD_MspInit+0x190>)
 801216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012174:	617b      	str	r3, [r7, #20]
 8012176:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012178:	2300      	movs	r3, #0
 801217a:	613b      	str	r3, [r7, #16]
 801217c:	4b47      	ldr	r3, [pc, #284]	; (801229c <HAL_SD_MspInit+0x190>)
 801217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012180:	4a46      	ldr	r2, [pc, #280]	; (801229c <HAL_SD_MspInit+0x190>)
 8012182:	f043 0304 	orr.w	r3, r3, #4
 8012186:	6313      	str	r3, [r2, #48]	; 0x30
 8012188:	4b44      	ldr	r3, [pc, #272]	; (801229c <HAL_SD_MspInit+0x190>)
 801218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801218c:	f003 0304 	and.w	r3, r3, #4
 8012190:	613b      	str	r3, [r7, #16]
 8012192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012194:	2300      	movs	r3, #0
 8012196:	60fb      	str	r3, [r7, #12]
 8012198:	4b40      	ldr	r3, [pc, #256]	; (801229c <HAL_SD_MspInit+0x190>)
 801219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801219c:	4a3f      	ldr	r2, [pc, #252]	; (801229c <HAL_SD_MspInit+0x190>)
 801219e:	f043 0308 	orr.w	r3, r3, #8
 80121a2:	6313      	str	r3, [r2, #48]	; 0x30
 80121a4:	4b3d      	ldr	r3, [pc, #244]	; (801229c <HAL_SD_MspInit+0x190>)
 80121a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121a8:	f003 0308 	and.w	r3, r3, #8
 80121ac:	60fb      	str	r3, [r7, #12]
 80121ae:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80121b0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80121b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121b6:	2302      	movs	r3, #2
 80121b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121ba:	2300      	movs	r3, #0
 80121bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80121be:	2303      	movs	r3, #3
 80121c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80121c2:	230c      	movs	r3, #12
 80121c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80121c6:	f107 031c 	add.w	r3, r7, #28
 80121ca:	4619      	mov	r1, r3
 80121cc:	4835      	ldr	r0, [pc, #212]	; (80122a4 <HAL_SD_MspInit+0x198>)
 80121ce:	f7ef fc25 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80121d2:	2304      	movs	r3, #4
 80121d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121d6:	2302      	movs	r3, #2
 80121d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121da:	2300      	movs	r3, #0
 80121dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80121de:	2303      	movs	r3, #3
 80121e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80121e2:	230c      	movs	r3, #12
 80121e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80121e6:	f107 031c 	add.w	r3, r7, #28
 80121ea:	4619      	mov	r1, r3
 80121ec:	482e      	ldr	r0, [pc, #184]	; (80122a8 <HAL_SD_MspInit+0x19c>)
 80121ee:	f7ef fc15 	bl	8001a1c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80121f2:	2200      	movs	r2, #0
 80121f4:	2105      	movs	r1, #5
 80121f6:	203b      	movs	r0, #59	; 0x3b
 80121f8:	f7ef f848 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80121fc:	203b      	movs	r0, #59	; 0x3b
 80121fe:	f7ef f861 	bl	80012c4 <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 8012202:	4b2a      	ldr	r3, [pc, #168]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012204:	4a2a      	ldr	r2, [pc, #168]	; (80122b0 <HAL_SD_MspInit+0x1a4>)
 8012206:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8012208:	4b28      	ldr	r3, [pc, #160]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 801220a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801220e:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012210:	4b26      	ldr	r3, [pc, #152]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012212:	2200      	movs	r2, #0
 8012214:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8012216:	4b25      	ldr	r3, [pc, #148]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012218:	2200      	movs	r2, #0
 801221a:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 801221c:	4b23      	ldr	r3, [pc, #140]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 801221e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012222:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8012224:	4b21      	ldr	r3, [pc, #132]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801222a:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801222c:	4b1f      	ldr	r3, [pc, #124]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 801222e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012232:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8012234:	4b1d      	ldr	r3, [pc, #116]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012236:	2220      	movs	r2, #32
 8012238:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 801223a:	4b1c      	ldr	r3, [pc, #112]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 801223c:	2200      	movs	r2, #0
 801223e:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8012240:	4b1a      	ldr	r3, [pc, #104]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012242:	2204      	movs	r2, #4
 8012244:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8012246:	4b19      	ldr	r3, [pc, #100]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012248:	2203      	movs	r2, #3
 801224a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 801224c:	4b17      	ldr	r3, [pc, #92]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 801224e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8012252:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8012254:	4b15      	ldr	r3, [pc, #84]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012256:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801225a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 801225c:	4813      	ldr	r0, [pc, #76]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 801225e:	f7ef f83f 	bl	80012e0 <HAL_DMA_Init>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d001      	beq.n	801226c <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 8012268:	f002 fb2e 	bl	80148c8 <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	4a0f      	ldr	r2, [pc, #60]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012270:	641a      	str	r2, [r3, #64]	; 0x40
 8012272:	4a0e      	ldr	r2, [pc, #56]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	4a0c      	ldr	r2, [pc, #48]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 801227c:	63da      	str	r2, [r3, #60]	; 0x3c
 801227e:	4a0b      	ldr	r2, [pc, #44]	; (80122ac <HAL_SD_MspInit+0x1a0>)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8012284:	2200      	movs	r2, #0
 8012286:	2105      	movs	r1, #5
 8012288:	2031      	movs	r0, #49	; 0x31
 801228a:	f7ee ffff 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 801228e:	2031      	movs	r0, #49	; 0x31
 8012290:	f7ef f818 	bl	80012c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8012294:	bf00      	nop
 8012296:	3730      	adds	r7, #48	; 0x30
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}
 801229c:	40023800 	.word	0x40023800
 80122a0:	40012c00 	.word	0x40012c00
 80122a4:	40020800 	.word	0x40020800
 80122a8:	40020c00 	.word	0x40020c00
 80122ac:	20005a18 	.word	0x20005a18
 80122b0:	40026458 	.word	0x40026458

080122b4 <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 80122b8:	4802      	ldr	r0, [pc, #8]	; (80122c4 <DMA2_Stream3_IRQHandler+0x10>)
 80122ba:	f7ef f939 	bl	8001530 <HAL_DMA_IRQHandler>
}
 80122be:	bf00      	nop
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	20005a18 	.word	0x20005a18

080122c8 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 80122cc:	4802      	ldr	r0, [pc, #8]	; (80122d8 <SDIO_IRQHandler+0x10>)
 80122ce:	f7f0 f81b 	bl	8002308 <HAL_SD_IRQHandler>
}
 80122d2:	bf00      	nop
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	20005994 	.word	0x20005994

080122dc <__NVIC_GetPriorityGrouping>:
{
 80122dc:	b480      	push	{r7}
 80122de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80122e0:	4b04      	ldr	r3, [pc, #16]	; (80122f4 <__NVIC_GetPriorityGrouping+0x18>)
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	0a1b      	lsrs	r3, r3, #8
 80122e6:	f003 0307 	and.w	r3, r3, #7
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr
 80122f4:	e000ed00 	.word	0xe000ed00

080122f8 <__NVIC_EnableIRQ>:
{
 80122f8:	b480      	push	{r7}
 80122fa:	b083      	sub	sp, #12
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012306:	2b00      	cmp	r3, #0
 8012308:	db0b      	blt.n	8012322 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801230a:	79fb      	ldrb	r3, [r7, #7]
 801230c:	f003 021f 	and.w	r2, r3, #31
 8012310:	4907      	ldr	r1, [pc, #28]	; (8012330 <__NVIC_EnableIRQ+0x38>)
 8012312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012316:	095b      	lsrs	r3, r3, #5
 8012318:	2001      	movs	r0, #1
 801231a:	fa00 f202 	lsl.w	r2, r0, r2
 801231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012322:	bf00      	nop
 8012324:	370c      	adds	r7, #12
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop
 8012330:	e000e100 	.word	0xe000e100

08012334 <__NVIC_SetPriority>:
{
 8012334:	b480      	push	{r7}
 8012336:	b083      	sub	sp, #12
 8012338:	af00      	add	r7, sp, #0
 801233a:	4603      	mov	r3, r0
 801233c:	6039      	str	r1, [r7, #0]
 801233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012344:	2b00      	cmp	r3, #0
 8012346:	db0a      	blt.n	801235e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	b2da      	uxtb	r2, r3
 801234c:	490c      	ldr	r1, [pc, #48]	; (8012380 <__NVIC_SetPriority+0x4c>)
 801234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012352:	0112      	lsls	r2, r2, #4
 8012354:	b2d2      	uxtb	r2, r2
 8012356:	440b      	add	r3, r1
 8012358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801235c:	e00a      	b.n	8012374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	b2da      	uxtb	r2, r3
 8012362:	4908      	ldr	r1, [pc, #32]	; (8012384 <__NVIC_SetPriority+0x50>)
 8012364:	79fb      	ldrb	r3, [r7, #7]
 8012366:	f003 030f 	and.w	r3, r3, #15
 801236a:	3b04      	subs	r3, #4
 801236c:	0112      	lsls	r2, r2, #4
 801236e:	b2d2      	uxtb	r2, r2
 8012370:	440b      	add	r3, r1
 8012372:	761a      	strb	r2, [r3, #24]
}
 8012374:	bf00      	nop
 8012376:	370c      	adds	r7, #12
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr
 8012380:	e000e100 	.word	0xe000e100
 8012384:	e000ed00 	.word	0xe000ed00

08012388 <NVIC_EncodePriority>:
{
 8012388:	b480      	push	{r7}
 801238a:	b089      	sub	sp, #36	; 0x24
 801238c:	af00      	add	r7, sp, #0
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f003 0307 	and.w	r3, r3, #7
 801239a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	f1c3 0307 	rsb	r3, r3, #7
 80123a2:	2b04      	cmp	r3, #4
 80123a4:	bf28      	it	cs
 80123a6:	2304      	movcs	r3, #4
 80123a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	3304      	adds	r3, #4
 80123ae:	2b06      	cmp	r3, #6
 80123b0:	d902      	bls.n	80123b8 <NVIC_EncodePriority+0x30>
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	3b03      	subs	r3, #3
 80123b6:	e000      	b.n	80123ba <NVIC_EncodePriority+0x32>
 80123b8:	2300      	movs	r3, #0
 80123ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80123bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123c0:	69bb      	ldr	r3, [r7, #24]
 80123c2:	fa02 f303 	lsl.w	r3, r2, r3
 80123c6:	43da      	mvns	r2, r3
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	401a      	ands	r2, r3
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80123d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	fa01 f303 	lsl.w	r3, r1, r3
 80123da:	43d9      	mvns	r1, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80123e0:	4313      	orrs	r3, r2
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3724      	adds	r7, #36	; 0x24
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr

080123ee <LL_SPI_Enable>:
{
 80123ee:	b480      	push	{r7}
 80123f0:	b083      	sub	sp, #12
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	601a      	str	r2, [r3, #0]
}
 8012402:	bf00      	nop
 8012404:	370c      	adds	r7, #12
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr

0801240e <LL_SPI_SetStandard>:
{
 801240e:	b480      	push	{r7}
 8012410:	b083      	sub	sp, #12
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]
 8012416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	f023 0210 	bic.w	r2, r3, #16
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	431a      	orrs	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	605a      	str	r2, [r3, #4]
}
 8012428:	bf00      	nop
 801242a:	370c      	adds	r7, #12
 801242c:	46bd      	mov	sp, r7
 801242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012432:	4770      	bx	lr

08012434 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	689b      	ldr	r3, [r3, #8]
 8012440:	f003 0301 	and.w	r3, r3, #1
 8012444:	2b01      	cmp	r3, #1
 8012446:	d101      	bne.n	801244c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8012448:	2301      	movs	r3, #1
 801244a:	e000      	b.n	801244e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	370c      	adds	r7, #12
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr

0801245a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 801245a:	b480      	push	{r7}
 801245c:	b083      	sub	sp, #12
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	689b      	ldr	r3, [r3, #8]
 8012466:	f003 0302 	and.w	r3, r3, #2
 801246a:	2b02      	cmp	r3, #2
 801246c:	d101      	bne.n	8012472 <LL_SPI_IsActiveFlag_TXE+0x18>
 801246e:	2301      	movs	r3, #1
 8012470:	e000      	b.n	8012474 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8012472:	2300      	movs	r3, #0
}
 8012474:	4618      	mov	r0, r3
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	689b      	ldr	r3, [r3, #8]
 801248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012490:	2b80      	cmp	r3, #128	; 0x80
 8012492:	d101      	bne.n	8012498 <LL_SPI_IsActiveFlag_BSY+0x18>
 8012494:	2301      	movs	r3, #1
 8012496:	e000      	b.n	801249a <LL_SPI_IsActiveFlag_BSY+0x1a>
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	370c      	adds	r7, #12
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr

080124a6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80124a6:	b480      	push	{r7}
 80124a8:	b083      	sub	sp, #12
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	330c      	adds	r3, #12
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	b2db      	uxtb	r3, r3
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80124c2:	b480      	push	{r7}
 80124c4:	b085      	sub	sp, #20
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	330c      	adds	r3, #12
 80124d2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	78fa      	ldrb	r2, [r7, #3]
 80124d8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80124da:	bf00      	nop
 80124dc:	3714      	adds	r7, #20
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr
	...

080124e8 <LL_DMA_SetDataTransferDirection>:
{
 80124e8:	b480      	push	{r7}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80124f4:	4a0d      	ldr	r2, [pc, #52]	; (801252c <LL_DMA_SetDataTransferDirection+0x44>)
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	4413      	add	r3, r2
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	461a      	mov	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	4413      	add	r3, r2
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012508:	4908      	ldr	r1, [pc, #32]	; (801252c <LL_DMA_SetDataTransferDirection+0x44>)
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	440b      	add	r3, r1
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	4619      	mov	r1, r3
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	440b      	add	r3, r1
 8012516:	4619      	mov	r1, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4313      	orrs	r3, r2
 801251c:	600b      	str	r3, [r1, #0]
}
 801251e:	bf00      	nop
 8012520:	3714      	adds	r7, #20
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop
 801252c:	08016584 	.word	0x08016584

08012530 <LL_DMA_SetMode>:
{
 8012530:	b480      	push	{r7}
 8012532:	b085      	sub	sp, #20
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 801253c:	4a0d      	ldr	r2, [pc, #52]	; (8012574 <LL_DMA_SetMode+0x44>)
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	4413      	add	r3, r2
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	461a      	mov	r2, r3
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	4413      	add	r3, r2
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8012550:	4908      	ldr	r1, [pc, #32]	; (8012574 <LL_DMA_SetMode+0x44>)
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	440b      	add	r3, r1
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	4619      	mov	r1, r3
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	440b      	add	r3, r1
 801255e:	4619      	mov	r1, r3
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4313      	orrs	r3, r2
 8012564:	600b      	str	r3, [r1, #0]
}
 8012566:	bf00      	nop
 8012568:	3714      	adds	r7, #20
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop
 8012574:	08016584 	.word	0x08016584

08012578 <LL_DMA_SetPeriphIncMode>:
{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8012584:	4a0d      	ldr	r2, [pc, #52]	; (80125bc <LL_DMA_SetPeriphIncMode+0x44>)
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	4413      	add	r3, r2
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	461a      	mov	r2, r3
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	4413      	add	r3, r2
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012598:	4908      	ldr	r1, [pc, #32]	; (80125bc <LL_DMA_SetPeriphIncMode+0x44>)
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	440b      	add	r3, r1
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	4619      	mov	r1, r3
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	440b      	add	r3, r1
 80125a6:	4619      	mov	r1, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	4313      	orrs	r3, r2
 80125ac:	600b      	str	r3, [r1, #0]
}
 80125ae:	bf00      	nop
 80125b0:	3714      	adds	r7, #20
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop
 80125bc:	08016584 	.word	0x08016584

080125c0 <LL_DMA_SetMemoryIncMode>:
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80125cc:	4a0d      	ldr	r2, [pc, #52]	; (8012604 <LL_DMA_SetMemoryIncMode+0x44>)
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	4413      	add	r3, r2
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	461a      	mov	r2, r3
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	4413      	add	r3, r2
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80125e0:	4908      	ldr	r1, [pc, #32]	; (8012604 <LL_DMA_SetMemoryIncMode+0x44>)
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	440b      	add	r3, r1
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	4619      	mov	r1, r3
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	440b      	add	r3, r1
 80125ee:	4619      	mov	r1, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	4313      	orrs	r3, r2
 80125f4:	600b      	str	r3, [r1, #0]
}
 80125f6:	bf00      	nop
 80125f8:	3714      	adds	r7, #20
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop
 8012604:	08016584 	.word	0x08016584

08012608 <LL_DMA_SetPeriphSize>:
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8012614:	4a0d      	ldr	r2, [pc, #52]	; (801264c <LL_DMA_SetPeriphSize+0x44>)
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	4413      	add	r3, r2
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	461a      	mov	r2, r3
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	4413      	add	r3, r2
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012628:	4908      	ldr	r1, [pc, #32]	; (801264c <LL_DMA_SetPeriphSize+0x44>)
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	440b      	add	r3, r1
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	4619      	mov	r1, r3
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	440b      	add	r3, r1
 8012636:	4619      	mov	r1, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4313      	orrs	r3, r2
 801263c:	600b      	str	r3, [r1, #0]
}
 801263e:	bf00      	nop
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	08016584 	.word	0x08016584

08012650 <LL_DMA_SetMemorySize>:
{
 8012650:	b480      	push	{r7}
 8012652:	b085      	sub	sp, #20
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 801265c:	4a0d      	ldr	r2, [pc, #52]	; (8012694 <LL_DMA_SetMemorySize+0x44>)
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	4413      	add	r3, r2
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	461a      	mov	r2, r3
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	4413      	add	r3, r2
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8012670:	4908      	ldr	r1, [pc, #32]	; (8012694 <LL_DMA_SetMemorySize+0x44>)
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	440b      	add	r3, r1
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	4619      	mov	r1, r3
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	440b      	add	r3, r1
 801267e:	4619      	mov	r1, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4313      	orrs	r3, r2
 8012684:	600b      	str	r3, [r1, #0]
}
 8012686:	bf00      	nop
 8012688:	3714      	adds	r7, #20
 801268a:	46bd      	mov	sp, r7
 801268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	08016584 	.word	0x08016584

08012698 <LL_DMA_SetStreamPriorityLevel>:
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80126a4:	4a0d      	ldr	r2, [pc, #52]	; (80126dc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	4413      	add	r3, r2
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	461a      	mov	r2, r3
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	4413      	add	r3, r2
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80126b8:	4908      	ldr	r1, [pc, #32]	; (80126dc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	440b      	add	r3, r1
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	4619      	mov	r1, r3
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	440b      	add	r3, r1
 80126c6:	4619      	mov	r1, r3
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4313      	orrs	r3, r2
 80126cc:	600b      	str	r3, [r1, #0]
}
 80126ce:	bf00      	nop
 80126d0:	3714      	adds	r7, #20
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop
 80126dc:	08016584 	.word	0x08016584

080126e0 <LL_DMA_SetChannelSelection>:
{
 80126e0:	b480      	push	{r7}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80126ec:	4a0d      	ldr	r2, [pc, #52]	; (8012724 <LL_DMA_SetChannelSelection+0x44>)
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	4413      	add	r3, r2
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	461a      	mov	r2, r3
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	4413      	add	r3, r2
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8012700:	4908      	ldr	r1, [pc, #32]	; (8012724 <LL_DMA_SetChannelSelection+0x44>)
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	440b      	add	r3, r1
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	4619      	mov	r1, r3
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	440b      	add	r3, r1
 801270e:	4619      	mov	r1, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4313      	orrs	r3, r2
 8012714:	600b      	str	r3, [r1, #0]
}
 8012716:	bf00      	nop
 8012718:	3714      	adds	r7, #20
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop
 8012724:	08016584 	.word	0x08016584

08012728 <LL_DMA_DisableFifoMode>:
{
 8012728:	b480      	push	{r7}
 801272a:	b083      	sub	sp, #12
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8012732:	4a0c      	ldr	r2, [pc, #48]	; (8012764 <LL_DMA_DisableFifoMode+0x3c>)
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	4413      	add	r3, r2
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	461a      	mov	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	4413      	add	r3, r2
 8012740:	695b      	ldr	r3, [r3, #20]
 8012742:	4908      	ldr	r1, [pc, #32]	; (8012764 <LL_DMA_DisableFifoMode+0x3c>)
 8012744:	683a      	ldr	r2, [r7, #0]
 8012746:	440a      	add	r2, r1
 8012748:	7812      	ldrb	r2, [r2, #0]
 801274a:	4611      	mov	r1, r2
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	440a      	add	r2, r1
 8012750:	f023 0304 	bic.w	r3, r3, #4
 8012754:	6153      	str	r3, [r2, #20]
}
 8012756:	bf00      	nop
 8012758:	370c      	adds	r7, #12
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
 8012764:	08016584 	.word	0x08016584

08012768 <LL_APB2_GRP1_EnableClock>:
{
 8012768:	b480      	push	{r7}
 801276a:	b085      	sub	sp, #20
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8012770:	4b08      	ldr	r3, [pc, #32]	; (8012794 <LL_APB2_GRP1_EnableClock+0x2c>)
 8012772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012774:	4907      	ldr	r1, [pc, #28]	; (8012794 <LL_APB2_GRP1_EnableClock+0x2c>)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4313      	orrs	r3, r2
 801277a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801277c:	4b05      	ldr	r3, [pc, #20]	; (8012794 <LL_APB2_GRP1_EnableClock+0x2c>)
 801277e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	4013      	ands	r3, r2
 8012784:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012786:	68fb      	ldr	r3, [r7, #12]
}
 8012788:	bf00      	nop
 801278a:	3714      	adds	r7, #20
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	40023800 	.word	0x40023800

08012798 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 80127a2:	f7f6 fed1 	bl	8009548 <vPortEnterCritical>

	switch(spi_id) {
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	2b05      	cmp	r3, #5
 80127aa:	d014      	beq.n	80127d6 <spi_init+0x3e>
 80127ac:	2b05      	cmp	r3, #5
 80127ae:	dc19      	bgt.n	80127e4 <spi_init+0x4c>
 80127b0:	2b02      	cmp	r3, #2
 80127b2:	d002      	beq.n	80127ba <spi_init+0x22>
 80127b4:	2b04      	cmp	r3, #4
 80127b6:	d007      	beq.n	80127c8 <spi_init+0x30>
 80127b8:	e014      	b.n	80127e4 <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 80127ba:	480f      	ldr	r0, [pc, #60]	; (80127f8 <spi_init+0x60>)
 80127bc:	f000 f900 	bl	80129c0 <spi2_init>
		hal_cli_printf("spi2 init");
 80127c0:	480e      	ldr	r0, [pc, #56]	; (80127fc <spi_init+0x64>)
 80127c2:	f7fd fa61 	bl	800fc88 <hal_cli_printf>
		break;
 80127c6:	e011      	b.n	80127ec <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 80127c8:	480d      	ldr	r0, [pc, #52]	; (8012800 <spi_init+0x68>)
 80127ca:	f000 f921 	bl	8012a10 <spi4_init>
		hal_cli_printf("spi4 init");
 80127ce:	480d      	ldr	r0, [pc, #52]	; (8012804 <spi_init+0x6c>)
 80127d0:	f7fd fa5a 	bl	800fc88 <hal_cli_printf>
		break;
 80127d4:	e00a      	b.n	80127ec <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 80127d6:	480c      	ldr	r0, [pc, #48]	; (8012808 <spi_init+0x70>)
 80127d8:	f000 f942 	bl	8012a60 <spi5_init>
		hal_cli_printf("spi5 init");
 80127dc:	480b      	ldr	r0, [pc, #44]	; (801280c <spi_init+0x74>)
 80127de:	f7fd fa53 	bl	800fc88 <hal_cli_printf>
		break;
 80127e2:	e003      	b.n	80127ec <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 80127e4:	480a      	ldr	r0, [pc, #40]	; (8012810 <spi_init+0x78>)
 80127e6:	f7fd fa4f 	bl	800fc88 <hal_cli_printf>
		break;
 80127ea:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 80127ec:	f7f6 fedc 	bl	80095a8 <vPortExitCritical>
}
 80127f0:	bf00      	nop
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	20005a78 	.word	0x20005a78
 80127fc:	080156c8 	.word	0x080156c8
 8012800:	20005a8c 	.word	0x20005a8c
 8012804:	080156d4 	.word	0x080156d4
 8012808:	20005aa0 	.word	0x20005aa0
 801280c:	080156e0 	.word	0x080156e0
 8012810:	080156ec 	.word	0x080156ec

08012814 <hal_spi_transfer>:

bool hal_spi_transfer(spidrv_t* drv, uint8_t* data, uint32_t size, uint32_t timeout)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b088      	sub	sp, #32
 8012818:	af00      	add	r7, sp, #0
 801281a:	6178      	str	r0, [r7, #20]
 801281c:	6139      	str	r1, [r7, #16]
 801281e:	60fa      	str	r2, [r7, #12]
 8012820:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 8012822:	463b      	mov	r3, r7
 8012824:	68b9      	ldr	r1, [r7, #8]
 8012826:	4618      	mov	r0, r3
 8012828:	f7fd fd10 	bl	801024c <hal_get_delay_timer>
 801282c:	f107 0318 	add.w	r3, r7, #24
 8012830:	463a      	mov	r2, r7
 8012832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012836:	e883 0003 	stmia.w	r3, {r0, r1}

	while(size > 0) {
 801283a:	e023      	b.n	8012884 <hal_spi_transfer+0x70>
		LL_SPI_TransmitData8(drv->spi, *data);
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	4619      	mov	r1, r3
 8012846:	4610      	mov	r0, r2
 8012848:	f7ff fe3b 	bl	80124c2 <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 801284c:	e00c      	b.n	8012868 <hal_spi_transfer+0x54>
			if(hal_delay_timer_is_expired(&timer)) {
 801284e:	f107 0318 	add.w	r3, r7, #24
 8012852:	4618      	mov	r0, r3
 8012854:	f7fd fd20 	bl	8010298 <hal_delay_timer_is_expired>
 8012858:	4603      	mov	r3, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d004      	beq.n	8012868 <hal_spi_transfer+0x54>
				hal_cli_printf("spi txe flag failed");
 801285e:	4818      	ldr	r0, [pc, #96]	; (80128c0 <hal_spi_transfer+0xac>)
 8012860:	f7fd fa12 	bl	800fc88 <hal_cli_printf>
				return false;
 8012864:	2300      	movs	r3, #0
 8012866:	e027      	b.n	80128b8 <hal_spi_transfer+0xa4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	4618      	mov	r0, r3
 801286e:	f7ff fdf4 	bl	801245a <LL_SPI_IsActiveFlag_TXE>
 8012872:	4603      	mov	r3, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	d0ea      	beq.n	801284e <hal_spi_transfer+0x3a>
			}
		}
		size--;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	3b01      	subs	r3, #1
 801287c:	60fb      	str	r3, [r7, #12]
		data++;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	3301      	adds	r3, #1
 8012882:	613b      	str	r3, [r7, #16]
	while(size > 0) {
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1d8      	bne.n	801283c <hal_spi_transfer+0x28>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 801288a:	e00c      	b.n	80128a6 <hal_spi_transfer+0x92>
		if(hal_delay_timer_is_expired(&timer)) {
 801288c:	f107 0318 	add.w	r3, r7, #24
 8012890:	4618      	mov	r0, r3
 8012892:	f7fd fd01 	bl	8010298 <hal_delay_timer_is_expired>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d004      	beq.n	80128a6 <hal_spi_transfer+0x92>
			hal_cli_printf("spi busy flag failed");
 801289c:	4809      	ldr	r0, [pc, #36]	; (80128c4 <hal_spi_transfer+0xb0>)
 801289e:	f7fd f9f3 	bl	800fc88 <hal_cli_printf>
			return false;
 80128a2:	2300      	movs	r3, #0
 80128a4:	e008      	b.n	80128b8 <hal_spi_transfer+0xa4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7ff fde8 	bl	8012480 <LL_SPI_IsActiveFlag_BSY>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d1ea      	bne.n	801288c <hal_spi_transfer+0x78>
		}
	}

	return true;
 80128b6:	2301      	movs	r3, #1
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3720      	adds	r7, #32
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	08015700 	.word	0x08015700
 80128c4:	08015714 	.word	0x08015714

080128c8 <hal_spi_txrx>:

	return true;
}

bool hal_spi_txrx(spidrv_t* drv, uint8_t* tx, uint8_t* rx, uint32_t size, uint32_t timeout)
{
 80128c8:	b590      	push	{r4, r7, lr}
 80128ca:	b08b      	sub	sp, #44	; 0x2c
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6178      	str	r0, [r7, #20]
 80128d0:	6139      	str	r1, [r7, #16]
 80128d2:	60fa      	str	r2, [r7, #12]
 80128d4:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 80128d6:	463b      	mov	r3, r7
 80128d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80128da:	4618      	mov	r0, r3
 80128dc:	f7fd fcb6 	bl	801024c <hal_get_delay_timer>
 80128e0:	f107 031c 	add.w	r3, r7, #28
 80128e4:	463a      	mov	r2, r7
 80128e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128ea:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int i = 0; i < size; i++) {
 80128ee:	2300      	movs	r3, #0
 80128f0:	627b      	str	r3, [r7, #36]	; 0x24
 80128f2:	e040      	b.n	8012976 <hal_spi_txrx+0xae>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
			if(hal_delay_timer_is_expired(&timer)) {
 80128f4:	f107 031c 	add.w	r3, r7, #28
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7fd fccd 	bl	8010298 <hal_delay_timer_is_expired>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d004      	beq.n	801290e <hal_spi_txrx+0x46>
				hal_cli_printf("spi txe flag failed");
 8012904:	482b      	ldr	r0, [pc, #172]	; (80129b4 <hal_spi_txrx+0xec>)
 8012906:	f7fd f9bf 	bl	800fc88 <hal_cli_printf>
				return false;
 801290a:	2300      	movs	r3, #0
 801290c:	e04e      	b.n	80129ac <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4618      	mov	r0, r3
 8012914:	f7ff fda1 	bl	801245a <LL_SPI_IsActiveFlag_TXE>
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d0ea      	beq.n	80128f4 <hal_spi_txrx+0x2c>
			}
		}
		LL_SPI_TransmitData8(drv->spi, tx[i]);
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	6818      	ldr	r0, [r3, #0]
 8012922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012924:	693a      	ldr	r2, [r7, #16]
 8012926:	4413      	add	r3, r2
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	4619      	mov	r1, r3
 801292c:	f7ff fdc9 	bl	80124c2 <LL_SPI_TransmitData8>

		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 8012930:	e00c      	b.n	801294c <hal_spi_txrx+0x84>
			if(hal_delay_timer_is_expired(&timer)) {
 8012932:	f107 031c 	add.w	r3, r7, #28
 8012936:	4618      	mov	r0, r3
 8012938:	f7fd fcae 	bl	8010298 <hal_delay_timer_is_expired>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d004      	beq.n	801294c <hal_spi_txrx+0x84>
				hal_cli_printf("spi rxne flag failed");
 8012942:	481d      	ldr	r0, [pc, #116]	; (80129b8 <hal_spi_txrx+0xf0>)
 8012944:	f7fd f9a0 	bl	800fc88 <hal_cli_printf>
				return false;
 8012948:	2300      	movs	r3, #0
 801294a:	e02f      	b.n	80129ac <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4618      	mov	r0, r3
 8012952:	f7ff fd6f 	bl	8012434 <LL_SPI_IsActiveFlag_RXNE>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d0ea      	beq.n	8012932 <hal_spi_txrx+0x6a>
			}
		}
		rx[i] = LL_SPI_ReceiveData8(drv->spi);
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	6819      	ldr	r1, [r3, #0]
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	68fa      	ldr	r2, [r7, #12]
 8012964:	18d4      	adds	r4, r2, r3
 8012966:	4608      	mov	r0, r1
 8012968:	f7ff fd9d 	bl	80124a6 <LL_SPI_ReceiveData8>
 801296c:	4603      	mov	r3, r0
 801296e:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < size; i++) {
 8012970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012972:	3301      	adds	r3, #1
 8012974:	627b      	str	r3, [r7, #36]	; 0x24
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	68ba      	ldr	r2, [r7, #8]
 801297a:	429a      	cmp	r2, r3
 801297c:	d8c7      	bhi.n	801290e <hal_spi_txrx+0x46>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 801297e:	e00c      	b.n	801299a <hal_spi_txrx+0xd2>
		if(hal_delay_timer_is_expired(&timer)) {
 8012980:	f107 031c 	add.w	r3, r7, #28
 8012984:	4618      	mov	r0, r3
 8012986:	f7fd fc87 	bl	8010298 <hal_delay_timer_is_expired>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	d004      	beq.n	801299a <hal_spi_txrx+0xd2>
			hal_cli_printf("spi busy flag failed");
 8012990:	480a      	ldr	r0, [pc, #40]	; (80129bc <hal_spi_txrx+0xf4>)
 8012992:	f7fd f979 	bl	800fc88 <hal_cli_printf>
			return false;
 8012996:	2300      	movs	r3, #0
 8012998:	e008      	b.n	80129ac <hal_spi_txrx+0xe4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff fd6e 	bl	8012480 <LL_SPI_IsActiveFlag_BSY>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1ea      	bne.n	8012980 <hal_spi_txrx+0xb8>
		}
	}
	return true;
 80129aa:	2301      	movs	r3, #1
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	372c      	adds	r7, #44	; 0x2c
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd90      	pop	{r4, r7, pc}
 80129b4:	08015700 	.word	0x08015700
 80129b8:	0801572c 	.word	0x0801572c
 80129bc:	08015714 	.word	0x08015714

080129c0 <spi2_init>:


static void spi2_init(spidrv_t* drv)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 80129c8:	f000 f872 	bl	8012ab0 <spi2_pin_conf>
	spi2_dma_init();
 80129cc:	f000 f88a 	bl	8012ae4 <spi2_dma_init>
	spi2_config();
 80129d0:	f000 f8cc 	bl	8012b6c <spi2_config>

	LL_SPI_Enable(SPI2);
 80129d4:	480c      	ldr	r0, [pc, #48]	; (8012a08 <spi2_init+0x48>)
 80129d6:	f7ff fd0a 	bl	80123ee <LL_SPI_Enable>

	drv->spi = SPI2;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	4a0a      	ldr	r2, [pc, #40]	; (8012a08 <spi2_init+0x48>)
 80129de:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	4a0a      	ldr	r2, [pc, #40]	; (8012a0c <spi2_init+0x4c>)
 80129e4:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2204      	movs	r2, #4
 80129ea:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 80129f2:	2001      	movs	r0, #1
 80129f4:	f7f7 f89e 	bl	8009b34 <xQueueCreateMutex>
 80129f8:	4602      	mov	r2, r0
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	605a      	str	r2, [r3, #4]
}
 80129fe:	bf00      	nop
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	40003800 	.word	0x40003800
 8012a0c:	40026000 	.word	0x40026000

08012a10 <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 8012a18:	f000 f8e6 	bl	8012be8 <spi4_pin_conf>
	spi4_dma_init();
 8012a1c:	f000 f908 	bl	8012c30 <spi4_dma_init>
	spi4_config();
 8012a20:	f000 f988 	bl	8012d34 <spi4_config>

	LL_SPI_Enable(SPI4);
 8012a24:	480c      	ldr	r0, [pc, #48]	; (8012a58 <spi4_init+0x48>)
 8012a26:	f7ff fce2 	bl	80123ee <LL_SPI_Enable>

	drv->spi = SPI4;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4a0a      	ldr	r2, [pc, #40]	; (8012a58 <spi4_init+0x48>)
 8012a2e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	4a0a      	ldr	r2, [pc, #40]	; (8012a5c <spi4_init+0x4c>)
 8012a34:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2201      	movs	r2, #1
 8012a3a:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2200      	movs	r2, #0
 8012a40:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8012a42:	2001      	movs	r0, #1
 8012a44:	f7f7 f876 	bl	8009b34 <xQueueCreateMutex>
 8012a48:	4602      	mov	r2, r0
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	605a      	str	r2, [r3, #4]
}
 8012a4e:	bf00      	nop
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	40013400 	.word	0x40013400
 8012a5c:	40026400 	.word	0x40026400

08012a60 <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 8012a68:	f000 f9a2 	bl	8012db0 <spi5_pin_conf>
	spi5_dma_init();
 8012a6c:	f000 f9c4 	bl	8012df8 <spi5_dma_init>
	spi5_config();
 8012a70:	f000 fa06 	bl	8012e80 <spi5_config>

	LL_SPI_Enable(SPI5);
 8012a74:	480c      	ldr	r0, [pc, #48]	; (8012aa8 <spi5_init+0x48>)
 8012a76:	f7ff fcba 	bl	80123ee <LL_SPI_Enable>

	drv->spi = SPI5;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4a0a      	ldr	r2, [pc, #40]	; (8012aa8 <spi5_init+0x48>)
 8012a7e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	4a0a      	ldr	r2, [pc, #40]	; (8012aac <spi5_init+0x4c>)
 8012a84:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2204      	movs	r2, #4
 8012a8a:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8012a92:	2001      	movs	r0, #1
 8012a94:	f7f7 f84e 	bl	8009b34 <xQueueCreateMutex>
 8012a98:	4602      	mov	r2, r0
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	605a      	str	r2, [r3, #4]
}
 8012a9e:	bf00      	nop
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	40015000 	.word	0x40015000
 8012aac:	40026400 	.word	0x40026400

08012ab0 <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8012ab6:	2305      	movs	r3, #5
 8012ab8:	9300      	str	r3, [sp, #0]
 8012aba:	2303      	movs	r3, #3
 8012abc:	2200      	movs	r2, #0
 8012abe:	2103      	movs	r1, #3
 8012ac0:	4806      	ldr	r0, [pc, #24]	; (8012adc <spi2_pin_conf+0x2c>)
 8012ac2:	f7fd fe51 	bl	8010768 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8012ac6:	2305      	movs	r3, #5
 8012ac8:	9300      	str	r3, [sp, #0]
 8012aca:	2303      	movs	r3, #3
 8012acc:	2200      	movs	r2, #0
 8012ace:	2103      	movs	r1, #3
 8012ad0:	4803      	ldr	r0, [pc, #12]	; (8012ae0 <spi2_pin_conf+0x30>)
 8012ad2:	f7fd fe49 	bl	8010768 <hal_gpio_init_alt>
		&gpio_spi2_mosi,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8012ad6:	bf00      	nop
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	080164fc 	.word	0x080164fc
 8012ae0:	08016504 	.word	0x08016504

08012ae4 <spi2_dma_init>:

static void spi2_dma_init(void)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012ae8:	f7ff fbf8 	bl	80122dc <__NVIC_GetPriorityGrouping>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2200      	movs	r2, #0
 8012af0:	2105      	movs	r1, #5
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7ff fc48 	bl	8012388 <NVIC_EncodePriority>
 8012af8:	4603      	mov	r3, r0
 8012afa:	4619      	mov	r1, r3
 8012afc:	200f      	movs	r0, #15
 8012afe:	f7ff fc19 	bl	8012334 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8012b02:	200f      	movs	r0, #15
 8012b04:	f7ff fbf8 	bl	80122f8 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, DMA_SPI2_TX_STREAM, DMA_SPI2_TX_CHANNEL);
 8012b08:	2200      	movs	r2, #0
 8012b0a:	2104      	movs	r1, #4
 8012b0c:	4816      	ldr	r0, [pc, #88]	; (8012b68 <spi2_dma_init+0x84>)
 8012b0e:	f7ff fde7 	bl	80126e0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8012b12:	2240      	movs	r2, #64	; 0x40
 8012b14:	2104      	movs	r1, #4
 8012b16:	4814      	ldr	r0, [pc, #80]	; (8012b68 <spi2_dma_init+0x84>)
 8012b18:	f7ff fce6 	bl	80124e8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	2104      	movs	r1, #4
 8012b20:	4811      	ldr	r0, [pc, #68]	; (8012b68 <spi2_dma_init+0x84>)
 8012b22:	f7ff fdb9 	bl	8012698 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MODE_NORMAL);
 8012b26:	2200      	movs	r2, #0
 8012b28:	2104      	movs	r1, #4
 8012b2a:	480f      	ldr	r0, [pc, #60]	; (8012b68 <spi2_dma_init+0x84>)
 8012b2c:	f7ff fd00 	bl	8012530 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012b30:	2200      	movs	r2, #0
 8012b32:	2104      	movs	r1, #4
 8012b34:	480c      	ldr	r0, [pc, #48]	; (8012b68 <spi2_dma_init+0x84>)
 8012b36:	f7ff fd1f 	bl	8012578 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012b3e:	2104      	movs	r1, #4
 8012b40:	4809      	ldr	r0, [pc, #36]	; (8012b68 <spi2_dma_init+0x84>)
 8012b42:	f7ff fd3d 	bl	80125c0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012b46:	2200      	movs	r2, #0
 8012b48:	2104      	movs	r1, #4
 8012b4a:	4807      	ldr	r0, [pc, #28]	; (8012b68 <spi2_dma_init+0x84>)
 8012b4c:	f7ff fd5c 	bl	8012608 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012b50:	2200      	movs	r2, #0
 8012b52:	2104      	movs	r1, #4
 8012b54:	4804      	ldr	r0, [pc, #16]	; (8012b68 <spi2_dma_init+0x84>)
 8012b56:	f7ff fd7b 	bl	8012650 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, DMA_SPI2_TX_STREAM);
 8012b5a:	2104      	movs	r1, #4
 8012b5c:	4802      	ldr	r0, [pc, #8]	; (8012b68 <spi2_dma_init+0x84>)
 8012b5e:	f7ff fde3 	bl	8012728 <LL_DMA_DisableFifoMode>
}
 8012b62:	bf00      	nop
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	40026000 	.word	0x40026000

08012b6c <spi2_config>:

static void spi2_config(void)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b08a      	sub	sp, #40	; 0x28
 8012b70:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8012b72:	463b      	mov	r3, r7
 8012b74:	2228      	movs	r2, #40	; 0x28
 8012b76:	2100      	movs	r1, #0
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f001 ff1b 	bl	80149b4 <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012b7e:	f7ff fbad 	bl	80122dc <__NVIC_GetPriorityGrouping>
 8012b82:	4603      	mov	r3, r0
 8012b84:	2200      	movs	r2, #0
 8012b86:	2105      	movs	r1, #5
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7ff fbfd 	bl	8012388 <NVIC_EncodePriority>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	4619      	mov	r1, r3
 8012b92:	2024      	movs	r0, #36	; 0x24
 8012b94:	f7ff fbce 	bl	8012334 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 8012b98:	2024      	movs	r0, #36	; 0x24
 8012b9a:	f7ff fbad 	bl	80122f8 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8012ba2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012ba6:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8012bac:	2300      	movs	r3, #0
 8012bae:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8012bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012bb8:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8012bba:	2318      	movs	r3, #24
 8012bbc:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 8012bc6:	230a      	movs	r3, #10
 8012bc8:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 8012bca:	463b      	mov	r3, r7
 8012bcc:	4619      	mov	r1, r3
 8012bce:	4805      	ldr	r0, [pc, #20]	; (8012be4 <spi2_config+0x78>)
 8012bd0:	f7f1 ff29 	bl	8004a26 <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	4803      	ldr	r0, [pc, #12]	; (8012be4 <spi2_config+0x78>)
 8012bd8:	f7ff fc19 	bl	801240e <LL_SPI_SetStandard>
}
 8012bdc:	bf00      	nop
 8012bde:	3728      	adds	r7, #40	; 0x28
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	40003800 	.word	0x40003800

08012be8 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8012bee:	2305      	movs	r3, #5
 8012bf0:	9300      	str	r3, [sp, #0]
 8012bf2:	2303      	movs	r3, #3
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	2103      	movs	r1, #3
 8012bf8:	480a      	ldr	r0, [pc, #40]	; (8012c24 <spi4_pin_conf+0x3c>)
 8012bfa:	f7fd fdb5 	bl	8010768 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8012bfe:	2305      	movs	r3, #5
 8012c00:	9300      	str	r3, [sp, #0]
 8012c02:	2303      	movs	r3, #3
 8012c04:	2200      	movs	r2, #0
 8012c06:	2103      	movs	r1, #3
 8012c08:	4807      	ldr	r0, [pc, #28]	; (8012c28 <spi4_pin_conf+0x40>)
 8012c0a:	f7fd fdad 	bl	8010768 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8012c0e:	2305      	movs	r3, #5
 8012c10:	9300      	str	r3, [sp, #0]
 8012c12:	2303      	movs	r3, #3
 8012c14:	2200      	movs	r2, #0
 8012c16:	2103      	movs	r1, #3
 8012c18:	4804      	ldr	r0, [pc, #16]	; (8012c2c <spi4_pin_conf+0x44>)
 8012c1a:	f7fd fda5 	bl	8010768 <hal_gpio_init_alt>
		&gpio_spi4_miso,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8012c1e:	bf00      	nop
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	0801650c 	.word	0x0801650c
 8012c28:	08016514 	.word	0x08016514
 8012c2c:	0801651c 	.word	0x0801651c

08012c30 <spi4_dma_init>:

static void spi4_dma_init(void)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012c34:	f7ff fb52 	bl	80122dc <__NVIC_GetPriorityGrouping>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	2105      	movs	r1, #5
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7ff fba2 	bl	8012388 <NVIC_EncodePriority>
 8012c44:	4603      	mov	r3, r0
 8012c46:	4619      	mov	r1, r3
 8012c48:	2038      	movs	r0, #56	; 0x38
 8012c4a:	f7ff fb73 	bl	8012334 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8012c4e:	2038      	movs	r0, #56	; 0x38
 8012c50:	f7ff fb52 	bl	80122f8 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012c54:	f7ff fb42 	bl	80122dc <__NVIC_GetPriorityGrouping>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2105      	movs	r1, #5
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff fb92 	bl	8012388 <NVIC_EncodePriority>
 8012c64:	4603      	mov	r3, r0
 8012c66:	4619      	mov	r1, r3
 8012c68:	2039      	movs	r0, #57	; 0x39
 8012c6a:	f7ff fb63 	bl	8012334 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8012c6e:	2039      	movs	r0, #57	; 0x39
 8012c70:	f7ff fb42 	bl	80122f8 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_RX_STREAM, DMA_SPI4_RX_CHANNEL);
 8012c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012c78:	2100      	movs	r1, #0
 8012c7a:	482d      	ldr	r0, [pc, #180]	; (8012d30 <spi4_dma_init+0x100>)
 8012c7c:	f7ff fd30 	bl	80126e0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8012c80:	2200      	movs	r2, #0
 8012c82:	2100      	movs	r1, #0
 8012c84:	482a      	ldr	r0, [pc, #168]	; (8012d30 <spi4_dma_init+0x100>)
 8012c86:	f7ff fc2f 	bl	80124e8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	4828      	ldr	r0, [pc, #160]	; (8012d30 <spi4_dma_init+0x100>)
 8012c90:	f7ff fd02 	bl	8012698 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MODE_NORMAL);
 8012c94:	2200      	movs	r2, #0
 8012c96:	2100      	movs	r1, #0
 8012c98:	4825      	ldr	r0, [pc, #148]	; (8012d30 <spi4_dma_init+0x100>)
 8012c9a:	f7ff fc49 	bl	8012530 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	4823      	ldr	r0, [pc, #140]	; (8012d30 <spi4_dma_init+0x100>)
 8012ca4:	f7ff fc68 	bl	8012578 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012cac:	2100      	movs	r1, #0
 8012cae:	4820      	ldr	r0, [pc, #128]	; (8012d30 <spi4_dma_init+0x100>)
 8012cb0:	f7ff fc86 	bl	80125c0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	2100      	movs	r1, #0
 8012cb8:	481d      	ldr	r0, [pc, #116]	; (8012d30 <spi4_dma_init+0x100>)
 8012cba:	f7ff fca5 	bl	8012608 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	481b      	ldr	r0, [pc, #108]	; (8012d30 <spi4_dma_init+0x100>)
 8012cc4:	f7ff fcc4 	bl	8012650 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_RX_STREAM);
 8012cc8:	2100      	movs	r1, #0
 8012cca:	4819      	ldr	r0, [pc, #100]	; (8012d30 <spi4_dma_init+0x100>)
 8012ccc:	f7ff fd2c 	bl	8012728 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_TX_STREAM, DMA_SPI4_TX_CHANNEL);
 8012cd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	4816      	ldr	r0, [pc, #88]	; (8012d30 <spi4_dma_init+0x100>)
 8012cd8:	f7ff fd02 	bl	80126e0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8012cdc:	2240      	movs	r2, #64	; 0x40
 8012cde:	2101      	movs	r1, #1
 8012ce0:	4813      	ldr	r0, [pc, #76]	; (8012d30 <spi4_dma_init+0x100>)
 8012ce2:	f7ff fc01 	bl	80124e8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	2101      	movs	r1, #1
 8012cea:	4811      	ldr	r0, [pc, #68]	; (8012d30 <spi4_dma_init+0x100>)
 8012cec:	f7ff fcd4 	bl	8012698 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MODE_NORMAL);
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	2101      	movs	r1, #1
 8012cf4:	480e      	ldr	r0, [pc, #56]	; (8012d30 <spi4_dma_init+0x100>)
 8012cf6:	f7ff fc1b 	bl	8012530 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	2101      	movs	r1, #1
 8012cfe:	480c      	ldr	r0, [pc, #48]	; (8012d30 <spi4_dma_init+0x100>)
 8012d00:	f7ff fc3a 	bl	8012578 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012d08:	2101      	movs	r1, #1
 8012d0a:	4809      	ldr	r0, [pc, #36]	; (8012d30 <spi4_dma_init+0x100>)
 8012d0c:	f7ff fc58 	bl	80125c0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012d10:	2200      	movs	r2, #0
 8012d12:	2101      	movs	r1, #1
 8012d14:	4806      	ldr	r0, [pc, #24]	; (8012d30 <spi4_dma_init+0x100>)
 8012d16:	f7ff fc77 	bl	8012608 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	2101      	movs	r1, #1
 8012d1e:	4804      	ldr	r0, [pc, #16]	; (8012d30 <spi4_dma_init+0x100>)
 8012d20:	f7ff fc96 	bl	8012650 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_TX_STREAM);
 8012d24:	2101      	movs	r1, #1
 8012d26:	4802      	ldr	r0, [pc, #8]	; (8012d30 <spi4_dma_init+0x100>)
 8012d28:	f7ff fcfe 	bl	8012728 <LL_DMA_DisableFifoMode>
}
 8012d2c:	bf00      	nop
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	40026400 	.word	0x40026400

08012d34 <spi4_config>:

static void spi4_config(void)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b08a      	sub	sp, #40	; 0x28
 8012d38:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8012d3a:	463b      	mov	r3, r7
 8012d3c:	2228      	movs	r2, #40	; 0x28
 8012d3e:	2100      	movs	r1, #0
 8012d40:	4618      	mov	r0, r3
 8012d42:	f001 fe37 	bl	80149b4 <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012d46:	f7ff fac9 	bl	80122dc <__NVIC_GetPriorityGrouping>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	2105      	movs	r1, #5
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7ff fb19 	bl	8012388 <NVIC_EncodePriority>
 8012d56:	4603      	mov	r3, r0
 8012d58:	4619      	mov	r1, r3
 8012d5a:	2054      	movs	r0, #84	; 0x54
 8012d5c:	f7ff faea 	bl	8012334 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 8012d60:	2054      	movs	r0, #84	; 0x54
 8012d62:	f7ff fac9 	bl	80122f8 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8012d66:	2300      	movs	r3, #0
 8012d68:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8012d6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012d6e:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8012d70:	2300      	movs	r3, #0
 8012d72:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8012d74:	2300      	movs	r3, #0
 8012d76:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8012d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d80:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8012d82:	2328      	movs	r3, #40	; 0x28
 8012d84:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8012d86:	2300      	movs	r3, #0
 8012d88:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8012d8e:	230a      	movs	r3, #10
 8012d90:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 8012d92:	463b      	mov	r3, r7
 8012d94:	4619      	mov	r1, r3
 8012d96:	4805      	ldr	r0, [pc, #20]	; (8012dac <spi4_config+0x78>)
 8012d98:	f7f1 fe45 	bl	8004a26 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	4803      	ldr	r0, [pc, #12]	; (8012dac <spi4_config+0x78>)
 8012da0:	f7ff fb35 	bl	801240e <LL_SPI_SetStandard>
}
 8012da4:	bf00      	nop
 8012da6:	3728      	adds	r7, #40	; 0x28
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	40013400 	.word	0x40013400

08012db0 <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012db6:	463b      	mov	r3, r7
 8012db8:	2200      	movs	r2, #0
 8012dba:	601a      	str	r2, [r3, #0]
 8012dbc:	605a      	str	r2, [r3, #4]
 8012dbe:	609a      	str	r2, [r3, #8]
 8012dc0:	60da      	str	r2, [r3, #12]
 8012dc2:	611a      	str	r2, [r3, #16]
 8012dc4:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8012dc6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8012dca:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8012dcc:	2302      	movs	r3, #2
 8012dce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8012dd0:	2303      	movs	r3, #3
 8012dd2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8012ddc:	2305      	movs	r3, #5
 8012dde:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012de0:	463b      	mov	r3, r7
 8012de2:	4619      	mov	r1, r3
 8012de4:	4803      	ldr	r0, [pc, #12]	; (8012df4 <spi5_pin_conf+0x44>)
 8012de6:	f7f0 fdd6 	bl	8003996 <LL_GPIO_Init>
}
 8012dea:	bf00      	nop
 8012dec:	3718      	adds	r7, #24
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	40021400 	.word	0x40021400

08012df8 <spi5_dma_init>:

static void spi5_dma_init(void)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012dfc:	f7ff fa6e 	bl	80122dc <__NVIC_GetPriorityGrouping>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2200      	movs	r2, #0
 8012e04:	2105      	movs	r1, #5
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7ff fabe 	bl	8012388 <NVIC_EncodePriority>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	4619      	mov	r1, r3
 8012e10:	203c      	movs	r0, #60	; 0x3c
 8012e12:	f7ff fa8f 	bl	8012334 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8012e16:	203c      	movs	r0, #60	; 0x3c
 8012e18:	f7ff fa6e 	bl	80122f8 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 8012e1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012e20:	2104      	movs	r1, #4
 8012e22:	4816      	ldr	r0, [pc, #88]	; (8012e7c <spi5_dma_init+0x84>)
 8012e24:	f7ff fc5c 	bl	80126e0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8012e28:	2240      	movs	r2, #64	; 0x40
 8012e2a:	2104      	movs	r1, #4
 8012e2c:	4813      	ldr	r0, [pc, #76]	; (8012e7c <spi5_dma_init+0x84>)
 8012e2e:	f7ff fb5b 	bl	80124e8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8012e32:	2200      	movs	r2, #0
 8012e34:	2104      	movs	r1, #4
 8012e36:	4811      	ldr	r0, [pc, #68]	; (8012e7c <spi5_dma_init+0x84>)
 8012e38:	f7ff fc2e 	bl	8012698 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	2104      	movs	r1, #4
 8012e40:	480e      	ldr	r0, [pc, #56]	; (8012e7c <spi5_dma_init+0x84>)
 8012e42:	f7ff fb75 	bl	8012530 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8012e46:	2200      	movs	r2, #0
 8012e48:	2104      	movs	r1, #4
 8012e4a:	480c      	ldr	r0, [pc, #48]	; (8012e7c <spi5_dma_init+0x84>)
 8012e4c:	f7ff fb94 	bl	8012578 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8012e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012e54:	2104      	movs	r1, #4
 8012e56:	4809      	ldr	r0, [pc, #36]	; (8012e7c <spi5_dma_init+0x84>)
 8012e58:	f7ff fbb2 	bl	80125c0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	2104      	movs	r1, #4
 8012e60:	4806      	ldr	r0, [pc, #24]	; (8012e7c <spi5_dma_init+0x84>)
 8012e62:	f7ff fbd1 	bl	8012608 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8012e66:	2200      	movs	r2, #0
 8012e68:	2104      	movs	r1, #4
 8012e6a:	4804      	ldr	r0, [pc, #16]	; (8012e7c <spi5_dma_init+0x84>)
 8012e6c:	f7ff fbf0 	bl	8012650 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 8012e70:	2104      	movs	r1, #4
 8012e72:	4802      	ldr	r0, [pc, #8]	; (8012e7c <spi5_dma_init+0x84>)
 8012e74:	f7ff fc58 	bl	8012728 <LL_DMA_DisableFifoMode>
}
 8012e78:	bf00      	nop
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	40026400 	.word	0x40026400

08012e80 <spi5_config>:

static void spi5_config(void)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b08a      	sub	sp, #40	; 0x28
 8012e84:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8012e86:	463b      	mov	r3, r7
 8012e88:	2228      	movs	r2, #40	; 0x28
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f001 fd91 	bl	80149b4 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 8012e92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012e96:	f7ff fc67 	bl	8012768 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012e9a:	f7ff fa1f 	bl	80122dc <__NVIC_GetPriorityGrouping>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	2105      	movs	r1, #5
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7ff fa6f 	bl	8012388 <NVIC_EncodePriority>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	4619      	mov	r1, r3
 8012eae:	2055      	movs	r0, #85	; 0x55
 8012eb0:	f7ff fa40 	bl	8012334 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 8012eb4:	2055      	movs	r0, #85	; 0x55
 8012eb6:	f7ff fa1f 	bl	80122f8 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8012ebe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012ec2:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8012ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ed4:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8012ed6:	2318      	movs	r3, #24
 8012ed8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8012eda:	2300      	movs	r3, #0
 8012edc:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8012ee2:	230a      	movs	r3, #10
 8012ee4:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 8012ee6:	463b      	mov	r3, r7
 8012ee8:	4619      	mov	r1, r3
 8012eea:	4805      	ldr	r0, [pc, #20]	; (8012f00 <spi5_config+0x80>)
 8012eec:	f7f1 fd9b 	bl	8004a26 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	4803      	ldr	r0, [pc, #12]	; (8012f00 <spi5_config+0x80>)
 8012ef4:	f7ff fa8b 	bl	801240e <LL_SPI_SetStandard>
}
 8012ef8:	bf00      	nop
 8012efa:	3728      	adds	r7, #40	; 0x28
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	40015000 	.word	0x40015000

08012f04 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8012f04:	b480      	push	{r7}
 8012f06:	af00      	add	r7, sp, #0

}
 8012f08:	bf00      	nop
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr

08012f12 <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 8012f12:	b480      	push	{r7}
 8012f14:	af00      	add	r7, sp, #0

}
 8012f16:	bf00      	nop
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 8012f20:	b480      	push	{r7}
 8012f22:	af00      	add	r7, sp, #0

}
 8012f24:	bf00      	nop
 8012f26:	46bd      	mov	sp, r7
 8012f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2c:	4770      	bx	lr

08012f2e <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 8012f2e:	b480      	push	{r7}
 8012f30:	af00      	add	r7, sp, #0

}
 8012f32:	bf00      	nop
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr

08012f3c <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	af00      	add	r7, sp, #0

}
 8012f40:	bf00      	nop
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr

08012f4a <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 8012f4a:	b480      	push	{r7}
 8012f4c:	af00      	add	r7, sp, #0

}
 8012f4e:	bf00      	nop
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr

08012f58 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 8012f58:	b480      	push	{r7}
 8012f5a:	af00      	add	r7, sp, #0

}
 8012f5c:	bf00      	nop
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr
	...

08012f68 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012f6e:	2300      	movs	r3, #0
 8012f70:	607b      	str	r3, [r7, #4]
 8012f72:	4b12      	ldr	r3, [pc, #72]	; (8012fbc <HAL_MspInit+0x54>)
 8012f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f76:	4a11      	ldr	r2, [pc, #68]	; (8012fbc <HAL_MspInit+0x54>)
 8012f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8012f7e:	4b0f      	ldr	r3, [pc, #60]	; (8012fbc <HAL_MspInit+0x54>)
 8012f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f86:	607b      	str	r3, [r7, #4]
 8012f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	603b      	str	r3, [r7, #0]
 8012f8e:	4b0b      	ldr	r3, [pc, #44]	; (8012fbc <HAL_MspInit+0x54>)
 8012f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f92:	4a0a      	ldr	r2, [pc, #40]	; (8012fbc <HAL_MspInit+0x54>)
 8012f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f98:	6413      	str	r3, [r2, #64]	; 0x40
 8012f9a:	4b08      	ldr	r3, [pc, #32]	; (8012fbc <HAL_MspInit+0x54>)
 8012f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012fa2:	603b      	str	r3, [r7, #0]
 8012fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	210f      	movs	r1, #15
 8012faa:	f06f 0001 	mvn.w	r0, #1
 8012fae:	f7ee f96d 	bl	800128c <HAL_NVIC_SetPriority>
}
 8012fb2:	bf00      	nop
 8012fb4:	3708      	adds	r7, #8
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	40023800 	.word	0x40023800

08012fc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b08e      	sub	sp, #56	; 0x38
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	60fb      	str	r3, [r7, #12]
 8012fd4:	4b33      	ldr	r3, [pc, #204]	; (80130a4 <HAL_InitTick+0xe4>)
 8012fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fd8:	4a32      	ldr	r2, [pc, #200]	; (80130a4 <HAL_InitTick+0xe4>)
 8012fda:	f043 0310 	orr.w	r3, r3, #16
 8012fde:	6413      	str	r3, [r2, #64]	; 0x40
 8012fe0:	4b30      	ldr	r3, [pc, #192]	; (80130a4 <HAL_InitTick+0xe4>)
 8012fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fe4:	f003 0310 	and.w	r3, r3, #16
 8012fe8:	60fb      	str	r3, [r7, #12]
 8012fea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012fec:	f107 0210 	add.w	r2, r7, #16
 8012ff0:	f107 0314 	add.w	r3, r7, #20
 8012ff4:	4611      	mov	r1, r2
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ee fedc 	bl	8001db4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8012ffc:	6a3b      	ldr	r3, [r7, #32]
 8012ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8013000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013002:	2b00      	cmp	r3, #0
 8013004:	d103      	bne.n	801300e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8013006:	f7ee fec1 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 801300a:	6378      	str	r0, [r7, #52]	; 0x34
 801300c:	e004      	b.n	8013018 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801300e:	f7ee febd 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8013012:	4603      	mov	r3, r0
 8013014:	005b      	lsls	r3, r3, #1
 8013016:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801301a:	4a23      	ldr	r2, [pc, #140]	; (80130a8 <HAL_InitTick+0xe8>)
 801301c:	fba2 2303 	umull	r2, r3, r2, r3
 8013020:	0c9b      	lsrs	r3, r3, #18
 8013022:	3b01      	subs	r3, #1
 8013024:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8013026:	4b21      	ldr	r3, [pc, #132]	; (80130ac <HAL_InitTick+0xec>)
 8013028:	4a21      	ldr	r2, [pc, #132]	; (80130b0 <HAL_InitTick+0xf0>)
 801302a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 801302c:	4b1f      	ldr	r3, [pc, #124]	; (80130ac <HAL_InitTick+0xec>)
 801302e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013032:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8013034:	4a1d      	ldr	r2, [pc, #116]	; (80130ac <HAL_InitTick+0xec>)
 8013036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013038:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801303a:	4b1c      	ldr	r3, [pc, #112]	; (80130ac <HAL_InitTick+0xec>)
 801303c:	2200      	movs	r2, #0
 801303e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013040:	4b1a      	ldr	r3, [pc, #104]	; (80130ac <HAL_InitTick+0xec>)
 8013042:	2200      	movs	r2, #0
 8013044:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013046:	4b19      	ldr	r3, [pc, #100]	; (80130ac <HAL_InitTick+0xec>)
 8013048:	2200      	movs	r2, #0
 801304a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 801304c:	4817      	ldr	r0, [pc, #92]	; (80130ac <HAL_InitTick+0xec>)
 801304e:	f7f0 f813 	bl	8003078 <HAL_TIM_Base_Init>
 8013052:	4603      	mov	r3, r0
 8013054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8013058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801305c:	2b00      	cmp	r3, #0
 801305e:	d11b      	bne.n	8013098 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8013060:	4812      	ldr	r0, [pc, #72]	; (80130ac <HAL_InitTick+0xec>)
 8013062:	f7f0 f863 	bl	800312c <HAL_TIM_Base_Start_IT>
 8013066:	4603      	mov	r3, r0
 8013068:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 801306c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013070:	2b00      	cmp	r3, #0
 8013072:	d111      	bne.n	8013098 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8013074:	2036      	movs	r0, #54	; 0x36
 8013076:	f7ee f925 	bl	80012c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2b0f      	cmp	r3, #15
 801307e:	d808      	bhi.n	8013092 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8013080:	2200      	movs	r2, #0
 8013082:	6879      	ldr	r1, [r7, #4]
 8013084:	2036      	movs	r0, #54	; 0x36
 8013086:	f7ee f901 	bl	800128c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801308a:	4a0a      	ldr	r2, [pc, #40]	; (80130b4 <HAL_InitTick+0xf4>)
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6013      	str	r3, [r2, #0]
 8013090:	e002      	b.n	8013098 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8013092:	2301      	movs	r3, #1
 8013094:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8013098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801309c:	4618      	mov	r0, r3
 801309e:	3738      	adds	r7, #56	; 0x38
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	40023800 	.word	0x40023800
 80130a8:	431bde83 	.word	0x431bde83
 80130ac:	20005ab4 	.word	0x20005ab4
 80130b0:	40001000 	.word	0x40001000
 80130b4:	20000004 	.word	0x20000004

080130b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80130b8:	b480      	push	{r7}
 80130ba:	af00      	add	r7, sp, #0
  while (1)
 80130bc:	e7fe      	b.n	80130bc <NMI_Handler+0x4>

080130be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80130be:	b480      	push	{r7}
 80130c0:	af00      	add	r7, sp, #0
  while (1)
 80130c2:	e7fe      	b.n	80130c2 <HardFault_Handler+0x4>

080130c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80130c4:	b480      	push	{r7}
 80130c6:	af00      	add	r7, sp, #0
  while (1)
 80130c8:	e7fe      	b.n	80130c8 <MemManage_Handler+0x4>

080130ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80130ca:	b480      	push	{r7}
 80130cc:	af00      	add	r7, sp, #0
  while (1)
 80130ce:	e7fe      	b.n	80130ce <BusFault_Handler+0x4>

080130d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80130d0:	b480      	push	{r7}
 80130d2:	af00      	add	r7, sp, #0
  while (1)
 80130d4:	e7fe      	b.n	80130d4 <UsageFault_Handler+0x4>

080130d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80130d6:	b480      	push	{r7}
 80130d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80130da:	bf00      	nop
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr

080130e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80130e8:	4802      	ldr	r0, [pc, #8]	; (80130f4 <TIM6_DAC_IRQHandler+0x10>)
 80130ea:	f7f0 f88f 	bl	800320c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80130ee:	bf00      	nop
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	20005ab4 	.word	0x20005ab4

080130f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	4a04      	ldr	r2, [pc, #16]	; (8013118 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8013106:	4293      	cmp	r3, r2
 8013108:	d101      	bne.n	801310e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801310a:	f7ed ffc3 	bl	8001094 <HAL_IncTick>
  }
}
 801310e:	bf00      	nop
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop
 8013118:	40001000 	.word	0x40001000

0801311c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801311c:	b480      	push	{r7}
 801311e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013120:	4b06      	ldr	r3, [pc, #24]	; (801313c <SystemInit+0x20>)
 8013122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013126:	4a05      	ldr	r2, [pc, #20]	; (801313c <SystemInit+0x20>)
 8013128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801312c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013130:	bf00      	nop
 8013132:	46bd      	mov	sp, r7
 8013134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013138:	4770      	bx	lr
 801313a:	bf00      	nop
 801313c:	e000ed00 	.word	0xe000ed00

08013140 <__NVIC_GetPriorityGrouping>:
{
 8013140:	b480      	push	{r7}
 8013142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013144:	4b04      	ldr	r3, [pc, #16]	; (8013158 <__NVIC_GetPriorityGrouping+0x18>)
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	0a1b      	lsrs	r3, r3, #8
 801314a:	f003 0307 	and.w	r3, r3, #7
}
 801314e:	4618      	mov	r0, r3
 8013150:	46bd      	mov	sp, r7
 8013152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013156:	4770      	bx	lr
 8013158:	e000ed00 	.word	0xe000ed00

0801315c <__NVIC_EnableIRQ>:
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	4603      	mov	r3, r0
 8013164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801316a:	2b00      	cmp	r3, #0
 801316c:	db0b      	blt.n	8013186 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801316e:	79fb      	ldrb	r3, [r7, #7]
 8013170:	f003 021f 	and.w	r2, r3, #31
 8013174:	4907      	ldr	r1, [pc, #28]	; (8013194 <__NVIC_EnableIRQ+0x38>)
 8013176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801317a:	095b      	lsrs	r3, r3, #5
 801317c:	2001      	movs	r0, #1
 801317e:	fa00 f202 	lsl.w	r2, r0, r2
 8013182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013186:	bf00      	nop
 8013188:	370c      	adds	r7, #12
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	e000e100 	.word	0xe000e100

08013198 <__NVIC_SetPriority>:
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	4603      	mov	r3, r0
 80131a0:	6039      	str	r1, [r7, #0]
 80131a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80131a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	db0a      	blt.n	80131c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	b2da      	uxtb	r2, r3
 80131b0:	490c      	ldr	r1, [pc, #48]	; (80131e4 <__NVIC_SetPriority+0x4c>)
 80131b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80131b6:	0112      	lsls	r2, r2, #4
 80131b8:	b2d2      	uxtb	r2, r2
 80131ba:	440b      	add	r3, r1
 80131bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80131c0:	e00a      	b.n	80131d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	b2da      	uxtb	r2, r3
 80131c6:	4908      	ldr	r1, [pc, #32]	; (80131e8 <__NVIC_SetPriority+0x50>)
 80131c8:	79fb      	ldrb	r3, [r7, #7]
 80131ca:	f003 030f 	and.w	r3, r3, #15
 80131ce:	3b04      	subs	r3, #4
 80131d0:	0112      	lsls	r2, r2, #4
 80131d2:	b2d2      	uxtb	r2, r2
 80131d4:	440b      	add	r3, r1
 80131d6:	761a      	strb	r2, [r3, #24]
}
 80131d8:	bf00      	nop
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr
 80131e4:	e000e100 	.word	0xe000e100
 80131e8:	e000ed00 	.word	0xe000ed00

080131ec <NVIC_EncodePriority>:
{
 80131ec:	b480      	push	{r7}
 80131ee:	b089      	sub	sp, #36	; 0x24
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f003 0307 	and.w	r3, r3, #7
 80131fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	f1c3 0307 	rsb	r3, r3, #7
 8013206:	2b04      	cmp	r3, #4
 8013208:	bf28      	it	cs
 801320a:	2304      	movcs	r3, #4
 801320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801320e:	69fb      	ldr	r3, [r7, #28]
 8013210:	3304      	adds	r3, #4
 8013212:	2b06      	cmp	r3, #6
 8013214:	d902      	bls.n	801321c <NVIC_EncodePriority+0x30>
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	3b03      	subs	r3, #3
 801321a:	e000      	b.n	801321e <NVIC_EncodePriority+0x32>
 801321c:	2300      	movs	r3, #0
 801321e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013224:	69bb      	ldr	r3, [r7, #24]
 8013226:	fa02 f303 	lsl.w	r3, r2, r3
 801322a:	43da      	mvns	r2, r3
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	401a      	ands	r2, r3
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	fa01 f303 	lsl.w	r3, r1, r3
 801323e:	43d9      	mvns	r1, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013244:	4313      	orrs	r3, r2
}
 8013246:	4618      	mov	r0, r3
 8013248:	3724      	adds	r7, #36	; 0x24
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr

08013252 <LL_TIM_EnableCounter>:
{
 8013252:	b480      	push	{r7}
 8013254:	b083      	sub	sp, #12
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f043 0201 	orr.w	r2, r3, #1
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	601a      	str	r2, [r3, #0]
}
 8013266:	bf00      	nop
 8013268:	370c      	adds	r7, #12
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr

08013272 <LL_TIM_DisableCounter>:
{
 8013272:	b480      	push	{r7}
 8013274:	b083      	sub	sp, #12
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f023 0201 	bic.w	r2, r3, #1
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	601a      	str	r2, [r3, #0]
}
 8013286:	bf00      	nop
 8013288:	370c      	adds	r7, #12
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr

08013292 <LL_TIM_DisableARRPreload>:
{
 8013292:	b480      	push	{r7}
 8013294:	b083      	sub	sp, #12
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	601a      	str	r2, [r3, #0]
}
 80132a6:	bf00      	nop
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr

080132b2 <LL_TIM_SetClockSource>:
{
 80132b2:	b480      	push	{r7}
 80132b4:	b083      	sub	sp, #12
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
 80132ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	689b      	ldr	r3, [r3, #8]
 80132c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80132c4:	f023 0307 	bic.w	r3, r3, #7
 80132c8:	683a      	ldr	r2, [r7, #0]
 80132ca:	431a      	orrs	r2, r3
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	609a      	str	r2, [r3, #8]
}
 80132d0:	bf00      	nop
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr

080132dc <LL_TIM_ClearFlag_UPDATE>:
{
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f06f 0201 	mvn.w	r2, #1
 80132ea:	611a      	str	r2, [r3, #16]
}
 80132ec:	bf00      	nop
 80132ee:	370c      	adds	r7, #12
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr

080132f8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80132f8:	b480      	push	{r7}
 80132fa:	b083      	sub	sp, #12
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	691b      	ldr	r3, [r3, #16]
 8013304:	f003 0301 	and.w	r3, r3, #1
 8013308:	2b01      	cmp	r3, #1
 801330a:	d101      	bne.n	8013310 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 801330c:	2301      	movs	r3, #1
 801330e:	e000      	b.n	8013312 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8013310:	2300      	movs	r3, #0
}
 8013312:	4618      	mov	r0, r3
 8013314:	370c      	adds	r7, #12
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr

0801331e <LL_TIM_EnableIT_UPDATE>:
{
 801331e:	b480      	push	{r7}
 8013320:	b083      	sub	sp, #12
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	f043 0201 	orr.w	r2, r3, #1
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	60da      	str	r2, [r3, #12]
}
 8013332:	bf00      	nop
 8013334:	370c      	adds	r7, #12
 8013336:	46bd      	mov	sp, r7
 8013338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333c:	4770      	bx	lr

0801333e <LL_TIM_DisableIT_UPDATE>:
{
 801333e:	b480      	push	{r7}
 8013340:	b083      	sub	sp, #12
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	f023 0201 	bic.w	r2, r3, #1
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	60da      	str	r2, [r3, #12]
}
 8013352:	bf00      	nop
 8013354:	370c      	adds	r7, #12
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
	...

08013360 <hal_tim_start_it>:

static volatile TimInterrupt tim_interrupt[TIM_NUMBER];

static void hal_tim_int_call(uint32_t tim);

void hal_tim_start_it(TimID id) {
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
 8013366:	4603      	mov	r3, r0
 8013368:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 801336a:	79fb      	ldrb	r3, [r7, #7]
 801336c:	2b04      	cmp	r3, #4
 801336e:	d106      	bne.n	801337e <hal_tim_start_it+0x1e>
	case TimId4:
		LL_TIM_EnableCounter(TIM4);
 8013370:	4805      	ldr	r0, [pc, #20]	; (8013388 <hal_tim_start_it+0x28>)
 8013372:	f7ff ff6e 	bl	8013252 <LL_TIM_EnableCounter>
		LL_TIM_EnableIT_UPDATE(TIM4);
 8013376:	4804      	ldr	r0, [pc, #16]	; (8013388 <hal_tim_start_it+0x28>)
 8013378:	f7ff ffd1 	bl	801331e <LL_TIM_EnableIT_UPDATE>
		break;
 801337c:	e000      	b.n	8013380 <hal_tim_start_it+0x20>
	default:
		break;
 801337e:	bf00      	nop
	}
}
 8013380:	bf00      	nop
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	40000800 	.word	0x40000800

0801338c <hal_tim_stop_it>:

void hal_tim_stop_it(TimID id) {
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	4603      	mov	r3, r0
 8013394:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 8013396:	79fb      	ldrb	r3, [r7, #7]
 8013398:	2b04      	cmp	r3, #4
 801339a:	d105      	bne.n	80133a8 <hal_tim_stop_it+0x1c>
	case TimId4:
		LL_TIM_DisableCounter(TIM4);
 801339c:	4804      	ldr	r0, [pc, #16]	; (80133b0 <hal_tim_stop_it+0x24>)
 801339e:	f7ff ff68 	bl	8013272 <LL_TIM_DisableCounter>
		LL_TIM_DisableIT_UPDATE(TIM4);
 80133a2:	4803      	ldr	r0, [pc, #12]	; (80133b0 <hal_tim_stop_it+0x24>)
 80133a4:	f7ff ffcb 	bl	801333e <LL_TIM_DisableIT_UPDATE>
	}
}
 80133a8:	bf00      	nop
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	40000800 	.word	0x40000800

080133b4 <tim_init>:

void tim_init(TimID id) {
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	4603      	mov	r3, r0
 80133bc:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 80133be:	79fb      	ldrb	r3, [r7, #7]
 80133c0:	2b04      	cmp	r3, #4
 80133c2:	d108      	bne.n	80133d6 <tim_init+0x22>
	case TimId4:
		tim4_init();
 80133c4:	f000 f816 	bl	80133f4 <tim4_init>
	//	LL_TIM_EnableCounter(TIM4);
		LL_TIM_ClearFlag_UPDATE(TIM4);
 80133c8:	4807      	ldr	r0, [pc, #28]	; (80133e8 <tim_init+0x34>)
 80133ca:	f7ff ff87 	bl	80132dc <LL_TIM_ClearFlag_UPDATE>
		hal_cli_printf("tim4 init");
 80133ce:	4807      	ldr	r0, [pc, #28]	; (80133ec <tim_init+0x38>)
 80133d0:	f7fc fc5a 	bl	800fc88 <hal_cli_printf>
		break;
 80133d4:	e003      	b.n	80133de <tim_init+0x2a>

	default:
		hal_cli_printf("timer init argument error");
 80133d6:	4806      	ldr	r0, [pc, #24]	; (80133f0 <tim_init+0x3c>)
 80133d8:	f7fc fc56 	bl	800fc88 <hal_cli_printf>
		break;
 80133dc:	bf00      	nop
	}
}
 80133de:	bf00      	nop
 80133e0:	3708      	adds	r7, #8
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	40000800 	.word	0x40000800
 80133ec:	08015744 	.word	0x08015744
 80133f0:	08015750 	.word	0x08015750

080133f4 <tim4_init>:

	return ret;
}

static void tim4_init(void)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b086      	sub	sp, #24
 80133f8:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80133fa:	1d3b      	adds	r3, r7, #4
 80133fc:	2200      	movs	r2, #0
 80133fe:	601a      	str	r2, [r3, #0]
 8013400:	605a      	str	r2, [r3, #4]
 8013402:	609a      	str	r2, [r3, #8]
 8013404:	60da      	str	r2, [r3, #12]
 8013406:	611a      	str	r2, [r3, #16]
#if 0
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
#endif

	NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8013408:	f7ff fe9a 	bl	8013140 <__NVIC_GetPriorityGrouping>
 801340c:	4603      	mov	r3, r0
 801340e:	2200      	movs	r2, #0
 8013410:	2105      	movs	r1, #5
 8013412:	4618      	mov	r0, r3
 8013414:	f7ff feea 	bl	80131ec <NVIC_EncodePriority>
 8013418:	4603      	mov	r3, r0
 801341a:	4619      	mov	r1, r3
 801341c:	201e      	movs	r0, #30
 801341e:	f7ff febb 	bl	8013198 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 8013422:	201e      	movs	r0, #30
 8013424:	f7ff fe9a 	bl	801315c <__NVIC_EnableIRQ>

	/* tim init period = 20ms */
	TIM_InitStruct.Prescaler = 180;
 8013428:	23b4      	movs	r3, #180	; 0xb4
 801342a:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 801342c:	2300      	movs	r3, #0
 801342e:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 20000;
 8013430:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013434:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8013436:	2300      	movs	r3, #0
 8013438:	613b      	str	r3, [r7, #16]
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 801343a:	1d3b      	adds	r3, r7, #4
 801343c:	4619      	mov	r1, r3
 801343e:	4807      	ldr	r0, [pc, #28]	; (801345c <tim4_init+0x68>)
 8013440:	f7f1 fb7e 	bl	8004b40 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM4);
 8013444:	4805      	ldr	r0, [pc, #20]	; (801345c <tim4_init+0x68>)
 8013446:	f7ff ff24 	bl	8013292 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 801344a:	2100      	movs	r1, #0
 801344c:	4803      	ldr	r0, [pc, #12]	; (801345c <tim4_init+0x68>)
 801344e:	f7ff ff30 	bl	80132b2 <LL_TIM_SetClockSource>
		GpioPullNo,
		GpioSpeedFreqLow,
		GpioAltFnTim4);

#endif
}
 8013452:	bf00      	nop
 8013454:	3718      	adds	r7, #24
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	40000800 	.word	0x40000800

08013460 <hal_tim_add_int_callback>:

void hal_tim_add_int_callback(uint32_t tim, TimInterruptCallback cb, void* context) {
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	607a      	str	r2, [r7, #4]
	taskENTER_CRITICAL();
 801346c:	f7f6 f86c 	bl	8009548 <vPortEnterCritical>
	tim_interrupt[tim].callback = cb;
 8013470:	4911      	ldr	r1, [pc, #68]	; (80134b8 <hal_tim_add_int_callback+0x58>)
 8013472:	68fa      	ldr	r2, [r7, #12]
 8013474:	4613      	mov	r3, r2
 8013476:	005b      	lsls	r3, r3, #1
 8013478:	4413      	add	r3, r2
 801347a:	009b      	lsls	r3, r3, #2
 801347c:	440b      	add	r3, r1
 801347e:	68ba      	ldr	r2, [r7, #8]
 8013480:	601a      	str	r2, [r3, #0]
	tim_interrupt[tim].context = context;
 8013482:	490d      	ldr	r1, [pc, #52]	; (80134b8 <hal_tim_add_int_callback+0x58>)
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	4613      	mov	r3, r2
 8013488:	005b      	lsls	r3, r3, #1
 801348a:	4413      	add	r3, r2
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	440b      	add	r3, r1
 8013490:	3304      	adds	r3, #4
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	601a      	str	r2, [r3, #0]
	tim_interrupt[tim].ready = true;
 8013496:	4908      	ldr	r1, [pc, #32]	; (80134b8 <hal_tim_add_int_callback+0x58>)
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	4613      	mov	r3, r2
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	4413      	add	r3, r2
 80134a0:	009b      	lsls	r3, r3, #2
 80134a2:	440b      	add	r3, r1
 80134a4:	3308      	adds	r3, #8
 80134a6:	2201      	movs	r2, #1
 80134a8:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 80134aa:	f7f6 f87d 	bl	80095a8 <vPortExitCritical>
}
 80134ae:	bf00      	nop
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	20005afc 	.word	0x20005afc

080134bc <hal_tim_int_call>:

static void hal_tim_int_call(uint32_t tim) {
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
	if(tim_interrupt[tim].callback && tim_interrupt[tim].ready) {
 80134c4:	4916      	ldr	r1, [pc, #88]	; (8013520 <hal_tim_int_call+0x64>)
 80134c6:	687a      	ldr	r2, [r7, #4]
 80134c8:	4613      	mov	r3, r2
 80134ca:	005b      	lsls	r3, r3, #1
 80134cc:	4413      	add	r3, r2
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	440b      	add	r3, r1
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d01e      	beq.n	8013516 <hal_tim_int_call+0x5a>
 80134d8:	4911      	ldr	r1, [pc, #68]	; (8013520 <hal_tim_int_call+0x64>)
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	4613      	mov	r3, r2
 80134de:	005b      	lsls	r3, r3, #1
 80134e0:	4413      	add	r3, r2
 80134e2:	009b      	lsls	r3, r3, #2
 80134e4:	440b      	add	r3, r1
 80134e6:	3308      	adds	r3, #8
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	b2db      	uxtb	r3, r3
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d012      	beq.n	8013516 <hal_tim_int_call+0x5a>
		tim_interrupt[tim].callback(tim_interrupt[tim].context);
 80134f0:	490b      	ldr	r1, [pc, #44]	; (8013520 <hal_tim_int_call+0x64>)
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	4613      	mov	r3, r2
 80134f6:	005b      	lsls	r3, r3, #1
 80134f8:	4413      	add	r3, r2
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	440b      	add	r3, r1
 80134fe:	6819      	ldr	r1, [r3, #0]
 8013500:	4807      	ldr	r0, [pc, #28]	; (8013520 <hal_tim_int_call+0x64>)
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	4613      	mov	r3, r2
 8013506:	005b      	lsls	r3, r3, #1
 8013508:	4413      	add	r3, r2
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	4403      	add	r3, r0
 801350e:	3304      	adds	r3, #4
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	4618      	mov	r0, r3
 8013514:	4788      	blx	r1
	}
}
 8013516:	bf00      	nop
 8013518:	3708      	adds	r7, #8
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	20005afc 	.word	0x20005afc

08013524 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void) {
 8013524:	b580      	push	{r7, lr}
 8013526:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4)) {
 8013528:	4806      	ldr	r0, [pc, #24]	; (8013544 <TIM4_IRQHandler+0x20>)
 801352a:	f7ff fee5 	bl	80132f8 <LL_TIM_IsActiveFlag_UPDATE>
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <TIM4_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8013534:	4803      	ldr	r0, [pc, #12]	; (8013544 <TIM4_IRQHandler+0x20>)
 8013536:	f7ff fed1 	bl	80132dc <LL_TIM_ClearFlag_UPDATE>
	}

	hal_tim_int_call(4);
 801353a:	2004      	movs	r0, #4
 801353c:	f7ff ffbe 	bl	80134bc <hal_tim_int_call>
}
 8013540:	bf00      	nop
 8013542:	bd80      	pop	{r7, pc}
 8013544:	40000800 	.word	0x40000800

08013548 <__NVIC_GetPriorityGrouping>:
{
 8013548:	b480      	push	{r7}
 801354a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801354c:	4b04      	ldr	r3, [pc, #16]	; (8013560 <__NVIC_GetPriorityGrouping+0x18>)
 801354e:	68db      	ldr	r3, [r3, #12]
 8013550:	0a1b      	lsrs	r3, r3, #8
 8013552:	f003 0307 	and.w	r3, r3, #7
}
 8013556:	4618      	mov	r0, r3
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr
 8013560:	e000ed00 	.word	0xe000ed00

08013564 <__NVIC_EnableIRQ>:
{
 8013564:	b480      	push	{r7}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
 801356a:	4603      	mov	r3, r0
 801356c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013572:	2b00      	cmp	r3, #0
 8013574:	db0b      	blt.n	801358e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013576:	79fb      	ldrb	r3, [r7, #7]
 8013578:	f003 021f 	and.w	r2, r3, #31
 801357c:	4907      	ldr	r1, [pc, #28]	; (801359c <__NVIC_EnableIRQ+0x38>)
 801357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013582:	095b      	lsrs	r3, r3, #5
 8013584:	2001      	movs	r0, #1
 8013586:	fa00 f202 	lsl.w	r2, r0, r2
 801358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801358e:	bf00      	nop
 8013590:	370c      	adds	r7, #12
 8013592:	46bd      	mov	sp, r7
 8013594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	e000e100 	.word	0xe000e100

080135a0 <__NVIC_SetPriority>:
{
 80135a0:	b480      	push	{r7}
 80135a2:	b083      	sub	sp, #12
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	6039      	str	r1, [r7, #0]
 80135aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80135ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	db0a      	blt.n	80135ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	b2da      	uxtb	r2, r3
 80135b8:	490c      	ldr	r1, [pc, #48]	; (80135ec <__NVIC_SetPriority+0x4c>)
 80135ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135be:	0112      	lsls	r2, r2, #4
 80135c0:	b2d2      	uxtb	r2, r2
 80135c2:	440b      	add	r3, r1
 80135c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80135c8:	e00a      	b.n	80135e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	b2da      	uxtb	r2, r3
 80135ce:	4908      	ldr	r1, [pc, #32]	; (80135f0 <__NVIC_SetPriority+0x50>)
 80135d0:	79fb      	ldrb	r3, [r7, #7]
 80135d2:	f003 030f 	and.w	r3, r3, #15
 80135d6:	3b04      	subs	r3, #4
 80135d8:	0112      	lsls	r2, r2, #4
 80135da:	b2d2      	uxtb	r2, r2
 80135dc:	440b      	add	r3, r1
 80135de:	761a      	strb	r2, [r3, #24]
}
 80135e0:	bf00      	nop
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr
 80135ec:	e000e100 	.word	0xe000e100
 80135f0:	e000ed00 	.word	0xe000ed00

080135f4 <NVIC_EncodePriority>:
{
 80135f4:	b480      	push	{r7}
 80135f6:	b089      	sub	sp, #36	; 0x24
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f003 0307 	and.w	r3, r3, #7
 8013606:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	f1c3 0307 	rsb	r3, r3, #7
 801360e:	2b04      	cmp	r3, #4
 8013610:	bf28      	it	cs
 8013612:	2304      	movcs	r3, #4
 8013614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	3304      	adds	r3, #4
 801361a:	2b06      	cmp	r3, #6
 801361c:	d902      	bls.n	8013624 <NVIC_EncodePriority+0x30>
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	3b03      	subs	r3, #3
 8013622:	e000      	b.n	8013626 <NVIC_EncodePriority+0x32>
 8013624:	2300      	movs	r3, #0
 8013626:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	fa02 f303 	lsl.w	r3, r2, r3
 8013632:	43da      	mvns	r2, r3
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	401a      	ands	r2, r3
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801363c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	fa01 f303 	lsl.w	r3, r1, r3
 8013646:	43d9      	mvns	r1, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801364c:	4313      	orrs	r3, r2
}
 801364e:	4618      	mov	r0, r3
 8013650:	3724      	adds	r7, #36	; 0x24
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr

0801365a <LL_USART_Enable>:
{
 801365a:	b480      	push	{r7}
 801365c:	b083      	sub	sp, #12
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	60da      	str	r2, [r3, #12]
}
 801366e:	bf00      	nop
 8013670:	370c      	adds	r7, #12
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr

0801367a <LL_USART_IsEnabled>:
{
 801367a:	b480      	push	{r7}
 801367c:	b083      	sub	sp, #12
 801367e:	af00      	add	r7, sp, #0
 8013680:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801368a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801368e:	bf0c      	ite	eq
 8013690:	2301      	moveq	r3, #1
 8013692:	2300      	movne	r3, #0
 8013694:	b2db      	uxtb	r3, r3
}
 8013696:	4618      	mov	r0, r3
 8013698:	370c      	adds	r7, #12
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr

080136a2 <LL_USART_ConfigAsyncMode>:
{
 80136a2:	b480      	push	{r7}
 80136a4:	b083      	sub	sp, #12
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	691b      	ldr	r3, [r3, #16]
 80136ae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	695b      	ldr	r3, [r3, #20]
 80136ba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	615a      	str	r2, [r3, #20]
}
 80136c2:	bf00      	nop
 80136c4:	370c      	adds	r7, #12
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr

080136ce <LL_USART_IsActiveFlag_IDLE>:
{
 80136ce:	b480      	push	{r7}
 80136d0:	b083      	sub	sp, #12
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	f003 0310 	and.w	r3, r3, #16
 80136de:	2b10      	cmp	r3, #16
 80136e0:	bf0c      	ite	eq
 80136e2:	2301      	moveq	r3, #1
 80136e4:	2300      	movne	r3, #0
 80136e6:	b2db      	uxtb	r3, r3
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <LL_USART_IsActiveFlag_TXE>:
{
 80136f4:	b480      	push	{r7}
 80136f6:	b083      	sub	sp, #12
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013704:	2b80      	cmp	r3, #128	; 0x80
 8013706:	bf0c      	ite	eq
 8013708:	2301      	moveq	r3, #1
 801370a:	2300      	movne	r3, #0
 801370c:	b2db      	uxtb	r3, r3
}
 801370e:	4618      	mov	r0, r3
 8013710:	370c      	adds	r7, #12
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr

0801371a <LL_USART_ClearFlag_IDLE>:
{
 801371a:	b480      	push	{r7}
 801371c:	b085      	sub	sp, #20
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8013728:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8013730:	68fb      	ldr	r3, [r7, #12]
}
 8013732:	bf00      	nop
 8013734:	3714      	adds	r7, #20
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr

0801373e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 801373e:	b480      	push	{r7}
 8013740:	b083      	sub	sp, #12
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 801374a:	78fa      	ldrb	r2, [r7, #3]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	605a      	str	r2, [r3, #4]
}
 8013750:	bf00      	nop
 8013752:	370c      	adds	r7, #12
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr

0801375c <LL_DMA_SetDataTransferDirection>:
{
 801375c:	b480      	push	{r7}
 801375e:	b085      	sub	sp, #20
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8013768:	4a0d      	ldr	r2, [pc, #52]	; (80137a0 <LL_DMA_SetDataTransferDirection+0x44>)
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	4413      	add	r3, r2
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	461a      	mov	r2, r3
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	4413      	add	r3, r2
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801377c:	4908      	ldr	r1, [pc, #32]	; (80137a0 <LL_DMA_SetDataTransferDirection+0x44>)
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	440b      	add	r3, r1
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	4619      	mov	r1, r3
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	440b      	add	r3, r1
 801378a:	4619      	mov	r1, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	4313      	orrs	r3, r2
 8013790:	600b      	str	r3, [r1, #0]
}
 8013792:	bf00      	nop
 8013794:	3714      	adds	r7, #20
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	080165a4 	.word	0x080165a4

080137a4 <LL_DMA_SetMode>:
{
 80137a4:	b480      	push	{r7}
 80137a6:	b085      	sub	sp, #20
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80137b0:	4a0d      	ldr	r2, [pc, #52]	; (80137e8 <LL_DMA_SetMode+0x44>)
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	4413      	add	r3, r2
 80137b6:	781b      	ldrb	r3, [r3, #0]
 80137b8:	461a      	mov	r2, r3
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	4413      	add	r3, r2
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80137c4:	4908      	ldr	r1, [pc, #32]	; (80137e8 <LL_DMA_SetMode+0x44>)
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	440b      	add	r3, r1
 80137ca:	781b      	ldrb	r3, [r3, #0]
 80137cc:	4619      	mov	r1, r3
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	440b      	add	r3, r1
 80137d2:	4619      	mov	r1, r3
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	4313      	orrs	r3, r2
 80137d8:	600b      	str	r3, [r1, #0]
}
 80137da:	bf00      	nop
 80137dc:	3714      	adds	r7, #20
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	080165a4 	.word	0x080165a4

080137ec <LL_DMA_SetPeriphIncMode>:
{
 80137ec:	b480      	push	{r7}
 80137ee:	b085      	sub	sp, #20
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80137f8:	4a0d      	ldr	r2, [pc, #52]	; (8013830 <LL_DMA_SetPeriphIncMode+0x44>)
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	4413      	add	r3, r2
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	461a      	mov	r2, r3
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	4413      	add	r3, r2
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801380c:	4908      	ldr	r1, [pc, #32]	; (8013830 <LL_DMA_SetPeriphIncMode+0x44>)
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	440b      	add	r3, r1
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	4619      	mov	r1, r3
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	440b      	add	r3, r1
 801381a:	4619      	mov	r1, r3
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	4313      	orrs	r3, r2
 8013820:	600b      	str	r3, [r1, #0]
}
 8013822:	bf00      	nop
 8013824:	3714      	adds	r7, #20
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	080165a4 	.word	0x080165a4

08013834 <LL_DMA_SetMemoryIncMode>:
{
 8013834:	b480      	push	{r7}
 8013836:	b085      	sub	sp, #20
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8013840:	4a0d      	ldr	r2, [pc, #52]	; (8013878 <LL_DMA_SetMemoryIncMode+0x44>)
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	4413      	add	r3, r2
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	461a      	mov	r2, r3
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	4413      	add	r3, r2
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013854:	4908      	ldr	r1, [pc, #32]	; (8013878 <LL_DMA_SetMemoryIncMode+0x44>)
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	440b      	add	r3, r1
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	4619      	mov	r1, r3
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	440b      	add	r3, r1
 8013862:	4619      	mov	r1, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4313      	orrs	r3, r2
 8013868:	600b      	str	r3, [r1, #0]
}
 801386a:	bf00      	nop
 801386c:	3714      	adds	r7, #20
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop
 8013878:	080165a4 	.word	0x080165a4

0801387c <LL_DMA_SetPeriphSize>:
{
 801387c:	b480      	push	{r7}
 801387e:	b085      	sub	sp, #20
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8013888:	4a0d      	ldr	r2, [pc, #52]	; (80138c0 <LL_DMA_SetPeriphSize+0x44>)
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	4413      	add	r3, r2
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	461a      	mov	r2, r3
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	4413      	add	r3, r2
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801389c:	4908      	ldr	r1, [pc, #32]	; (80138c0 <LL_DMA_SetPeriphSize+0x44>)
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	440b      	add	r3, r1
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	4619      	mov	r1, r3
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	440b      	add	r3, r1
 80138aa:	4619      	mov	r1, r3
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	4313      	orrs	r3, r2
 80138b0:	600b      	str	r3, [r1, #0]
}
 80138b2:	bf00      	nop
 80138b4:	3714      	adds	r7, #20
 80138b6:	46bd      	mov	sp, r7
 80138b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138bc:	4770      	bx	lr
 80138be:	bf00      	nop
 80138c0:	080165a4 	.word	0x080165a4

080138c4 <LL_DMA_SetMemorySize>:
{
 80138c4:	b480      	push	{r7}
 80138c6:	b085      	sub	sp, #20
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80138d0:	4a0d      	ldr	r2, [pc, #52]	; (8013908 <LL_DMA_SetMemorySize+0x44>)
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	4413      	add	r3, r2
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	461a      	mov	r2, r3
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	4413      	add	r3, r2
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80138e4:	4908      	ldr	r1, [pc, #32]	; (8013908 <LL_DMA_SetMemorySize+0x44>)
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	440b      	add	r3, r1
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	4619      	mov	r1, r3
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	440b      	add	r3, r1
 80138f2:	4619      	mov	r1, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	4313      	orrs	r3, r2
 80138f8:	600b      	str	r3, [r1, #0]
}
 80138fa:	bf00      	nop
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	080165a4 	.word	0x080165a4

0801390c <LL_DMA_SetStreamPriorityLevel>:
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8013918:	4a0d      	ldr	r2, [pc, #52]	; (8013950 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	4413      	add	r3, r2
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	461a      	mov	r2, r3
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	4413      	add	r3, r2
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801392c:	4908      	ldr	r1, [pc, #32]	; (8013950 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	440b      	add	r3, r1
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	4619      	mov	r1, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	440b      	add	r3, r1
 801393a:	4619      	mov	r1, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	4313      	orrs	r3, r2
 8013940:	600b      	str	r3, [r1, #0]
}
 8013942:	bf00      	nop
 8013944:	3714      	adds	r7, #20
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr
 801394e:	bf00      	nop
 8013950:	080165a4 	.word	0x080165a4

08013954 <LL_DMA_GetDataLength>:
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 801395e:	4a07      	ldr	r2, [pc, #28]	; (801397c <LL_DMA_GetDataLength+0x28>)
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	4413      	add	r3, r2
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	461a      	mov	r2, r3
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	4413      	add	r3, r2
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	b29b      	uxth	r3, r3
}
 8013970:	4618      	mov	r0, r3
 8013972:	370c      	adds	r7, #12
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr
 801397c:	080165a4 	.word	0x080165a4

08013980 <LL_DMA_SetChannelSelection>:
{
 8013980:	b480      	push	{r7}
 8013982:	b085      	sub	sp, #20
 8013984:	af00      	add	r7, sp, #0
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 801398c:	4a0d      	ldr	r2, [pc, #52]	; (80139c4 <LL_DMA_SetChannelSelection+0x44>)
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	4413      	add	r3, r2
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	461a      	mov	r2, r3
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	4413      	add	r3, r2
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80139a0:	4908      	ldr	r1, [pc, #32]	; (80139c4 <LL_DMA_SetChannelSelection+0x44>)
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	440b      	add	r3, r1
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	4619      	mov	r1, r3
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	440b      	add	r3, r1
 80139ae:	4619      	mov	r1, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	4313      	orrs	r3, r2
 80139b4:	600b      	str	r3, [r1, #0]
}
 80139b6:	bf00      	nop
 80139b8:	3714      	adds	r7, #20
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	080165a4 	.word	0x080165a4

080139c8 <LL_DMA_DisableFifoMode>:
{
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80139d2:	4a0c      	ldr	r2, [pc, #48]	; (8013a04 <LL_DMA_DisableFifoMode+0x3c>)
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	4413      	add	r3, r2
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	461a      	mov	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	4413      	add	r3, r2
 80139e0:	695b      	ldr	r3, [r3, #20]
 80139e2:	4908      	ldr	r1, [pc, #32]	; (8013a04 <LL_DMA_DisableFifoMode+0x3c>)
 80139e4:	683a      	ldr	r2, [r7, #0]
 80139e6:	440a      	add	r2, r1
 80139e8:	7812      	ldrb	r2, [r2, #0]
 80139ea:	4611      	mov	r1, r2
 80139ec:	687a      	ldr	r2, [r7, #4]
 80139ee:	440a      	add	r2, r1
 80139f0:	f023 0304 	bic.w	r3, r3, #4
 80139f4:	6153      	str	r3, [r2, #20]
}
 80139f6:	bf00      	nop
 80139f8:	370c      	adds	r7, #12
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	080165a4 	.word	0x080165a4

08013a08 <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b08c      	sub	sp, #48	; 0x30
 8013a0c:	af02      	add	r7, sp, #8
 8013a0e:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 8013a10:	2307      	movs	r3, #7
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	2303      	movs	r3, #3
 8013a16:	2200      	movs	r2, #0
 8013a18:	2103      	movs	r1, #3
 8013a1a:	4853      	ldr	r0, [pc, #332]	; (8013b68 <hal_uart1_init+0x160>)
 8013a1c:	f7fc fea4 	bl	8010768 <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 8013a20:	2307      	movs	r3, #7
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	2303      	movs	r3, #3
 8013a26:	2200      	movs	r2, #0
 8013a28:	2103      	movs	r1, #3
 8013a2a:	4850      	ldr	r0, [pc, #320]	; (8013b6c <hal_uart1_init+0x164>)
 8013a2c:	f7fc fe9c 	bl	8010768 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8013a30:	2200      	movs	r2, #0
 8013a32:	2105      	movs	r1, #5
 8013a34:	203a      	movs	r0, #58	; 0x3a
 8013a36:	f7ed fc29 	bl	800128c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8013a3a:	203a      	movs	r0, #58	; 0x3a
 8013a3c:	f7ed fc42 	bl	80012c4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8013a40:	2200      	movs	r2, #0
 8013a42:	2105      	movs	r1, #5
 8013a44:	2046      	movs	r0, #70	; 0x46
 8013a46:	f7ed fc21 	bl	800128c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8013a4a:	2046      	movs	r0, #70	; 0x46
 8013a4c:	f7ed fc3a 	bl	80012c4 <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 8013a50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013a54:	2102      	movs	r1, #2
 8013a56:	4846      	ldr	r0, [pc, #280]	; (8013b70 <hal_uart1_init+0x168>)
 8013a58:	f7ff ff92 	bl	8013980 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	2102      	movs	r1, #2
 8013a60:	4843      	ldr	r0, [pc, #268]	; (8013b70 <hal_uart1_init+0x168>)
 8013a62:	f7ff fe7b 	bl	801375c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8013a66:	2200      	movs	r2, #0
 8013a68:	2102      	movs	r1, #2
 8013a6a:	4841      	ldr	r0, [pc, #260]	; (8013b70 <hal_uart1_init+0x168>)
 8013a6c:	f7ff ff4e 	bl	801390c <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 8013a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013a74:	2102      	movs	r1, #2
 8013a76:	483e      	ldr	r0, [pc, #248]	; (8013b70 <hal_uart1_init+0x168>)
 8013a78:	f7ff fe94 	bl	80137a4 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	2102      	movs	r1, #2
 8013a80:	483b      	ldr	r0, [pc, #236]	; (8013b70 <hal_uart1_init+0x168>)
 8013a82:	f7ff feb3 	bl	80137ec <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8013a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013a8a:	2102      	movs	r1, #2
 8013a8c:	4838      	ldr	r0, [pc, #224]	; (8013b70 <hal_uart1_init+0x168>)
 8013a8e:	f7ff fed1 	bl	8013834 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8013a92:	2200      	movs	r2, #0
 8013a94:	2102      	movs	r1, #2
 8013a96:	4836      	ldr	r0, [pc, #216]	; (8013b70 <hal_uart1_init+0x168>)
 8013a98:	f7ff fef0 	bl	801387c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	2102      	movs	r1, #2
 8013aa0:	4833      	ldr	r0, [pc, #204]	; (8013b70 <hal_uart1_init+0x168>)
 8013aa2:	f7ff ff0f 	bl	80138c4 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 8013aa6:	2102      	movs	r1, #2
 8013aa8:	4831      	ldr	r0, [pc, #196]	; (8013b70 <hal_uart1_init+0x168>)
 8013aaa:	f7ff ff8d 	bl	80139c8 <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 8013aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013ab2:	2107      	movs	r1, #7
 8013ab4:	482e      	ldr	r0, [pc, #184]	; (8013b70 <hal_uart1_init+0x168>)
 8013ab6:	f7ff ff63 	bl	8013980 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8013aba:	2240      	movs	r2, #64	; 0x40
 8013abc:	2107      	movs	r1, #7
 8013abe:	482c      	ldr	r0, [pc, #176]	; (8013b70 <hal_uart1_init+0x168>)
 8013ac0:	f7ff fe4c 	bl	801375c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	2107      	movs	r1, #7
 8013ac8:	4829      	ldr	r0, [pc, #164]	; (8013b70 <hal_uart1_init+0x168>)
 8013aca:	f7ff ff1f 	bl	801390c <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8013ace:	2200      	movs	r2, #0
 8013ad0:	2107      	movs	r1, #7
 8013ad2:	4827      	ldr	r0, [pc, #156]	; (8013b70 <hal_uart1_init+0x168>)
 8013ad4:	f7ff fe66 	bl	80137a4 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8013ad8:	2200      	movs	r2, #0
 8013ada:	2107      	movs	r1, #7
 8013adc:	4824      	ldr	r0, [pc, #144]	; (8013b70 <hal_uart1_init+0x168>)
 8013ade:	f7ff fe85 	bl	80137ec <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8013ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013ae6:	2107      	movs	r1, #7
 8013ae8:	4821      	ldr	r0, [pc, #132]	; (8013b70 <hal_uart1_init+0x168>)
 8013aea:	f7ff fea3 	bl	8013834 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8013aee:	2200      	movs	r2, #0
 8013af0:	2107      	movs	r1, #7
 8013af2:	481f      	ldr	r0, [pc, #124]	; (8013b70 <hal_uart1_init+0x168>)
 8013af4:	f7ff fec2 	bl	801387c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8013af8:	2200      	movs	r2, #0
 8013afa:	2107      	movs	r1, #7
 8013afc:	481c      	ldr	r0, [pc, #112]	; (8013b70 <hal_uart1_init+0x168>)
 8013afe:	f7ff fee1 	bl	80138c4 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 8013b02:	2107      	movs	r1, #7
 8013b04:	481a      	ldr	r0, [pc, #104]	; (8013b70 <hal_uart1_init+0x168>)
 8013b06:	f7ff ff5f 	bl	80139c8 <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8013b12:	2300      	movs	r3, #0
 8013b14:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8013b16:	2300      	movs	r3, #0
 8013b18:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8013b1a:	230c      	movs	r3, #12
 8013b1c:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8013b22:	2300      	movs	r3, #0
 8013b24:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 8013b26:	f107 030c 	add.w	r3, r7, #12
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	4811      	ldr	r0, [pc, #68]	; (8013b74 <hal_uart1_init+0x16c>)
 8013b2e:	f7f1 fb07 	bl	8005140 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8013b32:	4810      	ldr	r0, [pc, #64]	; (8013b74 <hal_uart1_init+0x16c>)
 8013b34:	f7ff fdb5 	bl	80136a2 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 8013b38:	480e      	ldr	r0, [pc, #56]	; (8013b74 <hal_uart1_init+0x16c>)
 8013b3a:	f7ff fd8e 	bl	801365a <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8013b3e:	f7ff fd03 	bl	8013548 <__NVIC_GetPriorityGrouping>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2200      	movs	r2, #0
 8013b46:	2105      	movs	r1, #5
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7ff fd53 	bl	80135f4 <NVIC_EncodePriority>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	4619      	mov	r1, r3
 8013b52:	2025      	movs	r0, #37	; 0x25
 8013b54:	f7ff fd24 	bl	80135a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8013b58:	2025      	movs	r0, #37	; 0x25
 8013b5a:	f7ff fd03 	bl	8013564 <__NVIC_EnableIRQ>
}
 8013b5e:	bf00      	nop
 8013b60:	3728      	adds	r7, #40	; 0x28
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}
 8013b66:	bf00      	nop
 8013b68:	080164cc 	.word	0x080164cc
 8013b6c:	080164d4 	.word	0x080164d4
 8013b70:	40026400 	.word	0x40026400
 8013b74:	40011000 	.word	0x40011000

08013b78 <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b082      	sub	sp, #8
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	4603      	mov	r3, r0
 8013b80:	6039      	str	r1, [r7, #0]
 8013b82:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 8013b84:	79fb      	ldrb	r3, [r7, #7]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d102      	bne.n	8013b90 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 8013b8a:	6838      	ldr	r0, [r7, #0]
 8013b8c:	f7ff ff3c 	bl	8013a08 <hal_uart1_init>
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
 8013ba4:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 8013ba6:	7bfb      	ldrb	r3, [r7, #15]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d11e      	bne.n	8013bea <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8013bac:	4810      	ldr	r0, [pc, #64]	; (8013bf0 <hal_uart_transfer+0x58>)
 8013bae:	f7ff fd64 	bl	801367a <LL_USART_IsEnabled>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d017      	beq.n	8013be8 <hal_uart_transfer+0x50>

        while(size > 0) {
 8013bb8:	e012      	b.n	8013be0 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 8013bba:	bf00      	nop
 8013bbc:	480c      	ldr	r0, [pc, #48]	; (8013bf0 <hal_uart_transfer+0x58>)
 8013bbe:	f7ff fd99 	bl	80136f4 <LL_USART_IsActiveFlag_TXE>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d0f9      	beq.n	8013bbc <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	4619      	mov	r1, r3
 8013bce:	4808      	ldr	r0, [pc, #32]	; (8013bf0 <hal_uart_transfer+0x58>)
 8013bd0:	f7ff fdb5 	bl	801373e <LL_USART_TransmitData8>
            buf++;
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	60bb      	str	r3, [r7, #8]
            size--;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	3b01      	subs	r3, #1
 8013bde:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1e9      	bne.n	8013bba <hal_uart_transfer+0x22>
 8013be6:	e000      	b.n	8013bea <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8013be8:	bf00      	nop
        }
    }
}
 8013bea:	3710      	adds	r7, #16
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	40011000 	.word	0x40011000

08013bf4 <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 8013bf4:	b590      	push	{r4, r7, lr}
 8013bf6:	b083      	sub	sp, #12
 8013bf8:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8013bfe:	4813      	ldr	r0, [pc, #76]	; (8013c4c <USART1_IRQHandler+0x58>)
 8013c00:	f7ff fd65 	bl	80136ce <LL_USART_IsActiveFlag_IDLE>
 8013c04:	4603      	mov	r3, r0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d01c      	beq.n	8013c44 <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 8013c0a:	4810      	ldr	r0, [pc, #64]	; (8013c4c <USART1_IRQHandler+0x58>)
 8013c0c:	f7ff fd85 	bl	801371a <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 8013c10:	4b0f      	ldr	r3, [pc, #60]	; (8013c50 <USART1_IRQHandler+0x5c>)
 8013c12:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8013c16:	2102      	movs	r1, #2
 8013c18:	480e      	ldr	r0, [pc, #56]	; (8013c54 <USART1_IRQHandler+0x60>)
 8013c1a:	f7ff fe9b 	bl	8013954 <LL_DMA_GetDataLength>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	4423      	add	r3, r4
 8013c22:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	bfb8      	it	lt
 8013c2a:	425b      	neglt	r3, r3
 8013c2c:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 8013c2e:	4b08      	ldr	r3, [pc, #32]	; (8013c50 <USART1_IRQHandler+0x5c>)
 8013c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	4413      	add	r3, r2
 8013c38:	2bff      	cmp	r3, #255	; 0xff
 8013c3a:	d903      	bls.n	8013c44 <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 8013c3c:	4b04      	ldr	r3, [pc, #16]	; (8013c50 <USART1_IRQHandler+0x5c>)
 8013c3e:	2201      	movs	r2, #1
 8013c40:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 8013c44:	bf00      	nop
 8013c46:	370c      	adds	r7, #12
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd90      	pop	{r4, r7, pc}
 8013c4c:	40011000 	.word	0x40011000
 8013c50:	200049f8 	.word	0x200049f8
 8013c54:	40026400 	.word	0x40026400

08013c58 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8013c58:	b480      	push	{r7}
 8013c5a:	af00      	add	r7, sp, #0

}
 8013c5c:	bf00      	nop
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c64:	4770      	bx	lr

08013c66 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8013c66:	b480      	push	{r7}
 8013c68:	af00      	add	r7, sp, #0

}
 8013c6a:	bf00      	nop
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <display_mp3playing>:
static void display_mp3list(u8g2_t* u8g2_handle);
static void MP3_SetFileList(DIR *dir);
static void display_clock(void);
static void display_mp3select(void);

static void display_mp3playing(void) {
 8013c74:	b580      	push	{r7, lr}
 8013c76:	af00      	add	r7, sp, #0
    u8g2_SetFont(&u8g2, u8g2_font_5x8_tf);
 8013c78:	490d      	ldr	r1, [pc, #52]	; (8013cb0 <display_mp3playing+0x3c>)
 8013c7a:	480e      	ldr	r0, [pc, #56]	; (8013cb4 <display_mp3playing+0x40>)
 8013c7c:	f7fa fec0 	bl	800ea00 <u8g2_SetFont>
    if(MP3_IsPlaying()) {
 8013c80:	f000 fcdc 	bl	801463c <MP3_IsPlaying>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d006      	beq.n	8013c98 <display_mp3playing+0x24>
    	u8g2_DrawStr(&u8g2, 120, 10, "P");
 8013c8a:	4b0b      	ldr	r3, [pc, #44]	; (8013cb8 <display_mp3playing+0x44>)
 8013c8c:	220a      	movs	r2, #10
 8013c8e:	2178      	movs	r1, #120	; 0x78
 8013c90:	4808      	ldr	r0, [pc, #32]	; (8013cb4 <display_mp3playing+0x40>)
 8013c92:	f7fa fe13 	bl	800e8bc <u8g2_DrawStr>
 8013c96:	e005      	b.n	8013ca4 <display_mp3playing+0x30>
    } else {
    	u8g2_DrawStr(&u8g2, 120, 10, "S");
 8013c98:	4b08      	ldr	r3, [pc, #32]	; (8013cbc <display_mp3playing+0x48>)
 8013c9a:	220a      	movs	r2, #10
 8013c9c:	2178      	movs	r1, #120	; 0x78
 8013c9e:	4805      	ldr	r0, [pc, #20]	; (8013cb4 <display_mp3playing+0x40>)
 8013ca0:	f7fa fe0c 	bl	800e8bc <u8g2_DrawStr>
    }
	u8g2_SendBuffer(&u8g2);
 8013ca4:	4803      	ldr	r0, [pc, #12]	; (8013cb4 <display_mp3playing+0x40>)
 8013ca6:	f7fa f8f7 	bl	800de98 <u8g2_SendBuffer>
}
 8013caa:	bf00      	nop
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	08015d04 	.word	0x08015d04
 8013cb4:	20005bbc 	.word	0x20005bbc
 8013cb8:	080157ac 	.word	0x080157ac
 8013cbc:	080157b0 	.word	0x080157b0

08013cc0 <display_clock>:

static void display_clock(void) {
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	af00      	add	r7, sp, #0
    u8g2_SetFont(&u8g2, u8g2_font_5x8_tf);
 8013cc4:	4907      	ldr	r1, [pc, #28]	; (8013ce4 <display_clock+0x24>)
 8013cc6:	4808      	ldr	r0, [pc, #32]	; (8013ce8 <display_clock+0x28>)
 8013cc8:	f7fa fe9a 	bl	800ea00 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 0, 10, rtc_string);
 8013ccc:	4b07      	ldr	r3, [pc, #28]	; (8013cec <display_clock+0x2c>)
 8013cce:	220a      	movs	r2, #10
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	4805      	ldr	r0, [pc, #20]	; (8013ce8 <display_clock+0x28>)
 8013cd4:	f7fa fdf2 	bl	800e8bc <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8013cd8:	4803      	ldr	r0, [pc, #12]	; (8013ce8 <display_clock+0x28>)
 8013cda:	f7fa f8dd 	bl	800de98 <u8g2_SendBuffer>
}
 8013cde:	bf00      	nop
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	08015d04 	.word	0x08015d04
 8013ce8:	20005bbc 	.word	0x20005bbc
 8013cec:	20006e6c 	.word	0x20006e6c

08013cf0 <display_mp3screen>:

static void display_mp3screen(void) {
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	af00      	add	r7, sp, #0
	u8g2_ClearBuffer(&u8g2);
 8013cf4:	4810      	ldr	r0, [pc, #64]	; (8013d38 <display_mp3screen+0x48>)
 8013cf6:	f7fa f85c 	bl	800ddb2 <u8g2_ClearBuffer>
	display_clock();
 8013cfa:	f7ff ffe1 	bl	8013cc0 <display_clock>
    u8g2_SetFont(&u8g2, u8g2_font_5x8_tf);
 8013cfe:	490f      	ldr	r1, [pc, #60]	; (8013d3c <display_mp3screen+0x4c>)
 8013d00:	480d      	ldr	r0, [pc, #52]	; (8013d38 <display_mp3screen+0x48>)
 8013d02:	f7fa fe7d 	bl	800ea00 <u8g2_SetFont>
	sprintf(filename_buf, "%s", mp3list[mp3list_selnum]);
 8013d06:	4b0e      	ldr	r3, [pc, #56]	; (8013d40 <display_mp3screen+0x50>)
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	4413      	add	r3, r2
 8013d10:	009a      	lsls	r2, r3, #2
 8013d12:	4413      	add	r3, r2
 8013d14:	4a0b      	ldr	r2, [pc, #44]	; (8013d44 <display_mp3screen+0x54>)
 8013d16:	4413      	add	r3, r2
 8013d18:	461a      	mov	r2, r3
 8013d1a:	490b      	ldr	r1, [pc, #44]	; (8013d48 <display_mp3screen+0x58>)
 8013d1c:	480b      	ldr	r0, [pc, #44]	; (8013d4c <display_mp3screen+0x5c>)
 8013d1e:	f000 fe85 	bl	8014a2c <siprintf>
	u8g2_DrawStr(&u8g2, 0, 40, filename_buf);
 8013d22:	4b0a      	ldr	r3, [pc, #40]	; (8013d4c <display_mp3screen+0x5c>)
 8013d24:	2228      	movs	r2, #40	; 0x28
 8013d26:	2100      	movs	r1, #0
 8013d28:	4803      	ldr	r0, [pc, #12]	; (8013d38 <display_mp3screen+0x48>)
 8013d2a:	f7fa fdc7 	bl	800e8bc <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8013d2e:	4802      	ldr	r0, [pc, #8]	; (8013d38 <display_mp3screen+0x48>)
 8013d30:	f7fa f8b2 	bl	800de98 <u8g2_SendBuffer>
}
 8013d34:	bf00      	nop
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	20005bbc 	.word	0x20005bbc
 8013d3c:	08015d04 	.word	0x08015d04
 8013d40:	20006e68 	.word	0x20006e68
 8013d44:	20006cd4 	.word	0x20006cd4
 8013d48:	080157b4 	.word	0x080157b4
 8013d4c:	20006ea0 	.word	0x20006ea0

08013d50 <display_mp3select>:

static void display_mp3select(void) {
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af02      	add	r7, sp, #8
	int num = mp3list_selnum % DISPLAY_MP3LIST_ROW;
 8013d56:	4b12      	ldr	r3, [pc, #72]	; (8013da0 <display_mp3select+0x50>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	425a      	negs	r2, r3
 8013d5c:	f003 0303 	and.w	r3, r3, #3
 8013d60:	f002 0203 	and.w	r2, r2, #3
 8013d64:	bf58      	it	pl
 8013d66:	4253      	negpl	r3, r2
 8013d68:	607b      	str	r3, [r7, #4]

    u8g2_SetFont(&u8g2, u8g2_font_5x8_tf);
 8013d6a:	490e      	ldr	r1, [pc, #56]	; (8013da4 <display_mp3select+0x54>)
 8013d6c:	480e      	ldr	r0, [pc, #56]	; (8013da8 <display_mp3select+0x58>)
 8013d6e:	f7fa fe47 	bl	800ea00 <u8g2_SetFont>
    u8g2_DrawFrame(&u8g2, 5, 17 + 10 * num, 118, 10);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	461a      	mov	r2, r3
 8013d78:	0092      	lsls	r2, r2, #2
 8013d7a:	4413      	add	r3, r2
 8013d7c:	005b      	lsls	r3, r3, #1
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	3311      	adds	r3, #17
 8013d82:	b2da      	uxtb	r2, r3
 8013d84:	230a      	movs	r3, #10
 8013d86:	9300      	str	r3, [sp, #0]
 8013d88:	2376      	movs	r3, #118	; 0x76
 8013d8a:	2105      	movs	r1, #5
 8013d8c:	4806      	ldr	r0, [pc, #24]	; (8013da8 <display_mp3select+0x58>)
 8013d8e:	f7f9 ffbc 	bl	800dd0a <u8g2_DrawFrame>
	u8g2_SendBuffer(&u8g2);
 8013d92:	4805      	ldr	r0, [pc, #20]	; (8013da8 <display_mp3select+0x58>)
 8013d94:	f7fa f880 	bl	800de98 <u8g2_SendBuffer>
}
 8013d98:	bf00      	nop
 8013d9a:	3708      	adds	r7, #8
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	20006e68 	.word	0x20006e68
 8013da4:	08015d04 	.word	0x08015d04
 8013da8:	20005bbc 	.word	0x20005bbc

08013dac <MP3_SetFileList>:

static void MP3_SetFileList(DIR *dir) {
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b0ca      	sub	sp, #296	; 0x128
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8013db6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013dba:	6018      	str	r0, [r3, #0]
	int i = 0;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	FILINFO info;

	while(1) {
		f_readdir(dir, &info);
 8013dc2:	f107 020c 	add.w	r2, r7, #12
 8013dc6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8013dca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013dce:	4611      	mov	r1, r2
 8013dd0:	6818      	ldr	r0, [r3, #0]
 8013dd2:	f7f4 fd87 	bl	80088e4 <f_readdir>
		if(info.fname[0] == '\0') break;
 8013dd6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8013dda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013dde:	7d9b      	ldrb	r3, [r3, #22]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d019      	beq.n	8013e18 <MP3_SetFileList+0x6c>
		snprintf(mp3list[i], 25, info.fname);
 8013de4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8013de8:	4613      	mov	r3, r2
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	4413      	add	r3, r2
 8013dee:	009a      	lsls	r2, r3, #2
 8013df0:	4413      	add	r3, r2
 8013df2:	4a10      	ldr	r2, [pc, #64]	; (8013e34 <MP3_SetFileList+0x88>)
 8013df4:	1898      	adds	r0, r3, r2
 8013df6:	f107 030c 	add.w	r3, r7, #12
 8013dfa:	3316      	adds	r3, #22
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	2119      	movs	r1, #25
 8013e00:	f000 fde0 	bl	80149c4 <sniprintf>
		i++;
 8013e04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013e08:	3301      	adds	r3, #1
 8013e0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		if(i>=15) break;
 8013e0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013e12:	2b0e      	cmp	r3, #14
 8013e14:	dc02      	bgt.n	8013e1c <MP3_SetFileList+0x70>
		f_readdir(dir, &info);
 8013e16:	e7d4      	b.n	8013dc2 <MP3_SetFileList+0x16>
		if(info.fname[0] == '\0') break;
 8013e18:	bf00      	nop
 8013e1a:	e000      	b.n	8013e1e <MP3_SetFileList+0x72>
		if(i>=15) break;
 8013e1c:	bf00      	nop
	}

	mp3list_maxnum = i - 1;
 8013e1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013e22:	3b01      	subs	r3, #1
 8013e24:	4a04      	ldr	r2, [pc, #16]	; (8013e38 <MP3_SetFileList+0x8c>)
 8013e26:	6013      	str	r3, [r2, #0]
}
 8013e28:	bf00      	nop
 8013e2a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	20006cd4 	.word	0x20006cd4
 8013e38:	20006e64 	.word	0x20006e64

08013e3c <display_mp3list>:

static void display_mp3list(u8g2_t* u8g2_handle) {
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
	int i = mp3list_selnum / 4 * 4;
 8013e44:	4b1e      	ldr	r3, [pc, #120]	; (8013ec0 <display_mp3list+0x84>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	da00      	bge.n	8013e4e <display_mp3list+0x12>
 8013e4c:	3303      	adds	r3, #3
 8013e4e:	109b      	asrs	r3, r3, #2
 8013e50:	009b      	lsls	r3, r3, #2
 8013e52:	60fb      	str	r3, [r7, #12]
	int num = 0;
 8013e54:	2300      	movs	r3, #0
 8013e56:	60bb      	str	r3, [r7, #8]

    u8g2_SetFont(u8g2_handle, u8g2_font_5x8_tf);
 8013e58:	491a      	ldr	r1, [pc, #104]	; (8013ec4 <display_mp3list+0x88>)
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f7fa fdd0 	bl	800ea00 <u8g2_SetFont>
    u8g2_ClearBuffer(u8g2_handle);
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f7f9 ffa6 	bl	800ddb2 <u8g2_ClearBuffer>

	while(mp3list[i] != NULL && num < DISPLAY_MP3LIST_ROW) {
 8013e66:	e01b      	b.n	8013ea0 <display_mp3list+0x64>
		u8g2_DrawStr(u8g2_handle, 10, 25 + 10*num, mp3list[i]);
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	b2db      	uxtb	r3, r3
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	0092      	lsls	r2, r2, #2
 8013e70:	4413      	add	r3, r2
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	3319      	adds	r3, #25
 8013e78:	b2d9      	uxtb	r1, r3
 8013e7a:	68fa      	ldr	r2, [r7, #12]
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	009b      	lsls	r3, r3, #2
 8013e80:	4413      	add	r3, r2
 8013e82:	009a      	lsls	r2, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	4a10      	ldr	r2, [pc, #64]	; (8013ec8 <display_mp3list+0x8c>)
 8013e88:	4413      	add	r3, r2
 8013e8a:	460a      	mov	r2, r1
 8013e8c:	210a      	movs	r1, #10
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f7fa fd14 	bl	800e8bc <u8g2_DrawStr>
		i++;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	3301      	adds	r3, #1
 8013e98:	60fb      	str	r3, [r7, #12]
		num++;
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	60bb      	str	r3, [r7, #8]
	while(mp3list[i] != NULL && num < DISPLAY_MP3LIST_ROW) {
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	2b03      	cmp	r3, #3
 8013ea4:	dde0      	ble.n	8013e68 <display_mp3list+0x2c>
	}
	display_mp3select();
 8013ea6:	f7ff ff53 	bl	8013d50 <display_mp3select>
	display_clock();
 8013eaa:	f7ff ff09 	bl	8013cc0 <display_clock>
	display_mp3playing();
 8013eae:	f7ff fee1 	bl	8013c74 <display_mp3playing>
	u8g2_SendBuffer(u8g2_handle);
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7f9 fff0 	bl	800de98 <u8g2_SendBuffer>
}
 8013eb8:	bf00      	nop
 8013eba:	3710      	adds	r7, #16
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	20006e68 	.word	0x20006e68
 8013ec4:	08015d04 	.word	0x08015d04
 8013ec8:	20006cd4 	.word	0x20006cd4

08013ecc <btn_center_handler>:


static void btn_center_handler(void) {
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	af00      	add	r7, sp, #0
	input_send.type = InputTypePress;
 8013ed0:	4b1c      	ldr	r3, [pc, #112]	; (8013f44 <btn_center_handler+0x78>)
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	705a      	strb	r2, [r3, #1]
	input_send.key = InputKeyCenter;
 8013ed6:	4b1b      	ldr	r3, [pc, #108]	; (8013f44 <btn_center_handler+0x78>)
 8013ed8:	2202      	movs	r2, #2
 8013eda:	701a      	strb	r2, [r3, #0]
	input_send.arg = 0;
 8013edc:	4b19      	ldr	r3, [pc, #100]	; (8013f44 <btn_center_handler+0x78>)
 8013ede:	2200      	movs	r2, #0
 8013ee0:	605a      	str	r2, [r3, #4]

	switch(current_layer) {
 8013ee2:	4b19      	ldr	r3, [pc, #100]	; (8013f48 <btn_center_handler+0x7c>)
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	2b01      	cmp	r3, #1
 8013ee8:	d01d      	beq.n	8013f26 <btn_center_handler+0x5a>
 8013eea:	2b02      	cmp	r3, #2
 8013eec:	d126      	bne.n	8013f3c <btn_center_handler+0x70>
	case DisplayLayerList:
		current_layer = DisplayLayerMp3;
 8013eee:	4b16      	ldr	r3, [pc, #88]	; (8013f48 <btn_center_handler+0x7c>)
 8013ef0:	2201      	movs	r2, #1
 8013ef2:	701a      	strb	r2, [r3, #0]
		input_send.arg = InputArgSelMp3File;
 8013ef4:	4b13      	ldr	r3, [pc, #76]	; (8013f44 <btn_center_handler+0x78>)
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	605a      	str	r2, [r3, #4]
		MP3_SetFile(mp3list[mp3list_selnum]);
 8013efa:	4b14      	ldr	r3, [pc, #80]	; (8013f4c <btn_center_handler+0x80>)
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	4613      	mov	r3, r2
 8013f00:	009b      	lsls	r3, r3, #2
 8013f02:	4413      	add	r3, r2
 8013f04:	009a      	lsls	r2, r3, #2
 8013f06:	4413      	add	r3, r2
 8013f08:	4a11      	ldr	r2, [pc, #68]	; (8013f50 <btn_center_handler+0x84>)
 8013f0a:	4413      	add	r3, r2
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f000 fba1 	bl	8014654 <MP3_SetFile>
		display_mp3screen();
 8013f12:	f7ff feed 	bl	8013cf0 <display_mp3screen>
		xQueueSend(mp3_queue, &input_send, 0);
 8013f16:	4b0f      	ldr	r3, [pc, #60]	; (8013f54 <btn_center_handler+0x88>)
 8013f18:	6818      	ldr	r0, [r3, #0]
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	4909      	ldr	r1, [pc, #36]	; (8013f44 <btn_center_handler+0x78>)
 8013f20:	f7f5 fe20 	bl	8009b64 <xQueueGenericSend>
		break;
 8013f24:	e00b      	b.n	8013f3e <btn_center_handler+0x72>

	case DisplayLayerMp3:
		input_send.arg = InputArgMp3PlayPause;
 8013f26:	4b07      	ldr	r3, [pc, #28]	; (8013f44 <btn_center_handler+0x78>)
 8013f28:	2202      	movs	r2, #2
 8013f2a:	605a      	str	r2, [r3, #4]
		xQueueSend(mp3_queue, &input_send, 0);
 8013f2c:	4b09      	ldr	r3, [pc, #36]	; (8013f54 <btn_center_handler+0x88>)
 8013f2e:	6818      	ldr	r0, [r3, #0]
 8013f30:	2300      	movs	r3, #0
 8013f32:	2200      	movs	r2, #0
 8013f34:	4903      	ldr	r1, [pc, #12]	; (8013f44 <btn_center_handler+0x78>)
 8013f36:	f7f5 fe15 	bl	8009b64 <xQueueGenericSend>
		break;
 8013f3a:	e000      	b.n	8013f3e <btn_center_handler+0x72>

	default:
		break;
 8013f3c:	bf00      	nop
	}
}
 8013f3e:	bf00      	nop
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	20006cb8 	.word	0x20006cb8
 8013f48:	20006cc8 	.word	0x20006cc8
 8013f4c:	20006e68 	.word	0x20006e68
 8013f50:	20006cd4 	.word	0x20006cd4
 8013f54:	20006ebc 	.word	0x20006ebc

08013f58 <btn_up_handler>:

static void btn_up_handler(void) {
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	af00      	add	r7, sp, #0
	switch(current_layer) {
 8013f5c:	4b12      	ldr	r3, [pc, #72]	; (8013fa8 <btn_up_handler+0x50>)
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d015      	beq.n	8013f90 <btn_up_handler+0x38>
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d11c      	bne.n	8013fa2 <btn_up_handler+0x4a>
	case DisplayLayerList:
		if(mp3list_selnum == 0) {
 8013f68:	4b10      	ldr	r3, [pc, #64]	; (8013fac <btn_up_handler+0x54>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d104      	bne.n	8013f7a <btn_up_handler+0x22>
			mp3list_selnum = mp3list_maxnum;
 8013f70:	4b0f      	ldr	r3, [pc, #60]	; (8013fb0 <btn_up_handler+0x58>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	4a0d      	ldr	r2, [pc, #52]	; (8013fac <btn_up_handler+0x54>)
 8013f76:	6013      	str	r3, [r2, #0]
 8013f78:	e004      	b.n	8013f84 <btn_up_handler+0x2c>
		} else {
			mp3list_selnum--;
 8013f7a:	4b0c      	ldr	r3, [pc, #48]	; (8013fac <btn_up_handler+0x54>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	3b01      	subs	r3, #1
 8013f80:	4a0a      	ldr	r2, [pc, #40]	; (8013fac <btn_up_handler+0x54>)
 8013f82:	6013      	str	r3, [r2, #0]
		}
		display_mp3list(&u8g2);
 8013f84:	480b      	ldr	r0, [pc, #44]	; (8013fb4 <btn_up_handler+0x5c>)
 8013f86:	f7ff ff59 	bl	8013e3c <display_mp3list>
		display_mp3select();
 8013f8a:	f7ff fee1 	bl	8013d50 <display_mp3select>
		break;
 8013f8e:	e009      	b.n	8013fa4 <btn_up_handler+0x4c>

	case DisplayLayerMp3:
		current_layer = DisplayLayerList;
 8013f90:	4b05      	ldr	r3, [pc, #20]	; (8013fa8 <btn_up_handler+0x50>)
 8013f92:	2202      	movs	r2, #2
 8013f94:	701a      	strb	r2, [r3, #0]
		display_mp3list(&u8g2);
 8013f96:	4807      	ldr	r0, [pc, #28]	; (8013fb4 <btn_up_handler+0x5c>)
 8013f98:	f7ff ff50 	bl	8013e3c <display_mp3list>
		display_mp3select();
 8013f9c:	f7ff fed8 	bl	8013d50 <display_mp3select>
		break;
 8013fa0:	e000      	b.n	8013fa4 <btn_up_handler+0x4c>

	default:
		break;
 8013fa2:	bf00      	nop
	}
}
 8013fa4:	bf00      	nop
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	20006cc8 	.word	0x20006cc8
 8013fac:	20006e68 	.word	0x20006e68
 8013fb0:	20006e64 	.word	0x20006e64
 8013fb4:	20005bbc 	.word	0x20005bbc

08013fb8 <btn_down_handler>:

static void btn_down_handler(void) {
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	af00      	add	r7, sp, #0
	switch(current_layer) {
 8013fbc:	4b13      	ldr	r3, [pc, #76]	; (801400c <btn_down_handler+0x54>)
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d016      	beq.n	8013ff2 <btn_down_handler+0x3a>
 8013fc4:	2b02      	cmp	r3, #2
 8013fc6:	d11d      	bne.n	8014004 <btn_down_handler+0x4c>
	case DisplayLayerList:
		if(mp3list_selnum >= mp3list_maxnum) {
 8013fc8:	4b11      	ldr	r3, [pc, #68]	; (8014010 <btn_down_handler+0x58>)
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	4b11      	ldr	r3, [pc, #68]	; (8014014 <btn_down_handler+0x5c>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	db03      	blt.n	8013fdc <btn_down_handler+0x24>
			mp3list_selnum = 0;
 8013fd4:	4b0e      	ldr	r3, [pc, #56]	; (8014010 <btn_down_handler+0x58>)
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	e004      	b.n	8013fe6 <btn_down_handler+0x2e>
		} else {
			mp3list_selnum++;
 8013fdc:	4b0c      	ldr	r3, [pc, #48]	; (8014010 <btn_down_handler+0x58>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	4a0b      	ldr	r2, [pc, #44]	; (8014010 <btn_down_handler+0x58>)
 8013fe4:	6013      	str	r3, [r2, #0]
		}
		display_mp3list(&u8g2);
 8013fe6:	480c      	ldr	r0, [pc, #48]	; (8014018 <btn_down_handler+0x60>)
 8013fe8:	f7ff ff28 	bl	8013e3c <display_mp3list>
		display_mp3select();
 8013fec:	f7ff feb0 	bl	8013d50 <display_mp3select>
		break;
 8013ff0:	e009      	b.n	8014006 <btn_down_handler+0x4e>

	case DisplayLayerMp3:
		current_layer = DisplayLayerList;
 8013ff2:	4b06      	ldr	r3, [pc, #24]	; (801400c <btn_down_handler+0x54>)
 8013ff4:	2202      	movs	r2, #2
 8013ff6:	701a      	strb	r2, [r3, #0]
		display_mp3list(&u8g2);
 8013ff8:	4807      	ldr	r0, [pc, #28]	; (8014018 <btn_down_handler+0x60>)
 8013ffa:	f7ff ff1f 	bl	8013e3c <display_mp3list>
		display_mp3select();
 8013ffe:	f7ff fea7 	bl	8013d50 <display_mp3select>
		break;
 8014002:	e000      	b.n	8014006 <btn_down_handler+0x4e>

	default:
		break;
 8014004:	bf00      	nop
	}
}
 8014006:	bf00      	nop
 8014008:	bd80      	pop	{r7, pc}
 801400a:	bf00      	nop
 801400c:	20006cc8 	.word	0x20006cc8
 8014010:	20006e68 	.word	0x20006e68
 8014014:	20006e64 	.word	0x20006e64
 8014018:	20005bbc 	.word	0x20005bbc

0801401c <btn_left_handler>:

static void btn_left_handler(void) {
 801401c:	b580      	push	{r7, lr}
 801401e:	af00      	add	r7, sp, #0
	switch(current_layer) {
 8014020:	4b08      	ldr	r3, [pc, #32]	; (8014044 <btn_left_handler+0x28>)
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	2b01      	cmp	r3, #1
 8014026:	d007      	beq.n	8014038 <btn_left_handler+0x1c>
 8014028:	2b02      	cmp	r3, #2
 801402a:	d107      	bne.n	801403c <btn_left_handler+0x20>
	case DisplayLayerList:
		current_layer = DisplayLayerMp3;
 801402c:	4b05      	ldr	r3, [pc, #20]	; (8014044 <btn_left_handler+0x28>)
 801402e:	2201      	movs	r2, #1
 8014030:	701a      	strb	r2, [r3, #0]
		display_mp3screen();
 8014032:	f7ff fe5d 	bl	8013cf0 <display_mp3screen>
		break;
 8014036:	e002      	b.n	801403e <btn_left_handler+0x22>

	case DisplayLayerMp3:
		break;
 8014038:	bf00      	nop
 801403a:	e000      	b.n	801403e <btn_left_handler+0x22>

	default:
		break;
 801403c:	bf00      	nop
	}
}
 801403e:	bf00      	nop
 8014040:	bd80      	pop	{r7, pc}
 8014042:	bf00      	nop
 8014044:	20006cc8 	.word	0x20006cc8

08014048 <btn_right_handler>:

static void btn_right_handler(void) {
 8014048:	b580      	push	{r7, lr}
 801404a:	af00      	add	r7, sp, #0
	switch(current_layer) {
 801404c:	4b08      	ldr	r3, [pc, #32]	; (8014070 <btn_right_handler+0x28>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	2b01      	cmp	r3, #1
 8014052:	d007      	beq.n	8014064 <btn_right_handler+0x1c>
 8014054:	2b02      	cmp	r3, #2
 8014056:	d107      	bne.n	8014068 <btn_right_handler+0x20>
	case DisplayLayerList:
		current_layer = DisplayLayerMp3;
 8014058:	4b05      	ldr	r3, [pc, #20]	; (8014070 <btn_right_handler+0x28>)
 801405a:	2201      	movs	r2, #1
 801405c:	701a      	strb	r2, [r3, #0]
		display_mp3screen();
 801405e:	f7ff fe47 	bl	8013cf0 <display_mp3screen>
		break;
 8014062:	e002      	b.n	801406a <btn_right_handler+0x22>

	case DisplayLayerMp3:
		break;
 8014064:	bf00      	nop
 8014066:	e000      	b.n	801406a <btn_right_handler+0x22>

	default:
		break;
 8014068:	bf00      	nop
	}
}
 801406a:	bf00      	nop
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	20006cc8 	.word	0x20006cc8

08014074 <refresh_rtc_timercb>:


static void refresh_rtc_timercb (TimerHandle_t xTimer) {
 8014074:	b5b0      	push	{r4, r5, r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af04      	add	r7, sp, #16
 801407a:	6078      	str	r0, [r7, #4]
	ds3231_get_time(&ds3231_time);
 801407c:	4818      	ldr	r0, [pc, #96]	; (80140e0 <refresh_rtc_timercb+0x6c>)
 801407e:	f7ec fae9 	bl	8000654 <ds3231_get_time>
    u8g2_SetFont(&u8g2, u8g2_font_5x8_tf);
 8014082:	4918      	ldr	r1, [pc, #96]	; (80140e4 <refresh_rtc_timercb+0x70>)
 8014084:	4818      	ldr	r0, [pc, #96]	; (80140e8 <refresh_rtc_timercb+0x74>)
 8014086:	f7fa fcbb 	bl	800ea00 <u8g2_SetFont>
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 801408a:	4b15      	ldr	r3, [pc, #84]	; (80140e0 <refresh_rtc_timercb+0x6c>)
 801408c:	795b      	ldrb	r3, [r3, #5]
 801408e:	461c      	mov	r4, r3
 8014090:	4b13      	ldr	r3, [pc, #76]	; (80140e0 <refresh_rtc_timercb+0x6c>)
 8014092:	791b      	ldrb	r3, [r3, #4]
 8014094:	461d      	mov	r5, r3
 8014096:	4b12      	ldr	r3, [pc, #72]	; (80140e0 <refresh_rtc_timercb+0x6c>)
 8014098:	78db      	ldrb	r3, [r3, #3]
 801409a:	4618      	mov	r0, r3
 801409c:	f7ec fb42 	bl	8000724 <ds3231_day_to_string>
 80140a0:	4603      	mov	r3, r0
			ds3231_time.hour, ds3231_time.min, ds3231_time.sec);
 80140a2:	4a0f      	ldr	r2, [pc, #60]	; (80140e0 <refresh_rtc_timercb+0x6c>)
 80140a4:	7892      	ldrb	r2, [r2, #2]
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 80140a6:	4611      	mov	r1, r2
			ds3231_time.hour, ds3231_time.min, ds3231_time.sec);
 80140a8:	4a0d      	ldr	r2, [pc, #52]	; (80140e0 <refresh_rtc_timercb+0x6c>)
 80140aa:	7852      	ldrb	r2, [r2, #1]
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 80140ac:	4610      	mov	r0, r2
			ds3231_time.hour, ds3231_time.min, ds3231_time.sec);
 80140ae:	4a0c      	ldr	r2, [pc, #48]	; (80140e0 <refresh_rtc_timercb+0x6c>)
 80140b0:	7812      	ldrb	r2, [r2, #0]
	sprintf(rtc_string, "%d/%d %s %d:%d:%d", ds3231_time.month, ds3231_time.date, ds3231_day_to_string(ds3231_time.day),
 80140b2:	9203      	str	r2, [sp, #12]
 80140b4:	9002      	str	r0, [sp, #8]
 80140b6:	9101      	str	r1, [sp, #4]
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	462b      	mov	r3, r5
 80140bc:	4622      	mov	r2, r4
 80140be:	490b      	ldr	r1, [pc, #44]	; (80140ec <refresh_rtc_timercb+0x78>)
 80140c0:	480b      	ldr	r0, [pc, #44]	; (80140f0 <refresh_rtc_timercb+0x7c>)
 80140c2:	f000 fcb3 	bl	8014a2c <siprintf>
	u8g2_DrawStr(&u8g2, 0, 10, rtc_string);
 80140c6:	4b0a      	ldr	r3, [pc, #40]	; (80140f0 <refresh_rtc_timercb+0x7c>)
 80140c8:	220a      	movs	r2, #10
 80140ca:	2100      	movs	r1, #0
 80140cc:	4806      	ldr	r0, [pc, #24]	; (80140e8 <refresh_rtc_timercb+0x74>)
 80140ce:	f7fa fbf5 	bl	800e8bc <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 80140d2:	4805      	ldr	r0, [pc, #20]	; (80140e8 <refresh_rtc_timercb+0x74>)
 80140d4:	f7f9 fee0 	bl	800de98 <u8g2_SendBuffer>
}
 80140d8:	bf00      	nop
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bdb0      	pop	{r4, r5, r7, pc}
 80140e0:	20006ccc 	.word	0x20006ccc
 80140e4:	08015d04 	.word	0x08015d04
 80140e8:	20005bbc 	.word	0x20005bbc
 80140ec:	080157b8 	.word	0x080157b8
 80140f0:	20006e6c 	.word	0x20006e6c

080140f4 <displayThread>:

void displayThread(void* param) {
 80140f4:	b590      	push	{r4, r7, lr}
 80140f6:	b085      	sub	sp, #20
 80140f8:	af02      	add	r7, sp, #8
 80140fa:	6078      	str	r0, [r7, #4]
	current_layer = DisplayLayerList;
 80140fc:	4b3e      	ldr	r3, [pc, #248]	; (80141f8 <displayThread+0x104>)
 80140fe:	2202      	movs	r2, #2
 8014100:	701a      	strb	r2, [r3, #0]

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8014102:	4b3e      	ldr	r3, [pc, #248]	; (80141fc <displayThread+0x108>)
 8014104:	4a3e      	ldr	r2, [pc, #248]	; (8014200 <displayThread+0x10c>)
 8014106:	493f      	ldr	r1, [pc, #252]	; (8014204 <displayThread+0x110>)
 8014108:	483f      	ldr	r0, [pc, #252]	; (8014208 <displayThread+0x114>)
 801410a:	f7f9 fee3 	bl	800ded4 <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2);
 801410e:	483e      	ldr	r0, [pc, #248]	; (8014208 <displayThread+0x114>)
 8014110:	f7fb fa96 	bl	800f640 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8014114:	2100      	movs	r1, #0
 8014116:	483c      	ldr	r0, [pc, #240]	; (8014208 <displayThread+0x114>)
 8014118:	f7fb faa1 	bl	800f65e <u8x8_SetPowerSave>

	ds3231_register_driver(&i2c1drv);
 801411c:	483b      	ldr	r0, [pc, #236]	; (801420c <displayThread+0x118>)
 801411e:	f7ec fa89 	bl	8000634 <ds3231_register_driver>

	rtc_timer = xTimerCreate("rtc",
 8014122:	4b3b      	ldr	r3, [pc, #236]	; (8014210 <displayThread+0x11c>)
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	2300      	movs	r3, #0
 8014128:	2201      	movs	r2, #1
 801412a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801412e:	4839      	ldr	r0, [pc, #228]	; (8014214 <displayThread+0x120>)
 8014130:	f7f7 fcce 	bl	800bad0 <xTimerCreate>
 8014134:	4603      	mov	r3, r0
 8014136:	4a38      	ldr	r2, [pc, #224]	; (8014218 <displayThread+0x124>)
 8014138:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(RTC_TIMER_PERIOD),
							pdTRUE,
							(void*)0,
							refresh_rtc_timercb);

	if(rtc_timer == NULL) {
 801413a:	4b37      	ldr	r3, [pc, #220]	; (8014218 <displayThread+0x124>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d103      	bne.n	801414a <displayThread+0x56>
		hal_cli_printf("rtc timer create failed");
 8014142:	4836      	ldr	r0, [pc, #216]	; (801421c <displayThread+0x128>)
 8014144:	f7fb fda0 	bl	800fc88 <hal_cli_printf>
		return;
 8014148:	e052      	b.n	80141f0 <displayThread+0xfc>
	} else {
		if(xTimerStart(rtc_timer, 0) != pdPASS) {
 801414a:	4b33      	ldr	r3, [pc, #204]	; (8014218 <displayThread+0x124>)
 801414c:	681c      	ldr	r4, [r3, #0]
 801414e:	f7f6 fe43 	bl	800add8 <xTaskGetTickCount>
 8014152:	4602      	mov	r2, r0
 8014154:	2300      	movs	r3, #0
 8014156:	9300      	str	r3, [sp, #0]
 8014158:	2300      	movs	r3, #0
 801415a:	2101      	movs	r1, #1
 801415c:	4620      	mov	r0, r4
 801415e:	f7f7 fd13 	bl	800bb88 <xTimerGenericCommand>
 8014162:	4603      	mov	r3, r0
 8014164:	2b01      	cmp	r3, #1
 8014166:	d003      	beq.n	8014170 <displayThread+0x7c>
			hal_cli_printf("rtc timer start failed");
 8014168:	482d      	ldr	r0, [pc, #180]	; (8014220 <displayThread+0x12c>)
 801416a:	f7fb fd8d 	bl	800fc88 <hal_cli_printf>
			return;
 801416e:	e03f      	b.n	80141f0 <displayThread+0xfc>
		}
	}

	f_mount(&mp3fatfs, "", 1);
 8014170:	2201      	movs	r2, #1
 8014172:	492c      	ldr	r1, [pc, #176]	; (8014224 <displayThread+0x130>)
 8014174:	482c      	ldr	r0, [pc, #176]	; (8014228 <displayThread+0x134>)
 8014176:	f7f3 fde3 	bl	8007d40 <f_mount>
	f_opendir(&mp3dir, "/mp3");
 801417a:	492c      	ldr	r1, [pc, #176]	; (801422c <displayThread+0x138>)
 801417c:	482c      	ldr	r0, [pc, #176]	; (8014230 <displayThread+0x13c>)
 801417e:	f7f4 faf4 	bl	800876a <f_opendir>
	MP3_SetFileList(&mp3dir);
 8014182:	482b      	ldr	r0, [pc, #172]	; (8014230 <displayThread+0x13c>)
 8014184:	f7ff fe12 	bl	8013dac <MP3_SetFileList>
	display_mp3list(&u8g2);
 8014188:	481f      	ldr	r0, [pc, #124]	; (8014208 <displayThread+0x114>)
 801418a:	f7ff fe57 	bl	8013e3c <display_mp3list>

	while(1) {
		xQueueReceive(display_queue, &input_rcv, portMAX_DELAY);
 801418e:	4b29      	ldr	r3, [pc, #164]	; (8014234 <displayThread+0x140>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014196:	4928      	ldr	r1, [pc, #160]	; (8014238 <displayThread+0x144>)
 8014198:	4618      	mov	r0, r3
 801419a:	f7f5 fec7 	bl	8009f2c <xQueueReceive>

		switch(input_rcv.key) {
 801419e:	4b26      	ldr	r3, [pc, #152]	; (8014238 <displayThread+0x144>)
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	2b06      	cmp	r3, #6
 80141a4:	d822      	bhi.n	80141ec <displayThread+0xf8>
 80141a6:	a201      	add	r2, pc, #4	; (adr r2, 80141ac <displayThread+0xb8>)
 80141a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ac:	080141db 	.word	0x080141db
 80141b0:	080141e1 	.word	0x080141e1
 80141b4:	080141c9 	.word	0x080141c9
 80141b8:	080141cf 	.word	0x080141cf
 80141bc:	080141d5 	.word	0x080141d5
 80141c0:	080141ed 	.word	0x080141ed
 80141c4:	080141e7 	.word	0x080141e7
		case InputKeyCenter:
			btn_center_handler();
 80141c8:	f7ff fe80 	bl	8013ecc <btn_center_handler>
			break;
 80141cc:	e00f      	b.n	80141ee <displayThread+0xfa>
		case InputKeyUp:
			btn_up_handler();
 80141ce:	f7ff fec3 	bl	8013f58 <btn_up_handler>
			break;
 80141d2:	e00c      	b.n	80141ee <displayThread+0xfa>
		case InputKeyDown:
			btn_down_handler();
 80141d4:	f7ff fef0 	bl	8013fb8 <btn_down_handler>
			break;
 80141d8:	e009      	b.n	80141ee <displayThread+0xfa>
		case InputKeyLeft:
			btn_left_handler();
 80141da:	f7ff ff1f 	bl	801401c <btn_left_handler>
			break;
 80141de:	e006      	b.n	80141ee <displayThread+0xfa>
		case InputKeyRight:
			btn_right_handler();
 80141e0:	f7ff ff32 	bl	8014048 <btn_right_handler>
			break;
 80141e4:	e003      	b.n	80141ee <displayThread+0xfa>
		case InputKeyNone:
			display_mp3playing();
 80141e6:	f7ff fd45 	bl	8013c74 <display_mp3playing>
			break;
 80141ea:	e000      	b.n	80141ee <displayThread+0xfa>
		default:
			break;
 80141ec:	bf00      	nop
		xQueueReceive(display_queue, &input_rcv, portMAX_DELAY);
 80141ee:	e7ce      	b.n	801418e <displayThread+0x9a>
		}
	}
}
 80141f0:	370c      	adds	r7, #12
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd90      	pop	{r4, r7, pc}
 80141f6:	bf00      	nop
 80141f8:	20006cc8 	.word	0x20006cc8
 80141fc:	08000845 	.word	0x08000845
 8014200:	08000965 	.word	0x08000965
 8014204:	08016400 	.word	0x08016400
 8014208:	20005bbc 	.word	0x20005bbc
 801420c:	20005984 	.word	0x20005984
 8014210:	08014075 	.word	0x08014075
 8014214:	080157cc 	.word	0x080157cc
 8014218:	20005c44 	.word	0x20005c44
 801421c:	080157d0 	.word	0x080157d0
 8014220:	080157e8 	.word	0x080157e8
 8014224:	08015800 	.word	0x08015800
 8014228:	20005c48 	.word	0x20005c48
 801422c:	08015804 	.word	0x08015804
 8014230:	20006c80 	.word	0x20006c80
 8014234:	20006ec0 	.word	0x20006ec0
 8014238:	20006cc0 	.word	0x20006cc0

0801423c <input_button_exti_cb>:
#include "event.h"
#include "queue.h"

static InputEvent input_ev;

static void input_button_exti_cb(void* context) {
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken;
	int* key = context;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	60fb      	str	r3, [r7, #12]

	switch(*key) {
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b04      	cmp	r3, #4
 801424e:	d849      	bhi.n	80142e4 <input_button_exti_cb+0xa8>
 8014250:	a201      	add	r2, pc, #4	; (adr r2, 8014258 <input_button_exti_cb+0x1c>)
 8014252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014256:	bf00      	nop
 8014258:	0801426d 	.word	0x0801426d
 801425c:	08014285 	.word	0x08014285
 8014260:	0801429d 	.word	0x0801429d
 8014264:	080142b5 	.word	0x080142b5
 8014268:	080142cd 	.word	0x080142cd
	case InputKeyLeft:
		input_ev.key = InputKeyLeft;
 801426c:	4b28      	ldr	r3, [pc, #160]	; (8014310 <input_button_exti_cb+0xd4>)
 801426e:	2200      	movs	r2, #0
 8014270:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 8014272:	4b28      	ldr	r3, [pc, #160]	; (8014314 <input_button_exti_cb+0xd8>)
 8014274:	6818      	ldr	r0, [r3, #0]
 8014276:	f107 0208 	add.w	r2, r7, #8
 801427a:	2300      	movs	r3, #0
 801427c:	4924      	ldr	r1, [pc, #144]	; (8014310 <input_button_exti_cb+0xd4>)
 801427e:	f7f5 fd97 	bl	8009db0 <xQueueGenericSendFromISR>
		break;
 8014282:	e030      	b.n	80142e6 <input_button_exti_cb+0xaa>
	case InputKeyRight:
		input_ev.key = InputKeyRight;
 8014284:	4b22      	ldr	r3, [pc, #136]	; (8014310 <input_button_exti_cb+0xd4>)
 8014286:	2201      	movs	r2, #1
 8014288:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 801428a:	4b22      	ldr	r3, [pc, #136]	; (8014314 <input_button_exti_cb+0xd8>)
 801428c:	6818      	ldr	r0, [r3, #0]
 801428e:	f107 0208 	add.w	r2, r7, #8
 8014292:	2300      	movs	r3, #0
 8014294:	491e      	ldr	r1, [pc, #120]	; (8014310 <input_button_exti_cb+0xd4>)
 8014296:	f7f5 fd8b 	bl	8009db0 <xQueueGenericSendFromISR>
		break;
 801429a:	e024      	b.n	80142e6 <input_button_exti_cb+0xaa>
	case InputKeyCenter:
		input_ev.key = InputKeyCenter;
 801429c:	4b1c      	ldr	r3, [pc, #112]	; (8014310 <input_button_exti_cb+0xd4>)
 801429e:	2202      	movs	r2, #2
 80142a0:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 80142a2:	4b1c      	ldr	r3, [pc, #112]	; (8014314 <input_button_exti_cb+0xd8>)
 80142a4:	6818      	ldr	r0, [r3, #0]
 80142a6:	f107 0208 	add.w	r2, r7, #8
 80142aa:	2300      	movs	r3, #0
 80142ac:	4918      	ldr	r1, [pc, #96]	; (8014310 <input_button_exti_cb+0xd4>)
 80142ae:	f7f5 fd7f 	bl	8009db0 <xQueueGenericSendFromISR>
		break;
 80142b2:	e018      	b.n	80142e6 <input_button_exti_cb+0xaa>
	case InputKeyUp:
		input_ev.key = InputKeyUp;
 80142b4:	4b16      	ldr	r3, [pc, #88]	; (8014310 <input_button_exti_cb+0xd4>)
 80142b6:	2203      	movs	r2, #3
 80142b8:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 80142ba:	4b16      	ldr	r3, [pc, #88]	; (8014314 <input_button_exti_cb+0xd8>)
 80142bc:	6818      	ldr	r0, [r3, #0]
 80142be:	f107 0208 	add.w	r2, r7, #8
 80142c2:	2300      	movs	r3, #0
 80142c4:	4912      	ldr	r1, [pc, #72]	; (8014310 <input_button_exti_cb+0xd4>)
 80142c6:	f7f5 fd73 	bl	8009db0 <xQueueGenericSendFromISR>
		break;
 80142ca:	e00c      	b.n	80142e6 <input_button_exti_cb+0xaa>
	case InputKeyDown:
		input_ev.key = InputKeyDown;
 80142cc:	4b10      	ldr	r3, [pc, #64]	; (8014310 <input_button_exti_cb+0xd4>)
 80142ce:	2204      	movs	r2, #4
 80142d0:	701a      	strb	r2, [r3, #0]
		xQueueSendFromISR(display_queue, &input_ev, &xHigherPriorityTaskWoken);
 80142d2:	4b10      	ldr	r3, [pc, #64]	; (8014314 <input_button_exti_cb+0xd8>)
 80142d4:	6818      	ldr	r0, [r3, #0]
 80142d6:	f107 0208 	add.w	r2, r7, #8
 80142da:	2300      	movs	r3, #0
 80142dc:	490c      	ldr	r1, [pc, #48]	; (8014310 <input_button_exti_cb+0xd4>)
 80142de:	f7f5 fd67 	bl	8009db0 <xQueueGenericSendFromISR>
		break;
 80142e2:	e000      	b.n	80142e6 <input_button_exti_cb+0xaa>
	default:
		break;
 80142e4:	bf00      	nop
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00a      	beq.n	8014302 <input_button_exti_cb+0xc6>
 80142ec:	f7f9 f85c 	bl	800d3a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80142f0:	4b09      	ldr	r3, [pc, #36]	; (8014318 <input_button_exti_cb+0xdc>)
 80142f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142f6:	601a      	str	r2, [r3, #0]
 80142f8:	f3bf 8f4f 	dsb	sy
 80142fc:	f3bf 8f6f 	isb	sy
}
 8014300:	e001      	b.n	8014306 <input_button_exti_cb+0xca>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8014302:	f7f9 f835 	bl	800d370 <SEGGER_SYSVIEW_RecordExitISR>
}
 8014306:	bf00      	nop
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	20006ec4 	.word	0x20006ec4
 8014314:	20006ec0 	.word	0x20006ec0
 8014318:	e000ed04 	.word	0xe000ed04

0801431c <inputThread>:


void inputThread(void* param) {
 801431c:	b580      	push	{r7, lr}
 801431e:	b084      	sub	sp, #16
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < InputKeyNum; i++) {
 8014324:	2300      	movs	r3, #0
 8014326:	60fb      	str	r3, [r7, #12]
 8014328:	e00f      	b.n	801434a <inputThread+0x2e>
		hal_gpio_add_exti_callback(input_pins[i].gpio, input_button_exti_cb, &input_pins[i].key);
 801432a:	4a11      	ldr	r2, [pc, #68]	; (8014370 <inputThread+0x54>)
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	00db      	lsls	r3, r3, #3
 8014336:	4a0e      	ldr	r2, [pc, #56]	; (8014370 <inputThread+0x54>)
 8014338:	4413      	add	r3, r2
 801433a:	3304      	adds	r3, #4
 801433c:	461a      	mov	r2, r3
 801433e:	490d      	ldr	r1, [pc, #52]	; (8014374 <inputThread+0x58>)
 8014340:	f7fc fc88 	bl	8010c54 <hal_gpio_add_exti_callback>
	for(int i = 0; i < InputKeyNum; i++) {
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	3301      	adds	r3, #1
 8014348:	60fb      	str	r3, [r7, #12]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2b04      	cmp	r3, #4
 801434e:	ddec      	ble.n	801432a <inputThread+0xe>
	}

	input_ev.key = InputKeyNone;
 8014350:	4b09      	ldr	r3, [pc, #36]	; (8014378 <inputThread+0x5c>)
 8014352:	2206      	movs	r2, #6
 8014354:	701a      	strb	r2, [r3, #0]
	input_ev.type = InputTypeNone;
 8014356:	4b08      	ldr	r3, [pc, #32]	; (8014378 <inputThread+0x5c>)
 8014358:	2200      	movs	r2, #0
 801435a:	705a      	strb	r2, [r3, #1]
	input_ev.arg = 0;
 801435c:	4b06      	ldr	r3, [pc, #24]	; (8014378 <inputThread+0x5c>)
 801435e:	2200      	movs	r2, #0
 8014360:	605a      	str	r2, [r3, #4]

	while(1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8014362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014366:	2101      	movs	r1, #1
 8014368:	2000      	movs	r0, #0
 801436a:	f7f7 fa97 	bl	800b89c <ulTaskGenericNotifyTake>
 801436e:	e7f8      	b.n	8014362 <inputThread+0x46>
 8014370:	0801655c 	.word	0x0801655c
 8014374:	0801423d 	.word	0x0801423d
 8014378:	20006ec4 	.word	0x20006ec4

0801437c <LL_TIM_ClearFlag_UPDATE>:
{
 801437c:	b480      	push	{r7}
 801437e:	b083      	sub	sp, #12
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f06f 0201 	mvn.w	r2, #1
 801438a:	611a      	str	r2, [r3, #16]
}
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <mp3_feed_notify_timcb>:

static uint8_t convert_volume_level(VolumeLevel vol);

/* sd 카드 api 내부에 있는 hal_delay때문에 ISR 내부에서는 사용못함 */
/* 주기를 20ms로 두었음 */
static void mp3_feed_notify_timcb(void* context) {
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80143a0:	2300      	movs	r3, #0
 80143a2:	60fb      	str	r3, [r7, #12]
	LL_TIM_ClearFlag_UPDATE(TIM4);
 80143a4:	4810      	ldr	r0, [pc, #64]	; (80143e8 <mp3_feed_notify_timcb+0x50>)
 80143a6:	f7ff ffe9 	bl	801437c <LL_TIM_ClearFlag_UPDATE>
	input_rcv.key = InputKeyNone;
 80143aa:	4b10      	ldr	r3, [pc, #64]	; (80143ec <mp3_feed_notify_timcb+0x54>)
 80143ac:	2206      	movs	r2, #6
 80143ae:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(mp3_queue, &input_rcv, &xHigherPriorityTaskWoken);
 80143b0:	4b0f      	ldr	r3, [pc, #60]	; (80143f0 <mp3_feed_notify_timcb+0x58>)
 80143b2:	6818      	ldr	r0, [r3, #0]
 80143b4:	f107 020c 	add.w	r2, r7, #12
 80143b8:	2300      	movs	r3, #0
 80143ba:	490c      	ldr	r1, [pc, #48]	; (80143ec <mp3_feed_notify_timcb+0x54>)
 80143bc:	f7f5 fcf8 	bl	8009db0 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d00a      	beq.n	80143dc <mp3_feed_notify_timcb+0x44>
 80143c6:	f7f8 ffef 	bl	800d3a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80143ca:	4b0a      	ldr	r3, [pc, #40]	; (80143f4 <mp3_feed_notify_timcb+0x5c>)
 80143cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143d0:	601a      	str	r2, [r3, #0]
 80143d2:	f3bf 8f4f 	dsb	sy
 80143d6:	f3bf 8f6f 	isb	sy
}
 80143da:	e001      	b.n	80143e0 <mp3_feed_notify_timcb+0x48>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80143dc:	f7f8 ffc8 	bl	800d370 <SEGGER_SYSVIEW_RecordExitISR>
}
 80143e0:	bf00      	nop
 80143e2:	3710      	adds	r7, #16
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	40000800 	.word	0x40000800
 80143ec:	20006ed4 	.word	0x20006ed4
 80143f0:	20006ebc 	.word	0x20006ebc
 80143f4:	e000ed04 	.word	0xe000ed04

080143f8 <volume_control_timercb>:

static void volume_control_timercb(TimerHandle_t xTimer) {
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
	uint32_t potentiometer = 0;
 8014400:	2300      	movs	r3, #0
 8014402:	60bb      	str	r3, [r7, #8]
	uint8_t volume = 0xFF;
 8014404:	23ff      	movs	r3, #255	; 0xff
 8014406:	73fb      	strb	r3, [r7, #15]

	hal_adc_getdata(1, &potentiometer);
 8014408:	f107 0308 	add.w	r3, r7, #8
 801440c:	4619      	mov	r1, r3
 801440e:	2001      	movs	r0, #1
 8014410:	f7fb faae 	bl	800f970 <hal_adc_getdata>
	potentiometer >>= 9; // 12bit adc resolution msb 3비트만 참고하여 볼륨 조절
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	0a5b      	lsrs	r3, r3, #9
 8014418:	60bb      	str	r3, [r7, #8]

	if(prev_volume != potentiometer) {
 801441a:	4b0d      	ldr	r3, [pc, #52]	; (8014450 <volume_control_timercb+0x58>)
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	461a      	mov	r2, r3
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	429a      	cmp	r2, r3
 8014424:	d00c      	beq.n	8014440 <volume_control_timercb+0x48>
		volume = convert_volume_level(potentiometer);
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	b2db      	uxtb	r3, r3
 801442a:	4618      	mov	r0, r3
 801442c:	f000 f812 	bl	8014454 <convert_volume_level>
 8014430:	4603      	mov	r3, r0
 8014432:	73fb      	strb	r3, [r7, #15]
		VS1053_SetVolume(volume, volume);
 8014434:	7bfa      	ldrb	r2, [r7, #15]
 8014436:	7bfb      	ldrb	r3, [r7, #15]
 8014438:	4611      	mov	r1, r2
 801443a:	4618      	mov	r0, r3
 801443c:	f7ec fc0c 	bl	8000c58 <VS1053_SetVolume>
	}

	prev_volume = potentiometer;
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	b2da      	uxtb	r2, r3
 8014444:	4b02      	ldr	r3, [pc, #8]	; (8014450 <volume_control_timercb+0x58>)
 8014446:	701a      	strb	r2, [r3, #0]
}
 8014448:	bf00      	nop
 801444a:	3710      	adds	r7, #16
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	20006ed0 	.word	0x20006ed0

08014454 <convert_volume_level>:

static uint8_t convert_volume_level(VolumeLevel vol) {
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	4603      	mov	r3, r0
 801445c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch(vol) {
 801445e:	79fb      	ldrb	r3, [r7, #7]
 8014460:	2b07      	cmp	r3, #7
 8014462:	d82b      	bhi.n	80144bc <convert_volume_level+0x68>
 8014464:	a201      	add	r2, pc, #4	; (adr r2, 801446c <convert_volume_level+0x18>)
 8014466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801446a:	bf00      	nop
 801446c:	080144b7 	.word	0x080144b7
 8014470:	0801448d 	.word	0x0801448d
 8014474:	08014493 	.word	0x08014493
 8014478:	08014499 	.word	0x08014499
 801447c:	0801449f 	.word	0x0801449f
 8014480:	080144a5 	.word	0x080144a5
 8014484:	080144ab 	.word	0x080144ab
 8014488:	080144b1 	.word	0x080144b1
	case VOLUME_LEVEL_1:
		value = 0x0C;
 801448c:	230c      	movs	r3, #12
 801448e:	73fb      	strb	r3, [r7, #15]
		break;
 8014490:	e01a      	b.n	80144c8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_2:
		value = 0x0A;
 8014492:	230a      	movs	r3, #10
 8014494:	73fb      	strb	r3, [r7, #15]
		break;
 8014496:	e017      	b.n	80144c8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_3:
		value = 0x08;
 8014498:	2308      	movs	r3, #8
 801449a:	73fb      	strb	r3, [r7, #15]
		break;
 801449c:	e014      	b.n	80144c8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_4:
		value = 0x06;
 801449e:	2306      	movs	r3, #6
 80144a0:	73fb      	strb	r3, [r7, #15]
		break;
 80144a2:	e011      	b.n	80144c8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_5:
		value = 0x04;
 80144a4:	2304      	movs	r3, #4
 80144a6:	73fb      	strb	r3, [r7, #15]
		break;
 80144a8:	e00e      	b.n	80144c8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_6:
		value = 0x02;
 80144aa:	2302      	movs	r3, #2
 80144ac:	73fb      	strb	r3, [r7, #15]
		break;
 80144ae:	e00b      	b.n	80144c8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_7:
		value = 0x00;
 80144b0:	2300      	movs	r3, #0
 80144b2:	73fb      	strb	r3, [r7, #15]
		break;
 80144b4:	e008      	b.n	80144c8 <convert_volume_level+0x74>
	case VOLUME_OFF:
		value = 0xFF;
 80144b6:	23ff      	movs	r3, #255	; 0xff
 80144b8:	73fb      	strb	r3, [r7, #15]
		break;
 80144ba:	e005      	b.n	80144c8 <convert_volume_level+0x74>
	default:
		value = 0xFF;
 80144bc:	23ff      	movs	r3, #255	; 0xff
 80144be:	73fb      	strb	r3, [r7, #15]
		hal_cli_printf("volume level argument error");
 80144c0:	4804      	ldr	r0, [pc, #16]	; (80144d4 <convert_volume_level+0x80>)
 80144c2:	f7fb fbe1 	bl	800fc88 <hal_cli_printf>
		break;
 80144c6:	bf00      	nop
	}

	return value;
 80144c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3710      	adds	r7, #16
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}
 80144d2:	bf00      	nop
 80144d4:	0801580c 	.word	0x0801580c

080144d8 <mp3Thread>:



void mp3Thread(void* param) {
 80144d8:	b590      	push	{r4, r7, lr}
 80144da:	b085      	sub	sp, #20
 80144dc:	af02      	add	r7, sp, #8
 80144de:	6078      	str	r0, [r7, #4]
	MP3_Init();
 80144e0:	f000 f8de 	bl	80146a0 <MP3_Init>

	vs1053_volume_timer = xTimerCreate(
 80144e4:	4b4b      	ldr	r3, [pc, #300]	; (8014614 <mp3Thread+0x13c>)
 80144e6:	9300      	str	r3, [sp, #0]
 80144e8:	2300      	movs	r3, #0
 80144ea:	2201      	movs	r2, #1
 80144ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80144f0:	4849      	ldr	r0, [pc, #292]	; (8014618 <mp3Thread+0x140>)
 80144f2:	f7f7 faed 	bl	800bad0 <xTimerCreate>
 80144f6:	4603      	mov	r3, r0
 80144f8:	4a48      	ldr	r2, [pc, #288]	; (801461c <mp3Thread+0x144>)
 80144fa:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(VS1053_VOLUME_PERIOD),
							pdTRUE,
							(void*)0,
							volume_control_timercb);

	if(!vs1053_volume_timer) {
 80144fc:	4b47      	ldr	r3, [pc, #284]	; (801461c <mp3Thread+0x144>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d103      	bne.n	801450c <mp3Thread+0x34>
		hal_cli_printf("mp3 volume timer create failed");
 8014504:	4846      	ldr	r0, [pc, #280]	; (8014620 <mp3Thread+0x148>)
 8014506:	f7fb fbbf 	bl	800fc88 <hal_cli_printf>
		return;
 801450a:	e080      	b.n	801460e <mp3Thread+0x136>
	} else {
		if(xTimerStart(vs1053_volume_timer, 0) != pdPASS) {
 801450c:	4b43      	ldr	r3, [pc, #268]	; (801461c <mp3Thread+0x144>)
 801450e:	681c      	ldr	r4, [r3, #0]
 8014510:	f7f6 fc62 	bl	800add8 <xTaskGetTickCount>
 8014514:	4602      	mov	r2, r0
 8014516:	2300      	movs	r3, #0
 8014518:	9300      	str	r3, [sp, #0]
 801451a:	2300      	movs	r3, #0
 801451c:	2101      	movs	r1, #1
 801451e:	4620      	mov	r0, r4
 8014520:	f7f7 fb32 	bl	800bb88 <xTimerGenericCommand>
 8014524:	4603      	mov	r3, r0
 8014526:	2b01      	cmp	r3, #1
 8014528:	d003      	beq.n	8014532 <mp3Thread+0x5a>
			hal_cli_printf("mp3 volume timer start failed");
 801452a:	483e      	ldr	r0, [pc, #248]	; (8014624 <mp3Thread+0x14c>)
 801452c:	f7fb fbac 	bl	800fc88 <hal_cli_printf>
			return;
 8014530:	e06d      	b.n	801460e <mp3Thread+0x136>
		}
	}

	input_rcv.key = InputKeyNone;
 8014532:	4b3d      	ldr	r3, [pc, #244]	; (8014628 <mp3Thread+0x150>)
 8014534:	2206      	movs	r2, #6
 8014536:	701a      	strb	r2, [r3, #0]
	input_rcv.type = InputTypeNone;
 8014538:	4b3b      	ldr	r3, [pc, #236]	; (8014628 <mp3Thread+0x150>)
 801453a:	2200      	movs	r2, #0
 801453c:	705a      	strb	r2, [r3, #1]
	input_rcv.arg = 0;
 801453e:	4b3a      	ldr	r3, [pc, #232]	; (8014628 <mp3Thread+0x150>)
 8014540:	2200      	movs	r2, #0
 8014542:	605a      	str	r2, [r3, #4]

	hal_tim_add_int_callback(4, mp3_feed_notify_timcb, NULL);
 8014544:	2200      	movs	r2, #0
 8014546:	4939      	ldr	r1, [pc, #228]	; (801462c <mp3Thread+0x154>)
 8014548:	2004      	movs	r0, #4
 801454a:	f7fe ff89 	bl	8013460 <hal_tim_add_int_callback>
	hal_tim_start_it(4);
 801454e:	2004      	movs	r0, #4
 8014550:	f7fe ff06 	bl	8013360 <hal_tim_start_it>

	while(1) {
		xQueueReceive(mp3_queue, &input_rcv, portMAX_DELAY);
 8014554:	4b36      	ldr	r3, [pc, #216]	; (8014630 <mp3Thread+0x158>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801455c:	4932      	ldr	r1, [pc, #200]	; (8014628 <mp3Thread+0x150>)
 801455e:	4618      	mov	r0, r3
 8014560:	f7f5 fce4 	bl	8009f2c <xQueueReceive>

		switch(input_rcv.key) {
 8014564:	4b30      	ldr	r3, [pc, #192]	; (8014628 <mp3Thread+0x150>)
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	2b02      	cmp	r3, #2
 801456a:	d024      	beq.n	80145b6 <mp3Thread+0xde>
 801456c:	2b06      	cmp	r3, #6
 801456e:	d14a      	bne.n	8014606 <mp3Thread+0x12e>
		case InputKeyNone:
			while(!VS1053_IsBusy() && MP3_IsPlaying()) {
 8014570:	e001      	b.n	8014576 <mp3Thread+0x9e>
				MP3_Feeder();
 8014572:	f000 f94b 	bl	801480c <MP3_Feeder>
			while(!VS1053_IsBusy() && MP3_IsPlaying()) {
 8014576:	f7ec fc43 	bl	8000e00 <VS1053_IsBusy>
 801457a:	4603      	mov	r3, r0
 801457c:	f083 0301 	eor.w	r3, r3, #1
 8014580:	b2db      	uxtb	r3, r3
 8014582:	2b00      	cmp	r3, #0
 8014584:	d004      	beq.n	8014590 <mp3Thread+0xb8>
 8014586:	f000 f859 	bl	801463c <MP3_IsPlaying>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d1f0      	bne.n	8014572 <mp3Thread+0x9a>
			}
			if(MP3_IsPlaying() == false) {
 8014590:	f000 f854 	bl	801463c <MP3_IsPlaying>
 8014594:	4603      	mov	r3, r0
 8014596:	f083 0301 	eor.w	r3, r3, #1
 801459a:	b2db      	uxtb	r3, r3
 801459c:	2b00      	cmp	r3, #0
 801459e:	d034      	beq.n	801460a <mp3Thread+0x132>
				input_send.key = InputKeyNone;
 80145a0:	4b24      	ldr	r3, [pc, #144]	; (8014634 <mp3Thread+0x15c>)
 80145a2:	2206      	movs	r2, #6
 80145a4:	701a      	strb	r2, [r3, #0]
				xQueueSend(display_queue, &input_send, 0);
 80145a6:	4b24      	ldr	r3, [pc, #144]	; (8014638 <mp3Thread+0x160>)
 80145a8:	6818      	ldr	r0, [r3, #0]
 80145aa:	2300      	movs	r3, #0
 80145ac:	2200      	movs	r2, #0
 80145ae:	4921      	ldr	r1, [pc, #132]	; (8014634 <mp3Thread+0x15c>)
 80145b0:	f7f5 fad8 	bl	8009b64 <xQueueGenericSend>
			}
			break;
 80145b4:	e029      	b.n	801460a <mp3Thread+0x132>

		case InputKeyCenter:
			if(input_rcv.arg == InputArgSelMp3File) {
 80145b6:	4b1c      	ldr	r3, [pc, #112]	; (8014628 <mp3Thread+0x150>)
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d105      	bne.n	80145ca <mp3Thread+0xf2>
				hal_tim_start_it(4);
 80145be:	2004      	movs	r0, #4
 80145c0:	f7fe fece 	bl	8013360 <hal_tim_start_it>
				MP3_Play();
 80145c4:	f000 f88a 	bl	80146dc <MP3_Play>
 80145c8:	e012      	b.n	80145f0 <mp3Thread+0x118>
			} else {
				if(MP3_IsPlaying() == false) {
 80145ca:	f000 f837 	bl	801463c <MP3_IsPlaying>
 80145ce:	4603      	mov	r3, r0
 80145d0:	f083 0301 	eor.w	r3, r3, #1
 80145d4:	b2db      	uxtb	r3, r3
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d005      	beq.n	80145e6 <mp3Thread+0x10e>
					hal_tim_start_it(4);
 80145da:	2004      	movs	r0, #4
 80145dc:	f7fe fec0 	bl	8013360 <hal_tim_start_it>
					MP3_Resume();
 80145e0:	f000 f900 	bl	80147e4 <MP3_Resume>
 80145e4:	e004      	b.n	80145f0 <mp3Thread+0x118>
				} else {
					hal_tim_stop_it(4);
 80145e6:	2004      	movs	r0, #4
 80145e8:	f7fe fed0 	bl	801338c <hal_tim_stop_it>
					MP3_Pause();
 80145ec:	f000 f8ea 	bl	80147c4 <MP3_Pause>
				}
			}
			input_send.key = InputKeyNone;
 80145f0:	4b10      	ldr	r3, [pc, #64]	; (8014634 <mp3Thread+0x15c>)
 80145f2:	2206      	movs	r2, #6
 80145f4:	701a      	strb	r2, [r3, #0]
			xQueueSend(display_queue, &input_send, 0);
 80145f6:	4b10      	ldr	r3, [pc, #64]	; (8014638 <mp3Thread+0x160>)
 80145f8:	6818      	ldr	r0, [r3, #0]
 80145fa:	2300      	movs	r3, #0
 80145fc:	2200      	movs	r2, #0
 80145fe:	490d      	ldr	r1, [pc, #52]	; (8014634 <mp3Thread+0x15c>)
 8014600:	f7f5 fab0 	bl	8009b64 <xQueueGenericSend>
			break;
 8014604:	e002      	b.n	801460c <mp3Thread+0x134>
		default:
			break;
 8014606:	bf00      	nop
 8014608:	e7a4      	b.n	8014554 <mp3Thread+0x7c>
			break;
 801460a:	bf00      	nop
		xQueueReceive(mp3_queue, &input_rcv, portMAX_DELAY);
 801460c:	e7a2      	b.n	8014554 <mp3Thread+0x7c>
		}
	}
}
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	bd90      	pop	{r4, r7, pc}
 8014614:	080143f9 	.word	0x080143f9
 8014618:	08015828 	.word	0x08015828
 801461c:	20006ecc 	.word	0x20006ecc
 8014620:	08015834 	.word	0x08015834
 8014624:	08015854 	.word	0x08015854
 8014628:	20006ed4 	.word	0x20006ed4
 801462c:	08014399 	.word	0x08014399
 8014630:	20006ebc 	.word	0x20006ebc
 8014634:	20006edc 	.word	0x20006edc
 8014638:	20006ec0 	.word	0x20006ec0

0801463c <MP3_IsPlaying>:
bool isFileOpen = false;

static FATFS fs;
static FIL mp3File;

inline bool MP3_IsPlaying(void) {
 801463c:	b480      	push	{r7}
 801463e:	af00      	add	r7, sp, #0
	return isPlaying;
 8014640:	4b03      	ldr	r3, [pc, #12]	; (8014650 <MP3_IsPlaying+0x14>)
 8014642:	781b      	ldrb	r3, [r3, #0]
}
 8014644:	4618      	mov	r0, r3
 8014646:	46bd      	mov	sp, r7
 8014648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop
 8014650:	20006f0e 	.word	0x20006f0e

08014654 <MP3_SetFile>:

inline bool Mp3_IsFileOpen(void) {
	return isFileOpen;
}

bool MP3_SetFile(const char *filename) {
 8014654:	b580      	push	{r7, lr}
 8014656:	b08a      	sub	sp, #40	; 0x28
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
	char buffer[25];
	memset(buffer, '\0', 25);
 801465c:	f107 030c 	add.w	r3, r7, #12
 8014660:	2219      	movs	r2, #25
 8014662:	2100      	movs	r1, #0
 8014664:	4618      	mov	r0, r3
 8014666:	f000 f9a5 	bl	80149b4 <memset>
	f_close(&mp3File);
 801466a:	480b      	ldr	r0, [pc, #44]	; (8014698 <MP3_SetFile+0x44>)
 801466c:	f7f4 f853 	bl	8008716 <f_close>
	sprintf(buffer, "/mp3/%s", filename);
 8014670:	f107 030c 	add.w	r3, r7, #12
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	4909      	ldr	r1, [pc, #36]	; (801469c <MP3_SetFile+0x48>)
 8014678:	4618      	mov	r0, r3
 801467a:	f000 f9d7 	bl	8014a2c <siprintf>
	f_open(&mp3File, buffer, FA_READ);
 801467e:	f107 030c 	add.w	r3, r7, #12
 8014682:	2201      	movs	r2, #1
 8014684:	4619      	mov	r1, r3
 8014686:	4804      	ldr	r0, [pc, #16]	; (8014698 <MP3_SetFile+0x44>)
 8014688:	f7f3 fba0 	bl	8007dcc <f_open>

	return true;
 801468c:	2301      	movs	r3, #1
}
 801468e:	4618      	mov	r0, r3
 8014690:	3728      	adds	r7, #40	; 0x28
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20007f48 	.word	0x20007f48
 801469c:	08015874 	.word	0x08015874

080146a0 <MP3_Init>:

/* Initialize VS1053 & Open a file */
bool MP3_Init()
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	af00      	add	r7, sp, #0
	/* Initialize VS1053 */
    if(!VS1053_Init()) return false;
 80146a4:	f7ec fa10 	bl	8000ac8 <VS1053_Init>
 80146a8:	4603      	mov	r3, r0
 80146aa:	f083 0301 	eor.w	r3, r3, #1
 80146ae:	b2db      	uxtb	r3, r3
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d001      	beq.n	80146b8 <MP3_Init+0x18>
 80146b4:	2300      	movs	r3, #0
 80146b6:	e00a      	b.n	80146ce <MP3_Init+0x2e>

    /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK) return false;
 80146b8:	2200      	movs	r2, #0
 80146ba:	4906      	ldr	r1, [pc, #24]	; (80146d4 <MP3_Init+0x34>)
 80146bc:	4806      	ldr	r0, [pc, #24]	; (80146d8 <MP3_Init+0x38>)
 80146be:	f7f3 fb3f 	bl	8007d40 <f_mount>
 80146c2:	4603      	mov	r3, r0
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d001      	beq.n	80146cc <MP3_Init+0x2c>
 80146c8:	2300      	movs	r3, #0
 80146ca:	e000      	b.n	80146ce <MP3_Init+0x2e>

    return true;
 80146cc:	2301      	movs	r3, #1
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	0801587c 	.word	0x0801587c
 80146d8:	20006f10 	.word	0x20006f10

080146dc <MP3_Play>:

bool MP3_Play(void)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	af00      	add	r7, sp, #0
	if(isPlaying) MP3_Stop();
 80146e0:	4b1f      	ldr	r3, [pc, #124]	; (8014760 <MP3_Play+0x84>)
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d001      	beq.n	80146ec <MP3_Play+0x10>
 80146e8:	f000 f842 	bl	8014770 <MP3_Stop>

	if(!VS1053_SetMode(0x4800)) return false;	/* SM LINE1 | SM SDINEW */
 80146ec:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80146f0:	f7ec fad5 	bl	8000c9e <VS1053_SetMode>
 80146f4:	4603      	mov	r3, r0
 80146f6:	f083 0301 	eor.w	r3, r3, #1
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d001      	beq.n	8014704 <MP3_Play+0x28>
 8014700:	2300      	movs	r3, #0
 8014702:	e02b      	b.n	801475c <MP3_Play+0x80>
	if(!VS1053_AutoResync()) return false;		/* AutoResync */
 8014704:	f7ec faf9 	bl	8000cfa <VS1053_AutoResync>
 8014708:	4603      	mov	r3, r0
 801470a:	f083 0301 	eor.w	r3, r3, #1
 801470e:	b2db      	uxtb	r3, r3
 8014710:	2b00      	cmp	r3, #0
 8014712:	d001      	beq.n	8014718 <MP3_Play+0x3c>
 8014714:	2300      	movs	r3, #0
 8014716:	e021      	b.n	801475c <MP3_Play+0x80>
	if(!VS1053_SetDecodeTime(0)) return false;	/* Set decode time */
 8014718:	2000      	movs	r0, #0
 801471a:	f7ec fb0e 	bl	8000d3a <VS1053_SetDecodeTime>
 801471e:	4603      	mov	r3, r0
 8014720:	f083 0301 	eor.w	r3, r3, #1
 8014724:	b2db      	uxtb	r3, r3
 8014726:	2b00      	cmp	r3, #0
 8014728:	d001      	beq.n	801472e <MP3_Play+0x52>
 801472a:	2300      	movs	r3, #0
 801472c:	e016      	b.n	801475c <MP3_Play+0x80>
	if(!VS1053_SetVolume( 0x0F, 0x0F )) return false;	/* Small number is louder */
 801472e:	210f      	movs	r1, #15
 8014730:	200f      	movs	r0, #15
 8014732:	f7ec fa91 	bl	8000c58 <VS1053_SetVolume>
 8014736:	4603      	mov	r3, r0
 8014738:	f083 0301 	eor.w	r3, r3, #1
 801473c:	b2db      	uxtb	r3, r3
 801473e:	2b00      	cmp	r3, #0
 8014740:	d001      	beq.n	8014746 <MP3_Play+0x6a>
 8014742:	2300      	movs	r3, #0
 8014744:	e00a      	b.n	801475c <MP3_Play+0x80>

	mp3FileSize = f_size(&mp3File);
 8014746:	4b07      	ldr	r3, [pc, #28]	; (8014764 <MP3_Play+0x88>)
 8014748:	68db      	ldr	r3, [r3, #12]
 801474a:	4a07      	ldr	r2, [pc, #28]	; (8014768 <MP3_Play+0x8c>)
 801474c:	6013      	str	r3, [r2, #0]

	/* Set flags */
	isFileOpen = true;
 801474e:	4b07      	ldr	r3, [pc, #28]	; (801476c <MP3_Play+0x90>)
 8014750:	2201      	movs	r2, #1
 8014752:	701a      	strb	r2, [r3, #0]
	isPlaying = true;
 8014754:	4b02      	ldr	r3, [pc, #8]	; (8014760 <MP3_Play+0x84>)
 8014756:	2201      	movs	r2, #1
 8014758:	701a      	strb	r2, [r3, #0]

    return true;
 801475a:	2301      	movs	r3, #1
}
 801475c:	4618      	mov	r0, r3
 801475e:	bd80      	pop	{r7, pc}
 8014760:	20006f0e 	.word	0x20006f0e
 8014764:	20007f48 	.word	0x20007f48
 8014768:	20006f04 	.word	0x20006f04
 801476c:	20006f0f 	.word	0x20006f0f

08014770 <MP3_Stop>:

void MP3_Stop(void)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
	/* Refer to page 49 of VS1053 datasheet */

	uint16_t mode;
	VS1053_SendEndFill(2052);	/* send endfill bytes */
 8014776:	f640 0004 	movw	r0, #2052	; 0x804
 801477a:	f7ec fb05 	bl	8000d88 <VS1053_SendEndFill>
	VS1053_SetMode(0x4808);		/* SM LINE1 | SM SDINEW | SM CANCEL */
 801477e:	f644 0008 	movw	r0, #18440	; 0x4808
 8014782:	f7ec fa8c 	bl	8000c9e <VS1053_SetMode>
	VS1053_SendEndFill(32);		/* send endfill bytes */
 8014786:	2020      	movs	r0, #32
 8014788:	f7ec fafe 	bl	8000d88 <VS1053_SendEndFill>
	LL_mDelay(100);
 801478c:	2064      	movs	r0, #100	; 0x64
 801478e:	f7f0 fd69 	bl	8005264 <LL_mDelay>
	VS1053_GetMode(&mode);		/* get mode value */
 8014792:	1dbb      	adds	r3, r7, #6
 8014794:	4618      	mov	r0, r3
 8014796:	f7ec fa9a 	bl	8000cce <VS1053_GetMode>
	if((mode & 0x08) != 0x0)	/* if SM CANCEL is not clear, soft reset */
 801479a:	88fb      	ldrh	r3, [r7, #6]
 801479c:	f003 0308 	and.w	r3, r3, #8
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d001      	beq.n	80147a8 <MP3_Stop+0x38>
	{
		VS1053_SoftReset();
 80147a4:	f7ec fa42 	bl	8000c2c <VS1053_SoftReset>
	}

	isPlaying = false;			/* Stop flag */
 80147a8:	4b04      	ldr	r3, [pc, #16]	; (80147bc <MP3_Stop+0x4c>)
 80147aa:	2200      	movs	r2, #0
 80147ac:	701a      	strb	r2, [r3, #0]
	isFileOpen = false;			/* Close flag */
 80147ae:	4b04      	ldr	r3, [pc, #16]	; (80147c0 <MP3_Stop+0x50>)
 80147b0:	2200      	movs	r2, #0
 80147b2:	701a      	strb	r2, [r3, #0]
}
 80147b4:	bf00      	nop
 80147b6:	3708      	adds	r7, #8
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	20006f0e 	.word	0x20006f0e
 80147c0:	20006f0f 	.word	0x20006f0f

080147c4 <MP3_Pause>:

void MP3_Pause(void)
{
 80147c4:	b480      	push	{r7}
 80147c6:	af00      	add	r7, sp, #0
	if(isPlaying) isPlaying = false;
 80147c8:	4b05      	ldr	r3, [pc, #20]	; (80147e0 <MP3_Pause+0x1c>)
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d002      	beq.n	80147d6 <MP3_Pause+0x12>
 80147d0:	4b03      	ldr	r3, [pc, #12]	; (80147e0 <MP3_Pause+0x1c>)
 80147d2:	2200      	movs	r2, #0
 80147d4:	701a      	strb	r2, [r3, #0]
}
 80147d6:	bf00      	nop
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr
 80147e0:	20006f0e 	.word	0x20006f0e

080147e4 <MP3_Resume>:

void MP3_Resume(void)
{
 80147e4:	b480      	push	{r7}
 80147e6:	af00      	add	r7, sp, #0
	if(!isPlaying) isPlaying = true;
 80147e8:	4b07      	ldr	r3, [pc, #28]	; (8014808 <MP3_Resume+0x24>)
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	f083 0301 	eor.w	r3, r3, #1
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d002      	beq.n	80147fc <MP3_Resume+0x18>
 80147f6:	4b04      	ldr	r3, [pc, #16]	; (8014808 <MP3_Resume+0x24>)
 80147f8:	2201      	movs	r2, #1
 80147fa:	701a      	strb	r2, [r3, #0]
}
 80147fc:	bf00      	nop
 80147fe:	46bd      	mov	sp, r7
 8014800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop
 8014808:	20006f0e 	.word	0x20006f0e

0801480c <MP3_Feeder>:

/* Send mp3 buffer to VS1053 */
void MP3_Feeder(void)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	af00      	add	r7, sp, #0
	if(!isPlaying || !isFileOpen) return;
 8014810:	4b26      	ldr	r3, [pc, #152]	; (80148ac <MP3_Feeder+0xa0>)
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	f083 0301 	eor.w	r3, r3, #1
 8014818:	b2db      	uxtb	r3, r3
 801481a:	2b00      	cmp	r3, #0
 801481c:	d144      	bne.n	80148a8 <MP3_Feeder+0x9c>
 801481e:	4b24      	ldr	r3, [pc, #144]	; (80148b0 <MP3_Feeder+0xa4>)
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	f083 0301 	eor.w	r3, r3, #1
 8014826:	b2db      	uxtb	r3, r3
 8014828:	2b00      	cmp	r3, #0
 801482a:	d13d      	bne.n	80148a8 <MP3_Feeder+0x9c>

	if(mp3FileSize > BUFFER_SIZE)
 801482c:	4b21      	ldr	r3, [pc, #132]	; (80148b4 <MP3_Feeder+0xa8>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	2b20      	cmp	r3, #32
 8014832:	d90e      	bls.n	8014852 <MP3_Feeder+0x46>
	{
		/* Fill the buffer */
		f_read(&mp3File, mp3Buffer, BUFFER_SIZE, (void*)&readBytes);
 8014834:	4b20      	ldr	r3, [pc, #128]	; (80148b8 <MP3_Feeder+0xac>)
 8014836:	2220      	movs	r2, #32
 8014838:	4920      	ldr	r1, [pc, #128]	; (80148bc <MP3_Feeder+0xb0>)
 801483a:	4821      	ldr	r0, [pc, #132]	; (80148c0 <MP3_Feeder+0xb4>)
 801483c:	f7f3 fd8e 	bl	800835c <f_read>

		/* Tx buffer */
		VS1053_SdiWrite32( mp3Buffer );
 8014840:	481e      	ldr	r0, [pc, #120]	; (80148bc <MP3_Feeder+0xb0>)
 8014842:	f7ec fbd7 	bl	8000ff4 <VS1053_SdiWrite32>

		/* bytes to send */
		mp3FileSize -= BUFFER_SIZE;
 8014846:	4b1b      	ldr	r3, [pc, #108]	; (80148b4 <MP3_Feeder+0xa8>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	3b20      	subs	r3, #32
 801484c:	4a19      	ldr	r2, [pc, #100]	; (80148b4 <MP3_Feeder+0xa8>)
 801484e:	6013      	str	r3, [r2, #0]
 8014850:	e02b      	b.n	80148aa <MP3_Feeder+0x9e>
	}
	else
	{
		/* Read left bytes */
		f_read(&mp3File, mp3Buffer, mp3FileSize, (void*)&readBytes);
 8014852:	4b18      	ldr	r3, [pc, #96]	; (80148b4 <MP3_Feeder+0xa8>)
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	4b18      	ldr	r3, [pc, #96]	; (80148b8 <MP3_Feeder+0xac>)
 8014858:	4918      	ldr	r1, [pc, #96]	; (80148bc <MP3_Feeder+0xb0>)
 801485a:	4819      	ldr	r0, [pc, #100]	; (80148c0 <MP3_Feeder+0xb4>)
 801485c:	f7f3 fd7e 	bl	800835c <f_read>

		/* Tx buffer */
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8014860:	4b18      	ldr	r3, [pc, #96]	; (80148c4 <MP3_Feeder+0xb8>)
 8014862:	2200      	movs	r2, #0
 8014864:	801a      	strh	r2, [r3, #0]
 8014866:	e015      	b.n	8014894 <MP3_Feeder+0x88>
		{
			while(!VS1053_SdiWrite(*(mp3Buffer + cnt)));
 8014868:	bf00      	nop
 801486a:	4b16      	ldr	r3, [pc, #88]	; (80148c4 <MP3_Feeder+0xb8>)
 801486c:	881b      	ldrh	r3, [r3, #0]
 801486e:	461a      	mov	r2, r3
 8014870:	4b12      	ldr	r3, [pc, #72]	; (80148bc <MP3_Feeder+0xb0>)
 8014872:	4413      	add	r3, r2
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	4618      	mov	r0, r3
 8014878:	f7ec fb8e 	bl	8000f98 <VS1053_SdiWrite>
 801487c:	4603      	mov	r3, r0
 801487e:	f083 0301 	eor.w	r3, r3, #1
 8014882:	b2db      	uxtb	r3, r3
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1f0      	bne.n	801486a <MP3_Feeder+0x5e>
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8014888:	4b0e      	ldr	r3, [pc, #56]	; (80148c4 <MP3_Feeder+0xb8>)
 801488a:	881b      	ldrh	r3, [r3, #0]
 801488c:	3301      	adds	r3, #1
 801488e:	b29a      	uxth	r2, r3
 8014890:	4b0c      	ldr	r3, [pc, #48]	; (80148c4 <MP3_Feeder+0xb8>)
 8014892:	801a      	strh	r2, [r3, #0]
 8014894:	4b0b      	ldr	r3, [pc, #44]	; (80148c4 <MP3_Feeder+0xb8>)
 8014896:	881b      	ldrh	r3, [r3, #0]
 8014898:	461a      	mov	r2, r3
 801489a:	4b06      	ldr	r3, [pc, #24]	; (80148b4 <MP3_Feeder+0xa8>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d3e2      	bcc.n	8014868 <MP3_Feeder+0x5c>
		}

		/* Stop when played the whole file */
		MP3_Stop();
 80148a2:	f7ff ff65 	bl	8014770 <MP3_Stop>
 80148a6:	e000      	b.n	80148aa <MP3_Feeder+0x9e>
	if(!isPlaying || !isFileOpen) return;
 80148a8:	bf00      	nop
	}
}
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20006f0e 	.word	0x20006f0e
 80148b0:	20006f0f 	.word	0x20006f0f
 80148b4:	20006f04 	.word	0x20006f04
 80148b8:	20006f08 	.word	0x20006f08
 80148bc:	20006ee4 	.word	0x20006ee4
 80148c0:	20007f48 	.word	0x20007f48
 80148c4:	20006f0c 	.word	0x20006f0c

080148c8 <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80148cc:	b672      	cpsid	i
}
 80148ce:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 80148d0:	4801      	ldr	r0, [pc, #4]	; (80148d8 <ErrorHandler+0x10>)
 80148d2:	f7fb f9d9 	bl	800fc88 <hal_cli_printf>
  while (1)
 80148d6:	e7fe      	b.n	80148d6 <ErrorHandler+0xe>
 80148d8:	08015880 	.word	0x08015880

080148dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80148dc:	480d      	ldr	r0, [pc, #52]	; (8014914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80148de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80148e0:	f7fe fc1c 	bl	801311c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80148e4:	480c      	ldr	r0, [pc, #48]	; (8014918 <LoopForever+0x6>)
  ldr r1, =_edata
 80148e6:	490d      	ldr	r1, [pc, #52]	; (801491c <LoopForever+0xa>)
  ldr r2, =_sidata
 80148e8:	4a0d      	ldr	r2, [pc, #52]	; (8014920 <LoopForever+0xe>)
  movs r3, #0
 80148ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80148ec:	e002      	b.n	80148f4 <LoopCopyDataInit>

080148ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80148ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80148f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80148f2:	3304      	adds	r3, #4

080148f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80148f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80148f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80148f8:	d3f9      	bcc.n	80148ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80148fa:	4a0a      	ldr	r2, [pc, #40]	; (8014924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80148fc:	4c0a      	ldr	r4, [pc, #40]	; (8014928 <LoopForever+0x16>)
  movs r3, #0
 80148fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014900:	e001      	b.n	8014906 <LoopFillZerobss>

08014902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014904:	3204      	adds	r2, #4

08014906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014908:	d3fb      	bcc.n	8014902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801490a:	f000 f811 	bl	8014930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801490e:	f7fd fa21 	bl	8011d54 <main>

08014912 <LoopForever>:

LoopForever:
    b LoopForever
 8014912:	e7fe      	b.n	8014912 <LoopForever>
  ldr   r0, =_estack
 8014914:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8014918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801491c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8014920:	08016650 	.word	0x08016650
  ldr r2, =_sbss
 8014924:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8014928:	20008f8c 	.word	0x20008f8c

0801492c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801492c:	e7fe      	b.n	801492c <ADC_IRQHandler>
	...

08014930 <__libc_init_array>:
 8014930:	b570      	push	{r4, r5, r6, lr}
 8014932:	4d0d      	ldr	r5, [pc, #52]	; (8014968 <__libc_init_array+0x38>)
 8014934:	4c0d      	ldr	r4, [pc, #52]	; (801496c <__libc_init_array+0x3c>)
 8014936:	1b64      	subs	r4, r4, r5
 8014938:	10a4      	asrs	r4, r4, #2
 801493a:	2600      	movs	r6, #0
 801493c:	42a6      	cmp	r6, r4
 801493e:	d109      	bne.n	8014954 <__libc_init_array+0x24>
 8014940:	4d0b      	ldr	r5, [pc, #44]	; (8014970 <__libc_init_array+0x40>)
 8014942:	4c0c      	ldr	r4, [pc, #48]	; (8014974 <__libc_init_array+0x44>)
 8014944:	f000 fd00 	bl	8015348 <_init>
 8014948:	1b64      	subs	r4, r4, r5
 801494a:	10a4      	asrs	r4, r4, #2
 801494c:	2600      	movs	r6, #0
 801494e:	42a6      	cmp	r6, r4
 8014950:	d105      	bne.n	801495e <__libc_init_array+0x2e>
 8014952:	bd70      	pop	{r4, r5, r6, pc}
 8014954:	f855 3b04 	ldr.w	r3, [r5], #4
 8014958:	4798      	blx	r3
 801495a:	3601      	adds	r6, #1
 801495c:	e7ee      	b.n	801493c <__libc_init_array+0xc>
 801495e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014962:	4798      	blx	r3
 8014964:	3601      	adds	r6, #1
 8014966:	e7f2      	b.n	801494e <__libc_init_array+0x1e>
 8014968:	08016648 	.word	0x08016648
 801496c:	08016648 	.word	0x08016648
 8014970:	08016648 	.word	0x08016648
 8014974:	0801664c 	.word	0x0801664c

08014978 <memcmp>:
 8014978:	b510      	push	{r4, lr}
 801497a:	3901      	subs	r1, #1
 801497c:	4402      	add	r2, r0
 801497e:	4290      	cmp	r0, r2
 8014980:	d101      	bne.n	8014986 <memcmp+0xe>
 8014982:	2000      	movs	r0, #0
 8014984:	e005      	b.n	8014992 <memcmp+0x1a>
 8014986:	7803      	ldrb	r3, [r0, #0]
 8014988:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801498c:	42a3      	cmp	r3, r4
 801498e:	d001      	beq.n	8014994 <memcmp+0x1c>
 8014990:	1b18      	subs	r0, r3, r4
 8014992:	bd10      	pop	{r4, pc}
 8014994:	3001      	adds	r0, #1
 8014996:	e7f2      	b.n	801497e <memcmp+0x6>

08014998 <memcpy>:
 8014998:	440a      	add	r2, r1
 801499a:	4291      	cmp	r1, r2
 801499c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80149a0:	d100      	bne.n	80149a4 <memcpy+0xc>
 80149a2:	4770      	bx	lr
 80149a4:	b510      	push	{r4, lr}
 80149a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149ae:	4291      	cmp	r1, r2
 80149b0:	d1f9      	bne.n	80149a6 <memcpy+0xe>
 80149b2:	bd10      	pop	{r4, pc}

080149b4 <memset>:
 80149b4:	4402      	add	r2, r0
 80149b6:	4603      	mov	r3, r0
 80149b8:	4293      	cmp	r3, r2
 80149ba:	d100      	bne.n	80149be <memset+0xa>
 80149bc:	4770      	bx	lr
 80149be:	f803 1b01 	strb.w	r1, [r3], #1
 80149c2:	e7f9      	b.n	80149b8 <memset+0x4>

080149c4 <sniprintf>:
 80149c4:	b40c      	push	{r2, r3}
 80149c6:	b530      	push	{r4, r5, lr}
 80149c8:	4b17      	ldr	r3, [pc, #92]	; (8014a28 <sniprintf+0x64>)
 80149ca:	1e0c      	subs	r4, r1, #0
 80149cc:	681d      	ldr	r5, [r3, #0]
 80149ce:	b09d      	sub	sp, #116	; 0x74
 80149d0:	da08      	bge.n	80149e4 <sniprintf+0x20>
 80149d2:	238b      	movs	r3, #139	; 0x8b
 80149d4:	602b      	str	r3, [r5, #0]
 80149d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149da:	b01d      	add	sp, #116	; 0x74
 80149dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149e0:	b002      	add	sp, #8
 80149e2:	4770      	bx	lr
 80149e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80149e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80149ec:	bf14      	ite	ne
 80149ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80149f2:	4623      	moveq	r3, r4
 80149f4:	9304      	str	r3, [sp, #16]
 80149f6:	9307      	str	r3, [sp, #28]
 80149f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149fc:	9002      	str	r0, [sp, #8]
 80149fe:	9006      	str	r0, [sp, #24]
 8014a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014a06:	ab21      	add	r3, sp, #132	; 0x84
 8014a08:	a902      	add	r1, sp, #8
 8014a0a:	4628      	mov	r0, r5
 8014a0c:	9301      	str	r3, [sp, #4]
 8014a0e:	f000 f93f 	bl	8014c90 <_svfiprintf_r>
 8014a12:	1c43      	adds	r3, r0, #1
 8014a14:	bfbc      	itt	lt
 8014a16:	238b      	movlt	r3, #139	; 0x8b
 8014a18:	602b      	strlt	r3, [r5, #0]
 8014a1a:	2c00      	cmp	r4, #0
 8014a1c:	d0dd      	beq.n	80149da <sniprintf+0x16>
 8014a1e:	9b02      	ldr	r3, [sp, #8]
 8014a20:	2200      	movs	r2, #0
 8014a22:	701a      	strb	r2, [r3, #0]
 8014a24:	e7d9      	b.n	80149da <sniprintf+0x16>
 8014a26:	bf00      	nop
 8014a28:	20000018 	.word	0x20000018

08014a2c <siprintf>:
 8014a2c:	b40e      	push	{r1, r2, r3}
 8014a2e:	b500      	push	{lr}
 8014a30:	b09c      	sub	sp, #112	; 0x70
 8014a32:	ab1d      	add	r3, sp, #116	; 0x74
 8014a34:	9002      	str	r0, [sp, #8]
 8014a36:	9006      	str	r0, [sp, #24]
 8014a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a3c:	4809      	ldr	r0, [pc, #36]	; (8014a64 <siprintf+0x38>)
 8014a3e:	9107      	str	r1, [sp, #28]
 8014a40:	9104      	str	r1, [sp, #16]
 8014a42:	4909      	ldr	r1, [pc, #36]	; (8014a68 <siprintf+0x3c>)
 8014a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a48:	9105      	str	r1, [sp, #20]
 8014a4a:	6800      	ldr	r0, [r0, #0]
 8014a4c:	9301      	str	r3, [sp, #4]
 8014a4e:	a902      	add	r1, sp, #8
 8014a50:	f000 f91e 	bl	8014c90 <_svfiprintf_r>
 8014a54:	9b02      	ldr	r3, [sp, #8]
 8014a56:	2200      	movs	r2, #0
 8014a58:	701a      	strb	r2, [r3, #0]
 8014a5a:	b01c      	add	sp, #112	; 0x70
 8014a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a60:	b003      	add	sp, #12
 8014a62:	4770      	bx	lr
 8014a64:	20000018 	.word	0x20000018
 8014a68:	ffff0208 	.word	0xffff0208

08014a6c <_vsiprintf_r>:
 8014a6c:	b500      	push	{lr}
 8014a6e:	b09b      	sub	sp, #108	; 0x6c
 8014a70:	9100      	str	r1, [sp, #0]
 8014a72:	9104      	str	r1, [sp, #16]
 8014a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a78:	9105      	str	r1, [sp, #20]
 8014a7a:	9102      	str	r1, [sp, #8]
 8014a7c:	4905      	ldr	r1, [pc, #20]	; (8014a94 <_vsiprintf_r+0x28>)
 8014a7e:	9103      	str	r1, [sp, #12]
 8014a80:	4669      	mov	r1, sp
 8014a82:	f000 f905 	bl	8014c90 <_svfiprintf_r>
 8014a86:	9b00      	ldr	r3, [sp, #0]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	701a      	strb	r2, [r3, #0]
 8014a8c:	b01b      	add	sp, #108	; 0x6c
 8014a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a92:	bf00      	nop
 8014a94:	ffff0208 	.word	0xffff0208

08014a98 <vsiprintf>:
 8014a98:	4613      	mov	r3, r2
 8014a9a:	460a      	mov	r2, r1
 8014a9c:	4601      	mov	r1, r0
 8014a9e:	4802      	ldr	r0, [pc, #8]	; (8014aa8 <vsiprintf+0x10>)
 8014aa0:	6800      	ldr	r0, [r0, #0]
 8014aa2:	f7ff bfe3 	b.w	8014a6c <_vsiprintf_r>
 8014aa6:	bf00      	nop
 8014aa8:	20000018 	.word	0x20000018

08014aac <__retarget_lock_acquire_recursive>:
 8014aac:	4770      	bx	lr

08014aae <__retarget_lock_release_recursive>:
 8014aae:	4770      	bx	lr

08014ab0 <sbrk_aligned>:
 8014ab0:	b570      	push	{r4, r5, r6, lr}
 8014ab2:	4e0e      	ldr	r6, [pc, #56]	; (8014aec <sbrk_aligned+0x3c>)
 8014ab4:	460c      	mov	r4, r1
 8014ab6:	6831      	ldr	r1, [r6, #0]
 8014ab8:	4605      	mov	r5, r0
 8014aba:	b911      	cbnz	r1, 8014ac2 <sbrk_aligned+0x12>
 8014abc:	f000 fb7c 	bl	80151b8 <_sbrk_r>
 8014ac0:	6030      	str	r0, [r6, #0]
 8014ac2:	4621      	mov	r1, r4
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	f000 fb77 	bl	80151b8 <_sbrk_r>
 8014aca:	1c43      	adds	r3, r0, #1
 8014acc:	d00a      	beq.n	8014ae4 <sbrk_aligned+0x34>
 8014ace:	1cc4      	adds	r4, r0, #3
 8014ad0:	f024 0403 	bic.w	r4, r4, #3
 8014ad4:	42a0      	cmp	r0, r4
 8014ad6:	d007      	beq.n	8014ae8 <sbrk_aligned+0x38>
 8014ad8:	1a21      	subs	r1, r4, r0
 8014ada:	4628      	mov	r0, r5
 8014adc:	f000 fb6c 	bl	80151b8 <_sbrk_r>
 8014ae0:	3001      	adds	r0, #1
 8014ae2:	d101      	bne.n	8014ae8 <sbrk_aligned+0x38>
 8014ae4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014ae8:	4620      	mov	r0, r4
 8014aea:	bd70      	pop	{r4, r5, r6, pc}
 8014aec:	20008f80 	.word	0x20008f80

08014af0 <_malloc_r>:
 8014af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014af4:	1ccd      	adds	r5, r1, #3
 8014af6:	f025 0503 	bic.w	r5, r5, #3
 8014afa:	3508      	adds	r5, #8
 8014afc:	2d0c      	cmp	r5, #12
 8014afe:	bf38      	it	cc
 8014b00:	250c      	movcc	r5, #12
 8014b02:	2d00      	cmp	r5, #0
 8014b04:	4607      	mov	r7, r0
 8014b06:	db01      	blt.n	8014b0c <_malloc_r+0x1c>
 8014b08:	42a9      	cmp	r1, r5
 8014b0a:	d905      	bls.n	8014b18 <_malloc_r+0x28>
 8014b0c:	230c      	movs	r3, #12
 8014b0e:	603b      	str	r3, [r7, #0]
 8014b10:	2600      	movs	r6, #0
 8014b12:	4630      	mov	r0, r6
 8014b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b18:	4e2e      	ldr	r6, [pc, #184]	; (8014bd4 <_malloc_r+0xe4>)
 8014b1a:	f000 fb77 	bl	801520c <__malloc_lock>
 8014b1e:	6833      	ldr	r3, [r6, #0]
 8014b20:	461c      	mov	r4, r3
 8014b22:	bb34      	cbnz	r4, 8014b72 <_malloc_r+0x82>
 8014b24:	4629      	mov	r1, r5
 8014b26:	4638      	mov	r0, r7
 8014b28:	f7ff ffc2 	bl	8014ab0 <sbrk_aligned>
 8014b2c:	1c43      	adds	r3, r0, #1
 8014b2e:	4604      	mov	r4, r0
 8014b30:	d14d      	bne.n	8014bce <_malloc_r+0xde>
 8014b32:	6834      	ldr	r4, [r6, #0]
 8014b34:	4626      	mov	r6, r4
 8014b36:	2e00      	cmp	r6, #0
 8014b38:	d140      	bne.n	8014bbc <_malloc_r+0xcc>
 8014b3a:	6823      	ldr	r3, [r4, #0]
 8014b3c:	4631      	mov	r1, r6
 8014b3e:	4638      	mov	r0, r7
 8014b40:	eb04 0803 	add.w	r8, r4, r3
 8014b44:	f000 fb38 	bl	80151b8 <_sbrk_r>
 8014b48:	4580      	cmp	r8, r0
 8014b4a:	d13a      	bne.n	8014bc2 <_malloc_r+0xd2>
 8014b4c:	6821      	ldr	r1, [r4, #0]
 8014b4e:	3503      	adds	r5, #3
 8014b50:	1a6d      	subs	r5, r5, r1
 8014b52:	f025 0503 	bic.w	r5, r5, #3
 8014b56:	3508      	adds	r5, #8
 8014b58:	2d0c      	cmp	r5, #12
 8014b5a:	bf38      	it	cc
 8014b5c:	250c      	movcc	r5, #12
 8014b5e:	4629      	mov	r1, r5
 8014b60:	4638      	mov	r0, r7
 8014b62:	f7ff ffa5 	bl	8014ab0 <sbrk_aligned>
 8014b66:	3001      	adds	r0, #1
 8014b68:	d02b      	beq.n	8014bc2 <_malloc_r+0xd2>
 8014b6a:	6823      	ldr	r3, [r4, #0]
 8014b6c:	442b      	add	r3, r5
 8014b6e:	6023      	str	r3, [r4, #0]
 8014b70:	e00e      	b.n	8014b90 <_malloc_r+0xa0>
 8014b72:	6822      	ldr	r2, [r4, #0]
 8014b74:	1b52      	subs	r2, r2, r5
 8014b76:	d41e      	bmi.n	8014bb6 <_malloc_r+0xc6>
 8014b78:	2a0b      	cmp	r2, #11
 8014b7a:	d916      	bls.n	8014baa <_malloc_r+0xba>
 8014b7c:	1961      	adds	r1, r4, r5
 8014b7e:	42a3      	cmp	r3, r4
 8014b80:	6025      	str	r5, [r4, #0]
 8014b82:	bf18      	it	ne
 8014b84:	6059      	strne	r1, [r3, #4]
 8014b86:	6863      	ldr	r3, [r4, #4]
 8014b88:	bf08      	it	eq
 8014b8a:	6031      	streq	r1, [r6, #0]
 8014b8c:	5162      	str	r2, [r4, r5]
 8014b8e:	604b      	str	r3, [r1, #4]
 8014b90:	4638      	mov	r0, r7
 8014b92:	f104 060b 	add.w	r6, r4, #11
 8014b96:	f000 fb3f 	bl	8015218 <__malloc_unlock>
 8014b9a:	f026 0607 	bic.w	r6, r6, #7
 8014b9e:	1d23      	adds	r3, r4, #4
 8014ba0:	1af2      	subs	r2, r6, r3
 8014ba2:	d0b6      	beq.n	8014b12 <_malloc_r+0x22>
 8014ba4:	1b9b      	subs	r3, r3, r6
 8014ba6:	50a3      	str	r3, [r4, r2]
 8014ba8:	e7b3      	b.n	8014b12 <_malloc_r+0x22>
 8014baa:	6862      	ldr	r2, [r4, #4]
 8014bac:	42a3      	cmp	r3, r4
 8014bae:	bf0c      	ite	eq
 8014bb0:	6032      	streq	r2, [r6, #0]
 8014bb2:	605a      	strne	r2, [r3, #4]
 8014bb4:	e7ec      	b.n	8014b90 <_malloc_r+0xa0>
 8014bb6:	4623      	mov	r3, r4
 8014bb8:	6864      	ldr	r4, [r4, #4]
 8014bba:	e7b2      	b.n	8014b22 <_malloc_r+0x32>
 8014bbc:	4634      	mov	r4, r6
 8014bbe:	6876      	ldr	r6, [r6, #4]
 8014bc0:	e7b9      	b.n	8014b36 <_malloc_r+0x46>
 8014bc2:	230c      	movs	r3, #12
 8014bc4:	603b      	str	r3, [r7, #0]
 8014bc6:	4638      	mov	r0, r7
 8014bc8:	f000 fb26 	bl	8015218 <__malloc_unlock>
 8014bcc:	e7a1      	b.n	8014b12 <_malloc_r+0x22>
 8014bce:	6025      	str	r5, [r4, #0]
 8014bd0:	e7de      	b.n	8014b90 <_malloc_r+0xa0>
 8014bd2:	bf00      	nop
 8014bd4:	20008f7c 	.word	0x20008f7c

08014bd8 <__ssputs_r>:
 8014bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bdc:	688e      	ldr	r6, [r1, #8]
 8014bde:	429e      	cmp	r6, r3
 8014be0:	4682      	mov	sl, r0
 8014be2:	460c      	mov	r4, r1
 8014be4:	4690      	mov	r8, r2
 8014be6:	461f      	mov	r7, r3
 8014be8:	d838      	bhi.n	8014c5c <__ssputs_r+0x84>
 8014bea:	898a      	ldrh	r2, [r1, #12]
 8014bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014bf0:	d032      	beq.n	8014c58 <__ssputs_r+0x80>
 8014bf2:	6825      	ldr	r5, [r4, #0]
 8014bf4:	6909      	ldr	r1, [r1, #16]
 8014bf6:	eba5 0901 	sub.w	r9, r5, r1
 8014bfa:	6965      	ldr	r5, [r4, #20]
 8014bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c04:	3301      	adds	r3, #1
 8014c06:	444b      	add	r3, r9
 8014c08:	106d      	asrs	r5, r5, #1
 8014c0a:	429d      	cmp	r5, r3
 8014c0c:	bf38      	it	cc
 8014c0e:	461d      	movcc	r5, r3
 8014c10:	0553      	lsls	r3, r2, #21
 8014c12:	d531      	bpl.n	8014c78 <__ssputs_r+0xa0>
 8014c14:	4629      	mov	r1, r5
 8014c16:	f7ff ff6b 	bl	8014af0 <_malloc_r>
 8014c1a:	4606      	mov	r6, r0
 8014c1c:	b950      	cbnz	r0, 8014c34 <__ssputs_r+0x5c>
 8014c1e:	230c      	movs	r3, #12
 8014c20:	f8ca 3000 	str.w	r3, [sl]
 8014c24:	89a3      	ldrh	r3, [r4, #12]
 8014c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c2a:	81a3      	strh	r3, [r4, #12]
 8014c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c34:	6921      	ldr	r1, [r4, #16]
 8014c36:	464a      	mov	r2, r9
 8014c38:	f7ff feae 	bl	8014998 <memcpy>
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c46:	81a3      	strh	r3, [r4, #12]
 8014c48:	6126      	str	r6, [r4, #16]
 8014c4a:	6165      	str	r5, [r4, #20]
 8014c4c:	444e      	add	r6, r9
 8014c4e:	eba5 0509 	sub.w	r5, r5, r9
 8014c52:	6026      	str	r6, [r4, #0]
 8014c54:	60a5      	str	r5, [r4, #8]
 8014c56:	463e      	mov	r6, r7
 8014c58:	42be      	cmp	r6, r7
 8014c5a:	d900      	bls.n	8014c5e <__ssputs_r+0x86>
 8014c5c:	463e      	mov	r6, r7
 8014c5e:	6820      	ldr	r0, [r4, #0]
 8014c60:	4632      	mov	r2, r6
 8014c62:	4641      	mov	r1, r8
 8014c64:	f000 fab8 	bl	80151d8 <memmove>
 8014c68:	68a3      	ldr	r3, [r4, #8]
 8014c6a:	1b9b      	subs	r3, r3, r6
 8014c6c:	60a3      	str	r3, [r4, #8]
 8014c6e:	6823      	ldr	r3, [r4, #0]
 8014c70:	4433      	add	r3, r6
 8014c72:	6023      	str	r3, [r4, #0]
 8014c74:	2000      	movs	r0, #0
 8014c76:	e7db      	b.n	8014c30 <__ssputs_r+0x58>
 8014c78:	462a      	mov	r2, r5
 8014c7a:	f000 fb1f 	bl	80152bc <_realloc_r>
 8014c7e:	4606      	mov	r6, r0
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d1e1      	bne.n	8014c48 <__ssputs_r+0x70>
 8014c84:	6921      	ldr	r1, [r4, #16]
 8014c86:	4650      	mov	r0, sl
 8014c88:	f000 facc 	bl	8015224 <_free_r>
 8014c8c:	e7c7      	b.n	8014c1e <__ssputs_r+0x46>
	...

08014c90 <_svfiprintf_r>:
 8014c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c94:	4698      	mov	r8, r3
 8014c96:	898b      	ldrh	r3, [r1, #12]
 8014c98:	061b      	lsls	r3, r3, #24
 8014c9a:	b09d      	sub	sp, #116	; 0x74
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	460d      	mov	r5, r1
 8014ca0:	4614      	mov	r4, r2
 8014ca2:	d50e      	bpl.n	8014cc2 <_svfiprintf_r+0x32>
 8014ca4:	690b      	ldr	r3, [r1, #16]
 8014ca6:	b963      	cbnz	r3, 8014cc2 <_svfiprintf_r+0x32>
 8014ca8:	2140      	movs	r1, #64	; 0x40
 8014caa:	f7ff ff21 	bl	8014af0 <_malloc_r>
 8014cae:	6028      	str	r0, [r5, #0]
 8014cb0:	6128      	str	r0, [r5, #16]
 8014cb2:	b920      	cbnz	r0, 8014cbe <_svfiprintf_r+0x2e>
 8014cb4:	230c      	movs	r3, #12
 8014cb6:	603b      	str	r3, [r7, #0]
 8014cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014cbc:	e0d1      	b.n	8014e62 <_svfiprintf_r+0x1d2>
 8014cbe:	2340      	movs	r3, #64	; 0x40
 8014cc0:	616b      	str	r3, [r5, #20]
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8014cc6:	2320      	movs	r3, #32
 8014cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014cd0:	2330      	movs	r3, #48	; 0x30
 8014cd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014e7c <_svfiprintf_r+0x1ec>
 8014cd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cda:	f04f 0901 	mov.w	r9, #1
 8014cde:	4623      	mov	r3, r4
 8014ce0:	469a      	mov	sl, r3
 8014ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ce6:	b10a      	cbz	r2, 8014cec <_svfiprintf_r+0x5c>
 8014ce8:	2a25      	cmp	r2, #37	; 0x25
 8014cea:	d1f9      	bne.n	8014ce0 <_svfiprintf_r+0x50>
 8014cec:	ebba 0b04 	subs.w	fp, sl, r4
 8014cf0:	d00b      	beq.n	8014d0a <_svfiprintf_r+0x7a>
 8014cf2:	465b      	mov	r3, fp
 8014cf4:	4622      	mov	r2, r4
 8014cf6:	4629      	mov	r1, r5
 8014cf8:	4638      	mov	r0, r7
 8014cfa:	f7ff ff6d 	bl	8014bd8 <__ssputs_r>
 8014cfe:	3001      	adds	r0, #1
 8014d00:	f000 80aa 	beq.w	8014e58 <_svfiprintf_r+0x1c8>
 8014d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d06:	445a      	add	r2, fp
 8014d08:	9209      	str	r2, [sp, #36]	; 0x24
 8014d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	f000 80a2 	beq.w	8014e58 <_svfiprintf_r+0x1c8>
 8014d14:	2300      	movs	r3, #0
 8014d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d1e:	f10a 0a01 	add.w	sl, sl, #1
 8014d22:	9304      	str	r3, [sp, #16]
 8014d24:	9307      	str	r3, [sp, #28]
 8014d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8014d2c:	4654      	mov	r4, sl
 8014d2e:	2205      	movs	r2, #5
 8014d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d34:	4851      	ldr	r0, [pc, #324]	; (8014e7c <_svfiprintf_r+0x1ec>)
 8014d36:	f7eb faab 	bl	8000290 <memchr>
 8014d3a:	9a04      	ldr	r2, [sp, #16]
 8014d3c:	b9d8      	cbnz	r0, 8014d76 <_svfiprintf_r+0xe6>
 8014d3e:	06d0      	lsls	r0, r2, #27
 8014d40:	bf44      	itt	mi
 8014d42:	2320      	movmi	r3, #32
 8014d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d48:	0711      	lsls	r1, r2, #28
 8014d4a:	bf44      	itt	mi
 8014d4c:	232b      	movmi	r3, #43	; 0x2b
 8014d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d52:	f89a 3000 	ldrb.w	r3, [sl]
 8014d56:	2b2a      	cmp	r3, #42	; 0x2a
 8014d58:	d015      	beq.n	8014d86 <_svfiprintf_r+0xf6>
 8014d5a:	9a07      	ldr	r2, [sp, #28]
 8014d5c:	4654      	mov	r4, sl
 8014d5e:	2000      	movs	r0, #0
 8014d60:	f04f 0c0a 	mov.w	ip, #10
 8014d64:	4621      	mov	r1, r4
 8014d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d6a:	3b30      	subs	r3, #48	; 0x30
 8014d6c:	2b09      	cmp	r3, #9
 8014d6e:	d94e      	bls.n	8014e0e <_svfiprintf_r+0x17e>
 8014d70:	b1b0      	cbz	r0, 8014da0 <_svfiprintf_r+0x110>
 8014d72:	9207      	str	r2, [sp, #28]
 8014d74:	e014      	b.n	8014da0 <_svfiprintf_r+0x110>
 8014d76:	eba0 0308 	sub.w	r3, r0, r8
 8014d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	9304      	str	r3, [sp, #16]
 8014d82:	46a2      	mov	sl, r4
 8014d84:	e7d2      	b.n	8014d2c <_svfiprintf_r+0x9c>
 8014d86:	9b03      	ldr	r3, [sp, #12]
 8014d88:	1d19      	adds	r1, r3, #4
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	9103      	str	r1, [sp, #12]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	bfbb      	ittet	lt
 8014d92:	425b      	neglt	r3, r3
 8014d94:	f042 0202 	orrlt.w	r2, r2, #2
 8014d98:	9307      	strge	r3, [sp, #28]
 8014d9a:	9307      	strlt	r3, [sp, #28]
 8014d9c:	bfb8      	it	lt
 8014d9e:	9204      	strlt	r2, [sp, #16]
 8014da0:	7823      	ldrb	r3, [r4, #0]
 8014da2:	2b2e      	cmp	r3, #46	; 0x2e
 8014da4:	d10c      	bne.n	8014dc0 <_svfiprintf_r+0x130>
 8014da6:	7863      	ldrb	r3, [r4, #1]
 8014da8:	2b2a      	cmp	r3, #42	; 0x2a
 8014daa:	d135      	bne.n	8014e18 <_svfiprintf_r+0x188>
 8014dac:	9b03      	ldr	r3, [sp, #12]
 8014dae:	1d1a      	adds	r2, r3, #4
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	9203      	str	r2, [sp, #12]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	bfb8      	it	lt
 8014db8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014dbc:	3402      	adds	r4, #2
 8014dbe:	9305      	str	r3, [sp, #20]
 8014dc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014e8c <_svfiprintf_r+0x1fc>
 8014dc4:	7821      	ldrb	r1, [r4, #0]
 8014dc6:	2203      	movs	r2, #3
 8014dc8:	4650      	mov	r0, sl
 8014dca:	f7eb fa61 	bl	8000290 <memchr>
 8014dce:	b140      	cbz	r0, 8014de2 <_svfiprintf_r+0x152>
 8014dd0:	2340      	movs	r3, #64	; 0x40
 8014dd2:	eba0 000a 	sub.w	r0, r0, sl
 8014dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8014dda:	9b04      	ldr	r3, [sp, #16]
 8014ddc:	4303      	orrs	r3, r0
 8014dde:	3401      	adds	r4, #1
 8014de0:	9304      	str	r3, [sp, #16]
 8014de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014de6:	4826      	ldr	r0, [pc, #152]	; (8014e80 <_svfiprintf_r+0x1f0>)
 8014de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014dec:	2206      	movs	r2, #6
 8014dee:	f7eb fa4f 	bl	8000290 <memchr>
 8014df2:	2800      	cmp	r0, #0
 8014df4:	d038      	beq.n	8014e68 <_svfiprintf_r+0x1d8>
 8014df6:	4b23      	ldr	r3, [pc, #140]	; (8014e84 <_svfiprintf_r+0x1f4>)
 8014df8:	bb1b      	cbnz	r3, 8014e42 <_svfiprintf_r+0x1b2>
 8014dfa:	9b03      	ldr	r3, [sp, #12]
 8014dfc:	3307      	adds	r3, #7
 8014dfe:	f023 0307 	bic.w	r3, r3, #7
 8014e02:	3308      	adds	r3, #8
 8014e04:	9303      	str	r3, [sp, #12]
 8014e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e08:	4433      	add	r3, r6
 8014e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e0c:	e767      	b.n	8014cde <_svfiprintf_r+0x4e>
 8014e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e12:	460c      	mov	r4, r1
 8014e14:	2001      	movs	r0, #1
 8014e16:	e7a5      	b.n	8014d64 <_svfiprintf_r+0xd4>
 8014e18:	2300      	movs	r3, #0
 8014e1a:	3401      	adds	r4, #1
 8014e1c:	9305      	str	r3, [sp, #20]
 8014e1e:	4619      	mov	r1, r3
 8014e20:	f04f 0c0a 	mov.w	ip, #10
 8014e24:	4620      	mov	r0, r4
 8014e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e2a:	3a30      	subs	r2, #48	; 0x30
 8014e2c:	2a09      	cmp	r2, #9
 8014e2e:	d903      	bls.n	8014e38 <_svfiprintf_r+0x1a8>
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d0c5      	beq.n	8014dc0 <_svfiprintf_r+0x130>
 8014e34:	9105      	str	r1, [sp, #20]
 8014e36:	e7c3      	b.n	8014dc0 <_svfiprintf_r+0x130>
 8014e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	2301      	movs	r3, #1
 8014e40:	e7f0      	b.n	8014e24 <_svfiprintf_r+0x194>
 8014e42:	ab03      	add	r3, sp, #12
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	462a      	mov	r2, r5
 8014e48:	4b0f      	ldr	r3, [pc, #60]	; (8014e88 <_svfiprintf_r+0x1f8>)
 8014e4a:	a904      	add	r1, sp, #16
 8014e4c:	4638      	mov	r0, r7
 8014e4e:	f3af 8000 	nop.w
 8014e52:	1c42      	adds	r2, r0, #1
 8014e54:	4606      	mov	r6, r0
 8014e56:	d1d6      	bne.n	8014e06 <_svfiprintf_r+0x176>
 8014e58:	89ab      	ldrh	r3, [r5, #12]
 8014e5a:	065b      	lsls	r3, r3, #25
 8014e5c:	f53f af2c 	bmi.w	8014cb8 <_svfiprintf_r+0x28>
 8014e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e62:	b01d      	add	sp, #116	; 0x74
 8014e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e68:	ab03      	add	r3, sp, #12
 8014e6a:	9300      	str	r3, [sp, #0]
 8014e6c:	462a      	mov	r2, r5
 8014e6e:	4b06      	ldr	r3, [pc, #24]	; (8014e88 <_svfiprintf_r+0x1f8>)
 8014e70:	a904      	add	r1, sp, #16
 8014e72:	4638      	mov	r0, r7
 8014e74:	f000 f87a 	bl	8014f6c <_printf_i>
 8014e78:	e7eb      	b.n	8014e52 <_svfiprintf_r+0x1c2>
 8014e7a:	bf00      	nop
 8014e7c:	0801660c 	.word	0x0801660c
 8014e80:	08016616 	.word	0x08016616
 8014e84:	00000000 	.word	0x00000000
 8014e88:	08014bd9 	.word	0x08014bd9
 8014e8c:	08016612 	.word	0x08016612

08014e90 <_printf_common>:
 8014e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e94:	4616      	mov	r6, r2
 8014e96:	4699      	mov	r9, r3
 8014e98:	688a      	ldr	r2, [r1, #8]
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ea0:	4293      	cmp	r3, r2
 8014ea2:	bfb8      	it	lt
 8014ea4:	4613      	movlt	r3, r2
 8014ea6:	6033      	str	r3, [r6, #0]
 8014ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014eac:	4607      	mov	r7, r0
 8014eae:	460c      	mov	r4, r1
 8014eb0:	b10a      	cbz	r2, 8014eb6 <_printf_common+0x26>
 8014eb2:	3301      	adds	r3, #1
 8014eb4:	6033      	str	r3, [r6, #0]
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	0699      	lsls	r1, r3, #26
 8014eba:	bf42      	ittt	mi
 8014ebc:	6833      	ldrmi	r3, [r6, #0]
 8014ebe:	3302      	addmi	r3, #2
 8014ec0:	6033      	strmi	r3, [r6, #0]
 8014ec2:	6825      	ldr	r5, [r4, #0]
 8014ec4:	f015 0506 	ands.w	r5, r5, #6
 8014ec8:	d106      	bne.n	8014ed8 <_printf_common+0x48>
 8014eca:	f104 0a19 	add.w	sl, r4, #25
 8014ece:	68e3      	ldr	r3, [r4, #12]
 8014ed0:	6832      	ldr	r2, [r6, #0]
 8014ed2:	1a9b      	subs	r3, r3, r2
 8014ed4:	42ab      	cmp	r3, r5
 8014ed6:	dc26      	bgt.n	8014f26 <_printf_common+0x96>
 8014ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014edc:	1e13      	subs	r3, r2, #0
 8014ede:	6822      	ldr	r2, [r4, #0]
 8014ee0:	bf18      	it	ne
 8014ee2:	2301      	movne	r3, #1
 8014ee4:	0692      	lsls	r2, r2, #26
 8014ee6:	d42b      	bmi.n	8014f40 <_printf_common+0xb0>
 8014ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014eec:	4649      	mov	r1, r9
 8014eee:	4638      	mov	r0, r7
 8014ef0:	47c0      	blx	r8
 8014ef2:	3001      	adds	r0, #1
 8014ef4:	d01e      	beq.n	8014f34 <_printf_common+0xa4>
 8014ef6:	6823      	ldr	r3, [r4, #0]
 8014ef8:	68e5      	ldr	r5, [r4, #12]
 8014efa:	6832      	ldr	r2, [r6, #0]
 8014efc:	f003 0306 	and.w	r3, r3, #6
 8014f00:	2b04      	cmp	r3, #4
 8014f02:	bf08      	it	eq
 8014f04:	1aad      	subeq	r5, r5, r2
 8014f06:	68a3      	ldr	r3, [r4, #8]
 8014f08:	6922      	ldr	r2, [r4, #16]
 8014f0a:	bf0c      	ite	eq
 8014f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f10:	2500      	movne	r5, #0
 8014f12:	4293      	cmp	r3, r2
 8014f14:	bfc4      	itt	gt
 8014f16:	1a9b      	subgt	r3, r3, r2
 8014f18:	18ed      	addgt	r5, r5, r3
 8014f1a:	2600      	movs	r6, #0
 8014f1c:	341a      	adds	r4, #26
 8014f1e:	42b5      	cmp	r5, r6
 8014f20:	d11a      	bne.n	8014f58 <_printf_common+0xc8>
 8014f22:	2000      	movs	r0, #0
 8014f24:	e008      	b.n	8014f38 <_printf_common+0xa8>
 8014f26:	2301      	movs	r3, #1
 8014f28:	4652      	mov	r2, sl
 8014f2a:	4649      	mov	r1, r9
 8014f2c:	4638      	mov	r0, r7
 8014f2e:	47c0      	blx	r8
 8014f30:	3001      	adds	r0, #1
 8014f32:	d103      	bne.n	8014f3c <_printf_common+0xac>
 8014f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f3c:	3501      	adds	r5, #1
 8014f3e:	e7c6      	b.n	8014ece <_printf_common+0x3e>
 8014f40:	18e1      	adds	r1, r4, r3
 8014f42:	1c5a      	adds	r2, r3, #1
 8014f44:	2030      	movs	r0, #48	; 0x30
 8014f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f4a:	4422      	add	r2, r4
 8014f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f54:	3302      	adds	r3, #2
 8014f56:	e7c7      	b.n	8014ee8 <_printf_common+0x58>
 8014f58:	2301      	movs	r3, #1
 8014f5a:	4622      	mov	r2, r4
 8014f5c:	4649      	mov	r1, r9
 8014f5e:	4638      	mov	r0, r7
 8014f60:	47c0      	blx	r8
 8014f62:	3001      	adds	r0, #1
 8014f64:	d0e6      	beq.n	8014f34 <_printf_common+0xa4>
 8014f66:	3601      	adds	r6, #1
 8014f68:	e7d9      	b.n	8014f1e <_printf_common+0x8e>
	...

08014f6c <_printf_i>:
 8014f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f70:	7e0f      	ldrb	r7, [r1, #24]
 8014f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f74:	2f78      	cmp	r7, #120	; 0x78
 8014f76:	4691      	mov	r9, r2
 8014f78:	4680      	mov	r8, r0
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	469a      	mov	sl, r3
 8014f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014f82:	d807      	bhi.n	8014f94 <_printf_i+0x28>
 8014f84:	2f62      	cmp	r7, #98	; 0x62
 8014f86:	d80a      	bhi.n	8014f9e <_printf_i+0x32>
 8014f88:	2f00      	cmp	r7, #0
 8014f8a:	f000 80d8 	beq.w	801513e <_printf_i+0x1d2>
 8014f8e:	2f58      	cmp	r7, #88	; 0x58
 8014f90:	f000 80a3 	beq.w	80150da <_printf_i+0x16e>
 8014f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014f9c:	e03a      	b.n	8015014 <_printf_i+0xa8>
 8014f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014fa2:	2b15      	cmp	r3, #21
 8014fa4:	d8f6      	bhi.n	8014f94 <_printf_i+0x28>
 8014fa6:	a101      	add	r1, pc, #4	; (adr r1, 8014fac <_printf_i+0x40>)
 8014fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014fac:	08015005 	.word	0x08015005
 8014fb0:	08015019 	.word	0x08015019
 8014fb4:	08014f95 	.word	0x08014f95
 8014fb8:	08014f95 	.word	0x08014f95
 8014fbc:	08014f95 	.word	0x08014f95
 8014fc0:	08014f95 	.word	0x08014f95
 8014fc4:	08015019 	.word	0x08015019
 8014fc8:	08014f95 	.word	0x08014f95
 8014fcc:	08014f95 	.word	0x08014f95
 8014fd0:	08014f95 	.word	0x08014f95
 8014fd4:	08014f95 	.word	0x08014f95
 8014fd8:	08015125 	.word	0x08015125
 8014fdc:	08015049 	.word	0x08015049
 8014fe0:	08015107 	.word	0x08015107
 8014fe4:	08014f95 	.word	0x08014f95
 8014fe8:	08014f95 	.word	0x08014f95
 8014fec:	08015147 	.word	0x08015147
 8014ff0:	08014f95 	.word	0x08014f95
 8014ff4:	08015049 	.word	0x08015049
 8014ff8:	08014f95 	.word	0x08014f95
 8014ffc:	08014f95 	.word	0x08014f95
 8015000:	0801510f 	.word	0x0801510f
 8015004:	682b      	ldr	r3, [r5, #0]
 8015006:	1d1a      	adds	r2, r3, #4
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	602a      	str	r2, [r5, #0]
 801500c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015014:	2301      	movs	r3, #1
 8015016:	e0a3      	b.n	8015160 <_printf_i+0x1f4>
 8015018:	6820      	ldr	r0, [r4, #0]
 801501a:	6829      	ldr	r1, [r5, #0]
 801501c:	0606      	lsls	r6, r0, #24
 801501e:	f101 0304 	add.w	r3, r1, #4
 8015022:	d50a      	bpl.n	801503a <_printf_i+0xce>
 8015024:	680e      	ldr	r6, [r1, #0]
 8015026:	602b      	str	r3, [r5, #0]
 8015028:	2e00      	cmp	r6, #0
 801502a:	da03      	bge.n	8015034 <_printf_i+0xc8>
 801502c:	232d      	movs	r3, #45	; 0x2d
 801502e:	4276      	negs	r6, r6
 8015030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015034:	485e      	ldr	r0, [pc, #376]	; (80151b0 <_printf_i+0x244>)
 8015036:	230a      	movs	r3, #10
 8015038:	e019      	b.n	801506e <_printf_i+0x102>
 801503a:	680e      	ldr	r6, [r1, #0]
 801503c:	602b      	str	r3, [r5, #0]
 801503e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015042:	bf18      	it	ne
 8015044:	b236      	sxthne	r6, r6
 8015046:	e7ef      	b.n	8015028 <_printf_i+0xbc>
 8015048:	682b      	ldr	r3, [r5, #0]
 801504a:	6820      	ldr	r0, [r4, #0]
 801504c:	1d19      	adds	r1, r3, #4
 801504e:	6029      	str	r1, [r5, #0]
 8015050:	0601      	lsls	r1, r0, #24
 8015052:	d501      	bpl.n	8015058 <_printf_i+0xec>
 8015054:	681e      	ldr	r6, [r3, #0]
 8015056:	e002      	b.n	801505e <_printf_i+0xf2>
 8015058:	0646      	lsls	r6, r0, #25
 801505a:	d5fb      	bpl.n	8015054 <_printf_i+0xe8>
 801505c:	881e      	ldrh	r6, [r3, #0]
 801505e:	4854      	ldr	r0, [pc, #336]	; (80151b0 <_printf_i+0x244>)
 8015060:	2f6f      	cmp	r7, #111	; 0x6f
 8015062:	bf0c      	ite	eq
 8015064:	2308      	moveq	r3, #8
 8015066:	230a      	movne	r3, #10
 8015068:	2100      	movs	r1, #0
 801506a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801506e:	6865      	ldr	r5, [r4, #4]
 8015070:	60a5      	str	r5, [r4, #8]
 8015072:	2d00      	cmp	r5, #0
 8015074:	bfa2      	ittt	ge
 8015076:	6821      	ldrge	r1, [r4, #0]
 8015078:	f021 0104 	bicge.w	r1, r1, #4
 801507c:	6021      	strge	r1, [r4, #0]
 801507e:	b90e      	cbnz	r6, 8015084 <_printf_i+0x118>
 8015080:	2d00      	cmp	r5, #0
 8015082:	d04d      	beq.n	8015120 <_printf_i+0x1b4>
 8015084:	4615      	mov	r5, r2
 8015086:	fbb6 f1f3 	udiv	r1, r6, r3
 801508a:	fb03 6711 	mls	r7, r3, r1, r6
 801508e:	5dc7      	ldrb	r7, [r0, r7]
 8015090:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015094:	4637      	mov	r7, r6
 8015096:	42bb      	cmp	r3, r7
 8015098:	460e      	mov	r6, r1
 801509a:	d9f4      	bls.n	8015086 <_printf_i+0x11a>
 801509c:	2b08      	cmp	r3, #8
 801509e:	d10b      	bne.n	80150b8 <_printf_i+0x14c>
 80150a0:	6823      	ldr	r3, [r4, #0]
 80150a2:	07de      	lsls	r6, r3, #31
 80150a4:	d508      	bpl.n	80150b8 <_printf_i+0x14c>
 80150a6:	6923      	ldr	r3, [r4, #16]
 80150a8:	6861      	ldr	r1, [r4, #4]
 80150aa:	4299      	cmp	r1, r3
 80150ac:	bfde      	ittt	le
 80150ae:	2330      	movle	r3, #48	; 0x30
 80150b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80150b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80150b8:	1b52      	subs	r2, r2, r5
 80150ba:	6122      	str	r2, [r4, #16]
 80150bc:	f8cd a000 	str.w	sl, [sp]
 80150c0:	464b      	mov	r3, r9
 80150c2:	aa03      	add	r2, sp, #12
 80150c4:	4621      	mov	r1, r4
 80150c6:	4640      	mov	r0, r8
 80150c8:	f7ff fee2 	bl	8014e90 <_printf_common>
 80150cc:	3001      	adds	r0, #1
 80150ce:	d14c      	bne.n	801516a <_printf_i+0x1fe>
 80150d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150d4:	b004      	add	sp, #16
 80150d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150da:	4835      	ldr	r0, [pc, #212]	; (80151b0 <_printf_i+0x244>)
 80150dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80150e0:	6829      	ldr	r1, [r5, #0]
 80150e2:	6823      	ldr	r3, [r4, #0]
 80150e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80150e8:	6029      	str	r1, [r5, #0]
 80150ea:	061d      	lsls	r5, r3, #24
 80150ec:	d514      	bpl.n	8015118 <_printf_i+0x1ac>
 80150ee:	07df      	lsls	r7, r3, #31
 80150f0:	bf44      	itt	mi
 80150f2:	f043 0320 	orrmi.w	r3, r3, #32
 80150f6:	6023      	strmi	r3, [r4, #0]
 80150f8:	b91e      	cbnz	r6, 8015102 <_printf_i+0x196>
 80150fa:	6823      	ldr	r3, [r4, #0]
 80150fc:	f023 0320 	bic.w	r3, r3, #32
 8015100:	6023      	str	r3, [r4, #0]
 8015102:	2310      	movs	r3, #16
 8015104:	e7b0      	b.n	8015068 <_printf_i+0xfc>
 8015106:	6823      	ldr	r3, [r4, #0]
 8015108:	f043 0320 	orr.w	r3, r3, #32
 801510c:	6023      	str	r3, [r4, #0]
 801510e:	2378      	movs	r3, #120	; 0x78
 8015110:	4828      	ldr	r0, [pc, #160]	; (80151b4 <_printf_i+0x248>)
 8015112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015116:	e7e3      	b.n	80150e0 <_printf_i+0x174>
 8015118:	0659      	lsls	r1, r3, #25
 801511a:	bf48      	it	mi
 801511c:	b2b6      	uxthmi	r6, r6
 801511e:	e7e6      	b.n	80150ee <_printf_i+0x182>
 8015120:	4615      	mov	r5, r2
 8015122:	e7bb      	b.n	801509c <_printf_i+0x130>
 8015124:	682b      	ldr	r3, [r5, #0]
 8015126:	6826      	ldr	r6, [r4, #0]
 8015128:	6961      	ldr	r1, [r4, #20]
 801512a:	1d18      	adds	r0, r3, #4
 801512c:	6028      	str	r0, [r5, #0]
 801512e:	0635      	lsls	r5, r6, #24
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	d501      	bpl.n	8015138 <_printf_i+0x1cc>
 8015134:	6019      	str	r1, [r3, #0]
 8015136:	e002      	b.n	801513e <_printf_i+0x1d2>
 8015138:	0670      	lsls	r0, r6, #25
 801513a:	d5fb      	bpl.n	8015134 <_printf_i+0x1c8>
 801513c:	8019      	strh	r1, [r3, #0]
 801513e:	2300      	movs	r3, #0
 8015140:	6123      	str	r3, [r4, #16]
 8015142:	4615      	mov	r5, r2
 8015144:	e7ba      	b.n	80150bc <_printf_i+0x150>
 8015146:	682b      	ldr	r3, [r5, #0]
 8015148:	1d1a      	adds	r2, r3, #4
 801514a:	602a      	str	r2, [r5, #0]
 801514c:	681d      	ldr	r5, [r3, #0]
 801514e:	6862      	ldr	r2, [r4, #4]
 8015150:	2100      	movs	r1, #0
 8015152:	4628      	mov	r0, r5
 8015154:	f7eb f89c 	bl	8000290 <memchr>
 8015158:	b108      	cbz	r0, 801515e <_printf_i+0x1f2>
 801515a:	1b40      	subs	r0, r0, r5
 801515c:	6060      	str	r0, [r4, #4]
 801515e:	6863      	ldr	r3, [r4, #4]
 8015160:	6123      	str	r3, [r4, #16]
 8015162:	2300      	movs	r3, #0
 8015164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015168:	e7a8      	b.n	80150bc <_printf_i+0x150>
 801516a:	6923      	ldr	r3, [r4, #16]
 801516c:	462a      	mov	r2, r5
 801516e:	4649      	mov	r1, r9
 8015170:	4640      	mov	r0, r8
 8015172:	47d0      	blx	sl
 8015174:	3001      	adds	r0, #1
 8015176:	d0ab      	beq.n	80150d0 <_printf_i+0x164>
 8015178:	6823      	ldr	r3, [r4, #0]
 801517a:	079b      	lsls	r3, r3, #30
 801517c:	d413      	bmi.n	80151a6 <_printf_i+0x23a>
 801517e:	68e0      	ldr	r0, [r4, #12]
 8015180:	9b03      	ldr	r3, [sp, #12]
 8015182:	4298      	cmp	r0, r3
 8015184:	bfb8      	it	lt
 8015186:	4618      	movlt	r0, r3
 8015188:	e7a4      	b.n	80150d4 <_printf_i+0x168>
 801518a:	2301      	movs	r3, #1
 801518c:	4632      	mov	r2, r6
 801518e:	4649      	mov	r1, r9
 8015190:	4640      	mov	r0, r8
 8015192:	47d0      	blx	sl
 8015194:	3001      	adds	r0, #1
 8015196:	d09b      	beq.n	80150d0 <_printf_i+0x164>
 8015198:	3501      	adds	r5, #1
 801519a:	68e3      	ldr	r3, [r4, #12]
 801519c:	9903      	ldr	r1, [sp, #12]
 801519e:	1a5b      	subs	r3, r3, r1
 80151a0:	42ab      	cmp	r3, r5
 80151a2:	dcf2      	bgt.n	801518a <_printf_i+0x21e>
 80151a4:	e7eb      	b.n	801517e <_printf_i+0x212>
 80151a6:	2500      	movs	r5, #0
 80151a8:	f104 0619 	add.w	r6, r4, #25
 80151ac:	e7f5      	b.n	801519a <_printf_i+0x22e>
 80151ae:	bf00      	nop
 80151b0:	0801661d 	.word	0x0801661d
 80151b4:	0801662e 	.word	0x0801662e

080151b8 <_sbrk_r>:
 80151b8:	b538      	push	{r3, r4, r5, lr}
 80151ba:	4d06      	ldr	r5, [pc, #24]	; (80151d4 <_sbrk_r+0x1c>)
 80151bc:	2300      	movs	r3, #0
 80151be:	4604      	mov	r4, r0
 80151c0:	4608      	mov	r0, r1
 80151c2:	602b      	str	r3, [r5, #0]
 80151c4:	f000 f8b2 	bl	801532c <_sbrk>
 80151c8:	1c43      	adds	r3, r0, #1
 80151ca:	d102      	bne.n	80151d2 <_sbrk_r+0x1a>
 80151cc:	682b      	ldr	r3, [r5, #0]
 80151ce:	b103      	cbz	r3, 80151d2 <_sbrk_r+0x1a>
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	bd38      	pop	{r3, r4, r5, pc}
 80151d4:	20008f84 	.word	0x20008f84

080151d8 <memmove>:
 80151d8:	4288      	cmp	r0, r1
 80151da:	b510      	push	{r4, lr}
 80151dc:	eb01 0402 	add.w	r4, r1, r2
 80151e0:	d902      	bls.n	80151e8 <memmove+0x10>
 80151e2:	4284      	cmp	r4, r0
 80151e4:	4623      	mov	r3, r4
 80151e6:	d807      	bhi.n	80151f8 <memmove+0x20>
 80151e8:	1e43      	subs	r3, r0, #1
 80151ea:	42a1      	cmp	r1, r4
 80151ec:	d008      	beq.n	8015200 <memmove+0x28>
 80151ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151f6:	e7f8      	b.n	80151ea <memmove+0x12>
 80151f8:	4402      	add	r2, r0
 80151fa:	4601      	mov	r1, r0
 80151fc:	428a      	cmp	r2, r1
 80151fe:	d100      	bne.n	8015202 <memmove+0x2a>
 8015200:	bd10      	pop	{r4, pc}
 8015202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801520a:	e7f7      	b.n	80151fc <memmove+0x24>

0801520c <__malloc_lock>:
 801520c:	4801      	ldr	r0, [pc, #4]	; (8015214 <__malloc_lock+0x8>)
 801520e:	f7ff bc4d 	b.w	8014aac <__retarget_lock_acquire_recursive>
 8015212:	bf00      	nop
 8015214:	20008f78 	.word	0x20008f78

08015218 <__malloc_unlock>:
 8015218:	4801      	ldr	r0, [pc, #4]	; (8015220 <__malloc_unlock+0x8>)
 801521a:	f7ff bc48 	b.w	8014aae <__retarget_lock_release_recursive>
 801521e:	bf00      	nop
 8015220:	20008f78 	.word	0x20008f78

08015224 <_free_r>:
 8015224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015226:	2900      	cmp	r1, #0
 8015228:	d044      	beq.n	80152b4 <_free_r+0x90>
 801522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801522e:	9001      	str	r0, [sp, #4]
 8015230:	2b00      	cmp	r3, #0
 8015232:	f1a1 0404 	sub.w	r4, r1, #4
 8015236:	bfb8      	it	lt
 8015238:	18e4      	addlt	r4, r4, r3
 801523a:	f7ff ffe7 	bl	801520c <__malloc_lock>
 801523e:	4a1e      	ldr	r2, [pc, #120]	; (80152b8 <_free_r+0x94>)
 8015240:	9801      	ldr	r0, [sp, #4]
 8015242:	6813      	ldr	r3, [r2, #0]
 8015244:	b933      	cbnz	r3, 8015254 <_free_r+0x30>
 8015246:	6063      	str	r3, [r4, #4]
 8015248:	6014      	str	r4, [r2, #0]
 801524a:	b003      	add	sp, #12
 801524c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015250:	f7ff bfe2 	b.w	8015218 <__malloc_unlock>
 8015254:	42a3      	cmp	r3, r4
 8015256:	d908      	bls.n	801526a <_free_r+0x46>
 8015258:	6825      	ldr	r5, [r4, #0]
 801525a:	1961      	adds	r1, r4, r5
 801525c:	428b      	cmp	r3, r1
 801525e:	bf01      	itttt	eq
 8015260:	6819      	ldreq	r1, [r3, #0]
 8015262:	685b      	ldreq	r3, [r3, #4]
 8015264:	1949      	addeq	r1, r1, r5
 8015266:	6021      	streq	r1, [r4, #0]
 8015268:	e7ed      	b.n	8015246 <_free_r+0x22>
 801526a:	461a      	mov	r2, r3
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	b10b      	cbz	r3, 8015274 <_free_r+0x50>
 8015270:	42a3      	cmp	r3, r4
 8015272:	d9fa      	bls.n	801526a <_free_r+0x46>
 8015274:	6811      	ldr	r1, [r2, #0]
 8015276:	1855      	adds	r5, r2, r1
 8015278:	42a5      	cmp	r5, r4
 801527a:	d10b      	bne.n	8015294 <_free_r+0x70>
 801527c:	6824      	ldr	r4, [r4, #0]
 801527e:	4421      	add	r1, r4
 8015280:	1854      	adds	r4, r2, r1
 8015282:	42a3      	cmp	r3, r4
 8015284:	6011      	str	r1, [r2, #0]
 8015286:	d1e0      	bne.n	801524a <_free_r+0x26>
 8015288:	681c      	ldr	r4, [r3, #0]
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	6053      	str	r3, [r2, #4]
 801528e:	4421      	add	r1, r4
 8015290:	6011      	str	r1, [r2, #0]
 8015292:	e7da      	b.n	801524a <_free_r+0x26>
 8015294:	d902      	bls.n	801529c <_free_r+0x78>
 8015296:	230c      	movs	r3, #12
 8015298:	6003      	str	r3, [r0, #0]
 801529a:	e7d6      	b.n	801524a <_free_r+0x26>
 801529c:	6825      	ldr	r5, [r4, #0]
 801529e:	1961      	adds	r1, r4, r5
 80152a0:	428b      	cmp	r3, r1
 80152a2:	bf04      	itt	eq
 80152a4:	6819      	ldreq	r1, [r3, #0]
 80152a6:	685b      	ldreq	r3, [r3, #4]
 80152a8:	6063      	str	r3, [r4, #4]
 80152aa:	bf04      	itt	eq
 80152ac:	1949      	addeq	r1, r1, r5
 80152ae:	6021      	streq	r1, [r4, #0]
 80152b0:	6054      	str	r4, [r2, #4]
 80152b2:	e7ca      	b.n	801524a <_free_r+0x26>
 80152b4:	b003      	add	sp, #12
 80152b6:	bd30      	pop	{r4, r5, pc}
 80152b8:	20008f7c 	.word	0x20008f7c

080152bc <_realloc_r>:
 80152bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c0:	4680      	mov	r8, r0
 80152c2:	4614      	mov	r4, r2
 80152c4:	460e      	mov	r6, r1
 80152c6:	b921      	cbnz	r1, 80152d2 <_realloc_r+0x16>
 80152c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152cc:	4611      	mov	r1, r2
 80152ce:	f7ff bc0f 	b.w	8014af0 <_malloc_r>
 80152d2:	b92a      	cbnz	r2, 80152e0 <_realloc_r+0x24>
 80152d4:	f7ff ffa6 	bl	8015224 <_free_r>
 80152d8:	4625      	mov	r5, r4
 80152da:	4628      	mov	r0, r5
 80152dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152e0:	f000 f81b 	bl	801531a <_malloc_usable_size_r>
 80152e4:	4284      	cmp	r4, r0
 80152e6:	4607      	mov	r7, r0
 80152e8:	d802      	bhi.n	80152f0 <_realloc_r+0x34>
 80152ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80152ee:	d812      	bhi.n	8015316 <_realloc_r+0x5a>
 80152f0:	4621      	mov	r1, r4
 80152f2:	4640      	mov	r0, r8
 80152f4:	f7ff fbfc 	bl	8014af0 <_malloc_r>
 80152f8:	4605      	mov	r5, r0
 80152fa:	2800      	cmp	r0, #0
 80152fc:	d0ed      	beq.n	80152da <_realloc_r+0x1e>
 80152fe:	42bc      	cmp	r4, r7
 8015300:	4622      	mov	r2, r4
 8015302:	4631      	mov	r1, r6
 8015304:	bf28      	it	cs
 8015306:	463a      	movcs	r2, r7
 8015308:	f7ff fb46 	bl	8014998 <memcpy>
 801530c:	4631      	mov	r1, r6
 801530e:	4640      	mov	r0, r8
 8015310:	f7ff ff88 	bl	8015224 <_free_r>
 8015314:	e7e1      	b.n	80152da <_realloc_r+0x1e>
 8015316:	4635      	mov	r5, r6
 8015318:	e7df      	b.n	80152da <_realloc_r+0x1e>

0801531a <_malloc_usable_size_r>:
 801531a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801531e:	1f18      	subs	r0, r3, #4
 8015320:	2b00      	cmp	r3, #0
 8015322:	bfbc      	itt	lt
 8015324:	580b      	ldrlt	r3, [r1, r0]
 8015326:	18c0      	addlt	r0, r0, r3
 8015328:	4770      	bx	lr
	...

0801532c <_sbrk>:
 801532c:	4a04      	ldr	r2, [pc, #16]	; (8015340 <_sbrk+0x14>)
 801532e:	6811      	ldr	r1, [r2, #0]
 8015330:	4603      	mov	r3, r0
 8015332:	b909      	cbnz	r1, 8015338 <_sbrk+0xc>
 8015334:	4903      	ldr	r1, [pc, #12]	; (8015344 <_sbrk+0x18>)
 8015336:	6011      	str	r1, [r2, #0]
 8015338:	6810      	ldr	r0, [r2, #0]
 801533a:	4403      	add	r3, r0
 801533c:	6013      	str	r3, [r2, #0]
 801533e:	4770      	bx	lr
 8015340:	20008f88 	.word	0x20008f88
 8015344:	20008f90 	.word	0x20008f90

08015348 <_init>:
 8015348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801534a:	bf00      	nop
 801534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801534e:	bc08      	pop	{r3}
 8015350:	469e      	mov	lr, r3
 8015352:	4770      	bx	lr

08015354 <_fini>:
 8015354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015356:	bf00      	nop
 8015358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801535a:	bc08      	pop	{r3}
 801535c:	469e      	mov	lr, r3
 801535e:	4770      	bx	lr
