
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013664  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  08013814  08013814  00023814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143a8  080143a8  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080143a8  080143a8  000243a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143b0  080143b0  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143b0  080143b0  000243b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143b4  080143b4  000243b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080143b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00007c80  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007cfc  20007cfc  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004ac48  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009462  00000000  00000000  0007acf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000046c0  00000000  00000000  00084158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004210  00000000  00000000  00088818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000348d3  00000000  00000000  0008ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042434  00000000  00000000  000c12fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d2c6  00000000  00000000  0010372f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002209f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000131d4  00000000  00000000  00220a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  00233c1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080137fc 	.word	0x080137fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080137fc 	.word	0x080137fc

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20005010 	.word	0x20005010
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <ds3231_register_driver>:
static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size);

static inline uint8_t B2D(uint8_t bcd);
static inline uint8_t D2B(uint8_t decimal);

void ds3231_register_driver(i2cdrv_t* drv) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	ds3231i2cdrv = drv;
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <ds3231_register_driver+0x1c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000098 	.word	0x20000098

08000654 <ds3231_get_time>:

bool ds3231_get_time(ds3231_time_t *info) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t data[7];

	if(ds3231_read_reg(DS3231_REG_SEC, data, 7) != true) {
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2207      	movs	r2, #7
 8000662:	4619      	mov	r1, r3
 8000664:	2000      	movs	r0, #0
 8000666:	f000 f85d 	bl	8000724 <ds3231_read_reg>
 800066a:	4603      	mov	r3, r0
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d004      	beq.n	8000680 <ds3231_get_time+0x2c>
		hal_cli_printf("ds3231 read register failed");
 8000676:	482a      	ldr	r0, [pc, #168]	; (8000720 <ds3231_get_time+0xcc>)
 8000678:	f00e fbb0 	bl	800eddc <hal_cli_printf>
		return false;
 800067c:	2300      	movs	r3, #0
 800067e:	e04a      	b.n	8000716 <ds3231_get_time+0xc2>
	}

	info->sec = B2D(data[0] & 0x7F);
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f865 	bl	8000758 <B2D>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	701a      	strb	r2, [r3, #0]
	info->min = B2D(data[1] & 0x7F);
 8000696:	7a7b      	ldrb	r3, [r7, #9]
 8000698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f85a 	bl	8000758 <B2D>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	705a      	strb	r2, [r3, #1]
	info->hour = B2D(data[2] & 0x3F);
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f84f 	bl	8000758 <B2D>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	709a      	strb	r2, [r3, #2]
	info->day = B2D(data[3] & 0x07);
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f844 	bl	8000758 <B2D>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	70da      	strb	r2, [r3, #3]
	info->date = B2D(data[4] & 0x3F);
 80006d8:	7b3b      	ldrb	r3, [r7, #12]
 80006da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f839 	bl	8000758 <B2D>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	711a      	strb	r2, [r3, #4]
	info->month = B2D(data[5] & 0x1F);
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f82e 	bl	8000758 <B2D>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	715a      	strb	r2, [r3, #5]
	info->year = B2D(data[6] & 0xFF);
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f826 	bl	8000758 <B2D>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	719a      	strb	r2, [r3, #6]

	return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08013814 	.word	0x08013814

08000724 <ds3231_read_reg>:
		hal_cli_printf("ds3231 day to string argument error");
		return 0;
	}
}

static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af02      	add	r7, sp, #8
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	73fb      	strb	r3, [r7, #15]
	return hal_i2c_receive(
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ds3231_read_reg+0x30>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	7bfa      	ldrb	r2, [r7, #15]
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	21d0      	movs	r1, #208	; 0xd0
 8000744:	f010 f88a 	bl	801085c <hal_i2c_receive>
 8000748:	4603      	mov	r3, r0
			DS3231_DEV_ADDR,
			reg,
			data,
			size,
			DS3231_I2C_TIMEOUT);
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000098 	.word	0x20000098

08000758 <B2D>:

static inline uint8_t B2D(uint8_t bcd) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	091b      	lsrs	r3, r3, #4
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4413      	add	r3, r2
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <icon_draw_play>:

const uint8_t icon_pause[] = {
		0x00, 0x24, 0x3c, 0x3c, 0x3c, 0x3c, 0x24, 0x00
};

void icon_draw_play(u8g2_t* handle, u8g2_uint_t x, u8g2_uint_t y) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
 8000798:	4613      	mov	r3, r2
 800079a:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(handle,1);
 800079c:	2101      	movs	r1, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f00d faf2 	bl	800dd88 <u8g2_SetDrawColor>
    u8g2_SetBitmapMode(handle,1);
 80007a4:	2101      	movs	r1, #1
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f00d f83d 	bl	800d826 <u8g2_SetBitmapMode>
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_play);
 80007ac:	78ba      	ldrb	r2, [r7, #2]
 80007ae:	78f9      	ldrb	r1, [r7, #3]
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <icon_draw_play+0x44>)
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	2308      	movs	r3, #8
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f00d f8b1 	bl	800d922 <u8g2_DrawBitmap>
    u8g2_SendBuffer(handle);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f00d f961 	bl	800da88 <u8g2_SendBuffer>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08013d10 	.word	0x08013d10

080007d4 <icon_draw_pause>:

void icon_draw_pause(u8g2_t* handle, u8g2_uint_t x, u8g2_uint_t y) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(handle,1);
 80007e4:	2101      	movs	r1, #1
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f00d face 	bl	800dd88 <u8g2_SetDrawColor>
    u8g2_SetBitmapMode(handle,1);
 80007ec:	2101      	movs	r1, #1
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f00d f819 	bl	800d826 <u8g2_SetBitmapMode>
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_pause);
 80007f4:	78ba      	ldrb	r2, [r7, #2]
 80007f6:	78f9      	ldrb	r1, [r7, #3]
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <icon_draw_pause+0x44>)
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2308      	movs	r3, #8
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f00d f88d 	bl	800d922 <u8g2_DrawBitmap>
    u8g2_SendBuffer(handle);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f00d f93d 	bl	800da88 <u8g2_SendBuffer>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	08013d18 	.word	0x08013d18

0800081c <MP3_Init>:
	return isPlaying;
}

/* Initialize VS1053 & Open a file */
bool MP3_Init()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	/* Initialize VS1053 */
    if(!VS1053_Init()) return false;
 8000820:	f000 fa60 	bl	8000ce4 <VS1053_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MP3_Init+0x18>
 8000830:	2300      	movs	r3, #0
 8000832:	e00a      	b.n	800084a <MP3_Init+0x2e>

    /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK) return false;
 8000834:	2200      	movs	r2, #0
 8000836:	4906      	ldr	r1, [pc, #24]	; (8000850 <MP3_Init+0x34>)
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <MP3_Init+0x38>)
 800083a:	f007 f9af 	bl	8007b9c <f_mount>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MP3_Init+0x2c>
 8000844:	2300      	movs	r3, #0
 8000846:	e000      	b.n	800084a <MP3_Init+0x2e>

    return true;
 8000848:	2301      	movs	r3, #1
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	08013894 	.word	0x08013894
 8000854:	200000c8 	.word	0x200000c8

08000858 <MP3_Play>:

bool MP3_Play(const char *filename)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if(isPlaying) MP3_Stop();
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MP3_Play+0xa0>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MP3_Play+0x14>
 8000868:	f000 f84e 	bl	8000908 <MP3_Stop>

	if(!VS1053_SetMode(0x4800)) return false;	/* SM LINE1 | SM SDINEW */
 800086c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000870:	f000 fb23 	bl	8000eba <VS1053_SetMode>
 8000874:	4603      	mov	r3, r0
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MP3_Play+0x2c>
 8000880:	2300      	movs	r3, #0
 8000882:	e035      	b.n	80008f0 <MP3_Play+0x98>
	if(!VS1053_AutoResync()) return false;		/* AutoResync */
 8000884:	f000 fb47 	bl	8000f16 <VS1053_AutoResync>
 8000888:	4603      	mov	r3, r0
 800088a:	f083 0301 	eor.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MP3_Play+0x40>
 8000894:	2300      	movs	r3, #0
 8000896:	e02b      	b.n	80008f0 <MP3_Play+0x98>
	if(!VS1053_SetDecodeTime(0)) return false;	/* Set decode time */
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fb5c 	bl	8000f56 <VS1053_SetDecodeTime>
 800089e:	4603      	mov	r3, r0
 80008a0:	f083 0301 	eor.w	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MP3_Play+0x56>
 80008aa:	2300      	movs	r3, #0
 80008ac:	e020      	b.n	80008f0 <MP3_Play+0x98>
	if(!VS1053_SetVolume( 0x0F, 0x0F )) return false;	/* Small number is louder */
 80008ae:	210f      	movs	r1, #15
 80008b0:	200f      	movs	r0, #15
 80008b2:	f000 fadf 	bl	8000e74 <VS1053_SetVolume>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f083 0301 	eor.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MP3_Play+0x6e>
 80008c2:	2300      	movs	r3, #0
 80008c4:	e014      	b.n	80008f0 <MP3_Play+0x98>

	/* Open file to read */
	if(f_open(&mp3File, filename, FA_READ) != FR_OK) return false;
 80008c6:	2201      	movs	r2, #1
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MP3_Play+0xa4>)
 80008cc:	f007 f9ac 	bl	8007c28 <f_open>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MP3_Play+0x82>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e00a      	b.n	80008f0 <MP3_Play+0x98>

	/* Get the file size */
	mp3FileSize = f_size(&mp3File);
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MP3_Play+0xa4>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <MP3_Play+0xa8>)
 80008e0:	6013      	str	r3, [r2, #0]

	/* Set flags */
	isFileOpen = true;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MP3_Play+0xac>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
	isPlaying = true;
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <MP3_Play+0xa0>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]

    return true;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000c6 	.word	0x200000c6
 80008fc:	20001100 	.word	0x20001100
 8000900:	200000bc 	.word	0x200000bc
 8000904:	200000c7 	.word	0x200000c7

08000908 <MP3_Stop>:

void MP3_Stop(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	/* Refer to page 49 of VS1053 datasheet */

	uint16_t mode;
	VS1053_SendEndFill(2052);	/* send endfill bytes */
 800090e:	f640 0004 	movw	r0, #2052	; 0x804
 8000912:	f000 fb5f 	bl	8000fd4 <VS1053_SendEndFill>
	VS1053_SetMode(0x4808);		/* SM LINE1 | SM SDINEW | SM CANCEL */
 8000916:	f644 0008 	movw	r0, #18440	; 0x4808
 800091a:	f000 face 	bl	8000eba <VS1053_SetMode>
	VS1053_SendEndFill(32);		/* send endfill bytes */
 800091e:	2020      	movs	r0, #32
 8000920:	f000 fb58 	bl	8000fd4 <VS1053_SendEndFill>
	LL_mDelay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f004 fdb3 	bl	8005490 <LL_mDelay>
	VS1053_GetMode(&mode);		/* get mode value */
 800092a:	1dbb      	adds	r3, r7, #6
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fadc 	bl	8000eea <VS1053_GetMode>
	if((mode & 0x08) != 0x0)	/* if SM CANCEL is not clear, soft reset */
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	f003 0308 	and.w	r3, r3, #8
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MP3_Stop+0x38>
	{
		VS1053_SoftReset();
 800093c:	f000 fa84 	bl	8000e48 <VS1053_SoftReset>
	}

	f_close(&mp3File);
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <MP3_Stop+0x54>)
 8000942:	f007 fe16 	bl	8008572 <f_close>
	isPlaying = false;			/* Stop flag */
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MP3_Stop+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	isFileOpen = false;			/* Close flag */
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MP3_Stop+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20001100 	.word	0x20001100
 8000960:	200000c6 	.word	0x200000c6
 8000964:	200000c7 	.word	0x200000c7

08000968 <MP3_Feeder>:
	if(!isPlaying) isPlaying = true;
}

/* Send mp3 buffer to VS1053 */
void MP3_Feeder(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	if(!isPlaying || !isFileOpen) return;
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MP3_Feeder+0xa0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	f083 0301 	eor.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d144      	bne.n	8000a04 <MP3_Feeder+0x9c>
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MP3_Feeder+0xa4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f083 0301 	eor.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d13d      	bne.n	8000a04 <MP3_Feeder+0x9c>

	if(mp3FileSize > BUFFER_SIZE)
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MP3_Feeder+0xa8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b20      	cmp	r3, #32
 800098e:	d90e      	bls.n	80009ae <MP3_Feeder+0x46>
	{
		/* Fill the buffer */
		f_read(&mp3File, mp3Buffer, BUFFER_SIZE, (void*)&readBytes);
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MP3_Feeder+0xac>)
 8000992:	2220      	movs	r2, #32
 8000994:	4920      	ldr	r1, [pc, #128]	; (8000a18 <MP3_Feeder+0xb0>)
 8000996:	4821      	ldr	r0, [pc, #132]	; (8000a1c <MP3_Feeder+0xb4>)
 8000998:	f007 fc0e 	bl	80081b8 <f_read>

		/* Tx buffer */
		VS1053_SdiWrite32( mp3Buffer );
 800099c:	481e      	ldr	r0, [pc, #120]	; (8000a18 <MP3_Feeder+0xb0>)
 800099e:	f000 fc3f 	bl	8001220 <VS1053_SdiWrite32>

		/* bytes to send */
		mp3FileSize -= BUFFER_SIZE;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MP3_Feeder+0xa8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b20      	subs	r3, #32
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <MP3_Feeder+0xa8>)
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e02b      	b.n	8000a06 <MP3_Feeder+0x9e>
	}
	else
	{
		/* Read left bytes */
		f_read(&mp3File, mp3Buffer, mp3FileSize, (void*)&readBytes);
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MP3_Feeder+0xa8>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MP3_Feeder+0xac>)
 80009b4:	4918      	ldr	r1, [pc, #96]	; (8000a18 <MP3_Feeder+0xb0>)
 80009b6:	4819      	ldr	r0, [pc, #100]	; (8000a1c <MP3_Feeder+0xb4>)
 80009b8:	f007 fbfe 	bl	80081b8 <f_read>

		/* Tx buffer */
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MP3_Feeder+0xb8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	801a      	strh	r2, [r3, #0]
 80009c2:	e015      	b.n	80009f0 <MP3_Feeder+0x88>
		{
			while(!VS1053_SdiWrite(*(mp3Buffer + cnt)));
 80009c4:	bf00      	nop
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MP3_Feeder+0xb8>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MP3_Feeder+0xb0>)
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fbf6 	bl	80011c4 <VS1053_SdiWrite>
 80009d8:	4603      	mov	r3, r0
 80009da:	f083 0301 	eor.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f0      	bne.n	80009c6 <MP3_Feeder+0x5e>
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MP3_Feeder+0xb8>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MP3_Feeder+0xb8>)
 80009ee:	801a      	strh	r2, [r3, #0]
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MP3_Feeder+0xb8>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MP3_Feeder+0xa8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3e2      	bcc.n	80009c4 <MP3_Feeder+0x5c>
		}

		/* Stop when played the whole file */
		MP3_Stop();
 80009fe:	f7ff ff83 	bl	8000908 <MP3_Stop>
 8000a02:	e000      	b.n	8000a06 <MP3_Feeder+0x9e>
	if(!isPlaying || !isFileOpen) return;
 8000a04:	bf00      	nop
	}
}
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000c6 	.word	0x200000c6
 8000a0c:	200000c7 	.word	0x200000c7
 8000a10:	200000bc 	.word	0x200000bc
 8000a14:	200000c0 	.word	0x200000c0
 8000a18:	2000009c 	.word	0x2000009c
 8000a1c:	20001100 	.word	0x20001100
 8000a20:	200000c4 	.word	0x200000c4

08000a24 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	619a      	str	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	041a      	lsls	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	619a      	str	r2, [r3, #24]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <u8x8_stm32_gpio_and_delay>:
#define SSD1306_TIMEOUT		100
#define SSD1306_SPIDRV		&spi2drv

// u8g2 gpio & delay control callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	72fb      	strb	r3, [r7, #11]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	72bb      	strb	r3, [r7, #10]
  /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
  switch(msg)
 8000a72:	7afb      	ldrb	r3, [r7, #11]
 8000a74:	3b28      	subs	r3, #40	; 0x28
 8000a76:	2b23      	cmp	r3, #35	; 0x23
 8000a78:	d87a      	bhi.n	8000b70 <u8x8_stm32_gpio_and_delay+0x110>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <u8x8_stm32_gpio_and_delay+0x20>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000b71 	.word	0x08000b71
 8000a84:	08000b11 	.word	0x08000b11
 8000a88:	08000b71 	.word	0x08000b71
 8000a8c:	08000b71 	.word	0x08000b71
 8000a90:	08000b71 	.word	0x08000b71
 8000a94:	08000b71 	.word	0x08000b71
 8000a98:	08000b71 	.word	0x08000b71
 8000a9c:	08000b71 	.word	0x08000b71
 8000aa0:	08000b71 	.word	0x08000b71
 8000aa4:	08000b71 	.word	0x08000b71
 8000aa8:	08000b71 	.word	0x08000b71
 8000aac:	08000b71 	.word	0x08000b71
 8000ab0:	08000b71 	.word	0x08000b71
 8000ab4:	08000b71 	.word	0x08000b71
 8000ab8:	08000b71 	.word	0x08000b71
 8000abc:	08000b71 	.word	0x08000b71
 8000ac0:	08000b71 	.word	0x08000b71
 8000ac4:	08000b71 	.word	0x08000b71
 8000ac8:	08000b71 	.word	0x08000b71
 8000acc:	08000b71 	.word	0x08000b71
 8000ad0:	08000b71 	.word	0x08000b71
 8000ad4:	08000b71 	.word	0x08000b71
 8000ad8:	08000b71 	.word	0x08000b71
 8000adc:	08000b71 	.word	0x08000b71
 8000ae0:	08000b71 	.word	0x08000b71
 8000ae4:	08000b71 	.word	0x08000b71
 8000ae8:	08000b71 	.word	0x08000b71
 8000aec:	08000b71 	.word	0x08000b71
 8000af0:	08000b71 	.word	0x08000b71
 8000af4:	08000b71 	.word	0x08000b71
 8000af8:	08000b71 	.word	0x08000b71
 8000afc:	08000b71 	.word	0x08000b71
 8000b00:	08000b71 	.word	0x08000b71
 8000b04:	08000b23 	.word	0x08000b23
 8000b08:	08000b3d 	.word	0x08000b3d
 8000b0c:	08000b57 	.word	0x08000b57
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    /* Insert codes for initialization */
    break;
  case U8X8_MSG_DELAY_MILLI:
    /* ms Delay */
	hal_delay_us(10*arg_int);
 8000b10:	7aba      	ldrb	r2, [r7, #10]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00e fc1a 	bl	800f354 <hal_delay_us>
    break;
 8000b20:	e026      	b.n	8000b70 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_CS:
    /* Insert codes for SS pin control */
    if(arg_int) {
 8000b22:	7abb      	ldrb	r3, [r7, #10]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d004      	beq.n	8000b32 <u8x8_stm32_gpio_and_delay+0xd2>
      LL_GPIO_SetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4814      	ldr	r0, [pc, #80]	; (8000b7c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000b2c:	f7ff ff7a 	bl	8000a24 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
    }
    break;
 8000b30:	e01e      	b.n	8000b70 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000b32:	2104      	movs	r1, #4
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000b36:	f7ff ff83 	bl	8000a40 <LL_GPIO_ResetOutputPin>
    break;
 8000b3a:	e019      	b.n	8000b70 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_DC:
    /* Insert codes for DC pin control */
    if(arg_int) {
 8000b3c:	7abb      	ldrb	r3, [r7, #10]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <u8x8_stm32_gpio_and_delay+0xec>
      LL_GPIO_SetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000b42:	2102      	movs	r1, #2
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000b46:	f7ff ff6d 	bl	8000a24 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
    }
    break;
 8000b4a:	e011      	b.n	8000b70 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000b50:	f7ff ff76 	bl	8000a40 <LL_GPIO_ResetOutputPin>
    break;
 8000b54:	e00c      	b.n	8000b70 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_RESET:
    /* Insert codes for RST pin control */
    if(arg_int) {
 8000b56:	7abb      	ldrb	r3, [r7, #10]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <u8x8_stm32_gpio_and_delay+0x106>
      LL_GPIO_SetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000b60:	f7ff ff60 	bl	8000a24 <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
    }
    break;
 8000b64:	e003      	b.n	8000b6e <u8x8_stm32_gpio_and_delay+0x10e>
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 8000b66:	2101      	movs	r1, #1
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <u8x8_stm32_gpio_and_delay+0x11c>)
 8000b6a:	f7ff ff69 	bl	8000a40 <LL_GPIO_ResetOutputPin>
    break;
 8000b6e:	bf00      	nop
  }
  return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40020800 	.word	0x40020800

08000b80 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	72fb      	strb	r3, [r7, #11]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	72bb      	strb	r3, [r7, #10]
  uint8_t* data = arg_ptr;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	617b      	str	r3, [r7, #20]

  switch(msg) {
 8000b96:	7afb      	ldrb	r3, [r7, #11]
 8000b98:	3b14      	subs	r3, #20
 8000b9a:	2b0c      	cmp	r3, #12
 8000b9c:	d842      	bhi.n	8000c24 <u8x8_byte_stm32_hw_spi+0xa4>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <u8x8_byte_stm32_hw_spi+0x24>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000c29 	.word	0x08000c29
 8000ba8:	08000c25 	.word	0x08000c25
 8000bac:	08000c25 	.word	0x08000c25
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	08000bf5 	.word	0x08000bf5
 8000bb8:	08000c0d 	.word	0x08000c0d
 8000bbc:	08000c25 	.word	0x08000c25
 8000bc0:	08000c25 	.word	0x08000c25
 8000bc4:	08000c25 	.word	0x08000c25
 8000bc8:	08000c25 	.word	0x08000c25
 8000bcc:	08000c25 	.word	0x08000c25
 8000bd0:	08000c25 	.word	0x08000c25
 8000bd4:	08000be7 	.word	0x08000be7
  case U8X8_MSG_BYTE_SEND:
    /* Insert codes to transmit data */
	hal_spi_transfer(SSD1306_SPIDRV, data, arg_int, SSD1306_TIMEOUT);
 8000bd8:	7aba      	ldrb	r2, [r7, #10]
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	6979      	ldr	r1, [r7, #20]
 8000bde:	4815      	ldr	r0, [pc, #84]	; (8000c34 <u8x8_byte_stm32_hw_spi+0xb4>)
 8000be0:	f010 fe5e 	bl	80118a0 <hal_spi_transfer>
    break;
 8000be4:	e021      	b.n	8000c2a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_INIT:
    /* Insert codes to begin SPI transmission */
    break;
  case U8X8_MSG_BYTE_SET_DC:
    /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
    u8x8_gpio_SetDC(u8x8, arg_int);
 8000be6:	7abb      	ldrb	r3, [r7, #10]
 8000be8:	461a      	mov	r2, r3
 8000bea:	214a      	movs	r1, #74	; 0x4a
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f00d fe00 	bl	800e7f2 <u8x8_gpio_call>
    break;
 8000bf2:	e01a      	b.n	8000c2a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_START_TRANSFER:
    /* Select slave, U8X8_MSG_GPIO_CS will be called */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2149      	movs	r1, #73	; 0x49
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f00d fdf7 	bl	800e7f2 <u8x8_gpio_call>
    hal_delay_us(100);
 8000c04:	2064      	movs	r0, #100	; 0x64
 8000c06:	f00e fba5 	bl	800f354 <hal_delay_us>
    break;
 8000c0a:	e00e      	b.n	8000c2a <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_END_TRANSFER:
	hal_delay_us(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f00e fba1 	bl	800f354 <hal_delay_us>
    /* Insert codes to end SPI transmission */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	2149      	movs	r1, #73	; 0x49
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f00d fde8 	bl	800e7f2 <u8x8_gpio_call>
    break;
 8000c22:	e002      	b.n	8000c2a <u8x8_byte_stm32_hw_spi+0xaa>
  default:
    return 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	e001      	b.n	8000c2c <u8x8_byte_stm32_hw_spi+0xac>
    break;
 8000c28:	bf00      	nop
  }
  return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20007b0c 	.word	0x20007b0c

08000c38 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <LL_GPIO_IsInputPinSet>:
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	889a      	ldrh	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8000ca4:	e006      	b.n	8000cb4 <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	889b      	ldrh	r3, [r3, #4]
 8000caa:	461a      	mov	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	0412      	lsls	r2, r2, #16
 8000cb2:	619a      	str	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <hal_gpio_readpin>:
	} else {
		return false;
	}
}

static inline uint32_t hal_gpio_readpin(const GpioPin* gpio) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	return LL_GPIO_IsInputPinSet(gpio->port, gpio->pin);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	889b      	ldrh	r3, [r3, #4]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f7ff ffc3 	bl	8000c5e <LL_GPIO_IsInputPinSet>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <VS1053_Init>:
/* endFill byte is required to stop playing */
uint8_t endFillByte;

/* Initialize VS1053 */
bool VS1053_Init()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
//	uint16_t status = 0;

	XCS_HIGH;		    /* XCS High */
 8000cea:	2101      	movs	r1, #1
 8000cec:	4841      	ldr	r0, [pc, #260]	; (8000df4 <VS1053_Init+0x110>)
 8000cee:	f7ff ffcb 	bl	8000c88 <hal_gpio_write>
	XDCS_HIGH;		    /* XDCS High */
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4840      	ldr	r0, [pc, #256]	; (8000df8 <VS1053_Init+0x114>)
 8000cf6:	f7ff ffc7 	bl	8000c88 <hal_gpio_write>
	VS1053_Reset();     /* Hard Reset */
 8000cfa:	f000 f883 	bl	8000e04 <VS1053_Reset>
	/* Read Status to check SPI */
//	if(!VS1053_SciRead(VS1053_REG_STATUS, &status)) return false;
//	if(((status >> 4) & 0x0F) != 0x04) return false;

	/* MP3 Mode GPIO configuration */
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC017)) return false; /* GPIO direction */
 8000cfe:	2307      	movs	r3, #7
 8000d00:	f24c 0117 	movw	r1, #49175	; 0xc017
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f9a1 	bl	800104c <VS1053_SciWrite>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f083 0301 	eor.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <VS1053_Init+0x36>
 8000d16:	2300      	movs	r3, #0
 8000d18:	e067      	b.n	8000dea <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 3)) return false;
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f994 	bl	800104c <VS1053_SciWrite>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <VS1053_Init+0x50>
 8000d30:	2300      	movs	r3, #0
 8000d32:	e05a      	b.n	8000dea <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC019)) return false; /* GPIO output */
 8000d34:	2307      	movs	r3, #7
 8000d36:	f24c 0119 	movw	r1, #49177	; 0xc019
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f986 	bl	800104c <VS1053_SciWrite>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <VS1053_Init+0x6c>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e04c      	b.n	8000dea <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000d50:	2306      	movs	r3, #6
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f979 	bl	800104c <VS1053_SciWrite>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <VS1053_Init+0x86>
 8000d66:	2300      	movs	r3, #0
 8000d68:	e03f      	b.n	8000dea <VS1053_Init+0x106>

	/* Soft reset */
	if(!VS1053_SoftReset()) return false;
 8000d6a:	f000 f86d 	bl	8000e48 <VS1053_SoftReset>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f083 0301 	eor.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <VS1053_Init+0x9a>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e035      	b.n	8000dea <VS1053_Init+0x106>

	/* x4.0 Clock */
	if(!VS1053_SciWrite(VS1053_REG_CLOCKF, 0xa000)) return false;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f961 	bl	800104c <VS1053_SciWrite>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f083 0301 	eor.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <VS1053_Init+0xb6>
 8000d96:	2300      	movs	r3, #0
 8000d98:	e027      	b.n	8000dea <VS1053_Init+0x106>

	LL_SPI_SetBaudRatePrescaler(vs1053spidrv->spi, LL_SPI_BAUDRATEPRESCALER_DIV16); /* 90MHz / 16 = about 5.6mhz */
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <VS1053_Init+0x118>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2118      	movs	r1, #24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff48 	bl	8000c38 <LL_SPI_SetBaudRatePrescaler>
//	if(!VS1053_SciRead(VS1053_REG_STATUS, &status)) return false;
//	if(((status >> 4) & 0x0F) != 0x04) return false;

	/* Read endFill Byte */
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000da8:	2307      	movs	r3, #7
 8000daa:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f94c 	bl	800104c <VS1053_SciWrite>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <VS1053_Init+0xe0>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e012      	b.n	8000dea <VS1053_Init+0x106>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000dc4:	2206      	movs	r2, #6
 8000dc6:	1dbb      	adds	r3, r7, #6
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4610      	mov	r0, r2
 8000dcc:	f000 f984 	bl	80010d8 <VS1053_SciRead>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <VS1053_Init+0xfc>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e004      	b.n	8000dea <VS1053_Init+0x106>
	endFillByte = regVal & 0xFF;
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <VS1053_Init+0x11c>)
 8000de6:	701a      	strb	r2, [r3, #0]

	return true;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	080142cc 	.word	0x080142cc
 8000df8:	080142d4 	.word	0x080142d4
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20002130 	.word	0x20002130

08000e04 <VS1053_Reset>:

/* Hard reset */
void VS1053_Reset()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8000e0a:	23ff      	movs	r3, #255	; 0xff
 8000e0c:	71fb      	strb	r3, [r7, #7]
	XRST_LOW;		                                    /* XRST Low */
 8000e0e:	2100      	movs	r1, #0
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <VS1053_Reset+0x3c>)
 8000e12:	f7ff ff39 	bl	8000c88 <hal_gpio_write>
	hal_spi_transfer(vs1053spidrv, &dummy, 1, VS1053_SPI_TIMEOUT); /* Tx Dummy */
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <VS1053_Reset+0x40>)
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	1df9      	adds	r1, r7, #7
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f010 fd3e 	bl	80118a0 <hal_spi_transfer>
	LL_mDelay(10);										/* 10ms Delay */
 8000e24:	200a      	movs	r0, #10
 8000e26:	f004 fb33 	bl	8005490 <LL_mDelay>
	XRST_HIGH;			                                /* XRST High */
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <VS1053_Reset+0x3c>)
 8000e2e:	f7ff ff2b 	bl	8000c88 <hal_gpio_write>
	LL_mDelay(10);
 8000e32:	200a      	movs	r0, #10
 8000e34:	f004 fb2c 	bl	8005490 <LL_mDelay>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	080142dc 	.word	0x080142dc
 8000e44:	20000000 	.word	0x20000000

08000e48 <VS1053_SoftReset>:

/* Soft reset */
bool VS1053_SoftReset()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_MODE, 0x4804)) return false;	/* SM LINE1 | SM SDINEW | SM RESET */
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f644 0104 	movw	r1, #18436	; 0x4804
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f8fa 	bl	800104c <VS1053_SciWrite>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f083 0301 	eor.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <VS1053_SoftReset+0x20>
 8000e64:	2300      	movs	r3, #0
 8000e66:	e003      	b.n	8000e70 <VS1053_SoftReset+0x28>
	LL_mDelay(100);
 8000e68:	2064      	movs	r0, #100	; 0x64
 8000e6a:	f004 fb11 	bl	8005490 <LL_mDelay>
	return true;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <VS1053_SetVolume>:

/* Volume control */
bool VS1053_SetVolume(uint8_t volumeLeft, uint8_t volumeRight)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
    uint16_t volume;
    volume = ( volumeLeft << 8 ) + volumeRight;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4413      	add	r3, r2
 8000e92:	81fb      	strh	r3, [r7, #14]

    if(!VS1053_SciWrite(VS1053_REG_VOL, volume)) return false;
 8000e94:	220b      	movs	r2, #11
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	f000 f8d6 	bl	800104c <VS1053_SciWrite>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f083 0301 	eor.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <VS1053_SetVolume+0x3c>
 8000eac:	2300      	movs	r3, #0
 8000eae:	e000      	b.n	8000eb2 <VS1053_SetVolume+0x3e>
    return true;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <VS1053_SetMode>:


/* Mode control */
bool VS1053_SetMode(uint16_t mode)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_MODE, mode)) return false;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4610      	mov	r0, r2
 8000ecc:	f000 f8be 	bl	800104c <VS1053_SciWrite>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f083 0301 	eor.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <VS1053_SetMode+0x26>
 8000edc:	2300      	movs	r3, #0
 8000ede:	e000      	b.n	8000ee2 <VS1053_SetMode+0x28>
	return true;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <VS1053_GetMode>:

bool VS1053_GetMode(uint16_t *mode)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	if(!VS1053_SciRead(VS1053_REG_MODE, mode)) return false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f8ee 	bl	80010d8 <VS1053_SciRead>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f083 0301 	eor.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <VS1053_GetMode+0x22>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e000      	b.n	8000f0e <VS1053_GetMode+0x24>
	return true;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <VS1053_AutoResync>:

/* Resync control */
bool VS1053_AutoResync()
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E29)) return false; /* Auto Resync */
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	f641 6129 	movw	r1, #7721	; 0x1e29
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f893 	bl	800104c <VS1053_SciWrite>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f083 0301 	eor.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <VS1053_AutoResync+0x20>
 8000f32:	2300      	movs	r3, #0
 8000f34:	e00d      	b.n	8000f52 <VS1053_AutoResync+0x3c>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000f36:	2306      	movs	r3, #6
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f886 	bl	800104c <VS1053_SciWrite>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <VS1053_AutoResync+0x3a>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <VS1053_AutoResync+0x3c>
	return true;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <VS1053_SetDecodeTime>:

/* Set decode time */
bool VS1053_SetDecodeTime(uint16_t time)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000f60:	2204      	movs	r2, #4
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f000 f870 	bl	800104c <VS1053_SciWrite>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f083 0301 	eor.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <VS1053_SetDecodeTime+0x26>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e00e      	b.n	8000f9a <VS1053_SetDecodeTime+0x44>
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f000 f862 	bl	800104c <VS1053_SciWrite>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <VS1053_SetDecodeTime+0x42>
 8000f94:	2300      	movs	r3, #0
 8000f96:	e000      	b.n	8000f9a <VS1053_SetDecodeTime+0x44>
	return true;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <VS1053_GetDecodeTime>:

uint16_t VS1053_GetDecodeTime(void) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
	uint16_t time = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciRead(VS1053_REG_DECODE_TIME, &time)) return false;
 8000fac:	2204      	movs	r2, #4
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f000 f890 	bl	80010d8 <VS1053_SciRead>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f083 0301 	eor.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <VS1053_GetDecodeTime+0x26>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e000      	b.n	8000fca <VS1053_GetDecodeTime+0x28>
	return time;
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <VS1053_SendEndFill>:

/* Send endfill bytes */
bool VS1053_SendEndFill(uint16_t num)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000fde:	2307      	movs	r3, #7
 8000fe0:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f831 	bl	800104c <VS1053_SciWrite>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f083 0301 	eor.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <VS1053_SendEndFill+0x26>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e022      	b.n	8001040 <VS1053_SendEndFill+0x6c>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4610      	mov	r0, r2
 8001004:	f000 f868 	bl	80010d8 <VS1053_SciRead>
 8001008:	4603      	mov	r3, r0
 800100a:	f083 0301 	eor.w	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <VS1053_SendEndFill+0x44>
 8001014:	2300      	movs	r3, #0
 8001016:	e013      	b.n	8001040 <VS1053_SendEndFill+0x6c>
	endFillByte = regVal & 0xFF;
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <VS1053_SendEndFill+0x74>)
 800101e:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < num; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	81fb      	strh	r3, [r7, #14]
 8001024:	e007      	b.n	8001036 <VS1053_SendEndFill+0x62>
	{
		VS1053_SdiWrite(endFillByte);
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <VS1053_SendEndFill+0x74>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f8ca 	bl	80011c4 <VS1053_SdiWrite>
	for(uint16_t i = 0; i < num; i++)
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	3301      	adds	r3, #1
 8001034:	81fb      	strh	r3, [r7, #14]
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3f3      	bcc.n	8001026 <VS1053_SendEndFill+0x52>
	}
	return true;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20002130 	.word	0x20002130

0800104c <VS1053_SciWrite>:
	else return true; // busy
}

/* SCI Tx */
bool VS1053_SciWrite( uint8_t address, uint16_t input )
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	buffer[0] = VS1053_WRITE_CMD;
 800105c:	2302      	movs	r3, #2
 800105e:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	737b      	strb	r3, [r7, #13]
	buffer[2] = input >> 8;			/* Input MSB */
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = input & 0x00FF;		/* Input LSB */
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8001074:	bf00      	nop
 8001076:	4815      	ldr	r0, [pc, #84]	; (80010cc <VS1053_SciWrite+0x80>)
 8001078:	f7ff fe22 	bl	8000cc0 <hal_gpio_readpin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f9      	beq.n	8001076 <VS1053_SciWrite+0x2a>

	XCS_LOW;			/* XCS Low */
 8001082:	2100      	movs	r1, #0
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <VS1053_SciWrite+0x84>)
 8001086:	f7ff fdff 	bl	8000c88 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, buffer, sizeof(buffer), VS1053_SPI_TIMEOUT) != true) return false;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <VS1053_SciWrite+0x88>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f107 010c 	add.w	r1, r7, #12
 8001092:	230a      	movs	r3, #10
 8001094:	2204      	movs	r2, #4
 8001096:	f010 fc03 	bl	80118a0 <hal_spi_transfer>
 800109a:	4603      	mov	r3, r0
 800109c:	f083 0301 	eor.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <VS1053_SciWrite+0x5e>
 80010a6:	2300      	movs	r3, #0
 80010a8:	e00b      	b.n	80010c2 <VS1053_SciWrite+0x76>
	XCS_HIGH;			/* XCS High */
 80010aa:	2101      	movs	r1, #1
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <VS1053_SciWrite+0x84>)
 80010ae:	f7ff fdeb 	bl	8000c88 <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 80010b2:	bf00      	nop
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <VS1053_SciWrite+0x80>)
 80010b6:	f7ff fe03 	bl	8000cc0 <hal_gpio_readpin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f9      	beq.n	80010b4 <VS1053_SciWrite+0x68>

	return true;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	080142e4 	.word	0x080142e4
 80010d0:	080142cc 	.word	0x080142cc
 80010d4:	20000000 	.word	0x20000000

080010d8 <VS1053_SciRead>:

/* SCI TxRx */
bool VS1053_SciRead( uint8_t address, uint16_t *res)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 80010e4:	23ff      	movs	r3, #255	; 0xff
 80010e6:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];

	txBuffer[0] = VS1053_READ_CMD;
 80010e8:	2303      	movs	r3, #3
 80010ea:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = address;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	737b      	strb	r3, [r7, #13]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 80010f0:	bf00      	nop
 80010f2:	4831      	ldr	r0, [pc, #196]	; (80011b8 <VS1053_SciRead+0xe0>)
 80010f4:	f7ff fde4 	bl	8000cc0 <hal_gpio_readpin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f9      	beq.n	80010f2 <VS1053_SciRead+0x1a>

	XCS_LOW;        /* XCS Low */
 80010fe:	2100      	movs	r1, #0
 8001100:	482e      	ldr	r0, [pc, #184]	; (80011bc <VS1053_SciRead+0xe4>)
 8001102:	f7ff fdc1 	bl	8000c88 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, txBuffer, sizeof(txBuffer), VS1053_SPI_TIMEOUT) != true) return false;
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <VS1053_SciRead+0xe8>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	f107 010c 	add.w	r1, r7, #12
 800110e:	230a      	movs	r3, #10
 8001110:	2202      	movs	r2, #2
 8001112:	f010 fbc5 	bl	80118a0 <hal_spi_transfer>
 8001116:	4603      	mov	r3, r0
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <VS1053_SciRead+0x4e>
 8001122:	2300      	movs	r3, #0
 8001124:	e044      	b.n	80011b0 <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[0], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <VS1053_SciRead+0xe8>)
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	f107 0208 	add.w	r2, r7, #8
 800112e:	f107 010f 	add.w	r1, r7, #15
 8001132:	230a      	movs	r3, #10
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	f010 fc0c 	bl	8011954 <hal_spi_txrx>
 800113c:	4603      	mov	r3, r0
 800113e:	f083 0301 	eor.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <VS1053_SciRead+0x74>
 8001148:	2300      	movs	r3, #0
 800114a:	e031      	b.n	80011b0 <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[1], 1, VS1053_SPI_TIMEOUT) != true) return false;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <VS1053_SciRead+0xe8>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	f107 010f 	add.w	r1, r7, #15
 800115a:	230a      	movs	r3, #10
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	f010 fbf8 	bl	8011954 <hal_spi_txrx>
 8001164:	4603      	mov	r3, r0
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <VS1053_SciRead+0x9c>
 8001170:	2300      	movs	r3, #0
 8001172:	e01d      	b.n	80011b0 <VS1053_SciRead+0xd8>
	XCS_HIGH;       /* XCS High */
 8001174:	2101      	movs	r1, #1
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <VS1053_SciRead+0xe4>)
 8001178:	f7ff fd86 	bl	8000c88 <hal_gpio_write>

	*res = rxBuffer[0];     /* Received data */
 800117c:	7a3b      	ldrb	r3, [r7, #8]
 800117e:	b29a      	uxth	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	801a      	strh	r2, [r3, #0]
	*res <<= 8;				/* MSB */
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b29a      	uxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	801a      	strh	r2, [r3, #0]
	*res |= rxBuffer[1];	/* LSB */
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	7a7b      	ldrb	r3, [r7, #9]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b29a      	uxth	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	801a      	strh	r2, [r3, #0]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 80011a0:	bf00      	nop
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <VS1053_SciRead+0xe0>)
 80011a4:	f7ff fd8c 	bl	8000cc0 <hal_gpio_readpin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f9      	beq.n	80011a2 <VS1053_SciRead+0xca>
	return true;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	080142e4 	.word	0x080142e4
 80011bc:	080142cc 	.word	0x080142cc
 80011c0:	20000000 	.word	0x20000000

080011c4 <VS1053_SdiWrite>:

/* SDI Tx */
bool VS1053_SdiWrite( uint8_t input )
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 80011ce:	bf00      	nop
 80011d0:	4810      	ldr	r0, [pc, #64]	; (8001214 <VS1053_SdiWrite+0x50>)
 80011d2:	f7ff fd75 	bl	8000cc0 <hal_gpio_readpin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f9      	beq.n	80011d0 <VS1053_SdiWrite+0xc>

	XDCS_LOW;			/* XDCS Low(SDI) */
 80011dc:	2100      	movs	r1, #0
 80011de:	480e      	ldr	r0, [pc, #56]	; (8001218 <VS1053_SdiWrite+0x54>)
 80011e0:	f7ff fd52 	bl	8000c88 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, &input, 1, VS1053_SPI_TIMEOUT) != true) return false;		/* SPI Tx 1 byte */
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <VS1053_SdiWrite+0x58>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	1df9      	adds	r1, r7, #7
 80011ea:	230a      	movs	r3, #10
 80011ec:	2201      	movs	r2, #1
 80011ee:	f010 fb57 	bl	80118a0 <hal_spi_transfer>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <VS1053_SdiWrite+0x3e>
 80011fe:	2300      	movs	r3, #0
 8001200:	e004      	b.n	800120c <VS1053_SdiWrite+0x48>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8001202:	2101      	movs	r1, #1
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <VS1053_SdiWrite+0x54>)
 8001206:	f7ff fd3f 	bl	8000c88 <hal_gpio_write>

	return true;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	080142e4 	.word	0x080142e4
 8001218:	080142d4 	.word	0x080142d4
 800121c:	20000000 	.word	0x20000000

08001220 <VS1053_SdiWrite32>:

/* SDI Tx 32 bytes */
bool VS1053_SdiWrite32( uint8_t *input32 )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8001228:	bf00      	nop
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <VS1053_SdiWrite32+0x50>)
 800122c:	f7ff fd48 	bl	8000cc0 <hal_gpio_readpin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f9      	beq.n	800122a <VS1053_SdiWrite32+0xa>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8001236:	2100      	movs	r1, #0
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <VS1053_SdiWrite32+0x54>)
 800123a:	f7ff fd25 	bl	8000c88 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, input32, 32, VS1053_SPI_TIMEOUT) != true) return false; /* SPI Tx 32 bytes */
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <VS1053_SdiWrite32+0x58>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	230a      	movs	r3, #10
 8001244:	2220      	movs	r2, #32
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f010 fb2a 	bl	80118a0 <hal_spi_transfer>
 800124c:	4603      	mov	r3, r0
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <VS1053_SdiWrite32+0x3c>
 8001258:	2300      	movs	r3, #0
 800125a:	e004      	b.n	8001266 <VS1053_SdiWrite32+0x46>
	XDCS_HIGH;			/* XDCS High(SDI) */
 800125c:	2101      	movs	r1, #1
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <VS1053_SdiWrite32+0x54>)
 8001260:	f7ff fd12 	bl	8000c88 <hal_gpio_write>

	return true;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	080142e4 	.word	0x080142e4
 8001274:	080142d4 	.word	0x080142d4
 8001278:	20000000 	.word	0x20000000

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f8fc 	bl	80014a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f010 fece 	bl	801204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f010 fea0 	bl	8011ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20002134 	.word	0x20002134

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20002134 	.word	0x20002134

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff4c 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ca:	f7ff ff61 	bl	8001390 <__NVIC_GetPriorityGrouping>
 80014ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	6978      	ldr	r0, [r7, #20]
 80014d6:	f7ff ffb1 	bl	800143c <NVIC_EncodePriority>
 80014da:	4602      	mov	r2, r0
 80014dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff80 	bl	80013e8 <__NVIC_SetPriority>
}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff54 	bl	80013ac <__NVIC_EnableIRQ>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff fee6 	bl	80012e8 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e099      	b.n	800165c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001548:	e00f      	b.n	800156a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800154a:	f7ff fecd 	bl	80012e8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b05      	cmp	r3, #5
 8001556:	d908      	bls.n	800156a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2220      	movs	r2, #32
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e078      	b.n	800165c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e8      	bne.n	800154a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_DMA_Init+0x158>)
 8001584:	4013      	ands	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001596:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d107      	bne.n	80015d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4313      	orrs	r3, r2
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f023 0307 	bic.w	r3, r3, #7
 80015ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d117      	bne.n	800162e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00e      	beq.n	800162e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fa9d 	bl	8001b50 <DMA_CheckFifoParam>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800162a:	2301      	movs	r3, #1
 800162c:	e016      	b.n	800165c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fa54 	bl	8001ae4 <DMA_CalcBaseAndBitshift>
 800163c:	4603      	mov	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	223f      	movs	r2, #63	; 0x3f
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	f010803f 	.word	0xf010803f

08001668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_DMA_Start_IT+0x26>
 800168a:	2302      	movs	r3, #2
 800168c:	e040      	b.n	8001710 <HAL_DMA_Start_IT+0xa8>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d12f      	bne.n	8001702 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2202      	movs	r2, #2
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f9e6 	bl	8001a88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	223f      	movs	r2, #63	; 0x3f
 80016c2:	409a      	lsls	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0216 	orr.w	r2, r2, #22
 80016d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0208 	orr.w	r2, r2, #8
 80016ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e005      	b.n	800170e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800170a:	2302      	movs	r3, #2
 800170c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800170e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d004      	beq.n	8001736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00c      	b.n	8001750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2205      	movs	r2, #5
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001768:	4b8e      	ldr	r3, [pc, #568]	; (80019a4 <HAL_DMA_IRQHandler+0x248>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a8e      	ldr	r2, [pc, #568]	; (80019a8 <HAL_DMA_IRQHandler+0x24c>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0a9b      	lsrs	r3, r3, #10
 8001774:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001786:	2208      	movs	r2, #8
 8001788:	409a      	lsls	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0204 	bic.w	r2, r2, #4
 80017ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2208      	movs	r2, #8
 80017b6:	409a      	lsls	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	2201      	movs	r2, #1
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d012      	beq.n	80017fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2201      	movs	r2, #1
 80017ec:	409a      	lsls	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	f043 0202 	orr.w	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	2204      	movs	r2, #4
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d012      	beq.n	8001834 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00b      	beq.n	8001834 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2204      	movs	r2, #4
 8001822:	409a      	lsls	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f043 0204 	orr.w	r2, r3, #4
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2210      	movs	r2, #16
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d043      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d03c      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2210      	movs	r2, #16
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d018      	beq.n	800189e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d024      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
 800188a:	e01f      	b.n	80018cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01b      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
 800189c:	e016      	b.n	80018cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0208 	bic.w	r2, r2, #8
 80018ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2220      	movs	r2, #32
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 808f 	beq.w	80019fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 8087 	beq.w	80019fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	2220      	movs	r2, #32
 80018f4:	409a      	lsls	r2, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b05      	cmp	r3, #5
 8001904:	d136      	bne.n	8001974 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0216 	bic.w	r2, r2, #22
 8001914:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001924:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <HAL_DMA_IRQHandler+0x1da>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0208 	bic.w	r2, r2, #8
 8001944:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	223f      	movs	r2, #63	; 0x3f
 800194c:	409a      	lsls	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001966:	2b00      	cmp	r3, #0
 8001968:	d07e      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
        }
        return;
 8001972:	e079      	b.n	8001a68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01d      	beq.n	80019be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	2b00      	cmp	r3, #0
 8001996:	d031      	beq.n	80019fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
 80019a0:	e02c      	b.n	80019fc <HAL_DMA_IRQHandler+0x2a0>
 80019a2:	bf00      	nop
 80019a4:	20000014 	.word	0x20000014
 80019a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	e01e      	b.n	80019fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0210 	bic.w	r2, r2, #16
 80019da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d032      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d022      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2205      	movs	r2, #5
 8001a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d307      	bcc.n	8001a44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f2      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x2cc>
 8001a42:	e000      	b.n	8001a46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
 8001a66:	e000      	b.n	8001a6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a68:	bf00      	nop
    }
  }
}
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b40      	cmp	r3, #64	; 0x40
 8001ab4:	d108      	bne.n	8001ac8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ac6:	e007      	b.n	8001ad8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	3b10      	subs	r3, #16
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <DMA_CalcBaseAndBitshift+0x64>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <DMA_CalcBaseAndBitshift+0x68>)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d909      	bls.n	8001b26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	1d1a      	adds	r2, r3, #4
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	659a      	str	r2, [r3, #88]	; 0x58
 8001b24:	e007      	b.n	8001b36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b2e:	f023 0303 	bic.w	r3, r3, #3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	aaaaaaab 	.word	0xaaaaaaab
 8001b4c:	08013d20 	.word	0x08013d20

08001b50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d11f      	bne.n	8001baa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d856      	bhi.n	8001c1e <DMA_CheckFifoParam+0xce>
 8001b70:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <DMA_CheckFifoParam+0x28>)
 8001b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b76:	bf00      	nop
 8001b78:	08001b89 	.word	0x08001b89
 8001b7c:	08001b9b 	.word	0x08001b9b
 8001b80:	08001b89 	.word	0x08001b89
 8001b84:	08001c1f 	.word	0x08001c1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d046      	beq.n	8001c22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b98:	e043      	b.n	8001c22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ba2:	d140      	bne.n	8001c26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba8:	e03d      	b.n	8001c26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb2:	d121      	bne.n	8001bf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d837      	bhi.n	8001c2a <DMA_CheckFifoParam+0xda>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <DMA_CheckFifoParam+0x70>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001bd1 	.word	0x08001bd1
 8001bc4:	08001bd7 	.word	0x08001bd7
 8001bc8:	08001bd1 	.word	0x08001bd1
 8001bcc:	08001be9 	.word	0x08001be9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd4:	e030      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d025      	beq.n	8001c2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be6:	e022      	b.n	8001c2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bf0:	d11f      	bne.n	8001c32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bf6:	e01c      	b.n	8001c32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d903      	bls.n	8001c06 <DMA_CheckFifoParam+0xb6>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d003      	beq.n	8001c0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c04:	e018      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0a:	e015      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c1c:	e00b      	b.n	8001c36 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e00a      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e008      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e006      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e004      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
 8001c30:	e002      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c32:	bf00      	nop
 8001c34:	e000      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c36:	bf00      	nop
    }
  } 
  
  return status; 
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e177      	b.n	8001f54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8166 	bne.w	8001f4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d005      	beq.n	8001c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d130      	bne.n	8001cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0201 	and.w	r2, r3, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d017      	beq.n	8001d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d123      	bne.n	8001d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80c0 	beq.w	8001f4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_GPIO_Init+0x324>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_GPIO_Init+0x324>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_GPIO_Init+0x324>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a61      	ldr	r2, [pc, #388]	; (8001f70 <HAL_GPIO_Init+0x328>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_GPIO_Init+0x32c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d037      	beq.n	8001e86 <HAL_GPIO_Init+0x23e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <HAL_GPIO_Init+0x330>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d031      	beq.n	8001e82 <HAL_GPIO_Init+0x23a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a56      	ldr	r2, [pc, #344]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_GPIO_Init+0x236>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a55      	ldr	r2, [pc, #340]	; (8001f80 <HAL_GPIO_Init+0x338>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x232>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_GPIO_Init+0x33c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x22e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a53      	ldr	r2, [pc, #332]	; (8001f88 <HAL_GPIO_Init+0x340>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x22a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_GPIO_Init+0x344>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x226>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_GPIO_Init+0x348>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x222>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a50      	ldr	r2, [pc, #320]	; (8001f94 <HAL_GPIO_Init+0x34c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x21e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <HAL_GPIO_Init+0x350>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x21a>
 8001e5e:	2309      	movs	r3, #9
 8001e60:	e012      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e62:	230a      	movs	r3, #10
 8001e64:	e010      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e66:	2308      	movs	r3, #8
 8001e68:	e00e      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00c      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e6e:	2306      	movs	r3, #6
 8001e70:	e00a      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e72:	2305      	movs	r3, #5
 8001e74:	e008      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e004      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e86:	2300      	movs	r3, #0
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f002 0203 	and.w	r2, r2, #3
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	4093      	lsls	r3, r2
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e98:	4935      	ldr	r1, [pc, #212]	; (8001f70 <HAL_GPIO_Init+0x328>)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eca:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	f67f ae84 	bls.w	8001c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40021400 	.word	0x40021400
 8001f8c:	40021800 	.word	0x40021800
 8001f90:	40021c00 	.word	0x40021c00
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40022400 	.word	0x40022400
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000014 	.word	0x20000014

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fbc:	f7ff fff0 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	08014304 	.word	0x08014304

08001fe0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	220f      	movs	r2, #15
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_GetClockConfig+0x5c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_RCC_GetClockConfig+0x5c>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_RCC_GetClockConfig+0x5c>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_GetClockConfig+0x5c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	08db      	lsrs	r3, r3, #3
 800201a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_RCC_GetClockConfig+0x60>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40023c00 	.word	0x40023c00

08002044 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e022      	b.n	800209c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f00f f895 	bl	8011198 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2203      	movs	r2, #3
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f814 	bl	80020a4 <HAL_SD_InitCard>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00a      	b.n	800209c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80020a4:	b5b0      	push	{r4, r5, r7, lr}
 80020a6:	b08e      	sub	sp, #56	; 0x38
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80020c0:	2376      	movs	r3, #118	; 0x76
 80020c2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681d      	ldr	r5, [r3, #0]
 80020c8:	466c      	mov	r4, sp
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020dc:	4628      	mov	r0, r5
 80020de:	f002 f863 	bl	80041a8 <SDIO_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80020e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e04f      	b.n	8002194 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80020f4:	4b29      	ldr	r3, [pc, #164]	; (800219c <HAL_SD_InitCard+0xf8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 f89b 	bl	800423a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_SD_InitCard+0xf8>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800210a:	2002      	movs	r0, #2
 800210c:	f7ff f8f8 	bl	8001300 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 ff6b 	bl	8002fec <SD_PowerON>
 8002116:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e02e      	b.n	8002194 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fe8a 	bl	8002e50 <SD_InitCard>
 800213c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00b      	beq.n	800215c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e01b      	b.n	8002194 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002164:	4618      	mov	r0, r3
 8002166:	f002 f8fa 	bl	800435e <SDMMC_CmdBlockLength>
 800216a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00f      	beq.n	8002192 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_SD_InitCard+0xfc>)
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bdb0      	pop	{r4, r5, r7, pc}
 800219c:	422580a0 	.word	0x422580a0
 80021a0:	004005ff 	.word	0x004005ff

080021a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d107      	bne.n	80021cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0c0      	b.n	800234e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	f040 80b9 	bne.w	800234c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80021e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	441a      	add	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d907      	bls.n	80021fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0a7      	b.n	800234e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2203      	movs	r2, #3
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a4b      	ldr	r2, [pc, #300]	; (800235c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002230:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2200      	movs	r2, #0
 8002238:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3380      	adds	r3, #128	; 0x80
 8002268:	4619      	mov	r1, r3
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	025b      	lsls	r3, r3, #9
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	f7ff f9f9 	bl	8001668 <HAL_DMA_Start_IT>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d017      	beq.n	80022ac <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a33      	ldr	r2, [pc, #204]	; (8002360 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002292:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e050      	b.n	800234e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d002      	beq.n	80022c0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	025b      	lsls	r3, r3, #9
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80022cc:	2390      	movs	r3, #144	; 0x90
 80022ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f107 0210 	add.w	r2, r7, #16
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 f80d 	bl	8004306 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d90a      	bls.n	8002308 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2282      	movs	r2, #130	; 0x82
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 f871 	bl	80043e6 <SDMMC_CmdReadMultiBlock>
 8002304:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002306:	e009      	b.n	800231c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2281      	movs	r2, #129	; 0x81
 800230c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002314:	4618      	mov	r0, r3
 8002316:	f002 f844 	bl	80043a2 <SDMMC_CmdReadSingleBlock>
 800231a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e002      	b.n	800234e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3730      	adds	r7, #48	; 0x30
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	08002c5f 	.word	0x08002c5f
 800235c:	08002cd1 	.word	0x08002cd1
 8002360:	004005ff 	.word	0x004005ff
 8002364:	4225858c 	.word	0x4225858c

08002368 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0c5      	b.n	800251c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 80be 	bne.w	800251a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	441a      	add	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d907      	bls.n	80023c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0ac      	b.n	800251c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2203      	movs	r2, #3
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80023ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80023f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	2200      	movs	r2, #0
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	2b01      	cmp	r3, #1
 8002404:	d002      	beq.n	800240c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	025b      	lsls	r3, r3, #9
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d90a      	bls.n	8002428 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	22a0      	movs	r2, #160	; 0xa0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800241e:	4618      	mov	r0, r3
 8002420:	f002 f825 	bl	800446e <SDMMC_CmdWriteMultiBlock>
 8002424:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002426:	e009      	b.n	800243c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2290      	movs	r2, #144	; 0x90
 800242c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fff8 	bl	800442a <SDMMC_CmdWriteSingleBlock>
 800243a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a39      	ldr	r2, [pc, #228]	; (800252c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e059      	b.n	800251c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3380      	adds	r3, #128	; 0x80
 800249e:	461a      	mov	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	025b      	lsls	r3, r3, #9
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	f7ff f8df 	bl	8001668 <HAL_DMA_Start_IT>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01c      	beq.n	80024ea <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80024be:	f023 0302 	bic.w	r3, r3, #2
 80024c2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e018      	b.n	800251c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80024f6:	2390      	movs	r3, #144	; 0x90
 80024f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f107 0210 	add.w	r2, r7, #16
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f001 fef8 	bl	8004306 <SDIO_ConfigData>

      return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3730      	adds	r7, #48	; 0x30
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	08002c35 	.word	0x08002c35
 8002528:	08002cd1 	.word	0x08002cd1
 800252c:	004005ff 	.word	0x004005ff
 8002530:	4225858c 	.word	0x4225858c

08002534 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_SD_IRQHandler+0x2e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fdfc 	bl	8003158 <SD_Read_IT>
 8002560:	e165      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 808f 	beq.w	8002690 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800258a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800258e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d039      	beq.n	800261e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <HAL_SD_IRQHandler+0x8a>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d011      	beq.n	80025e2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 ff76 	bl	80044b4 <SDMMC_CmdStopTransfer>
 80025c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f92f 	bl	8002840 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <HAL_SD_IRQHandler+0xda>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f002 fff2 	bl	80055f8 <HAL_SD_RxCpltCallback>
 8002614:	e10b      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f002 ffe4 	bl	80055e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800261c:	e107      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8102 	beq.w	800282e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d011      	beq.n	8002658 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f001 ff3b 	bl	80044b4 <SDMMC_CmdStopTransfer>
 800263e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8f4 	bl	8002840 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 80e5 	bne.w	800282e <HAL_SD_IRQHandler+0x2fa>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80df 	bne.w	800282e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0208 	bic.w	r2, r2, #8
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f002 ffab 	bl	80055e4 <HAL_SD_TxCpltCallback>
}
 800268e:	e0ce      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_SD_IRQHandler+0x17c>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fda6 	bl	80031fa <SD_Write_IT>
 80026ae:	e0be      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b6:	f240 233a 	movw	r3, #570	; 0x23a
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80b6 	beq.w	800282e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	f043 0202 	orr.w	r2, r3, #2
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	f043 0208 	orr.w	r2, r3, #8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	f043 0210 	orr.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	f043 0208 	orr.w	r2, r3, #8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f240 723a 	movw	r2, #1850	; 0x73a
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800275c:	f023 0302 	bic.w	r3, r3, #2
 8002760:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f001 fea4 	bl	80044b4 <SDMMC_CmdStopTransfer>
 800276c:	4602      	mov	r2, r0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f855 	bl	8002840 <HAL_SD_ErrorCallback>
}
 8002796:	e04a      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d045      	beq.n	800282e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_SD_IRQHandler+0x282>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_SD_IRQHandler+0x304>)
 80027bc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe ffa8 	bl	8001718 <HAL_DMA_Abort_IT>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d02f      	beq.n	800282e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 face 	bl	8002d74 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80027d8:	e029      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <HAL_SD_IRQHandler+0x2ba>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d011      	beq.n	8002812 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_SD_IRQHandler+0x308>)
 80027f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe ff8c 	bl	8001718 <HAL_DMA_Abort_IT>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d013      	beq.n	800282e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fae9 	bl	8002de2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002810:	e00d      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f002 fed2 	bl	80055d0 <HAL_SD_AbortCallback>
}
 800282c:	e7ff      	b.n	800282e <HAL_SD_IRQHandler+0x2fa>
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	08002d75 	.word	0x08002d75
 800283c:	08002de3 	.word	0x08002de3

08002840 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002862:	0f9b      	lsrs	r3, r3, #30
 8002864:	b2da      	uxtb	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	b2da      	uxtb	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002880:	0e1b      	lsrs	r3, r3, #24
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	b2da      	uxtb	r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	b2da      	uxtb	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b4:	0d1b      	lsrs	r3, r3, #20
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028d2:	0bdb      	lsrs	r3, r3, #15
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e4:	0b9b      	lsrs	r3, r3, #14
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f6:	0b5b      	lsrs	r3, r3, #13
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002908:	0b1b      	lsrs	r3, r3, #12
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2200      	movs	r2, #0
 800291a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	2b00      	cmp	r3, #0
 8002922:	d163      	bne.n	80029ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002928:	009a      	lsls	r2, r3, #2
 800292a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800292e:	4013      	ands	r3, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002934:	0f92      	lsrs	r2, r2, #30
 8002936:	431a      	orrs	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002940:	0edb      	lsrs	r3, r3, #27
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	b2da      	uxtb	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002952:	0e1b      	lsrs	r3, r3, #24
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	b2da      	uxtb	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002964:	0d5b      	lsrs	r3, r3, #21
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	b2da      	uxtb	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	b2da      	uxtb	r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002988:	0bdb      	lsrs	r3, r3, #15
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	b2da      	uxtb	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7e1b      	ldrb	r3, [r3, #24]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	3302      	adds	r3, #2
 80029ac:	2201      	movs	r2, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029b6:	fb03 f202 	mul.w	r2, r3, r2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	7a1b      	ldrb	r3, [r3, #8]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	2201      	movs	r2, #1
 80029ca:	409a      	lsls	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80029d8:	0a52      	lsrs	r2, r2, #9
 80029da:	fb03 f202 	mul.w	r2, r3, r2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e8:	661a      	str	r2, [r3, #96]	; 0x60
 80029ea:	e031      	b.n	8002a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d11d      	bne.n	8002a30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	431a      	orrs	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	029a      	lsls	r2, r3, #10
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	661a      	str	r2, [r3, #96]	; 0x60
 8002a2e:	e00f      	b.n	8002a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_SD_GetCardCSD+0x344>)
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e09d      	b.n	8002b8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a54:	0b9b      	lsrs	r3, r3, #14
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a66:	09db      	lsrs	r3, r3, #7
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	0fdb      	lsrs	r3, r3, #31
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	0f5b      	lsrs	r3, r3, #29
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	0d9b      	lsrs	r3, r3, #22
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	0d5b      	lsrs	r3, r3, #21
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	0bdb      	lsrs	r3, r3, #15
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	0b9b      	lsrs	r3, r3, #14
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	0b5b      	lsrs	r3, r3, #13
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	0b1b      	lsrs	r3, r3, #12
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	004005ff 	.word	0x004005ff

08002b9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa7e 	bl	8003108 <SD_SendStatus>
 8002c0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	0a5b      	lsrs	r3, r3, #9
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002c2a:	693b      	ldr	r3, [r7, #16]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	2b82      	cmp	r3, #130	; 0x82
 8002c72:	d111      	bne.n	8002c98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 fc1b 	bl	80044b4 <SDMMC_CmdStopTransfer>
 8002c7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff fdd4 	bl	8002840 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0208 	bic.w	r2, r2, #8
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f240 523a 	movw	r2, #1338	; 0x53a
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f002 fc99 	bl	80055f8 <HAL_SD_RxCpltCallback>
#endif
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fec6 	bl	8001a70 <HAL_DMA_GetError>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d03e      	beq.n	8002d68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d002      	beq.n	8002d06 <SD_DMAError+0x36>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d12d      	bne.n	8002d62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <SD_DMAError+0xa0>)
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff62 	bl	8002bf4 <HAL_SD_GetCardState>
 8002d30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d002      	beq.n	8002d3e <SD_DMAError+0x6e>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d10a      	bne.n	8002d54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fbb6 	bl	80044b4 <SDMMC_CmdStopTransfer>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff fd6c 	bl	8002840 <HAL_SD_ErrorCallback>
#endif
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	004005ff 	.word	0x004005ff

08002d74 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f240 523a 	movw	r2, #1338	; 0x53a
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff ff31 	bl	8002bf4 <HAL_SD_GetCardState>
 8002d92:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d002      	beq.n	8002dae <SD_DMATxAbort+0x3a>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d10a      	bne.n	8002dc4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 fb7e 	bl	80044b4 <SDMMC_CmdStopTransfer>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f002 fbff 	bl	80055d0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002dd2:	e002      	b.n	8002dda <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff fd33 	bl	8002840 <HAL_SD_ErrorCallback>
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f240 523a 	movw	r2, #1338	; 0x53a
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff fefa 	bl	8002bf4 <HAL_SD_GetCardState>
 8002e00:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d002      	beq.n	8002e1c <SD_DMARxAbort+0x3a>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d10a      	bne.n	8002e32 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fb47 	bl	80044b4 <SDMMC_CmdStopTransfer>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f002 fbc8 	bl	80055d0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002e40:	e002      	b.n	8002e48 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff fcfc 	bl	8002840 <HAL_SD_ErrorCallback>
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b094      	sub	sp, #80	; 0x50
 8002e54:	af04      	add	r7, sp, #16
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f9f8 	bl	8004256 <SDIO_GetPowerState>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d102      	bne.n	8002e72 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e70:	e0b8      	b.n	8002fe4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d02f      	beq.n	8002eda <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 fbdf 	bl	8004642 <SDMMC_CmdSendCID>
 8002e84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SD_InitCard+0x40>
    {
      return errorstate;
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8e:	e0a9      	b.n	8002fe4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 fa22 	bl	80042e0 <SDIO_GetResponse>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2104      	movs	r1, #4
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fa19 	bl	80042e0 <SDIO_GetResponse>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2108      	movs	r1, #8
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 fa10 	bl	80042e0 <SDIO_GetResponse>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	210c      	movs	r1, #12
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fa07 	bl	80042e0 <SDIO_GetResponse>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d00d      	beq.n	8002efe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f107 020e 	add.w	r2, r7, #14
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 fbe5 	bl	80046bc <SDMMC_CmdSetRelAdd>
 8002ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <SD_InitCard+0xae>
    {
      return errorstate;
 8002efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efc:	e072      	b.n	8002fe4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d036      	beq.n	8002f74 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002f06:	89fb      	ldrh	r3, [r7, #14]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f001 fbaf 	bl	800467e <SDMMC_CmdSendCSD>
 8002f20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	e05b      	b.n	8002fe4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 f9d4 	bl	80042e0 <SDIO_GetResponse>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2104      	movs	r1, #4
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 f9cb 	bl	80042e0 <SDIO_GetResponse>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2108      	movs	r1, #8
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 f9c2 	bl	80042e0 <SDIO_GetResponse>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	210c      	movs	r1, #12
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 f9b9 	bl	80042e0 <SDIO_GetResponse>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2104      	movs	r1, #4
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 f9b0 	bl	80042e0 <SDIO_GetResponse>
 8002f80:	4603      	mov	r3, r0
 8002f82:	0d1a      	lsrs	r2, r3, #20
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fc60 	bl	8002854 <HAL_SD_GetCardCSD>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f9e:	e021      	b.n	8002fe4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	2200      	movs	r2, #0
 8002fac:	461c      	mov	r4, r3
 8002fae:	4615      	mov	r5, r2
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	462b      	mov	r3, r5
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	f001 fa9f 	bl	80044f8 <SDMMC_CmdSelDesel>
 8002fba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <SD_InitCard+0x176>
  {
    return errorstate;
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc4:	e00e      	b.n	8002fe4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681d      	ldr	r5, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	466c      	mov	r4, sp
 8002fce:	f103 0210 	add.w	r2, r3, #16
 8002fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fd8:	3304      	adds	r3, #4
 8002fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f001 f8e3 	bl	80041a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3740      	adds	r7, #64	; 0x40
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bdb0      	pop	{r4, r5, r7, pc}

08002fec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f001 fa9a 	bl	800453e <SDMMC_CmdGoIdleState>
 800300a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	e072      	b.n	80030fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f001 faad 	bl	800457a <SDMMC_CmdOperCond>
 8003020:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fa83 	bl	800453e <SDMMC_CmdGoIdleState>
 8003038:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	e05b      	b.n	80030fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	2b01      	cmp	r3, #1
 8003050:	d137      	bne.n	80030c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f001 faad 	bl	80045b8 <SDMMC_CmdAppCommand>
 800305e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02d      	beq.n	80030c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800306a:	e047      	b.n	80030fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f001 faa0 	bl	80045b8 <SDMMC_CmdAppCommand>
 8003078:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <SD_PowerON+0x98>
    {
      return errorstate;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	e03b      	b.n	80030fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	491e      	ldr	r1, [pc, #120]	; (8003104 <SD_PowerON+0x118>)
 800308a:	4618      	mov	r0, r3
 800308c:	f001 fab6 	bl	80045fc <SDMMC_CmdAppOperCommand>
 8003090:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800309c:	e02e      	b.n	80030fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 f91b 	bl	80042e0 <SDIO_GetResponse>
 80030aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	0fdb      	lsrs	r3, r3, #31
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <SD_PowerON+0xcc>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <SD_PowerON+0xce>
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]

    count++;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3301      	adds	r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d802      	bhi.n	80030d2 <SD_PowerON+0xe6>
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0cc      	beq.n	800306c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030d8:	4293      	cmp	r3, r2
 80030da:	d902      	bls.n	80030e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80030dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e0:	e00c      	b.n	80030fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
 80030f2:	e002      	b.n	80030fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	c1100000 	.word	0xc1100000

08003108 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800311c:	e018      	b.n	8003150 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f001 fae7 	bl	80046fe <SDMMC_CmdSendStatus>
 8003130:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	e009      	b.n	8003150 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f001 f8cc 	bl	80042e0 <SDIO_GetResponse>
 8003148:	4602      	mov	r2, r0
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03f      	beq.n	80031f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e033      	b.n	80031e0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f001 f83e 	bl	80041fe <SDIO_ReadFIFO>
 8003182:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3301      	adds	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	3b01      	subs	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	0e1b      	lsrs	r3, r3, #24
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b07      	cmp	r3, #7
 80031e4:	d9c8      	bls.n	8003178 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d043      	beq.n	800329c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e037      	b.n	800328a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	3b01      	subs	r3, #1
 800322a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	021a      	lsls	r2, r3, #8
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4313      	orrs	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3b01      	subs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4313      	orrs	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3301      	adds	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3b01      	subs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	061a      	lsls	r2, r3, #24
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4313      	orrs	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3b01      	subs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f107 0208 	add.w	r2, r7, #8
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 ffca 	bl	8004218 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b07      	cmp	r3, #7
 800328e:	d9c4      	bls.n	800321a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e041      	b.n	800333a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f839 	bl	8003342 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 f9d8 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04e      	b.n	800340e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a23      	ldr	r2, [pc, #140]	; (800341c <HAL_TIM_Base_Start_IT+0xc4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d022      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d01d      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_TIM_Base_Start_IT+0xc8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_TIM_Base_Start_IT+0xcc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_TIM_Base_Start_IT+0xd0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1b      	ldr	r2, [pc, #108]	; (800342c <HAL_TIM_Base_Start_IT+0xd4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_TIM_Base_Start_IT+0xdc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d010      	beq.n	800340c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	e007      	b.n	800340c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40010400 	.word	0x40010400
 8003430:	40014000 	.word	0x40014000
 8003434:	40001800 	.word	0x40001800

08003438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b02      	cmp	r3, #2
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0202 	mvn.w	r2, #2
 8003464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8ee 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8e0 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8f1 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0204 	mvn.w	r2, #4
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8c4 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8b6 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f8c7 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b08      	cmp	r3, #8
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0208 	mvn.w	r2, #8
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2204      	movs	r2, #4
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f89a 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f88c 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f89d 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b10      	cmp	r3, #16
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b10      	cmp	r3, #16
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0210 	mvn.w	r2, #16
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2208      	movs	r2, #8
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f870 	bl	800365c <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f862 	bl	8003648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f873 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0201 	mvn.w	r2, #1
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f00e fde4 	bl	8012184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b80      	cmp	r3, #128	; 0x80
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f902 	bl	80037ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f838 	bl	8003684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b20      	cmp	r3, #32
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b20      	cmp	r3, #32
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0220 	mvn.w	r2, #32
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8cc 	bl	80037d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a40      	ldr	r2, [pc, #256]	; (80037ac <TIM_Base_SetConfig+0x114>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d013      	beq.n	80036d8 <TIM_Base_SetConfig+0x40>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d00f      	beq.n	80036d8 <TIM_Base_SetConfig+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <TIM_Base_SetConfig+0x118>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00b      	beq.n	80036d8 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3c      	ldr	r2, [pc, #240]	; (80037b4 <TIM_Base_SetConfig+0x11c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <TIM_Base_SetConfig+0x40>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3b      	ldr	r2, [pc, #236]	; (80037b8 <TIM_Base_SetConfig+0x120>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a3a      	ldr	r2, [pc, #232]	; (80037bc <TIM_Base_SetConfig+0x124>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d108      	bne.n	80036ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2f      	ldr	r2, [pc, #188]	; (80037ac <TIM_Base_SetConfig+0x114>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d02b      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f8:	d027      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2c      	ldr	r2, [pc, #176]	; (80037b0 <TIM_Base_SetConfig+0x118>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d023      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <TIM_Base_SetConfig+0x11c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01f      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <TIM_Base_SetConfig+0x120>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01b      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a29      	ldr	r2, [pc, #164]	; (80037bc <TIM_Base_SetConfig+0x124>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d017      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <TIM_Base_SetConfig+0x128>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <TIM_Base_SetConfig+0x12c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00f      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <TIM_Base_SetConfig+0x130>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00b      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a25      	ldr	r2, [pc, #148]	; (80037cc <TIM_Base_SetConfig+0x134>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a24      	ldr	r2, [pc, #144]	; (80037d0 <TIM_Base_SetConfig+0x138>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d003      	beq.n	800374a <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <TIM_Base_SetConfig+0x13c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <TIM_Base_SetConfig+0x114>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0xf8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <TIM_Base_SetConfig+0x124>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d103      	bne.n	8003798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	615a      	str	r2, [r3, #20]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	40010400 	.word	0x40010400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800
 80037cc:	40001800 	.word	0x40001800
 80037d0:	40001c00 	.word	0x40001c00
 80037d4:	40002000 	.word	0x40002000

080037d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800385a:	481c      	ldr	r0, [pc, #112]	; (80038cc <LL_ADC_CommonInit+0x80>)
 800385c:	f7ff ffe3 	bl	8003826 <LL_ADC_IsEnabled>
 8003860:	4604      	mov	r4, r0
 8003862:	481b      	ldr	r0, [pc, #108]	; (80038d0 <LL_ADC_CommonInit+0x84>)
 8003864:	f7ff ffdf 	bl	8003826 <LL_ADC_IsEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	431c      	orrs	r4, r3
 800386c:	4819      	ldr	r0, [pc, #100]	; (80038d4 <LL_ADC_CommonInit+0x88>)
 800386e:	f7ff ffda 	bl	8003826 <LL_ADC_IsEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	4323      	orrs	r3, r4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d120      	bne.n	80038bc <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <LL_ADC_CommonInit+0x8c>)
 8003888:	4013      	ands	r3, r2
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	6811      	ldr	r1, [r2, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	6852      	ldr	r2, [r2, #4]
 8003892:	4311      	orrs	r1, r2
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	6892      	ldr	r2, [r2, #8]
 8003898:	4311      	orrs	r1, r2
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	430a      	orrs	r2, r1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e00b      	b.n	80038c0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <LL_ADC_CommonInit+0x8c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	e001      	b.n	80038c0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd90      	pop	{r4, r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40012000 	.word	0x40012000
 80038d0:	40012100 	.word	0x40012100
 80038d4:	40012200 	.word	0x40012200
 80038d8:	fffc10e0 	.word	0xfffc10e0

080038dc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ff9b 	bl	8003826 <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d117      	bne.n	8003926 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80038fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	6811      	ldr	r1, [r2, #0]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	6892      	ldr	r2, [r2, #8]
 800390a:	430a      	orrs	r2, r1
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	e001      	b.n	800392a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff6f 	bl	8003826 <LL_ADC_IsEnabled>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d12b      	bne.n	80039a6 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	e005      	b.n	8003976 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <LL_ADC_REG_Init+0x80>)
 800397c:	4013      	ands	r3, r2
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	6912      	ldr	r2, [r2, #16]
 8003990:	430a      	orrs	r2, r1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ff2e 	bl	8003800 <LL_ADC_REG_SetSequencerLength>
 80039a4:	e001      	b.n	80039aa <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	c0fffcfd 	.word	0xc0fffcfd

080039b8 <LL_GPIO_SetPinMode>:
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	; 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2103      	movs	r1, #3
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	61bb      	str	r3, [r7, #24]
  return result;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_GPIO_SetPinOutputType>:
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	605a      	str	r2, [r3, #4]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_GPIO_SetPinSpeed>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	b089      	sub	sp, #36	; 0x24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	613b      	str	r3, [r7, #16]
  return result;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2103      	movs	r1, #3
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	401a      	ands	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	61bb      	str	r3, [r7, #24]
  return result;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	3724      	adds	r7, #36	; 0x24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_GPIO_SetPinPull>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	613b      	str	r3, [r7, #16]
  return result;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2103      	movs	r1, #3
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	61bb      	str	r3, [r7, #24]
  return result;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	60da      	str	r2, [r3, #12]
}
 8003af6:	bf00      	nop
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_GPIO_SetAFPin_0_7>:
{
 8003b02:	b480      	push	{r7}
 8003b04:	b089      	sub	sp, #36	; 0x24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1a      	ldr	r2, [r3, #32]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	613b      	str	r3, [r7, #16]
  return result;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	fab3 f383 	clz	r3, r3
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	210f      	movs	r1, #15
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	401a      	ands	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	3724      	adds	r7, #36	; 0x24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_GPIO_SetAFPin_8_15>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	; 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	613b      	str	r3, [r7, #16]
  return result;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	210f      	movs	r1, #15
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	401a      	ands	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	61bb      	str	r3, [r7, #24]
  return result;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003bb6:	bf00      	nop
 8003bb8:	3724      	adds	r7, #36	; 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	613b      	str	r3, [r7, #16]
  return result;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003bec:	e050      	b.n	8003c90 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d042      	beq.n	8003c8a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d003      	beq.n	8003c14 <LL_GPIO_Init+0x52>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d10d      	bne.n	8003c30 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff12 	bl	8003a46 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	461a      	mov	r2, r3
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fef3 	bl	8003a16 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	461a      	mov	r2, r3
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ff33 	bl	8003aa4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d11a      	bne.n	8003c7c <LL_GPIO_Init+0xba>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	60bb      	str	r3, [r7, #8]
  return result;
 8003c52:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b07      	cmp	r3, #7
 8003c5c:	d807      	bhi.n	8003c6e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	461a      	mov	r2, r3
 8003c64:	69b9      	ldr	r1, [r7, #24]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ff4b 	bl	8003b02 <LL_GPIO_SetAFPin_0_7>
 8003c6c:	e006      	b.n	8003c7c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	461a      	mov	r2, r3
 8003c74:	69b9      	ldr	r1, [r7, #24]
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ff72 	bl	8003b60 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	461a      	mov	r2, r3
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fe97 	bl	80039b8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1a7      	bne.n	8003bee <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	601a      	str	r2, [r3, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 0201 	bic.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	601a      	str	r2, [r3, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f023 021f 	bic.w	r2, r3, #31
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <LL_I2C_ConfigSpeed+0x124>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0c9b      	lsrs	r3, r3, #18
 8003d64:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	493a      	ldr	r1, [pc, #232]	; (8003e6c <LL_I2C_ConfigSpeed+0x128>)
 8003d82:	428b      	cmp	r3, r1
 8003d84:	d802      	bhi.n	8003d8c <LL_I2C_ConfigSpeed+0x48>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	e009      	b.n	8003da0 <LL_I2C_ConfigSpeed+0x5c>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4936      	ldr	r1, [pc, #216]	; (8003e70 <LL_I2C_ConfigSpeed+0x12c>)
 8003d98:	fba1 1303 	umull	r1, r3, r1, r3
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	3301      	adds	r3, #1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a30      	ldr	r2, [pc, #192]	; (8003e6c <LL_I2C_ConfigSpeed+0x128>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d939      	bls.n	8003e22 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d117      	bne.n	8003de4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4413      	add	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ddc:	e01d      	b.n	8003e1a <LL_I2C_ConfigSpeed+0xd6>
 8003dde:	f248 0301 	movw	r3, #32769	; 0x8001
 8003de2:	e01a      	b.n	8003e1a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	009a      	lsls	r2, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009a      	lsls	r2, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e14:	e001      	b.n	8003e1a <LL_I2C_ConfigSpeed+0xd6>
 8003e16:	f248 0301 	movw	r3, #32769	; 0x8001
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e011      	b.n	8003e46 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e30:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	e000      	b.n	8003e44 <LL_I2C_ConfigSpeed+0x100>
 8003e42:	2304      	movs	r3, #4
 8003e44:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	61da      	str	r2, [r3, #28]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	000186a0 	.word	0x000186a0
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 021a 	bic.w	r2, r3, #26
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fefc 	bl	8003cc8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f89d 	bl	8004014 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff feff 	bl	8003ce8 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003eea:	6939      	ldr	r1, [r7, #16]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff25 	bl	8003d44 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6959      	ldr	r1, [r3, #20]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	461a      	mov	r2, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff05 	bl	8003d14 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffaf 	bl	8003e74 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fec6 	bl	8003ca8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ffb9 	bl	8003e9a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <LL_RCC_GetSysClkSource+0x18>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800

08003f50 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <LL_RCC_GetAHBPrescaler+0x18>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800

08003f6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800

08003fa4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <LL_RCC_PLL_GetMainSource+0x18>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <LL_RCC_PLL_GetN+0x18>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40023800 	.word	0x40023800

08003fdc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <LL_RCC_PLL_GetP+0x18>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800

08003ff8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <LL_RCC_PLL_GetDivider+0x18>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800401c:	f000 f820 	bl	8004060 <RCC_GetSystemClockFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f840 	bl	80040b0 <RCC_GetHCLKClockFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f84e 	bl	80040dc <RCC_GetPCLK1ClockFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f85a 	bl	8004104 <RCC_GetPCLK2ClockFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60da      	str	r2, [r3, #12]
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800406a:	f7ff ff63 	bl	8003f34 <LL_RCC_GetSysClkSource>
 800406e:	4603      	mov	r3, r0
 8004070:	2b08      	cmp	r3, #8
 8004072:	d00c      	beq.n	800408e <RCC_GetSystemClockFreq+0x2e>
 8004074:	2b08      	cmp	r3, #8
 8004076:	d80f      	bhi.n	8004098 <RCC_GetSystemClockFreq+0x38>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <RCC_GetSystemClockFreq+0x22>
 800407c:	2b04      	cmp	r3, #4
 800407e:	d003      	beq.n	8004088 <RCC_GetSystemClockFreq+0x28>
 8004080:	e00a      	b.n	8004098 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <RCC_GetSystemClockFreq+0x48>)
 8004084:	607b      	str	r3, [r7, #4]
      break;
 8004086:	e00a      	b.n	800409e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <RCC_GetSystemClockFreq+0x4c>)
 800408a:	607b      	str	r3, [r7, #4]
      break;
 800408c:	e007      	b.n	800409e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800408e:	2008      	movs	r0, #8
 8004090:	f000 f84c 	bl	800412c <RCC_PLL_GetFreqDomain_SYS>
 8004094:	6078      	str	r0, [r7, #4]
      break;
 8004096:	e002      	b.n	800409e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <RCC_GetSystemClockFreq+0x48>)
 800409a:	607b      	str	r3, [r7, #4]
      break;
 800409c:	bf00      	nop
  }

  return frequency;
 800409e:	687b      	ldr	r3, [r7, #4]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040b8:	f7ff ff4a 	bl	8003f50 <LL_RCC_GetAHBPrescaler>
 80040bc:	4603      	mov	r3, r0
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <RCC_GetHCLKClockFreq+0x28>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	40d3      	lsrs	r3, r2
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	080142f4 	.word	0x080142f4

080040dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040e4:	f7ff ff42 	bl	8003f6c <LL_RCC_GetAPB1Prescaler>
 80040e8:	4603      	mov	r3, r0
 80040ea:	0a9b      	lsrs	r3, r3, #10
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <RCC_GetPCLK1ClockFreq+0x24>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	40d3      	lsrs	r3, r2
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	08014304 	.word	0x08014304

08004104 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800410c:	f7ff ff3c 	bl	8003f88 <LL_RCC_GetAPB2Prescaler>
 8004110:	4603      	mov	r3, r0
 8004112:	0b5b      	lsrs	r3, r3, #13
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <RCC_GetPCLK2ClockFreq+0x24>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	461a      	mov	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	40d3      	lsrs	r3, r2
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08014304 	.word	0x08014304

0800412c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004140:	f7ff ff30 	bl	8003fa4 <LL_RCC_PLL_GetMainSource>
 8004144:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004152:	d003      	beq.n	800415c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004154:	e005      	b.n	8004162 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004158:	617b      	str	r3, [r7, #20]
      break;
 800415a:	e005      	b.n	8004168 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800415e:	617b      	str	r3, [r7, #20]
      break;
 8004160:	e002      	b.n	8004168 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004164:	617b      	str	r3, [r7, #20]
      break;
 8004166:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d113      	bne.n	8004196 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800416e:	f7ff ff43 	bl	8003ff8 <LL_RCC_PLL_GetDivider>
 8004172:	4602      	mov	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fbb3 f4f2 	udiv	r4, r3, r2
 800417a:	f7ff ff21 	bl	8003fc0 <LL_RCC_PLL_GetN>
 800417e:	4603      	mov	r3, r0
 8004180:	fb03 f404 	mul.w	r4, r3, r4
 8004184:	f7ff ff2a 	bl	8003fdc <LL_RCC_PLL_GetP>
 8004188:	4603      	mov	r3, r0
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	3301      	adds	r3, #1
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fbb4 f3f3 	udiv	r3, r4, r3
 8004194:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004196:	693b      	ldr	r3, [r7, #16]
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	bd90      	pop	{r4, r7, pc}
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	007a1200 	.word	0x007a1200

080041a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	f107 001c 	add.w	r0, r7, #28
 80041b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80041be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80041c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80041c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80041c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80041ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80041ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80041d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80041e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	b004      	add	sp, #16
 80041fc:	4770      	bx	lr

080041fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2203      	movs	r2, #3
 8004246:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0303 	and.w	r3, r3, #3
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004290:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004296:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800429c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80042ac:	f023 030f 	bic.w	r3, r3, #15
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	b2db      	uxtb	r3, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3314      	adds	r3, #20
 80042ee:	461a      	mov	r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
}  
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800432c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004332:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004338:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004350:	2300      	movs	r3, #0

}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b088      	sub	sp, #32
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800436c:	2310      	movs	r3, #16
 800436e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004370:	2340      	movs	r3, #64	; 0x40
 8004372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff74 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	2110      	movs	r1, #16
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f9d7 	bl	8004744 <SDMMC_GetCmdResp1>
 8004396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004398:	69fb      	ldr	r3, [r7, #28]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b088      	sub	sp, #32
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80043b0:	2311      	movs	r3, #17
 80043b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043b4:	2340      	movs	r3, #64	; 0x40
 80043b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff ff52 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	2111      	movs	r1, #17
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f9b5 	bl	8004744 <SDMMC_GetCmdResp1>
 80043da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043dc:	69fb      	ldr	r3, [r7, #28]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b088      	sub	sp, #32
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80043f4:	2312      	movs	r3, #18
 80043f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043f8:	2340      	movs	r3, #64	; 0x40
 80043fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004404:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ff30 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	2112      	movs	r1, #18
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f993 	bl	8004744 <SDMMC_GetCmdResp1>
 800441e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004420:	69fb      	ldr	r3, [r7, #28]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b088      	sub	sp, #32
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004438:	2318      	movs	r3, #24
 800443a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004448:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800444a:	f107 0308 	add.w	r3, r7, #8
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff0e 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	2118      	movs	r1, #24
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f971 	bl	8004744 <SDMMC_GetCmdResp1>
 8004462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004464:	69fb      	ldr	r3, [r7, #28]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b088      	sub	sp, #32
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800447c:	2319      	movs	r3, #25
 800447e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004480:	2340      	movs	r3, #64	; 0x40
 8004482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800448c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff feec 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	2119      	movs	r1, #25
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f94f 	bl	8004744 <SDMMC_GetCmdResp1>
 80044a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044a8:	69fb      	ldr	r3, [r7, #28]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80044c0:	230c      	movs	r3, #12
 80044c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff feca 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80044de:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <SDMMC_CmdStopTransfer+0x40>)
 80044e0:	210c      	movs	r1, #12
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f92e 	bl	8004744 <SDMMC_GetCmdResp1>
 80044e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044ea:	69fb      	ldr	r3, [r7, #28]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	05f5e100 	.word	0x05f5e100

080044f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004508:	2307      	movs	r3, #7
 800450a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800450c:	2340      	movs	r3, #64	; 0x40
 800450e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004518:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800451a:	f107 0310 	add.w	r3, r7, #16
 800451e:	4619      	mov	r1, r3
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff fea6 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	2107      	movs	r1, #7
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f909 	bl	8004744 <SDMMC_GetCmdResp1>
 8004532:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004536:	4618      	mov	r0, r3
 8004538:	3728      	adds	r7, #40	; 0x28
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b088      	sub	sp, #32
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800455a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800455c:	f107 0308 	add.w	r3, r7, #8
 8004560:	4619      	mov	r1, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fe85 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fb23 	bl	8004bb4 <SDMMC_GetCmdError>
 800456e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004570:	69fb      	ldr	r3, [r7, #28]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b088      	sub	sp, #32
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004582:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004588:	2308      	movs	r3, #8
 800458a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800458c:	2340      	movs	r3, #64	; 0x40
 800458e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004598:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff fe66 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fab6 	bl	8004b18 <SDMMC_GetCmdResp7>
 80045ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045ae:	69fb      	ldr	r3, [r7, #28]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80045c6:	2337      	movs	r3, #55	; 0x37
 80045c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045ca:	2340      	movs	r3, #64	; 0x40
 80045cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fe47 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	2137      	movs	r1, #55	; 0x37
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8aa 	bl	8004744 <SDMMC_GetCmdResp1>
 80045f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045f2:	69fb      	ldr	r3, [r7, #28]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800460c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004612:	2329      	movs	r3, #41	; 0x29
 8004614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004616:	2340      	movs	r3, #64	; 0x40
 8004618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800461e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004622:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004624:	f107 0308 	add.w	r3, r7, #8
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fe21 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9bd 	bl	80049b0 <SDMMC_GetCmdResp3>
 8004636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004638:	69fb      	ldr	r3, [r7, #28]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b088      	sub	sp, #32
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800464e:	2302      	movs	r3, #2
 8004650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004652:	23c0      	movs	r3, #192	; 0xc0
 8004654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800465a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe03 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f957 	bl	8004920 <SDMMC_GetCmdResp2>
 8004672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004674:	69fb      	ldr	r3, [r7, #28]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b088      	sub	sp, #32
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800468c:	2309      	movs	r3, #9
 800468e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004690:	23c0      	movs	r3, #192	; 0xc0
 8004692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fde4 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f938 	bl	8004920 <SDMMC_GetCmdResp2>
 80046b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046b2:	69fb      	ldr	r3, [r7, #28]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80046ca:	2303      	movs	r3, #3
 80046cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046ce:	2340      	movs	r3, #64	; 0x40
 80046d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fdc5 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	2103      	movs	r1, #3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f99d 	bl	8004a2c <SDMMC_GetCmdResp6>
 80046f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046f4:	69fb      	ldr	r3, [r7, #28]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b088      	sub	sp, #32
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800470c:	230d      	movs	r3, #13
 800470e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fda4 	bl	8004272 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	210d      	movs	r1, #13
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f807 	bl	8004744 <SDMMC_GetCmdResp1>
 8004736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004738:	69fb      	ldr	r3, [r7, #28]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	460b      	mov	r3, r1
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004752:	4b70      	ldr	r3, [pc, #448]	; (8004914 <SDMMC_GetCmdResp1+0x1d0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a70      	ldr	r2, [pc, #448]	; (8004918 <SDMMC_GetCmdResp1+0x1d4>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	0a5a      	lsrs	r2, r3, #9
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	fb02 f303 	mul.w	r3, r2, r3
 8004764:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	1e5a      	subs	r2, r3, #1
 800476a:	61fa      	str	r2, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004774:	e0c9      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ef      	beq.n	8004766 <SDMMC_GetCmdResp1+0x22>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ea      	bne.n	8004766 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2204      	movs	r2, #4
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047a2:	2304      	movs	r3, #4
 80047a4:	e0b1      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0a6      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	22c5      	movs	r2, #197	; 0xc5
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff fd7f 	bl	80042c6 <SDIO_GetCommandResponse>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	7afb      	ldrb	r3, [r7, #11]
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d001      	beq.n	80047d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e099      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80047d6:	2100      	movs	r1, #0
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff fd81 	bl	80042e0 <SDIO_GetResponse>
 80047de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4b4e      	ldr	r3, [pc, #312]	; (800491c <SDMMC_GetCmdResp1+0x1d8>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	e08d      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	da02      	bge.n	80047fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80047f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047f8:	e087      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004804:	2340      	movs	r3, #64	; 0x40
 8004806:	e080      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	e079      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004824:	e071      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004834:	e069      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004844:	e061      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004854:	e059      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004864:	e051      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004874:	e049      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004884:	e041      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004894:	e039      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80048a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048a4:	e031      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80048b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048b4:	e029      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80048c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048c4:	e021      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80048d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048d4:	e019      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80048e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048e4:	e011      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80048f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048f4:	e009      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004900:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004904:	e001      	b.n	800490a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000014 	.word	0x20000014
 8004918:	10624dd3 	.word	0x10624dd3
 800491c:	fdffe008 	.word	0xfdffe008

08004920 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004928:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <SDMMC_GetCmdResp2+0x88>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <SDMMC_GetCmdResp2+0x8c>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	0a5b      	lsrs	r3, r3, #9
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	fb02 f303 	mul.w	r3, r2, r3
 800493c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1e5a      	subs	r2, r3, #1
 8004942:	60fa      	str	r2, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800494c:	e026      	b.n	800499c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ef      	beq.n	800493e <SDMMC_GetCmdResp2+0x1e>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ea      	bne.n	800493e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2204      	movs	r2, #4
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800497a:	2304      	movs	r3, #4
 800497c:	e00e      	b.n	800499c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d004      	beq.n	8004994 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004990:	2301      	movs	r3, #1
 8004992:	e003      	b.n	800499c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	22c5      	movs	r2, #197	; 0xc5
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	20000014 	.word	0x20000014
 80049ac:	10624dd3 	.word	0x10624dd3

080049b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <SDMMC_GetCmdResp3+0x74>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <SDMMC_GetCmdResp3+0x78>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	0a5b      	lsrs	r3, r3, #9
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049dc:	e01b      	b.n	8004a16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0ef      	beq.n	80049ce <SDMMC_GetCmdResp3+0x1e>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ea      	bne.n	80049ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2204      	movs	r2, #4
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e003      	b.n	8004a16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	22c5      	movs	r2, #197	; 0xc5
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000014 	.word	0x20000014
 8004a28:	10624dd3 	.word	0x10624dd3

08004a2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	460b      	mov	r3, r1
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <SDMMC_GetCmdResp6+0xe4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a35      	ldr	r2, [pc, #212]	; (8004b14 <SDMMC_GetCmdResp6+0xe8>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	0a5b      	lsrs	r3, r3, #9
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	61fa      	str	r2, [r7, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a5e:	e052      	b.n	8004b06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ef      	beq.n	8004a50 <SDMMC_GetCmdResp6+0x24>
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ea      	bne.n	8004a50 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d004      	beq.n	8004a90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	e03a      	b.n	8004b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e02f      	b.n	8004b06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff fc0d 	bl	80042c6 <SDIO_GetCommandResponse>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d001      	beq.n	8004aba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e025      	b.n	8004b06 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22c5      	movs	r2, #197	; 0xc5
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fc0c 	bl	80042e0 <SDIO_GetResponse>
 8004ac8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e011      	b.n	8004b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004af0:	e009      	b.n	8004b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b00:	e001      	b.n	8004b06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000014 	.word	0x20000014
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b20:	4b22      	ldr	r3, [pc, #136]	; (8004bac <SDMMC_GetCmdResp7+0x94>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <SDMMC_GetCmdResp7+0x98>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	0a5b      	lsrs	r3, r3, #9
 8004b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	60fa      	str	r2, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b44:	e02c      	b.n	8004ba0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ef      	beq.n	8004b36 <SDMMC_GetCmdResp7+0x1e>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ea      	bne.n	8004b36 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2204      	movs	r2, #4
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b72:	2304      	movs	r3, #4
 8004b74:	e014      	b.n	8004ba0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e009      	b.n	8004ba0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b9e:	2300      	movs	r3, #0
  
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000014 	.word	0x20000014
 8004bb0:	10624dd3 	.word	0x10624dd3

08004bb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <SDMMC_GetCmdError+0x50>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <SDMMC_GetCmdError+0x54>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0a5b      	lsrs	r3, r3, #9
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	60fa      	str	r2, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004be0:	e009      	b.n	8004bf6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f1      	beq.n	8004bd2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	22c5      	movs	r2, #197	; 0xc5
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000014 	.word	0x20000014
 8004c08:	10624dd3 	.word	0x10624dd3

08004c0c <LL_SPI_IsEnabled>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d101      	bne.n	8004c24 <LL_SPI_IsEnabled+0x18>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <LL_SPI_IsEnabled+0x1a>
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	611a      	str	r2, [r3, #16]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff ffd3 	bl	8004c0c <LL_SPI_IsEnabled>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d139      	bne.n	8004ce0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c74:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	6811      	ldr	r1, [r2, #0]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	6852      	ldr	r2, [r2, #4]
 8004c80:	4311      	orrs	r1, r2
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	6892      	ldr	r2, [r2, #8]
 8004c86:	4311      	orrs	r1, r2
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	68d2      	ldr	r2, [r2, #12]
 8004c8c:	4311      	orrs	r1, r2
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	6912      	ldr	r2, [r2, #16]
 8004c92:	4311      	orrs	r1, r2
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	6952      	ldr	r2, [r2, #20]
 8004c98:	4311      	orrs	r1, r2
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	6992      	ldr	r2, [r2, #24]
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	69d2      	ldr	r2, [r2, #28]
 8004ca4:	4311      	orrs	r1, r2
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	6a12      	ldr	r2, [r2, #32]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 0204 	bic.w	r2, r3, #4
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	0c1b      	lsrs	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cce:	d105      	bne.n	8004cdc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff ffab 	bl	8004c32 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	61da      	str	r2, [r3, #28]
  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	615a      	str	r2, [r3, #20]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a3d      	ldr	r2, [pc, #244]	; (8004e74 <LL_TIM_Init+0x108>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d013      	beq.n	8004dac <LL_TIM_Init+0x40>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8a:	d00f      	beq.n	8004dac <LL_TIM_Init+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <LL_TIM_Init+0x10c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00b      	beq.n	8004dac <LL_TIM_Init+0x40>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a39      	ldr	r2, [pc, #228]	; (8004e7c <LL_TIM_Init+0x110>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <LL_TIM_Init+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a38      	ldr	r2, [pc, #224]	; (8004e80 <LL_TIM_Init+0x114>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <LL_TIM_Init+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a37      	ldr	r2, [pc, #220]	; (8004e84 <LL_TIM_Init+0x118>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d106      	bne.n	8004dba <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <LL_TIM_Init+0x108>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d02b      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d027      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <LL_TIM_Init+0x10c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d023      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <LL_TIM_Init+0x110>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01f      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <LL_TIM_Init+0x114>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01b      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a27      	ldr	r2, [pc, #156]	; (8004e84 <LL_TIM_Init+0x118>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d017      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <LL_TIM_Init+0x11c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <LL_TIM_Init+0x120>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00f      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a24      	ldr	r2, [pc, #144]	; (8004e90 <LL_TIM_Init+0x124>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00b      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a23      	ldr	r2, [pc, #140]	; (8004e94 <LL_TIM_Init+0x128>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d007      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a22      	ldr	r2, [pc, #136]	; (8004e98 <LL_TIM_Init+0x12c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <LL_TIM_Init+0xae>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <LL_TIM_Init+0x130>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d106      	bne.n	8004e28 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff6c 	bl	8004d12 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff58 	bl	8004cf6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <LL_TIM_Init+0x108>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <LL_TIM_Init+0xea>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <LL_TIM_Init+0x118>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d105      	bne.n	8004e62 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff66 	bl	8004d2e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ff71 	bl	8004d4a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40010400 	.word	0x40010400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800
 8004e94:	40001800 	.word	0x40001800
 8004e98:	40001c00 	.word	0x40001c00
 8004e9c:	40002000 	.word	0x40002000

08004ea0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	611a      	str	r2, [r3, #16]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	615a      	str	r2, [r3, #20]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f18:	b0c0      	sub	sp, #256	; 0x100
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f20:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004f24:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004f28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f34:	f040 810c 	bne.w	8005150 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004f38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	6639      	str	r1, [r7, #96]	; 0x60
 8004f52:	415b      	adcs	r3, r3
 8004f54:	667b      	str	r3, [r7, #100]	; 0x64
 8004f56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	eb12 0801 	adds.w	r8, r2, r1
 8004f60:	4629      	mov	r1, r5
 8004f62:	eb43 0901 	adc.w	r9, r3, r1
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f7a:	4690      	mov	r8, r2
 8004f7c:	4699      	mov	r9, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	eb18 0303 	adds.w	r3, r8, r3
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f88:	462b      	mov	r3, r5
 8004f8a:	eb49 0303 	adc.w	r3, r9, r3
 8004f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f96:	2200      	movs	r2, #0
 8004f98:	469a      	mov	sl, r3
 8004f9a:	4693      	mov	fp, r2
 8004f9c:	eb1a 030a 	adds.w	r3, sl, sl
 8004fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fa2:	eb4b 030b 	adc.w	r3, fp, fp
 8004fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fb0:	f7fb f9be 	bl	8000330 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4b64      	ldr	r3, [pc, #400]	; (800514c <LL_USART_SetBaudRate+0x238>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	b29c      	uxth	r4, r3
 8004fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fd0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fd4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	1891      	adds	r1, r2, r2
 8004fde:	6539      	str	r1, [r7, #80]	; 0x50
 8004fe0:	415b      	adcs	r3, r3
 8004fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fe8:	4641      	mov	r1, r8
 8004fea:	1851      	adds	r1, r2, r1
 8004fec:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fee:	4649      	mov	r1, r9
 8004ff0:	414b      	adcs	r3, r1
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005000:	4659      	mov	r1, fp
 8005002:	00cb      	lsls	r3, r1, #3
 8005004:	4651      	mov	r1, sl
 8005006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500a:	4651      	mov	r1, sl
 800500c:	00ca      	lsls	r2, r1, #3
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	4603      	mov	r3, r0
 8005014:	4642      	mov	r2, r8
 8005016:	189b      	adds	r3, r3, r2
 8005018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800501c:	464b      	mov	r3, r9
 800501e:	460a      	mov	r2, r1
 8005020:	eb42 0303 	adc.w	r3, r2, r3
 8005024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005028:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800502c:	2200      	movs	r2, #0
 800502e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005032:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005036:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800503a:	460b      	mov	r3, r1
 800503c:	18db      	adds	r3, r3, r3
 800503e:	643b      	str	r3, [r7, #64]	; 0x40
 8005040:	4613      	mov	r3, r2
 8005042:	eb42 0303 	adc.w	r3, r2, r3
 8005046:	647b      	str	r3, [r7, #68]	; 0x44
 8005048:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800504c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005050:	f7fb f96e 	bl	8000330 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4611      	mov	r1, r2
 800505a:	4b3c      	ldr	r3, [pc, #240]	; (800514c <LL_USART_SetBaudRate+0x238>)
 800505c:	fba3 2301 	umull	r2, r3, r3, r1
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2264      	movs	r2, #100	; 0x64
 8005064:	fb02 f303 	mul.w	r3, r2, r3
 8005068:	1acb      	subs	r3, r1, r3
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005070:	4b36      	ldr	r3, [pc, #216]	; (800514c <LL_USART_SetBaudRate+0x238>)
 8005072:	fba3 2302 	umull	r2, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	b29b      	uxth	r3, r3
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005082:	b29b      	uxth	r3, r3
 8005084:	4423      	add	r3, r4
 8005086:	b29c      	uxth	r4, r3
 8005088:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005092:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005096:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800509a:	4642      	mov	r2, r8
 800509c:	464b      	mov	r3, r9
 800509e:	1891      	adds	r1, r2, r2
 80050a0:	63b9      	str	r1, [r7, #56]	; 0x38
 80050a2:	415b      	adcs	r3, r3
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050aa:	4641      	mov	r1, r8
 80050ac:	1851      	adds	r1, r2, r1
 80050ae:	6339      	str	r1, [r7, #48]	; 0x30
 80050b0:	4649      	mov	r1, r9
 80050b2:	414b      	adcs	r3, r1
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050c2:	4659      	mov	r1, fp
 80050c4:	00cb      	lsls	r3, r1, #3
 80050c6:	4651      	mov	r1, sl
 80050c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050cc:	4651      	mov	r1, sl
 80050ce:	00ca      	lsls	r2, r1, #3
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	4603      	mov	r3, r0
 80050d6:	4642      	mov	r2, r8
 80050d8:	189b      	adds	r3, r3, r2
 80050da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050de:	464b      	mov	r3, r9
 80050e0:	460a      	mov	r2, r1
 80050e2:	eb42 0303 	adc.w	r3, r2, r3
 80050e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050f4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80050f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80050fc:	460b      	mov	r3, r1
 80050fe:	18db      	adds	r3, r3, r3
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
 8005102:	4613      	mov	r3, r2
 8005104:	eb42 0303 	adc.w	r3, r2, r3
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800510e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005112:	f7fb f90d 	bl	8000330 <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <LL_USART_SetBaudRate+0x238>)
 800511c:	fba3 1302 	umull	r1, r3, r3, r2
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	2164      	movs	r1, #100	; 0x64
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	3332      	adds	r3, #50	; 0x32
 800512e:	4a07      	ldr	r2, [pc, #28]	; (800514c <LL_USART_SetBaudRate+0x238>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	b29b      	uxth	r3, r3
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	b29b      	uxth	r3, r3
 800513e:	4423      	add	r3, r4
 8005140:	b29b      	uxth	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005148:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 800514a:	e107      	b.n	800535c <LL_USART_SetBaudRate+0x448>
 800514c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005154:	2200      	movs	r2, #0
 8005156:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800515a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800515e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	1891      	adds	r1, r2, r2
 8005168:	6239      	str	r1, [r7, #32]
 800516a:	415b      	adcs	r3, r3
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005172:	4641      	mov	r1, r8
 8005174:	1854      	adds	r4, r2, r1
 8005176:	4649      	mov	r1, r9
 8005178:	eb43 0501 	adc.w	r5, r3, r1
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	00eb      	lsls	r3, r5, #3
 8005186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800518a:	00e2      	lsls	r2, r4, #3
 800518c:	4614      	mov	r4, r2
 800518e:	461d      	mov	r5, r3
 8005190:	4643      	mov	r3, r8
 8005192:	18e3      	adds	r3, r4, r3
 8005194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005198:	464b      	mov	r3, r9
 800519a:	eb45 0303 	adc.w	r3, r5, r3
 800519e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80051a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80051bc:	4629      	mov	r1, r5
 80051be:	008b      	lsls	r3, r1, #2
 80051c0:	4621      	mov	r1, r4
 80051c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c6:	4621      	mov	r1, r4
 80051c8:	008a      	lsls	r2, r1, #2
 80051ca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80051ce:	f7fb f8af 	bl	8000330 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4b64      	ldr	r3, [pc, #400]	; (8005368 <LL_USART_SetBaudRate+0x454>)
 80051d8:	fba3 2302 	umull	r2, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	b29b      	uxth	r3, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	b29c      	uxth	r4, r3
 80051e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051f2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80051f6:	4642      	mov	r2, r8
 80051f8:	464b      	mov	r3, r9
 80051fa:	1891      	adds	r1, r2, r2
 80051fc:	61b9      	str	r1, [r7, #24]
 80051fe:	415b      	adcs	r3, r3
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005206:	4641      	mov	r1, r8
 8005208:	1851      	adds	r1, r2, r1
 800520a:	6139      	str	r1, [r7, #16]
 800520c:	4649      	mov	r1, r9
 800520e:	414b      	adcs	r3, r1
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800521e:	4659      	mov	r1, fp
 8005220:	00cb      	lsls	r3, r1, #3
 8005222:	4651      	mov	r1, sl
 8005224:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005228:	4651      	mov	r1, sl
 800522a:	00ca      	lsls	r2, r1, #3
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	4603      	mov	r3, r0
 8005232:	4642      	mov	r2, r8
 8005234:	189b      	adds	r3, r3, r2
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800523a:	464b      	mov	r3, r9
 800523c:	460a      	mov	r2, r1
 800523e:	eb42 0303 	adc.w	r3, r2, r3
 8005242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005250:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005260:	4649      	mov	r1, r9
 8005262:	008b      	lsls	r3, r1, #2
 8005264:	4641      	mov	r1, r8
 8005266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526a:	4641      	mov	r1, r8
 800526c:	008a      	lsls	r2, r1, #2
 800526e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005272:	f7fb f85d 	bl	8000330 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4b3b      	ldr	r3, [pc, #236]	; (8005368 <LL_USART_SetBaudRate+0x454>)
 800527c:	fba3 1302 	umull	r1, r3, r3, r2
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a36      	ldr	r2, [pc, #216]	; (8005368 <LL_USART_SetBaudRate+0x454>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	b29b      	uxth	r3, r3
 8005298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800529c:	b29b      	uxth	r3, r3
 800529e:	4423      	add	r3, r4
 80052a0:	b29c      	uxth	r4, r3
 80052a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052a6:	2200      	movs	r2, #0
 80052a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80052aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	415b      	adcs	r3, r3
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c0:	4641      	mov	r1, r8
 80052c2:	1851      	adds	r1, r2, r1
 80052c4:	6039      	str	r1, [r7, #0]
 80052c6:	4649      	mov	r1, r9
 80052c8:	414b      	adcs	r3, r1
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052d8:	4659      	mov	r1, fp
 80052da:	00cb      	lsls	r3, r1, #3
 80052dc:	4651      	mov	r1, sl
 80052de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e2:	4651      	mov	r1, sl
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	4642      	mov	r2, r8
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	673b      	str	r3, [r7, #112]	; 0x70
 80052f2:	464b      	mov	r3, r9
 80052f4:	460a      	mov	r2, r1
 80052f6:	eb42 0303 	adc.w	r3, r2, r3
 80052fa:	677b      	str	r3, [r7, #116]	; 0x74
 80052fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005300:	2200      	movs	r2, #0
 8005302:	66bb      	str	r3, [r7, #104]	; 0x68
 8005304:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8005312:	4649      	mov	r1, r9
 8005314:	008b      	lsls	r3, r1, #2
 8005316:	4641      	mov	r1, r8
 8005318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800531c:	4641      	mov	r1, r8
 800531e:	008a      	lsls	r2, r1, #2
 8005320:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005324:	f7fb f804 	bl	8000330 <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <LL_USART_SetBaudRate+0x454>)
 800532e:	fba3 1302 	umull	r1, r3, r3, r2
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2164      	movs	r1, #100	; 0x64
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	3332      	adds	r3, #50	; 0x32
 8005340:	4a09      	ldr	r2, [pc, #36]	; (8005368 <LL_USART_SetBaudRate+0x454>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	b29b      	uxth	r3, r3
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	b29b      	uxth	r3, r3
 8005350:	4423      	add	r3, r4
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005362:	46bd      	mov	sp, r7
 8005364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005368:	51eb851f 	.word	0x51eb851f

0800536c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fd8e 	bl	8004ea0 <LL_USART_IsEnabled>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d16c      	bne.n	8005464 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005392:	f023 030c 	bic.w	r3, r3, #12
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	6851      	ldr	r1, [r2, #4]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	68d2      	ldr	r2, [r2, #12]
 800539e:	4311      	orrs	r1, r2
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	6912      	ldr	r2, [r2, #16]
 80053a4:	4311      	orrs	r1, r2
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	6992      	ldr	r2, [r2, #24]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fd85 	bl	8004ec8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff fd92 	bl	8004eee <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fe20 	bl	8004014 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a26      	ldr	r2, [pc, #152]	; (8005470 <LL_USART_Init+0x104>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d102      	bne.n	80053e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	e02f      	b.n	8005442 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a23      	ldr	r2, [pc, #140]	; (8005474 <LL_USART_Init+0x108>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d102      	bne.n	80053f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e028      	b.n	8005442 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a21      	ldr	r2, [pc, #132]	; (8005478 <LL_USART_Init+0x10c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d102      	bne.n	80053fe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	e021      	b.n	8005442 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1e      	ldr	r2, [pc, #120]	; (800547c <LL_USART_Init+0x110>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d102      	bne.n	800540c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e01a      	b.n	8005442 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <LL_USART_Init+0x114>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d102      	bne.n	800541a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e013      	b.n	8005442 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a19      	ldr	r2, [pc, #100]	; (8005484 <LL_USART_Init+0x118>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d102      	bne.n	8005428 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e00c      	b.n	8005442 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <LL_USART_Init+0x11c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d102      	bne.n	8005436 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e005      	b.n	8005442 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a14      	ldr	r2, [pc, #80]	; (800548c <LL_USART_Init+0x120>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d101      	bne.n	8005442 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d009      	beq.n	8005464 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8005450:	2300      	movs	r3, #0
 8005452:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fd58 	bl	8004f14 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005464:	7ffb      	ldrb	r3, [r7, #31]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40011000 	.word	0x40011000
 8005474:	40004400 	.word	0x40004400
 8005478:	40004800 	.word	0x40004800
 800547c:	40011400 	.word	0x40011400
 8005480:	40004c00 	.word	0x40004c00
 8005484:	40005000 	.word	0x40005000
 8005488:	40007800 	.word	0x40007800
 800548c:	40007c00 	.word	0x40007c00

08005490 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <LL_mDelay+0x48>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800549e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a6:	d00c      	beq.n	80054c2 <LL_mDelay+0x32>
  {
    Delay++;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3301      	adds	r3, #1
 80054ac:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80054ae:	e008      	b.n	80054c2 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <LL_mDelay+0x48>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <LL_mDelay+0x32>
    {
      Delay--;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3b01      	subs	r3, #1
 80054c0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f3      	bne.n	80054b0 <LL_mDelay+0x20>
    }
  }
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	e000e010 	.word	0xe000e010

080054dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80054e4:	4a04      	ldr	r2, [pc, #16]	; (80054f8 <LL_SetSystemCoreClock+0x1c>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6013      	str	r3, [r2, #0]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000014 	.word	0x20000014

080054fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005506:	f000 f888 	bl	800561a <BSP_SD_IsDetected>
 800550a:	4603      	mov	r3, r0
 800550c:	2b01      	cmp	r3, #1
 800550e:	d001      	beq.n	8005514 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e005      	b.n	8005520 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005514:	4804      	ldr	r0, [pc, #16]	; (8005528 <BSP_SD_Init+0x2c>)
 8005516:	f7fc fd95 	bl	8002044 <HAL_SD_Init>
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800551e:	79fb      	ldrb	r3, [r7, #7]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20007a28 	.word	0x20007a28

0800552c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	4806      	ldr	r0, [pc, #24]	; (800555c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005544:	f7fc fe2e 	bl	80021a4 <HAL_SD_ReadBlocks_DMA>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20007a28 	.word	0x20007a28

08005560 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	68f9      	ldr	r1, [r7, #12]
 8005576:	4806      	ldr	r0, [pc, #24]	; (8005590 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005578:	f7fc fef6 	bl	8002368 <HAL_SD_WriteBlocks_DMA>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20007a28 	.word	0x20007a28

08005594 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005598:	4805      	ldr	r0, [pc, #20]	; (80055b0 <BSP_SD_GetCardState+0x1c>)
 800559a:	f7fd fb2b 	bl	8002bf4 <HAL_SD_GetCardState>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20007a28 	.word	0x20007a28

080055b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4803      	ldr	r0, [pc, #12]	; (80055cc <BSP_SD_GetCardInfo+0x18>)
 80055c0:	f7fd faec 	bl	8002b9c <HAL_SD_GetCardInfo>
}
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20007a28 	.word	0x20007a28

080055d0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80055d8:	f000 f818 	bl	800560c <BSP_SD_AbortCallback>
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80055ec:	f003 f9b0 	bl	8008950 <BSP_SD_WriteCpltCallback>
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005600:	f003 f9b2 	bl	8008968 <BSP_SD_ReadCpltCallback>
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0

}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005620:	2301      	movs	r3, #1
 8005622:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	b2db      	uxtb	r3, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b7f      	cmp	r3, #127	; 0x7f
 8005644:	d802      	bhi.n	800564c <ff_convert+0x18>
		c = chr;
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	81fb      	strh	r3, [r7, #14]
 800564a:	e025      	b.n	8005698 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2bff      	cmp	r3, #255	; 0xff
 8005656:	d805      	bhi.n	8005664 <ff_convert+0x30>
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	3b80      	subs	r3, #128	; 0x80
 800565c:	4a12      	ldr	r2, [pc, #72]	; (80056a8 <ff_convert+0x74>)
 800565e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005662:	e000      	b.n	8005666 <ff_convert+0x32>
 8005664:	2300      	movs	r3, #0
 8005666:	81fb      	strh	r3, [r7, #14]
 8005668:	e016      	b.n	8005698 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800566a:	2300      	movs	r3, #0
 800566c:	81fb      	strh	r3, [r7, #14]
 800566e:	e009      	b.n	8005684 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005670:	89fb      	ldrh	r3, [r7, #14]
 8005672:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <ff_convert+0x74>)
 8005674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	429a      	cmp	r2, r3
 800567c:	d006      	beq.n	800568c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800567e:	89fb      	ldrh	r3, [r7, #14]
 8005680:	3301      	adds	r3, #1
 8005682:	81fb      	strh	r3, [r7, #14]
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	2b7f      	cmp	r3, #127	; 0x7f
 8005688:	d9f2      	bls.n	8005670 <ff_convert+0x3c>
 800568a:	e000      	b.n	800568e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800568c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	3380      	adds	r3, #128	; 0x80
 8005692:	b29b      	uxth	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005698:	89fb      	ldrh	r3, [r7, #14]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	08013d28 	.word	0x08013d28

080056ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056bc:	d201      	bcs.n	80056c2 <ff_wtoupper+0x16>
 80056be:	4b3e      	ldr	r3, [pc, #248]	; (80057b8 <ff_wtoupper+0x10c>)
 80056c0:	e000      	b.n	80056c4 <ff_wtoupper+0x18>
 80056c2:	4b3e      	ldr	r3, [pc, #248]	; (80057bc <ff_wtoupper+0x110>)
 80056c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	617a      	str	r2, [r7, #20]
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80056d0:	8a7b      	ldrh	r3, [r7, #18]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d068      	beq.n	80057a8 <ff_wtoupper+0xfc>
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	8a7b      	ldrh	r3, [r7, #18]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d364      	bcc.n	80057a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	1c9a      	adds	r2, r3, #2
 80056e2:	617a      	str	r2, [r7, #20]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	823b      	strh	r3, [r7, #16]
 80056e8:	8a3b      	ldrh	r3, [r7, #16]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	81fb      	strh	r3, [r7, #14]
 80056ee:	8a3b      	ldrh	r3, [r7, #16]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80056f4:	88fa      	ldrh	r2, [r7, #6]
 80056f6:	8a79      	ldrh	r1, [r7, #18]
 80056f8:	8a3b      	ldrh	r3, [r7, #16]
 80056fa:	440b      	add	r3, r1
 80056fc:	429a      	cmp	r2, r3
 80056fe:	da49      	bge.n	8005794 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	2b08      	cmp	r3, #8
 8005704:	d84f      	bhi.n	80057a6 <ff_wtoupper+0xfa>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <ff_wtoupper+0x60>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005731 	.word	0x08005731
 8005710:	08005743 	.word	0x08005743
 8005714:	08005759 	.word	0x08005759
 8005718:	08005761 	.word	0x08005761
 800571c:	08005769 	.word	0x08005769
 8005720:	08005771 	.word	0x08005771
 8005724:	08005779 	.word	0x08005779
 8005728:	08005781 	.word	0x08005781
 800572c:	08005789 	.word	0x08005789
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	8a7b      	ldrh	r3, [r7, #18]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	80fb      	strh	r3, [r7, #6]
 8005740:	e027      	b.n	8005792 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	8a7b      	ldrh	r3, [r7, #18]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	b29b      	uxth	r3, r3
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	88fa      	ldrh	r2, [r7, #6]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	80fb      	strh	r3, [r7, #6]
 8005756:	e01c      	b.n	8005792 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	3b10      	subs	r3, #16
 800575c:	80fb      	strh	r3, [r7, #6]
 800575e:	e018      	b.n	8005792 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	3b20      	subs	r3, #32
 8005764:	80fb      	strh	r3, [r7, #6]
 8005766:	e014      	b.n	8005792 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	3b30      	subs	r3, #48	; 0x30
 800576c:	80fb      	strh	r3, [r7, #6]
 800576e:	e010      	b.n	8005792 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	3b1a      	subs	r3, #26
 8005774:	80fb      	strh	r3, [r7, #6]
 8005776:	e00c      	b.n	8005792 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	3308      	adds	r3, #8
 800577c:	80fb      	strh	r3, [r7, #6]
 800577e:	e008      	b.n	8005792 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	3b50      	subs	r3, #80	; 0x50
 8005784:	80fb      	strh	r3, [r7, #6]
 8005786:	e004      	b.n	8005792 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800578e:	80fb      	strh	r3, [r7, #6]
 8005790:	bf00      	nop
			}
			break;
 8005792:	e008      	b.n	80057a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005794:	89fb      	ldrh	r3, [r7, #14]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d195      	bne.n	80056c6 <ff_wtoupper+0x1a>
 800579a:	8a3b      	ldrh	r3, [r7, #16]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80057a4:	e78f      	b.n	80056c6 <ff_wtoupper+0x1a>
			break;
 80057a6:	bf00      	nop
	}

	return chr;
 80057a8:	88fb      	ldrh	r3, [r7, #6]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	08013e28 	.word	0x08013e28
 80057bc:	0801401c 	.word	0x0801401c

080057c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <disk_status+0x30>)
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	79fa      	ldrb	r2, [r7, #7]
 80057d8:	4905      	ldr	r1, [pc, #20]	; (80057f0 <disk_status+0x30>)
 80057da:	440a      	add	r2, r1
 80057dc:	7a12      	ldrb	r2, [r2, #8]
 80057de:	4610      	mov	r0, r2
 80057e0:	4798      	blx	r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20002168 	.word	0x20002168

080057f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	4a0d      	ldr	r2, [pc, #52]	; (800583c <disk_initialize+0x48>)
 8005806:	5cd3      	ldrb	r3, [r2, r3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d111      	bne.n	8005830 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	4a0b      	ldr	r2, [pc, #44]	; (800583c <disk_initialize+0x48>)
 8005810:	2101      	movs	r1, #1
 8005812:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	4a09      	ldr	r2, [pc, #36]	; (800583c <disk_initialize+0x48>)
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	79fa      	ldrb	r2, [r7, #7]
 8005822:	4906      	ldr	r1, [pc, #24]	; (800583c <disk_initialize+0x48>)
 8005824:	440a      	add	r2, r1
 8005826:	7a12      	ldrb	r2, [r2, #8]
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20002168 	.word	0x20002168

08005840 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <disk_read+0x3c>)
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	689c      	ldr	r4, [r3, #8]
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	4a07      	ldr	r2, [pc, #28]	; (800587c <disk_read+0x3c>)
 8005860:	4413      	add	r3, r2
 8005862:	7a18      	ldrb	r0, [r3, #8]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	47a0      	blx	r4
 800586c:	4603      	mov	r3, r0
 800586e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
}
 8005872:	4618      	mov	r0, r3
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd90      	pop	{r4, r7, pc}
 800587a:	bf00      	nop
 800587c:	20002168 	.word	0x20002168

08005880 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <disk_write+0x3c>)
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68dc      	ldr	r4, [r3, #12]
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	4a07      	ldr	r2, [pc, #28]	; (80058bc <disk_write+0x3c>)
 80058a0:	4413      	add	r3, r2
 80058a2:	7a18      	ldrb	r0, [r3, #8]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	47a0      	blx	r4
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd90      	pop	{r4, r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20002168 	.word	0x20002168

080058c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	603a      	str	r2, [r7, #0]
 80058ca:	71fb      	strb	r3, [r7, #7]
 80058cc:	460b      	mov	r3, r1
 80058ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <disk_ioctl+0x38>)
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	79fa      	ldrb	r2, [r7, #7]
 80058de:	4906      	ldr	r1, [pc, #24]	; (80058f8 <disk_ioctl+0x38>)
 80058e0:	440a      	add	r2, r1
 80058e2:	7a10      	ldrb	r0, [r2, #8]
 80058e4:	79b9      	ldrb	r1, [r7, #6]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	4798      	blx	r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20002168 	.word	0x20002168

080058fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005900:	4904      	ldr	r1, [pc, #16]	; (8005914 <MX_FATFS_Init+0x18>)
 8005902:	4805      	ldr	r0, [pc, #20]	; (8005918 <MX_FATFS_Init+0x1c>)
 8005904:	f002 feac 	bl	8008660 <FATFS_LinkDriver>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	4b03      	ldr	r3, [pc, #12]	; (800591c <MX_FATFS_Init+0x20>)
 800590e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005910:	bf00      	nop
 8005912:	bd80      	pop	{r7, pc}
 8005914:	2000213c 	.word	0x2000213c
 8005918:	08014168 	.word	0x08014168
 800591c:	20002138 	.word	0x20002138

08005920 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005924:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005926:	4618      	mov	r0, r3
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3301      	adds	r3, #1
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	b21a      	sxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b21b      	sxth	r3, r3
 800594c:	4313      	orrs	r3, r2
 800594e:	b21b      	sxth	r3, r3
 8005950:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005952:	89fb      	ldrh	r3, [r7, #14]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3303      	adds	r3, #3
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	3202      	adds	r2, #2
 8005978:	7812      	ldrb	r2, [r2, #0]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	3201      	adds	r2, #1
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	7812      	ldrb	r2, [r2, #0]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
	return rv;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	460b      	mov	r3, r1
 80059b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	887a      	ldrh	r2, [r7, #2]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	0a1b      	lsrs	r3, r3, #8
 80059f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	1c53      	adds	r3, r2, #1
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	1c59      	adds	r1, r3, #1
 8005a58:	6179      	str	r1, [r7, #20]
 8005a5a:	7812      	ldrb	r2, [r2, #0]
 8005a5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f1      	bne.n	8005a4e <mem_cpy+0x1a>
	}
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a76:	b480      	push	{r7}
 8005a78:	b087      	sub	sp, #28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	617a      	str	r2, [r7, #20]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f3      	bne.n	8005a86 <mem_set+0x10>
}
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	; 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	61fa      	str	r2, [r7, #28]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	4619      	mov	r1, r3
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	61ba      	str	r2, [r7, #24]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	1acb      	subs	r3, r1, r3
 8005ad8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	607b      	str	r3, [r7, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <mem_cmp+0x40>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0eb      	beq.n	8005ac4 <mem_cmp+0x18>

	return r;
 8005aec:	697b      	ldr	r3, [r7, #20]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3724      	adds	r7, #36	; 0x24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b04:	e002      	b.n	8005b0c <chk_chr+0x12>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	607b      	str	r3, [r7, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <chk_chr+0x26>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d1f2      	bne.n	8005b06 <chk_chr+0xc>
	return *str;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	781b      	ldrb	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e029      	b.n	8005b98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b44:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <chk_lock+0xb4>)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	4413      	add	r3, r2
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01d      	beq.n	8005b8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b52:	4a24      	ldr	r2, [pc, #144]	; (8005be4 <chk_lock+0xb4>)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	4413      	add	r3, r2
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d116      	bne.n	8005b92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b64:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <chk_lock+0xb4>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d10c      	bne.n	8005b92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b78:	4a1a      	ldr	r2, [pc, #104]	; (8005be4 <chk_lock+0xb4>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	4413      	add	r3, r2
 8005b80:	3308      	adds	r3, #8
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d102      	bne.n	8005b92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b8c:	e007      	b.n	8005b9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3301      	adds	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d9d2      	bls.n	8005b44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d109      	bne.n	8005bb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <chk_lock+0x80>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d101      	bne.n	8005bb4 <chk_lock+0x84>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e010      	b.n	8005bd6 <chk_lock+0xa6>
 8005bb4:	2312      	movs	r3, #18
 8005bb6:	e00e      	b.n	8005bd6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d108      	bne.n	8005bd0 <chk_lock+0xa0>
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <chk_lock+0xb4>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	4413      	add	r3, r2
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bce:	d101      	bne.n	8005bd4 <chk_lock+0xa4>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	e000      	b.n	8005bd6 <chk_lock+0xa6>
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20002148 	.word	0x20002148

08005be8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	e002      	b.n	8005bfa <enq_lock+0x12>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d806      	bhi.n	8005c0e <enq_lock+0x26>
 8005c00:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <enq_lock+0x40>)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	4413      	add	r3, r2
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f2      	bne.n	8005bf4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20002148 	.word	0x20002148

08005c2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e01f      	b.n	8005c7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c3c:	4a41      	ldr	r2, [pc, #260]	; (8005d44 <inc_lock+0x118>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	4413      	add	r3, r2
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d113      	bne.n	8005c76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c4e:	4a3d      	ldr	r2, [pc, #244]	; (8005d44 <inc_lock+0x118>)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	4413      	add	r3, r2
 8005c56:	3304      	adds	r3, #4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d109      	bne.n	8005c76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c62:	4a38      	ldr	r2, [pc, #224]	; (8005d44 <inc_lock+0x118>)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	4413      	add	r3, r2
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d006      	beq.n	8005c84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d9dc      	bls.n	8005c3c <inc_lock+0x10>
 8005c82:	e000      	b.n	8005c86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d132      	bne.n	8005cf2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e002      	b.n	8005c98 <inc_lock+0x6c>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d806      	bhi.n	8005cac <inc_lock+0x80>
 8005c9e:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <inc_lock+0x118>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	4413      	add	r3, r2
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f2      	bne.n	8005c92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d101      	bne.n	8005cb6 <inc_lock+0x8a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e040      	b.n	8005d38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4922      	ldr	r1, [pc, #136]	; (8005d44 <inc_lock+0x118>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	440b      	add	r3, r1
 8005cc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	491e      	ldr	r1, [pc, #120]	; (8005d44 <inc_lock+0x118>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	440b      	add	r3, r1
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695a      	ldr	r2, [r3, #20]
 8005cd8:	491a      	ldr	r1, [pc, #104]	; (8005d44 <inc_lock+0x118>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	440b      	add	r3, r1
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ce4:	4a17      	ldr	r2, [pc, #92]	; (8005d44 <inc_lock+0x118>)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	4413      	add	r3, r2
 8005cec:	330c      	adds	r3, #12
 8005cee:	2200      	movs	r2, #0
 8005cf0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <inc_lock+0xe0>
 8005cf8:	4a12      	ldr	r2, [pc, #72]	; (8005d44 <inc_lock+0x118>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	4413      	add	r3, r2
 8005d00:	330c      	adds	r3, #12
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <inc_lock+0xe0>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e015      	b.n	8005d38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d108      	bne.n	8005d24 <inc_lock+0xf8>
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <inc_lock+0x118>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	4413      	add	r3, r2
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	e001      	b.n	8005d28 <inc_lock+0xfc>
 8005d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d28:	4906      	ldr	r1, [pc, #24]	; (8005d44 <inc_lock+0x118>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	440b      	add	r3, r1
 8005d30:	330c      	adds	r3, #12
 8005d32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20002148 	.word	0x20002148

08005d48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d825      	bhi.n	8005da8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d5c:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <dec_lock+0x74>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	4413      	add	r3, r2
 8005d64:	330c      	adds	r3, #12
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d6a:	89fb      	ldrh	r3, [r7, #14]
 8005d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d70:	d101      	bne.n	8005d76 <dec_lock+0x2e>
 8005d72:	2300      	movs	r3, #0
 8005d74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d76:	89fb      	ldrh	r3, [r7, #14]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <dec_lock+0x3a>
 8005d7c:	89fb      	ldrh	r3, [r7, #14]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <dec_lock+0x74>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	4413      	add	r3, r2
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	89fa      	ldrh	r2, [r7, #14]
 8005d8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d90:	89fb      	ldrh	r3, [r7, #14]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d105      	bne.n	8005da2 <dec_lock+0x5a>
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <dec_lock+0x74>)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4413      	add	r3, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	737b      	strb	r3, [r7, #13]
 8005da6:	e001      	b.n	8005dac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005da8:	2302      	movs	r3, #2
 8005daa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005dac:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20002148 	.word	0x20002148

08005dc0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e010      	b.n	8005df0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005dce:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <clear_lock+0x44>)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	4413      	add	r3, r2
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d105      	bne.n	8005dea <clear_lock+0x2a>
 8005dde:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <clear_lock+0x44>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	4413      	add	r3, r2
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d9eb      	bls.n	8005dce <clear_lock+0xe>
	}
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	20002148 	.word	0x20002148

08005e08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	78db      	ldrb	r3, [r3, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d034      	beq.n	8005e86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7858      	ldrb	r0, [r3, #1]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	f7ff fd26 	bl	8005880 <disk_write>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
 8005e3e:	e022      	b.n	8005e86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d217      	bcs.n	8005e86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	789b      	ldrb	r3, [r3, #2]
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	e010      	b.n	8005e80 <sync_window+0x78>
					wsect += fs->fsize;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7858      	ldrb	r0, [r3, #1]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e72:	2301      	movs	r3, #1
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	f7ff fd03 	bl	8005880 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d8eb      	bhi.n	8005e5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d01b      	beq.n	8005ee0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ffad 	bl	8005e08 <sync_window>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d113      	bne.n	8005ee0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7858      	ldrb	r0, [r3, #1]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	f7ff fcbb 	bl	8005840 <disk_read>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ff87 	bl	8005e08 <sync_window>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d159      	bne.n	8005fb8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d149      	bne.n	8005fa0 <sync_fs+0xb4>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	791b      	ldrb	r3, [r3, #4]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d145      	bne.n	8005fa0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	899b      	ldrh	r3, [r3, #12]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2100      	movs	r1, #0
 8005f22:	f7ff fda8 	bl	8005a76 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3338      	adds	r3, #56	; 0x38
 8005f2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fd37 	bl	80059a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3338      	adds	r3, #56	; 0x38
 8005f3c:	4921      	ldr	r1, [pc, #132]	; (8005fc4 <sync_fs+0xd8>)
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fd4c 	bl	80059dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3338      	adds	r3, #56	; 0x38
 8005f48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f4c:	491e      	ldr	r1, [pc, #120]	; (8005fc8 <sync_fs+0xdc>)
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fd44 	bl	80059dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3338      	adds	r3, #56	; 0x38
 8005f58:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7ff fd3a 	bl	80059dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3338      	adds	r3, #56	; 0x38
 8005f6c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f7ff fd30 	bl	80059dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7858      	ldrb	r0, [r3, #1]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f94:	2301      	movs	r3, #1
 8005f96:	f7ff fc73 	bl	8005880 <disk_write>
			fs->fsi_flag = 0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fc89 	bl	80058c0 <disk_ioctl>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <sync_fs+0xcc>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	41615252 	.word	0x41615252
 8005fc8:	61417272 	.word	0x61417272

08005fcc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	3b02      	subs	r3, #2
 8005fda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	3b02      	subs	r3, #2
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d301      	bcc.n	8005fec <clust2sect+0x20>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e008      	b.n	8005ffe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	895b      	ldrh	r3, [r3, #10]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	fb03 f202 	mul.w	r2, r3, r2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	4413      	add	r3, r2
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d904      	bls.n	800602a <get_fat+0x20>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <get_fat+0x26>
		val = 1;	/* Internal error */
 800602a:	2301      	movs	r3, #1
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e0bb      	b.n	80061a8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006034:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b03      	cmp	r3, #3
 800603c:	f000 8083 	beq.w	8006146 <get_fat+0x13c>
 8006040:	2b03      	cmp	r3, #3
 8006042:	f300 80a7 	bgt.w	8006194 <get_fat+0x18a>
 8006046:	2b01      	cmp	r3, #1
 8006048:	d002      	beq.n	8006050 <get_fat+0x46>
 800604a:	2b02      	cmp	r3, #2
 800604c:	d056      	beq.n	80060fc <get_fat+0xf2>
 800604e:	e0a1      	b.n	8006194 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	899b      	ldrh	r3, [r3, #12]
 8006066:	4619      	mov	r1, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	fbb3 f3f1 	udiv	r3, r3, r1
 800606e:	4413      	add	r3, r2
 8006070:	4619      	mov	r1, r3
 8006072:	6938      	ldr	r0, [r7, #16]
 8006074:	f7ff ff0c 	bl	8005e90 <move_window>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 808d 	bne.w	800619a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	60fa      	str	r2, [r7, #12]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	8992      	ldrh	r2, [r2, #12]
 800608a:	fbb3 f1f2 	udiv	r1, r3, r2
 800608e:	fb01 f202 	mul.w	r2, r1, r2
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800609c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	899b      	ldrh	r3, [r3, #12]
 80060a6:	4619      	mov	r1, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ae:	4413      	add	r3, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f7ff feec 	bl	8005e90 <move_window>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d16f      	bne.n	800619e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	899b      	ldrh	r3, [r3, #12]
 80060c2:	461a      	mov	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80060ca:	fb01 f202 	mul.w	r2, r1, r2
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <get_fat+0xe8>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	e002      	b.n	80060f8 <get_fat+0xee>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f8:	617b      	str	r3, [r7, #20]
			break;
 80060fa:	e055      	b.n	80061a8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	899b      	ldrh	r3, [r3, #12]
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006110:	4413      	add	r3, r2
 8006112:	4619      	mov	r1, r3
 8006114:	6938      	ldr	r0, [r7, #16]
 8006116:	f7ff febb 	bl	8005e90 <move_window>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d140      	bne.n	80061a2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	8992      	ldrh	r2, [r2, #12]
 800612e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006132:	fb00 f202 	mul.w	r2, r0, r2
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	440b      	add	r3, r1
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fbf8 	bl	8005930 <ld_word>
 8006140:	4603      	mov	r3, r0
 8006142:	617b      	str	r3, [r7, #20]
			break;
 8006144:	e030      	b.n	80061a8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	899b      	ldrh	r3, [r3, #12]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	b29b      	uxth	r3, r3
 8006152:	4619      	mov	r1, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	fbb3 f3f1 	udiv	r3, r3, r1
 800615a:	4413      	add	r3, r2
 800615c:	4619      	mov	r1, r3
 800615e:	6938      	ldr	r0, [r7, #16]
 8006160:	f7ff fe96 	bl	8005e90 <move_window>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11d      	bne.n	80061a6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	8992      	ldrh	r2, [r2, #12]
 8006178:	fbb3 f0f2 	udiv	r0, r3, r2
 800617c:	fb00 f202 	mul.w	r2, r0, r2
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	440b      	add	r3, r1
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fbeb 	bl	8005960 <ld_dword>
 800618a:	4603      	mov	r3, r0
 800618c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006190:	617b      	str	r3, [r7, #20]
			break;
 8006192:	e009      	b.n	80061a8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e006      	b.n	80061a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800619a:	bf00      	nop
 800619c:	e004      	b.n	80061a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800619e:	bf00      	nop
 80061a0:	e002      	b.n	80061a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061a2:	bf00      	nop
 80061a4:	e000      	b.n	80061a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061a6:	bf00      	nop
		}
	}

	return val;
 80061a8:	697b      	ldr	r3, [r7, #20]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80061b2:	b590      	push	{r4, r7, lr}
 80061b4:	b089      	sub	sp, #36	; 0x24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80061be:	2302      	movs	r3, #2
 80061c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f240 8102 	bls.w	80063ce <put_fat+0x21c>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	f080 80fc 	bcs.w	80063ce <put_fat+0x21c>
		switch (fs->fs_type) {
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b03      	cmp	r3, #3
 80061dc:	f000 80b6 	beq.w	800634c <put_fat+0x19a>
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	f300 80fd 	bgt.w	80063e0 <put_fat+0x22e>
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d003      	beq.n	80061f2 <put_fat+0x40>
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	f000 8083 	beq.w	80062f6 <put_fat+0x144>
 80061f0:	e0f6      	b.n	80063e0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4413      	add	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	899b      	ldrh	r3, [r3, #12]
 8006208:	4619      	mov	r1, r3
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006210:	4413      	add	r3, r2
 8006212:	4619      	mov	r1, r3
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7ff fe3b 	bl	8005e90 <move_window>
 800621a:	4603      	mov	r3, r0
 800621c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800621e:	7ffb      	ldrb	r3, [r7, #31]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 80d6 	bne.w	80063d2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	61ba      	str	r2, [r7, #24]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	8992      	ldrh	r2, [r2, #12]
 8006236:	fbb3 f0f2 	udiv	r0, r3, r2
 800623a:	fb00 f202 	mul.w	r2, r0, r2
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	440b      	add	r3, r1
 8006242:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00d      	beq.n	800626a <put_fat+0xb8>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b25b      	sxtb	r3, r3
 8006254:	f003 030f 	and.w	r3, r3, #15
 8006258:	b25a      	sxtb	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	b25b      	sxtb	r3, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	b25b      	sxtb	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	e001      	b.n	800626e <put_fat+0xbc>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	899b      	ldrh	r3, [r3, #12]
 8006280:	4619      	mov	r1, r3
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	fbb3 f3f1 	udiv	r3, r3, r1
 8006288:	4413      	add	r3, r2
 800628a:	4619      	mov	r1, r3
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff fdff 	bl	8005e90 <move_window>
 8006292:	4603      	mov	r3, r0
 8006294:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006296:	7ffb      	ldrb	r3, [r7, #31]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 809c 	bne.w	80063d6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	899b      	ldrh	r3, [r3, #12]
 80062a8:	461a      	mov	r2, r3
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80062b0:	fb00 f202 	mul.w	r2, r0, r2
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	440b      	add	r3, r1
 80062b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <put_fat+0x11a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e00e      	b.n	80062ea <put_fat+0x138>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b25b      	sxtb	r3, r3
 80062d2:	f023 030f 	bic.w	r3, r3, #15
 80062d6:	b25a      	sxtb	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b25b      	sxtb	r3, r3
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	70da      	strb	r2, [r3, #3]
			break;
 80062f4:	e074      	b.n	80063e0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	899b      	ldrh	r3, [r3, #12]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	4619      	mov	r1, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	fbb3 f3f1 	udiv	r3, r3, r1
 800630a:	4413      	add	r3, r2
 800630c:	4619      	mov	r1, r3
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fdbe 	bl	8005e90 <move_window>
 8006314:	4603      	mov	r3, r0
 8006316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006318:	7ffb      	ldrb	r3, [r7, #31]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d15d      	bne.n	80063da <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	8992      	ldrh	r2, [r2, #12]
 800632c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006330:	fb00 f202 	mul.w	r2, r0, r2
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	440b      	add	r3, r1
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	b292      	uxth	r2, r2
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fb31 	bl	80059a6 <st_word>
			fs->wflag = 1;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	70da      	strb	r2, [r3, #3]
			break;
 800634a:	e049      	b.n	80063e0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	899b      	ldrh	r3, [r3, #12]
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	b29b      	uxth	r3, r3
 8006358:	4619      	mov	r1, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006360:	4413      	add	r3, r2
 8006362:	4619      	mov	r1, r3
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff fd93 	bl	8005e90 <move_window>
 800636a:	4603      	mov	r3, r0
 800636c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800636e:	7ffb      	ldrb	r3, [r7, #31]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d134      	bne.n	80063de <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	8992      	ldrh	r2, [r2, #12]
 8006388:	fbb3 f0f2 	udiv	r0, r3, r2
 800638c:	fb00 f202 	mul.w	r2, r0, r2
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	440b      	add	r3, r1
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fae3 	bl	8005960 <ld_dword>
 800639a:	4603      	mov	r3, r0
 800639c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063a0:	4323      	orrs	r3, r4
 80063a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	8992      	ldrh	r2, [r2, #12]
 80063b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80063b6:	fb00 f202 	mul.w	r2, r0, r2
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	440b      	add	r3, r1
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff fb0b 	bl	80059dc <st_dword>
			fs->wflag = 1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	70da      	strb	r2, [r3, #3]
			break;
 80063cc:	e008      	b.n	80063e0 <put_fat+0x22e>
		}
	}
 80063ce:	bf00      	nop
 80063d0:	e006      	b.n	80063e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80063d2:	bf00      	nop
 80063d4:	e004      	b.n	80063e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80063de:	bf00      	nop
	return res;
 80063e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3724      	adds	r7, #36	; 0x24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}

080063ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b088      	sub	sp, #32
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d904      	bls.n	8006410 <remove_chain+0x26>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	429a      	cmp	r2, r3
 800640e:	d301      	bcc.n	8006414 <remove_chain+0x2a>
 8006410:	2302      	movs	r3, #2
 8006412:	e04b      	b.n	80064ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00c      	beq.n	8006434 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800641a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	69b8      	ldr	r0, [r7, #24]
 8006422:	f7ff fec6 	bl	80061b2 <put_fat>
 8006426:	4603      	mov	r3, r0
 8006428:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <remove_chain+0x4a>
 8006430:	7ffb      	ldrb	r3, [r7, #31]
 8006432:	e03b      	b.n	80064ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f7ff fde7 	bl	800600a <get_fat>
 800643c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d031      	beq.n	80064a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <remove_chain+0x64>
 800644a:	2302      	movs	r3, #2
 800644c:	e02e      	b.n	80064ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006454:	d101      	bne.n	800645a <remove_chain+0x70>
 8006456:	2301      	movs	r3, #1
 8006458:	e028      	b.n	80064ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800645a:	2200      	movs	r2, #0
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	69b8      	ldr	r0, [r7, #24]
 8006460:	f7ff fea7 	bl	80061b2 <put_fat>
 8006464:	4603      	mov	r3, r0
 8006466:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006468:	7ffb      	ldrb	r3, [r7, #31]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <remove_chain+0x88>
 800646e:	7ffb      	ldrb	r3, [r7, #31]
 8006470:	e01c      	b.n	80064ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	3b02      	subs	r3, #2
 800647c:	429a      	cmp	r2, r3
 800647e:	d20b      	bcs.n	8006498 <remove_chain+0xae>
			fs->free_clst++;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	791b      	ldrb	r3, [r3, #4]
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d3c6      	bcc.n	8006434 <remove_chain+0x4a>
 80064a6:	e000      	b.n	80064aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80064a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3720      	adds	r7, #32
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10d      	bne.n	80064e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <create_chain+0x2c>
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d31b      	bcc.n	8006518 <create_chain+0x64>
 80064e0:	2301      	movs	r3, #1
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e018      	b.n	8006518 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff fd8e 	bl	800600a <get_fat>
 80064ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d801      	bhi.n	80064fa <create_chain+0x46>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e070      	b.n	80065dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006500:	d101      	bne.n	8006506 <create_chain+0x52>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	e06a      	b.n	80065dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	429a      	cmp	r2, r3
 800650e:	d201      	bcs.n	8006514 <create_chain+0x60>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	e063      	b.n	80065dc <create_chain+0x128>
		scl = clst;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	429a      	cmp	r2, r3
 800652a:	d307      	bcc.n	800653c <create_chain+0x88>
				ncl = 2;
 800652c:	2302      	movs	r3, #2
 800652e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	429a      	cmp	r2, r3
 8006536:	d901      	bls.n	800653c <create_chain+0x88>
 8006538:	2300      	movs	r3, #0
 800653a:	e04f      	b.n	80065dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fd63 	bl	800600a <get_fat>
 8006544:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d003      	beq.n	800655a <create_chain+0xa6>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006558:	d101      	bne.n	800655e <create_chain+0xaa>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	e03e      	b.n	80065dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	429a      	cmp	r2, r3
 8006564:	d1da      	bne.n	800651c <create_chain+0x68>
 8006566:	2300      	movs	r3, #0
 8006568:	e038      	b.n	80065dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800656a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800656c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006570:	69f9      	ldr	r1, [r7, #28]
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f7ff fe1d 	bl	80061b2 <put_fat>
 8006578:	4603      	mov	r3, r0
 800657a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800657c:	7dfb      	ldrb	r3, [r7, #23]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <create_chain+0xe2>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6938      	ldr	r0, [r7, #16]
 800658e:	f7ff fe10 	bl	80061b2 <put_fat>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d116      	bne.n	80065ca <create_chain+0x116>
		fs->last_clst = ncl;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	3b02      	subs	r3, #2
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d804      	bhi.n	80065ba <create_chain+0x106>
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	791b      	ldrb	r3, [r3, #4]
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	711a      	strb	r2, [r3, #4]
 80065c8:	e007      	b.n	80065da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d102      	bne.n	80065d6 <create_chain+0x122>
 80065d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065d4:	e000      	b.n	80065d8 <create_chain+0x124>
 80065d6:	2301      	movs	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80065da:	69fb      	ldr	r3, [r7, #28]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	3304      	adds	r3, #4
 80065fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	899b      	ldrh	r3, [r3, #12]
 8006600:	461a      	mov	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	fbb3 f3f2 	udiv	r3, r3, r2
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	8952      	ldrh	r2, [r2, #10]
 800660c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006610:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1d1a      	adds	r2, r3, #4
 8006616:	613a      	str	r2, [r7, #16]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <clmt_clust+0x42>
 8006622:	2300      	movs	r3, #0
 8006624:	e010      	b.n	8006648 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	d307      	bcc.n	800663e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	3304      	adds	r3, #4
 800663a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800663c:	e7e9      	b.n	8006612 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800663e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4413      	add	r3, r2
}
 8006648:	4618      	mov	r0, r3
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800666a:	d204      	bcs.n	8006676 <dir_sdi+0x22>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006676:	2302      	movs	r3, #2
 8006678:	e071      	b.n	800675e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <dir_sdi+0x46>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d902      	bls.n	800669a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10c      	bne.n	80066ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	8912      	ldrh	r2, [r2, #8]
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d301      	bcc.n	80066b0 <dir_sdi+0x5c>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e056      	b.n	800675e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	61da      	str	r2, [r3, #28]
 80066b8:	e02d      	b.n	8006716 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	895b      	ldrh	r3, [r3, #10]
 80066be:	461a      	mov	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	899b      	ldrh	r3, [r3, #12]
 80066c4:	fb02 f303 	mul.w	r3, r2, r3
 80066c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066ca:	e019      	b.n	8006700 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6979      	ldr	r1, [r7, #20]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff fc9a 	bl	800600a <get_fat>
 80066d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066de:	d101      	bne.n	80066e4 <dir_sdi+0x90>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e03c      	b.n	800675e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d904      	bls.n	80066f4 <dir_sdi+0xa0>
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d301      	bcc.n	80066f8 <dir_sdi+0xa4>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e032      	b.n	800675e <dir_sdi+0x10a>
			ofs -= csz;
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	429a      	cmp	r2, r3
 8006706:	d2e1      	bcs.n	80066cc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006708:	6979      	ldr	r1, [r7, #20]
 800670a:	6938      	ldr	r0, [r7, #16]
 800670c:	f7ff fc5e 	bl	8005fcc <clust2sect>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <dir_sdi+0xd4>
 8006724:	2302      	movs	r3, #2
 8006726:	e01a      	b.n	800675e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	899b      	ldrh	r3, [r3, #12]
 8006730:	4619      	mov	r1, r3
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	fbb3 f3f1 	udiv	r3, r3, r1
 8006738:	441a      	add	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	899b      	ldrh	r3, [r3, #12]
 8006748:	461a      	mov	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006750:	fb00 f202 	mul.w	r2, r0, r2
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	18ca      	adds	r2, r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	3320      	adds	r3, #32
 800677c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <dir_next+0x28>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800678c:	d301      	bcc.n	8006792 <dir_next+0x2c>
 800678e:	2304      	movs	r3, #4
 8006790:	e0bb      	b.n	800690a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	899b      	ldrh	r3, [r3, #12]
 8006796:	461a      	mov	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	fbb3 f1f2 	udiv	r1, r3, r2
 800679e:	fb01 f202 	mul.w	r2, r1, r2
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 809d 	bne.w	80068e4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10b      	bne.n	80067d4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	8912      	ldrh	r2, [r2, #8]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	f0c0 808d 	bcc.w	80068e4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	61da      	str	r2, [r3, #28]
 80067d0:	2304      	movs	r3, #4
 80067d2:	e09a      	b.n	800690a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	899b      	ldrh	r3, [r3, #12]
 80067d8:	461a      	mov	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	8952      	ldrh	r2, [r2, #10]
 80067e4:	3a01      	subs	r2, #1
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d17b      	bne.n	80068e4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	4619      	mov	r1, r3
 80067f4:	4610      	mov	r0, r2
 80067f6:	f7ff fc08 	bl	800600a <get_fat>
 80067fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d801      	bhi.n	8006806 <dir_next+0xa0>
 8006802:	2302      	movs	r3, #2
 8006804:	e081      	b.n	800690a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800680c:	d101      	bne.n	8006812 <dir_next+0xac>
 800680e:	2301      	movs	r3, #1
 8006810:	e07b      	b.n	800690a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	429a      	cmp	r2, r3
 800681a:	d359      	bcc.n	80068d0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	61da      	str	r2, [r3, #28]
 8006828:	2304      	movs	r3, #4
 800682a:	e06e      	b.n	800690a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f7ff fe3d 	bl	80064b4 <create_chain>
 800683a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <dir_next+0xe0>
 8006842:	2307      	movs	r3, #7
 8006844:	e061      	b.n	800690a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <dir_next+0xea>
 800684c:	2302      	movs	r3, #2
 800684e:	e05c      	b.n	800690a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006856:	d101      	bne.n	800685c <dir_next+0xf6>
 8006858:	2301      	movs	r3, #1
 800685a:	e056      	b.n	800690a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fad3 	bl	8005e08 <sync_window>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <dir_next+0x106>
 8006868:	2301      	movs	r3, #1
 800686a:	e04e      	b.n	800690a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	899b      	ldrh	r3, [r3, #12]
 8006876:	461a      	mov	r2, r3
 8006878:	2100      	movs	r1, #0
 800687a:	f7ff f8fc 	bl	8005a76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	6979      	ldr	r1, [r7, #20]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fba1 	bl	8005fcc <clust2sect>
 800688a:	4602      	mov	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	635a      	str	r2, [r3, #52]	; 0x34
 8006890:	e012      	b.n	80068b8 <dir_next+0x152>
						fs->wflag = 1;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff fab5 	bl	8005e08 <sync_window>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <dir_next+0x142>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e030      	b.n	800690a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	3301      	adds	r3, #1
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	635a      	str	r2, [r3, #52]	; 0x34
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	895b      	ldrh	r3, [r3, #10]
 80068bc:	461a      	mov	r2, r3
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d3e6      	bcc.n	8006892 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80068d6:	6979      	ldr	r1, [r7, #20]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff fb77 	bl	8005fcc <clust2sect>
 80068de:	4602      	mov	r2, r0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	899b      	ldrh	r3, [r3, #12]
 80068f4:	461a      	mov	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80068fc:	fb00 f202 	mul.w	r2, r0, r2
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	18ca      	adds	r2, r1, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006922:	2100      	movs	r1, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fe95 	bl	8006654 <dir_sdi>
 800692a:	4603      	mov	r3, r0
 800692c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d12b      	bne.n	800698c <dir_alloc+0x7a>
		n = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff faa6 	bl	8005e90 <move_window>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d11d      	bne.n	800698a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2be5      	cmp	r3, #229	; 0xe5
 8006956:	d004      	beq.n	8006962 <dir_alloc+0x50>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d107      	bne.n	8006972 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3301      	adds	r3, #1
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d102      	bne.n	8006976 <dir_alloc+0x64>
 8006970:	e00c      	b.n	800698c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006976:	2101      	movs	r1, #1
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fef4 	bl	8006766 <dir_next>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0d7      	beq.n	8006938 <dir_alloc+0x26>
 8006988:	e000      	b.n	800698c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800698a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d101      	bne.n	8006996 <dir_alloc+0x84>
 8006992:	2307      	movs	r3, #7
 8006994:	75fb      	strb	r3, [r7, #23]
	return res;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	331a      	adds	r3, #26
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe ffbe 	bl	8005930 <ld_word>
 80069b4:	4603      	mov	r3, r0
 80069b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d109      	bne.n	80069d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	3314      	adds	r3, #20
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe ffb3 	bl	8005930 <ld_word>
 80069ca:	4603      	mov	r3, r0
 80069cc:	041b      	lsls	r3, r3, #16
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80069d4:	68fb      	ldr	r3, [r7, #12]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	331a      	adds	r3, #26
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	b292      	uxth	r2, r2
 80069f2:	4611      	mov	r1, r2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe ffd6 	bl	80059a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d109      	bne.n	8006a16 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f103 0214 	add.w	r2, r3, #20
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f7fe ffc8 	bl	80059a6 <st_word>
	}
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	331a      	adds	r3, #26
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe ff7e 	bl	8005930 <ld_word>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <cmp_lfn+0x1e>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e059      	b.n	8006af2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	4613      	mov	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006a54:	2301      	movs	r3, #1
 8006a56:	81fb      	strh	r3, [r7, #14]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	e033      	b.n	8006ac6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006a5e:	4a27      	ldr	r2, [pc, #156]	; (8006afc <cmp_lfn+0xdc>)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe ff5f 	bl	8005930 <ld_word>
 8006a72:	4603      	mov	r3, r0
 8006a74:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01a      	beq.n	8006ab2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2bfe      	cmp	r3, #254	; 0xfe
 8006a80:	d812      	bhi.n	8006aa8 <cmp_lfn+0x88>
 8006a82:	89bb      	ldrh	r3, [r7, #12]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fe11 	bl	80056ac <ff_wtoupper>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461c      	mov	r4, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	617a      	str	r2, [r7, #20]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe fe05 	bl	80056ac <ff_wtoupper>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	d001      	beq.n	8006aac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e022      	b.n	8006af2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006aac:	89bb      	ldrh	r3, [r7, #12]
 8006aae:	81fb      	strh	r3, [r7, #14]
 8006ab0:	e006      	b.n	8006ac0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ab2:	89bb      	ldrh	r3, [r7, #12]
 8006ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d001      	beq.n	8006ac0 <cmp_lfn+0xa0>
 8006abc:	2300      	movs	r3, #0
 8006abe:	e018      	b.n	8006af2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	d9c8      	bls.n	8006a5e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <cmp_lfn+0xd0>
 8006ad8:	89fb      	ldrh	r3, [r7, #14]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <cmp_lfn+0xd0>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <cmp_lfn+0xd0>
 8006aec:	2300      	movs	r3, #0
 8006aee:	e000      	b.n	8006af2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006af0:	2301      	movs	r3, #1
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd90      	pop	{r4, r7, pc}
 8006afa:	bf00      	nop
 8006afc:	08014158 	.word	0x08014158

08006b00 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	460b      	mov	r3, r1
 8006b10:	71fb      	strb	r3, [r7, #7]
 8006b12:	4613      	mov	r3, r2
 8006b14:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	330d      	adds	r3, #13
 8006b1a:	79ba      	ldrb	r2, [r7, #6]
 8006b1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	330b      	adds	r3, #11
 8006b22:	220f      	movs	r2, #15
 8006b24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	331a      	adds	r3, #26
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe ff36 	bl	80059a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	1e5a      	subs	r2, r3, #1
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	82fb      	strh	r3, [r7, #22]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006b52:	8afb      	ldrh	r3, [r7, #22]
 8006b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d007      	beq.n	8006b6c <put_lfn+0x6c>
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	61fa      	str	r2, [r7, #28]
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006b6c:	4a17      	ldr	r2, [pc, #92]	; (8006bcc <put_lfn+0xcc>)
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	4413      	add	r3, r2
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	8afa      	ldrh	r2, [r7, #22]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe ff11 	bl	80059a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006b84:	8afb      	ldrh	r3, [r7, #22]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <put_lfn+0x90>
 8006b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	3301      	adds	r3, #1
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b0c      	cmp	r3, #12
 8006b9a:	d9da      	bls.n	8006b52 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006b9c:	8afb      	ldrh	r3, [r7, #22]
 8006b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d006      	beq.n	8006bb4 <put_lfn+0xb4>
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <put_lfn+0xbc>
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	79fa      	ldrb	r2, [r7, #7]
 8006bc0:	701a      	strb	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	08014158 	.word	0x08014158

08006bd0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	; 0x30
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006bde:	220b      	movs	r2, #11
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7fe ff26 	bl	8005a34 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d92b      	bls.n	8006c46 <gen_numname+0x76>
		sr = seq;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006bf2:	e022      	b.n	8006c3a <gen_numname+0x6a>
			wc = *lfn++;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1c9a      	adds	r2, r3, #2
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006bfe:	2300      	movs	r3, #0
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	e017      	b.n	8006c34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	005a      	lsls	r2, r3, #1
 8006c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <gen_numname+0x5e>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006c28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006c2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	3301      	adds	r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d9e4      	bls.n	8006c04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1d8      	bne.n	8006bf4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006c46:	2307      	movs	r3, #7
 8006c48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	3330      	adds	r3, #48	; 0x30
 8006c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c5e:	2b39      	cmp	r3, #57	; 0x39
 8006c60:	d904      	bls.n	8006c6c <gen_numname+0x9c>
 8006c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c66:	3307      	adds	r3, #7
 8006c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c72:	3330      	adds	r3, #48	; 0x30
 8006c74:	443b      	add	r3, r7
 8006c76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006c7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1df      	bne.n	8006c4a <gen_numname+0x7a>
	ns[i] = '~';
 8006c8a:	f107 0214 	add.w	r2, r7, #20
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	4413      	add	r3, r2
 8006c92:	227e      	movs	r2, #126	; 0x7e
 8006c94:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006c96:	2300      	movs	r3, #0
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9a:	e002      	b.n	8006ca2 <gen_numname+0xd2>
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d205      	bcs.n	8006cb6 <gen_numname+0xe6>
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d1f2      	bne.n	8006c9c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	2b07      	cmp	r3, #7
 8006cba:	d807      	bhi.n	8006ccc <gen_numname+0xfc>
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8006cc2:	3330      	adds	r3, #48	; 0x30
 8006cc4:	443b      	add	r3, r7
 8006cc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006cca:	e000      	b.n	8006cce <gen_numname+0xfe>
 8006ccc:	2120      	movs	r1, #32
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	460a      	mov	r2, r1
 8006cda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	d9e9      	bls.n	8006cb6 <gen_numname+0xe6>
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	3730      	adds	r7, #48	; 0x30
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006cf8:	230b      	movs	r3, #11
 8006cfa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	0852      	lsrs	r2, r2, #1
 8006d02:	01db      	lsls	r3, r3, #7
 8006d04:	4313      	orrs	r3, r2
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1c59      	adds	r1, r3, #1
 8006d0c:	6079      	str	r1, [r7, #4]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	4413      	add	r3, r2
 8006d12:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ed      	bne.n	8006cfc <sum_sfn+0x10>
	return sum;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fc88 	bl	8006654 <dir_sdi>
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <dir_find+0x24>
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	e0a9      	b.n	8006ea6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d52:	23ff      	movs	r3, #255	; 0xff
 8006d54:	753b      	strb	r3, [r7, #20]
 8006d56:	7d3b      	ldrb	r3, [r7, #20]
 8006d58:	757b      	strb	r3, [r7, #21]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6938      	ldr	r0, [r7, #16]
 8006d6a:	f7ff f891 	bl	8005e90 <move_window>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 8090 	bne.w	8006e9a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d82:	7dbb      	ldrb	r3, [r7, #22]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <dir_find+0x60>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	75fb      	strb	r3, [r7, #23]
 8006d8c:	e08a      	b.n	8006ea4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	330b      	adds	r3, #11
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d9a:	73fb      	strb	r3, [r7, #15]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7bfa      	ldrb	r2, [r7, #15]
 8006da0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006da2:	7dbb      	ldrb	r3, [r7, #22]
 8006da4:	2be5      	cmp	r3, #229	; 0xe5
 8006da6:	d007      	beq.n	8006db8 <dir_find+0x8a>
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <dir_find+0x98>
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	2b0f      	cmp	r3, #15
 8006db6:	d006      	beq.n	8006dc6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006db8:	23ff      	movs	r3, #255	; 0xff
 8006dba:	757b      	strb	r3, [r7, #21]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8006dc4:	e05e      	b.n	8006e84 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b0f      	cmp	r3, #15
 8006dca:	d136      	bne.n	8006e3a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d154      	bne.n	8006e84 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006dda:	7dbb      	ldrb	r3, [r7, #22]
 8006ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00d      	beq.n	8006e00 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	7b5b      	ldrb	r3, [r3, #13]
 8006dea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006dec:	7dbb      	ldrb	r3, [r7, #22]
 8006dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df2:	75bb      	strb	r3, [r7, #22]
 8006df4:	7dbb      	ldrb	r3, [r7, #22]
 8006df6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695a      	ldr	r2, [r3, #20]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e00:	7dba      	ldrb	r2, [r7, #22]
 8006e02:	7d7b      	ldrb	r3, [r7, #21]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d115      	bne.n	8006e34 <dir_find+0x106>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	330d      	adds	r3, #13
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	7d3a      	ldrb	r2, [r7, #20]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d10e      	bne.n	8006e34 <dir_find+0x106>
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f7ff fdfd 	bl	8006a20 <cmp_lfn>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <dir_find+0x106>
 8006e2c:	7d7b      	ldrb	r3, [r7, #21]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	e000      	b.n	8006e36 <dir_find+0x108>
 8006e34:	23ff      	movs	r3, #255	; 0xff
 8006e36:	757b      	strb	r3, [r7, #21]
 8006e38:	e024      	b.n	8006e84 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e3a:	7d7b      	ldrb	r3, [r7, #21]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d109      	bne.n	8006e54 <dir_find+0x126>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff ff51 	bl	8006cec <sum_sfn>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	7d3b      	ldrb	r3, [r7, #20]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d024      	beq.n	8006e9e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <dir_find+0x14a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a18      	ldr	r0, [r3, #32]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3324      	adds	r3, #36	; 0x24
 8006e6a:	220b      	movs	r2, #11
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7fe fe1d 	bl	8005aac <mem_cmp>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d014      	beq.n	8006ea2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e78:	23ff      	movs	r3, #255	; 0xff
 8006e7a:	757b      	strb	r3, [r7, #21]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fc6d 	bl	8006766 <dir_next>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f43f af65 	beq.w	8006d62 <dir_find+0x34>
 8006e98:	e004      	b.n	8006ea4 <dir_find+0x176>
		if (res != FR_OK) break;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ea2:	bf00      	nop

	return res;
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ec4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <dir_register+0x20>
 8006ecc:	2306      	movs	r3, #6
 8006ece:	e0e0      	b.n	8007092 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed4:	e002      	b.n	8006edc <dir_register+0x2c>
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	3301      	adds	r3, #1
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4413      	add	r3, r2
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f4      	bne.n	8006ed6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006ef2:	f107 030c 	add.w	r3, r7, #12
 8006ef6:	220c      	movs	r2, #12
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe fd9b 	bl	8005a34 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d032      	beq.n	8006f6e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2240      	movs	r2, #64	; 0x40
 8006f0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006f10:	2301      	movs	r3, #1
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f14:	e016      	b.n	8006f44 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	f107 010c 	add.w	r1, r7, #12
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	f7ff fe53 	bl	8006bd0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff feff 	bl	8006d2e <dir_find>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	3301      	adds	r3, #1
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	2b63      	cmp	r3, #99	; 0x63
 8006f48:	d9e5      	bls.n	8006f16 <dir_register+0x66>
 8006f4a:	e000      	b.n	8006f4e <dir_register+0x9e>
			if (res != FR_OK) break;
 8006f4c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b64      	cmp	r3, #100	; 0x64
 8006f52:	d101      	bne.n	8006f58 <dir_register+0xa8>
 8006f54:	2307      	movs	r3, #7
 8006f56:	e09c      	b.n	8007092 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d002      	beq.n	8006f66 <dir_register+0xb6>
 8006f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f64:	e095      	b.n	8007092 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006f66:	7dfa      	ldrb	r2, [r7, #23]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <dir_register+0xd8>
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	4a47      	ldr	r2, [pc, #284]	; (800709c <dir_register+0x1ec>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	3301      	adds	r3, #1
 8006f86:	e000      	b.n	8006f8a <dir_register+0xda>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006f8c:	6a39      	ldr	r1, [r7, #32]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff fcbf 	bl	8006912 <dir_alloc>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d148      	bne.n	8007034 <dir_register+0x184>
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	623b      	str	r3, [r7, #32]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d042      	beq.n	8007034 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	015b      	lsls	r3, r3, #5
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fb4a 	bl	8006654 <dir_sdi>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d132      	bne.n	8007034 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3324      	adds	r3, #36	; 0x24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fe8a 	bl	8006cec <sum_sfn>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	69f8      	ldr	r0, [r7, #28]
 8006fe4:	f7fe ff54 	bl	8005e90 <move_window>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d11d      	bne.n	8007032 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	6918      	ldr	r0, [r3, #16]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a19      	ldr	r1, [r3, #32]
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	b2da      	uxtb	r2, r3
 8007002:	7efb      	ldrb	r3, [r7, #27]
 8007004:	f7ff fd7c 	bl	8006b00 <put_lfn>
				fs->wflag = 1;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2201      	movs	r2, #1
 800700c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800700e:	2100      	movs	r1, #0
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fba8 	bl	8006766 <dir_next>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800701c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <dir_register+0x184>
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	3b01      	subs	r3, #1
 8007028:	623b      	str	r3, [r7, #32]
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1d5      	bne.n	8006fdc <dir_register+0x12c>
 8007030:	e000      	b.n	8007034 <dir_register+0x184>
				if (res != FR_OK) break;
 8007032:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007038:	2b00      	cmp	r3, #0
 800703a:	d128      	bne.n	800708e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	4619      	mov	r1, r3
 8007042:	69f8      	ldr	r0, [r7, #28]
 8007044:	f7fe ff24 	bl	8005e90 <move_window>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800704e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007052:	2b00      	cmp	r3, #0
 8007054:	d11b      	bne.n	800708e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	2220      	movs	r2, #32
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fd09 	bl	8005a76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a18      	ldr	r0, [r3, #32]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3324      	adds	r3, #36	; 0x24
 800706c:	220b      	movs	r2, #11
 800706e:	4619      	mov	r1, r3
 8007070:	f7fe fce0 	bl	8005a34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	330c      	adds	r3, #12
 8007080:	f002 0218 	and.w	r2, r2, #24
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	2201      	movs	r2, #1
 800708c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800708e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007092:	4618      	mov	r0, r3
 8007094:	3730      	adds	r7, #48	; 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	4ec4ec4f 	.word	0x4ec4ec4f

080070a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	; 0x28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	61ba      	str	r2, [r7, #24]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4413      	add	r3, r2
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80070ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d0:	2b1f      	cmp	r3, #31
 80070d2:	d940      	bls.n	8007156 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80070d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d6:	2b2f      	cmp	r3, #47	; 0x2f
 80070d8:	d006      	beq.n	80070e8 <create_name+0x48>
 80070da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070dc:	2b5c      	cmp	r3, #92	; 0x5c
 80070de:	d110      	bne.n	8007102 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80070e0:	e002      	b.n	80070e8 <create_name+0x48>
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	4413      	add	r3, r2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b2f      	cmp	r3, #47	; 0x2f
 80070f2:	d0f6      	beq.n	80070e2 <create_name+0x42>
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	4413      	add	r3, r2
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b5c      	cmp	r3, #92	; 0x5c
 80070fe:	d0f0      	beq.n	80070e2 <create_name+0x42>
			break;
 8007100:	e02a      	b.n	8007158 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2bfe      	cmp	r3, #254	; 0xfe
 8007106:	d901      	bls.n	800710c <create_name+0x6c>
 8007108:	2306      	movs	r3, #6
 800710a:	e17d      	b.n	8007408 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800710c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800710e:	b2db      	uxtb	r3, r3
 8007110:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007114:	2101      	movs	r1, #1
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe fa8c 	bl	8005634 <ff_convert>
 800711c:	4603      	mov	r3, r0
 800711e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <create_name+0x8a>
 8007126:	2306      	movs	r3, #6
 8007128:	e16e      	b.n	8007408 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800712a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800712c:	2b7f      	cmp	r3, #127	; 0x7f
 800712e:	d809      	bhi.n	8007144 <create_name+0xa4>
 8007130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007132:	4619      	mov	r1, r3
 8007134:	488d      	ldr	r0, [pc, #564]	; (800736c <create_name+0x2cc>)
 8007136:	f7fe fce0 	bl	8005afa <chk_chr>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <create_name+0xa4>
 8007140:	2306      	movs	r3, #6
 8007142:	e161      	b.n	8007408 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	617a      	str	r2, [r7, #20]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007152:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007154:	e7b4      	b.n	80070c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007156:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	441a      	add	r2, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007164:	2b1f      	cmp	r3, #31
 8007166:	d801      	bhi.n	800716c <create_name+0xcc>
 8007168:	2304      	movs	r3, #4
 800716a:	e000      	b.n	800716e <create_name+0xce>
 800716c:	2300      	movs	r3, #0
 800716e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007172:	e011      	b.n	8007198 <create_name+0xf8>
		w = lfn[di - 1];
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800717a:	3b01      	subs	r3, #1
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007188:	2b20      	cmp	r3, #32
 800718a:	d002      	beq.n	8007192 <create_name+0xf2>
 800718c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800718e:	2b2e      	cmp	r3, #46	; 0x2e
 8007190:	d106      	bne.n	80071a0 <create_name+0x100>
		di--;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	3b01      	subs	r3, #1
 8007196:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1ea      	bne.n	8007174 <create_name+0xd4>
 800719e:	e000      	b.n	80071a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80071a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <create_name+0x118>
 80071b4:	2306      	movs	r3, #6
 80071b6:	e127      	b.n	8007408 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3324      	adds	r3, #36	; 0x24
 80071bc:	220b      	movs	r2, #11
 80071be:	2120      	movs	r1, #32
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fc58 	bl	8005a76 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80071c6:	2300      	movs	r3, #0
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e002      	b.n	80071d2 <create_name+0x132>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	3301      	adds	r3, #1
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d0f5      	beq.n	80071cc <create_name+0x12c>
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	2b2e      	cmp	r3, #46	; 0x2e
 80071ec:	d0ee      	beq.n	80071cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <create_name+0x168>
 80071f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f8:	f043 0303 	orr.w	r3, r3, #3
 80071fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007200:	e002      	b.n	8007208 <create_name+0x168>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	3b01      	subs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <create_name+0x182>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007214:	3b01      	subs	r3, #1
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	2b2e      	cmp	r3, #46	; 0x2e
 8007220:	d1ef      	bne.n	8007202 <create_name+0x162>

	i = b = 0; ni = 8;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007228:	2300      	movs	r3, #0
 800722a:	623b      	str	r3, [r7, #32]
 800722c:	2308      	movs	r3, #8
 800722e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	61ba      	str	r2, [r7, #24]
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 8090 	beq.w	8007368 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800724a:	2b20      	cmp	r3, #32
 800724c:	d006      	beq.n	800725c <create_name+0x1bc>
 800724e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007250:	2b2e      	cmp	r3, #46	; 0x2e
 8007252:	d10a      	bne.n	800726a <create_name+0x1ca>
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	429a      	cmp	r2, r3
 800725a:	d006      	beq.n	800726a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800725c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007260:	f043 0303 	orr.w	r3, r3, #3
 8007264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007268:	e07d      	b.n	8007366 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800726a:	6a3a      	ldr	r2, [r7, #32]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	429a      	cmp	r2, r3
 8007270:	d203      	bcs.n	800727a <create_name+0x1da>
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	429a      	cmp	r2, r3
 8007278:	d123      	bne.n	80072c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b0b      	cmp	r3, #11
 800727e:	d106      	bne.n	800728e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007284:	f043 0303 	orr.w	r3, r3, #3
 8007288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800728c:	e075      	b.n	800737a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	429a      	cmp	r2, r3
 8007294:	d005      	beq.n	80072a2 <create_name+0x202>
 8007296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800729a:	f043 0303 	orr.w	r3, r3, #3
 800729e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d866      	bhi.n	8007378 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	2308      	movs	r3, #8
 80072b0:	623b      	str	r3, [r7, #32]
 80072b2:	230b      	movs	r3, #11
 80072b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80072b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072c0:	e051      	b.n	8007366 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80072c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072c4:	2b7f      	cmp	r3, #127	; 0x7f
 80072c6:	d914      	bls.n	80072f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80072c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe f9b1 	bl	8005634 <ff_convert>
 80072d2:	4603      	mov	r3, r0
 80072d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80072d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <create_name+0x246>
 80072dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072de:	3b80      	subs	r3, #128	; 0x80
 80072e0:	4a23      	ldr	r2, [pc, #140]	; (8007370 <create_name+0x2d0>)
 80072e2:	5cd3      	ldrb	r3, [r2, r3]
 80072e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80072e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ea:	f043 0302 	orr.w	r3, r3, #2
 80072ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80072f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <create_name+0x268>
 80072f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072fa:	4619      	mov	r1, r3
 80072fc:	481d      	ldr	r0, [pc, #116]	; (8007374 <create_name+0x2d4>)
 80072fe:	f7fe fbfc 	bl	8005afa <chk_chr>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007308:	235f      	movs	r3, #95	; 0x5f
 800730a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800730c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007310:	f043 0303 	orr.w	r3, r3, #3
 8007314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007318:	e01b      	b.n	8007352 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800731a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d909      	bls.n	8007334 <create_name+0x294>
 8007320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007322:	2b5a      	cmp	r3, #90	; 0x5a
 8007324:	d806      	bhi.n	8007334 <create_name+0x294>
					b |= 2;
 8007326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800732a:	f043 0302 	orr.w	r3, r3, #2
 800732e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007332:	e00e      	b.n	8007352 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007336:	2b60      	cmp	r3, #96	; 0x60
 8007338:	d90b      	bls.n	8007352 <create_name+0x2b2>
 800733a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800733c:	2b7a      	cmp	r3, #122	; 0x7a
 800733e:	d808      	bhi.n	8007352 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007344:	f043 0301 	orr.w	r3, r3, #1
 8007348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800734c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800734e:	3b20      	subs	r3, #32
 8007350:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	623a      	str	r2, [r7, #32]
 8007358:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800735a:	b2d1      	uxtb	r1, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	460a      	mov	r2, r1
 8007362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007366:	e763      	b.n	8007230 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007368:	bf00      	nop
 800736a:	e006      	b.n	800737a <create_name+0x2da>
 800736c:	08013898 	.word	0x08013898
 8007370:	080140d8 	.word	0x080140d8
 8007374:	080138a4 	.word	0x080138a4
			if (si > di) break;			/* No extension */
 8007378:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007380:	2be5      	cmp	r3, #229	; 0xe5
 8007382:	d103      	bne.n	800738c <create_name+0x2ec>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2205      	movs	r2, #5
 8007388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b08      	cmp	r3, #8
 8007390:	d104      	bne.n	800739c <create_name+0x2fc>
 8007392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800739c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073a0:	f003 030c 	and.w	r3, r3, #12
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	d005      	beq.n	80073b4 <create_name+0x314>
 80073a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d105      	bne.n	80073c0 <create_name+0x320>
 80073b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b8:	f043 0302 	orr.w	r3, r3, #2
 80073bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80073c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d117      	bne.n	80073fc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80073cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d105      	bne.n	80073e4 <create_name+0x344>
 80073d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073dc:	f043 0310 	orr.w	r3, r3, #16
 80073e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80073e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073e8:	f003 030c 	and.w	r3, r3, #12
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d105      	bne.n	80073fc <create_name+0x35c>
 80073f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f4:	f043 0308 	orr.w	r3, r3, #8
 80073f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007402:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007406:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007408:	4618      	mov	r0, r3
 800740a:	3728      	adds	r7, #40	; 0x28
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007424:	e002      	b.n	800742c <follow_path+0x1c>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b2f      	cmp	r3, #47	; 0x2f
 8007432:	d0f8      	beq.n	8007426 <follow_path+0x16>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b5c      	cmp	r3, #92	; 0x5c
 800743a:	d0f4      	beq.n	8007426 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2200      	movs	r2, #0
 8007440:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b1f      	cmp	r3, #31
 8007448:	d80a      	bhi.n	8007460 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2280      	movs	r2, #128	; 0x80
 800744e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007452:	2100      	movs	r1, #0
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff f8fd 	bl	8006654 <dir_sdi>
 800745a:	4603      	mov	r3, r0
 800745c:	75fb      	strb	r3, [r7, #23]
 800745e:	e048      	b.n	80074f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007460:	463b      	mov	r3, r7
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff fe1b 	bl	80070a0 <create_name>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d139      	bne.n	80074e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fc5a 	bl	8006d2e <dir_find>
 800747a:	4603      	mov	r3, r0
 800747c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007484:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	2b04      	cmp	r3, #4
 8007490:	d12c      	bne.n	80074ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d127      	bne.n	80074ec <follow_path+0xdc>
 800749c:	2305      	movs	r3, #5
 800749e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80074a0:	e024      	b.n	80074ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074a2:	7afb      	ldrb	r3, [r7, #11]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d121      	bne.n	80074f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	799b      	ldrb	r3, [r3, #6]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80074b8:	2305      	movs	r3, #5
 80074ba:	75fb      	strb	r3, [r7, #23]
 80074bc:	e019      	b.n	80074f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	8992      	ldrh	r2, [r2, #12]
 80074cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80074d0:	fb00 f202 	mul.w	r2, r0, r2
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	440b      	add	r3, r1
 80074d8:	4619      	mov	r1, r3
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff fa60 	bl	80069a0 <ld_clust>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074e6:	e7bb      	b.n	8007460 <follow_path+0x50>
			if (res != FR_OK) break;
 80074e8:	bf00      	nop
 80074ea:	e002      	b.n	80074f2 <follow_path+0xe2>
				break;
 80074ec:	bf00      	nop
 80074ee:	e000      	b.n	80074f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074f0:	bf00      	nop
			}
		}
	}

	return res;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007508:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d031      	beq.n	8007576 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	e002      	b.n	8007520 <get_ldnumber+0x24>
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	3301      	adds	r3, #1
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b1f      	cmp	r3, #31
 8007526:	d903      	bls.n	8007530 <get_ldnumber+0x34>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b3a      	cmp	r3, #58	; 0x3a
 800752e:	d1f4      	bne.n	800751a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b3a      	cmp	r3, #58	; 0x3a
 8007536:	d11c      	bne.n	8007572 <get_ldnumber+0x76>
			tp = *path;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	60fa      	str	r2, [r7, #12]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	3b30      	subs	r3, #48	; 0x30
 8007548:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b09      	cmp	r3, #9
 800754e:	d80e      	bhi.n	800756e <get_ldnumber+0x72>
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	429a      	cmp	r2, r3
 8007556:	d10a      	bne.n	800756e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d107      	bne.n	800756e <get_ldnumber+0x72>
					vol = (int)i;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	3301      	adds	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	e002      	b.n	8007578 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007576:	693b      	ldr	r3, [r7, #16]
}
 8007578:	4618      	mov	r0, r3
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	70da      	strb	r2, [r3, #3]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800759a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fe fc76 	bl	8005e90 <move_window>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <check_fs+0x2a>
 80075aa:	2304      	movs	r3, #4
 80075ac:	e038      	b.n	8007620 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3338      	adds	r3, #56	; 0x38
 80075b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe f9ba 	bl	8005930 <ld_word>
 80075bc:	4603      	mov	r3, r0
 80075be:	461a      	mov	r2, r3
 80075c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d001      	beq.n	80075cc <check_fs+0x48>
 80075c8:	2303      	movs	r3, #3
 80075ca:	e029      	b.n	8007620 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075d2:	2be9      	cmp	r3, #233	; 0xe9
 80075d4:	d009      	beq.n	80075ea <check_fs+0x66>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075dc:	2beb      	cmp	r3, #235	; 0xeb
 80075de:	d11e      	bne.n	800761e <check_fs+0x9a>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075e6:	2b90      	cmp	r3, #144	; 0x90
 80075e8:	d119      	bne.n	800761e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3338      	adds	r3, #56	; 0x38
 80075ee:	3336      	adds	r3, #54	; 0x36
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe f9b5 	bl	8005960 <ld_dword>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075fc:	4a0a      	ldr	r2, [pc, #40]	; (8007628 <check_fs+0xa4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d101      	bne.n	8007606 <check_fs+0x82>
 8007602:	2300      	movs	r3, #0
 8007604:	e00c      	b.n	8007620 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3338      	adds	r3, #56	; 0x38
 800760a:	3352      	adds	r3, #82	; 0x52
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe f9a7 	bl	8005960 <ld_dword>
 8007612:	4603      	mov	r3, r0
 8007614:	4a05      	ldr	r2, [pc, #20]	; (800762c <check_fs+0xa8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d101      	bne.n	800761e <check_fs+0x9a>
 800761a:	2300      	movs	r3, #0
 800761c:	e000      	b.n	8007620 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800761e:	2302      	movs	r3, #2
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	00544146 	.word	0x00544146
 800762c:	33544146 	.word	0x33544146

08007630 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b096      	sub	sp, #88	; 0x58
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff ff59 	bl	80074fc <get_ldnumber>
 800764a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800764c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764e:	2b00      	cmp	r3, #0
 8007650:	da01      	bge.n	8007656 <find_volume+0x26>
 8007652:	230b      	movs	r3, #11
 8007654:	e262      	b.n	8007b1c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007656:	4a9f      	ldr	r2, [pc, #636]	; (80078d4 <find_volume+0x2a4>)
 8007658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <find_volume+0x3a>
 8007666:	230c      	movs	r3, #12
 8007668:	e258      	b.n	8007b1c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800766e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01a      	beq.n	80076b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe f89b 	bl	80057c0 <disk_status>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10c      	bne.n	80076b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <find_volume+0x82>
 80076a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80076ae:	230a      	movs	r3, #10
 80076b0:	e234      	b.n	8007b1c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80076b2:	2300      	movs	r3, #0
 80076b4:	e232      	b.n	8007b1c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80076bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe f893 	bl	80057f4 <disk_initialize>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80076d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80076e0:	2303      	movs	r3, #3
 80076e2:	e21b      	b.n	8007b1c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d007      	beq.n	80076fa <find_volume+0xca>
 80076ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076ee:	f003 0304 	and.w	r3, r3, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80076f6:	230a      	movs	r3, #10
 80076f8:	e210      	b.n	8007b1c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80076fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fc:	7858      	ldrb	r0, [r3, #1]
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	330c      	adds	r3, #12
 8007702:	461a      	mov	r2, r3
 8007704:	2102      	movs	r1, #2
 8007706:	f7fe f8db 	bl	80058c0 <disk_ioctl>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <find_volume+0xe4>
 8007710:	2301      	movs	r3, #1
 8007712:	e203      	b.n	8007b1c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	899b      	ldrh	r3, [r3, #12]
 8007718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771c:	d80d      	bhi.n	800773a <find_volume+0x10a>
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	899b      	ldrh	r3, [r3, #12]
 8007722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007726:	d308      	bcc.n	800773a <find_volume+0x10a>
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	899b      	ldrh	r3, [r3, #12]
 800772c:	461a      	mov	r2, r3
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	899b      	ldrh	r3, [r3, #12]
 8007732:	3b01      	subs	r3, #1
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <find_volume+0x10e>
 800773a:	2301      	movs	r3, #1
 800773c:	e1ee      	b.n	8007b1c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007742:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007744:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007746:	f7ff ff1d 	bl	8007584 <check_fs>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007754:	2b02      	cmp	r3, #2
 8007756:	d149      	bne.n	80077ec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007758:	2300      	movs	r3, #0
 800775a:	643b      	str	r3, [r7, #64]	; 0x40
 800775c:	e01e      	b.n	800779c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800776c:	4413      	add	r3, r2
 800776e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	3304      	adds	r3, #4
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <find_volume+0x158>
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	3308      	adds	r3, #8
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe f8ee 	bl	8005960 <ld_dword>
 8007784:	4602      	mov	r2, r0
 8007786:	e000      	b.n	800778a <find_volume+0x15a>
 8007788:	2200      	movs	r2, #0
 800778a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	3358      	adds	r3, #88	; 0x58
 8007790:	443b      	add	r3, r7
 8007792:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007798:	3301      	adds	r3, #1
 800779a:	643b      	str	r3, [r7, #64]	; 0x40
 800779c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d9dd      	bls.n	800775e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80077a2:	2300      	movs	r3, #0
 80077a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80077a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <find_volume+0x182>
 80077ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ae:	3b01      	subs	r3, #1
 80077b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80077b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	3358      	adds	r3, #88	; 0x58
 80077b8:	443b      	add	r3, r7
 80077ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80077be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80077c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <find_volume+0x1a2>
 80077c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077ca:	f7ff fedb 	bl	8007584 <check_fs>
 80077ce:	4603      	mov	r3, r0
 80077d0:	e000      	b.n	80077d4 <find_volume+0x1a4>
 80077d2:	2303      	movs	r3, #3
 80077d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80077d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d905      	bls.n	80077ec <find_volume+0x1bc>
 80077e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e2:	3301      	adds	r3, #1
 80077e4:	643b      	str	r3, [r7, #64]	; 0x40
 80077e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d9e2      	bls.n	80077b2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80077ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d101      	bne.n	80077f8 <find_volume+0x1c8>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e191      	b.n	8007b1c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80077f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d901      	bls.n	8007804 <find_volume+0x1d4>
 8007800:	230d      	movs	r3, #13
 8007802:	e18b      	b.n	8007b1c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	3338      	adds	r3, #56	; 0x38
 8007808:	330b      	adds	r3, #11
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe f890 	bl	8005930 <ld_word>
 8007810:	4603      	mov	r3, r0
 8007812:	461a      	mov	r2, r3
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	899b      	ldrh	r3, [r3, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	d001      	beq.n	8007820 <find_volume+0x1f0>
 800781c:	230d      	movs	r3, #13
 800781e:	e17d      	b.n	8007b1c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	3338      	adds	r3, #56	; 0x38
 8007824:	3316      	adds	r3, #22
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe f882 	bl	8005930 <ld_word>
 800782c:	4603      	mov	r3, r0
 800782e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <find_volume+0x214>
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	3338      	adds	r3, #56	; 0x38
 800783a:	3324      	adds	r3, #36	; 0x24
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe f88f 	bl	8005960 <ld_dword>
 8007842:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007848:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	789b      	ldrb	r3, [r3, #2]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d005      	beq.n	8007868 <find_volume+0x238>
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	789b      	ldrb	r3, [r3, #2]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d001      	beq.n	8007868 <find_volume+0x238>
 8007864:	230d      	movs	r3, #13
 8007866:	e159      	b.n	8007b1c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	789b      	ldrb	r3, [r3, #2]
 800786c:	461a      	mov	r2, r3
 800786e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007870:	fb02 f303 	mul.w	r3, r2, r3
 8007874:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800787c:	b29a      	uxth	r2, r3
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	895b      	ldrh	r3, [r3, #10]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d008      	beq.n	800789c <find_volume+0x26c>
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	895b      	ldrh	r3, [r3, #10]
 800788e:	461a      	mov	r2, r3
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	895b      	ldrh	r3, [r3, #10]
 8007894:	3b01      	subs	r3, #1
 8007896:	4013      	ands	r3, r2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <find_volume+0x270>
 800789c:	230d      	movs	r3, #13
 800789e:	e13d      	b.n	8007b1c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	3338      	adds	r3, #56	; 0x38
 80078a4:	3311      	adds	r3, #17
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe f842 	bl	8005930 <ld_word>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	891b      	ldrh	r3, [r3, #8]
 80078b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ba:	8992      	ldrh	r2, [r2, #12]
 80078bc:	0952      	lsrs	r2, r2, #5
 80078be:	b292      	uxth	r2, r2
 80078c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80078c4:	fb01 f202 	mul.w	r2, r1, r2
 80078c8:	1a9b      	subs	r3, r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <find_volume+0x2a8>
 80078d0:	230d      	movs	r3, #13
 80078d2:	e123      	b.n	8007b1c <find_volume+0x4ec>
 80078d4:	20002140 	.word	0x20002140

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80078d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078da:	3338      	adds	r3, #56	; 0x38
 80078dc:	3313      	adds	r3, #19
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe f826 	bl	8005930 <ld_word>
 80078e4:	4603      	mov	r3, r0
 80078e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80078e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <find_volume+0x2cc>
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	3338      	adds	r3, #56	; 0x38
 80078f2:	3320      	adds	r3, #32
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe f833 	bl	8005960 <ld_dword>
 80078fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	3338      	adds	r3, #56	; 0x38
 8007900:	330e      	adds	r3, #14
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe f814 	bl	8005930 <ld_word>
 8007908:	4603      	mov	r3, r0
 800790a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800790c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <find_volume+0x2e6>
 8007912:	230d      	movs	r3, #13
 8007914:	e102      	b.n	8007b1c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007916:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791a:	4413      	add	r3, r2
 800791c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800791e:	8911      	ldrh	r1, [r2, #8]
 8007920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007922:	8992      	ldrh	r2, [r2, #12]
 8007924:	0952      	lsrs	r2, r2, #5
 8007926:	b292      	uxth	r2, r2
 8007928:	fbb1 f2f2 	udiv	r2, r1, r2
 800792c:	b292      	uxth	r2, r2
 800792e:	4413      	add	r3, r2
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	429a      	cmp	r2, r3
 8007938:	d201      	bcs.n	800793e <find_volume+0x30e>
 800793a:	230d      	movs	r3, #13
 800793c:	e0ee      	b.n	8007b1c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800793e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007946:	8952      	ldrh	r2, [r2, #10]
 8007948:	fbb3 f3f2 	udiv	r3, r3, r2
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <find_volume+0x328>
 8007954:	230d      	movs	r3, #13
 8007956:	e0e1      	b.n	8007b1c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007958:	2303      	movs	r3, #3
 800795a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007964:	4293      	cmp	r3, r2
 8007966:	d802      	bhi.n	800796e <find_volume+0x33e>
 8007968:	2302      	movs	r3, #2
 800796a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007974:	4293      	cmp	r3, r2
 8007976:	d802      	bhi.n	800797e <find_volume+0x34e>
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	1c9a      	adds	r2, r3, #2
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800798a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800798c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800798e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007990:	441a      	add	r2, r3
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	441a      	add	r2, r3
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80079a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d11e      	bne.n	80079e6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	3338      	adds	r3, #56	; 0x38
 80079ac:	332a      	adds	r3, #42	; 0x2a
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fd ffbe 	bl	8005930 <ld_word>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <find_volume+0x38e>
 80079ba:	230d      	movs	r3, #13
 80079bc:	e0ae      	b.n	8007b1c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	891b      	ldrh	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <find_volume+0x39a>
 80079c6:	230d      	movs	r3, #13
 80079c8:	e0a8      	b.n	8007b1c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	3338      	adds	r3, #56	; 0x38
 80079ce:	332c      	adds	r3, #44	; 0x2c
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fd ffc5 	bl	8005960 <ld_dword>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	647b      	str	r3, [r7, #68]	; 0x44
 80079e4:	e01f      	b.n	8007a26 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	891b      	ldrh	r3, [r3, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <find_volume+0x3c2>
 80079ee:	230d      	movs	r3, #13
 80079f0:	e094      	b.n	8007b1c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f8:	441a      	add	r2, r3
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80079fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d103      	bne.n	8007a0e <find_volume+0x3de>
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	e00a      	b.n	8007a24 <find_volume+0x3f4>
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	69da      	ldr	r2, [r3, #28]
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	085a      	lsrs	r2, r3, #1
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a24:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	6a1a      	ldr	r2, [r3, #32]
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2c:	899b      	ldrh	r3, [r3, #12]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a32:	440b      	add	r3, r1
 8007a34:	3b01      	subs	r3, #1
 8007a36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a38:	8989      	ldrh	r1, [r1, #12]
 8007a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d201      	bcs.n	8007a46 <find_volume+0x416>
 8007a42:	230d      	movs	r3, #13
 8007a44:	e06a      	b.n	8007b1c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a4c:	619a      	str	r2, [r3, #24]
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	2280      	movs	r2, #128	; 0x80
 8007a5a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d149      	bne.n	8007af8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	3338      	adds	r3, #56	; 0x38
 8007a68:	3330      	adds	r3, #48	; 0x30
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd ff60 	bl	8005930 <ld_word>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d140      	bne.n	8007af8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a78:	3301      	adds	r3, #1
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a7e:	f7fe fa07 	bl	8005e90 <move_window>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d137      	bne.n	8007af8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	3338      	adds	r3, #56	; 0x38
 8007a92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fd ff4a 	bl	8005930 <ld_word>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d127      	bne.n	8007af8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	3338      	adds	r3, #56	; 0x38
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fd ff57 	bl	8005960 <ld_dword>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	; (8007b24 <find_volume+0x4f4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d11e      	bne.n	8007af8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	3338      	adds	r3, #56	; 0x38
 8007abe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd ff4c 	bl	8005960 <ld_dword>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <find_volume+0x4f8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d113      	bne.n	8007af8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	3338      	adds	r3, #56	; 0x38
 8007ad4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fd ff41 	bl	8005960 <ld_dword>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	3338      	adds	r3, #56	; 0x38
 8007ae8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fd ff37 	bl	8005960 <ld_dword>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007afe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b00:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <find_volume+0x4fc>)
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <find_volume+0x4fc>)
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <find_volume+0x4fc>)
 8007b0e:	881a      	ldrh	r2, [r3, #0]
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b16:	f7fe f953 	bl	8005dc0 <clear_lock>
#endif
	return FR_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3758      	adds	r7, #88	; 0x58
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	41615252 	.word	0x41615252
 8007b28:	61417272 	.word	0x61417272
 8007b2c:	20002144 	.word	0x20002144

08007b30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007b3a:	2309      	movs	r3, #9
 8007b3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01c      	beq.n	8007b7e <validate+0x4e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d018      	beq.n	8007b7e <validate+0x4e>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d013      	beq.n	8007b7e <validate+0x4e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	889a      	ldrh	r2, [r3, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	88db      	ldrh	r3, [r3, #6]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d10c      	bne.n	8007b7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fd fe28 	bl	80057c0 <disk_status>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <validate+0x4e>
			res = FR_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <validate+0x5a>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	e000      	b.n	8007b8c <validate+0x5c>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	6013      	str	r3, [r2, #0]
	return res;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007bae:	f107 0310 	add.w	r3, r7, #16
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff fca2 	bl	80074fc <get_ldnumber>
 8007bb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da01      	bge.n	8007bc4 <f_mount+0x28>
 8007bc0:	230b      	movs	r3, #11
 8007bc2:	e02b      	b.n	8007c1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007bc4:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <f_mount+0x88>)
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007bd4:	69b8      	ldr	r0, [r7, #24]
 8007bd6:	f7fe f8f3 	bl	8005dc0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	490d      	ldr	r1, [pc, #52]	; (8007c24 <f_mount+0x88>)
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <f_mount+0x66>
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d001      	beq.n	8007c06 <f_mount+0x6a>
 8007c02:	2300      	movs	r3, #0
 8007c04:	e00a      	b.n	8007c1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c06:	f107 010c 	add.w	r1, r7, #12
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff fd0d 	bl	8007630 <find_volume>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20002140 	.word	0x20002140

08007c28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c34:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007c38:	6018      	str	r0, [r3, #0]
 8007c3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c3e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007c42:	6019      	str	r1, [r3, #0]
 8007c44:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c48:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007c4c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <f_open+0x38>
 8007c5c:	2309      	movs	r3, #9
 8007c5e:	e2a6      	b.n	80081ae <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007c60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c64:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007c68:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007c6c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007c70:	7812      	ldrb	r2, [r2, #0]
 8007c72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c76:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007c78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c7c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007c80:	781a      	ldrb	r2, [r3, #0]
 8007c82:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007c86:	f107 0308 	add.w	r3, r7, #8
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fcd0 	bl	8007630 <find_volume>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007c96:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 827a 	bne.w	8008194 <f_open+0x56c>
		dj.obj.fs = fs;
 8007ca0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007ca4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 8007ca8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007cac:	f107 0210 	add.w	r2, r7, #16
 8007cb0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007cb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cb6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff fba4 	bl	8007410 <follow_path>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007cce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d11e      	bne.n	8007d14 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007cd6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8007cda:	b25b      	sxtb	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da03      	bge.n	8007ce8 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007ce0:	2306      	movs	r3, #6
 8007ce2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007ce6:	e015      	b.n	8007d14 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ce8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bf14      	ite	ne
 8007cfa:	2301      	movne	r3, #1
 8007cfc:	2300      	moveq	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fd ff11 	bl	8005b30 <chk_lock>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d18:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 031c 	and.w	r3, r3, #28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80a7 	beq.w	8007e76 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007d28:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01f      	beq.n	8007d70 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d30:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d10e      	bne.n	8007d56 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d38:	f7fd ff56 	bl	8005be8 <enq_lock>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d006      	beq.n	8007d50 <f_open+0x128>
 8007d42:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff f8b2 	bl	8006eb0 <dir_register>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	e000      	b.n	8007d52 <f_open+0x12a>
 8007d50:	2312      	movs	r3, #18
 8007d52:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d5a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d5e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007d62:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007d66:	7812      	ldrb	r2, [r2, #0]
 8007d68:	f042 0208 	orr.w	r2, r2, #8
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	e015      	b.n	8007d9c <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d70:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007d74:	f003 0311 	and.w	r3, r3, #17
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <f_open+0x15c>
					res = FR_DENIED;
 8007d7c:	2307      	movs	r3, #7
 8007d7e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007d82:	e00b      	b.n	8007d9c <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d88:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <f_open+0x174>
 8007d96:	2308      	movs	r3, #8
 8007d98:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d9c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f040 8088 	bne.w	8007eb6 <f_open+0x28e>
 8007da6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007daa:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f003 0308 	and.w	r3, r3, #8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d07e      	beq.n	8007eb6 <f_open+0x28e>
				dw = GET_FATTIME();
 8007db8:	f7fd fdb2 	bl	8005920 <get_fattime>
 8007dbc:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007dc0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007dc4:	330e      	adds	r3, #14
 8007dc6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fd fe06 	bl	80059dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007dd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007dd4:	3316      	adds	r3, #22
 8007dd6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fd fdfe 	bl	80059dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007de0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007de4:	330b      	adds	r3, #11
 8007de6:	2220      	movs	r2, #32
 8007de8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007dea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007dee:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fdd3 	bl	80069a0 <ld_clust>
 8007dfa:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007dfe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e02:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8007e06:	2200      	movs	r2, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fde8 	bl	80069de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007e0e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007e12:	331c      	adds	r3, #28
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fd fde0 	bl	80059dc <st_dword>
					fs->wflag = 1;
 8007e1c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e20:	2201      	movs	r2, #1
 8007e22:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007e24:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d044      	beq.n	8007eb6 <f_open+0x28e>
						dw = fs->winsect;
 8007e2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e32:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007e36:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe fad2 	bl	80063ea <remove_chain>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007e4c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d130      	bne.n	8007eb6 <f_open+0x28e>
							res = move_window(fs, dw);
 8007e54:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e58:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe f817 	bl	8005e90 <move_window>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e68:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e6c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007e70:	3a01      	subs	r2, #1
 8007e72:	615a      	str	r2, [r3, #20]
 8007e74:	e01f      	b.n	8007eb6 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e76:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d11b      	bne.n	8007eb6 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e7e:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <f_open+0x26a>
					res = FR_NO_FILE;
 8007e8a:	2304      	movs	r3, #4
 8007e8c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007e90:	e011      	b.n	8007eb6 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e96:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <f_open+0x28e>
 8007ea4:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <f_open+0x28e>
						res = FR_DENIED;
 8007eb0:	2307      	movs	r3, #7
 8007eb2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007eb6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d14a      	bne.n	8007f54 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ebe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ec2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8007ed0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ed4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ed8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007edc:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ee6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007ee8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ef2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007efa:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007efe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f02:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f0a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f0e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf14      	ite	ne
 8007f1c:	2301      	movne	r3, #1
 8007f1e:	2300      	moveq	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fd fe7e 	bl	8005c2c <inc_lock>
 8007f30:	4602      	mov	r2, r0
 8007f32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007f3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <f_open+0x32c>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007f54:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f040 811b 	bne.w	8008194 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007f5e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f62:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe fd19 	bl	80069a0 <ld_clust>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f74:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007f7c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007f80:	331c      	adds	r3, #28
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd fcec 	bl	8005960 <ld_dword>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f8e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007f96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007fa4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007fa8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007fb4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007fb8:	88da      	ldrh	r2, [r3, #6]
 8007fba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fbe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007fc6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007fd4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007fd8:	7812      	ldrb	r2, [r2, #0]
 8007fda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007fdc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fe0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007fea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ff8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ffc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2200      	movs	r2, #0
 8008004:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008006:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800800a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3330      	adds	r3, #48	; 0x30
 8008012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd fd2c 	bl	8005a76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800801e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008022:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80b1 	beq.w	8008194 <f_open+0x56c>
 8008032:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008036:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80a8 	beq.w	8008194 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008044:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008048:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008054:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800805c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008060:	895b      	ldrh	r3, [r3, #10]
 8008062:	461a      	mov	r2, r3
 8008064:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008068:	899b      	ldrh	r3, [r3, #12]
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008072:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008076:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008082:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008086:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008092:	e021      	b.n	80080d8 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8008094:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008098:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd ffb1 	bl	800600a <get_fat>
 80080a8:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80080ac:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d802      	bhi.n	80080ba <f_open+0x492>
 80080b4:	2302      	movs	r3, #2
 80080b6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80080ba:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c2:	d102      	bne.n	80080ca <f_open+0x4a2>
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080ca:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80080ce:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80080d8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d105      	bne.n	80080ec <f_open+0x4c4>
 80080e0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80080e4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d8d3      	bhi.n	8008094 <f_open+0x46c>
				}
				fp->clust = clst;
 80080ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80080fa:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80080fc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008100:	2b00      	cmp	r3, #0
 8008102:	d147      	bne.n	8008194 <f_open+0x56c>
 8008104:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008108:	899b      	ldrh	r3, [r3, #12]
 800810a:	461a      	mov	r2, r3
 800810c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008110:	fbb3 f1f2 	udiv	r1, r3, r2
 8008114:	fb01 f202 	mul.w	r2, r1, r2
 8008118:	1a9b      	subs	r3, r3, r2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d03a      	beq.n	8008194 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800811e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008122:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd ff50 	bl	8005fcc <clust2sect>
 800812c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008130:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d103      	bne.n	8008140 <f_open+0x518>
						res = FR_INT_ERR;
 8008138:	2302      	movs	r3, #2
 800813a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800813e:	e029      	b.n	8008194 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008140:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008144:	899b      	ldrh	r3, [r3, #12]
 8008146:	461a      	mov	r2, r3
 8008148:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800814c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008150:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008154:	441a      	add	r2, r3
 8008156:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800815a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008162:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008166:	7858      	ldrb	r0, [r3, #1]
 8008168:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800816c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008176:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800817a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6a1a      	ldr	r2, [r3, #32]
 8008182:	2301      	movs	r3, #1
 8008184:	f7fd fb5c 	bl	8005840 <disk_read>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <f_open+0x56c>
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008194:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <f_open+0x582>
 800819c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80081aa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08e      	sub	sp, #56	; 0x38
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f107 0214 	add.w	r2, r7, #20
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fca9 	bl	8007b30 <validate>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80081e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <f_read+0x44>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	7d5b      	ldrb	r3, [r3, #21]
 80081f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80081f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <f_read+0x4a>
 80081fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008200:	e135      	b.n	800846e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	7d1b      	ldrb	r3, [r3, #20]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <f_read+0x5a>
 800820e:	2307      	movs	r3, #7
 8008210:	e12d      	b.n	800846e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	429a      	cmp	r2, r3
 8008224:	f240 811e 	bls.w	8008464 <f_read+0x2ac>
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800822c:	e11a      	b.n	8008464 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	8992      	ldrh	r2, [r2, #12]
 8008236:	fbb3 f1f2 	udiv	r1, r3, r2
 800823a:	fb01 f202 	mul.w	r2, r1, r2
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 80d5 	bne.w	80083f0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	8992      	ldrh	r2, [r2, #12]
 800824e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	8952      	ldrh	r2, [r2, #10]
 8008256:	3a01      	subs	r2, #1
 8008258:	4013      	ands	r3, r2
 800825a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d12f      	bne.n	80082c2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	633b      	str	r3, [r7, #48]	; 0x30
 8008270:	e013      	b.n	800829a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	4619      	mov	r1, r3
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7fe f9af 	bl	80065e4 <clmt_clust>
 8008286:	6338      	str	r0, [r7, #48]	; 0x30
 8008288:	e007      	b.n	800829a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fd feb9 	bl	800600a <get_fat>
 8008298:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2b01      	cmp	r3, #1
 800829e:	d804      	bhi.n	80082aa <f_read+0xf2>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2202      	movs	r2, #2
 80082a4:	755a      	strb	r2, [r3, #21]
 80082a6:	2302      	movs	r3, #2
 80082a8:	e0e1      	b.n	800846e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b0:	d104      	bne.n	80082bc <f_read+0x104>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	755a      	strb	r2, [r3, #21]
 80082b8:	2301      	movs	r3, #1
 80082ba:	e0d8      	b.n	800846e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	4619      	mov	r1, r3
 80082ca:	4610      	mov	r0, r2
 80082cc:	f7fd fe7e 	bl	8005fcc <clust2sect>
 80082d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d104      	bne.n	80082e2 <f_read+0x12a>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2202      	movs	r2, #2
 80082dc:	755a      	strb	r2, [r3, #21]
 80082de:	2302      	movs	r3, #2
 80082e0:	e0c5      	b.n	800846e <f_read+0x2b6>
			sect += csect;
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	899b      	ldrh	r3, [r3, #12]
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d041      	beq.n	8008382 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	4413      	add	r3, r2
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	8952      	ldrh	r2, [r2, #10]
 8008308:	4293      	cmp	r3, r2
 800830a:	d905      	bls.n	8008318 <f_read+0x160>
					cc = fs->csize - csect;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	895b      	ldrh	r3, [r3, #10]
 8008310:	461a      	mov	r2, r3
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	7858      	ldrb	r0, [r3, #1]
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008322:	f7fd fa8d 	bl	8005840 <disk_read>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d004      	beq.n	8008336 <f_read+0x17e>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2201      	movs	r2, #1
 8008330:	755a      	strb	r2, [r3, #21]
 8008332:	2301      	movs	r3, #1
 8008334:	e09b      	b.n	800846e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	7d1b      	ldrb	r3, [r3, #20]
 800833a:	b25b      	sxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	da18      	bge.n	8008372 <f_read+0x1ba>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800834a:	429a      	cmp	r2, r3
 800834c:	d911      	bls.n	8008372 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a1a      	ldr	r2, [r3, #32]
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	8992      	ldrh	r2, [r2, #12]
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008360:	18d0      	adds	r0, r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	899b      	ldrh	r3, [r3, #12]
 800836c:	461a      	mov	r2, r3
 800836e:	f7fd fb61 	bl	8005a34 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	899b      	ldrh	r3, [r3, #12]
 8008376:	461a      	mov	r2, r3
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	fb02 f303 	mul.w	r3, r2, r3
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008380:	e05c      	b.n	800843c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	429a      	cmp	r2, r3
 800838a:	d02e      	beq.n	80083ea <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	7d1b      	ldrb	r3, [r3, #20]
 8008390:	b25b      	sxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	da18      	bge.n	80083c8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	7858      	ldrb	r0, [r3, #1]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1a      	ldr	r2, [r3, #32]
 80083a4:	2301      	movs	r3, #1
 80083a6:	f7fd fa6b 	bl	8005880 <disk_write>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <f_read+0x202>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	755a      	strb	r2, [r3, #21]
 80083b6:	2301      	movs	r3, #1
 80083b8:	e059      	b.n	800846e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	7d1b      	ldrb	r3, [r3, #20]
 80083be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	7858      	ldrb	r0, [r3, #1]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083d2:	2301      	movs	r3, #1
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	f7fd fa33 	bl	8005840 <disk_read>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <f_read+0x232>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	755a      	strb	r2, [r3, #21]
 80083e6:	2301      	movs	r3, #1
 80083e8:	e041      	b.n	800846e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	899b      	ldrh	r3, [r3, #12]
 80083f4:	4618      	mov	r0, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	8992      	ldrh	r2, [r2, #12]
 80083fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008402:	fb01 f202 	mul.w	r2, r1, r2
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	1ac3      	subs	r3, r0, r3
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800840c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	429a      	cmp	r2, r3
 8008412:	d901      	bls.n	8008418 <f_read+0x260>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	8992      	ldrh	r2, [r2, #12]
 8008426:	fbb3 f0f2 	udiv	r0, r3, r2
 800842a:	fb00 f202 	mul.w	r2, r0, r2
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	440b      	add	r3, r1
 8008432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008434:	4619      	mov	r1, r3
 8008436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008438:	f7fd fafc 	bl	8005a34 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800843c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	4413      	add	r3, r2
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	441a      	add	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	619a      	str	r2, [r3, #24]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	441a      	add	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f47f aee1 	bne.w	800822e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3738      	adds	r7, #56	; 0x38
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b086      	sub	sp, #24
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f107 0208 	add.w	r2, r7, #8
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fb52 	bl	8007b30 <validate>
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d168      	bne.n	8008568 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7d1b      	ldrb	r3, [r3, #20]
 800849a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d062      	beq.n	8008568 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	7d1b      	ldrb	r3, [r3, #20]
 80084a6:	b25b      	sxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da15      	bge.n	80084d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	7858      	ldrb	r0, [r3, #1]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	2301      	movs	r3, #1
 80084bc:	f7fd f9e0 	bl	8005880 <disk_write>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <f_sync+0x54>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e04f      	b.n	800856a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7d1b      	ldrb	r3, [r3, #20]
 80084ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80084d8:	f7fd fa22 	bl	8005920 <get_fattime>
 80084dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	4619      	mov	r1, r3
 80084e6:	4610      	mov	r0, r2
 80084e8:	f7fd fcd2 	bl	8005e90 <move_window>
 80084ec:	4603      	mov	r3, r0
 80084ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d138      	bne.n	8008568 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	330b      	adds	r3, #11
 8008500:	781a      	ldrb	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	330b      	adds	r3, #11
 8008506:	f042 0220 	orr.w	r2, r2, #32
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	461a      	mov	r2, r3
 8008518:	68f9      	ldr	r1, [r7, #12]
 800851a:	f7fe fa60 	bl	80069de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f103 021c 	add.w	r2, r3, #28
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f7fd fa56 	bl	80059dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3316      	adds	r3, #22
 8008534:	6939      	ldr	r1, [r7, #16]
 8008536:	4618      	mov	r0, r3
 8008538:	f7fd fa50 	bl	80059dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3312      	adds	r3, #18
 8008540:	2100      	movs	r1, #0
 8008542:	4618      	mov	r0, r3
 8008544:	f7fd fa2f 	bl	80059a6 <st_word>
					fs->wflag = 1;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2201      	movs	r2, #1
 800854c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4618      	mov	r0, r3
 8008552:	f7fd fccb 	bl	8005eec <sync_fs>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7d1b      	ldrb	r3, [r3, #20]
 800855e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008562:	b2da      	uxtb	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008568:	7dfb      	ldrb	r3, [r7, #23]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff ff7b 	bl	8008476 <f_sync>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d118      	bne.n	80085bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f107 0208 	add.w	r2, r7, #8
 8008590:	4611      	mov	r1, r2
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff facc 	bl	8007b30 <validate>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10c      	bne.n	80085bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd fbce 	bl	8005d48 <dec_lock>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d102      	bne.n	80085bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085d6:	2301      	movs	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80085de:	4b1f      	ldr	r3, [pc, #124]	; (800865c <FATFS_LinkDriverEx+0x94>)
 80085e0:	7a5b      	ldrb	r3, [r3, #9]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d131      	bne.n	800864c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80085e8:	4b1c      	ldr	r3, [pc, #112]	; (800865c <FATFS_LinkDriverEx+0x94>)
 80085ea:	7a5b      	ldrb	r3, [r3, #9]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	461a      	mov	r2, r3
 80085f0:	4b1a      	ldr	r3, [pc, #104]	; (800865c <FATFS_LinkDriverEx+0x94>)
 80085f2:	2100      	movs	r1, #0
 80085f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80085f6:	4b19      	ldr	r3, [pc, #100]	; (800865c <FATFS_LinkDriverEx+0x94>)
 80085f8:	7a5b      	ldrb	r3, [r3, #9]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	4a17      	ldr	r2, [pc, #92]	; (800865c <FATFS_LinkDriverEx+0x94>)
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008606:	4b15      	ldr	r3, [pc, #84]	; (800865c <FATFS_LinkDriverEx+0x94>)
 8008608:	7a5b      	ldrb	r3, [r3, #9]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <FATFS_LinkDriverEx+0x94>)
 8008610:	4413      	add	r3, r2
 8008612:	79fa      	ldrb	r2, [r7, #7]
 8008614:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <FATFS_LinkDriverEx+0x94>)
 8008618:	7a5b      	ldrb	r3, [r3, #9]
 800861a:	b2db      	uxtb	r3, r3
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	b2d1      	uxtb	r1, r2
 8008620:	4a0e      	ldr	r2, [pc, #56]	; (800865c <FATFS_LinkDriverEx+0x94>)
 8008622:	7251      	strb	r1, [r2, #9]
 8008624:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008626:	7dbb      	ldrb	r3, [r7, #22]
 8008628:	3330      	adds	r3, #48	; 0x30
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3301      	adds	r3, #1
 8008634:	223a      	movs	r2, #58	; 0x3a
 8008636:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	3302      	adds	r3, #2
 800863c:	222f      	movs	r2, #47	; 0x2f
 800863e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	3303      	adds	r3, #3
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20002168 	.word	0x20002168

08008660 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800866a:	2200      	movs	r2, #0
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff ffaa 	bl	80085c8 <FATFS_LinkDriverEx>
 8008674:	4603      	mov	r3, r0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008686:	f7f8 fe2f 	bl	80012e8 <HAL_GetTick>
 800868a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800868c:	e006      	b.n	800869c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800868e:	f7fc ff81 	bl	8005594 <BSP_SD_GetCardState>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008698:	2300      	movs	r3, #0
 800869a:	e009      	b.n	80086b0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800869c:	f7f8 fe24 	bl	80012e8 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d8f0      	bhi.n	800868e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80086ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	4603      	mov	r3, r0
 80086c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <SD_CheckStatus+0x38>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80086c8:	f7fc ff64 	bl	8005594 <BSP_SD_GetCardState>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d107      	bne.n	80086e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <SD_CheckStatus+0x38>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	4b04      	ldr	r3, [pc, #16]	; (80086f0 <SD_CheckStatus+0x38>)
 80086e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80086e2:	4b03      	ldr	r3, [pc, #12]	; (80086f0 <SD_CheckStatus+0x38>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b2db      	uxtb	r3, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000009 	.word	0x20000009

080086f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80086fe:	f7fc fefd 	bl	80054fc <BSP_SD_Init>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d107      	bne.n	8008718 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff ffd4 	bl	80086b8 <SD_CheckStatus>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	4b04      	ldr	r3, [pc, #16]	; (8008728 <SD_initialize+0x34>)
 8008716:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008718:	4b03      	ldr	r3, [pc, #12]	; (8008728 <SD_initialize+0x34>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	b2db      	uxtb	r3, r3
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000009 	.word	0x20000009

0800872c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff ffbd 	bl	80086b8 <SD_CheckStatus>
 800873e:	4603      	mov	r3, r0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800875c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008760:	f7ff ff8d 	bl	800867e <SD_CheckStatusWithTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	da01      	bge.n	800876e <SD_read+0x26>
  {
    return res;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	e03b      	b.n	80087e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	68b8      	ldr	r0, [r7, #8]
 8008774:	f7fc feda 	bl	800552c <BSP_SD_ReadBlocks_DMA>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d132      	bne.n	80087e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800877e:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <SD_read+0xa8>)
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008784:	f7f8 fdb0 	bl	80012e8 <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800878a:	bf00      	nop
 800878c:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <SD_read+0xa8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d108      	bne.n	80087a6 <SD_read+0x5e>
 8008794:	f7f8 fda8 	bl	80012e8 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	f247 522f 	movw	r2, #29999	; 0x752f
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d9f2      	bls.n	800878c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80087a6:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <SD_read+0xa8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d102      	bne.n	80087b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	75fb      	strb	r3, [r7, #23]
 80087b2:	e017      	b.n	80087e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80087b4:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <SD_read+0xa8>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80087ba:	f7f8 fd95 	bl	80012e8 <HAL_GetTick>
 80087be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80087c0:	e007      	b.n	80087d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80087c2:	f7fc fee7 	bl	8005594 <BSP_SD_GetCardState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <SD_read+0x8a>
          {
            res = RES_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80087d0:	e008      	b.n	80087e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80087d2:	f7f8 fd89 	bl	80012e8 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d9ee      	bls.n	80087c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20002178 	.word	0x20002178

080087f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008808:	4b24      	ldr	r3, [pc, #144]	; (800889c <SD_write+0xa8>)
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800880e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008812:	f7ff ff34 	bl	800867e <SD_CheckStatusWithTimeout>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	da01      	bge.n	8008820 <SD_write+0x2c>
  {
    return res;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	e038      	b.n	8008892 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	68b8      	ldr	r0, [r7, #8]
 8008826:	f7fc fe9b 	bl	8005560 <BSP_SD_WriteBlocks_DMA>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d12f      	bne.n	8008890 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008830:	f7f8 fd5a 	bl	80012e8 <HAL_GetTick>
 8008834:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008836:	bf00      	nop
 8008838:	4b18      	ldr	r3, [pc, #96]	; (800889c <SD_write+0xa8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d108      	bne.n	8008852 <SD_write+0x5e>
 8008840:	f7f8 fd52 	bl	80012e8 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	f247 522f 	movw	r2, #29999	; 0x752f
 800884e:	4293      	cmp	r3, r2
 8008850:	d9f2      	bls.n	8008838 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <SD_write+0xa8>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d102      	bne.n	8008860 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	75fb      	strb	r3, [r7, #23]
 800885e:	e017      	b.n	8008890 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <SD_write+0xa8>)
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008866:	f7f8 fd3f 	bl	80012e8 <HAL_GetTick>
 800886a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800886c:	e007      	b.n	800887e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800886e:	f7fc fe91 	bl	8005594 <BSP_SD_GetCardState>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <SD_write+0x8a>
          {
            res = RES_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	75fb      	strb	r3, [r7, #23]
            break;
 800887c:	e008      	b.n	8008890 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800887e:	f7f8 fd33 	bl	80012e8 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	f247 522f 	movw	r2, #29999	; 0x752f
 800888c:	4293      	cmp	r3, r2
 800888e:	d9ee      	bls.n	800886e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20002174 	.word	0x20002174

080088a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08c      	sub	sp, #48	; 0x30
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	603a      	str	r2, [r7, #0]
 80088aa:	71fb      	strb	r3, [r7, #7]
 80088ac:	460b      	mov	r3, r1
 80088ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80088b6:	4b25      	ldr	r3, [pc, #148]	; (800894c <SD_ioctl+0xac>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <SD_ioctl+0x28>
 80088c4:	2303      	movs	r3, #3
 80088c6:	e03c      	b.n	8008942 <SD_ioctl+0xa2>

  switch (cmd)
 80088c8:	79bb      	ldrb	r3, [r7, #6]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d834      	bhi.n	8008938 <SD_ioctl+0x98>
 80088ce:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <SD_ioctl+0x34>)
 80088d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d4:	080088e5 	.word	0x080088e5
 80088d8:	080088ed 	.word	0x080088ed
 80088dc:	08008905 	.word	0x08008905
 80088e0:	0800891f 	.word	0x0800891f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80088ea:	e028      	b.n	800893e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80088ec:	f107 030c 	add.w	r3, r7, #12
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fc fe5f 	bl	80055b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80088f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008902:	e01c      	b.n	800893e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4618      	mov	r0, r3
 800890a:	f7fc fe53 	bl	80055b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	b29a      	uxth	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800891c:	e00f      	b.n	800893e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800891e:	f107 030c 	add.w	r3, r7, #12
 8008922:	4618      	mov	r0, r3
 8008924:	f7fc fe46 	bl	80055b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	0a5a      	lsrs	r2, r3, #9
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008936:	e002      	b.n	800893e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008938:	2304      	movs	r3, #4
 800893a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800893e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008942:	4618      	mov	r0, r3
 8008944:	3730      	adds	r7, #48	; 0x30
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000009 	.word	0x20000009

08008950 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008954:	4b03      	ldr	r3, [pc, #12]	; (8008964 <BSP_SD_WriteCpltCallback+0x14>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
}
 800895a:	bf00      	nop
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	20002174 	.word	0x20002174

08008968 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800896c:	4b03      	ldr	r3, [pc, #12]	; (800897c <BSP_SD_ReadCpltCallback+0x14>)
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]
}
 8008972:	bf00      	nop
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	20002178 	.word	0x20002178

08008980 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	; 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800898c:	f001 ff74 	bl	800a878 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008990:	4b67      	ldr	r3, [pc, #412]	; (8008b30 <pvPortMalloc+0x1b0>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008998:	f000 f938 	bl	8008c0c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800899c:	4b65      	ldr	r3, [pc, #404]	; (8008b34 <pvPortMalloc+0x1b4>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4013      	ands	r3, r2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 80a7 	bne.w	8008af8 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02d      	beq.n	8008a0c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80089b0:	2208      	movs	r2, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d227      	bcs.n	8008a0c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80089bc:	2208      	movs	r2, #8
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d021      	beq.n	8008a12 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f023 0307 	bic.w	r3, r3, #7
 80089d4:	3308      	adds	r3, #8
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d214      	bcs.n	8008a06 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f023 0307 	bic.w	r3, r3, #7
 80089e2:	3308      	adds	r3, #8
 80089e4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d010      	beq.n	8008a12 <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a0a:	e002      	b.n	8008a12 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	607b      	str	r3, [r7, #4]
 8008a10:	e000      	b.n	8008a14 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a12:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d06e      	beq.n	8008af8 <pvPortMalloc+0x178>
 8008a1a:	4b47      	ldr	r3, [pc, #284]	; (8008b38 <pvPortMalloc+0x1b8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d869      	bhi.n	8008af8 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008a24:	4b45      	ldr	r3, [pc, #276]	; (8008b3c <pvPortMalloc+0x1bc>)
 8008a26:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008a28:	4b44      	ldr	r3, [pc, #272]	; (8008b3c <pvPortMalloc+0x1bc>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a2e:	e004      	b.n	8008a3a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d903      	bls.n	8008a4c <pvPortMalloc+0xcc>
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1f1      	bne.n	8008a30 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008a4c:	4b38      	ldr	r3, [pc, #224]	; (8008b30 <pvPortMalloc+0x1b0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d050      	beq.n	8008af8 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	4413      	add	r3, r2
 8008a5e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	2308      	movs	r3, #8
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d91f      	bls.n	8008ab8 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <pvPortMalloc+0x120>
        __asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	613b      	str	r3, [r7, #16]
    }
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	1ad2      	subs	r2, r2, r3
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ab2:	69b8      	ldr	r0, [r7, #24]
 8008ab4:	f000 f90c 	bl	8008cd0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ab8:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <pvPortMalloc+0x1b8>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	4a1d      	ldr	r2, [pc, #116]	; (8008b38 <pvPortMalloc+0x1b8>)
 8008ac4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ac6:	4b1c      	ldr	r3, [pc, #112]	; (8008b38 <pvPortMalloc+0x1b8>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <pvPortMalloc+0x1c0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d203      	bcs.n	8008ada <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ad2:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <pvPortMalloc+0x1b8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1a      	ldr	r2, [pc, #104]	; (8008b40 <pvPortMalloc+0x1c0>)
 8008ad8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <pvPortMalloc+0x1b4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008aee:	4b15      	ldr	r3, [pc, #84]	; (8008b44 <pvPortMalloc+0x1c4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <pvPortMalloc+0x1c4>)
 8008af6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008af8:	f001 fecc 	bl	800a894 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8008b02:	f007 f9d5 	bl	800feb0 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <pvPortMalloc+0x1a6>
        __asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
    }
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <pvPortMalloc+0x1a4>
    return pvReturn;
 8008b26:	69fb      	ldr	r3, [r7, #28]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3728      	adds	r7, #40	; 0x28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20004984 	.word	0x20004984
 8008b34:	20004998 	.word	0x20004998
 8008b38:	20004988 	.word	0x20004988
 8008b3c:	2000497c 	.word	0x2000497c
 8008b40:	2000498c 	.word	0x2000498c
 8008b44:	20004990 	.word	0x20004990

08008b48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d04d      	beq.n	8008bf6 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008b5a:	2308      	movs	r3, #8
 8008b5c:	425b      	negs	r3, r3
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	4413      	add	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <vPortFree+0xb8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4013      	ands	r3, r2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <vPortFree+0x44>
        __asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	60fb      	str	r3, [r7, #12]
    }
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <vPortFree+0x62>
        __asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	60bb      	str	r3, [r7, #8]
    }
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	4b14      	ldr	r3, [pc, #80]	; (8008c00 <vPortFree+0xb8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01e      	beq.n	8008bf6 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d11a      	bne.n	8008bf6 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	4b0e      	ldr	r3, [pc, #56]	; (8008c00 <vPortFree+0xb8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	43db      	mvns	r3, r3
 8008bca:	401a      	ands	r2, r3
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008bd0:	f001 fe52 	bl	800a878 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <vPortFree+0xbc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4413      	add	r3, r2
 8008bde:	4a09      	ldr	r2, [pc, #36]	; (8008c04 <vPortFree+0xbc>)
 8008be0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008be2:	6938      	ldr	r0, [r7, #16]
 8008be4:	f000 f874 	bl	8008cd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008be8:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <vPortFree+0xc0>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	4a06      	ldr	r2, [pc, #24]	; (8008c08 <vPortFree+0xc0>)
 8008bf0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008bf2:	f001 fe4f 	bl	800a894 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008bf6:	bf00      	nop
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20004998 	.word	0x20004998
 8008c04:	20004988 	.word	0x20004988
 8008c08:	20004994 	.word	0x20004994

08008c0c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008c16:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008c18:	4b27      	ldr	r3, [pc, #156]	; (8008cb8 <prvHeapInit+0xac>)
 8008c1a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00c      	beq.n	8008c40 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3307      	adds	r3, #7
 8008c2a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f023 0307 	bic.w	r3, r3, #7
 8008c32:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	4a1f      	ldr	r2, [pc, #124]	; (8008cb8 <prvHeapInit+0xac>)
 8008c3c:	4413      	add	r3, r2
 8008c3e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c44:	4a1d      	ldr	r2, [pc, #116]	; (8008cbc <prvHeapInit+0xb0>)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008c4a:	4b1c      	ldr	r3, [pc, #112]	; (8008cbc <prvHeapInit+0xb0>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	4413      	add	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008c58:	2208      	movs	r2, #8
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4a15      	ldr	r2, [pc, #84]	; (8008cc0 <prvHeapInit+0xb4>)
 8008c6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008c6e:	4b14      	ldr	r3, [pc, #80]	; (8008cc0 <prvHeapInit+0xb4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008c76:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <prvHeapInit+0xb4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	1ad2      	subs	r2, r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c8c:	4b0c      	ldr	r3, [pc, #48]	; (8008cc0 <prvHeapInit+0xb4>)
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <prvHeapInit+0xb8>)
 8008c9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a09      	ldr	r2, [pc, #36]	; (8008cc8 <prvHeapInit+0xbc>)
 8008ca2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <prvHeapInit+0xc0>)
 8008ca6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008caa:	601a      	str	r2, [r3, #0]
}
 8008cac:	bf00      	nop
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	2000217c 	.word	0x2000217c
 8008cbc:	2000497c 	.word	0x2000497c
 8008cc0:	20004984 	.word	0x20004984
 8008cc4:	2000498c 	.word	0x2000498c
 8008cc8:	20004988 	.word	0x20004988
 8008ccc:	20004998 	.word	0x20004998

08008cd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cd8:	4b28      	ldr	r3, [pc, #160]	; (8008d7c <prvInsertBlockIntoFreeList+0xac>)
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	e002      	b.n	8008ce4 <prvInsertBlockIntoFreeList+0x14>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d8f7      	bhi.n	8008cde <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d108      	bne.n	8008d12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	441a      	add	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	441a      	add	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d118      	bne.n	8008d58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <prvInsertBlockIntoFreeList+0xb0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d00d      	beq.n	8008d4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	441a      	add	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	e008      	b.n	8008d60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d4e:	4b0c      	ldr	r3, [pc, #48]	; (8008d80 <prvInsertBlockIntoFreeList+0xb0>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	e003      	b.n	8008d60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d002      	beq.n	8008d6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008d6e:	bf00      	nop
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	2000497c 	.word	0x2000497c
 8008d80:	20004984 	.word	0x20004984

08008d84 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f103 0208 	add.w	r2, r3, #8
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d9c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f103 0208 	add.w	r2, r3, #8
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f103 0208 	add.w	r2, r3, #8
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008dde:	b480      	push	{r7}
 8008de0:	b085      	sub	sp, #20
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
}
 8008e1a:	bf00      	nop
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008e26:	b480      	push	{r7}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e3c:	d103      	bne.n	8008e46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e00c      	b.n	8008e60 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	e002      	b.n	8008e54 <vListInsert+0x2e>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d2f6      	bcs.n	8008e4e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	601a      	str	r2, [r3, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6892      	ldr	r2, [r2, #8]
 8008eae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	6852      	ldr	r2, [r2, #4]
 8008eb8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d103      	bne.n	8008ecc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	1e5a      	subs	r2, r3, #1
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3b04      	subs	r3, #4
 8008efc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3b04      	subs	r3, #4
 8008f0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f023 0201 	bic.w	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3b04      	subs	r3, #4
 8008f1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008f1c:	4a0c      	ldr	r2, [pc, #48]	; (8008f50 <pxPortInitialiseStack+0x64>)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3b14      	subs	r3, #20
 8008f26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3b04      	subs	r3, #4
 8008f32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f06f 0202 	mvn.w	r2, #2
 8008f3a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3b20      	subs	r3, #32
 8008f40:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008f42:	68fb      	ldr	r3, [r7, #12]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	08008f55 	.word	0x08008f55

08008f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <prvTaskExitError+0x54>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f66:	d00a      	beq.n	8008f7e <prvTaskExitError+0x2a>
        __asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60fb      	str	r3, [r7, #12]
    }
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <prvTaskExitError+0x28>
        __asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60bb      	str	r3, [r7, #8]
    }
 8008f90:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008f92:	bf00      	nop
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0fc      	beq.n	8008f94 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	2000000c 	.word	0x2000000c
 8008fac:	00000000 	.word	0x00000000

08008fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <pxCurrentTCBConst2>)
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	6808      	ldr	r0, [r1, #0]
 8008fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	f380 8809 	msr	PSP, r0
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f04f 0000 	mov.w	r0, #0
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	4770      	bx	lr
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst2>:
 8008fd0:	200049e4 	.word	0x200049e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008fd8:	4808      	ldr	r0, [pc, #32]	; (8008ffc <prvPortStartFirstTask+0x24>)
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	6800      	ldr	r0, [r0, #0]
 8008fde:	f380 8808 	msr	MSP, r0
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f380 8814 	msr	CONTROL, r0
 8008fea:	b662      	cpsie	i
 8008fec:	b661      	cpsie	f
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	df00      	svc	0
 8008ff8:	bf00      	nop
 8008ffa:	0000      	.short	0x0000
 8008ffc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop

08009004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800900a:	4b46      	ldr	r3, [pc, #280]	; (8009124 <xPortStartScheduler+0x120>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a46      	ldr	r2, [pc, #280]	; (8009128 <xPortStartScheduler+0x124>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d10a      	bne.n	800902a <xPortStartScheduler+0x26>
        __asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	613b      	str	r3, [r7, #16]
    }
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800902a:	4b3e      	ldr	r3, [pc, #248]	; (8009124 <xPortStartScheduler+0x120>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a3f      	ldr	r2, [pc, #252]	; (800912c <xPortStartScheduler+0x128>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d10a      	bne.n	800904a <xPortStartScheduler+0x46>
        __asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	60fb      	str	r3, [r7, #12]
    }
 8009046:	bf00      	nop
 8009048:	e7fe      	b.n	8009048 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800904a:	4b39      	ldr	r3, [pc, #228]	; (8009130 <xPortStartScheduler+0x12c>)
 800904c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	22ff      	movs	r2, #255	; 0xff
 800905a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800906c:	b2da      	uxtb	r2, r3
 800906e:	4b31      	ldr	r3, [pc, #196]	; (8009134 <xPortStartScheduler+0x130>)
 8009070:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009072:	4b31      	ldr	r3, [pc, #196]	; (8009138 <xPortStartScheduler+0x134>)
 8009074:	2207      	movs	r2, #7
 8009076:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009078:	e009      	b.n	800908e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800907a:	4b2f      	ldr	r3, [pc, #188]	; (8009138 <xPortStartScheduler+0x134>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3b01      	subs	r3, #1
 8009080:	4a2d      	ldr	r2, [pc, #180]	; (8009138 <xPortStartScheduler+0x134>)
 8009082:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b80      	cmp	r3, #128	; 0x80
 8009098:	d0ef      	beq.n	800907a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800909a:	4b27      	ldr	r3, [pc, #156]	; (8009138 <xPortStartScheduler+0x134>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1c3 0307 	rsb	r3, r3, #7
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d00a      	beq.n	80090bc <xPortStartScheduler+0xb8>
        __asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	60bb      	str	r3, [r7, #8]
    }
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090bc:	4b1e      	ldr	r3, [pc, #120]	; (8009138 <xPortStartScheduler+0x134>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <xPortStartScheduler+0x134>)
 80090c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090c6:	4b1c      	ldr	r3, [pc, #112]	; (8009138 <xPortStartScheduler+0x134>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090ce:	4a1a      	ldr	r2, [pc, #104]	; (8009138 <xPortStartScheduler+0x134>)
 80090d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80090da:	4b18      	ldr	r3, [pc, #96]	; (800913c <xPortStartScheduler+0x138>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a17      	ldr	r2, [pc, #92]	; (800913c <xPortStartScheduler+0x138>)
 80090e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80090e6:	4b15      	ldr	r3, [pc, #84]	; (800913c <xPortStartScheduler+0x138>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a14      	ldr	r2, [pc, #80]	; (800913c <xPortStartScheduler+0x138>)
 80090ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80090f2:	f000 f8e3 	bl	80092bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80090f6:	4b12      	ldr	r3, [pc, #72]	; (8009140 <xPortStartScheduler+0x13c>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80090fc:	f000 f902 	bl	8009304 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009100:	4b10      	ldr	r3, [pc, #64]	; (8009144 <xPortStartScheduler+0x140>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a0f      	ldr	r2, [pc, #60]	; (8009144 <xPortStartScheduler+0x140>)
 8009106:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800910a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800910c:	f7ff ff64 	bl	8008fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009110:	f001 fd42 	bl	800ab98 <vTaskSwitchContext>
    prvTaskExitError();
 8009114:	f7ff ff1e 	bl	8008f54 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	e000ed00 	.word	0xe000ed00
 8009128:	410fc271 	.word	0x410fc271
 800912c:	410fc270 	.word	0x410fc270
 8009130:	e000e400 	.word	0xe000e400
 8009134:	2000499c 	.word	0x2000499c
 8009138:	200049a0 	.word	0x200049a0
 800913c:	e000ed20 	.word	0xe000ed20
 8009140:	2000000c 	.word	0x2000000c
 8009144:	e000ef34 	.word	0xe000ef34

08009148 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
        __asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
    }
 8009160:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009162:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <vPortEnterCritical+0x58>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4a0d      	ldr	r2, [pc, #52]	; (80091a0 <vPortEnterCritical+0x58>)
 800916a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800916c:	4b0c      	ldr	r3, [pc, #48]	; (80091a0 <vPortEnterCritical+0x58>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d10f      	bne.n	8009194 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009174:	4b0b      	ldr	r3, [pc, #44]	; (80091a4 <vPortEnterCritical+0x5c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <vPortEnterCritical+0x4c>
        __asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	603b      	str	r3, [r7, #0]
    }
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <vPortEnterCritical+0x4a>
    }
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	2000000c 	.word	0x2000000c
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <vPortExitCritical+0x50>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <vPortExitCritical+0x24>
        __asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	607b      	str	r3, [r7, #4]
    }
 80091c8:	bf00      	nop
 80091ca:	e7fe      	b.n	80091ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80091cc:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <vPortExitCritical+0x50>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	4a09      	ldr	r2, [pc, #36]	; (80091f8 <vPortExitCritical+0x50>)
 80091d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80091d6:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <vPortExitCritical+0x50>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d105      	bne.n	80091ea <vPortExitCritical+0x42>
 80091de:	2300      	movs	r3, #0
 80091e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80091e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	2000000c 	.word	0x2000000c
 80091fc:	00000000 	.word	0x00000000

08009200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009200:	f3ef 8009 	mrs	r0, PSP
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4b15      	ldr	r3, [pc, #84]	; (8009260 <pxCurrentTCBConst>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	f01e 0f10 	tst.w	lr, #16
 8009210:	bf08      	it	eq
 8009212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	6010      	str	r0, [r2, #0]
 800921c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009224:	f380 8811 	msr	BASEPRI, r0
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f001 fcb2 	bl	800ab98 <vTaskSwitchContext>
 8009234:	f04f 0000 	mov.w	r0, #0
 8009238:	f380 8811 	msr	BASEPRI, r0
 800923c:	bc09      	pop	{r0, r3}
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	6808      	ldr	r0, [r1, #0]
 8009242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009246:	f01e 0f10 	tst.w	lr, #16
 800924a:	bf08      	it	eq
 800924c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009250:	f380 8809 	msr	PSP, r0
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w

08009260 <pxCurrentTCBConst>:
 8009260:	200049e4 	.word	0x200049e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
        __asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	607b      	str	r3, [r7, #4]
    }
 8009280:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8009282:	f003 fdc1 	bl	800ce08 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009286:	f001 fbc9 	bl	800aa1c <xTaskIncrementTick>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d006      	beq.n	800929e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8009290:	f003 fe18 	bl	800cec4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009294:	4b08      	ldr	r3, [pc, #32]	; (80092b8 <SysTick_Handler+0x50>)
 8009296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	e001      	b.n	80092a2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800929e:	f003 fdf5 	bl	800ce8c <SEGGER_SYSVIEW_RecordExitISR>
 80092a2:	2300      	movs	r3, #0
 80092a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	f383 8811 	msr	BASEPRI, r3
    }
 80092ac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092c0:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <vPortSetupTimerInterrupt+0x34>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092c6:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <vPortSetupTimerInterrupt+0x38>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092cc:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <vPortSetupTimerInterrupt+0x3c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <vPortSetupTimerInterrupt+0x40>)
 80092d2:	fba2 2303 	umull	r2, r3, r2, r3
 80092d6:	099b      	lsrs	r3, r3, #6
 80092d8:	4a09      	ldr	r2, [pc, #36]	; (8009300 <vPortSetupTimerInterrupt+0x44>)
 80092da:	3b01      	subs	r3, #1
 80092dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092de:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <vPortSetupTimerInterrupt+0x34>)
 80092e0:	2207      	movs	r2, #7
 80092e2:	601a      	str	r2, [r3, #0]
}
 80092e4:	bf00      	nop
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	e000e010 	.word	0xe000e010
 80092f4:	e000e018 	.word	0xe000e018
 80092f8:	20000014 	.word	0x20000014
 80092fc:	10624dd3 	.word	0x10624dd3
 8009300:	e000e014 	.word	0xe000e014

08009304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009314 <vPortEnableVFP+0x10>
 8009308:	6801      	ldr	r1, [r0, #0]
 800930a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800930e:	6001      	str	r1, [r0, #0]
 8009310:	4770      	bx	lr
 8009312:	0000      	.short	0x0000
 8009314:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop

0800931c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8009322:	f000 f83b 	bl	800939c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009326:	f3ef 8305 	mrs	r3, IPSR
 800932a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b0f      	cmp	r3, #15
 8009330:	d914      	bls.n	800935c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009332:	4a16      	ldr	r2, [pc, #88]	; (800938c <vPortValidateInterruptPriority+0x70>)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800933c:	4b14      	ldr	r3, [pc, #80]	; (8009390 <vPortValidateInterruptPriority+0x74>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	7afa      	ldrb	r2, [r7, #11]
 8009342:	429a      	cmp	r2, r3
 8009344:	d20a      	bcs.n	800935c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	607b      	str	r3, [r7, #4]
    }
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <vPortValidateInterruptPriority+0x78>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <vPortValidateInterruptPriority+0x7c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d90a      	bls.n	8009382 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	603b      	str	r3, [r7, #0]
    }
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <vPortValidateInterruptPriority+0x64>
    }
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	e000e3f0 	.word	0xe000e3f0
 8009390:	2000499c 	.word	0x2000499c
 8009394:	e000ed0c 	.word	0xe000ed0c
 8009398:	200049a0 	.word	0x200049a0

0800939c <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093a2:	4b1f      	ldr	r3, [pc, #124]	; (8009420 <vSetVarulMaxPRIGROUPValue+0x84>)
 80093a4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	22ff      	movs	r2, #255	; 0xff
 80093aa:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093b4:	4b1b      	ldr	r3, [pc, #108]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 80093b6:	2207      	movs	r2, #7
 80093b8:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ba:	e009      	b.n	80093d0 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80093bc:	4b19      	ldr	r3, [pc, #100]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	4a18      	ldr	r2, [pc, #96]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 80093c4:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d8:	2b80      	cmp	r3, #128	; 0x80
 80093da:	d0ef      	beq.n	80093bc <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093dc:	4b11      	ldr	r3, [pc, #68]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f1c3 0307 	rsb	r3, r3, #7
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d00a      	beq.n	80093fe <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	60bb      	str	r3, [r7, #8]
    }
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	021b      	lsls	r3, r3, #8
 8009404:	4a07      	ldr	r2, [pc, #28]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009406:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009408:	4b06      	ldr	r3, [pc, #24]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009410:	4a04      	ldr	r2, [pc, #16]	; (8009424 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009412:	6013      	str	r3, [r2, #0]
}
 8009414:	bf00      	nop
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	e000e400 	.word	0xe000e400
 8009424:	200049a0 	.word	0x200049a0

08009428 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <xQueueGenericReset+0x2a>
        __asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60bb      	str	r3, [r7, #8]
    }
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8009452:	f7ff fe79 	bl	8009148 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009462:	fb01 f303 	mul.w	r3, r1, r3
 8009466:	441a      	add	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009482:	3b01      	subs	r3, #1
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009488:	fb01 f303 	mul.w	r3, r1, r3
 800948c:	441a      	add	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	22ff      	movs	r2, #255	; 0xff
 8009496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	22ff      	movs	r2, #255	; 0xff
 800949e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d114      	bne.n	80094d2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01a      	beq.n	80094e6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3310      	adds	r3, #16
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 fc53 	bl	800ad60 <xTaskRemoveFromEventList>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d012      	beq.n	80094e6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80094c0:	4b0c      	ldr	r3, [pc, #48]	; (80094f4 <xQueueGenericReset+0xcc>)
 80094c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	e009      	b.n	80094e6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3310      	adds	r3, #16
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fc54 	bl	8008d84 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3324      	adds	r3, #36	; 0x24
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff fc4f 	bl	8008d84 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80094e6:	f7ff fe5f 	bl	80091a8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80094ea:	2301      	movs	r3, #1
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	e000ed04 	.word	0xe000ed04

080094f8 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08e      	sub	sp, #56	; 0x38
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <xQueueGenericCreateStatic+0x52>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <xQueueGenericCreateStatic+0x56>
 800954a:	2301      	movs	r3, #1
 800954c:	e000      	b.n	8009550 <xQueueGenericCreateStatic+0x58>
 800954e:	2300      	movs	r3, #0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	623b      	str	r3, [r7, #32]
    }
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d102      	bne.n	8009576 <xQueueGenericCreateStatic+0x7e>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <xQueueGenericCreateStatic+0x82>
 8009576:	2301      	movs	r3, #1
 8009578:	e000      	b.n	800957c <xQueueGenericCreateStatic+0x84>
 800957a:	2300      	movs	r3, #0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	61fb      	str	r3, [r7, #28]
    }
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8009596:	2350      	movs	r3, #80	; 0x50
 8009598:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b50      	cmp	r3, #80	; 0x50
 800959e:	d00a      	beq.n	80095b6 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	61bb      	str	r3, [r7, #24]
    }
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095b6:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00d      	beq.n	80095de <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	4613      	mov	r3, r2
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f868 	bl	80096ae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80095e0:	4618      	mov	r0, r3
 80095e2:	3730      	adds	r7, #48	; 0x30
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08c      	sub	sp, #48	; 0x30
 80095ec:	af02      	add	r7, sp, #8
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <xQueueGenericCreate+0x2a>
        __asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	61bb      	str	r3, [r7, #24]
    }
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d006      	beq.n	8009630 <xQueueGenericCreate+0x48>
 8009622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	fbb2 f3f3 	udiv	r3, r2, r3
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	429a      	cmp	r2, r3
 800962e:	d101      	bne.n	8009634 <xQueueGenericCreate+0x4c>
 8009630:	2301      	movs	r3, #1
 8009632:	e000      	b.n	8009636 <xQueueGenericCreate+0x4e>
 8009634:	2300      	movs	r3, #0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <xQueueGenericCreate+0x68>
        __asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	617b      	str	r3, [r7, #20]
    }
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8009656:	d90a      	bls.n	800966e <xQueueGenericCreate+0x86>
        __asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	613b      	str	r3, [r7, #16]
    }
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	3350      	adds	r3, #80	; 0x50
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff f984 	bl	8008980 <pvPortMalloc>
 8009678:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d011      	beq.n	80096a4 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	3350      	adds	r3, #80	; 0x50
 8009688:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009692:	79fa      	ldrb	r2, [r7, #7]
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	4613      	mov	r3, r2
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f805 	bl	80096ae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80096a4:	6a3b      	ldr	r3, [r7, #32]
    }
 80096a6:	4618      	mov	r0, r3
 80096a8:	3728      	adds	r7, #40	; 0x28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d103      	bne.n	80096ca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e002      	b.n	80096d0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096dc:	2101      	movs	r1, #1
 80096de:	69b8      	ldr	r0, [r7, #24]
 80096e0:	f7ff fea2 	bl	8009428 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	78fa      	ldrb	r2, [r7, #3]
 80096e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	2073      	movs	r0, #115	; 0x73
 80096f4:	f002 ffb8 	bl	800c668 <SEGGER_SYSVIEW_RecordU32x3>
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00e      	beq.n	800972c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009720:	2300      	movs	r3, #0
 8009722:	2200      	movs	r2, #0
 8009724:	2100      	movs	r1, #0
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f81c 	bl	8009764 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800973e:	2301      	movs	r3, #1
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	461a      	mov	r2, r3
 800974a:	6939      	ldr	r1, [r7, #16]
 800974c:	6978      	ldr	r0, [r7, #20]
 800974e:	f7ff ff4b 	bl	80095e8 <xQueueGenericCreate>
 8009752:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7ff ffd3 	bl	8009700 <prvInitialiseMutex>

        return xNewQueue;
 800975a:	68fb      	ldr	r3, [r7, #12]
    }
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b090      	sub	sp, #64	; 0x40
 8009768:	af02      	add	r7, sp, #8
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009772:	2300      	movs	r3, #0
 8009774:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xQueueGenericSend+0x32>
        __asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <xQueueGenericSend+0x40>
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <xQueueGenericSend+0x44>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <xQueueGenericSend+0x46>
 80097a8:	2300      	movs	r3, #0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <xQueueGenericSend+0x60>
        __asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d103      	bne.n	80097d2 <xQueueGenericSend+0x6e>
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d101      	bne.n	80097d6 <xQueueGenericSend+0x72>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <xQueueGenericSend+0x74>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericSend+0x8e>
        __asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	623b      	str	r3, [r7, #32]
    }
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097f2:	f001 fcaf 	bl	800b154 <xTaskGetSchedulerState>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d102      	bne.n	8009802 <xQueueGenericSend+0x9e>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <xQueueGenericSend+0xa2>
 8009802:	2301      	movs	r3, #1
 8009804:	e000      	b.n	8009808 <xQueueGenericSend+0xa4>
 8009806:	2300      	movs	r3, #0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <xQueueGenericSend+0xbe>
        __asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	61fb      	str	r3, [r7, #28]
    }
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009822:	f7ff fc91 	bl	8009148 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982e:	429a      	cmp	r2, r3
 8009830:	d302      	bcc.n	8009838 <xQueueGenericSend+0xd4>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b02      	cmp	r3, #2
 8009836:	d136      	bne.n	80098a6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	4618      	mov	r0, r3
 800983c:	f003 fca0 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	460b      	mov	r3, r1
 800984a:	4601      	mov	r1, r0
 800984c:	205a      	movs	r0, #90	; 0x5a
 800984e:	f002 ff81 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009858:	f000 fbcc 	bl	8009ff4 <prvCopyDataToQueue>
 800985c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	2b00      	cmp	r3, #0
 8009864:	d010      	beq.n	8009888 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	3324      	adds	r3, #36	; 0x24
 800986a:	4618      	mov	r0, r3
 800986c:	f001 fa78 	bl	800ad60 <xTaskRemoveFromEventList>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d013      	beq.n	800989e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009876:	4b4d      	ldr	r3, [pc, #308]	; (80099ac <xQueueGenericSend+0x248>)
 8009878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	e00a      	b.n	800989e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8009888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800988e:	4b47      	ldr	r3, [pc, #284]	; (80099ac <xQueueGenericSend+0x248>)
 8009890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800989e:	f7ff fc83 	bl	80091a8 <vPortExitCritical>
                return pdPASS;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e07d      	b.n	80099a2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d110      	bne.n	80098ce <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80098ac:	f7ff fc7c 	bl	80091a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	4618      	mov	r0, r3
 80098b4:	f003 fc64 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	460b      	mov	r3, r1
 80098c2:	4601      	mov	r1, r0
 80098c4:	205a      	movs	r0, #90	; 0x5a
 80098c6:	f002 ff45 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e069      	b.n	80099a2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80098ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80098d4:	f107 0314 	add.w	r3, r7, #20
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 faa9 	bl	800ae30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80098de:	2301      	movs	r3, #1
 80098e0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80098e2:	f7ff fc61 	bl	80091a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80098e6:	f000 ffc7 	bl	800a878 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80098ea:	f7ff fc2d 	bl	8009148 <vPortEnterCritical>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f4:	b25b      	sxtb	r3, r3
 80098f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098fa:	d103      	bne.n	8009904 <xQueueGenericSend+0x1a0>
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800990a:	b25b      	sxtb	r3, r3
 800990c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009910:	d103      	bne.n	800991a <xQueueGenericSend+0x1b6>
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800991a:	f7ff fc45 	bl	80091a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800991e:	1d3a      	adds	r2, r7, #4
 8009920:	f107 0314 	add.w	r3, r7, #20
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f001 fa98 	bl	800ae5c <xTaskCheckForTimeOut>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d124      	bne.n	800997c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009934:	f000 fc56 	bl	800a1e4 <prvIsQueueFull>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d018      	beq.n	8009970 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	3310      	adds	r3, #16
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f001 f9b8 	bl	800acbc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800994c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800994e:	f000 fbe1 	bl	800a114 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009952:	f000 ff9f 	bl	800a894 <xTaskResumeAll>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	f47f af62 	bne.w	8009822 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800995e:	4b13      	ldr	r3, [pc, #76]	; (80099ac <xQueueGenericSend+0x248>)
 8009960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	e758      	b.n	8009822 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009972:	f000 fbcf 	bl	800a114 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009976:	f000 ff8d 	bl	800a894 <xTaskResumeAll>
 800997a:	e752      	b.n	8009822 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800997c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800997e:	f000 fbc9 	bl	800a114 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009982:	f000 ff87 	bl	800a894 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	4618      	mov	r0, r3
 800998a:	f003 fbf9 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	460b      	mov	r3, r1
 8009998:	4601      	mov	r1, r0
 800999a:	205a      	movs	r0, #90	; 0x5a
 800999c:	f002 feda 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80099a0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3738      	adds	r7, #56	; 0x38
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b090      	sub	sp, #64	; 0x40
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d103      	bne.n	80099ec <xQueueGenericSendFromISR+0x3c>
 80099e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <xQueueGenericSendFromISR+0x40>
 80099ec:	2301      	movs	r3, #1
 80099ee:	e000      	b.n	80099f2 <xQueueGenericSendFromISR+0x42>
 80099f0:	2300      	movs	r3, #0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10a      	bne.n	8009a0c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d103      	bne.n	8009a1a <xQueueGenericSendFromISR+0x6a>
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d101      	bne.n	8009a1e <xQueueGenericSendFromISR+0x6e>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <xQueueGenericSendFromISR+0x70>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	623b      	str	r3, [r7, #32]
    }
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a3a:	f7ff fc6f 	bl	800931c <vPortValidateInterruptPriority>
        __asm volatile
 8009a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	61fa      	str	r2, [r7, #28]
 8009a54:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8009a56:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a58:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d302      	bcc.n	8009a6c <xQueueGenericSendFromISR+0xbc>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d148      	bne.n	8009afe <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f003 fb7e 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009a84:	4601      	mov	r1, r0
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2060      	movs	r0, #96	; 0x60
 8009a8c:	f002 fd92 	bl	800c5b4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a96:	f000 faad 	bl	8009ff4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009a9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa2:	d112      	bne.n	8009aca <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d025      	beq.n	8009af8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	3324      	adds	r3, #36	; 0x24
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 f955 	bl	800ad60 <xTaskRemoveFromEventList>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01d      	beq.n	8009af8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d01a      	beq.n	8009af8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	e016      	b.n	8009af8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009aca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ace:	2b7f      	cmp	r3, #127	; 0x7f
 8009ad0:	d10a      	bne.n	8009ae8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	617b      	str	r3, [r7, #20]
    }
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aec:	3301      	adds	r3, #1
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	b25a      	sxtb	r2, r3
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009af8:	2301      	movs	r3, #1
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8009afc:	e00b      	b.n	8009b16 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	4618      	mov	r0, r3
 8009b02:	f003 fb3d 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009b06:	4601      	mov	r1, r0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	2060      	movs	r0, #96	; 0x60
 8009b0e:	f002 fd51 	bl	800c5b4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b18:	613b      	str	r3, [r7, #16]
        __asm volatile
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f383 8811 	msr	BASEPRI, r3
    }
 8009b20:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3740      	adds	r7, #64	; 0x40
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009b2c:	b590      	push	{r4, r7, lr}
 8009b2e:	b08f      	sub	sp, #60	; 0x3c
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <xQueueReceive+0x30>
        __asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	623b      	str	r3, [r7, #32]
    }
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d103      	bne.n	8009b6a <xQueueReceive+0x3e>
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <xQueueReceive+0x42>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueReceive+0x44>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xQueueReceive+0x5e>
        __asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	61fb      	str	r3, [r7, #28]
    }
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b8a:	f001 fae3 	bl	800b154 <xTaskGetSchedulerState>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <xQueueReceive+0x6e>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <xQueueReceive+0x72>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <xQueueReceive+0x74>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10a      	bne.n	8009bba <xQueueReceive+0x8e>
        __asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	61bb      	str	r3, [r7, #24]
    }
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009bba:	f7ff fac5 	bl	8009148 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d02f      	beq.n	8009c2a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bce:	f000 fa7b 	bl	800a0c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f003 fad3 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009bda:	4604      	mov	r4, r0
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f003 facf 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009be2:	4602      	mov	r2, r0
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2101      	movs	r1, #1
 8009be8:	9100      	str	r1, [sp, #0]
 8009bea:	4621      	mov	r1, r4
 8009bec:	205c      	movs	r0, #92	; 0x5c
 8009bee:	f002 fdb1 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	1e5a      	subs	r2, r3, #1
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00f      	beq.n	8009c22 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	3310      	adds	r3, #16
 8009c06:	4618      	mov	r0, r3
 8009c08:	f001 f8aa 	bl	800ad60 <xTaskRemoveFromEventList>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009c12:	4b4d      	ldr	r3, [pc, #308]	; (8009d48 <xQueueReceive+0x21c>)
 8009c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009c22:	f7ff fac1 	bl	80091a8 <vPortExitCritical>
                return pdPASS;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e08a      	b.n	8009d40 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d113      	bne.n	8009c58 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009c30:	f7ff faba 	bl	80091a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	4618      	mov	r0, r3
 8009c38:	f003 faa2 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f003 fa9e 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009c44:	4602      	mov	r2, r0
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2101      	movs	r1, #1
 8009c4a:	9100      	str	r1, [sp, #0]
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	205c      	movs	r0, #92	; 0x5c
 8009c50:	f002 fd80 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009c54:	2300      	movs	r3, #0
 8009c56:	e073      	b.n	8009d40 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d106      	bne.n	8009c6c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009c5e:	f107 0310 	add.w	r3, r7, #16
 8009c62:	4618      	mov	r0, r3
 8009c64:	f001 f8e4 	bl	800ae30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009c6c:	f7ff fa9c 	bl	80091a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009c70:	f000 fe02 	bl	800a878 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009c74:	f7ff fa68 	bl	8009148 <vPortEnterCritical>
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c7e:	b25b      	sxtb	r3, r3
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c84:	d103      	bne.n	8009c8e <xQueueReceive+0x162>
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c9a:	d103      	bne.n	8009ca4 <xQueueReceive+0x178>
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ca4:	f7ff fa80 	bl	80091a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ca8:	1d3a      	adds	r2, r7, #4
 8009caa:	f107 0310 	add.w	r3, r7, #16
 8009cae:	4611      	mov	r1, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f8d3 	bl	800ae5c <xTaskCheckForTimeOut>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d124      	bne.n	8009d06 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cbe:	f000 fa7b 	bl	800a1b8 <prvIsQueueEmpty>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d018      	beq.n	8009cfa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	3324      	adds	r3, #36	; 0x24
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fff3 	bl	800acbc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd8:	f000 fa1c 	bl	800a114 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009cdc:	f000 fdda 	bl	800a894 <xTaskResumeAll>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f47f af69 	bne.w	8009bba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8009ce8:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <xQueueReceive+0x21c>)
 8009cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cee:	601a      	str	r2, [r3, #0]
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	e75f      	b.n	8009bba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cfc:	f000 fa0a 	bl	800a114 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009d00:	f000 fdc8 	bl	800a894 <xTaskResumeAll>
 8009d04:	e759      	b.n	8009bba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d08:	f000 fa04 	bl	800a114 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009d0c:	f000 fdc2 	bl	800a894 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d12:	f000 fa51 	bl	800a1b8 <prvIsQueueEmpty>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f43f af4e 	beq.w	8009bba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	4618      	mov	r0, r3
 8009d22:	f003 fa2d 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009d26:	4604      	mov	r4, r0
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f003 fa29 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2101      	movs	r1, #1
 8009d34:	9100      	str	r1, [sp, #0]
 8009d36:	4621      	mov	r1, r4
 8009d38:	205c      	movs	r0, #92	; 0x5c
 8009d3a:	f002 fd0b 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009d3e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3734      	adds	r7, #52	; 0x34
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd90      	pop	{r4, r7, pc}
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b091      	sub	sp, #68	; 0x44
 8009d50:	af02      	add	r7, sp, #8
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	623b      	str	r3, [r7, #32]
    }
 8009d7a:	bf00      	nop
 8009d7c:	e7fe      	b.n	8009d7c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	61fb      	str	r3, [r7, #28]
    }
 8009d98:	bf00      	nop
 8009d9a:	e7fe      	b.n	8009d9a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d9c:	f001 f9da 	bl	800b154 <xTaskGetSchedulerState>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <xQueueSemaphoreTake+0x60>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <xQueueSemaphoreTake+0x64>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e000      	b.n	8009db2 <xQueueSemaphoreTake+0x66>
 8009db0:	2300      	movs	r3, #0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10a      	bne.n	8009dcc <xQueueSemaphoreTake+0x80>
        __asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	61bb      	str	r3, [r7, #24]
    }
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009dcc:	f7ff f9bc 	bl	8009148 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d034      	beq.n	8009e46 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	4618      	mov	r0, r3
 8009de0:	f003 f9ce 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009de4:	4604      	mov	r4, r0
 8009de6:	2000      	movs	r0, #0
 8009de8:	f003 f9ca 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009dec:	4602      	mov	r2, r0
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2101      	movs	r1, #1
 8009df2:	9100      	str	r1, [sp, #0]
 8009df4:	4621      	mov	r1, r4
 8009df6:	205c      	movs	r0, #92	; 0x5c
 8009df8:	f002 fcac 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	1e5a      	subs	r2, r3, #1
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d104      	bne.n	8009e16 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e0c:	f001 fb32 	bl	800b474 <pvTaskIncrementMutexHeldCount>
 8009e10:	4602      	mov	r2, r0
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00f      	beq.n	8009e3e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	3310      	adds	r3, #16
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 ff9c 	bl	800ad60 <xTaskRemoveFromEventList>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d007      	beq.n	8009e3e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009e2e:	4b64      	ldr	r3, [pc, #400]	; (8009fc0 <xQueueSemaphoreTake+0x274>)
 8009e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009e3e:	f7ff f9b3 	bl	80091a8 <vPortExitCritical>
                return pdPASS;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e0b7      	b.n	8009fb6 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d121      	bne.n	8009e90 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	617b      	str	r3, [r7, #20]
    }
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009e68:	f7ff f99e 	bl	80091a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f003 f986 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009e74:	4604      	mov	r4, r0
 8009e76:	2000      	movs	r0, #0
 8009e78:	f003 f982 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2101      	movs	r1, #1
 8009e82:	9100      	str	r1, [sp, #0]
 8009e84:	4621      	mov	r1, r4
 8009e86:	205c      	movs	r0, #92	; 0x5c
 8009e88:	f002 fc64 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e092      	b.n	8009fb6 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009e96:	f107 030c 	add.w	r3, r7, #12
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 ffc8 	bl	800ae30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009ea4:	f7ff f980 	bl	80091a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009ea8:	f000 fce6 	bl	800a878 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009eac:	f7ff f94c 	bl	8009148 <vPortEnterCritical>
 8009eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eb6:	b25b      	sxtb	r3, r3
 8009eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ebc:	d103      	bne.n	8009ec6 <xQueueSemaphoreTake+0x17a>
 8009ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ecc:	b25b      	sxtb	r3, r3
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ed2:	d103      	bne.n	8009edc <xQueueSemaphoreTake+0x190>
 8009ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009edc:	f7ff f964 	bl	80091a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ee0:	463a      	mov	r2, r7
 8009ee2:	f107 030c 	add.w	r3, r7, #12
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 ffb7 	bl	800ae5c <xTaskCheckForTimeOut>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d132      	bne.n	8009f5a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ef6:	f000 f95f 	bl	800a1b8 <prvIsQueueEmpty>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d026      	beq.n	8009f4e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d109      	bne.n	8009f1c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8009f08:	f7ff f91e 	bl	8009148 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f001 f93d 	bl	800b190 <xTaskPriorityInherit>
 8009f16:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8009f18:	f7ff f946 	bl	80091a8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1e:	3324      	adds	r3, #36	; 0x24
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fec9 	bl	800acbc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f2c:	f000 f8f2 	bl	800a114 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009f30:	f000 fcb0 	bl	800a894 <xTaskResumeAll>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f47f af48 	bne.w	8009dcc <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8009f3c:	4b20      	ldr	r3, [pc, #128]	; (8009fc0 <xQueueSemaphoreTake+0x274>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	e73e      	b.n	8009dcc <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f50:	f000 f8e0 	bl	800a114 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009f54:	f000 fc9e 	bl	800a894 <xTaskResumeAll>
 8009f58:	e738      	b.n	8009dcc <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f5c:	f000 f8da 	bl	800a114 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009f60:	f000 fc98 	bl	800a894 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f66:	f000 f927 	bl	800a1b8 <prvIsQueueEmpty>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f43f af2d 	beq.w	8009dcc <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00d      	beq.n	8009f94 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8009f78:	f7ff f8e6 	bl	8009148 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f7e:	f000 f821 	bl	8009fc4 <prvGetDisinheritPriorityAfterTimeout>
 8009f82:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 f9e8 	bl	800b360 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8009f90:	f7ff f90a 	bl	80091a8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	4618      	mov	r0, r3
 8009f98:	f003 f8f2 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	f003 f8ee 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2101      	movs	r1, #1
 8009faa:	9100      	str	r1, [sp, #0]
 8009fac:	4621      	mov	r1, r4
 8009fae:	205c      	movs	r0, #92	; 0x5c
 8009fb0:	f002 fbd0 	bl	800c754 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009fb4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	373c      	adds	r7, #60	; 0x3c
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd90      	pop	{r4, r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d006      	beq.n	8009fe2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e001      	b.n	8009fe6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
    }
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a008:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10d      	bne.n	800a02e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d14d      	bne.n	800a0b6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	4618      	mov	r0, r3
 800a020:	f001 f928 	bl	800b274 <xTaskPriorityDisinherit>
 800a024:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	609a      	str	r2, [r3, #8]
 800a02c:	e043      	b.n	800a0b6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d119      	bne.n	800a068 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6858      	ldr	r0, [r3, #4]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	461a      	mov	r2, r3
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	f008 ff38 	bl	8012eb4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04c:	441a      	add	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d32b      	bcc.n	800a0b6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	605a      	str	r2, [r3, #4]
 800a066:	e026      	b.n	800a0b6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	68d8      	ldr	r0, [r3, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	461a      	mov	r2, r3
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	f008 ff1e 	bl	8012eb4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	425b      	negs	r3, r3
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d207      	bcs.n	800a0a4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	425b      	negs	r3, r3
 800a09e:	441a      	add	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d105      	bne.n	800a0b6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800a0be:	697b      	ldr	r3, [r7, #20]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d018      	beq.n	800a10c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68da      	ldr	r2, [r3, #12]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	441a      	add	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d303      	bcc.n	800a0fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68d9      	ldr	r1, [r3, #12]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a104:	461a      	mov	r2, r3
 800a106:	6838      	ldr	r0, [r7, #0]
 800a108:	f008 fed4 	bl	8012eb4 <memcpy>
    }
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800a11c:	f7ff f814 	bl	8009148 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a126:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a128:	e011      	b.n	800a14e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d012      	beq.n	800a158 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	3324      	adds	r3, #36	; 0x24
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fe12 	bl	800ad60 <xTaskRemoveFromEventList>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800a142:	f000 fef1 	bl	800af28 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	3b01      	subs	r3, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dce9      	bgt.n	800a12a <prvUnlockQueue+0x16>
 800a156:	e000      	b.n	800a15a <prvUnlockQueue+0x46>
                        break;
 800a158:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	22ff      	movs	r2, #255	; 0xff
 800a15e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800a162:	f7ff f821 	bl	80091a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800a166:	f7fe ffef 	bl	8009148 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a170:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a172:	e011      	b.n	800a198 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d012      	beq.n	800a1a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3310      	adds	r3, #16
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fded 	bl	800ad60 <xTaskRemoveFromEventList>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a18c:	f000 fecc 	bl	800af28 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a190:	7bbb      	ldrb	r3, [r7, #14]
 800a192:	3b01      	subs	r3, #1
 800a194:	b2db      	uxtb	r3, r3
 800a196:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dce9      	bgt.n	800a174 <prvUnlockQueue+0x60>
 800a1a0:	e000      	b.n	800a1a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800a1a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	22ff      	movs	r2, #255	; 0xff
 800a1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800a1ac:	f7fe fffc 	bl	80091a8 <vPortExitCritical>
}
 800a1b0:	bf00      	nop
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a1c0:	f7fe ffc2 	bl	8009148 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	e001      	b.n	800a1d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a1d6:	f7fe ffe7 	bl	80091a8 <vPortExitCritical>

    return xReturn;
 800a1da:	68fb      	ldr	r3, [r7, #12]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a1ec:	f7fe ffac 	bl	8009148 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d102      	bne.n	800a202 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e001      	b.n	800a206 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a206:	f7fe ffcf 	bl	80091a8 <vPortExitCritical>

    return xReturn;
 800a20a:	68fb      	ldr	r3, [r7, #12]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	e01e      	b.n	800a262 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a224:	4a13      	ldr	r2, [pc, #76]	; (800a274 <vQueueAddToRegistry+0x60>)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d115      	bne.n	800a25c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a230:	4910      	ldr	r1, [pc, #64]	; (800a274 <vQueueAddToRegistry+0x60>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800a23a:	4a0e      	ldr	r2, [pc, #56]	; (800a274 <vQueueAddToRegistry+0x60>)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4413      	add	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4618      	mov	r0, r3
 800a24a:	f002 ff99 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800a24e:	4601      	mov	r1, r0
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	2071      	movs	r0, #113	; 0x71
 800a256:	f002 f9ad 	bl	800c5b4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800a25a:	e006      	b.n	800a26a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3301      	adds	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b07      	cmp	r3, #7
 800a266:	d9dd      	bls.n	800a224 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	200049a4 	.word	0x200049a4

0800a278 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a288:	f7fe ff5e 	bl	8009148 <vPortEnterCritical>
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a292:	b25b      	sxtb	r3, r3
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a298:	d103      	bne.n	800a2a2 <vQueueWaitForMessageRestricted+0x2a>
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2a8:	b25b      	sxtb	r3, r3
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2ae:	d103      	bne.n	800a2b8 <vQueueWaitForMessageRestricted+0x40>
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2b8:	f7fe ff76 	bl	80091a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d106      	bne.n	800a2d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	3324      	adds	r3, #36	; 0x24
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 fd19 	bl	800ad04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	f7ff ff1e 	bl	800a114 <prvUnlockQueue>
    }
 800a2d8:	bf00      	nop
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08e      	sub	sp, #56	; 0x38
 800a2e4:	af04      	add	r7, sp, #16
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <xTaskCreateStatic+0x2a>
        __asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	623b      	str	r3, [r7, #32]
    }
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10a      	bne.n	800a326 <xTaskCreateStatic+0x46>
        __asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	61fb      	str	r3, [r7, #28]
    }
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800a326:	235c      	movs	r3, #92	; 0x5c
 800a328:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	2b5c      	cmp	r3, #92	; 0x5c
 800a32e:	d00a      	beq.n	800a346 <xTaskCreateStatic+0x66>
        __asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	61bb      	str	r3, [r7, #24]
    }
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a346:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d01e      	beq.n	800a38c <xTaskCreateStatic+0xac>
 800a34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a350:	2b00      	cmp	r3, #0
 800a352:	d01b      	beq.n	800a38c <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a35c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	2202      	movs	r2, #2
 800a362:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a366:	2300      	movs	r3, #0
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	9302      	str	r3, [sp, #8]
 800a36e:	f107 0314 	add.w	r3, r7, #20
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	68b9      	ldr	r1, [r7, #8]
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f850 	bl	800a424 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a386:	f000 f8e3 	bl	800a550 <prvAddNewTaskToReadyList>
 800a38a:	e001      	b.n	800a390 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 800a38c:	2300      	movs	r3, #0
 800a38e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800a390:	697b      	ldr	r3, [r7, #20]
    }
 800a392:	4618      	mov	r0, r3
 800a394:	3728      	adds	r7, #40	; 0x28
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b08c      	sub	sp, #48	; 0x30
 800a39e:	af04      	add	r7, sp, #16
 800a3a0:	60f8      	str	r0, [r7, #12]
 800a3a2:	60b9      	str	r1, [r7, #8]
 800a3a4:	603b      	str	r3, [r7, #0]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fae6 	bl	8008980 <pvPortMalloc>
 800a3b4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00e      	beq.n	800a3da <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a3bc:	205c      	movs	r0, #92	; 0x5c
 800a3be:	f7fe fadf 	bl	8008980 <pvPortMalloc>
 800a3c2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	631a      	str	r2, [r3, #48]	; 0x30
 800a3d0:	e005      	b.n	800a3de <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a3d2:	6978      	ldr	r0, [r7, #20]
 800a3d4:	f7fe fbb8 	bl	8008b48 <vPortFree>
 800a3d8:	e001      	b.n	800a3de <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d017      	beq.n	800a414 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3ec:	88fa      	ldrh	r2, [r7, #6]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9303      	str	r3, [sp, #12]
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 f80e 	bl	800a424 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a408:	69f8      	ldr	r0, [r7, #28]
 800a40a:	f000 f8a1 	bl	800a550 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a40e:	2301      	movs	r3, #1
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	e002      	b.n	800a41a <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a418:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a41a:	69bb      	ldr	r3, [r7, #24]
    }
 800a41c:	4618      	mov	r0, r3
 800a41e:	3720      	adds	r7, #32
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	461a      	mov	r2, r3
 800a43c:	21a5      	movs	r1, #165	; 0xa5
 800a43e:	f008 fd47 	bl	8012ed0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a44c:	3b01      	subs	r3, #1
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	f023 0307 	bic.w	r3, r3, #7
 800a45a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <prvInitialiseNewTask+0x58>
        __asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	617b      	str	r3, [r7, #20]
    }
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01f      	beq.n	800a4c2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a482:	2300      	movs	r3, #0
 800a484:	61fb      	str	r3, [r7, #28]
 800a486:	e012      	b.n	800a4ae <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	4413      	add	r3, r2
 800a48e:	7819      	ldrb	r1, [r3, #0]
 800a490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	4413      	add	r3, r2
 800a496:	3334      	adds	r3, #52	; 0x34
 800a498:	460a      	mov	r2, r1
 800a49a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d006      	beq.n	800a4b6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	61fb      	str	r3, [r7, #28]
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	2b0f      	cmp	r3, #15
 800a4b2:	d9e9      	bls.n	800a488 <prvInitialiseNewTask+0x64>
 800a4b4:	e000      	b.n	800a4b8 <prvInitialiseNewTask+0x94>
            {
                break;
 800a4b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4c0:	e003      	b.n	800a4ca <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	2b37      	cmp	r3, #55	; 0x37
 800a4ce:	d901      	bls.n	800a4d4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4d0:	2337      	movs	r3, #55	; 0x37
 800a4d2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4d8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4de:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fc6a 	bl	8008dc4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	3318      	adds	r3, #24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fc65 	bl	8008dc4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	3354      	adds	r3, #84	; 0x54
 800a514:	2204      	movs	r2, #4
 800a516:	2100      	movs	r1, #0
 800a518:	4618      	mov	r0, r3
 800a51a:	f008 fcd9 	bl	8012ed0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	3358      	adds	r3, #88	; 0x58
 800a522:	2201      	movs	r2, #1
 800a524:	2100      	movs	r1, #0
 800a526:	4618      	mov	r0, r3
 800a528:	f008 fcd2 	bl	8012ed0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	68f9      	ldr	r1, [r7, #12]
 800a530:	69b8      	ldr	r0, [r7, #24]
 800a532:	f7fe fcdb 	bl	8008eec <pxPortInitialiseStack>
 800a536:	4602      	mov	r2, r0
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a546:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a548:	bf00      	nop
 800a54a:	3720      	adds	r7, #32
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a550:	b5b0      	push	{r4, r5, r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af02      	add	r7, sp, #8
 800a556:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a558:	f7fe fdf6 	bl	8009148 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a55c:	4b3c      	ldr	r3, [pc, #240]	; (800a650 <prvAddNewTaskToReadyList+0x100>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3301      	adds	r3, #1
 800a562:	4a3b      	ldr	r2, [pc, #236]	; (800a650 <prvAddNewTaskToReadyList+0x100>)
 800a564:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a566:	4b3b      	ldr	r3, [pc, #236]	; (800a654 <prvAddNewTaskToReadyList+0x104>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d109      	bne.n	800a582 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a56e:	4a39      	ldr	r2, [pc, #228]	; (800a654 <prvAddNewTaskToReadyList+0x104>)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a574:	4b36      	ldr	r3, [pc, #216]	; (800a650 <prvAddNewTaskToReadyList+0x100>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d110      	bne.n	800a59e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a57c:	f000 fcf8 	bl	800af70 <prvInitialiseTaskLists>
 800a580:	e00d      	b.n	800a59e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a582:	4b35      	ldr	r3, [pc, #212]	; (800a658 <prvAddNewTaskToReadyList+0x108>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d109      	bne.n	800a59e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a58a:	4b32      	ldr	r3, [pc, #200]	; (800a654 <prvAddNewTaskToReadyList+0x104>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	429a      	cmp	r2, r3
 800a596:	d802      	bhi.n	800a59e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a598:	4a2e      	ldr	r2, [pc, #184]	; (800a654 <prvAddNewTaskToReadyList+0x104>)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a59e:	4b2f      	ldr	r3, [pc, #188]	; (800a65c <prvAddNewTaskToReadyList+0x10c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	4a2d      	ldr	r2, [pc, #180]	; (800a65c <prvAddNewTaskToReadyList+0x10c>)
 800a5a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a5a8:	4b2c      	ldr	r3, [pc, #176]	; (800a65c <prvAddNewTaskToReadyList+0x10c>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d016      	beq.n	800a5e4 <prvAddNewTaskToReadyList+0x94>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f002 fcbb 	bl	800cf34 <SEGGER_SYSVIEW_OnTaskCreate>
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	461d      	mov	r5, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	461c      	mov	r4, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	1ae3      	subs	r3, r4, r3
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	462b      	mov	r3, r5
 800a5e0:	f002 ffdc 	bl	800d59c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f002 fd28 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f0:	4b1b      	ldr	r3, [pc, #108]	; (800a660 <prvAddNewTaskToReadyList+0x110>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d903      	bls.n	800a600 <prvAddNewTaskToReadyList+0xb0>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	4a18      	ldr	r2, [pc, #96]	; (800a660 <prvAddNewTaskToReadyList+0x110>)
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4a15      	ldr	r2, [pc, #84]	; (800a664 <prvAddNewTaskToReadyList+0x114>)
 800a60e:	441a      	add	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3304      	adds	r3, #4
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f7fe fbe1 	bl	8008dde <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a61c:	f7fe fdc4 	bl	80091a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a620:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <prvAddNewTaskToReadyList+0x108>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00e      	beq.n	800a646 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <prvAddNewTaskToReadyList+0x104>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	429a      	cmp	r2, r3
 800a634:	d207      	bcs.n	800a646 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a636:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <prvAddNewTaskToReadyList+0x118>)
 800a638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bdb0      	pop	{r4, r5, r7, pc}
 800a64e:	bf00      	nop
 800a650:	20004eb8 	.word	0x20004eb8
 800a654:	200049e4 	.word	0x200049e4
 800a658:	20004ec4 	.word	0x20004ec4
 800a65c:	20004ed4 	.word	0x20004ed4
 800a660:	20004ec0 	.word	0x20004ec0
 800a664:	200049e8 	.word	0x200049e8
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800a674:	f7fe fd68 	bl	8009148 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d102      	bne.n	800a684 <vTaskDelete+0x18>
 800a67e:	4b39      	ldr	r3, [pc, #228]	; (800a764 <vTaskDelete+0xf8>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	e000      	b.n	800a686 <vTaskDelete+0x1a>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3304      	adds	r3, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fc03 	bl	8008e98 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3318      	adds	r3, #24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe fbfa 	bl	8008e98 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800a6a4:	4b30      	ldr	r3, [pc, #192]	; (800a768 <vTaskDelete+0xfc>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	4a2f      	ldr	r2, [pc, #188]	; (800a768 <vTaskDelete+0xfc>)
 800a6ac:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800a6ae:	4b2d      	ldr	r3, [pc, #180]	; (800a764 <vTaskDelete+0xf8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d118      	bne.n	800a6ea <vTaskDelete+0x7e>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	4619      	mov	r1, r3
 800a6be:	482b      	ldr	r0, [pc, #172]	; (800a76c <vTaskDelete+0x100>)
 800a6c0:	f7fe fb8d 	bl	8008dde <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800a6c4:	4b2a      	ldr	r3, [pc, #168]	; (800a770 <vTaskDelete+0x104>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	4a29      	ldr	r2, [pc, #164]	; (800a770 <vTaskDelete+0x104>)
 800a6cc:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 fd55 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4619      	mov	r1, r3
 800a6da:	2022      	movs	r0, #34	; 0x22
 800a6dc:	f001 ff2e 	bl	800c53c <SEGGER_SYSVIEW_RecordU32>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 ffc2 	bl	800d66c <SYSVIEW_DeleteTask>
 800a6e8:	e016      	b.n	800a718 <vTaskDelete+0xac>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800a6ea:	4b22      	ldr	r3, [pc, #136]	; (800a774 <vTaskDelete+0x108>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	4a20      	ldr	r2, [pc, #128]	; (800a774 <vTaskDelete+0x108>)
 800a6f2:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f002 fd42 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4619      	mov	r1, r3
 800a700:	2022      	movs	r0, #34	; 0x22
 800a702:	f001 ff1b 	bl	800c53c <SEGGER_SYSVIEW_RecordU32>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	4618      	mov	r0, r3
 800a70a:	f002 ffaf 	bl	800d66c <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 fcd4 	bl	800b0bc <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800a714:	f000 fd02 	bl	800b11c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800a718:	f7fe fd46 	bl	80091a8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800a71c:	4b16      	ldr	r3, [pc, #88]	; (800a778 <vTaskDelete+0x10c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d01b      	beq.n	800a75c <vTaskDelete+0xf0>
        {
            if( pxTCB == pxCurrentTCB )
 800a724:	4b0f      	ldr	r3, [pc, #60]	; (800a764 <vTaskDelete+0xf8>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d116      	bne.n	800a75c <vTaskDelete+0xf0>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800a72e:	4b13      	ldr	r3, [pc, #76]	; (800a77c <vTaskDelete+0x110>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <vTaskDelete+0xe0>
        __asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60bb      	str	r3, [r7, #8]
    }
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <vTaskDelete+0xde>
                portYIELD_WITHIN_API();
 800a74c:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <vTaskDelete+0x114>)
 800a74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a75c:	bf00      	nop
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	200049e4 	.word	0x200049e4
 800a768:	20004ed4 	.word	0x20004ed4
 800a76c:	20004e8c 	.word	0x20004e8c
 800a770:	20004ea0 	.word	0x20004ea0
 800a774:	20004eb8 	.word	0x20004eb8
 800a778:	20004ec4 	.word	0x20004ec4
 800a77c:	20004ee0 	.word	0x20004ee0
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08a      	sub	sp, #40	; 0x28
 800a788:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a792:	463a      	mov	r2, r7
 800a794:	1d39      	adds	r1, r7, #4
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	4618      	mov	r0, r3
 800a79c:	f005 fba6 	bl	800feec <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	9202      	str	r2, [sp, #8]
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	460a      	mov	r2, r1
 800a7b2:	4929      	ldr	r1, [pc, #164]	; (800a858 <vTaskStartScheduler+0xd4>)
 800a7b4:	4829      	ldr	r0, [pc, #164]	; (800a85c <vTaskStartScheduler+0xd8>)
 800a7b6:	f7ff fd93 	bl	800a2e0 <xTaskCreateStatic>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4a28      	ldr	r2, [pc, #160]	; (800a860 <vTaskStartScheduler+0xdc>)
 800a7be:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800a7c0:	4b27      	ldr	r3, [pc, #156]	; (800a860 <vTaskStartScheduler+0xdc>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	e001      	b.n	800a7d2 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d102      	bne.n	800a7de <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800a7d8:	f000 fec0 	bl	800b55c <xTimerCreateTimerTask>
 800a7dc:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d124      	bne.n	800a82e <vTaskStartScheduler+0xaa>
        __asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	613b      	str	r3, [r7, #16]
    }
 800a7f6:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a7f8:	4b1a      	ldr	r3, [pc, #104]	; (800a864 <vTaskStartScheduler+0xe0>)
 800a7fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7fe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a800:	4b19      	ldr	r3, [pc, #100]	; (800a868 <vTaskStartScheduler+0xe4>)
 800a802:	2201      	movs	r2, #1
 800a804:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a806:	4b19      	ldr	r3, [pc, #100]	; (800a86c <vTaskStartScheduler+0xe8>)
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a80c:	4b18      	ldr	r3, [pc, #96]	; (800a870 <vTaskStartScheduler+0xec>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b13      	ldr	r3, [pc, #76]	; (800a860 <vTaskStartScheduler+0xdc>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d102      	bne.n	800a81e <vTaskStartScheduler+0x9a>
 800a818:	f002 fb70 	bl	800cefc <SEGGER_SYSVIEW_OnIdle>
 800a81c:	e004      	b.n	800a828 <vTaskStartScheduler+0xa4>
 800a81e:	4b14      	ldr	r3, [pc, #80]	; (800a870 <vTaskStartScheduler+0xec>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f002 fbc8 	bl	800cfb8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a828:	f7fe fbec 	bl	8009004 <xPortStartScheduler>
 800a82c:	e00e      	b.n	800a84c <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a834:	d10a      	bne.n	800a84c <vTaskStartScheduler+0xc8>
        __asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60fb      	str	r3, [r7, #12]
    }
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a84c:	4b09      	ldr	r3, [pc, #36]	; (800a874 <vTaskStartScheduler+0xf0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
}
 800a850:	bf00      	nop
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	080138e0 	.word	0x080138e0
 800a85c:	0800af41 	.word	0x0800af41
 800a860:	20004edc 	.word	0x20004edc
 800a864:	20004ed8 	.word	0x20004ed8
 800a868:	20004ec4 	.word	0x20004ec4
 800a86c:	20004ebc 	.word	0x20004ebc
 800a870:	200049e4 	.word	0x200049e4
 800a874:	20000010 	.word	0x20000010

0800a878 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a87c:	4b04      	ldr	r3, [pc, #16]	; (800a890 <vTaskSuspendAll+0x18>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3301      	adds	r3, #1
 800a882:	4a03      	ldr	r2, [pc, #12]	; (800a890 <vTaskSuspendAll+0x18>)
 800a884:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a886:	bf00      	nop
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20004ee0 	.word	0x20004ee0

0800a894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a8a2:	4b44      	ldr	r3, [pc, #272]	; (800a9b4 <xTaskResumeAll+0x120>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <xTaskResumeAll+0x2c>
        __asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	603b      	str	r3, [r7, #0]
    }
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a8c0:	f7fe fc42 	bl	8009148 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a8c4:	4b3b      	ldr	r3, [pc, #236]	; (800a9b4 <xTaskResumeAll+0x120>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	4a3a      	ldr	r2, [pc, #232]	; (800a9b4 <xTaskResumeAll+0x120>)
 800a8cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ce:	4b39      	ldr	r3, [pc, #228]	; (800a9b4 <xTaskResumeAll+0x120>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d166      	bne.n	800a9a4 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8d6:	4b38      	ldr	r3, [pc, #224]	; (800a9b8 <xTaskResumeAll+0x124>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d062      	beq.n	800a9a4 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8de:	e033      	b.n	800a948 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e0:	4b36      	ldr	r3, [pc, #216]	; (800a9bc <xTaskResumeAll+0x128>)
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3318      	adds	r3, #24
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe fad3 	bl	8008e98 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe face 	bl	8008e98 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f002 fb9c 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a908:	4b2d      	ldr	r3, [pc, #180]	; (800a9c0 <xTaskResumeAll+0x12c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d903      	bls.n	800a918 <xTaskResumeAll+0x84>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	4a2a      	ldr	r2, [pc, #168]	; (800a9c0 <xTaskResumeAll+0x12c>)
 800a916:	6013      	str	r3, [r2, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91c:	4613      	mov	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4a27      	ldr	r2, [pc, #156]	; (800a9c4 <xTaskResumeAll+0x130>)
 800a926:	441a      	add	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3304      	adds	r3, #4
 800a92c:	4619      	mov	r1, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	f7fe fa55 	bl	8008dde <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a938:	4b23      	ldr	r3, [pc, #140]	; (800a9c8 <xTaskResumeAll+0x134>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a942:	4b22      	ldr	r3, [pc, #136]	; (800a9cc <xTaskResumeAll+0x138>)
 800a944:	2201      	movs	r2, #1
 800a946:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a948:	4b1c      	ldr	r3, [pc, #112]	; (800a9bc <xTaskResumeAll+0x128>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1c7      	bne.n	800a8e0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a956:	f000 fbe1 	bl	800b11c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a95a:	4b1d      	ldr	r3, [pc, #116]	; (800a9d0 <xTaskResumeAll+0x13c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d010      	beq.n	800a988 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a966:	f000 f859 	bl	800aa1c <xTaskIncrementTick>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a970:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <xTaskResumeAll+0x138>)
 800a972:	2201      	movs	r2, #1
 800a974:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3b01      	subs	r3, #1
 800a97a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1f1      	bne.n	800a966 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a982:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <xTaskResumeAll+0x13c>)
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a988:	4b10      	ldr	r3, [pc, #64]	; (800a9cc <xTaskResumeAll+0x138>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a990:	2301      	movs	r3, #1
 800a992:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a994:	4b0f      	ldr	r3, [pc, #60]	; (800a9d4 <xTaskResumeAll+0x140>)
 800a996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a9a4:	f7fe fc00 	bl	80091a8 <vPortExitCritical>

    return xAlreadyYielded;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20004ee0 	.word	0x20004ee0
 800a9b8:	20004eb8 	.word	0x20004eb8
 800a9bc:	20004e78 	.word	0x20004e78
 800a9c0:	20004ec0 	.word	0x20004ec0
 800a9c4:	200049e8 	.word	0x200049e8
 800a9c8:	200049e4 	.word	0x200049e4
 800a9cc:	20004ecc 	.word	0x20004ecc
 800a9d0:	20004ec8 	.word	0x20004ec8
 800a9d4:	e000ed04 	.word	0xe000ed04

0800a9d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <xTaskGetTickCount+0x1c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a9e4:	687b      	ldr	r3, [r7, #4]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20004ebc 	.word	0x20004ebc

0800a9f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9fe:	f7fe fc8d 	bl	800931c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aa02:	2300      	movs	r3, #0
 800aa04:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800aa06:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <xTaskGetTickCountFromISR+0x20>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800aa0c:	683b      	ldr	r3, [r7, #0]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20004ebc 	.word	0x20004ebc

0800aa1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa26:	4b51      	ldr	r3, [pc, #324]	; (800ab6c <xTaskIncrementTick+0x150>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f040 8093 	bne.w	800ab56 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa30:	4b4f      	ldr	r3, [pc, #316]	; (800ab70 <xTaskIncrementTick+0x154>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800aa38:	4a4d      	ldr	r2, [pc, #308]	; (800ab70 <xTaskIncrementTick+0x154>)
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d120      	bne.n	800aa86 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800aa44:	4b4b      	ldr	r3, [pc, #300]	; (800ab74 <xTaskIncrementTick+0x158>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <xTaskIncrementTick+0x48>
        __asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	603b      	str	r3, [r7, #0]
    }
 800aa60:	bf00      	nop
 800aa62:	e7fe      	b.n	800aa62 <xTaskIncrementTick+0x46>
 800aa64:	4b43      	ldr	r3, [pc, #268]	; (800ab74 <xTaskIncrementTick+0x158>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	4b43      	ldr	r3, [pc, #268]	; (800ab78 <xTaskIncrementTick+0x15c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a41      	ldr	r2, [pc, #260]	; (800ab74 <xTaskIncrementTick+0x158>)
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	4a41      	ldr	r2, [pc, #260]	; (800ab78 <xTaskIncrementTick+0x15c>)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	4b40      	ldr	r3, [pc, #256]	; (800ab7c <xTaskIncrementTick+0x160>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	4a3f      	ldr	r2, [pc, #252]	; (800ab7c <xTaskIncrementTick+0x160>)
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	f000 fb4b 	bl	800b11c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800aa86:	4b3e      	ldr	r3, [pc, #248]	; (800ab80 <xTaskIncrementTick+0x164>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d34d      	bcc.n	800ab2c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa90:	4b38      	ldr	r3, [pc, #224]	; (800ab74 <xTaskIncrementTick+0x158>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d104      	bne.n	800aaa4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa9a:	4b39      	ldr	r3, [pc, #228]	; (800ab80 <xTaskIncrementTick+0x164>)
 800aa9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaa0:	601a      	str	r2, [r3, #0]
                    break;
 800aaa2:	e043      	b.n	800ab2c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa4:	4b33      	ldr	r3, [pc, #204]	; (800ab74 <xTaskIncrementTick+0x158>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d203      	bcs.n	800aac4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800aabc:	4a30      	ldr	r2, [pc, #192]	; (800ab80 <xTaskIncrementTick+0x164>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aac2:	e033      	b.n	800ab2c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	3304      	adds	r3, #4
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe f9e5 	bl	8008e98 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	3318      	adds	r3, #24
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe f9dc 	bl	8008e98 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f002 faaa 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaec:	4b25      	ldr	r3, [pc, #148]	; (800ab84 <xTaskIncrementTick+0x168>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d903      	bls.n	800aafc <xTaskIncrementTick+0xe0>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	4a22      	ldr	r2, [pc, #136]	; (800ab84 <xTaskIncrementTick+0x168>)
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4a1f      	ldr	r2, [pc, #124]	; (800ab88 <xTaskIncrementTick+0x16c>)
 800ab0a:	441a      	add	r2, r3
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7fe f963 	bl	8008dde <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4b1b      	ldr	r3, [pc, #108]	; (800ab8c <xTaskIncrementTick+0x170>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d3b4      	bcc.n	800aa90 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800ab26:	2301      	movs	r3, #1
 800ab28:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab2a:	e7b1      	b.n	800aa90 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab2c:	4b17      	ldr	r3, [pc, #92]	; (800ab8c <xTaskIncrementTick+0x170>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab32:	4915      	ldr	r1, [pc, #84]	; (800ab88 <xTaskIncrementTick+0x16c>)
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	440b      	add	r3, r1
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d901      	bls.n	800ab48 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800ab44:	2301      	movs	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800ab48:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <xTaskIncrementTick+0x174>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d007      	beq.n	800ab60 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800ab50:	2301      	movs	r3, #1
 800ab52:	617b      	str	r3, [r7, #20]
 800ab54:	e004      	b.n	800ab60 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800ab56:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <xTaskIncrementTick+0x178>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	4a0d      	ldr	r2, [pc, #52]	; (800ab94 <xTaskIncrementTick+0x178>)
 800ab5e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800ab60:	697b      	ldr	r3, [r7, #20]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20004ee0 	.word	0x20004ee0
 800ab70:	20004ebc 	.word	0x20004ebc
 800ab74:	20004e70 	.word	0x20004e70
 800ab78:	20004e74 	.word	0x20004e74
 800ab7c:	20004ed0 	.word	0x20004ed0
 800ab80:	20004ed8 	.word	0x20004ed8
 800ab84:	20004ec0 	.word	0x20004ec0
 800ab88:	200049e8 	.word	0x200049e8
 800ab8c:	200049e4 	.word	0x200049e4
 800ab90:	20004ecc 	.word	0x20004ecc
 800ab94:	20004ec8 	.word	0x20004ec8

0800ab98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab9e:	4b41      	ldr	r3, [pc, #260]	; (800aca4 <vTaskSwitchContext+0x10c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800aba6:	4b40      	ldr	r3, [pc, #256]	; (800aca8 <vTaskSwitchContext+0x110>)
 800aba8:	2201      	movs	r2, #1
 800abaa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800abac:	e076      	b.n	800ac9c <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 800abae:	4b3e      	ldr	r3, [pc, #248]	; (800aca8 <vTaskSwitchContext+0x110>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800abb4:	4b3d      	ldr	r3, [pc, #244]	; (800acac <vTaskSwitchContext+0x114>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800abc0:	60fb      	str	r3, [r7, #12]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d111      	bne.n	800abf0 <vTaskSwitchContext+0x58>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	3304      	adds	r3, #4
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d10b      	bne.n	800abf0 <vTaskSwitchContext+0x58>
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	3308      	adds	r3, #8
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d105      	bne.n	800abf0 <vTaskSwitchContext+0x58>
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	330c      	adds	r3, #12
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	429a      	cmp	r2, r3
 800abee:	d008      	beq.n	800ac02 <vTaskSwitchContext+0x6a>
 800abf0:	4b2e      	ldr	r3, [pc, #184]	; (800acac <vTaskSwitchContext+0x114>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	4b2d      	ldr	r3, [pc, #180]	; (800acac <vTaskSwitchContext+0x114>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3334      	adds	r3, #52	; 0x34
 800abfa:	4619      	mov	r1, r3
 800abfc:	4610      	mov	r0, r2
 800abfe:	f005 f965 	bl	800fecc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac02:	4b2b      	ldr	r3, [pc, #172]	; (800acb0 <vTaskSwitchContext+0x118>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	e010      	b.n	800ac2c <vTaskSwitchContext+0x94>
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <vTaskSwitchContext+0x8e>
        __asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	607b      	str	r3, [r7, #4]
    }
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <vTaskSwitchContext+0x8c>
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	4921      	ldr	r1, [pc, #132]	; (800acb4 <vTaskSwitchContext+0x11c>)
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	440b      	add	r3, r1
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0e4      	beq.n	800ac0a <vTaskSwitchContext+0x72>
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4a1a      	ldr	r2, [pc, #104]	; (800acb4 <vTaskSwitchContext+0x11c>)
 800ac4c:	4413      	add	r3, r2
 800ac4e:	60bb      	str	r3, [r7, #8]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	605a      	str	r2, [r3, #4]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3308      	adds	r3, #8
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d104      	bne.n	800ac70 <vTaskSwitchContext+0xd8>
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	605a      	str	r2, [r3, #4]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	4a0d      	ldr	r2, [pc, #52]	; (800acac <vTaskSwitchContext+0x114>)
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	4a0d      	ldr	r2, [pc, #52]	; (800acb0 <vTaskSwitchContext+0x118>)
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800ac80:	4b0a      	ldr	r3, [pc, #40]	; (800acac <vTaskSwitchContext+0x114>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	4b0c      	ldr	r3, [pc, #48]	; (800acb8 <vTaskSwitchContext+0x120>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d102      	bne.n	800ac92 <vTaskSwitchContext+0xfa>
 800ac8c:	f002 f936 	bl	800cefc <SEGGER_SYSVIEW_OnIdle>
}
 800ac90:	e004      	b.n	800ac9c <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 800ac92:	4b06      	ldr	r3, [pc, #24]	; (800acac <vTaskSwitchContext+0x114>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f002 f98e 	bl	800cfb8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800ac9c:	bf00      	nop
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20004ee0 	.word	0x20004ee0
 800aca8:	20004ecc 	.word	0x20004ecc
 800acac:	200049e4 	.word	0x200049e4
 800acb0:	20004ec0 	.word	0x20004ec0
 800acb4:	200049e8 	.word	0x200049e8
 800acb8:	20004edc 	.word	0x20004edc

0800acbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	60fb      	str	r3, [r7, #12]
    }
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ace2:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <vTaskPlaceOnEventList+0x44>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3318      	adds	r3, #24
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7fe f89b 	bl	8008e26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acf0:	2101      	movs	r1, #1
 800acf2:	6838      	ldr	r0, [r7, #0]
 800acf4:	f000 fbd2 	bl	800b49c <prvAddCurrentTaskToDelayedList>
}
 800acf8:	bf00      	nop
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	200049e4 	.word	0x200049e4

0800ad04 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	617b      	str	r3, [r7, #20]
    }
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad2c:	4b0b      	ldr	r3, [pc, #44]	; (800ad5c <vTaskPlaceOnEventListRestricted+0x58>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3318      	adds	r3, #24
 800ad32:	4619      	mov	r1, r3
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f7fe f852 	bl	8008dde <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad44:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800ad46:	2024      	movs	r0, #36	; 0x24
 800ad48:	f001 fbda 	bl	800c500 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	68b8      	ldr	r0, [r7, #8]
 800ad50:	f000 fba4 	bl	800b49c <prvAddCurrentTaskToDelayedList>
    }
 800ad54:	bf00      	nop
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	200049e4 	.word	0x200049e4

0800ad60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10a      	bne.n	800ad8c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	60fb      	str	r3, [r7, #12]
    }
 800ad88:	bf00      	nop
 800ad8a:	e7fe      	b.n	800ad8a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	3318      	adds	r3, #24
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fe f881 	bl	8008e98 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad96:	4b20      	ldr	r3, [pc, #128]	; (800ae18 <xTaskRemoveFromEventList+0xb8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d121      	bne.n	800ade2 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	3304      	adds	r3, #4
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe f878 	bl	8008e98 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 f946 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb4:	4b19      	ldr	r3, [pc, #100]	; (800ae1c <xTaskRemoveFromEventList+0xbc>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d903      	bls.n	800adc4 <xTaskRemoveFromEventList+0x64>
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	4a16      	ldr	r2, [pc, #88]	; (800ae1c <xTaskRemoveFromEventList+0xbc>)
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4a13      	ldr	r2, [pc, #76]	; (800ae20 <xTaskRemoveFromEventList+0xc0>)
 800add2:	441a      	add	r2, r3
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	3304      	adds	r3, #4
 800add8:	4619      	mov	r1, r3
 800adda:	4610      	mov	r0, r2
 800addc:	f7fd ffff 	bl	8008dde <vListInsertEnd>
 800ade0:	e005      	b.n	800adee <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	3318      	adds	r3, #24
 800ade6:	4619      	mov	r1, r3
 800ade8:	480e      	ldr	r0, [pc, #56]	; (800ae24 <xTaskRemoveFromEventList+0xc4>)
 800adea:	f7fd fff8 	bl	8008dde <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf2:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <xTaskRemoveFromEventList+0xc8>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d905      	bls.n	800ae08 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <xTaskRemoveFromEventList+0xcc>)
 800ae02:	2201      	movs	r2, #1
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	e001      	b.n	800ae0c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800ae0c:	697b      	ldr	r3, [r7, #20]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20004ee0 	.word	0x20004ee0
 800ae1c:	20004ec0 	.word	0x20004ec0
 800ae20:	200049e8 	.word	0x200049e8
 800ae24:	20004e78 	.word	0x20004e78
 800ae28:	200049e4 	.word	0x200049e4
 800ae2c:	20004ecc 	.word	0x20004ecc

0800ae30 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae38:	4b06      	ldr	r3, [pc, #24]	; (800ae54 <vTaskInternalSetTimeOutState+0x24>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800ae40:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <vTaskInternalSetTimeOutState+0x28>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	605a      	str	r2, [r3, #4]
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	20004ed0 	.word	0x20004ed0
 800ae58:	20004ebc 	.word	0x20004ebc

0800ae5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10a      	bne.n	800ae82 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	613b      	str	r3, [r7, #16]
    }
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	60fb      	str	r3, [r7, #12]
    }
 800ae9a:	bf00      	nop
 800ae9c:	e7fe      	b.n	800ae9c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800ae9e:	f7fe f953 	bl	8009148 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800aea2:	4b1f      	ldr	r3, [pc, #124]	; (800af20 <xTaskCheckForTimeOut+0xc4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeba:	d102      	bne.n	800aec2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	e026      	b.n	800af10 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	4b17      	ldr	r3, [pc, #92]	; (800af24 <xTaskCheckForTimeOut+0xc8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d00a      	beq.n	800aee4 <xTaskCheckForTimeOut+0x88>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	69ba      	ldr	r2, [r7, #24]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d305      	bcc.n	800aee4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800aed8:	2301      	movs	r3, #1
 800aeda:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	e015      	b.n	800af10 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d20b      	bcs.n	800af06 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	1ad2      	subs	r2, r2, r3
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff ff98 	bl	800ae30 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800af00:	2300      	movs	r3, #0
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	e004      	b.n	800af10 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800af0c:	2301      	movs	r3, #1
 800af0e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800af10:	f7fe f94a 	bl	80091a8 <vPortExitCritical>

    return xReturn;
 800af14:	69fb      	ldr	r3, [r7, #28]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3720      	adds	r7, #32
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20004ebc 	.word	0x20004ebc
 800af24:	20004ed0 	.word	0x20004ed0

0800af28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800af2c:	4b03      	ldr	r3, [pc, #12]	; (800af3c <vTaskMissedYield+0x14>)
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
}
 800af32:	bf00      	nop
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20004ecc 	.word	0x20004ecc

0800af40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800af48:	f000 f852 	bl	800aff0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af4c:	4b06      	ldr	r3, [pc, #24]	; (800af68 <prvIdleTask+0x28>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d9f9      	bls.n	800af48 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <prvIdleTask+0x2c>)
 800af56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800af64:	e7f0      	b.n	800af48 <prvIdleTask+0x8>
 800af66:	bf00      	nop
 800af68:	200049e8 	.word	0x200049e8
 800af6c:	e000ed04 	.word	0xe000ed04

0800af70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af76:	2300      	movs	r3, #0
 800af78:	607b      	str	r3, [r7, #4]
 800af7a:	e00c      	b.n	800af96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	4613      	mov	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4a12      	ldr	r2, [pc, #72]	; (800afd0 <prvInitialiseTaskLists+0x60>)
 800af88:	4413      	add	r3, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fd fefa 	bl	8008d84 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3301      	adds	r3, #1
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b37      	cmp	r3, #55	; 0x37
 800af9a:	d9ef      	bls.n	800af7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800af9c:	480d      	ldr	r0, [pc, #52]	; (800afd4 <prvInitialiseTaskLists+0x64>)
 800af9e:	f7fd fef1 	bl	8008d84 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800afa2:	480d      	ldr	r0, [pc, #52]	; (800afd8 <prvInitialiseTaskLists+0x68>)
 800afa4:	f7fd feee 	bl	8008d84 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800afa8:	480c      	ldr	r0, [pc, #48]	; (800afdc <prvInitialiseTaskLists+0x6c>)
 800afaa:	f7fd feeb 	bl	8008d84 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800afae:	480c      	ldr	r0, [pc, #48]	; (800afe0 <prvInitialiseTaskLists+0x70>)
 800afb0:	f7fd fee8 	bl	8008d84 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800afb4:	480b      	ldr	r0, [pc, #44]	; (800afe4 <prvInitialiseTaskLists+0x74>)
 800afb6:	f7fd fee5 	bl	8008d84 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800afba:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <prvInitialiseTaskLists+0x78>)
 800afbc:	4a05      	ldr	r2, [pc, #20]	; (800afd4 <prvInitialiseTaskLists+0x64>)
 800afbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afc0:	4b0a      	ldr	r3, [pc, #40]	; (800afec <prvInitialiseTaskLists+0x7c>)
 800afc2:	4a05      	ldr	r2, [pc, #20]	; (800afd8 <prvInitialiseTaskLists+0x68>)
 800afc4:	601a      	str	r2, [r3, #0]
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	200049e8 	.word	0x200049e8
 800afd4:	20004e48 	.word	0x20004e48
 800afd8:	20004e5c 	.word	0x20004e5c
 800afdc:	20004e78 	.word	0x20004e78
 800afe0:	20004e8c 	.word	0x20004e8c
 800afe4:	20004ea4 	.word	0x20004ea4
 800afe8:	20004e70 	.word	0x20004e70
 800afec:	20004e74 	.word	0x20004e74

0800aff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aff6:	e019      	b.n	800b02c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800aff8:	f7fe f8a6 	bl	8009148 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800affc:	4b10      	ldr	r3, [pc, #64]	; (800b040 <prvCheckTasksWaitingTermination+0x50>)
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3304      	adds	r3, #4
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fd ff45 	bl	8008e98 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800b00e:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <prvCheckTasksWaitingTermination+0x54>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3b01      	subs	r3, #1
 800b014:	4a0b      	ldr	r2, [pc, #44]	; (800b044 <prvCheckTasksWaitingTermination+0x54>)
 800b016:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800b018:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <prvCheckTasksWaitingTermination+0x58>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	4a0a      	ldr	r2, [pc, #40]	; (800b048 <prvCheckTasksWaitingTermination+0x58>)
 800b020:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800b022:	f7fe f8c1 	bl	80091a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f848 	bl	800b0bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b02c:	4b06      	ldr	r3, [pc, #24]	; (800b048 <prvCheckTasksWaitingTermination+0x58>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1e1      	bne.n	800aff8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20004e8c 	.word	0x20004e8c
 800b044:	20004eb8 	.word	0x20004eb8
 800b048:	20004ea0 	.word	0x20004ea0

0800b04c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b058:	e005      	b.n	800b066 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3301      	adds	r3, #1
 800b05e:	607b      	str	r3, [r7, #4]
            ulCount++;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2ba5      	cmp	r3, #165	; 0xa5
 800b06c:	d0f5      	beq.n	800b05a <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	089b      	lsrs	r3, r3, #2
 800b072:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	b29b      	uxth	r3, r3
    }
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d102      	bne.n	800b098 <uxTaskGetStackHighWaterMark+0x14>
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <uxTaskGetStackHighWaterMark+0x34>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	e000      	b.n	800b09a <uxTaskGetStackHighWaterMark+0x16>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a0:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b0a2:	6938      	ldr	r0, [r7, #16]
 800b0a4:	f7ff ffd2 	bl	800b04c <prvTaskCheckFreeStackSpace>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
    }
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3718      	adds	r7, #24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200049e4 	.word	0x200049e4

0800b0bc <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d108      	bne.n	800b0e0 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fd fd38 	bl	8008b48 <vPortFree>
                    vPortFree( pxTCB );
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7fd fd35 	bl	8008b48 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b0de:	e018      	b.n	800b112 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d103      	bne.n	800b0f2 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7fd fd2c 	bl	8008b48 <vPortFree>
    }
 800b0f0:	e00f      	b.n	800b112 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d00a      	beq.n	800b112 <prvDeleteTCB+0x56>
        __asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60fb      	str	r3, [r7, #12]
    }
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <prvDeleteTCB+0x54>
    }
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <prvResetNextTaskUnblockTime+0x30>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d104      	bne.n	800b134 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b12a:	4b09      	ldr	r3, [pc, #36]	; (800b150 <prvResetNextTaskUnblockTime+0x34>)
 800b12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b130:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b132:	e005      	b.n	800b140 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b134:	4b05      	ldr	r3, [pc, #20]	; (800b14c <prvResetNextTaskUnblockTime+0x30>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a04      	ldr	r2, [pc, #16]	; (800b150 <prvResetNextTaskUnblockTime+0x34>)
 800b13e:	6013      	str	r3, [r2, #0]
}
 800b140:	bf00      	nop
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	20004e70 	.word	0x20004e70
 800b150:	20004ed8 	.word	0x20004ed8

0800b154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b15a:	4b0b      	ldr	r3, [pc, #44]	; (800b188 <xTaskGetSchedulerState+0x34>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d102      	bne.n	800b168 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b162:	2301      	movs	r3, #1
 800b164:	607b      	str	r3, [r7, #4]
 800b166:	e008      	b.n	800b17a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b168:	4b08      	ldr	r3, [pc, #32]	; (800b18c <xTaskGetSchedulerState+0x38>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b170:	2302      	movs	r3, #2
 800b172:	607b      	str	r3, [r7, #4]
 800b174:	e001      	b.n	800b17a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b176:	2300      	movs	r3, #0
 800b178:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b17a:	687b      	ldr	r3, [r7, #4]
    }
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	20004ec4 	.word	0x20004ec4
 800b18c:	20004ee0 	.word	0x20004ee0

0800b190 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d05a      	beq.n	800b25c <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1aa:	4b2f      	ldr	r3, [pc, #188]	; (800b268 <xTaskPriorityInherit+0xd8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d24a      	bcs.n	800b24a <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	db06      	blt.n	800b1ca <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1bc:	4b2a      	ldr	r3, [pc, #168]	; (800b268 <xTaskPriorityInherit+0xd8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6959      	ldr	r1, [r3, #20]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4a24      	ldr	r2, [pc, #144]	; (800b26c <xTaskPriorityInherit+0xdc>)
 800b1dc:	4413      	add	r3, r2
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	d126      	bne.n	800b230 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd fe56 	bl	8008e98 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1ec:	4b1e      	ldr	r3, [pc, #120]	; (800b268 <xTaskPriorityInherit+0xd8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f001 ff1f 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b202:	4b1b      	ldr	r3, [pc, #108]	; (800b270 <xTaskPriorityInherit+0xe0>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d903      	bls.n	800b212 <xTaskPriorityInherit+0x82>
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	4a18      	ldr	r2, [pc, #96]	; (800b270 <xTaskPriorityInherit+0xe0>)
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b216:	4613      	mov	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4a13      	ldr	r2, [pc, #76]	; (800b26c <xTaskPriorityInherit+0xdc>)
 800b220:	441a      	add	r2, r3
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	3304      	adds	r3, #4
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f7fd fdd8 	bl	8008dde <vListInsertEnd>
 800b22e:	e004      	b.n	800b23a <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b230:	4b0d      	ldr	r3, [pc, #52]	; (800b268 <xTaskPriorityInherit+0xd8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4619      	mov	r1, r3
 800b23e:	2049      	movs	r0, #73	; 0x49
 800b240:	f001 f97c 	bl	800c53c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b244:	2301      	movs	r3, #1
 800b246:	60fb      	str	r3, [r7, #12]
 800b248:	e008      	b.n	800b25c <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b24e:	4b06      	ldr	r3, [pc, #24]	; (800b268 <xTaskPriorityInherit+0xd8>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	429a      	cmp	r2, r3
 800b256:	d201      	bcs.n	800b25c <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b258:	2301      	movs	r3, #1
 800b25a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b25c:	68fb      	ldr	r3, [r7, #12]
    }
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	200049e4 	.word	0x200049e4
 800b26c:	200049e8 	.word	0x200049e8
 800b270:	20004ec0 	.word	0x20004ec0

0800b274 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d05f      	beq.n	800b34a <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b28a:	4b32      	ldr	r3, [pc, #200]	; (800b354 <xTaskPriorityDisinherit+0xe0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	429a      	cmp	r2, r3
 800b292:	d00a      	beq.n	800b2aa <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	60fb      	str	r3, [r7, #12]
    }
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10a      	bne.n	800b2c8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	60bb      	str	r3, [r7, #8]
    }
 800b2c4:	bf00      	nop
 800b2c6:	e7fe      	b.n	800b2c6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2cc:	1e5a      	subs	r2, r3, #1
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d035      	beq.n	800b34a <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d131      	bne.n	800b34a <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fd fdd4 	bl	8008e98 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	204a      	movs	r0, #74	; 0x4a
 800b2f6:	f001 f921 	bl	800c53c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b306:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	4618      	mov	r0, r3
 800b312:	f001 fe93 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <xTaskPriorityDisinherit+0xe4>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d903      	bls.n	800b32a <xTaskPriorityDisinherit+0xb6>
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b326:	4a0c      	ldr	r2, [pc, #48]	; (800b358 <xTaskPriorityDisinherit+0xe4>)
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4a09      	ldr	r2, [pc, #36]	; (800b35c <xTaskPriorityDisinherit+0xe8>)
 800b338:	441a      	add	r2, r3
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	3304      	adds	r3, #4
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f7fd fd4c 	bl	8008dde <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b346:	2301      	movs	r3, #1
 800b348:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b34a:	697b      	ldr	r3, [r7, #20]
    }
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	200049e4 	.word	0x200049e4
 800b358:	20004ec0 	.word	0x20004ec0
 800b35c:	200049e8 	.word	0x200049e8

0800b360 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b360:	b580      	push	{r7, lr}
 800b362:	b088      	sub	sp, #32
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b36e:	2301      	movs	r3, #1
 800b370:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d073      	beq.n	800b460 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	60fb      	str	r3, [r7, #12]
    }
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d902      	bls.n	800b3a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	61fb      	str	r3, [r7, #28]
 800b3a4:	e002      	b.n	800b3ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3aa:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d054      	beq.n	800b460 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d14f      	bne.n	800b460 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b3c0:	4b29      	ldr	r3, [pc, #164]	; (800b468 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d10a      	bne.n	800b3e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	60bb      	str	r3, [r7, #8]
    }
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	204a      	movs	r0, #74	; 0x4a
 800b3e6:	f001 f8a9 	bl	800c53c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	69fa      	ldr	r2, [r7, #28]
 800b3f4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	db04      	blt.n	800b408 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	6959      	ldr	r1, [r3, #20]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4a15      	ldr	r2, [pc, #84]	; (800b46c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b418:	4413      	add	r3, r2
 800b41a:	4299      	cmp	r1, r3
 800b41c:	d120      	bne.n	800b460 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	3304      	adds	r3, #4
 800b422:	4618      	mov	r0, r3
 800b424:	f7fd fd38 	bl	8008e98 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 fe06 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d903      	bls.n	800b444 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	4a0b      	ldr	r2, [pc, #44]	; (800b470 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4a06      	ldr	r2, [pc, #24]	; (800b46c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b452:	441a      	add	r2, r3
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	3304      	adds	r3, #4
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f7fd fcbf 	bl	8008dde <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b460:	bf00      	nop
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	200049e4 	.word	0x200049e4
 800b46c:	200049e8 	.word	0x200049e8
 800b470:	20004ec0 	.word	0x20004ec0

0800b474 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b474:	b480      	push	{r7}
 800b476:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b478:	4b07      	ldr	r3, [pc, #28]	; (800b498 <pvTaskIncrementMutexHeldCount+0x24>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d004      	beq.n	800b48a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <pvTaskIncrementMutexHeldCount+0x24>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b486:	3201      	adds	r2, #1
 800b488:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800b48a:	4b03      	ldr	r3, [pc, #12]	; (800b498 <pvTaskIncrementMutexHeldCount+0x24>)
 800b48c:	681b      	ldr	r3, [r3, #0]
    }
 800b48e:	4618      	mov	r0, r3
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	200049e4 	.word	0x200049e4

0800b49c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b4a6:	4b27      	ldr	r3, [pc, #156]	; (800b544 <prvAddCurrentTaskToDelayedList+0xa8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4ac:	4b26      	ldr	r3, [pc, #152]	; (800b548 <prvAddCurrentTaskToDelayedList+0xac>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fd fcf0 	bl	8008e98 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4be:	d10a      	bne.n	800b4d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d007      	beq.n	800b4d6 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4c6:	4b20      	ldr	r3, [pc, #128]	; (800b548 <prvAddCurrentTaskToDelayedList+0xac>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	481f      	ldr	r0, [pc, #124]	; (800b54c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b4d0:	f7fd fc85 	bl	8008dde <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b4d4:	e032      	b.n	800b53c <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4413      	add	r3, r2
 800b4dc:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4de:	4b1a      	ldr	r3, [pc, #104]	; (800b548 <prvAddCurrentTaskToDelayedList+0xac>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d20f      	bcs.n	800b50e <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b4ee:	4b16      	ldr	r3, [pc, #88]	; (800b548 <prvAddCurrentTaskToDelayedList+0xac>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2104      	movs	r1, #4
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f001 fde3 	bl	800d0c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4fa:	4b15      	ldr	r3, [pc, #84]	; (800b550 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	4b12      	ldr	r3, [pc, #72]	; (800b548 <prvAddCurrentTaskToDelayedList+0xac>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7fd fc8d 	bl	8008e26 <vListInsert>
}
 800b50c:	e016      	b.n	800b53c <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <prvAddCurrentTaskToDelayedList+0xac>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2104      	movs	r1, #4
 800b514:	4618      	mov	r0, r3
 800b516:	f001 fdd3 	bl	800d0c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b51a:	4b0e      	ldr	r3, [pc, #56]	; (800b554 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	4b0a      	ldr	r3, [pc, #40]	; (800b548 <prvAddCurrentTaskToDelayedList+0xac>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3304      	adds	r3, #4
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f7fd fc7d 	bl	8008e26 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	429a      	cmp	r2, r3
 800b534:	d202      	bcs.n	800b53c <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800b536:	4a08      	ldr	r2, [pc, #32]	; (800b558 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	6013      	str	r3, [r2, #0]
}
 800b53c:	bf00      	nop
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20004ebc 	.word	0x20004ebc
 800b548:	200049e4 	.word	0x200049e4
 800b54c:	20004ea4 	.word	0x20004ea4
 800b550:	20004e74 	.word	0x20004e74
 800b554:	20004e70 	.word	0x20004e70
 800b558:	20004ed8 	.word	0x20004ed8

0800b55c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08a      	sub	sp, #40	; 0x28
 800b560:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b566:	f000 fb63 	bl	800bc30 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b56a:	4b1c      	ldr	r3, [pc, #112]	; (800b5dc <xTimerCreateTimerTask+0x80>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d021      	beq.n	800b5b6 <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b57a:	1d3a      	adds	r2, r7, #4
 800b57c:	f107 0108 	add.w	r1, r7, #8
 800b580:	f107 030c 	add.w	r3, r7, #12
 800b584:	4618      	mov	r0, r3
 800b586:	f004 fccb 	bl	800ff20 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	9202      	str	r2, [sp, #8]
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	2305      	movs	r3, #5
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	2300      	movs	r3, #0
 800b59a:	460a      	mov	r2, r1
 800b59c:	4910      	ldr	r1, [pc, #64]	; (800b5e0 <xTimerCreateTimerTask+0x84>)
 800b59e:	4811      	ldr	r0, [pc, #68]	; (800b5e4 <xTimerCreateTimerTask+0x88>)
 800b5a0:	f7fe fe9e 	bl	800a2e0 <xTaskCreateStatic>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	4a10      	ldr	r2, [pc, #64]	; (800b5e8 <xTimerCreateTimerTask+0x8c>)
 800b5a8:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <xTimerCreateTimerTask+0x8c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10a      	bne.n	800b5d2 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	613b      	str	r3, [r7, #16]
    }
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800b5d2:	697b      	ldr	r3, [r7, #20]
    }
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	20004f14 	.word	0x20004f14
 800b5e0:	080138e8 	.word	0x080138e8
 800b5e4:	0800b7d9 	.word	0x0800b7d9
 800b5e8:	20004f18 	.word	0x20004f18

0800b5ec <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b5fa:	202c      	movs	r0, #44	; 0x2c
 800b5fc:	f7fd f9c0 	bl	8008980 <pvPortMalloc>
 800b600:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00d      	beq.n	800b624 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	68b9      	ldr	r1, [r7, #8]
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 f805 	bl	800b62e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800b624:	697b      	ldr	r3, [r7, #20]
        }
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800b62e:	b580      	push	{r7, lr}
 800b630:	b086      	sub	sp, #24
 800b632:	af00      	add	r7, sp, #0
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	60b9      	str	r1, [r7, #8]
 800b638:	607a      	str	r2, [r7, #4]
 800b63a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10a      	bne.n	800b658 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	617b      	str	r3, [r7, #20]
    }
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d01e      	beq.n	800b69c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800b65e:	f000 fae7 	bl	800bc30 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	6a3a      	ldr	r2, [r7, #32]
 800b678:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	3304      	adds	r3, #4
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fd fba0 	bl	8008dc4 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b690:	f043 0304 	orr.w	r3, r3, #4
 800b694:	b2da      	uxtb	r2, r3
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800b69c:	bf00      	nop
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08a      	sub	sp, #40	; 0x28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	623b      	str	r3, [r7, #32]
    }
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b6d2:	4b1a      	ldr	r3, [pc, #104]	; (800b73c <xTimerGenericCommand+0x98>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d02a      	beq.n	800b730 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b05      	cmp	r3, #5
 800b6ea:	dc18      	bgt.n	800b71e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6ec:	f7ff fd32 	bl	800b154 <xTaskGetSchedulerState>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d109      	bne.n	800b70a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6f6:	4b11      	ldr	r3, [pc, #68]	; (800b73c <xTimerGenericCommand+0x98>)
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	f107 0110 	add.w	r1, r7, #16
 800b6fe:	2300      	movs	r3, #0
 800b700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b702:	f7fe f82f 	bl	8009764 <xQueueGenericSend>
 800b706:	6278      	str	r0, [r7, #36]	; 0x24
 800b708:	e012      	b.n	800b730 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b70a:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <xTimerGenericCommand+0x98>)
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	f107 0110 	add.w	r1, r7, #16
 800b712:	2300      	movs	r3, #0
 800b714:	2200      	movs	r2, #0
 800b716:	f7fe f825 	bl	8009764 <xQueueGenericSend>
 800b71a:	6278      	str	r0, [r7, #36]	; 0x24
 800b71c:	e008      	b.n	800b730 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b71e:	4b07      	ldr	r3, [pc, #28]	; (800b73c <xTimerGenericCommand+0x98>)
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f107 0110 	add.w	r1, r7, #16
 800b726:	2300      	movs	r3, #0
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	f7fe f941 	bl	80099b0 <xQueueGenericSendFromISR>
 800b72e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b732:	4618      	mov	r0, r3
 800b734:	3728      	adds	r7, #40	; 0x28
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20004f14 	.word	0x20004f14

0800b740 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b740:	b580      	push	{r7, lr}
 800b742:	b088      	sub	sp, #32
 800b744:	af02      	add	r7, sp, #8
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74a:	4b22      	ldr	r3, [pc, #136]	; (800b7d4 <prvProcessExpiredTimer+0x94>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	3304      	adds	r3, #4
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fd fb9d 	bl	8008e98 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d022      	beq.n	800b7b2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	699a      	ldr	r2, [r3, #24]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	18d1      	adds	r1, r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	6978      	ldr	r0, [r7, #20]
 800b77a:	f000 f8d1 	bl	800b920 <prvInsertTimerInActiveList>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d01f      	beq.n	800b7c4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b784:	2300      	movs	r3, #0
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	2300      	movs	r3, #0
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	2100      	movs	r1, #0
 800b78e:	6978      	ldr	r0, [r7, #20]
 800b790:	f7ff ff88 	bl	800b6a4 <xTimerGenericCommand>
 800b794:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d113      	bne.n	800b7c4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	60fb      	str	r3, [r7, #12]
    }
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7b8:	f023 0301 	bic.w	r3, r3, #1
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	6978      	ldr	r0, [r7, #20]
 800b7ca:	4798      	blx	r3
    }
 800b7cc:	bf00      	nop
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	20004f0c 	.word	0x20004f0c

0800b7d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7e0:	f107 0308 	add.w	r3, r7, #8
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 f857 	bl	800b898 <prvGetNextExpireTime>
 800b7ea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 f803 	bl	800b7fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b7f6:	f000 f8d5 	bl	800b9a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7fa:	e7f1      	b.n	800b7e0 <prvTimerTask+0x8>

0800b7fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b806:	f7ff f837 	bl	800a878 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 f866 	bl	800b8e0 <prvSampleTimeNow>
 800b814:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d130      	bne.n	800b87e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <prvProcessTimerOrBlockTask+0x3c>
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	429a      	cmp	r2, r3
 800b828:	d806      	bhi.n	800b838 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b82a:	f7ff f833 	bl	800a894 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b82e:	68f9      	ldr	r1, [r7, #12]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff ff85 	bl	800b740 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b836:	e024      	b.n	800b882 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d008      	beq.n	800b850 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b83e:	4b13      	ldr	r3, [pc, #76]	; (800b88c <prvProcessTimerOrBlockTask+0x90>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <prvProcessTimerOrBlockTask+0x50>
 800b848:	2301      	movs	r3, #1
 800b84a:	e000      	b.n	800b84e <prvProcessTimerOrBlockTask+0x52>
 800b84c:	2300      	movs	r3, #0
 800b84e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b850:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <prvProcessTimerOrBlockTask+0x94>)
 800b852:	6818      	ldr	r0, [r3, #0]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	4619      	mov	r1, r3
 800b85e:	f7fe fd0b 	bl	800a278 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b862:	f7ff f817 	bl	800a894 <xTaskResumeAll>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b86c:	4b09      	ldr	r3, [pc, #36]	; (800b894 <prvProcessTimerOrBlockTask+0x98>)
 800b86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	f3bf 8f6f 	isb	sy
    }
 800b87c:	e001      	b.n	800b882 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b87e:	f7ff f809 	bl	800a894 <xTaskResumeAll>
    }
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20004f10 	.word	0x20004f10
 800b890:	20004f14 	.word	0x20004f14
 800b894:	e000ed04 	.word	0xe000ed04

0800b898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b8a0:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <prvGetNextExpireTime+0x44>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <prvGetNextExpireTime+0x16>
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	e000      	b.n	800b8b0 <prvGetNextExpireTime+0x18>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d105      	bne.n	800b8c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8bc:	4b07      	ldr	r3, [pc, #28]	; (800b8dc <prvGetNextExpireTime+0x44>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	e001      	b.n	800b8cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
    }
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	20004f0c 	.word	0x20004f0c

0800b8e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b8e8:	f7ff f876 	bl	800a9d8 <xTaskGetTickCount>
 800b8ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b8ee:	4b0b      	ldr	r3, [pc, #44]	; (800b91c <prvSampleTimeNow+0x3c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d205      	bcs.n	800b904 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b8f8:	f000 f936 	bl	800bb68 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	e002      	b.n	800b90a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b90a:	4a04      	ldr	r2, [pc, #16]	; (800b91c <prvSampleTimeNow+0x3c>)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b910:	68fb      	ldr	r3, [r7, #12]
    }
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20004f1c 	.word	0x20004f1c

0800b920 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	429a      	cmp	r2, r3
 800b944:	d812      	bhi.n	800b96c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	1ad2      	subs	r2, r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	617b      	str	r3, [r7, #20]
 800b958:	e01b      	b.n	800b992 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b95a:	4b10      	ldr	r3, [pc, #64]	; (800b99c <prvInsertTimerInActiveList+0x7c>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	3304      	adds	r3, #4
 800b962:	4619      	mov	r1, r3
 800b964:	4610      	mov	r0, r2
 800b966:	f7fd fa5e 	bl	8008e26 <vListInsert>
 800b96a:	e012      	b.n	800b992 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	429a      	cmp	r2, r3
 800b972:	d206      	bcs.n	800b982 <prvInsertTimerInActiveList+0x62>
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d302      	bcc.n	800b982 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	617b      	str	r3, [r7, #20]
 800b980:	e007      	b.n	800b992 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b982:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <prvInsertTimerInActiveList+0x80>)
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	3304      	adds	r3, #4
 800b98a:	4619      	mov	r1, r3
 800b98c:	4610      	mov	r0, r2
 800b98e:	f7fd fa4a 	bl	8008e26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b992:	697b      	ldr	r3, [r7, #20]
    }
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	20004f10 	.word	0x20004f10
 800b9a0:	20004f0c 	.word	0x20004f0c

0800b9a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08e      	sub	sp, #56	; 0x38
 800b9a8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9aa:	e0ca      	b.n	800bb42 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	da18      	bge.n	800b9e4 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b9b2:	1d3b      	adds	r3, r7, #4
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <prvProcessReceivedCommands+0x30>
        __asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	61fb      	str	r3, [r7, #28]
    }
 800b9d0:	bf00      	nop
 800b9d2:	e7fe      	b.n	800b9d2 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9da:	6850      	ldr	r0, [r2, #4]
 800b9dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9de:	6892      	ldr	r2, [r2, #8]
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f2c0 80aa 	blt.w	800bb40 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d004      	beq.n	800ba02 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7fd fa4b 	bl	8008e98 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba02:	463b      	mov	r3, r7
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff ff6b 	bl	800b8e0 <prvSampleTimeNow>
 800ba0a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b09      	cmp	r3, #9
 800ba10:	f200 8097 	bhi.w	800bb42 <prvProcessReceivedCommands+0x19e>
 800ba14:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <prvProcessReceivedCommands+0x78>)
 800ba16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1a:	bf00      	nop
 800ba1c:	0800ba45 	.word	0x0800ba45
 800ba20:	0800ba45 	.word	0x0800ba45
 800ba24:	0800ba45 	.word	0x0800ba45
 800ba28:	0800bab9 	.word	0x0800bab9
 800ba2c:	0800bacd 	.word	0x0800bacd
 800ba30:	0800bb17 	.word	0x0800bb17
 800ba34:	0800ba45 	.word	0x0800ba45
 800ba38:	0800ba45 	.word	0x0800ba45
 800ba3c:	0800bab9 	.word	0x0800bab9
 800ba40:	0800bacd 	.word	0x0800bacd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba4a:	f043 0301 	orr.w	r3, r3, #1
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	18d1      	adds	r1, r2, r3
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba64:	f7ff ff5c 	bl	800b920 <prvInsertTimerInActiveList>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d069      	beq.n	800bb42 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba74:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d05e      	beq.n	800bb42 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	441a      	add	r2, r3
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	2300      	movs	r3, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba96:	f7ff fe05 	bl	800b6a4 <xTimerGenericCommand>
 800ba9a:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d14f      	bne.n	800bb42 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	61bb      	str	r3, [r7, #24]
    }
 800bab4:	bf00      	nop
 800bab6:	e7fe      	b.n	800bab6 <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800babe:	f023 0301 	bic.w	r3, r3, #1
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800baca:	e03a      	b.n	800bb42 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad2:	f043 0301 	orr.w	r3, r3, #1
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10a      	bne.n	800bb02 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	617b      	str	r3, [r7, #20]
    }
 800bafe:	bf00      	nop
 800bb00:	e7fe      	b.n	800bb00 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	699a      	ldr	r2, [r3, #24]
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	18d1      	adds	r1, r2, r3
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb10:	f7ff ff06 	bl	800b920 <prvInsertTimerInActiveList>
                        break;
 800bb14:	e015      	b.n	800bb42 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb1c:	f003 0302 	and.w	r3, r3, #2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d103      	bne.n	800bb2c <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 800bb24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb26:	f7fd f80f 	bl	8008b48 <vPortFree>
 800bb2a:	e00a      	b.n	800bb42 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb32:	f023 0301 	bic.w	r3, r3, #1
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800bb3e:	e000      	b.n	800bb42 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800bb40:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb42:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <prvProcessReceivedCommands+0x1c0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	1d39      	adds	r1, r7, #4
 800bb48:	2200      	movs	r2, #0
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fd ffee 	bl	8009b2c <xQueueReceive>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f47f af2a 	bne.w	800b9ac <prvProcessReceivedCommands+0x8>
        }
    }
 800bb58:	bf00      	nop
 800bb5a:	bf00      	nop
 800bb5c:	3730      	adds	r7, #48	; 0x30
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20004f14 	.word	0x20004f14

0800bb68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb6e:	e048      	b.n	800bc02 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb70:	4b2d      	ldr	r3, [pc, #180]	; (800bc28 <prvSwitchTimerLists+0xc0>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb7a:	4b2b      	ldr	r3, [pc, #172]	; (800bc28 <prvSwitchTimerLists+0xc0>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fd f985 	bl	8008e98 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d02e      	beq.n	800bc02 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	4413      	add	r3, r2
 800bbac:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d90e      	bls.n	800bbd4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <prvSwitchTimerLists+0xc0>)
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7fd f92a 	bl	8008e26 <vListInsert>
 800bbd2:	e016      	b.n	800bc02 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	2100      	movs	r1, #0
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f7ff fd60 	bl	800b6a4 <xTimerGenericCommand>
 800bbe4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	603b      	str	r3, [r7, #0]
    }
 800bbfe:	bf00      	nop
 800bc00:	e7fe      	b.n	800bc00 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc02:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <prvSwitchTimerLists+0xc0>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1b1      	bne.n	800bb70 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800bc0c:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <prvSwitchTimerLists+0xc0>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800bc12:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <prvSwitchTimerLists+0xc4>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a04      	ldr	r2, [pc, #16]	; (800bc28 <prvSwitchTimerLists+0xc0>)
 800bc18:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800bc1a:	4a04      	ldr	r2, [pc, #16]	; (800bc2c <prvSwitchTimerLists+0xc4>)
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	6013      	str	r3, [r2, #0]
    }
 800bc20:	bf00      	nop
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	20004f0c 	.word	0x20004f0c
 800bc2c:	20004f10 	.word	0x20004f10

0800bc30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800bc36:	f7fd fa87 	bl	8009148 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800bc3a:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d120      	bne.n	800bc84 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800bc42:	4814      	ldr	r0, [pc, #80]	; (800bc94 <prvCheckForValidListAndQueue+0x64>)
 800bc44:	f7fd f89e 	bl	8008d84 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800bc48:	4813      	ldr	r0, [pc, #76]	; (800bc98 <prvCheckForValidListAndQueue+0x68>)
 800bc4a:	f7fd f89b 	bl	8008d84 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800bc4e:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <prvCheckForValidListAndQueue+0x6c>)
 800bc50:	4a10      	ldr	r2, [pc, #64]	; (800bc94 <prvCheckForValidListAndQueue+0x64>)
 800bc52:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800bc54:	4b12      	ldr	r3, [pc, #72]	; (800bca0 <prvCheckForValidListAndQueue+0x70>)
 800bc56:	4a10      	ldr	r2, [pc, #64]	; (800bc98 <prvCheckForValidListAndQueue+0x68>)
 800bc58:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	4b11      	ldr	r3, [pc, #68]	; (800bca4 <prvCheckForValidListAndQueue+0x74>)
 800bc60:	4a11      	ldr	r2, [pc, #68]	; (800bca8 <prvCheckForValidListAndQueue+0x78>)
 800bc62:	2110      	movs	r1, #16
 800bc64:	200a      	movs	r0, #10
 800bc66:	f7fd fc47 	bl	80094f8 <xQueueGenericCreateStatic>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4a08      	ldr	r2, [pc, #32]	; (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc6e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800bc70:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d005      	beq.n	800bc84 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc78:	4b05      	ldr	r3, [pc, #20]	; (800bc90 <prvCheckForValidListAndQueue+0x60>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	490b      	ldr	r1, [pc, #44]	; (800bcac <prvCheckForValidListAndQueue+0x7c>)
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe fac8 	bl	800a214 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800bc84:	f7fd fa90 	bl	80091a8 <vPortExitCritical>
    }
 800bc88:	bf00      	nop
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20004f14 	.word	0x20004f14
 800bc94:	20004ee4 	.word	0x20004ee4
 800bc98:	20004ef8 	.word	0x20004ef8
 800bc9c:	20004f0c 	.word	0x20004f0c
 800bca0:	20004f10 	.word	0x20004f10
 800bca4:	20004fc0 	.word	0x20004fc0
 800bca8:	20004f20 	.word	0x20004f20
 800bcac:	080138f0 	.word	0x080138f0

0800bcb0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800bcb6:	4b24      	ldr	r3, [pc, #144]	; (800bd48 <_DoInit+0x98>)
 800bcb8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2203      	movs	r2, #3
 800bcbe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2203      	movs	r2, #3
 800bcc4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a20      	ldr	r2, [pc, #128]	; (800bd4c <_DoInit+0x9c>)
 800bcca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a20      	ldr	r2, [pc, #128]	; (800bd50 <_DoInit+0xa0>)
 800bcd0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bcd8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <_DoInit+0x9c>)
 800bcf0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a17      	ldr	r2, [pc, #92]	; (800bd54 <_DoInit+0xa4>)
 800bcf6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2210      	movs	r2, #16
 800bcfc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	3307      	adds	r3, #7
 800bd14:	4a10      	ldr	r2, [pc, #64]	; (800bd58 <_DoInit+0xa8>)
 800bd16:	6810      	ldr	r0, [r2, #0]
 800bd18:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bd1a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a0e      	ldr	r2, [pc, #56]	; (800bd5c <_DoInit+0xac>)
 800bd22:	6810      	ldr	r0, [r2, #0]
 800bd24:	6018      	str	r0, [r3, #0]
 800bd26:	8891      	ldrh	r1, [r2, #4]
 800bd28:	7992      	ldrb	r2, [r2, #6]
 800bd2a:	8099      	strh	r1, [r3, #4]
 800bd2c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bd2e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bd38:	f3bf 8f5f 	dmb	sy
}
 800bd3c:	bf00      	nop
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	20005010 	.word	0x20005010
 800bd4c:	080138f8 	.word	0x080138f8
 800bd50:	200050b8 	.word	0x200050b8
 800bd54:	200060b8 	.word	0x200060b8
 800bd58:	08013904 	.word	0x08013904
 800bd5c:	08013908 	.word	0x08013908

0800bd60 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08c      	sub	sp, #48	; 0x30
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800bd6c:	4b3e      	ldr	r3, [pc, #248]	; (800be68 <SEGGER_RTT_ReadNoLock+0x108>)
 800bd6e:	623b      	str	r3, [r7, #32]
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <SEGGER_RTT_ReadNoLock+0x1e>
 800bd7a:	f7ff ff99 	bl	800bcb0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4613      	mov	r3, r2
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	4413      	add	r3, r2
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	3360      	adds	r3, #96	; 0x60
 800bd8a:	4a37      	ldr	r2, [pc, #220]	; (800be68 <SEGGER_RTT_ReadNoLock+0x108>)
 800bd8c:	4413      	add	r3, r2
 800bd8e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800bda0:	2300      	movs	r3, #0
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800bda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d92b      	bls.n	800be04 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	bf28      	it	cs
 800bdbe:	4613      	movcs	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	4413      	add	r3, r2
 800bdca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bdcc:	697a      	ldr	r2, [r7, #20]
 800bdce:	6939      	ldr	r1, [r7, #16]
 800bdd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdd2:	f007 f86f 	bl	8012eb4 <memcpy>
    NumBytesRead += NumBytesRem;
 800bdd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	4413      	add	r3, r2
 800bddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800bdde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	4413      	add	r3, r2
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bdee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d101      	bne.n	800be04 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800be00:	2300      	movs	r3, #0
 800be02:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800be04:	69ba      	ldr	r2, [r7, #24]
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4293      	cmp	r3, r2
 800be12:	bf28      	it	cs
 800be14:	4613      	movcs	r3, r2
 800be16:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d019      	beq.n	800be52 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be24:	4413      	add	r3, r2
 800be26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	6939      	ldr	r1, [r7, #16]
 800be2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be2e:	f007 f841 	bl	8012eb4 <memcpy>
    NumBytesRead += NumBytesRem;
 800be32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	4413      	add	r3, r2
 800be38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800be3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	4413      	add	r3, r2
 800be40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800be4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	4413      	add	r3, r2
 800be50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be5c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800be60:	4618      	mov	r0, r3
 800be62:	3730      	adds	r7, #48	; 0x30
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20005010 	.word	0x20005010

0800be6c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800be7a:	4b3d      	ldr	r3, [pc, #244]	; (800bf70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800be7c:	61bb      	str	r3, [r7, #24]
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <SEGGER_RTT_AllocUpBuffer+0x20>
 800be88:	f7ff ff12 	bl	800bcb0 <_DoInit>
  SEGGER_RTT_LOCK();
 800be8c:	f3ef 8311 	mrs	r3, BASEPRI
 800be90:	f04f 0120 	mov.w	r1, #32
 800be94:	f381 8811 	msr	BASEPRI, r1
 800be98:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800be9a:	4b35      	ldr	r3, [pc, #212]	; (800bf70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800be9c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800bea2:	6939      	ldr	r1, [r7, #16]
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	4613      	mov	r3, r2
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	4413      	add	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	440b      	add	r3, r1
 800beb2:	3304      	adds	r3, #4
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d008      	beq.n	800becc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	3301      	adds	r3, #1
 800bebe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	691b      	ldr	r3, [r3, #16]
 800bec4:	69fa      	ldr	r2, [r7, #28]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	dbeb      	blt.n	800bea2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800beca:	e000      	b.n	800bece <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800becc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	69fa      	ldr	r2, [r7, #28]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	da3f      	bge.n	800bf58 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800bed8:	6939      	ldr	r1, [r7, #16]
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	4613      	mov	r3, r2
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	4413      	add	r3, r2
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	440b      	add	r3, r1
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800beec:	6939      	ldr	r1, [r7, #16]
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	4613      	mov	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	440b      	add	r3, r1
 800befc:	3304      	adds	r3, #4
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800bf02:	6939      	ldr	r1, [r7, #16]
 800bf04:	69fa      	ldr	r2, [r7, #28]
 800bf06:	4613      	mov	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	440b      	add	r3, r1
 800bf10:	3320      	adds	r3, #32
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800bf16:	6939      	ldr	r1, [r7, #16]
 800bf18:	69fa      	ldr	r2, [r7, #28]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	005b      	lsls	r3, r3, #1
 800bf1e:	4413      	add	r3, r2
 800bf20:	00db      	lsls	r3, r3, #3
 800bf22:	440b      	add	r3, r1
 800bf24:	3328      	adds	r3, #40	; 0x28
 800bf26:	2200      	movs	r2, #0
 800bf28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800bf2a:	6939      	ldr	r1, [r7, #16]
 800bf2c:	69fa      	ldr	r2, [r7, #28]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	4413      	add	r3, r2
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	440b      	add	r3, r1
 800bf38:	3324      	adds	r3, #36	; 0x24
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800bf3e:	6939      	ldr	r1, [r7, #16]
 800bf40:	69fa      	ldr	r2, [r7, #28]
 800bf42:	4613      	mov	r3, r2
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	4413      	add	r3, r2
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	440b      	add	r3, r1
 800bf4c:	332c      	adds	r3, #44	; 0x2c
 800bf4e:	683a      	ldr	r2, [r7, #0]
 800bf50:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bf52:	f3bf 8f5f 	dmb	sy
 800bf56:	e002      	b.n	800bf5e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800bf58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800bf64:	69fb      	ldr	r3, [r7, #28]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3720      	adds	r7, #32
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20005010 	.word	0x20005010

0800bf74 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08a      	sub	sp, #40	; 0x28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800bf82:	4b21      	ldr	r3, [pc, #132]	; (800c008 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800bf84:	623b      	str	r3, [r7, #32]
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800bf90:	f7ff fe8e 	bl	800bcb0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bf94:	4b1c      	ldr	r3, [pc, #112]	; (800c008 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800bf96:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d82c      	bhi.n	800bff8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800bf9e:	f3ef 8311 	mrs	r3, BASEPRI
 800bfa2:	f04f 0120 	mov.w	r1, #32
 800bfa6:	f381 8811 	msr	BASEPRI, r1
 800bfaa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4413      	add	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	3360      	adds	r3, #96	; 0x60
 800bfb8:	69fa      	ldr	r2, [r7, #28]
 800bfba:	4413      	add	r3, r2
 800bfbc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00e      	beq.n	800bfe2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bfe8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	627b      	str	r3, [r7, #36]	; 0x24
 800bff6:	e002      	b.n	800bffe <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800bff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bffc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c000:	4618      	mov	r0, r3
 800c002:	3728      	adds	r7, #40	; 0x28
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20005010 	.word	0x20005010

0800c00c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c018:	2300      	movs	r3, #0
 800c01a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00f      	beq.n	800c042 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800c022:	e002      	b.n	800c02a <_EncodeStr+0x1e>
      Len++;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	3301      	adds	r3, #1
 800c028:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	4413      	add	r3, r2
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1f6      	bne.n	800c024 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800c036:	693a      	ldr	r2, [r7, #16]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d901      	bls.n	800c042 <_EncodeStr+0x36>
      Len = Limit;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2bfe      	cmp	r3, #254	; 0xfe
 800c046:	d806      	bhi.n	800c056 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	1c5a      	adds	r2, r3, #1
 800c04c:	60fa      	str	r2, [r7, #12]
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	b2d2      	uxtb	r2, r2
 800c052:	701a      	strb	r2, [r3, #0]
 800c054:	e011      	b.n	800c07a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	60fa      	str	r2, [r7, #12]
 800c05c:	22ff      	movs	r2, #255	; 0xff
 800c05e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	60fa      	str	r2, [r7, #12]
 800c066:	693a      	ldr	r2, [r7, #16]
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	0a19      	lsrs	r1, r3, #8
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	60fa      	str	r2, [r7, #12]
 800c076:	b2ca      	uxtb	r2, r1
 800c078:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c07e:	e00a      	b.n	800c096 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	1c53      	adds	r3, r2, #1
 800c084:	60bb      	str	r3, [r7, #8]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	1c59      	adds	r1, r3, #1
 800c08a:	60f9      	str	r1, [r7, #12]
 800c08c:	7812      	ldrb	r2, [r2, #0]
 800c08e:	701a      	strb	r2, [r3, #0]
    n++;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	3301      	adds	r3, #1
 800c094:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d3f0      	bcc.n	800c080 <_EncodeStr+0x74>
  }
  return pPayload;
 800c09e:	68fb      	ldr	r3, [r7, #12]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	371c      	adds	r7, #28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3304      	adds	r3, #4
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c0ca:	4b36      	ldr	r3, [pc, #216]	; (800c1a4 <_HandleIncomingPacket+0xe0>)
 800c0cc:	7e1b      	ldrb	r3, [r3, #24]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	1cfb      	adds	r3, r7, #3
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f7ff fe43 	bl	800bd60 <SEGGER_RTT_ReadNoLock>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dd54      	ble.n	800c18e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800c0e4:	78fb      	ldrb	r3, [r7, #3]
 800c0e6:	2b80      	cmp	r3, #128	; 0x80
 800c0e8:	d032      	beq.n	800c150 <_HandleIncomingPacket+0x8c>
 800c0ea:	2b80      	cmp	r3, #128	; 0x80
 800c0ec:	dc42      	bgt.n	800c174 <_HandleIncomingPacket+0xb0>
 800c0ee:	2b07      	cmp	r3, #7
 800c0f0:	dc16      	bgt.n	800c120 <_HandleIncomingPacket+0x5c>
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	dd3e      	ble.n	800c174 <_HandleIncomingPacket+0xb0>
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	2b06      	cmp	r3, #6
 800c0fa:	d83b      	bhi.n	800c174 <_HandleIncomingPacket+0xb0>
 800c0fc:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <_HandleIncomingPacket+0x40>)
 800c0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c102:	bf00      	nop
 800c104:	0800c127 	.word	0x0800c127
 800c108:	0800c12d 	.word	0x0800c12d
 800c10c:	0800c133 	.word	0x0800c133
 800c110:	0800c139 	.word	0x0800c139
 800c114:	0800c13f 	.word	0x0800c13f
 800c118:	0800c145 	.word	0x0800c145
 800c11c:	0800c14b 	.word	0x0800c14b
 800c120:	2b7f      	cmp	r3, #127	; 0x7f
 800c122:	d036      	beq.n	800c192 <_HandleIncomingPacket+0xce>
 800c124:	e026      	b.n	800c174 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c126:	f000 fba7 	bl	800c878 <SEGGER_SYSVIEW_Start>
      break;
 800c12a:	e037      	b.n	800c19c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c12c:	f000 fc5e 	bl	800c9ec <SEGGER_SYSVIEW_Stop>
      break;
 800c130:	e034      	b.n	800c19c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c132:	f000 fe37 	bl	800cda4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c136:	e031      	b.n	800c19c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c138:	f000 fdfc 	bl	800cd34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c13c:	e02e      	b.n	800c19c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c13e:	f000 fc7b 	bl	800ca38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c142:	e02b      	b.n	800c19c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c144:	f001 f8ca 	bl	800d2dc <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c148:	e028      	b.n	800c19c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c14a:	f001 f8a9 	bl	800d2a0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c14e:	e025      	b.n	800c19c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c150:	4b14      	ldr	r3, [pc, #80]	; (800c1a4 <_HandleIncomingPacket+0xe0>)
 800c152:	7e1b      	ldrb	r3, [r3, #24]
 800c154:	4618      	mov	r0, r3
 800c156:	1cfb      	adds	r3, r7, #3
 800c158:	2201      	movs	r2, #1
 800c15a:	4619      	mov	r1, r3
 800c15c:	f7ff fe00 	bl	800bd60 <SEGGER_RTT_ReadNoLock>
 800c160:	4603      	mov	r3, r0
 800c162:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	dd15      	ble.n	800c196 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c16a:	78fb      	ldrb	r3, [r7, #3]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f001 f817 	bl	800d1a0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c172:	e010      	b.n	800c196 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c174:	78fb      	ldrb	r3, [r7, #3]
 800c176:	b25b      	sxtb	r3, r3
 800c178:	2b00      	cmp	r3, #0
 800c17a:	da0e      	bge.n	800c19a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c17c:	4b09      	ldr	r3, [pc, #36]	; (800c1a4 <_HandleIncomingPacket+0xe0>)
 800c17e:	7e1b      	ldrb	r3, [r3, #24]
 800c180:	4618      	mov	r0, r3
 800c182:	1cfb      	adds	r3, r7, #3
 800c184:	2201      	movs	r2, #1
 800c186:	4619      	mov	r1, r3
 800c188:	f7ff fdea 	bl	800bd60 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c18c:	e005      	b.n	800c19a <_HandleIncomingPacket+0xd6>
    }
  }
 800c18e:	bf00      	nop
 800c190:	e004      	b.n	800c19c <_HandleIncomingPacket+0xd8>
      break;
 800c192:	bf00      	nop
 800c194:	e002      	b.n	800c19c <_HandleIncomingPacket+0xd8>
      break;
 800c196:	bf00      	nop
 800c198:	e000      	b.n	800c19c <_HandleIncomingPacket+0xd8>
      break;
 800c19a:	bf00      	nop
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	200064d0 	.word	0x200064d0

0800c1a8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08c      	sub	sp, #48	; 0x30
 800c1ac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c1b2:	1d3b      	adds	r3, r7, #4
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1bc:	4b31      	ldr	r3, [pc, #196]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c1be:	695b      	ldr	r3, [r3, #20]
 800c1c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1c2:	e00b      	b.n	800c1dc <_TrySendOverflowPacket+0x34>
 800c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	1c59      	adds	r1, r3, #1
 800c1cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c1ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	09db      	lsrs	r3, r3, #7
 800c1da:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1de:	2b7f      	cmp	r3, #127	; 0x7f
 800c1e0:	d8f0      	bhi.n	800c1c4 <_TrySendOverflowPacket+0x1c>
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	1c5a      	adds	r2, r3, #1
 800c1e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	701a      	strb	r2, [r3, #0]
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c1f2:	4b25      	ldr	r3, [pc, #148]	; (800c288 <_TrySendOverflowPacket+0xe0>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c1f8:	4b22      	ldr	r3, [pc, #136]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	69ba      	ldr	r2, [r7, #24]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	627b      	str	r3, [r7, #36]	; 0x24
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	623b      	str	r3, [r7, #32]
 800c20a:	e00b      	b.n	800c224 <_TrySendOverflowPacket+0x7c>
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	1c59      	adds	r1, r3, #1
 800c214:	6279      	str	r1, [r7, #36]	; 0x24
 800c216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	09db      	lsrs	r3, r3, #7
 800c222:	623b      	str	r3, [r7, #32]
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	2b7f      	cmp	r3, #127	; 0x7f
 800c228:	d8f0      	bhi.n	800c20c <_TrySendOverflowPacket+0x64>
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	627a      	str	r2, [r7, #36]	; 0x24
 800c230:	6a3a      	ldr	r2, [r7, #32]
 800c232:	b2d2      	uxtb	r2, r2
 800c234:	701a      	strb	r2, [r3, #0]
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c23a:	4b12      	ldr	r3, [pc, #72]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c23c:	785b      	ldrb	r3, [r3, #1]
 800c23e:	4618      	mov	r0, r3
 800c240:	1d3b      	adds	r3, r7, #4
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	461a      	mov	r2, r3
 800c248:	1d3b      	adds	r3, r7, #4
 800c24a:	4619      	mov	r1, r3
 800c24c:	f7f3 ffd0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c250:	4603      	mov	r3, r0
 800c252:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d009      	beq.n	800c26e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c25a:	4a0a      	ldr	r2, [pc, #40]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c260:	4b08      	ldr	r3, [pc, #32]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	3b01      	subs	r3, #1
 800c266:	b2da      	uxtb	r2, r3
 800c268:	4b06      	ldr	r3, [pc, #24]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c26a:	701a      	strb	r2, [r3, #0]
 800c26c:	e004      	b.n	800c278 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c270:	695b      	ldr	r3, [r3, #20]
 800c272:	3301      	adds	r3, #1
 800c274:	4a03      	ldr	r2, [pc, #12]	; (800c284 <_TrySendOverflowPacket+0xdc>)
 800c276:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c278:	693b      	ldr	r3, [r7, #16]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3730      	adds	r7, #48	; 0x30
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	200064d0 	.word	0x200064d0
 800c288:	e0001004 	.word	0xe0001004

0800c28c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08a      	sub	sp, #40	; 0x28
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c298:	4b6c      	ldr	r3, [pc, #432]	; (800c44c <_SendPacket+0x1c0>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d010      	beq.n	800c2c2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c2a0:	4b6a      	ldr	r3, [pc, #424]	; (800c44c <_SendPacket+0x1c0>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 80a3 	beq.w	800c3f0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c2aa:	4b68      	ldr	r3, [pc, #416]	; (800c44c <_SendPacket+0x1c0>)
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d109      	bne.n	800c2c6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c2b2:	f7ff ff79 	bl	800c1a8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c2b6:	4b65      	ldr	r3, [pc, #404]	; (800c44c <_SendPacket+0x1c0>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	f040 809a 	bne.w	800c3f4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c2c0:	e001      	b.n	800c2c6 <_SendPacket+0x3a>
    goto Send;
 800c2c2:	bf00      	nop
 800c2c4:	e000      	b.n	800c2c8 <_SendPacket+0x3c>
Send:
 800c2c6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b1f      	cmp	r3, #31
 800c2cc:	d809      	bhi.n	800c2e2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c2ce:	4b5f      	ldr	r3, [pc, #380]	; (800c44c <_SendPacket+0x1c0>)
 800c2d0:	69da      	ldr	r2, [r3, #28]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f040 808b 	bne.w	800c3f8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b17      	cmp	r3, #23
 800c2e6:	d807      	bhi.n	800c2f8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	e03d      	b.n	800c374 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	2b7f      	cmp	r3, #127	; 0x7f
 800c304:	d912      	bls.n	800c32c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	09da      	lsrs	r2, r3, #7
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	60fb      	str	r3, [r7, #12]
 800c310:	b2d2      	uxtb	r2, r2
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	3a01      	subs	r2, #1
 800c31e:	60fa      	str	r2, [r7, #12]
 800c320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c324:	b2da      	uxtb	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	701a      	strb	r2, [r3, #0]
 800c32a:	e006      	b.n	800c33a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3b01      	subs	r3, #1
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	b2da      	uxtb	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b7f      	cmp	r3, #127	; 0x7f
 800c33e:	d912      	bls.n	800c366 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	09da      	lsrs	r2, r3, #7
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	3b01      	subs	r3, #1
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	3a01      	subs	r2, #1
 800c358:	60fa      	str	r2, [r7, #12]
 800c35a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	701a      	strb	r2, [r3, #0]
 800c364:	e006      	b.n	800c374 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3b01      	subs	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c374:	4b36      	ldr	r3, [pc, #216]	; (800c450 <_SendPacket+0x1c4>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c37a:	4b34      	ldr	r3, [pc, #208]	; (800c44c <_SendPacket+0x1c0>)
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	627b      	str	r3, [r7, #36]	; 0x24
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	623b      	str	r3, [r7, #32]
 800c38c:	e00b      	b.n	800c3a6 <_SendPacket+0x11a>
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	b2da      	uxtb	r2, r3
 800c392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c394:	1c59      	adds	r1, r3, #1
 800c396:	6279      	str	r1, [r7, #36]	; 0x24
 800c398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c39c:	b2d2      	uxtb	r2, r2
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	09db      	lsrs	r3, r3, #7
 800c3a4:	623b      	str	r3, [r7, #32]
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	2b7f      	cmp	r3, #127	; 0x7f
 800c3aa:	d8f0      	bhi.n	800c38e <_SendPacket+0x102>
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	627a      	str	r2, [r7, #36]	; 0x24
 800c3b2:	6a3a      	ldr	r2, [r7, #32]
 800c3b4:	b2d2      	uxtb	r2, r2
 800c3b6:	701a      	strb	r2, [r3, #0]
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c3bc:	4b23      	ldr	r3, [pc, #140]	; (800c44c <_SendPacket+0x1c0>)
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	68f9      	ldr	r1, [r7, #12]
 800c3cc:	f7f3 ff10 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c3da:	4a1c      	ldr	r2, [pc, #112]	; (800c44c <_SendPacket+0x1c0>)
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	60d3      	str	r3, [r2, #12]
 800c3e0:	e00b      	b.n	800c3fa <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c3e2:	4b1a      	ldr	r3, [pc, #104]	; (800c44c <_SendPacket+0x1c0>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	4b18      	ldr	r3, [pc, #96]	; (800c44c <_SendPacket+0x1c0>)
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	e004      	b.n	800c3fa <_SendPacket+0x16e>
    goto SendDone;
 800c3f0:	bf00      	nop
 800c3f2:	e002      	b.n	800c3fa <_SendPacket+0x16e>
      goto SendDone;
 800c3f4:	bf00      	nop
 800c3f6:	e000      	b.n	800c3fa <_SendPacket+0x16e>
      goto SendDone;
 800c3f8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c3fa:	4b14      	ldr	r3, [pc, #80]	; (800c44c <_SendPacket+0x1c0>)
 800c3fc:	7e1b      	ldrb	r3, [r3, #24]
 800c3fe:	4619      	mov	r1, r3
 800c400:	4a14      	ldr	r2, [pc, #80]	; (800c454 <_SendPacket+0x1c8>)
 800c402:	460b      	mov	r3, r1
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	440b      	add	r3, r1
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	4413      	add	r3, r2
 800c40c:	336c      	adds	r3, #108	; 0x6c
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	4b0e      	ldr	r3, [pc, #56]	; (800c44c <_SendPacket+0x1c0>)
 800c412:	7e1b      	ldrb	r3, [r3, #24]
 800c414:	4618      	mov	r0, r3
 800c416:	490f      	ldr	r1, [pc, #60]	; (800c454 <_SendPacket+0x1c8>)
 800c418:	4603      	mov	r3, r0
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	4403      	add	r3, r0
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	440b      	add	r3, r1
 800c422:	3370      	adds	r3, #112	; 0x70
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	429a      	cmp	r2, r3
 800c428:	d00b      	beq.n	800c442 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c42a:	4b08      	ldr	r3, [pc, #32]	; (800c44c <_SendPacket+0x1c0>)
 800c42c:	789b      	ldrb	r3, [r3, #2]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d107      	bne.n	800c442 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <_SendPacket+0x1c0>)
 800c434:	2201      	movs	r2, #1
 800c436:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c438:	f7ff fe44 	bl	800c0c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c43c:	4b03      	ldr	r3, [pc, #12]	; (800c44c <_SendPacket+0x1c0>)
 800c43e:	2200      	movs	r2, #0
 800c440:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c442:	bf00      	nop
 800c444:	3728      	adds	r7, #40	; 0x28
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	200064d0 	.word	0x200064d0
 800c450:	e0001004 	.word	0xe0001004
 800c454:	20005010 	.word	0x20005010

0800c458 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af02      	add	r7, sp, #8
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c466:	2300      	movs	r3, #0
 800c468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c46c:	4917      	ldr	r1, [pc, #92]	; (800c4cc <SEGGER_SYSVIEW_Init+0x74>)
 800c46e:	4818      	ldr	r0, [pc, #96]	; (800c4d0 <SEGGER_SYSVIEW_Init+0x78>)
 800c470:	f7ff fcfc 	bl	800be6c <SEGGER_RTT_AllocUpBuffer>
 800c474:	4603      	mov	r3, r0
 800c476:	b2da      	uxtb	r2, r3
 800c478:	4b16      	ldr	r3, [pc, #88]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c47a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c47c:	4b15      	ldr	r3, [pc, #84]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c47e:	785a      	ldrb	r2, [r3, #1]
 800c480:	4b14      	ldr	r3, [pc, #80]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c482:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c484:	4b13      	ldr	r3, [pc, #76]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c486:	7e1b      	ldrb	r3, [r3, #24]
 800c488:	4618      	mov	r0, r3
 800c48a:	2300      	movs	r3, #0
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	2308      	movs	r3, #8
 800c490:	4a11      	ldr	r2, [pc, #68]	; (800c4d8 <SEGGER_SYSVIEW_Init+0x80>)
 800c492:	490f      	ldr	r1, [pc, #60]	; (800c4d0 <SEGGER_SYSVIEW_Init+0x78>)
 800c494:	f7ff fd6e 	bl	800bf74 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c498:	4b0e      	ldr	r3, [pc, #56]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <SEGGER_SYSVIEW_Init+0x84>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a0c      	ldr	r2, [pc, #48]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c4a4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c4a6:	4a0b      	ldr	r2, [pc, #44]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c4ac:	4a09      	ldr	r2, [pc, #36]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c4b2:	4a08      	ldr	r2, [pc, #32]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c4b8:	4a06      	ldr	r2, [pc, #24]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c4be:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c4c4:	bf00      	nop
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	200060c8 	.word	0x200060c8
 800c4d0:	08013910 	.word	0x08013910
 800c4d4:	200064d0 	.word	0x200064d0
 800c4d8:	200064c8 	.word	0x200064c8
 800c4dc:	e0001004 	.word	0xe0001004

0800c4e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c4e8:	4a04      	ldr	r2, [pc, #16]	; (800c4fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6113      	str	r3, [r2, #16]
}
 800c4ee:	bf00      	nop
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	200064d0 	.word	0x200064d0

0800c500 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c508:	f3ef 8311 	mrs	r3, BASEPRI
 800c50c:	f04f 0120 	mov.w	r1, #32
 800c510:	f381 8811 	msr	BASEPRI, r1
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	4808      	ldr	r0, [pc, #32]	; (800c538 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c518:	f7ff fdc8 	bl	800c0ac <_PreparePacket>
 800c51c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	68b9      	ldr	r1, [r7, #8]
 800c522:	68b8      	ldr	r0, [r7, #8]
 800c524:	f7ff feb2 	bl	800c28c <_SendPacket>
  RECORD_END();
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f383 8811 	msr	BASEPRI, r3
}
 800c52e:	bf00      	nop
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20006500 	.word	0x20006500

0800c53c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c546:	f3ef 8311 	mrs	r3, BASEPRI
 800c54a:	f04f 0120 	mov.w	r1, #32
 800c54e:	f381 8811 	msr	BASEPRI, r1
 800c552:	617b      	str	r3, [r7, #20]
 800c554:	4816      	ldr	r0, [pc, #88]	; (800c5b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c556:	f7ff fda9 	bl	800c0ac <_PreparePacket>
 800c55a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	61bb      	str	r3, [r7, #24]
 800c568:	e00b      	b.n	800c582 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	1c59      	adds	r1, r3, #1
 800c572:	61f9      	str	r1, [r7, #28]
 800c574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c578:	b2d2      	uxtb	r2, r2
 800c57a:	701a      	strb	r2, [r3, #0]
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	09db      	lsrs	r3, r3, #7
 800c580:	61bb      	str	r3, [r7, #24]
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	2b7f      	cmp	r3, #127	; 0x7f
 800c586:	d8f0      	bhi.n	800c56a <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	61fa      	str	r2, [r7, #28]
 800c58e:	69ba      	ldr	r2, [r7, #24]
 800c590:	b2d2      	uxtb	r2, r2
 800c592:	701a      	strb	r2, [r3, #0]
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	68f9      	ldr	r1, [r7, #12]
 800c59c:	6938      	ldr	r0, [r7, #16]
 800c59e:	f7ff fe75 	bl	800c28c <_SendPacket>
  RECORD_END();
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f383 8811 	msr	BASEPRI, r3
}
 800c5a8:	bf00      	nop
 800c5aa:	3720      	adds	r7, #32
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20006500 	.word	0x20006500

0800c5b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08c      	sub	sp, #48	; 0x30
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c5c0:	f3ef 8311 	mrs	r3, BASEPRI
 800c5c4:	f04f 0120 	mov.w	r1, #32
 800c5c8:	f381 8811 	msr	BASEPRI, r1
 800c5cc:	61fb      	str	r3, [r7, #28]
 800c5ce:	4825      	ldr	r0, [pc, #148]	; (800c664 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c5d0:	f7ff fd6c 	bl	800c0ac <_PreparePacket>
 800c5d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5e2:	e00b      	b.n	800c5fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ea:	1c59      	adds	r1, r3, #1
 800c5ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c5ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f8:	09db      	lsrs	r3, r3, #7
 800c5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c600:	d8f0      	bhi.n	800c5e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	701a      	strb	r2, [r3, #0]
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	627b      	str	r3, [r7, #36]	; 0x24
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	623b      	str	r3, [r7, #32]
 800c61a:	e00b      	b.n	800c634 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	1c59      	adds	r1, r3, #1
 800c624:	6279      	str	r1, [r7, #36]	; 0x24
 800c626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c62a:	b2d2      	uxtb	r2, r2
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	09db      	lsrs	r3, r3, #7
 800c632:	623b      	str	r3, [r7, #32]
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	2b7f      	cmp	r3, #127	; 0x7f
 800c638:	d8f0      	bhi.n	800c61c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	627a      	str	r2, [r7, #36]	; 0x24
 800c640:	6a3a      	ldr	r2, [r7, #32]
 800c642:	b2d2      	uxtb	r2, r2
 800c644:	701a      	strb	r2, [r3, #0]
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c648:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	6979      	ldr	r1, [r7, #20]
 800c64e:	69b8      	ldr	r0, [r7, #24]
 800c650:	f7ff fe1c 	bl	800c28c <_SendPacket>
  RECORD_END();
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	f383 8811 	msr	BASEPRI, r3
}
 800c65a:	bf00      	nop
 800c65c:	3730      	adds	r7, #48	; 0x30
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20006500 	.word	0x20006500

0800c668 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08e      	sub	sp, #56	; 0x38
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c676:	f3ef 8311 	mrs	r3, BASEPRI
 800c67a:	f04f 0120 	mov.w	r1, #32
 800c67e:	f381 8811 	msr	BASEPRI, r1
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	4832      	ldr	r0, [pc, #200]	; (800c750 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c686:	f7ff fd11 	bl	800c0ac <_PreparePacket>
 800c68a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	637b      	str	r3, [r7, #52]	; 0x34
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	633b      	str	r3, [r7, #48]	; 0x30
 800c698:	e00b      	b.n	800c6b2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a0:	1c59      	adds	r1, r3, #1
 800c6a2:	6379      	str	r1, [r7, #52]	; 0x34
 800c6a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6a8:	b2d2      	uxtb	r2, r2
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	09db      	lsrs	r3, r3, #7
 800c6b0:	633b      	str	r3, [r7, #48]	; 0x30
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	2b7f      	cmp	r3, #127	; 0x7f
 800c6b6:	d8f0      	bhi.n	800c69a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	637a      	str	r2, [r7, #52]	; 0x34
 800c6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6d0:	e00b      	b.n	800c6ea <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d8:	1c59      	adds	r1, r3, #1
 800c6da:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c6dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6e0:	b2d2      	uxtb	r2, r2
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	09db      	lsrs	r3, r3, #7
 800c6e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c6ee:	d8f0      	bhi.n	800c6d2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6f8:	b2d2      	uxtb	r2, r2
 800c6fa:	701a      	strb	r2, [r3, #0]
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	627b      	str	r3, [r7, #36]	; 0x24
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	623b      	str	r3, [r7, #32]
 800c708:	e00b      	b.n	800c722 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	1c59      	adds	r1, r3, #1
 800c712:	6279      	str	r1, [r7, #36]	; 0x24
 800c714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c718:	b2d2      	uxtb	r2, r2
 800c71a:	701a      	strb	r2, [r3, #0]
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	09db      	lsrs	r3, r3, #7
 800c720:	623b      	str	r3, [r7, #32]
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	2b7f      	cmp	r3, #127	; 0x7f
 800c726:	d8f0      	bhi.n	800c70a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	627a      	str	r2, [r7, #36]	; 0x24
 800c72e:	6a3a      	ldr	r2, [r7, #32]
 800c730:	b2d2      	uxtb	r2, r2
 800c732:	701a      	strb	r2, [r3, #0]
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	6979      	ldr	r1, [r7, #20]
 800c73c:	69b8      	ldr	r0, [r7, #24]
 800c73e:	f7ff fda5 	bl	800c28c <_SendPacket>
  RECORD_END();
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	f383 8811 	msr	BASEPRI, r3
}
 800c748:	bf00      	nop
 800c74a:	3738      	adds	r7, #56	; 0x38
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20006500 	.word	0x20006500

0800c754 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c754:	b580      	push	{r7, lr}
 800c756:	b090      	sub	sp, #64	; 0x40
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
 800c760:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c762:	f3ef 8311 	mrs	r3, BASEPRI
 800c766:	f04f 0120 	mov.w	r1, #32
 800c76a:	f381 8811 	msr	BASEPRI, r1
 800c76e:	61fb      	str	r3, [r7, #28]
 800c770:	4840      	ldr	r0, [pc, #256]	; (800c874 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c772:	f7ff fc9b 	bl	800c0ac <_PreparePacket>
 800c776:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	63bb      	str	r3, [r7, #56]	; 0x38
 800c784:	e00b      	b.n	800c79e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78c:	1c59      	adds	r1, r3, #1
 800c78e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c790:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	09db      	lsrs	r3, r3, #7
 800c79c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	2b7f      	cmp	r3, #127	; 0x7f
 800c7a2:	d8f0      	bhi.n	800c786 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c7aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ac:	b2d2      	uxtb	r2, r2
 800c7ae:	701a      	strb	r2, [r3, #0]
 800c7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	633b      	str	r3, [r7, #48]	; 0x30
 800c7bc:	e00b      	b.n	800c7d6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c4:	1c59      	adds	r1, r3, #1
 800c7c6:	6379      	str	r1, [r7, #52]	; 0x34
 800c7c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	09db      	lsrs	r3, r3, #7
 800c7d4:	633b      	str	r3, [r7, #48]	; 0x30
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c7da:	d8f0      	bhi.n	800c7be <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	637a      	str	r2, [r7, #52]	; 0x34
 800c7e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7f4:	e00b      	b.n	800c80e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	1c59      	adds	r1, r3, #1
 800c7fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c804:	b2d2      	uxtb	r2, r2
 800c806:	701a      	strb	r2, [r3, #0]
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	09db      	lsrs	r3, r3, #7
 800c80c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	2b7f      	cmp	r3, #127	; 0x7f
 800c812:	d8f0      	bhi.n	800c7f6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c81c:	b2d2      	uxtb	r2, r2
 800c81e:	701a      	strb	r2, [r3, #0]
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	627b      	str	r3, [r7, #36]	; 0x24
 800c828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c82a:	623b      	str	r3, [r7, #32]
 800c82c:	e00b      	b.n	800c846 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	b2da      	uxtb	r2, r3
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	1c59      	adds	r1, r3, #1
 800c836:	6279      	str	r1, [r7, #36]	; 0x24
 800c838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c83c:	b2d2      	uxtb	r2, r2
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	09db      	lsrs	r3, r3, #7
 800c844:	623b      	str	r3, [r7, #32]
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	2b7f      	cmp	r3, #127	; 0x7f
 800c84a:	d8f0      	bhi.n	800c82e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	627a      	str	r2, [r7, #36]	; 0x24
 800c852:	6a3a      	ldr	r2, [r7, #32]
 800c854:	b2d2      	uxtb	r2, r2
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	6979      	ldr	r1, [r7, #20]
 800c860:	69b8      	ldr	r0, [r7, #24]
 800c862:	f7ff fd13 	bl	800c28c <_SendPacket>
  RECORD_END();
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	f383 8811 	msr	BASEPRI, r3
}
 800c86c:	bf00      	nop
 800c86e:	3740      	adds	r7, #64	; 0x40
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	20006500 	.word	0x20006500

0800c878 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08c      	sub	sp, #48	; 0x30
 800c87c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c87e:	4b58      	ldr	r3, [pc, #352]	; (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c880:	2201      	movs	r2, #1
 800c882:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c884:	f3ef 8311 	mrs	r3, BASEPRI
 800c888:	f04f 0120 	mov.w	r1, #32
 800c88c:	f381 8811 	msr	BASEPRI, r1
 800c890:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c892:	4b53      	ldr	r3, [pc, #332]	; (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c894:	785b      	ldrb	r3, [r3, #1]
 800c896:	220a      	movs	r2, #10
 800c898:	4952      	ldr	r1, [pc, #328]	; (800c9e4 <SEGGER_SYSVIEW_Start+0x16c>)
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f3 fca8 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c8a6:	200a      	movs	r0, #10
 800c8a8:	f7ff fe2a 	bl	800c500 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c8ac:	f3ef 8311 	mrs	r3, BASEPRI
 800c8b0:	f04f 0120 	mov.w	r1, #32
 800c8b4:	f381 8811 	msr	BASEPRI, r1
 800c8b8:	60bb      	str	r3, [r7, #8]
 800c8ba:	484b      	ldr	r0, [pc, #300]	; (800c9e8 <SEGGER_SYSVIEW_Start+0x170>)
 800c8bc:	f7ff fbf6 	bl	800c0ac <_PreparePacket>
 800c8c0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8ca:	4b45      	ldr	r3, [pc, #276]	; (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8d0:	e00b      	b.n	800c8ea <SEGGER_SYSVIEW_Start+0x72>
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	1c59      	adds	r1, r3, #1
 800c8da:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c8dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8e0:	b2d2      	uxtb	r2, r2
 800c8e2:	701a      	strb	r2, [r3, #0]
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	09db      	lsrs	r3, r3, #7
 800c8e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c8ee:	d8f0      	bhi.n	800c8d2 <SEGGER_SYSVIEW_Start+0x5a>
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	627b      	str	r3, [r7, #36]	; 0x24
 800c904:	4b36      	ldr	r3, [pc, #216]	; (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	623b      	str	r3, [r7, #32]
 800c90a:	e00b      	b.n	800c924 <SEGGER_SYSVIEW_Start+0xac>
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	1c59      	adds	r1, r3, #1
 800c914:	6279      	str	r1, [r7, #36]	; 0x24
 800c916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	701a      	strb	r2, [r3, #0]
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	09db      	lsrs	r3, r3, #7
 800c922:	623b      	str	r3, [r7, #32]
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	2b7f      	cmp	r3, #127	; 0x7f
 800c928:	d8f0      	bhi.n	800c90c <SEGGER_SYSVIEW_Start+0x94>
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	627a      	str	r2, [r7, #36]	; 0x24
 800c930:	6a3a      	ldr	r2, [r7, #32]
 800c932:	b2d2      	uxtb	r2, r2
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	61fb      	str	r3, [r7, #28]
 800c93e:	4b28      	ldr	r3, [pc, #160]	; (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	61bb      	str	r3, [r7, #24]
 800c944:	e00b      	b.n	800c95e <SEGGER_SYSVIEW_Start+0xe6>
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	1c59      	adds	r1, r3, #1
 800c94e:	61f9      	str	r1, [r7, #28]
 800c950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c954:	b2d2      	uxtb	r2, r2
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	09db      	lsrs	r3, r3, #7
 800c95c:	61bb      	str	r3, [r7, #24]
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	2b7f      	cmp	r3, #127	; 0x7f
 800c962:	d8f0      	bhi.n	800c946 <SEGGER_SYSVIEW_Start+0xce>
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	61fa      	str	r2, [r7, #28]
 800c96a:	69ba      	ldr	r2, [r7, #24]
 800c96c:	b2d2      	uxtb	r2, r2
 800c96e:	701a      	strb	r2, [r3, #0]
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	617b      	str	r3, [r7, #20]
 800c978:	2300      	movs	r3, #0
 800c97a:	613b      	str	r3, [r7, #16]
 800c97c:	e00b      	b.n	800c996 <SEGGER_SYSVIEW_Start+0x11e>
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	b2da      	uxtb	r2, r3
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	1c59      	adds	r1, r3, #1
 800c986:	6179      	str	r1, [r7, #20]
 800c988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c98c:	b2d2      	uxtb	r2, r2
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	09db      	lsrs	r3, r3, #7
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2b7f      	cmp	r3, #127	; 0x7f
 800c99a:	d8f0      	bhi.n	800c97e <SEGGER_SYSVIEW_Start+0x106>
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	1c5a      	adds	r2, r3, #1
 800c9a0:	617a      	str	r2, [r7, #20]
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	b2d2      	uxtb	r2, r2
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c9ac:	2218      	movs	r2, #24
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fc6b 	bl	800c28c <_SendPacket>
      RECORD_END();
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c9bc:	4b08      	ldr	r3, [pc, #32]	; (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c9c4:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c9ca:	f000 f9eb 	bl	800cda4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c9ce:	f000 f9b1 	bl	800cd34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c9d2:	f000 fc83 	bl	800d2dc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c9d6:	bf00      	nop
 800c9d8:	3730      	adds	r7, #48	; 0x30
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	200064d0 	.word	0x200064d0
 800c9e4:	0801417c 	.word	0x0801417c
 800c9e8:	20006500 	.word	0x20006500

0800c9ec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c9f2:	f3ef 8311 	mrs	r3, BASEPRI
 800c9f6:	f04f 0120 	mov.w	r1, #32
 800c9fa:	f381 8811 	msr	BASEPRI, r1
 800c9fe:	607b      	str	r3, [r7, #4]
 800ca00:	480b      	ldr	r0, [pc, #44]	; (800ca30 <SEGGER_SYSVIEW_Stop+0x44>)
 800ca02:	f7ff fb53 	bl	800c0ac <_PreparePacket>
 800ca06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800ca08:	4b0a      	ldr	r3, [pc, #40]	; (800ca34 <SEGGER_SYSVIEW_Stop+0x48>)
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800ca10:	220b      	movs	r2, #11
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6838      	ldr	r0, [r7, #0]
 800ca16:	f7ff fc39 	bl	800c28c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800ca1a:	4b06      	ldr	r3, [pc, #24]	; (800ca34 <SEGGER_SYSVIEW_Stop+0x48>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f383 8811 	msr	BASEPRI, r3
}
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	20006500 	.word	0x20006500
 800ca34:	200064d0 	.word	0x200064d0

0800ca38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08c      	sub	sp, #48	; 0x30
 800ca3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ca3e:	f3ef 8311 	mrs	r3, BASEPRI
 800ca42:	f04f 0120 	mov.w	r1, #32
 800ca46:	f381 8811 	msr	BASEPRI, r1
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	4845      	ldr	r0, [pc, #276]	; (800cb64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800ca4e:	f7ff fb2d 	bl	800c0ac <_PreparePacket>
 800ca52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca5c:	4b42      	ldr	r3, [pc, #264]	; (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca62:	e00b      	b.n	800ca7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	1c59      	adds	r1, r3, #1
 800ca6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ca6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca78:	09db      	lsrs	r3, r3, #7
 800ca7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	2b7f      	cmp	r3, #127	; 0x7f
 800ca80:	d8f0      	bhi.n	800ca64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
 800ca96:	4b34      	ldr	r3, [pc, #208]	; (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	623b      	str	r3, [r7, #32]
 800ca9c:	e00b      	b.n	800cab6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa4:	1c59      	adds	r1, r3, #1
 800caa6:	6279      	str	r1, [r7, #36]	; 0x24
 800caa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	09db      	lsrs	r3, r3, #7
 800cab4:	623b      	str	r3, [r7, #32]
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	2b7f      	cmp	r3, #127	; 0x7f
 800caba:	d8f0      	bhi.n	800ca9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	627a      	str	r2, [r7, #36]	; 0x24
 800cac2:	6a3a      	ldr	r2, [r7, #32]
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	61fb      	str	r3, [r7, #28]
 800cad0:	4b25      	ldr	r3, [pc, #148]	; (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	61bb      	str	r3, [r7, #24]
 800cad6:	e00b      	b.n	800caf0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	1c59      	adds	r1, r3, #1
 800cae0:	61f9      	str	r1, [r7, #28]
 800cae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cae6:	b2d2      	uxtb	r2, r2
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	09db      	lsrs	r3, r3, #7
 800caee:	61bb      	str	r3, [r7, #24]
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	2b7f      	cmp	r3, #127	; 0x7f
 800caf4:	d8f0      	bhi.n	800cad8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	61fa      	str	r2, [r7, #28]
 800cafc:	69ba      	ldr	r2, [r7, #24]
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	613b      	str	r3, [r7, #16]
 800cb0e:	e00b      	b.n	800cb28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	1c59      	adds	r1, r3, #1
 800cb18:	6179      	str	r1, [r7, #20]
 800cb1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	09db      	lsrs	r3, r3, #7
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	2b7f      	cmp	r3, #127	; 0x7f
 800cb2c:	d8f0      	bhi.n	800cb10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	617a      	str	r2, [r7, #20]
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cb3e:	2218      	movs	r2, #24
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	68b8      	ldr	r0, [r7, #8]
 800cb44:	f7ff fba2 	bl	800c28c <_SendPacket>
  RECORD_END();
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cb4e:	4b06      	ldr	r3, [pc, #24]	; (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d002      	beq.n	800cb5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800cb56:	4b04      	ldr	r3, [pc, #16]	; (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5a:	4798      	blx	r3
  }
}
 800cb5c:	bf00      	nop
 800cb5e:	3730      	adds	r7, #48	; 0x30
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20006500 	.word	0x20006500
 800cb68:	200064d0 	.word	0x200064d0

0800cb6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b092      	sub	sp, #72	; 0x48
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800cb74:	f3ef 8311 	mrs	r3, BASEPRI
 800cb78:	f04f 0120 	mov.w	r1, #32
 800cb7c:	f381 8811 	msr	BASEPRI, r1
 800cb80:	617b      	str	r3, [r7, #20]
 800cb82:	486a      	ldr	r0, [pc, #424]	; (800cd2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800cb84:	f7ff fa92 	bl	800c0ac <_PreparePacket>
 800cb88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	647b      	str	r3, [r7, #68]	; 0x44
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	4b66      	ldr	r3, [pc, #408]	; (800cd30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	643b      	str	r3, [r7, #64]	; 0x40
 800cb9e:	e00b      	b.n	800cbb8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800cba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba6:	1c59      	adds	r1, r3, #1
 800cba8:	6479      	str	r1, [r7, #68]	; 0x44
 800cbaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbae:	b2d2      	uxtb	r2, r2
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb4:	09db      	lsrs	r3, r3, #7
 800cbb6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbba:	2b7f      	cmp	r3, #127	; 0x7f
 800cbbc:	d8f0      	bhi.n	800cba0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800cbbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	647a      	str	r2, [r7, #68]	; 0x44
 800cbc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbc6:	b2d2      	uxtb	r2, r2
 800cbc8:	701a      	strb	r2, [r3, #0]
 800cbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbd8:	e00b      	b.n	800cbf2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe0:	1c59      	adds	r1, r3, #1
 800cbe2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800cbe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	09db      	lsrs	r3, r3, #7
 800cbf0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	2b7f      	cmp	r3, #127	; 0x7f
 800cbf6:	d8f0      	bhi.n	800cbda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800cbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cbfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc00:	b2d2      	uxtb	r2, r2
 800cc02:	701a      	strb	r2, [r3, #0]
 800cc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	4619      	mov	r1, r3
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff f9fb 	bl	800c00c <_EncodeStr>
 800cc16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800cc18:	2209      	movs	r2, #9
 800cc1a:	68f9      	ldr	r1, [r7, #12]
 800cc1c:	6938      	ldr	r0, [r7, #16]
 800cc1e:	f7ff fb35 	bl	800c28c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	637b      	str	r3, [r7, #52]	; 0x34
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	4b40      	ldr	r3, [pc, #256]	; (800cd30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	633b      	str	r3, [r7, #48]	; 0x30
 800cc36:	e00b      	b.n	800cc50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	1c59      	adds	r1, r3, #1
 800cc40:	6379      	str	r1, [r7, #52]	; 0x34
 800cc42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4c:	09db      	lsrs	r3, r3, #7
 800cc4e:	633b      	str	r3, [r7, #48]	; 0x30
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	2b7f      	cmp	r3, #127	; 0x7f
 800cc54:	d8f0      	bhi.n	800cc38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800cc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	637a      	str	r2, [r7, #52]	; 0x34
 800cc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc70:	e00b      	b.n	800cc8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	1c59      	adds	r1, r3, #1
 800cc7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cc7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc80:	b2d2      	uxtb	r2, r2
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	09db      	lsrs	r3, r3, #7
 800cc88:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc8e:	d8f0      	bhi.n	800cc72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800cc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc98:	b2d2      	uxtb	r2, r2
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	627b      	str	r3, [r7, #36]	; 0x24
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	623b      	str	r3, [r7, #32]
 800ccaa:	e00b      	b.n	800ccc4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	1c59      	adds	r1, r3, #1
 800ccb4:	6279      	str	r1, [r7, #36]	; 0x24
 800ccb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccba:	b2d2      	uxtb	r2, r2
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	09db      	lsrs	r3, r3, #7
 800ccc2:	623b      	str	r3, [r7, #32]
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	2b7f      	cmp	r3, #127	; 0x7f
 800ccc8:	d8f0      	bhi.n	800ccac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	627a      	str	r2, [r7, #36]	; 0x24
 800ccd0:	6a3a      	ldr	r2, [r7, #32]
 800ccd2:	b2d2      	uxtb	r2, r2
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	61fb      	str	r3, [r7, #28]
 800ccde:	2300      	movs	r3, #0
 800cce0:	61bb      	str	r3, [r7, #24]
 800cce2:	e00b      	b.n	800ccfc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	1c59      	adds	r1, r3, #1
 800ccec:	61f9      	str	r1, [r7, #28]
 800ccee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	701a      	strb	r2, [r3, #0]
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	09db      	lsrs	r3, r3, #7
 800ccfa:	61bb      	str	r3, [r7, #24]
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	2b7f      	cmp	r3, #127	; 0x7f
 800cd00:	d8f0      	bhi.n	800cce4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	61fa      	str	r2, [r7, #28]
 800cd08:	69ba      	ldr	r2, [r7, #24]
 800cd0a:	b2d2      	uxtb	r2, r2
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800cd12:	2215      	movs	r2, #21
 800cd14:	68f9      	ldr	r1, [r7, #12]
 800cd16:	6938      	ldr	r0, [r7, #16]
 800cd18:	f7ff fab8 	bl	800c28c <_SendPacket>
  RECORD_END();
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f383 8811 	msr	BASEPRI, r3
}
 800cd22:	bf00      	nop
 800cd24:	3748      	adds	r7, #72	; 0x48
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20006500 	.word	0x20006500
 800cd30:	200064d0 	.word	0x200064d0

0800cd34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800cd38:	4b07      	ldr	r3, [pc, #28]	; (800cd58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd3a:	6a1b      	ldr	r3, [r3, #32]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d008      	beq.n	800cd52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800cd40:	4b05      	ldr	r3, [pc, #20]	; (800cd58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d003      	beq.n	800cd52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800cd4a:	4b03      	ldr	r3, [pc, #12]	; (800cd58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	4798      	blx	r3
  }
}
 800cd52:	bf00      	nop
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	200064d0 	.word	0x200064d0

0800cd5c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cd64:	f3ef 8311 	mrs	r3, BASEPRI
 800cd68:	f04f 0120 	mov.w	r1, #32
 800cd6c:	f381 8811 	msr	BASEPRI, r1
 800cd70:	617b      	str	r3, [r7, #20]
 800cd72:	480b      	ldr	r0, [pc, #44]	; (800cda0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800cd74:	f7ff f99a 	bl	800c0ac <_PreparePacket>
 800cd78:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cd7a:	2280      	movs	r2, #128	; 0x80
 800cd7c:	6879      	ldr	r1, [r7, #4]
 800cd7e:	6938      	ldr	r0, [r7, #16]
 800cd80:	f7ff f944 	bl	800c00c <_EncodeStr>
 800cd84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800cd86:	220e      	movs	r2, #14
 800cd88:	68f9      	ldr	r1, [r7, #12]
 800cd8a:	6938      	ldr	r0, [r7, #16]
 800cd8c:	f7ff fa7e 	bl	800c28c <_SendPacket>
  RECORD_END();
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	f383 8811 	msr	BASEPRI, r3
}
 800cd96:	bf00      	nop
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20006500 	.word	0x20006500

0800cda4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800cdaa:	4b15      	ldr	r3, [pc, #84]	; (800ce00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d01a      	beq.n	800cde8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800cdb2:	4b13      	ldr	r3, [pc, #76]	; (800ce00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d015      	beq.n	800cde8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800cdbc:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4798      	blx	r3
 800cdc4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cdc8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800cdca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdce:	f04f 0200 	mov.w	r2, #0
 800cdd2:	f04f 0300 	mov.w	r3, #0
 800cdd6:	000a      	movs	r2, r1
 800cdd8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cdda:	4613      	mov	r3, r2
 800cddc:	461a      	mov	r2, r3
 800cdde:	4621      	mov	r1, r4
 800cde0:	200d      	movs	r0, #13
 800cde2:	f7ff fbe7 	bl	800c5b4 <SEGGER_SYSVIEW_RecordU32x2>
 800cde6:	e006      	b.n	800cdf6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800cde8:	4b06      	ldr	r3, [pc, #24]	; (800ce04 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4619      	mov	r1, r3
 800cdee:	200c      	movs	r0, #12
 800cdf0:	f7ff fba4 	bl	800c53c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd90      	pop	{r4, r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	200064d0 	.word	0x200064d0
 800ce04:	e0001004 	.word	0xe0001004

0800ce08 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ce0e:	f3ef 8311 	mrs	r3, BASEPRI
 800ce12:	f04f 0120 	mov.w	r1, #32
 800ce16:	f381 8811 	msr	BASEPRI, r1
 800ce1a:	60fb      	str	r3, [r7, #12]
 800ce1c:	4819      	ldr	r0, [pc, #100]	; (800ce84 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800ce1e:	f7ff f945 	bl	800c0ac <_PreparePacket>
 800ce22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800ce28:	4b17      	ldr	r3, [pc, #92]	; (800ce88 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce30:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	617b      	str	r3, [r7, #20]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	613b      	str	r3, [r7, #16]
 800ce3a:	e00b      	b.n	800ce54 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	1c59      	adds	r1, r3, #1
 800ce44:	6179      	str	r1, [r7, #20]
 800ce46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce4a:	b2d2      	uxtb	r2, r2
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	09db      	lsrs	r3, r3, #7
 800ce52:	613b      	str	r3, [r7, #16]
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	2b7f      	cmp	r3, #127	; 0x7f
 800ce58:	d8f0      	bhi.n	800ce3c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	617a      	str	r2, [r7, #20]
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	b2d2      	uxtb	r2, r2
 800ce64:	701a      	strb	r2, [r3, #0]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	68b8      	ldr	r0, [r7, #8]
 800ce70:	f7ff fa0c 	bl	800c28c <_SendPacket>
  RECORD_END();
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f383 8811 	msr	BASEPRI, r3
}
 800ce7a:	bf00      	nop
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	20006500 	.word	0x20006500
 800ce88:	e000ed04 	.word	0xe000ed04

0800ce8c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ce92:	f3ef 8311 	mrs	r3, BASEPRI
 800ce96:	f04f 0120 	mov.w	r1, #32
 800ce9a:	f381 8811 	msr	BASEPRI, r1
 800ce9e:	607b      	str	r3, [r7, #4]
 800cea0:	4807      	ldr	r0, [pc, #28]	; (800cec0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800cea2:	f7ff f903 	bl	800c0ac <_PreparePacket>
 800cea6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800cea8:	2203      	movs	r2, #3
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	6838      	ldr	r0, [r7, #0]
 800ceae:	f7ff f9ed 	bl	800c28c <_SendPacket>
  RECORD_END();
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f383 8811 	msr	BASEPRI, r3
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	20006500 	.word	0x20006500

0800cec4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ceca:	f3ef 8311 	mrs	r3, BASEPRI
 800cece:	f04f 0120 	mov.w	r1, #32
 800ced2:	f381 8811 	msr	BASEPRI, r1
 800ced6:	607b      	str	r3, [r7, #4]
 800ced8:	4807      	ldr	r0, [pc, #28]	; (800cef8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800ceda:	f7ff f8e7 	bl	800c0ac <_PreparePacket>
 800cede:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800cee0:	2212      	movs	r2, #18
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6838      	ldr	r0, [r7, #0]
 800cee6:	f7ff f9d1 	bl	800c28c <_SendPacket>
  RECORD_END();
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f383 8811 	msr	BASEPRI, r3
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	20006500 	.word	0x20006500

0800cefc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cf02:	f3ef 8311 	mrs	r3, BASEPRI
 800cf06:	f04f 0120 	mov.w	r1, #32
 800cf0a:	f381 8811 	msr	BASEPRI, r1
 800cf0e:	607b      	str	r3, [r7, #4]
 800cf10:	4807      	ldr	r0, [pc, #28]	; (800cf30 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800cf12:	f7ff f8cb 	bl	800c0ac <_PreparePacket>
 800cf16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800cf18:	2211      	movs	r2, #17
 800cf1a:	6839      	ldr	r1, [r7, #0]
 800cf1c:	6838      	ldr	r0, [r7, #0]
 800cf1e:	f7ff f9b5 	bl	800c28c <_SendPacket>
  RECORD_END();
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f383 8811 	msr	BASEPRI, r3
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20006500 	.word	0x20006500

0800cf34 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cf3c:	f3ef 8311 	mrs	r3, BASEPRI
 800cf40:	f04f 0120 	mov.w	r1, #32
 800cf44:	f381 8811 	msr	BASEPRI, r1
 800cf48:	617b      	str	r3, [r7, #20]
 800cf4a:	4819      	ldr	r0, [pc, #100]	; (800cfb0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800cf4c:	f7ff f8ae 	bl	800c0ac <_PreparePacket>
 800cf50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cf56:	4b17      	ldr	r3, [pc, #92]	; (800cfb4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	61fb      	str	r3, [r7, #28]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	61bb      	str	r3, [r7, #24]
 800cf68:	e00b      	b.n	800cf82 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	1c59      	adds	r1, r3, #1
 800cf72:	61f9      	str	r1, [r7, #28]
 800cf74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf78:	b2d2      	uxtb	r2, r2
 800cf7a:	701a      	strb	r2, [r3, #0]
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	09db      	lsrs	r3, r3, #7
 800cf80:	61bb      	str	r3, [r7, #24]
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	2b7f      	cmp	r3, #127	; 0x7f
 800cf86:	d8f0      	bhi.n	800cf6a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	61fa      	str	r2, [r7, #28]
 800cf8e:	69ba      	ldr	r2, [r7, #24]
 800cf90:	b2d2      	uxtb	r2, r2
 800cf92:	701a      	strb	r2, [r3, #0]
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800cf98:	2208      	movs	r2, #8
 800cf9a:	68f9      	ldr	r1, [r7, #12]
 800cf9c:	6938      	ldr	r0, [r7, #16]
 800cf9e:	f7ff f975 	bl	800c28c <_SendPacket>
  RECORD_END();
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f383 8811 	msr	BASEPRI, r3
}
 800cfa8:	bf00      	nop
 800cfaa:	3720      	adds	r7, #32
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	20006500 	.word	0x20006500
 800cfb4:	200064d0 	.word	0x200064d0

0800cfb8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cfc0:	f3ef 8311 	mrs	r3, BASEPRI
 800cfc4:	f04f 0120 	mov.w	r1, #32
 800cfc8:	f381 8811 	msr	BASEPRI, r1
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	4819      	ldr	r0, [pc, #100]	; (800d034 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800cfd0:	f7ff f86c 	bl	800c0ac <_PreparePacket>
 800cfd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cfda:	4b17      	ldr	r3, [pc, #92]	; (800d038 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	61fb      	str	r3, [r7, #28]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	61bb      	str	r3, [r7, #24]
 800cfec:	e00b      	b.n	800d006 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	1c59      	adds	r1, r3, #1
 800cff6:	61f9      	str	r1, [r7, #28]
 800cff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cffc:	b2d2      	uxtb	r2, r2
 800cffe:	701a      	strb	r2, [r3, #0]
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	09db      	lsrs	r3, r3, #7
 800d004:	61bb      	str	r3, [r7, #24]
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	2b7f      	cmp	r3, #127	; 0x7f
 800d00a:	d8f0      	bhi.n	800cfee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	61fa      	str	r2, [r7, #28]
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	b2d2      	uxtb	r2, r2
 800d016:	701a      	strb	r2, [r3, #0]
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d01c:	2204      	movs	r2, #4
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	6938      	ldr	r0, [r7, #16]
 800d022:	f7ff f933 	bl	800c28c <_SendPacket>
  RECORD_END();
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f383 8811 	msr	BASEPRI, r3
}
 800d02c:	bf00      	nop
 800d02e:	3720      	adds	r7, #32
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	20006500 	.word	0x20006500
 800d038:	200064d0 	.word	0x200064d0

0800d03c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d044:	f3ef 8311 	mrs	r3, BASEPRI
 800d048:	f04f 0120 	mov.w	r1, #32
 800d04c:	f381 8811 	msr	BASEPRI, r1
 800d050:	617b      	str	r3, [r7, #20]
 800d052:	4819      	ldr	r0, [pc, #100]	; (800d0b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d054:	f7ff f82a 	bl	800c0ac <_PreparePacket>
 800d058:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d05e:	4b17      	ldr	r3, [pc, #92]	; (800d0bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	61fb      	str	r3, [r7, #28]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	61bb      	str	r3, [r7, #24]
 800d070:	e00b      	b.n	800d08a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	b2da      	uxtb	r2, r3
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	1c59      	adds	r1, r3, #1
 800d07a:	61f9      	str	r1, [r7, #28]
 800d07c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d080:	b2d2      	uxtb	r2, r2
 800d082:	701a      	strb	r2, [r3, #0]
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	09db      	lsrs	r3, r3, #7
 800d088:	61bb      	str	r3, [r7, #24]
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	2b7f      	cmp	r3, #127	; 0x7f
 800d08e:	d8f0      	bhi.n	800d072 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	61fa      	str	r2, [r7, #28]
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	b2d2      	uxtb	r2, r2
 800d09a:	701a      	strb	r2, [r3, #0]
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d0a0:	2206      	movs	r2, #6
 800d0a2:	68f9      	ldr	r1, [r7, #12]
 800d0a4:	6938      	ldr	r0, [r7, #16]
 800d0a6:	f7ff f8f1 	bl	800c28c <_SendPacket>
  RECORD_END();
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	f383 8811 	msr	BASEPRI, r3
}
 800d0b0:	bf00      	nop
 800d0b2:	3720      	adds	r7, #32
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	20006500 	.word	0x20006500
 800d0bc:	200064d0 	.word	0x200064d0

0800d0c0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	; 0x28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d0ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ce:	f04f 0120 	mov.w	r1, #32
 800d0d2:	f381 8811 	msr	BASEPRI, r1
 800d0d6:	617b      	str	r3, [r7, #20]
 800d0d8:	4827      	ldr	r0, [pc, #156]	; (800d178 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d0da:	f7fe ffe7 	bl	800c0ac <_PreparePacket>
 800d0de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d0e4:	4b25      	ldr	r3, [pc, #148]	; (800d17c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	623b      	str	r3, [r7, #32]
 800d0f6:	e00b      	b.n	800d110 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	1c59      	adds	r1, r3, #1
 800d100:	6279      	str	r1, [r7, #36]	; 0x24
 800d102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d106:	b2d2      	uxtb	r2, r2
 800d108:	701a      	strb	r2, [r3, #0]
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	09db      	lsrs	r3, r3, #7
 800d10e:	623b      	str	r3, [r7, #32]
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	2b7f      	cmp	r3, #127	; 0x7f
 800d114:	d8f0      	bhi.n	800d0f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	627a      	str	r2, [r7, #36]	; 0x24
 800d11c:	6a3a      	ldr	r2, [r7, #32]
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	61fb      	str	r3, [r7, #28]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	61bb      	str	r3, [r7, #24]
 800d12e:	e00b      	b.n	800d148 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	b2da      	uxtb	r2, r3
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	1c59      	adds	r1, r3, #1
 800d138:	61f9      	str	r1, [r7, #28]
 800d13a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	09db      	lsrs	r3, r3, #7
 800d146:	61bb      	str	r3, [r7, #24]
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	2b7f      	cmp	r3, #127	; 0x7f
 800d14c:	d8f0      	bhi.n	800d130 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	61fa      	str	r2, [r7, #28]
 800d154:	69ba      	ldr	r2, [r7, #24]
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d15e:	2207      	movs	r2, #7
 800d160:	68f9      	ldr	r1, [r7, #12]
 800d162:	6938      	ldr	r0, [r7, #16]
 800d164:	f7ff f892 	bl	800c28c <_SendPacket>
  RECORD_END();
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	f383 8811 	msr	BASEPRI, r3
}
 800d16e:	bf00      	nop
 800d170:	3728      	adds	r7, #40	; 0x28
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20006500 	.word	0x20006500
 800d17c:	200064d0 	.word	0x200064d0

0800d180 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d188:	4b04      	ldr	r3, [pc, #16]	; (800d19c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	1ad3      	subs	r3, r2, r3
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	200064d0 	.word	0x200064d0

0800d1a0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08c      	sub	sp, #48	; 0x30
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d1aa:	4b3b      	ldr	r3, [pc, #236]	; (800d298 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d06d      	beq.n	800d28e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d1b2:	4b39      	ldr	r3, [pc, #228]	; (800d298 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1bc:	e008      	b.n	800d1d0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d007      	beq.n	800d1da <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d3f2      	bcc.n	800d1be <SEGGER_SYSVIEW_SendModule+0x1e>
 800d1d8:	e000      	b.n	800d1dc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d1da:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d055      	beq.n	800d28e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d1e2:	f3ef 8311 	mrs	r3, BASEPRI
 800d1e6:	f04f 0120 	mov.w	r1, #32
 800d1ea:	f381 8811 	msr	BASEPRI, r1
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	482a      	ldr	r0, [pc, #168]	; (800d29c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d1f2:	f7fe ff5b 	bl	800c0ac <_PreparePacket>
 800d1f6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	627b      	str	r3, [r7, #36]	; 0x24
 800d200:	79fb      	ldrb	r3, [r7, #7]
 800d202:	623b      	str	r3, [r7, #32]
 800d204:	e00b      	b.n	800d21e <SEGGER_SYSVIEW_SendModule+0x7e>
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	1c59      	adds	r1, r3, #1
 800d20e:	6279      	str	r1, [r7, #36]	; 0x24
 800d210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d214:	b2d2      	uxtb	r2, r2
 800d216:	701a      	strb	r2, [r3, #0]
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	09db      	lsrs	r3, r3, #7
 800d21c:	623b      	str	r3, [r7, #32]
 800d21e:	6a3b      	ldr	r3, [r7, #32]
 800d220:	2b7f      	cmp	r3, #127	; 0x7f
 800d222:	d8f0      	bhi.n	800d206 <SEGGER_SYSVIEW_SendModule+0x66>
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	627a      	str	r2, [r7, #36]	; 0x24
 800d22a:	6a3a      	ldr	r2, [r7, #32]
 800d22c:	b2d2      	uxtb	r2, r2
 800d22e:	701a      	strb	r2, [r3, #0]
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	61fb      	str	r3, [r7, #28]
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	e00b      	b.n	800d258 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	b2da      	uxtb	r2, r3
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	1c59      	adds	r1, r3, #1
 800d248:	61f9      	str	r1, [r7, #28]
 800d24a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d24e:	b2d2      	uxtb	r2, r2
 800d250:	701a      	strb	r2, [r3, #0]
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	09db      	lsrs	r3, r3, #7
 800d256:	61bb      	str	r3, [r7, #24]
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	2b7f      	cmp	r3, #127	; 0x7f
 800d25c:	d8f0      	bhi.n	800d240 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	61fa      	str	r2, [r7, #28]
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	b2d2      	uxtb	r2, r2
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2280      	movs	r2, #128	; 0x80
 800d274:	4619      	mov	r1, r3
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f7fe fec8 	bl	800c00c <_EncodeStr>
 800d27c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d27e:	2216      	movs	r2, #22
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	6938      	ldr	r0, [r7, #16]
 800d284:	f7ff f802 	bl	800c28c <_SendPacket>
      RECORD_END();
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d28e:	bf00      	nop
 800d290:	3730      	adds	r7, #48	; 0x30
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	200064f8 	.word	0x200064f8
 800d29c:	20006500 	.word	0x20006500

0800d2a0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00f      	beq.n	800d2ce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d2ae:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1f2      	bne.n	800d2b4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d2ce:	bf00      	nop
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	200064f8 	.word	0x200064f8

0800d2dc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d2e2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2e6:	f04f 0120 	mov.w	r1, #32
 800d2ea:	f381 8811 	msr	BASEPRI, r1
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	4817      	ldr	r0, [pc, #92]	; (800d350 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d2f2:	f7fe fedb 	bl	800c0ac <_PreparePacket>
 800d2f6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	617b      	str	r3, [r7, #20]
 800d300:	4b14      	ldr	r3, [pc, #80]	; (800d354 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	613b      	str	r3, [r7, #16]
 800d306:	e00b      	b.n	800d320 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	1c59      	adds	r1, r3, #1
 800d310:	6179      	str	r1, [r7, #20]
 800d312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d316:	b2d2      	uxtb	r2, r2
 800d318:	701a      	strb	r2, [r3, #0]
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	09db      	lsrs	r3, r3, #7
 800d31e:	613b      	str	r3, [r7, #16]
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	2b7f      	cmp	r3, #127	; 0x7f
 800d324:	d8f0      	bhi.n	800d308 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	617a      	str	r2, [r7, #20]
 800d32c:	693a      	ldr	r2, [r7, #16]
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	701a      	strb	r2, [r3, #0]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d336:	221b      	movs	r2, #27
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	68b8      	ldr	r0, [r7, #8]
 800d33c:	f7fe ffa6 	bl	800c28c <_SendPacket>
  RECORD_END();
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f383 8811 	msr	BASEPRI, r3
}
 800d346:	bf00      	nop
 800d348:	3718      	adds	r7, #24
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	20006500 	.word	0x20006500
 800d354:	200064fc 	.word	0x200064fc

0800d358 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08a      	sub	sp, #40	; 0x28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d360:	f3ef 8311 	mrs	r3, BASEPRI
 800d364:	f04f 0120 	mov.w	r1, #32
 800d368:	f381 8811 	msr	BASEPRI, r1
 800d36c:	617b      	str	r3, [r7, #20]
 800d36e:	4827      	ldr	r0, [pc, #156]	; (800d40c <SEGGER_SYSVIEW_Warn+0xb4>)
 800d370:	f7fe fe9c 	bl	800c0ac <_PreparePacket>
 800d374:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d376:	2280      	movs	r2, #128	; 0x80
 800d378:	6879      	ldr	r1, [r7, #4]
 800d37a:	6938      	ldr	r0, [r7, #16]
 800d37c:	f7fe fe46 	bl	800c00c <_EncodeStr>
 800d380:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	627b      	str	r3, [r7, #36]	; 0x24
 800d386:	2301      	movs	r3, #1
 800d388:	623b      	str	r3, [r7, #32]
 800d38a:	e00b      	b.n	800d3a4 <SEGGER_SYSVIEW_Warn+0x4c>
 800d38c:	6a3b      	ldr	r3, [r7, #32]
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	1c59      	adds	r1, r3, #1
 800d394:	6279      	str	r1, [r7, #36]	; 0x24
 800d396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d39a:	b2d2      	uxtb	r2, r2
 800d39c:	701a      	strb	r2, [r3, #0]
 800d39e:	6a3b      	ldr	r3, [r7, #32]
 800d3a0:	09db      	lsrs	r3, r3, #7
 800d3a2:	623b      	str	r3, [r7, #32]
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	2b7f      	cmp	r3, #127	; 0x7f
 800d3a8:	d8f0      	bhi.n	800d38c <SEGGER_SYSVIEW_Warn+0x34>
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	1c5a      	adds	r2, r3, #1
 800d3ae:	627a      	str	r2, [r7, #36]	; 0x24
 800d3b0:	6a3a      	ldr	r2, [r7, #32]
 800d3b2:	b2d2      	uxtb	r2, r2
 800d3b4:	701a      	strb	r2, [r3, #0]
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	61fb      	str	r3, [r7, #28]
 800d3be:	2300      	movs	r3, #0
 800d3c0:	61bb      	str	r3, [r7, #24]
 800d3c2:	e00b      	b.n	800d3dc <SEGGER_SYSVIEW_Warn+0x84>
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	1c59      	adds	r1, r3, #1
 800d3cc:	61f9      	str	r1, [r7, #28]
 800d3ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d3d2:	b2d2      	uxtb	r2, r2
 800d3d4:	701a      	strb	r2, [r3, #0]
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	09db      	lsrs	r3, r3, #7
 800d3da:	61bb      	str	r3, [r7, #24]
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	2b7f      	cmp	r3, #127	; 0x7f
 800d3e0:	d8f0      	bhi.n	800d3c4 <SEGGER_SYSVIEW_Warn+0x6c>
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	61fa      	str	r2, [r7, #28]
 800d3e8:	69ba      	ldr	r2, [r7, #24]
 800d3ea:	b2d2      	uxtb	r2, r2
 800d3ec:	701a      	strb	r2, [r3, #0]
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d3f2:	221a      	movs	r2, #26
 800d3f4:	68f9      	ldr	r1, [r7, #12]
 800d3f6:	6938      	ldr	r0, [r7, #16]
 800d3f8:	f7fe ff48 	bl	800c28c <_SendPacket>
  RECORD_END();
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	f383 8811 	msr	BASEPRI, r3
}
 800d402:	bf00      	nop
 800d404:	3728      	adds	r7, #40	; 0x28
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20006500 	.word	0x20006500

0800d410 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800d410:	b580      	push	{r7, lr}
 800d412:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800d414:	4803      	ldr	r0, [pc, #12]	; (800d424 <_cbSendSystemDesc+0x14>)
 800d416:	f7ff fca1 	bl	800cd5c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800d41a:	4803      	ldr	r0, [pc, #12]	; (800d428 <_cbSendSystemDesc+0x18>)
 800d41c:	f7ff fc9e 	bl	800cd5c <SEGGER_SYSVIEW_SendSysDesc>
}
 800d420:	bf00      	nop
 800d422:	bd80      	pop	{r7, pc}
 800d424:	08013918 	.word	0x08013918
 800d428:	0801394c 	.word	0x0801394c

0800d42c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800d430:	4b06      	ldr	r3, [pc, #24]	; (800d44c <SEGGER_SYSVIEW_Conf+0x20>)
 800d432:	6818      	ldr	r0, [r3, #0]
 800d434:	4b05      	ldr	r3, [pc, #20]	; (800d44c <SEGGER_SYSVIEW_Conf+0x20>)
 800d436:	6819      	ldr	r1, [r3, #0]
 800d438:	4b05      	ldr	r3, [pc, #20]	; (800d450 <SEGGER_SYSVIEW_Conf+0x24>)
 800d43a:	4a06      	ldr	r2, [pc, #24]	; (800d454 <SEGGER_SYSVIEW_Conf+0x28>)
 800d43c:	f7ff f80c 	bl	800c458 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800d440:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d444:	f7ff f84c 	bl	800c4e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800d448:	bf00      	nop
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	20000014 	.word	0x20000014
 800d450:	0800d411 	.word	0x0800d411
 800d454:	08014188 	.word	0x08014188

0800d458 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800d458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800d45e:	2300      	movs	r3, #0
 800d460:	607b      	str	r3, [r7, #4]
 800d462:	e048      	b.n	800d4f6 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800d464:	4929      	ldr	r1, [pc, #164]	; (800d50c <_cbSendTaskList+0xb4>)
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	4613      	mov	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	440b      	add	r3, r1
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4618      	mov	r0, r3
 800d476:	f7fd fe05 	bl	800b084 <uxTaskGetStackHighWaterMark>
 800d47a:	4601      	mov	r1, r0
 800d47c:	4823      	ldr	r0, [pc, #140]	; (800d50c <_cbSendTaskList+0xb4>)
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4403      	add	r3, r0
 800d48a:	3310      	adds	r3, #16
 800d48c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800d48e:	491f      	ldr	r1, [pc, #124]	; (800d50c <_cbSendTaskList+0xb4>)
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	440b      	add	r3, r1
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	491b      	ldr	r1, [pc, #108]	; (800d50c <_cbSendTaskList+0xb4>)
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	4413      	add	r3, r2
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	440b      	add	r3, r1
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	6819      	ldr	r1, [r3, #0]
 800d4b0:	4c16      	ldr	r4, [pc, #88]	; (800d50c <_cbSendTaskList+0xb4>)
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4423      	add	r3, r4
 800d4be:	3308      	adds	r3, #8
 800d4c0:	681c      	ldr	r4, [r3, #0]
 800d4c2:	4d12      	ldr	r5, [pc, #72]	; (800d50c <_cbSendTaskList+0xb4>)
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	4413      	add	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	442b      	add	r3, r5
 800d4d0:	330c      	adds	r3, #12
 800d4d2:	681d      	ldr	r5, [r3, #0]
 800d4d4:	4e0d      	ldr	r6, [pc, #52]	; (800d50c <_cbSendTaskList+0xb4>)
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4433      	add	r3, r6
 800d4e2:	3310      	adds	r3, #16
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	462b      	mov	r3, r5
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	f000 f97a 	bl	800d7e4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	607b      	str	r3, [r7, #4]
 800d4f6:	4b06      	ldr	r3, [pc, #24]	; (800d510 <_cbSendTaskList+0xb8>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d3b1      	bcc.n	800d464 <_cbSendTaskList+0xc>
  }
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d50a:	bf00      	nop
 800d50c:	200065e4 	.word	0x200065e4
 800d510:	20006684 	.word	0x20006684

0800d514 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800d514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d518:	b082      	sub	sp, #8
 800d51a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800d51c:	f7fd fa6c 	bl	800a9f8 <xTaskGetTickCountFromISR>
 800d520:	4603      	mov	r3, r0
 800d522:	2200      	movs	r2, #0
 800d524:	469a      	mov	sl, r3
 800d526:	4693      	mov	fp, r2
 800d528:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800d52c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	f04f 0a00 	mov.w	sl, #0
 800d538:	f04f 0b00 	mov.w	fp, #0
 800d53c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800d540:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800d544:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800d548:	4652      	mov	r2, sl
 800d54a:	465b      	mov	r3, fp
 800d54c:	1a14      	subs	r4, r2, r0
 800d54e:	eb63 0501 	sbc.w	r5, r3, r1
 800d552:	f04f 0200 	mov.w	r2, #0
 800d556:	f04f 0300 	mov.w	r3, #0
 800d55a:	00ab      	lsls	r3, r5, #2
 800d55c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d560:	00a2      	lsls	r2, r4, #2
 800d562:	4614      	mov	r4, r2
 800d564:	461d      	mov	r5, r3
 800d566:	eb14 0800 	adds.w	r8, r4, r0
 800d56a:	eb45 0901 	adc.w	r9, r5, r1
 800d56e:	f04f 0200 	mov.w	r2, #0
 800d572:	f04f 0300 	mov.w	r3, #0
 800d576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d57a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d57e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d582:	4690      	mov	r8, r2
 800d584:	4699      	mov	r9, r3
 800d586:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800d58a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800d58e:	4610      	mov	r0, r2
 800d590:	4619      	mov	r1, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d59c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af02      	add	r7, sp, #8
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
 800d5a8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800d5aa:	2205      	movs	r2, #5
 800d5ac:	492b      	ldr	r1, [pc, #172]	; (800d65c <SYSVIEW_AddTask+0xc0>)
 800d5ae:	68b8      	ldr	r0, [r7, #8]
 800d5b0:	f005 fc70 	bl	8012e94 <memcmp>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d04b      	beq.n	800d652 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800d5ba:	4b29      	ldr	r3, [pc, #164]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b07      	cmp	r3, #7
 800d5c0:	d903      	bls.n	800d5ca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800d5c2:	4828      	ldr	r0, [pc, #160]	; (800d664 <SYSVIEW_AddTask+0xc8>)
 800d5c4:	f7ff fec8 	bl	800d358 <SEGGER_SYSVIEW_Warn>
    return;
 800d5c8:	e044      	b.n	800d654 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800d5ca:	4b25      	ldr	r3, [pc, #148]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	4926      	ldr	r1, [pc, #152]	; (800d668 <SYSVIEW_AddTask+0xcc>)
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4413      	add	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	440b      	add	r3, r1
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800d5de:	4b20      	ldr	r3, [pc, #128]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	4921      	ldr	r1, [pc, #132]	; (800d668 <SYSVIEW_AddTask+0xcc>)
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	440b      	add	r3, r1
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800d5f4:	4b1a      	ldr	r3, [pc, #104]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	491b      	ldr	r1, [pc, #108]	; (800d668 <SYSVIEW_AddTask+0xcc>)
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	440b      	add	r3, r1
 800d604:	3308      	adds	r3, #8
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800d60a:	4b15      	ldr	r3, [pc, #84]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	4916      	ldr	r1, [pc, #88]	; (800d668 <SYSVIEW_AddTask+0xcc>)
 800d610:	4613      	mov	r3, r2
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	4413      	add	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	440b      	add	r3, r1
 800d61a:	330c      	adds	r3, #12
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800d620:	4b0f      	ldr	r3, [pc, #60]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	4910      	ldr	r1, [pc, #64]	; (800d668 <SYSVIEW_AddTask+0xcc>)
 800d626:	4613      	mov	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	440b      	add	r3, r1
 800d630:	3310      	adds	r3, #16
 800d632:	69ba      	ldr	r2, [r7, #24]
 800d634:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800d636:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3301      	adds	r3, #1
 800d63c:	4a08      	ldr	r2, [pc, #32]	; (800d660 <SYSVIEW_AddTask+0xc4>)
 800d63e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	68b9      	ldr	r1, [r7, #8]
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f000 f8ca 	bl	800d7e4 <SYSVIEW_SendTaskInfo>
 800d650:	e000      	b.n	800d654 <SYSVIEW_AddTask+0xb8>
    return;
 800d652:	bf00      	nop

}
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	0801395c 	.word	0x0801395c
 800d660:	20006684 	.word	0x20006684
 800d664:	08013964 	.word	0x08013964
 800d668:	200065e4 	.word	0x200065e4

0800d66c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800d674:	4b59      	ldr	r3, [pc, #356]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f000 80ab 	beq.w	800d7d4 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800d67e:	2300      	movs	r3, #0
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	e00d      	b.n	800d6a0 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800d684:	4956      	ldr	r1, [pc, #344]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	4613      	mov	r3, r2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	440b      	add	r3, r1
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	429a      	cmp	r2, r3
 800d698:	d008      	beq.n	800d6ac <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3301      	adds	r3, #1
 800d69e:	60fb      	str	r3, [r7, #12]
 800d6a0:	4b4e      	ldr	r3, [pc, #312]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d3ec      	bcc.n	800d684 <SYSVIEW_DeleteTask+0x18>
 800d6aa:	e000      	b.n	800d6ae <SYSVIEW_DeleteTask+0x42>
      break;
 800d6ac:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800d6ae:	4b4b      	ldr	r3, [pc, #300]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d111      	bne.n	800d6de <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4a46      	ldr	r2, [pc, #280]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d6c6:	4413      	add	r3, r2
 800d6c8:	2214      	movs	r2, #20
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f005 fbff 	bl	8012ed0 <memset>
    _NumTasks--;
 800d6d2:	4b42      	ldr	r3, [pc, #264]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	4a40      	ldr	r2, [pc, #256]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	e07b      	b.n	800d7d6 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800d6de:	4b3f      	ldr	r3, [pc, #252]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d276      	bcs.n	800d7d6 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800d6e8:	4b3c      	ldr	r3, [pc, #240]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	1e5a      	subs	r2, r3, #1
 800d6ee:	493c      	ldr	r1, [pc, #240]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	4413      	add	r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	440b      	add	r3, r1
 800d6fa:	6819      	ldr	r1, [r3, #0]
 800d6fc:	4838      	ldr	r0, [pc, #224]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	4613      	mov	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	4413      	add	r3, r2
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4403      	add	r3, r0
 800d70a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800d70c:	4b33      	ldr	r3, [pc, #204]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	1e5a      	subs	r2, r3, #1
 800d712:	4933      	ldr	r1, [pc, #204]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d714:	4613      	mov	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	440b      	add	r3, r1
 800d71e:	3304      	adds	r3, #4
 800d720:	6819      	ldr	r1, [r3, #0]
 800d722:	482f      	ldr	r0, [pc, #188]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4403      	add	r3, r0
 800d730:	3304      	adds	r3, #4
 800d732:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800d734:	4b29      	ldr	r3, [pc, #164]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	1e5a      	subs	r2, r3, #1
 800d73a:	4929      	ldr	r1, [pc, #164]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d73c:	4613      	mov	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	440b      	add	r3, r1
 800d746:	3308      	adds	r3, #8
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	4825      	ldr	r0, [pc, #148]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4613      	mov	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4403      	add	r3, r0
 800d758:	3308      	adds	r3, #8
 800d75a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800d75c:	4b1f      	ldr	r3, [pc, #124]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	1e5a      	subs	r2, r3, #1
 800d762:	491f      	ldr	r1, [pc, #124]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d764:	4613      	mov	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4413      	add	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	440b      	add	r3, r1
 800d76e:	330c      	adds	r3, #12
 800d770:	6819      	ldr	r1, [r3, #0]
 800d772:	481b      	ldr	r0, [pc, #108]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4613      	mov	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4403      	add	r3, r0
 800d780:	330c      	adds	r3, #12
 800d782:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800d784:	4b15      	ldr	r3, [pc, #84]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	1e5a      	subs	r2, r3, #1
 800d78a:	4915      	ldr	r1, [pc, #84]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d78c:	4613      	mov	r3, r2
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	4413      	add	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	440b      	add	r3, r1
 800d796:	3310      	adds	r3, #16
 800d798:	6819      	ldr	r1, [r3, #0]
 800d79a:	4811      	ldr	r0, [pc, #68]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4403      	add	r3, r0
 800d7a8:	3310      	adds	r3, #16
 800d7aa:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	1e5a      	subs	r2, r3, #1
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4413      	add	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <SYSVIEW_DeleteTask+0x174>)
 800d7bc:	4413      	add	r3, r2
 800d7be:	2214      	movs	r2, #20
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f005 fb84 	bl	8012ed0 <memset>
    _NumTasks--;
 800d7c8:	4b04      	ldr	r3, [pc, #16]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	4a03      	ldr	r2, [pc, #12]	; (800d7dc <SYSVIEW_DeleteTask+0x170>)
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	e000      	b.n	800d7d6 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800d7d4:	bf00      	nop
  }
}
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20006684 	.word	0x20006684
 800d7e0:	200065e4 	.word	0x200065e4

0800d7e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08a      	sub	sp, #40	; 0x28
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800d7f2:	f107 0314 	add.w	r3, r7, #20
 800d7f6:	2214      	movs	r2, #20
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f005 fb68 	bl	8012ed0 <memset>
  TaskInfo.TaskID     = TaskID;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800d814:	f107 0314 	add.w	r3, r7, #20
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff f9a7 	bl	800cb6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800d81e:	bf00      	nop
 800d820:	3728      	adds	r7, #40	; 0x28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	78fa      	ldrb	r2, [r7, #3]
 800d836:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800d83a:	bf00      	nop
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b086      	sub	sp, #24
 800d84a:	af02      	add	r7, sp, #8
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	4608      	mov	r0, r1
 800d850:	4611      	mov	r1, r2
 800d852:	461a      	mov	r2, r3
 800d854:	4603      	mov	r3, r0
 800d856:	70fb      	strb	r3, [r7, #3]
 800d858:	460b      	mov	r3, r1
 800d85a:	70bb      	strb	r3, [r7, #2]
 800d85c:	4613      	mov	r3, r2
 800d85e:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800d866:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800d868:	7bbb      	ldrb	r3, [r7, #14]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	bf0c      	ite	eq
 800d86e:	2301      	moveq	r3, #1
 800d870:	2300      	movne	r3, #0
 800d872:	b2db      	uxtb	r3, r3
 800d874:	737b      	strb	r3, [r7, #13]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800d876:	78fa      	ldrb	r2, [r7, #3]
 800d878:	787b      	ldrb	r3, [r7, #1]
 800d87a:	4413      	add	r3, r2
 800d87c:	b2d8      	uxtb	r0, r3
 800d87e:	78bb      	ldrb	r3, [r7, #2]
 800d880:	3301      	adds	r3, #1
 800d882:	b2db      	uxtb	r3, r3
 800d884:	78ba      	ldrb	r2, [r7, #2]
 800d886:	78f9      	ldrb	r1, [r7, #3]
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	4603      	mov	r3, r0
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fac5 	bl	800de1c <u8g2_IsIntersection>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d040      	beq.n	800d91a <u8g2_DrawHorizontalBitmap+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 800d898:	2380      	movs	r3, #128	; 0x80
 800d89a:	73fb      	strb	r3, [r7, #15]
  while(len > 0)
 800d89c:	e035      	b.n	800d90a <u8g2_DrawHorizontalBitmap+0xc4>
  {
    if ( *b & mask ) {
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	781a      	ldrb	r2, [r3, #0]
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
 800d8a4:	4013      	ands	r3, r2
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00c      	beq.n	800d8c6 <u8g2_DrawHorizontalBitmap+0x80>
      u8g2->draw_color = color;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	7bba      	ldrb	r2, [r7, #14]
 800d8b0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800d8b4:	78ba      	ldrb	r2, [r7, #2]
 800d8b6:	78f9      	ldrb	r1, [r7, #3]
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	2301      	movs	r3, #1
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 f9df 	bl	800dc82 <u8g2_DrawHVLine>
 800d8c4:	e010      	b.n	800d8e8 <u8g2_DrawHorizontalBitmap+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d10b      	bne.n	800d8e8 <u8g2_DrawHorizontalBitmap+0xa2>
      u8g2->draw_color = ncolor;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7b7a      	ldrb	r2, [r7, #13]
 800d8d4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800d8d8:	78ba      	ldrb	r2, [r7, #2]
 800d8da:	78f9      	ldrb	r1, [r7, #3]
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f9cd 	bl	800dc82 <u8g2_DrawHVLine>
    }

    x++;
 800d8e8:	78fb      	ldrb	r3, [r7, #3]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	70fb      	strb	r3, [r7, #3]
    mask >>= 1;
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	085b      	lsrs	r3, r3, #1
 800d8f2:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d104      	bne.n	800d904 <u8g2_DrawHorizontalBitmap+0xbe>
    {
      mask = 128;
 800d8fa:	2380      	movs	r3, #128	; 0x80
 800d8fc:	73fb      	strb	r3, [r7, #15]
      b++;
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	3301      	adds	r3, #1
 800d902:	61bb      	str	r3, [r7, #24]
    }
    len--;
 800d904:	787b      	ldrb	r3, [r7, #1]
 800d906:	3b01      	subs	r3, #1
 800d908:	707b      	strb	r3, [r7, #1]
  while(len > 0)
 800d90a:	787b      	ldrb	r3, [r7, #1]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1c6      	bne.n	800d89e <u8g2_DrawHorizontalBitmap+0x58>
  }
  u8g2->draw_color = color;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7bba      	ldrb	r2, [r7, #14]
 800d914:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 800d918:	e000      	b.n	800d91c <u8g2_DrawHorizontalBitmap+0xd6>
    return;
 800d91a:	bf00      	nop
}
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b086      	sub	sp, #24
 800d926:	af02      	add	r7, sp, #8
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	4608      	mov	r0, r1
 800d92c:	4611      	mov	r1, r2
 800d92e:	461a      	mov	r2, r3
 800d930:	4603      	mov	r3, r0
 800d932:	70fb      	strb	r3, [r7, #3]
 800d934:	460b      	mov	r3, r1
 800d936:	70bb      	strb	r3, [r7, #2]
 800d938:	4613      	mov	r3, r2
 800d93a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t w;
  w = cnt;
 800d93c:	787b      	ldrb	r3, [r7, #1]
 800d93e:	73fb      	strb	r3, [r7, #15]
  w *= 8;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
 800d942:	00db      	lsls	r3, r3, #3
 800d944:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800d946:	78fa      	ldrb	r2, [r7, #3]
 800d948:	7bfb      	ldrb	r3, [r7, #15]
 800d94a:	4413      	add	r3, r2
 800d94c:	b2d8      	uxtb	r0, r3
 800d94e:	78ba      	ldrb	r2, [r7, #2]
 800d950:	7e3b      	ldrb	r3, [r7, #24]
 800d952:	4413      	add	r3, r2
 800d954:	b2db      	uxtb	r3, r3
 800d956:	78ba      	ldrb	r2, [r7, #2]
 800d958:	78f9      	ldrb	r1, [r7, #3]
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	4603      	mov	r3, r0
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fa5c 	bl	800de1c <u8g2_IsIntersection>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d017      	beq.n	800d99a <u8g2_DrawBitmap+0x78>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800d96a:	e012      	b.n	800d992 <u8g2_DrawBitmap+0x70>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 800d96c:	7bf8      	ldrb	r0, [r7, #15]
 800d96e:	78ba      	ldrb	r2, [r7, #2]
 800d970:	78f9      	ldrb	r1, [r7, #3]
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	4603      	mov	r3, r0
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff ff64 	bl	800d846 <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 800d97e:	787b      	ldrb	r3, [r7, #1]
 800d980:	69fa      	ldr	r2, [r7, #28]
 800d982:	4413      	add	r3, r2
 800d984:	61fb      	str	r3, [r7, #28]
    y++;
 800d986:	78bb      	ldrb	r3, [r7, #2]
 800d988:	3301      	adds	r3, #1
 800d98a:	70bb      	strb	r3, [r7, #2]
    h--;
 800d98c:	7e3b      	ldrb	r3, [r7, #24]
 800d98e:	3b01      	subs	r3, #1
 800d990:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 800d992:	7e3b      	ldrb	r3, [r7, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e9      	bne.n	800d96c <u8g2_DrawBitmap+0x4a>
 800d998:	e000      	b.n	800d99c <u8g2_DrawBitmap+0x7a>
    return;
 800d99a:	bf00      	nop
  }
}
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b084      	sub	sp, #16
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	7c1b      	ldrb	r3, [r3, #16]
 800d9b0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	fb02 f303 	mul.w	r3, r2, r3
 800d9c0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	00db      	lsls	r3, r3, #3
 800d9c6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f005 fa7d 	bl	8012ed0 <memset>
}
 800d9d6:	bf00      	nop
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b086      	sub	sp, #24
 800d9e2:	af02      	add	r7, sp, #8
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	7c1b      	ldrb	r3, [r3, #16]
 800d9f4:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800d9f6:	78fb      	ldrb	r3, [r7, #3]
 800d9f8:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fe:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	b29b      	uxth	r3, r3
 800da04:	89ba      	ldrh	r2, [r7, #12]
 800da06:	fb12 f303 	smulbb	r3, r2, r3
 800da0a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800da0c:	89bb      	ldrh	r3, [r7, #12]
 800da0e:	00db      	lsls	r3, r3, #3
 800da10:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800da12:	89bb      	ldrh	r3, [r7, #12]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	4413      	add	r3, r2
 800da18:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800da1a:	7bf9      	ldrb	r1, [r7, #15]
 800da1c:	78ba      	ldrb	r2, [r7, #2]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	460b      	mov	r3, r1
 800da24:	2100      	movs	r1, #0
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 fe83 	bl	800e732 <u8x8_DrawTile>
}
 800da2c:	bf00      	nop
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da46:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da4e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	7c5b      	ldrb	r3, [r3, #17]
 800da56:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800da58:	7bba      	ldrb	r2, [r7, #14]
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
 800da5c:	4619      	mov	r1, r3
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff ffbd 	bl	800d9de <u8g2_send_tile_row>
    src_row++;
 800da64:	7bfb      	ldrb	r3, [r7, #15]
 800da66:	3301      	adds	r3, #1
 800da68:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800da6a:	7bbb      	ldrb	r3, [r7, #14]
 800da6c:	3301      	adds	r3, #1
 800da6e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800da70:	7bfa      	ldrb	r2, [r7, #15]
 800da72:	7b7b      	ldrb	r3, [r7, #13]
 800da74:	429a      	cmp	r2, r3
 800da76:	d203      	bcs.n	800da80 <u8g2_send_buffer+0x4c>
 800da78:	7bba      	ldrb	r2, [r7, #14]
 800da7a:	7b3b      	ldrb	r3, [r7, #12]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d3eb      	bcc.n	800da58 <u8g2_send_buffer+0x24>
}
 800da80:	bf00      	nop
 800da82:	3710      	adds	r7, #16
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7ff ffcf 	bl	800da34 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fe9c 	bl	800e7d4 <u8x8_RefreshDisplay>
}
 800da9c:	bf00      	nop
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	460b      	mov	r3, r1
 800daae:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	78fa      	ldrb	r2, [r7, #3]
 800dab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	4798      	blx	r3
}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff ff5b 	bl	800d9a2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800daec:	2100      	movs	r1, #0
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff ffd8 	bl	800daa4 <u8g2_SetBufferCurrTileRow>
}
 800daf4:	bf00      	nop
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2208      	movs	r2, #8
 800db08:	701a      	strb	r2, [r3, #0]
  return buf;
 800db0a:	4b03      	ldr	r3, [pc, #12]	; (800db18 <u8g2_m_16_8_f+0x1c>)
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	20006688 	.word	0x20006688

0800db1c <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b088      	sub	sp, #32
 800db20:	af02      	add	r7, sp, #8
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a0b      	ldr	r2, [pc, #44]	; (800db60 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800db32:	490c      	ldr	r1, [pc, #48]	; (800db64 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 feb1 	bl	800e89c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800db3a:	f107 0313 	add.w	r3, r7, #19
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff ffdc 	bl	800dafc <u8g2_m_16_8_f>
 800db44:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800db46:	7cfa      	ldrb	r2, [r7, #19]
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	4b06      	ldr	r3, [pc, #24]	; (800db68 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800db4e:	6979      	ldr	r1, [r7, #20]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 fa4c 	bl	800dfee <u8g2_SetupBuffer>
}
 800db56:	bf00      	nop
 800db58:	3718      	adds	r7, #24
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	0800e455 	.word	0x0800e455
 800db64:	0800e62d 	.word	0x0800e62d
 800db68:	0800de73 	.word	0x0800de73

0800db6c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  return 0;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
	...

0800db84 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a04      	ldr	r2, [pc, #16]	; (800dba0 <u8g2_SetFontPosBaseline+0x1c>)
 800db90:	655a      	str	r2, [r3, #84]	; 0x54
}
 800db92:	bf00      	nop
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	0800db6d 	.word	0x0800db6d

0800dba4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	4611      	mov	r1, r2
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	71fb      	strb	r3, [r7, #7]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	781a      	ldrb	r2, [r3, #0]
 800dbc8:	7dbb      	ldrb	r3, [r7, #22]
 800dbca:	4413      	add	r3, r2
 800dbcc:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800dbce:	7dfa      	ldrb	r2, [r7, #23]
 800dbd0:	7dbb      	ldrb	r3, [r7, #22]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d90b      	bls.n	800dbee <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800dbd6:	7dfa      	ldrb	r2, [r7, #23]
 800dbd8:	79bb      	ldrb	r3, [r7, #6]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d205      	bcs.n	800dbea <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800dbde:	79bb      	ldrb	r3, [r7, #6]
 800dbe0:	75bb      	strb	r3, [r7, #22]
      b--;
 800dbe2:	7dbb      	ldrb	r3, [r7, #22]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	75bb      	strb	r3, [r7, #22]
 800dbe8:	e001      	b.n	800dbee <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800dbea:	79fb      	ldrb	r3, [r7, #7]
 800dbec:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800dbee:	7dfa      	ldrb	r2, [r7, #23]
 800dbf0:	79bb      	ldrb	r3, [r7, #6]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d301      	bcc.n	800dbfa <u8g2_clip_intersection2+0x56>
    return 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	e01c      	b.n	800dc34 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800dbfa:	7dba      	ldrb	r2, [r7, #22]
 800dbfc:	79fb      	ldrb	r3, [r7, #7]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d801      	bhi.n	800dc06 <u8g2_clip_intersection2+0x62>
    return 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	e016      	b.n	800dc34 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800dc06:	7dfa      	ldrb	r2, [r7, #23]
 800dc08:	79fb      	ldrb	r3, [r7, #7]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d201      	bcs.n	800dc12 <u8g2_clip_intersection2+0x6e>
    a = c;
 800dc0e:	79fb      	ldrb	r3, [r7, #7]
 800dc10:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800dc12:	7dba      	ldrb	r2, [r7, #22]
 800dc14:	79bb      	ldrb	r3, [r7, #6]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d901      	bls.n	800dc1e <u8g2_clip_intersection2+0x7a>
    b = d;
 800dc1a:	79bb      	ldrb	r3, [r7, #6]
 800dc1c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	7dfa      	ldrb	r2, [r7, #23]
 800dc22:	701a      	strb	r2, [r3, #0]
  b -= a;
 800dc24:	7dba      	ldrb	r2, [r7, #22]
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	7dba      	ldrb	r2, [r7, #22]
 800dc30:	701a      	strb	r2, [r3, #0]
  return 1;
 800dc32:	2301      	movs	r3, #1
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	371c      	adds	r7, #28
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800dc40:	b590      	push	{r4, r7, lr}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af02      	add	r7, sp, #8
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	4608      	mov	r0, r1
 800dc4a:	4611      	mov	r1, r2
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	4603      	mov	r3, r0
 800dc50:	70fb      	strb	r3, [r7, #3]
 800dc52:	460b      	mov	r3, r1
 800dc54:	70bb      	strb	r3, [r7, #2]
 800dc56:	4613      	mov	r3, r2
 800dc58:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc60:	78ba      	ldrb	r2, [r7, #2]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800dc6a:	7878      	ldrb	r0, [r7, #1]
 800dc6c:	78ba      	ldrb	r2, [r7, #2]
 800dc6e:	78f9      	ldrb	r1, [r7, #3]
 800dc70:	7e3b      	ldrb	r3, [r7, #24]
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	4603      	mov	r3, r0
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	47a0      	blx	r4
}
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd90      	pop	{r4, r7, pc}

0800dc82 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800dc82:	b590      	push	{r4, r7, lr}
 800dc84:	b085      	sub	sp, #20
 800dc86:	af02      	add	r7, sp, #8
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	4608      	mov	r0, r1
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4603      	mov	r3, r0
 800dc92:	70fb      	strb	r3, [r7, #3]
 800dc94:	460b      	mov	r3, r1
 800dc96:	70bb      	strb	r3, [r7, #2]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d06d      	beq.n	800dd82 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800dca6:	787b      	ldrb	r3, [r7, #1]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d06a      	beq.n	800dd82 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800dcac:	787b      	ldrb	r3, [r7, #1]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d918      	bls.n	800dce4 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800dcb2:	7e3b      	ldrb	r3, [r7, #24]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d109      	bne.n	800dccc <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800dcb8:	78fa      	ldrb	r2, [r7, #3]
 800dcba:	787b      	ldrb	r3, [r7, #1]
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	70fb      	strb	r3, [r7, #3]
	  x++;
 800dcc2:	78fb      	ldrb	r3, [r7, #3]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	70fb      	strb	r3, [r7, #3]
 800dcca:	e00b      	b.n	800dce4 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800dccc:	7e3b      	ldrb	r3, [r7, #24]
 800dcce:	2b03      	cmp	r3, #3
 800dcd0:	d108      	bne.n	800dce4 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800dcd2:	78ba      	ldrb	r2, [r7, #2]
 800dcd4:	787b      	ldrb	r3, [r7, #1]
 800dcd6:	1ad3      	subs	r3, r2, r3
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	70bb      	strb	r3, [r7, #2]
	  y++;
 800dcdc:	78bb      	ldrb	r3, [r7, #2]
 800dcde:	3301      	adds	r3, #1
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800dce4:	7e3b      	ldrb	r3, [r7, #24]
 800dce6:	f003 0301 	and.w	r3, r3, #1
 800dcea:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800dcec:	7e3b      	ldrb	r3, [r7, #24]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d119      	bne.n	800dd26 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dcf8:	78bb      	ldrb	r3, [r7, #2]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d838      	bhi.n	800dd70 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800dd04:	78bb      	ldrb	r3, [r7, #2]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d934      	bls.n	800dd74 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd16:	1c79      	adds	r1, r7, #1
 800dd18:	1cf8      	adds	r0, r7, #3
 800dd1a:	f7ff ff43 	bl	800dba4 <u8g2_clip_intersection2>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d119      	bne.n	800dd58 <u8g2_DrawHVLine+0xd6>
	  return;
 800dd24:	e02d      	b.n	800dd82 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d822      	bhi.n	800dd78 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800dd38:	78fb      	ldrb	r3, [r7, #3]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d91e      	bls.n	800dd7c <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dd4a:	1c79      	adds	r1, r7, #1
 800dd4c:	1cb8      	adds	r0, r7, #2
 800dd4e:	f7ff ff29 	bl	800dba4 <u8g2_clip_intersection2>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d013      	beq.n	800dd80 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5c:	689c      	ldr	r4, [r3, #8]
 800dd5e:	78f9      	ldrb	r1, [r7, #3]
 800dd60:	78ba      	ldrb	r2, [r7, #2]
 800dd62:	7878      	ldrb	r0, [r7, #1]
 800dd64:	7e3b      	ldrb	r3, [r7, #24]
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	4603      	mov	r3, r0
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	47a0      	blx	r4
 800dd6e:	e008      	b.n	800dd82 <u8g2_DrawHVLine+0x100>
	  return;
 800dd70:	bf00      	nop
 800dd72:	e006      	b.n	800dd82 <u8g2_DrawHVLine+0x100>
	  return;
 800dd74:	bf00      	nop
 800dd76:	e004      	b.n	800dd82 <u8g2_DrawHVLine+0x100>
	  return;
 800dd78:	bf00      	nop
 800dd7a:	e002      	b.n	800dd82 <u8g2_DrawHVLine+0x100>
	  return;
 800dd7c:	bf00      	nop
 800dd7e:	e000      	b.n	800dd82 <u8g2_DrawHVLine+0x100>
	  return;
 800dd80:	bf00      	nop
    }
}
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd90      	pop	{r4, r7, pc}

0800dd88 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	78fa      	ldrb	r2, [r7, #3]
 800dd98:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 800dd9c:	78fb      	ldrb	r3, [r7, #3]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d903      	bls.n	800ddaa <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800ddaa:	bf00      	nop
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800ddb6:	b490      	push	{r4, r7}
 800ddb8:	b082      	sub	sp, #8
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	4608      	mov	r0, r1
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	4623      	mov	r3, r4
 800ddc6:	71fb      	strb	r3, [r7, #7]
 800ddc8:	4603      	mov	r3, r0
 800ddca:	71bb      	strb	r3, [r7, #6]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	717b      	strb	r3, [r7, #5]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800ddd4:	797a      	ldrb	r2, [r7, #5]
 800ddd6:	79bb      	ldrb	r3, [r7, #6]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d20d      	bcs.n	800ddf8 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800dddc:	793a      	ldrb	r2, [r7, #4]
 800ddde:	79fb      	ldrb	r3, [r7, #7]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d901      	bls.n	800dde8 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800dde4:	2301      	movs	r3, #1
 800dde6:	e014      	b.n	800de12 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800dde8:	797a      	ldrb	r2, [r7, #5]
 800ddea:	793b      	ldrb	r3, [r7, #4]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d901      	bls.n	800ddf4 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e00e      	b.n	800de12 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	e00c      	b.n	800de12 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800ddf8:	793a      	ldrb	r2, [r7, #4]
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d907      	bls.n	800de10 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800de00:	797a      	ldrb	r2, [r7, #5]
 800de02:	793b      	ldrb	r3, [r7, #4]
 800de04:	429a      	cmp	r2, r3
 800de06:	d901      	bls.n	800de0c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800de08:	2301      	movs	r3, #1
 800de0a:	e002      	b.n	800de12 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800de0c:	2300      	movs	r3, #0
 800de0e:	e000      	b.n	800de12 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800de10:	2300      	movs	r3, #0
    }
  }
}
 800de12:	4618      	mov	r0, r3
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bc90      	pop	{r4, r7}
 800de1a:	4770      	bx	lr

0800de1c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	4608      	mov	r0, r1
 800de26:	4611      	mov	r1, r2
 800de28:	461a      	mov	r2, r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	70fb      	strb	r3, [r7, #3]
 800de2e:	460b      	mov	r3, r1
 800de30:	70bb      	strb	r3, [r7, #2]
 800de32:	4613      	mov	r3, r2
 800de34:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800de42:	7c3b      	ldrb	r3, [r7, #16]
 800de44:	78ba      	ldrb	r2, [r7, #2]
 800de46:	f7ff ffb6 	bl	800ddb6 <u8g2_is_intersection_decision_tree>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <u8g2_IsIntersection+0x38>
    return 0; 
 800de50:	2300      	movs	r3, #0
 800de52:	e00a      	b.n	800de6a <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800de60:	787b      	ldrb	r3, [r7, #1]
 800de62:	78fa      	ldrb	r2, [r7, #3]
 800de64:	f7ff ffa7 	bl	800ddb6 <u8g2_is_intersection_decision_tree>
 800de68:	4603      	mov	r3, r0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800de72:	b480      	push	{r7}
 800de74:	b087      	sub	sp, #28
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	4608      	mov	r0, r1
 800de7c:	4611      	mov	r1, r2
 800de7e:	461a      	mov	r2, r3
 800de80:	4603      	mov	r3, r0
 800de82:	70fb      	strb	r3, [r7, #3]
 800de84:	460b      	mov	r3, r1
 800de86:	70bb      	strb	r3, [r7, #2]
 800de88:	4613      	mov	r3, r2
 800de8a:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800de8c:	78bb      	ldrb	r3, [r7, #2]
 800de8e:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800de90:	7cfb      	ldrb	r3, [r7, #19]
 800de92:	f003 0307 	and.w	r3, r3, #7
 800de96:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800de98:	2301      	movs	r3, #1
 800de9a:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800de9c:	7c3a      	ldrb	r2, [r7, #16]
 800de9e:	7cfb      	ldrb	r3, [r7, #19]
 800dea0:	fa02 f303 	lsl.w	r3, r2, r3
 800dea4:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d801      	bhi.n	800debc <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800deb8:	7c3b      	ldrb	r3, [r7, #16]
 800deba:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d001      	beq.n	800deca <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800dec6:	7c3b      	ldrb	r3, [r7, #16]
 800dec8:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800deca:	78bb      	ldrb	r3, [r7, #2]
 800decc:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800dece:	89fb      	ldrh	r3, [r7, #14]
 800ded0:	f023 0307 	bic.w	r3, r3, #7
 800ded4:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	7c1b      	ldrb	r3, [r3, #16]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	89fa      	ldrh	r2, [r7, #14]
 800dee0:	fb12 f303 	smulbb	r3, r2, r3
 800dee4:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deea:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800deec:	89fb      	ldrh	r3, [r7, #14]
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	4413      	add	r3, r2
 800def2:	617b      	str	r3, [r7, #20]
  ptr += x;
 800def4:	78fb      	ldrb	r3, [r7, #3]
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	4413      	add	r3, r2
 800defa:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800defc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d117      	bne.n	800df34 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	7cbb      	ldrb	r3, [r7, #18]
 800df0a:	4313      	orrs	r3, r2
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	781a      	ldrb	r2, [r3, #0]
 800df16:	7c7b      	ldrb	r3, [r7, #17]
 800df18:	4053      	eors	r3, r2
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	701a      	strb	r2, [r3, #0]
	ptr++;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	3301      	adds	r3, #1
 800df24:	617b      	str	r3, [r7, #20]
	len--;
 800df26:	787b      	ldrb	r3, [r7, #1]
 800df28:	3b01      	subs	r3, #1
 800df2a:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800df2c:	787b      	ldrb	r3, [r7, #1]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1e8      	bne.n	800df04 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800df32:	e039      	b.n	800dfa8 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	781a      	ldrb	r2, [r3, #0]
 800df38:	7cbb      	ldrb	r3, [r7, #18]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	781a      	ldrb	r2, [r3, #0]
 800df46:	7c7b      	ldrb	r3, [r7, #17]
 800df48:	4053      	eors	r3, r2
 800df4a:	b2da      	uxtb	r2, r3
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800df50:	7cfb      	ldrb	r3, [r7, #19]
 800df52:	3301      	adds	r3, #1
 800df54:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800df56:	7cfb      	ldrb	r3, [r7, #19]
 800df58:	f003 0307 	and.w	r3, r3, #7
 800df5c:	74fb      	strb	r3, [r7, #19]
      len--;
 800df5e:	787b      	ldrb	r3, [r7, #1]
 800df60:	3b01      	subs	r3, #1
 800df62:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800df64:	7cfb      	ldrb	r3, [r7, #19]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d115      	bne.n	800df96 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800df70:	461a      	mov	r2, r3
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	4413      	add	r3, r2
 800df76:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d801      	bhi.n	800df86 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800df82:	2301      	movs	r3, #1
 800df84:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d008      	beq.n	800dfa2 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800df90:	2301      	movs	r3, #1
 800df92:	747b      	strb	r3, [r7, #17]
 800df94:	e005      	b.n	800dfa2 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800df96:	7cbb      	ldrb	r3, [r7, #18]
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800df9c:	7c7b      	ldrb	r3, [r7, #17]
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800dfa2:	787b      	ldrb	r3, [r7, #1]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1c5      	bne.n	800df34 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800dfa8:	bf00      	nop
 800dfaa:	371c      	adds	r7, #28
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	22ff      	movs	r2, #255	; 0xff
 800dfd0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	22ff      	movs	r2, #255	; 0xff
 800dfd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	4798      	blx	r3
}
 800dfe6:	bf00      	nop
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b084      	sub	sp, #16
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	60f8      	str	r0, [r7, #12]
 800dff6:	60b9      	str	r1, [r7, #8]
 800dff8:	603b      	str	r3, [r7, #0]
 800dffa:	4613      	mov	r3, r2
 800dffc:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2200      	movs	r2, #0
 800e002:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	79fa      	ldrb	r2, [r7, #7]
 800e014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	69ba      	ldr	r2, [r7, #24]
 800e044:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f7ff ffaf 	bl	800dfb4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7ff fd94 	bl	800db84 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800e064:	bf00      	nop
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e080:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800e082:	7bfb      	ldrb	r3, [r7, #15]
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7bfa      	ldrb	r2, [r7, #15]
 800e08c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	7c1b      	ldrb	r3, [r3, #16]
 800e094:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	2b1f      	cmp	r3, #31
 800e09a:	d901      	bls.n	800e0a0 <u8g2_update_dimension_common+0x34>
    t = 31;
 800e09c:	231f      	movs	r3, #31
 800e09e:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800e0a0:	7bfb      	ldrb	r3, [r7, #15]
 800e0a2:	00db      	lsls	r3, r3, #3
 800e0a4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7bfa      	ldrb	r2, [r7, #15]
 800e0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0b4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800e0b6:	7bfb      	ldrb	r3, [r7, #15]
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	7bfa      	ldrb	r2, [r7, #15]
 800e0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0ca:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800e0d4:	4413      	add	r3, r2
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	7c52      	ldrb	r2, [r2, #17]
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	dd06      	ble.n	800e0ec <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	7c5a      	ldrb	r2, [r3, #17]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800e0ec:	7bfb      	ldrb	r3, [r7, #15]
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	4413      	add	r3, r2
 800e114:	b2da      	uxtb	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	22f0      	movs	r2, #240	; 0xf0
 800e120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	8a9b      	ldrh	r3, [r3, #20]
 800e128:	2bf0      	cmp	r3, #240	; 0xf0
 800e12a:	d805      	bhi.n	800e138 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	8a9b      	ldrh	r3, [r3, #20]
 800e130:	b2da      	uxtb	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	8adb      	ldrh	r3, [r3, #22]
 800e13c:	b2da      	uxtb	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800e144:	bf00      	nop
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af02      	add	r7, sp, #8
 800e156:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	4603      	mov	r3, r0
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff fe51 	bl	800de1c <u8g2_IsIntersection>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d104      	bne.n	800e18a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800e188:	e03b      	b.n	800e202 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2201      	movs	r2, #1
 800e18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d205      	bcs.n	800e1ae <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d905      	bls.n	800e1ca <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d205      	bcs.n	800e1e6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d905      	bls.n	800e202 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800e202:	bf00      	nop
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b082      	sub	sp, #8
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff ff2a 	bl	800e06c <u8g2_update_dimension_common>
}
 800e218:	bf00      	nop
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff ff7b 	bl	800e150 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800e25a:	bf00      	nop
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af02      	add	r7, sp, #8
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	4608      	mov	r0, r1
 800e26c:	4611      	mov	r1, r2
 800e26e:	461a      	mov	r2, r3
 800e270:	4603      	mov	r3, r0
 800e272:	70fb      	strb	r3, [r7, #3]
 800e274:	460b      	mov	r3, r1
 800e276:	70bb      	strb	r3, [r7, #2]
 800e278:	4613      	mov	r3, r2
 800e27a:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800e27c:	7878      	ldrb	r0, [r7, #1]
 800e27e:	78ba      	ldrb	r2, [r7, #2]
 800e280:	78f9      	ldrb	r1, [r7, #3]
 800e282:	7c3b      	ldrb	r3, [r7, #16]
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	4603      	mov	r3, r0
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff fcd9 	bl	800dc40 <u8g2_draw_hv_line_2dir>
}
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800e296:	b590      	push	{r4, r7, lr}
 800e298:	b083      	sub	sp, #12
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
 800e29e:	460b      	mov	r3, r1
 800e2a0:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	691c      	ldr	r4, [r3, #16]
 800e2a6:	78fa      	ldrb	r2, [r7, #3]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	2120      	movs	r1, #32
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	47a0      	blx	r4
 800e2b0:	4603      	mov	r3, r0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd90      	pop	{r4, r7, pc}

0800e2ba <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800e2ba:	b590      	push	{r4, r7, lr}
 800e2bc:	b085      	sub	sp, #20
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	607a      	str	r2, [r7, #4]
 800e2c6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	691c      	ldr	r4, [r3, #16]
 800e2cc:	7afa      	ldrb	r2, [r7, #11]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2117      	movs	r1, #23
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	47a0      	blx	r4
 800e2d6:	4603      	mov	r3, r0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd90      	pop	{r4, r7, pc}

0800e2e0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800e2ec:	1cfb      	adds	r3, r7, #3
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	2101      	movs	r1, #1
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7ff ffe1 	bl	800e2ba <u8x8_byte_SendBytes>
 800e2f8:	4603      	mov	r3, r0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800e302:	b590      	push	{r4, r7, lr}
 800e304:	b083      	sub	sp, #12
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
 800e30a:	460b      	mov	r3, r1
 800e30c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68dc      	ldr	r4, [r3, #12]
 800e312:	78fa      	ldrb	r2, [r7, #3]
 800e314:	2300      	movs	r3, #0
 800e316:	2115      	movs	r1, #21
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	47a0      	blx	r4
 800e31c:	4603      	mov	r3, r0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	bd90      	pop	{r4, r7, pc}

0800e326 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800e326:	b590      	push	{r4, r7, lr}
 800e328:	b083      	sub	sp, #12
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
 800e32e:	460b      	mov	r3, r1
 800e330:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68dc      	ldr	r4, [r3, #12]
 800e336:	78fa      	ldrb	r2, [r7, #3]
 800e338:	2300      	movs	r3, #0
 800e33a:	2116      	movs	r1, #22
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	47a0      	blx	r4
 800e340:	4603      	mov	r3, r0
}
 800e342:	4618      	mov	r0, r3
 800e344:	370c      	adds	r7, #12
 800e346:	46bd      	mov	sp, r7
 800e348:	bd90      	pop	{r4, r7, pc}

0800e34a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800e34a:	b590      	push	{r4, r7, lr}
 800e34c:	b085      	sub	sp, #20
 800e34e:	af00      	add	r7, sp, #0
 800e350:	60f8      	str	r0, [r7, #12]
 800e352:	460b      	mov	r3, r1
 800e354:	607a      	str	r2, [r7, #4]
 800e356:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	68dc      	ldr	r4, [r3, #12]
 800e35c:	7afa      	ldrb	r2, [r7, #11]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2117      	movs	r1, #23
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	47a0      	blx	r4
 800e366:	4603      	mov	r3, r0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd90      	pop	{r4, r7, pc}

0800e370 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800e370:	b590      	push	{r4, r7, lr}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68dc      	ldr	r4, [r3, #12]
 800e37c:	2300      	movs	r3, #0
 800e37e:	2200      	movs	r2, #0
 800e380:	2118      	movs	r1, #24
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	47a0      	blx	r4
 800e386:	4603      	mov	r3, r0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd90      	pop	{r4, r7, pc}

0800e390 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800e390:	b590      	push	{r4, r7, lr}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68dc      	ldr	r4, [r3, #12]
 800e39c:	2300      	movs	r3, #0
 800e39e:	2200      	movs	r2, #0
 800e3a0:	2119      	movs	r1, #25
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	47a0      	blx	r4
 800e3a6:	4603      	mov	r3, r0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	370c      	adds	r7, #12
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd90      	pop	{r4, r7, pc}

0800e3b0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800e3b0:	b590      	push	{r4, r7, lr}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	73fb      	strb	r3, [r7, #15]
    data++;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800e3c6:	7bfb      	ldrb	r3, [r7, #15]
 800e3c8:	2bfe      	cmp	r3, #254	; 0xfe
 800e3ca:	d031      	beq.n	800e430 <u8x8_cad_SendSequence+0x80>
 800e3cc:	2bfe      	cmp	r3, #254	; 0xfe
 800e3ce:	dc3d      	bgt.n	800e44c <u8x8_cad_SendSequence+0x9c>
 800e3d0:	2b19      	cmp	r3, #25
 800e3d2:	dc3b      	bgt.n	800e44c <u8x8_cad_SendSequence+0x9c>
 800e3d4:	2b18      	cmp	r3, #24
 800e3d6:	da23      	bge.n	800e420 <u8x8_cad_SendSequence+0x70>
 800e3d8:	2b16      	cmp	r3, #22
 800e3da:	dc02      	bgt.n	800e3e2 <u8x8_cad_SendSequence+0x32>
 800e3dc:	2b15      	cmp	r3, #21
 800e3de:	da03      	bge.n	800e3e8 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800e3e0:	e034      	b.n	800e44c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800e3e2:	2b17      	cmp	r3, #23
 800e3e4:	d00e      	beq.n	800e404 <u8x8_cad_SendSequence+0x54>
	return;
 800e3e6:	e031      	b.n	800e44c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	68dc      	ldr	r4, [r3, #12]
 800e3f2:	7bba      	ldrb	r2, [r7, #14]
 800e3f4:	7bf9      	ldrb	r1, [r7, #15]
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	47a0      	blx	r4
	  data++;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	3301      	adds	r3, #1
 800e400:	603b      	str	r3, [r7, #0]
	  break;
 800e402:	e022      	b.n	800e44a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800e40a:	f107 030e 	add.w	r3, r7, #14
 800e40e:	461a      	mov	r2, r3
 800e410:	2101      	movs	r1, #1
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f7ff ff99 	bl	800e34a <u8x8_cad_SendData>
	  data++;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	3301      	adds	r3, #1
 800e41c:	603b      	str	r3, [r7, #0]
	  break;
 800e41e:	e014      	b.n	800e44a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68dc      	ldr	r4, [r3, #12]
 800e424:	7bf9      	ldrb	r1, [r7, #15]
 800e426:	2300      	movs	r3, #0
 800e428:	2200      	movs	r2, #0
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	47a0      	blx	r4
	  break;
 800e42e:	e00c      	b.n	800e44a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	461a      	mov	r2, r3
 800e43a:	2129      	movs	r1, #41	; 0x29
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 f9d8 	bl	800e7f2 <u8x8_gpio_call>
	  data++;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	3301      	adds	r3, #1
 800e446:	603b      	str	r3, [r7, #0]
	  break;
 800e448:	bf00      	nop
    cmd = *data;
 800e44a:	e7b6      	b.n	800e3ba <u8x8_cad_SendSequence+0xa>
	return;
 800e44c:	bf00      	nop
    }
  }
}
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	bd90      	pop	{r4, r7, pc}

0800e454 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e454:	b590      	push	{r4, r7, lr}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	607b      	str	r3, [r7, #4]
 800e45e:	460b      	mov	r3, r1
 800e460:	72fb      	strb	r3, [r7, #11]
 800e462:	4613      	mov	r3, r2
 800e464:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800e466:	7afb      	ldrb	r3, [r7, #11]
 800e468:	3b14      	subs	r3, #20
 800e46a:	2b05      	cmp	r3, #5
 800e46c:	d82f      	bhi.n	800e4ce <u8x8_cad_001+0x7a>
 800e46e:	a201      	add	r2, pc, #4	; (adr r2, 800e474 <u8x8_cad_001+0x20>)
 800e470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e474:	0800e4bd 	.word	0x0800e4bd
 800e478:	0800e48d 	.word	0x0800e48d
 800e47c:	0800e4a1 	.word	0x0800e4a1
 800e480:	0800e4b5 	.word	0x0800e4b5
 800e484:	0800e4bd 	.word	0x0800e4bd
 800e488:	0800e4bd 	.word	0x0800e4bd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800e48c:	2100      	movs	r1, #0
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f7ff ff01 	bl	800e296 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800e494:	7abb      	ldrb	r3, [r7, #10]
 800e496:	4619      	mov	r1, r3
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f7ff ff21 	bl	800e2e0 <u8x8_byte_SendByte>
      break;
 800e49e:	e018      	b.n	800e4d2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7ff fef7 	bl	800e296 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800e4a8:	7abb      	ldrb	r3, [r7, #10]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	68f8      	ldr	r0, [r7, #12]
 800e4ae:	f7ff ff17 	bl	800e2e0 <u8x8_byte_SendByte>
      break;
 800e4b2:	e00e      	b.n	800e4d2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7ff feed 	bl	800e296 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	691c      	ldr	r4, [r3, #16]
 800e4c0:	7aba      	ldrb	r2, [r7, #10]
 800e4c2:	7af9      	ldrb	r1, [r7, #11]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	47a0      	blx	r4
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	e002      	b.n	800e4d4 <u8x8_cad_001+0x80>
    default:
      return 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e000      	b.n	800e4d4 <u8x8_cad_001+0x80>
  }
  return 1;
 800e4d2:	2301      	movs	r3, #1
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3714      	adds	r7, #20
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd90      	pop	{r4, r7, pc}

0800e4dc <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	607b      	str	r3, [r7, #4]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	72fb      	strb	r3, [r7, #11]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800e4ee:	7afb      	ldrb	r3, [r7, #11]
 800e4f0:	3b0b      	subs	r3, #11
 800e4f2:	2b04      	cmp	r3, #4
 800e4f4:	f200 808a 	bhi.w	800e60c <u8x8_d_ssd1306_sh1106_generic+0x130>
 800e4f8:	a201      	add	r2, pc, #4	; (adr r2, 800e500 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800e4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fe:	bf00      	nop
 800e500:	0800e515 	.word	0x0800e515
 800e504:	0800e60d 	.word	0x0800e60d
 800e508:	0800e52f 	.word	0x0800e52f
 800e50c:	0800e561 	.word	0x0800e561
 800e510:	0800e581 	.word	0x0800e581
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800e514:	7abb      	ldrb	r3, [r7, #10]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d104      	bne.n	800e524 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800e51a:	4940      	ldr	r1, [pc, #256]	; (800e61c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f7ff ff47 	bl	800e3b0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800e522:	e075      	b.n	800e610 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800e524:	493e      	ldr	r1, [pc, #248]	; (800e620 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f7ff ff42 	bl	800e3b0 <u8x8_cad_SendSequence>
      break;
 800e52c:	e070      	b.n	800e610 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800e52e:	7abb      	ldrb	r3, [r7, #10]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10a      	bne.n	800e54a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800e534:	493b      	ldr	r1, [pc, #236]	; (800e624 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f7ff ff3a 	bl	800e3b0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	7c9a      	ldrb	r2, [r3, #18]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800e548:	e062      	b.n	800e610 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800e54a:	4937      	ldr	r1, [pc, #220]	; (800e628 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f7ff ff2f 	bl	800e3b0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	7cda      	ldrb	r2, [r3, #19]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800e55e:	e057      	b.n	800e610 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f7ff ff05 	bl	800e370 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800e566:	2181      	movs	r1, #129	; 0x81
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f7ff feca 	bl	800e302 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800e56e:	7abb      	ldrb	r3, [r7, #10]
 800e570:	4619      	mov	r1, r3
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f7ff fed7 	bl	800e326 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7ff ff09 	bl	800e390 <u8x8_cad_EndTransfer>
      break;
 800e57e:	e047      	b.n	800e610 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7ff fef5 	bl	800e370 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	795b      	ldrb	r3, [r3, #5]
 800e58a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800e58c:	7dfb      	ldrb	r3, [r7, #23]
 800e58e:	00db      	lsls	r3, r3, #3
 800e590:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800e598:	7dfb      	ldrb	r3, [r7, #23]
 800e59a:	4413      	add	r3, r2
 800e59c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800e59e:	2140      	movs	r1, #64	; 0x40
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f7ff feae 	bl	800e302 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800e5a6:	7dfb      	ldrb	r3, [r7, #23]
 800e5a8:	091b      	lsrs	r3, r3, #4
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	f043 0310 	orr.w	r3, r3, #16
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7ff fea4 	bl	800e302 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800e5ba:	7dfb      	ldrb	r3, [r7, #23]
 800e5bc:	f003 030f 	and.w	r3, r3, #15
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f7ff feae 	bl	800e326 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	799b      	ldrb	r3, [r3, #6]
 800e5ce:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f7ff fea5 	bl	800e326 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	791b      	ldrb	r3, [r3, #4]
 800e5e0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800e5e8:	7dbb      	ldrb	r3, [r7, #22]
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	693a      	ldr	r2, [r7, #16]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f7ff fea9 	bl	800e34a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800e5f8:	7abb      	ldrb	r3, [r7, #10]
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800e5fe:	7abb      	ldrb	r3, [r7, #10]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1eb      	bne.n	800e5dc <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7ff fec3 	bl	800e390 <u8x8_cad_EndTransfer>
      break;
 800e60a:	e001      	b.n	800e610 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	e000      	b.n	800e612 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800e610:	2301      	movs	r3, #1
}
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	080141d4 	.word	0x080141d4
 800e620:	080141dc 	.word	0x080141dc
 800e624:	080141e4 	.word	0x080141e4
 800e628:	080141ec 	.word	0x080141ec

0800e62c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	607b      	str	r3, [r7, #4]
 800e636:	460b      	mov	r3, r1
 800e638:	72fb      	strb	r3, [r7, #11]
 800e63a:	4613      	mov	r3, r2
 800e63c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800e63e:	7aba      	ldrb	r2, [r7, #10]
 800e640:	7af9      	ldrb	r1, [r7, #11]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f7ff ff49 	bl	800e4dc <u8x8_d_ssd1306_sh1106_generic>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800e650:	2301      	movs	r3, #1
 800e652:	e014      	b.n	800e67e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800e654:	7afb      	ldrb	r3, [r7, #11]
 800e656:	2b09      	cmp	r3, #9
 800e658:	d009      	beq.n	800e66e <u8x8_d_ssd1306_128x64_noname+0x42>
 800e65a:	2b0a      	cmp	r3, #10
 800e65c:	d10c      	bne.n	800e678 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f000 f82a 	bl	800e6b8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800e664:	4908      	ldr	r1, [pc, #32]	; (800e688 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	f7ff fea2 	bl	800e3b0 <u8x8_cad_SendSequence>
      break;
 800e66c:	e006      	b.n	800e67c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800e66e:	4907      	ldr	r1, [pc, #28]	; (800e68c <u8x8_d_ssd1306_128x64_noname+0x60>)
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f000 f80d 	bl	800e690 <u8x8_d_helper_display_setup_memory>
      break;
 800e676:	e001      	b.n	800e67c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	e000      	b.n	800e67e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800e67c:	2301      	movs	r3, #1
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	0801419c 	.word	0x0801419c
 800e68c:	080141f4 	.word	0x080141f4

0800e690 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	7c9a      	ldrb	r2, [r3, #18]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800e6ac:	bf00      	nop
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800e6b8:	b590      	push	{r4, r7, lr}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	695c      	ldr	r4, [r3, #20]
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	2128      	movs	r1, #40	; 0x28
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68dc      	ldr	r4, [r3, #12]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2114      	movs	r1, #20
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800e6dc:	2201      	movs	r2, #1
 800e6de:	214b      	movs	r1, #75	; 0x4b
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f886 	bl	800e7f2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	791b      	ldrb	r3, [r3, #4]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	2129      	movs	r1, #41	; 0x29
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f87e 	bl	800e7f2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	214b      	movs	r1, #75	; 0x4b
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f879 	bl	800e7f2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	791b      	ldrb	r3, [r3, #4]
 800e706:	461a      	mov	r2, r3
 800e708:	2129      	movs	r1, #41	; 0x29
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f871 	bl	800e7f2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800e710:	2201      	movs	r2, #1
 800e712:	214b      	movs	r1, #75	; 0x4b
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f86c 	bl	800e7f2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	795b      	ldrb	r3, [r3, #5]
 800e720:	461a      	mov	r2, r3
 800e722:	2129      	movs	r1, #41	; 0x29
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 f864 	bl	800e7f2 <u8x8_gpio_call>
}    
 800e72a:	bf00      	nop
 800e72c:	370c      	adds	r7, #12
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd90      	pop	{r4, r7, pc}

0800e732 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800e732:	b590      	push	{r4, r7, lr}
 800e734:	b085      	sub	sp, #20
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	4608      	mov	r0, r1
 800e73c:	4611      	mov	r1, r2
 800e73e:	461a      	mov	r2, r3
 800e740:	4603      	mov	r3, r0
 800e742:	70fb      	strb	r3, [r7, #3]
 800e744:	460b      	mov	r3, r1
 800e746:	70bb      	strb	r3, [r7, #2]
 800e748:	4613      	mov	r3, r2
 800e74a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800e74c:	78fb      	ldrb	r3, [r7, #3]
 800e74e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800e750:	78bb      	ldrb	r3, [r7, #2]
 800e752:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800e754:	787b      	ldrb	r3, [r7, #1]
 800e756:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	689c      	ldr	r4, [r3, #8]
 800e760:	f107 0308 	add.w	r3, r7, #8
 800e764:	2201      	movs	r2, #1
 800e766:	210f      	movs	r1, #15
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	47a0      	blx	r4
 800e76c:	4603      	mov	r3, r0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	bd90      	pop	{r4, r7, pc}

0800e776 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800e776:	b590      	push	{r4, r7, lr}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	689c      	ldr	r4, [r3, #8]
 800e782:	2300      	movs	r3, #0
 800e784:	2200      	movs	r2, #0
 800e786:	2109      	movs	r1, #9
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	47a0      	blx	r4
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	bd90      	pop	{r4, r7, pc}

0800e794 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800e794:	b590      	push	{r4, r7, lr}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	689c      	ldr	r4, [r3, #8]
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	210a      	movs	r1, #10
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	47a0      	blx	r4
}
 800e7aa:	bf00      	nop
 800e7ac:	370c      	adds	r7, #12
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd90      	pop	{r4, r7, pc}

0800e7b2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800e7b2:	b590      	push	{r4, r7, lr}
 800e7b4:	b083      	sub	sp, #12
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	689c      	ldr	r4, [r3, #8]
 800e7c2:	78fa      	ldrb	r2, [r7, #3]
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	210b      	movs	r1, #11
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	47a0      	blx	r4
}
 800e7cc:	bf00      	nop
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd90      	pop	{r4, r7, pc}

0800e7d4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800e7d4:	b590      	push	{r4, r7, lr}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	689c      	ldr	r4, [r3, #8]
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	2110      	movs	r1, #16
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	47a0      	blx	r4
}
 800e7ea:	bf00      	nop
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd90      	pop	{r4, r7, pc}

0800e7f2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800e7f2:	b590      	push	{r4, r7, lr}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	70fb      	strb	r3, [r7, #3]
 800e7fe:	4613      	mov	r3, r2
 800e800:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	695c      	ldr	r4, [r3, #20]
 800e806:	78ba      	ldrb	r2, [r7, #2]
 800e808:	78f9      	ldrb	r1, [r7, #3]
 800e80a:	2300      	movs	r3, #0
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	47a0      	blx	r4
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	bd90      	pop	{r4, r7, pc}

0800e818 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	607b      	str	r3, [r7, #4]
 800e822:	460b      	mov	r3, r1
 800e824:	72fb      	strb	r3, [r7, #11]
 800e826:	4613      	mov	r3, r2
 800e828:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3714      	adds	r7, #20
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a13      	ldr	r2, [pc, #76]	; (800e898 <u8x8_SetupDefaults+0x60>)
 800e84a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a12      	ldr	r2, [pc, #72]	; (800e898 <u8x8_SetupDefaults+0x60>)
 800e850:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a10      	ldr	r2, [pc, #64]	; (800e898 <u8x8_SetupDefaults+0x60>)
 800e856:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a0f      	ldr	r2, [pc, #60]	; (800e898 <u8x8_SetupDefaults+0x60>)
 800e85c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	22ff      	movs	r2, #255	; 0xff
 800e880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	22ff      	movs	r2, #255	; 0xff
 800e888:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800e88c:	bf00      	nop
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	0800e819 	.word	0x0800e819

0800e89c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
 800e8a8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7ff ffc4 	bl	800e838 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	69ba      	ldr	r2, [r7, #24]
 800e8c6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7ff ff54 	bl	800e776 <u8x8_SetupMemory>
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <LL_ADC_REG_SetSequencerRanks>:
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b089      	sub	sp, #36	; 0x24
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	60f8      	str	r0, [r7, #12]
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	332c      	adds	r3, #44	; 0x2c
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 800e8f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8f4:	69ba      	ldr	r2, [r7, #24]
 800e8f6:	fa92 f2a2 	rbit	r2, r2
 800e8fa:	617a      	str	r2, [r7, #20]
  return result;
 800e8fc:	697a      	ldr	r2, [r7, #20]
 800e8fe:	fab2 f282 	clz	r2, r2
 800e902:	b2d2      	uxtb	r2, r2
 800e904:	40d3      	lsrs	r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	440b      	add	r3, r1
 800e90a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	f003 031f 	and.w	r3, r3, #31
 800e916:	211f      	movs	r1, #31
 800e918:	fa01 f303 	lsl.w	r3, r1, r3
 800e91c:	43db      	mvns	r3, r3
 800e91e:	401a      	ands	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f003 011f 	and.w	r1, r3, #31
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	f003 031f 	and.w	r3, r3, #31
 800e92c:	fa01 f303 	lsl.w	r3, r1, r3
 800e930:	431a      	orrs	r2, r3
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	601a      	str	r2, [r3, #0]
}
 800e936:	bf00      	nop
 800e938:	3724      	adds	r7, #36	; 0x24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800e942:	b480      	push	{r7}
 800e944:	b083      	sub	sp, #12
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	431a      	orrs	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	609a      	str	r2, [r3, #8]
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <LL_ADC_SetChannelSamplingTime>:
{
 800e968:	b480      	push	{r7}
 800e96a:	b08d      	sub	sp, #52	; 0x34
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	330c      	adds	r3, #12
 800e978:	4619      	mov	r1, r3
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e984:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e986:	69ba      	ldr	r2, [r7, #24]
 800e988:	fa92 f2a2 	rbit	r2, r2
 800e98c:	617a      	str	r2, [r7, #20]
  return result;
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	fab2 f282 	clz	r2, r2
 800e994:	b2d2      	uxtb	r2, r2
 800e996:	40d3      	lsrs	r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	440b      	add	r3, r1
 800e99c:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800e9a8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800e9ac:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9ae:	6a39      	ldr	r1, [r7, #32]
 800e9b0:	fa91 f1a1 	rbit	r1, r1
 800e9b4:	61f9      	str	r1, [r7, #28]
  return result;
 800e9b6:	69f9      	ldr	r1, [r7, #28]
 800e9b8:	fab1 f181 	clz	r1, r1
 800e9bc:	b2c9      	uxtb	r1, r1
 800e9be:	40cb      	lsrs	r3, r1
 800e9c0:	2107      	movs	r1, #7
 800e9c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9c6:	43db      	mvns	r3, r3
 800e9c8:	401a      	ands	r2, r3
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800e9d0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800e9d4:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9d8:	fa91 f1a1 	rbit	r1, r1
 800e9dc:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800e9de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e0:	fab1 f181 	clz	r1, r1
 800e9e4:	b2c9      	uxtb	r1, r1
 800e9e6:	40cb      	lsrs	r3, r1
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e9ee:	431a      	orrs	r2, r3
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	601a      	str	r2, [r3, #0]
}
 800e9f4:	bf00      	nop
 800e9f6:	3734      	adds	r7, #52	; 0x34
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <LL_ADC_Enable>:
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	f043 0201 	orr.w	r2, r3, #1
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	609a      	str	r2, [r3, #8]
}
 800ea14:	bf00      	nop
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	609a      	str	r2, [r3, #8]
}
 800ea34:	bf00      	nop
 800ea36:	370c      	adds	r7, #12
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea4c:	b29b      	uxth	r3, r3
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	370c      	adds	r7, #12
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800ea5a:	b480      	push	{r7}
 800ea5c:	b083      	sub	sp, #12
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f003 0302 	and.w	r3, r3, #2
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	bf0c      	ite	eq
 800ea6e:	2301      	moveq	r3, #1
 800ea70:	2300      	movne	r3, #0
 800ea72:	b2db      	uxtb	r3, r3
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <adc_init>:

#define ADC1_CONVERSION_TIMEOUT 1000

static void adc1_init(void);

void adc_init(AdcID id) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d108      	bne.n	800eaa2 <adc_init+0x22>
	case AdcId1:
		adc1_init();
 800ea90:	f000 f85c 	bl	800eb4c <adc1_init>
		LL_ADC_Enable(ADC1);
 800ea94:	4808      	ldr	r0, [pc, #32]	; (800eab8 <adc_init+0x38>)
 800ea96:	f7ff ffb3 	bl	800ea00 <LL_ADC_Enable>
		hal_cli_printf("adc1 init");
 800ea9a:	4808      	ldr	r0, [pc, #32]	; (800eabc <adc_init+0x3c>)
 800ea9c:	f000 f99e 	bl	800eddc <hal_cli_printf>
		break;
 800eaa0:	e005      	b.n	800eaae <adc_init+0x2e>

	default:
		hal_cli_printf("adc%d not exist",id);
 800eaa2:	79fb      	ldrb	r3, [r7, #7]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4806      	ldr	r0, [pc, #24]	; (800eac0 <adc_init+0x40>)
 800eaa8:	f000 f998 	bl	800eddc <hal_cli_printf>
		break;
 800eaac:	bf00      	nop
	}
}
 800eaae:	bf00      	nop
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	40012000 	.word	0x40012000
 800eabc:	080139b4 	.word	0x080139b4
 800eac0:	080139c0 	.word	0x080139c0

0800eac4 <hal_adc_getdata>:

bool hal_adc_getdata(AdcID id, uint32_t* data) {
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	4603      	mov	r3, r0
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	73fb      	strb	r3, [r7, #15]
	coretex_timer timer;
	timer = hal_get_delay_timer(ADC1_CONVERSION_TIMEOUT);
 800ead0:	463b      	mov	r3, r7
 800ead2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 fc62 	bl	800f3a0 <hal_get_delay_timer>
 800eadc:	f107 0310 	add.w	r3, r7, #16
 800eae0:	463a      	mov	r2, r7
 800eae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eae6:	e883 0003 	stmia.w	r3, {r0, r1}

	switch(id) {
 800eaea:	7bfb      	ldrb	r3, [r7, #15]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d11d      	bne.n	800eb2c <hal_adc_getdata+0x68>
		case AdcId1:
			LL_ADC_REG_StartConversionSWStart(ADC1);
 800eaf0:	4813      	ldr	r0, [pc, #76]	; (800eb40 <hal_adc_getdata+0x7c>)
 800eaf2:	f7ff ff95 	bl	800ea20 <LL_ADC_REG_StartConversionSWStart>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800eaf6:	e009      	b.n	800eb0c <hal_adc_getdata+0x48>
				if(hal_delay_timer_is_expired(&timer))
 800eaf8:	f107 0310 	add.w	r3, r7, #16
 800eafc:	4618      	mov	r0, r3
 800eafe:	f000 fc75 	bl	800f3ec <hal_delay_timer_is_expired>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d001      	beq.n	800eb0c <hal_adc_getdata+0x48>
					return false;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	e015      	b.n	800eb38 <hal_adc_getdata+0x74>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800eb0c:	480c      	ldr	r0, [pc, #48]	; (800eb40 <hal_adc_getdata+0x7c>)
 800eb0e:	f7ff ffa4 	bl	800ea5a <LL_ADC_IsActiveFlag_EOCS>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0ef      	beq.n	800eaf8 <hal_adc_getdata+0x34>
			}
			*data = LL_ADC_REG_ReadConversionData12(ADC1);
 800eb18:	4809      	ldr	r0, [pc, #36]	; (800eb40 <hal_adc_getdata+0x7c>)
 800eb1a:	f7ff ff91 	bl	800ea40 <LL_ADC_REG_ReadConversionData12>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	601a      	str	r2, [r3, #0]
			break;
 800eb26:	bf00      	nop
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
			return false;
			break;
	}

	return true;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e005      	b.n	800eb38 <hal_adc_getdata+0x74>
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
 800eb2c:	2229      	movs	r2, #41	; 0x29
 800eb2e:	4905      	ldr	r1, [pc, #20]	; (800eb44 <hal_adc_getdata+0x80>)
 800eb30:	4805      	ldr	r0, [pc, #20]	; (800eb48 <hal_adc_getdata+0x84>)
 800eb32:	f000 f953 	bl	800eddc <hal_cli_printf>
			return false;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3718      	adds	r7, #24
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	40012000 	.word	0x40012000
 800eb44:	080139d0 	.word	0x080139d0
 800eb48:	080139e0 	.word	0x080139e0

0800eb4c <adc1_init>:

static void adc1_init(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08c      	sub	sp, #48	; 0x30
 800eb50:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800eb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb56:	2200      	movs	r2, #0
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	605a      	str	r2, [r3, #4]
 800eb5c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800eb5e:	f107 0310 	add.w	r3, r7, #16
 800eb62:	2200      	movs	r2, #0
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	605a      	str	r2, [r3, #4]
 800eb68:	609a      	str	r2, [r3, #8]
 800eb6a:	60da      	str	r2, [r3, #12]
 800eb6c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800eb6e:	463b      	mov	r3, r7
 800eb70:	2200      	movs	r2, #0
 800eb72:	601a      	str	r2, [r3, #0]
 800eb74:	605a      	str	r2, [r3, #4]
 800eb76:	609a      	str	r2, [r3, #8]
 800eb78:	60da      	str	r2, [r3, #12]

  hal_gpio_init(&gpio_adc1_channel7, GpioModeAnalog, GpioPullNo, GpioSpeedFreqLow);
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	2105      	movs	r1, #5
 800eb80:	481e      	ldr	r0, [pc, #120]	; (800ebfc <adc1_init+0xb0>)
 800eb82:	f000 fe81 	bl	800f888 <hal_gpio_init>

  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800eb86:	2300      	movs	r3, #0
 800eb88:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800eb92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb96:	4619      	mov	r1, r3
 800eb98:	4819      	ldr	r0, [pc, #100]	; (800ec00 <adc1_init+0xb4>)
 800eb9a:	f7f4 fe9f 	bl	80038dc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800eba2:	2300      	movs	r3, #0
 800eba4:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800eba6:	2300      	movs	r3, #0
 800eba8:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800ebb2:	f107 0310 	add.w	r3, r7, #16
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4811      	ldr	r0, [pc, #68]	; (800ec00 <adc1_init+0xb4>)
 800ebba:	f7f4 febb 	bl	8003934 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800ebbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ebc2:	480f      	ldr	r0, [pc, #60]	; (800ec00 <adc1_init+0xb4>)
 800ebc4:	f7ff febd 	bl	800e942 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800ebc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ebcc:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800ebd2:	463b      	mov	r3, r7
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	480b      	ldr	r0, [pc, #44]	; (800ec04 <adc1_init+0xb8>)
 800ebd8:	f7f4 fe38 	bl	800384c <LL_ADC_CommonInit>


  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800ebdc:	4a0a      	ldr	r2, [pc, #40]	; (800ec08 <adc1_init+0xbc>)
 800ebde:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ebe2:	4807      	ldr	r0, [pc, #28]	; (800ec00 <adc1_init+0xb4>)
 800ebe4:	f7ff fe77 	bl	800e8d6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4907      	ldr	r1, [pc, #28]	; (800ec08 <adc1_init+0xbc>)
 800ebec:	4804      	ldr	r0, [pc, #16]	; (800ec00 <adc1_init+0xb4>)
 800ebee:	f7ff febb 	bl	800e968 <LL_ADC_SetChannelSamplingTime>
}
 800ebf2:	bf00      	nop
 800ebf4:	3730      	adds	r7, #48	; 0x30
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	08014254 	.word	0x08014254
 800ec00:	40012000 	.word	0x40012000
 800ec04:	40012300 	.word	0x40012300
 800ec08:	03500007 	.word	0x03500007

0800ec0c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b089      	sub	sp, #36	; 0x24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	330c      	adds	r3, #12
 800ec18:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	e853 3f00 	ldrex	r3, [r3]
 800ec20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	f043 0310 	orr.w	r3, r3, #16
 800ec28:	61fb      	str	r3, [r7, #28]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	330c      	adds	r3, #12
 800ec2e:	69fa      	ldr	r2, [r7, #28]
 800ec30:	61ba      	str	r2, [r7, #24]
 800ec32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec34:	6979      	ldr	r1, [r7, #20]
 800ec36:	69ba      	ldr	r2, [r7, #24]
 800ec38:	e841 2300 	strex	r3, r2, [r1]
 800ec3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1e7      	bne.n	800ec14 <LL_USART_EnableIT_IDLE+0x8>
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	3724      	adds	r7, #36	; 0x24
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr

0800ec52 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800ec52:	b480      	push	{r7}
 800ec54:	b089      	sub	sp, #36	; 0x24
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	3314      	adds	r3, #20
 800ec5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	e853 3f00 	ldrex	r3, [r3]
 800ec66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec6e:	61fb      	str	r3, [r7, #28]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3314      	adds	r3, #20
 800ec74:	69fa      	ldr	r2, [r7, #28]
 800ec76:	61ba      	str	r2, [r7, #24]
 800ec78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7a:	6979      	ldr	r1, [r7, #20]
 800ec7c:	69ba      	ldr	r2, [r7, #24]
 800ec7e:	e841 2300 	strex	r3, r2, [r1]
 800ec82:	613b      	str	r3, [r7, #16]
   return(result);
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1e7      	bne.n	800ec5a <LL_USART_EnableDMAReq_RX+0x8>
}
 800ec8a:	bf00      	nop
 800ec8c:	bf00      	nop
 800ec8e:	3724      	adds	r7, #36	; 0x24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800eca2:	4a0c      	ldr	r2, [pc, #48]	; (800ecd4 <LL_DMA_EnableStream+0x3c>)
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	4413      	add	r3, r2
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	461a      	mov	r2, r3
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4413      	add	r3, r2
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4908      	ldr	r1, [pc, #32]	; (800ecd4 <LL_DMA_EnableStream+0x3c>)
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	440a      	add	r2, r1
 800ecb8:	7812      	ldrb	r2, [r2, #0]
 800ecba:	4611      	mov	r1, r2
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	440a      	add	r2, r1
 800ecc0:	f043 0301 	orr.w	r3, r3, #1
 800ecc4:	6013      	str	r3, [r2, #0]
}
 800ecc6:	bf00      	nop
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	0801420c 	.word	0x0801420c

0800ecd8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800ece4:	4a0d      	ldr	r2, [pc, #52]	; (800ed1c <LL_DMA_SetDataLength+0x44>)
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	4413      	add	r3, r2
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	461a      	mov	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	0c1b      	lsrs	r3, r3, #16
 800ecf6:	041b      	lsls	r3, r3, #16
 800ecf8:	4908      	ldr	r1, [pc, #32]	; (800ed1c <LL_DMA_SetDataLength+0x44>)
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	440a      	add	r2, r1
 800ecfe:	7812      	ldrb	r2, [r2, #0]
 800ed00:	4611      	mov	r1, r2
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	440a      	add	r2, r1
 800ed06:	4611      	mov	r1, r2
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	604b      	str	r3, [r1, #4]
}
 800ed0e:	bf00      	nop
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	0801420c 	.word	0x0801420c

0800ed20 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800ed2c:	4a07      	ldr	r2, [pc, #28]	; (800ed4c <LL_DMA_SetMemoryAddress+0x2c>)
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	4413      	add	r3, r2
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	461a      	mov	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	4413      	add	r3, r2
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	60d3      	str	r3, [r2, #12]
}
 800ed40:	bf00      	nop
 800ed42:	3714      	adds	r7, #20
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr
 800ed4c:	0801420c 	.word	0x0801420c

0800ed50 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800ed5c:	4a07      	ldr	r2, [pc, #28]	; (800ed7c <LL_DMA_SetPeriphAddress+0x2c>)
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	4413      	add	r3, r2
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	461a      	mov	r2, r3
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	4413      	add	r3, r2
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6093      	str	r3, [r2, #8]
}
 800ed70:	bf00      	nop
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	0801420c 	.word	0x0801420c

0800ed80 <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 800ed86:	f7fb fe27 	bl	800a9d8 <xTaskGetTickCount>
 800ed8a:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	4a10      	ldr	r2, [pc, #64]	; (800edd0 <print_boottime+0x50>)
 800ed90:	fba2 2303 	umull	r2, r3, r2, r3
 800ed94:	099b      	lsrs	r3, r3, #6
 800ed96:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	4a0d      	ldr	r2, [pc, #52]	; (800edd0 <print_boottime+0x50>)
 800ed9c:	fba2 1203 	umull	r1, r2, r2, r3
 800eda0:	0992      	lsrs	r2, r2, #6
 800eda2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eda6:	fb01 f202 	mul.w	r2, r1, r2
 800edaa:	1a9b      	subs	r3, r3, r2
 800edac:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	68ba      	ldr	r2, [r7, #8]
 800edb2:	4908      	ldr	r1, [pc, #32]	; (800edd4 <print_boottime+0x54>)
 800edb4:	4808      	ldr	r0, [pc, #32]	; (800edd8 <print_boottime+0x58>)
 800edb6:	f004 f893 	bl	8012ee0 <siprintf>
 800edba:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	461a      	mov	r2, r3
 800edc0:	4905      	ldr	r1, [pc, #20]	; (800edd8 <print_boottime+0x58>)
 800edc2:	2000      	movs	r0, #0
 800edc4:	f003 fe60 	bl	8012a88 <hal_uart_transfer>
}
 800edc8:	bf00      	nop
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	10624dd3 	.word	0x10624dd3
 800edd4:	080139f0 	.word	0x080139f0
 800edd8:	20006a8c 	.word	0x20006a8c

0800eddc <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 800eddc:	b40f      	push	{r0, r1, r2, r3}
 800edde:	b580      	push	{r7, lr}
 800ede0:	b082      	sub	sp, #8
 800ede2:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 800ede4:	4b17      	ldr	r3, [pc, #92]	; (800ee44 <hal_cli_printf+0x68>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800edec:	4618      	mov	r0, r3
 800edee:	f7fa ffad 	bl	8009d4c <xQueueSemaphoreTake>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d11d      	bne.n	800ee34 <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 800edf8:	f7ff ffc2 	bl	800ed80 <print_boottime>

	va_start(valist, fmt);
 800edfc:	f107 0314 	add.w	r3, r7, #20
 800ee00:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 800ee02:	683a      	ldr	r2, [r7, #0]
 800ee04:	6939      	ldr	r1, [r7, #16]
 800ee06:	4810      	ldr	r0, [pc, #64]	; (800ee48 <hal_cli_printf+0x6c>)
 800ee08:	f004 f8a0 	bl	8012f4c <vsiprintf>
 800ee0c:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	461a      	mov	r2, r3
 800ee12:	490d      	ldr	r1, [pc, #52]	; (800ee48 <hal_cli_printf+0x6c>)
 800ee14:	2000      	movs	r0, #0
 800ee16:	f003 fe37 	bl	8012a88 <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	490b      	ldr	r1, [pc, #44]	; (800ee4c <hal_cli_printf+0x70>)
 800ee1e:	2000      	movs	r0, #0
 800ee20:	f003 fe32 	bl	8012a88 <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 800ee24:	4b07      	ldr	r3, [pc, #28]	; (800ee44 <hal_cli_printf+0x68>)
 800ee26:	6818      	ldr	r0, [r3, #0]
 800ee28:	2300      	movs	r3, #0
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	f7fa fc99 	bl	8009764 <xQueueGenericSend>
 800ee32:	e000      	b.n	800ee36 <hal_cli_printf+0x5a>
		return;
 800ee34:	bf00      	nop
}
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee3e:	b004      	add	sp, #16
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	20006a88 	.word	0x20006a88
 800ee48:	20006a8c 	.word	0x20006a8c
 800ee4c:	080139fc 	.word	0x080139fc

0800ee50 <hal_cli_init>:

void hal_cli_init(void) {
 800ee50:	b580      	push	{r7, lr}
 800ee52:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 800ee54:	4b17      	ldr	r3, [pc, #92]	; (800eeb4 <hal_cli_init+0x64>)
 800ee56:	2200      	movs	r2, #0
 800ee58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 800ee5c:	4b15      	ldr	r3, [pc, #84]	; (800eeb4 <hal_cli_init+0x64>)
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 800ee64:	4b13      	ldr	r3, [pc, #76]	; (800eeb4 <hal_cli_init+0x64>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	f7fa fc61 	bl	8009734 <xQueueCreateMutex>
 800ee72:	4603      	mov	r3, r0
 800ee74:	4a10      	ldr	r2, [pc, #64]	; (800eeb8 <hal_cli_init+0x68>)
 800ee76:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 800ee78:	4b10      	ldr	r3, [pc, #64]	; (800eebc <hal_cli_init+0x6c>)
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	2102      	movs	r1, #2
 800ee7e:	4810      	ldr	r0, [pc, #64]	; (800eec0 <hal_cli_init+0x70>)
 800ee80:	f7ff ff4e 	bl	800ed20 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800ee84:	4a0f      	ldr	r2, [pc, #60]	; (800eec4 <hal_cli_init+0x74>)
 800ee86:	2102      	movs	r1, #2
 800ee88:	480d      	ldr	r0, [pc, #52]	; (800eec0 <hal_cli_init+0x70>)
 800ee8a:	f7ff ff61 	bl	800ed50 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 800ee8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee92:	2102      	movs	r1, #2
 800ee94:	480a      	ldr	r0, [pc, #40]	; (800eec0 <hal_cli_init+0x70>)
 800ee96:	f7ff ff1f 	bl	800ecd8 <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 800ee9a:	480b      	ldr	r0, [pc, #44]	; (800eec8 <hal_cli_init+0x78>)
 800ee9c:	f7ff fed9 	bl	800ec52 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800eea0:	2102      	movs	r1, #2
 800eea2:	4807      	ldr	r0, [pc, #28]	; (800eec0 <hal_cli_init+0x70>)
 800eea4:	f7ff fef8 	bl	800ec98 <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 800eea8:	4807      	ldr	r0, [pc, #28]	; (800eec8 <hal_cli_init+0x78>)
 800eeaa:	f7ff feaf 	bl	800ec0c <LL_USART_EnableIT_IDLE>
}
 800eeae:	bf00      	nop
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20006a8c 	.word	0x20006a8c
 800eeb8:	20006a88 	.word	0x20006a88
 800eebc:	20006b8c 	.word	0x20006b8c
 800eec0:	40026400 	.word	0x40026400
 800eec4:	40011004 	.word	0x40011004
 800eec8:	40011000 	.word	0x40011000

0800eecc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800eecc:	b480      	push	{r7}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800eed4:	4b08      	ldr	r3, [pc, #32]	; (800eef8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800eed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eed8:	4907      	ldr	r1, [pc, #28]	; (800eef8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4313      	orrs	r3, r2
 800eede:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800eee0:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800eee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4013      	ands	r3, r2
 800eee8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800eeea:	68fb      	ldr	r3, [r7, #12]
}
 800eeec:	bf00      	nop
 800eeee:	3714      	adds	r7, #20
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	40023800 	.word	0x40023800

0800eefc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b085      	sub	sp, #20
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800ef04:	4b08      	ldr	r3, [pc, #32]	; (800ef28 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ef06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef08:	4907      	ldr	r1, [pc, #28]	; (800ef28 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800ef10:	4b05      	ldr	r3, [pc, #20]	; (800ef28 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ef12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4013      	ands	r3, r2
 800ef18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
}
 800ef1c:	bf00      	nop
 800ef1e:	3714      	adds	r7, #20
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	40023800 	.word	0x40023800

0800ef2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800ef34:	4b08      	ldr	r3, [pc, #32]	; (800ef58 <LL_APB2_GRP1_EnableClock+0x2c>)
 800ef36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef38:	4907      	ldr	r1, [pc, #28]	; (800ef58 <LL_APB2_GRP1_EnableClock+0x2c>)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800ef40:	4b05      	ldr	r3, [pc, #20]	; (800ef58 <LL_APB2_GRP1_EnableClock+0x2c>)
 800ef42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4013      	ands	r3, r2
 800ef48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
}
 800ef4c:	bf00      	nop
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr
 800ef58:	40023800 	.word	0x40023800

0800ef5c <LL_RCC_HSE_Enable>:
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ef60:	4b05      	ldr	r3, [pc, #20]	; (800ef78 <LL_RCC_HSE_Enable+0x1c>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a04      	ldr	r2, [pc, #16]	; (800ef78 <LL_RCC_HSE_Enable+0x1c>)
 800ef66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef6a:	6013      	str	r3, [r2, #0]
}
 800ef6c:	bf00      	nop
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop
 800ef78:	40023800 	.word	0x40023800

0800ef7c <LL_RCC_HSE_IsReady>:
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800ef80:	4b07      	ldr	r3, [pc, #28]	; (800efa0 <LL_RCC_HSE_IsReady+0x24>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef8c:	bf0c      	ite	eq
 800ef8e:	2301      	moveq	r3, #1
 800ef90:	2300      	movne	r3, #0
 800ef92:	b2db      	uxtb	r3, r3
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	40023800 	.word	0x40023800

0800efa4 <LL_RCC_SetSysClkSource>:
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800efac:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <LL_RCC_SetSysClkSource+0x24>)
 800efae:	689b      	ldr	r3, [r3, #8]
 800efb0:	f023 0203 	bic.w	r2, r3, #3
 800efb4:	4904      	ldr	r1, [pc, #16]	; (800efc8 <LL_RCC_SetSysClkSource+0x24>)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4313      	orrs	r3, r2
 800efba:	608b      	str	r3, [r1, #8]
}
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	40023800 	.word	0x40023800

0800efcc <LL_RCC_GetSysClkSource>:
{
 800efcc:	b480      	push	{r7}
 800efce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800efd0:	4b04      	ldr	r3, [pc, #16]	; (800efe4 <LL_RCC_GetSysClkSource+0x18>)
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	f003 030c 	and.w	r3, r3, #12
}
 800efd8:	4618      	mov	r0, r3
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	40023800 	.word	0x40023800

0800efe8 <LL_RCC_SetAHBPrescaler>:
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800eff0:	4b06      	ldr	r3, [pc, #24]	; (800f00c <LL_RCC_SetAHBPrescaler+0x24>)
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eff8:	4904      	ldr	r1, [pc, #16]	; (800f00c <LL_RCC_SetAHBPrescaler+0x24>)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4313      	orrs	r3, r2
 800effe:	608b      	str	r3, [r1, #8]
}
 800f000:	bf00      	nop
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr
 800f00c:	40023800 	.word	0x40023800

0800f010 <LL_RCC_SetAPB1Prescaler>:
{
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f018:	4b06      	ldr	r3, [pc, #24]	; (800f034 <LL_RCC_SetAPB1Prescaler+0x24>)
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f020:	4904      	ldr	r1, [pc, #16]	; (800f034 <LL_RCC_SetAPB1Prescaler+0x24>)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4313      	orrs	r3, r2
 800f026:	608b      	str	r3, [r1, #8]
}
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	40023800 	.word	0x40023800

0800f038 <LL_RCC_SetAPB2Prescaler>:
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f040:	4b06      	ldr	r3, [pc, #24]	; (800f05c <LL_RCC_SetAPB2Prescaler+0x24>)
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f048:	4904      	ldr	r1, [pc, #16]	; (800f05c <LL_RCC_SetAPB2Prescaler+0x24>)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4313      	orrs	r3, r2
 800f04e:	608b      	str	r3, [r1, #8]
}
 800f050:	bf00      	nop
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr
 800f05c:	40023800 	.word	0x40023800

0800f060 <LL_RCC_SetTIMPrescaler>:
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800f068:	4b07      	ldr	r3, [pc, #28]	; (800f088 <LL_RCC_SetTIMPrescaler+0x28>)
 800f06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f06e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f072:	4905      	ldr	r1, [pc, #20]	; (800f088 <LL_RCC_SetTIMPrescaler+0x28>)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4313      	orrs	r3, r2
 800f078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800f07c:	bf00      	nop
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr
 800f088:	40023800 	.word	0x40023800

0800f08c <LL_RCC_PLL_Enable>:
{
 800f08c:	b480      	push	{r7}
 800f08e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f090:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <LL_RCC_PLL_Enable+0x1c>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a04      	ldr	r2, [pc, #16]	; (800f0a8 <LL_RCC_PLL_Enable+0x1c>)
 800f096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f09a:	6013      	str	r3, [r2, #0]
}
 800f09c:	bf00      	nop
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	40023800 	.word	0x40023800

0800f0ac <LL_RCC_PLL_IsReady>:
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800f0b0:	4b07      	ldr	r3, [pc, #28]	; (800f0d0 <LL_RCC_PLL_IsReady+0x24>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0bc:	bf0c      	ite	eq
 800f0be:	2301      	moveq	r3, #1
 800f0c0:	2300      	movne	r3, #0
 800f0c2:	b2db      	uxtb	r3, r3
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	40023800 	.word	0x40023800

0800f0d4 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b085      	sub	sp, #20
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800f0e2:	4b0d      	ldr	r3, [pc, #52]	; (800f118 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f0e4:	685a      	ldr	r2, [r3, #4]
 800f0e6:	4b0d      	ldr	r3, [pc, #52]	; (800f11c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	68f9      	ldr	r1, [r7, #12]
 800f0ec:	68ba      	ldr	r2, [r7, #8]
 800f0ee:	4311      	orrs	r1, r2
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	0192      	lsls	r2, r2, #6
 800f0f4:	430a      	orrs	r2, r1
 800f0f6:	4908      	ldr	r1, [pc, #32]	; (800f118 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800f0fc:	4b06      	ldr	r3, [pc, #24]	; (800f118 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f104:	4904      	ldr	r1, [pc, #16]	; (800f118 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	4313      	orrs	r3, r2
 800f10a:	604b      	str	r3, [r1, #4]
}
 800f10c:	bf00      	nop
 800f10e:	3714      	adds	r7, #20
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	40023800 	.word	0x40023800
 800f11c:	ffbf8000 	.word	0xffbf8000

0800f120 <LL_RCC_PLL_ConfigDomain_48M>:
{
 800f120:	b480      	push	{r7}
 800f122:	b085      	sub	sp, #20
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
 800f12c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800f12e:	4b0a      	ldr	r3, [pc, #40]	; (800f158 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800f130:	685a      	ldr	r2, [r3, #4]
 800f132:	4b0a      	ldr	r3, [pc, #40]	; (800f15c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 800f134:	4013      	ands	r3, r2
 800f136:	68f9      	ldr	r1, [r7, #12]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	4311      	orrs	r1, r2
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	0192      	lsls	r2, r2, #6
 800f140:	4311      	orrs	r1, r2
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	430a      	orrs	r2, r1
 800f146:	4904      	ldr	r1, [pc, #16]	; (800f158 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800f148:	4313      	orrs	r3, r2
 800f14a:	604b      	str	r3, [r1, #4]
}
 800f14c:	bf00      	nop
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	40023800 	.word	0x40023800
 800f15c:	f0bf8000 	.word	0xf0bf8000

0800f160 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800f168:	4b06      	ldr	r3, [pc, #24]	; (800f184 <LL_FLASH_SetLatency+0x24>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f023 020f 	bic.w	r2, r3, #15
 800f170:	4904      	ldr	r1, [pc, #16]	; (800f184 <LL_FLASH_SetLatency+0x24>)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4313      	orrs	r3, r2
 800f176:	600b      	str	r3, [r1, #0]
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr
 800f184:	40023c00 	.word	0x40023c00

0800f188 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800f188:	b480      	push	{r7}
 800f18a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800f18c:	4b04      	ldr	r3, [pc, #16]	; (800f1a0 <LL_FLASH_GetLatency+0x18>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 030f 	and.w	r3, r3, #15
}
 800f194:	4618      	mov	r0, r3
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	40023c00 	.word	0x40023c00

0800f1a4 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800f1a8:	4b05      	ldr	r3, [pc, #20]	; (800f1c0 <LL_PWR_EnableOverDriveMode+0x1c>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a04      	ldr	r2, [pc, #16]	; (800f1c0 <LL_PWR_EnableOverDriveMode+0x1c>)
 800f1ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1b2:	6013      	str	r3, [r2, #0]
}
 800f1b4:	bf00      	nop
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	40007000 	.word	0x40007000

0800f1c4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800f1cc:	4b06      	ldr	r3, [pc, #24]	; (800f1e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f1d4:	4904      	ldr	r1, [pc, #16]	; (800f1e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	600b      	str	r3, [r1, #0]
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr
 800f1e8:	40007000 	.word	0x40007000

0800f1ec <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800f1f0:	2001      	movs	r0, #1
 800f1f2:	f7ff fe6b 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800f1f6:	2002      	movs	r0, #2
 800f1f8:	f7ff fe68 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800f1fc:	2004      	movs	r0, #4
 800f1fe:	f7ff fe65 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800f202:	2008      	movs	r0, #8
 800f204:	f7ff fe62 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800f208:	2010      	movs	r0, #16
 800f20a:	f7ff fe5f 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800f20e:	2020      	movs	r0, #32
 800f210:	f7ff fe5c 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800f214:	2040      	movs	r0, #64	; 0x40
 800f216:	f7ff fe59 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800f21a:	2080      	movs	r0, #128	; 0x80
 800f21c:	f7ff fe56 	bl	800eecc <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800f220:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f224:	f7ff fe52 	bl	800eecc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800f228:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f22c:	f7ff fe4e 	bl	800eecc <LL_AHB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800f230:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f234:	f7ff fe7a 	bl	800ef2c <LL_APB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800f238:	2004      	movs	r0, #4
 800f23a:	f7ff fe5f 	bl	800eefc <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800f23e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f242:	f7ff fe5b 	bl	800eefc <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800f246:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f24a:	f7ff fe57 	bl	800eefc <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800f24e:	2010      	movs	r0, #16
 800f250:	f7ff fe6c 	bl	800ef2c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800f254:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f258:	f7ff fe50 	bl	800eefc <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800f25c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f260:	f7ff fe4c 	bl	800eefc <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 800f264:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f268:	f7ff fe60 	bl	800ef2c <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 800f26c:	bf00      	nop
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800f276:	2005      	movs	r0, #5
 800f278:	f7ff ff72 	bl	800f160 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800f27c:	bf00      	nop
 800f27e:	f7ff ff83 	bl	800f188 <LL_FLASH_GetLatency>
 800f282:	4603      	mov	r3, r0
 800f284:	2b05      	cmp	r3, #5
 800f286:	d1fa      	bne.n	800f27e <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800f288:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800f28c:	f7ff ff9a 	bl	800f1c4 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800f290:	f7ff ff88 	bl	800f1a4 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800f294:	f7ff fe62 	bl	800ef5c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800f298:	bf00      	nop
 800f29a:	f7ff fe6f 	bl	800ef7c <LL_RCC_HSE_IsReady>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d1fa      	bne.n	800f29a <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	22b4      	movs	r2, #180	; 0xb4
 800f2a8:	2104      	movs	r1, #4
 800f2aa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f2ae:	f7ff ff11 	bl	800f0d4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 800f2b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2b6:	22b4      	movs	r2, #180	; 0xb4
 800f2b8:	2104      	movs	r1, #4
 800f2ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f2be:	f7ff ff2f 	bl	800f120 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 800f2c2:	f7ff fee3 	bl	800f08c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800f2c6:	bf00      	nop
 800f2c8:	f7ff fef0 	bl	800f0ac <LL_RCC_PLL_IsReady>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d1fa      	bne.n	800f2c8 <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	f7ff fe88 	bl	800efe8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800f2d8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800f2dc:	f7ff fe98 	bl	800f010 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800f2e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f2e4:	f7ff fea8 	bl	800f038 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800f2e8:	2002      	movs	r0, #2
 800f2ea:	f7ff fe5b 	bl	800efa4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800f2ee:	bf00      	nop
 800f2f0:	f7ff fe6c 	bl	800efcc <LL_RCC_GetSysClkSource>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b08      	cmp	r3, #8
 800f2f8:	d1fa      	bne.n	800f2f0 <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 800f2fa:	4808      	ldr	r0, [pc, #32]	; (800f31c <hal_clock_init_early+0xac>)
 800f2fc:	f7f6 f8ee 	bl	80054dc <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800f300:	463b      	mov	r3, r7
 800f302:	4618      	mov	r0, r3
 800f304:	f7f4 fe86 	bl	8004014 <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800f308:	2005      	movs	r0, #5
 800f30a:	f002 fe9f 	bl	801204c <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800f30e:	2000      	movs	r0, #0
 800f310:	f7ff fea6 	bl	800f060 <LL_RCC_SetTIMPrescaler>
}
 800f314:	bf00      	nop
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	0aba9500 	.word	0x0aba9500

0800f320 <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 800f320:	b480      	push	{r7}
 800f322:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800f324:	4b09      	ldr	r3, [pc, #36]	; (800f34c <hal_dwt_init_early+0x2c>)
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	4a08      	ldr	r2, [pc, #32]	; (800f34c <hal_dwt_init_early+0x2c>)
 800f32a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f32e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800f330:	4b07      	ldr	r3, [pc, #28]	; (800f350 <hal_dwt_init_early+0x30>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4a06      	ldr	r2, [pc, #24]	; (800f350 <hal_dwt_init_early+0x30>)
 800f336:	f043 0301 	orr.w	r3, r3, #1
 800f33a:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 800f33c:	4b04      	ldr	r3, [pc, #16]	; (800f350 <hal_dwt_init_early+0x30>)
 800f33e:	2200      	movs	r2, #0
 800f340:	605a      	str	r2, [r3, #4]
}
 800f342:	bf00      	nop
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr
 800f34c:	e000edf0 	.word	0xe000edf0
 800f350:	e0001000 	.word	0xe0001000

0800f354 <hal_delay_us>:
#include "delay.h"
#include <stdbool.h>

void hal_delay_us(uint32_t microseconds) {
 800f354:	b480      	push	{r7}
 800f356:	b085      	sub	sp, #20
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800f35c:	4b0d      	ldr	r3, [pc, #52]	; (800f394 <hal_delay_us+0x40>)
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	60fb      	str	r3, [r7, #12]
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
 800f362:	4b0d      	ldr	r3, [pc, #52]	; (800f398 <hal_delay_us+0x44>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a0d      	ldr	r2, [pc, #52]	; (800f39c <hal_delay_us+0x48>)
 800f368:	fba2 2303 	umull	r2, r3, r2, r3
 800f36c:	0c9a      	lsrs	r2, r3, #18
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	fb02 f303 	mul.w	r3, r2, r3
 800f374:	60bb      	str	r3, [r7, #8]
    while((DWT->CYCCNT - start) < time_ticks) {
 800f376:	bf00      	nop
 800f378:	4b06      	ldr	r3, [pc, #24]	; (800f394 <hal_delay_us+0x40>)
 800f37a:	685a      	ldr	r2, [r3, #4]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	1ad3      	subs	r3, r2, r3
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	429a      	cmp	r2, r3
 800f384:	d8f8      	bhi.n	800f378 <hal_delay_us+0x24>
    };
}
 800f386:	bf00      	nop
 800f388:	bf00      	nop
 800f38a:	3714      	adds	r7, #20
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr
 800f394:	e0001000 	.word	0xe0001000
 800f398:	20000014 	.word	0x20000014
 800f39c:	431bde83 	.word	0x431bde83

0800f3a0 <hal_get_delay_timer>:

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 800f3aa:	4b0d      	ldr	r3, [pc, #52]	; (800f3e0 <hal_get_delay_timer+0x40>)
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000) * timeout;
 800f3b0:	4b0c      	ldr	r3, [pc, #48]	; (800f3e4 <hal_get_delay_timer+0x44>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4a0c      	ldr	r2, [pc, #48]	; (800f3e8 <hal_get_delay_timer+0x48>)
 800f3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800f3ba:	099b      	lsrs	r3, r3, #6
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	fb02 f303 	mul.w	r3, r2, r3
 800f3c2:	60fb      	str	r3, [r7, #12]
	return tmp;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	f107 0308 	add.w	r3, r7, #8
 800f3cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	e0001000 	.word	0xe0001000
 800f3e4:	20000014 	.word	0x20000014
 800f3e8:	10624dd3 	.word	0x10624dd3

0800f3ec <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 800f3f4:	4b08      	ldr	r3, [pc, #32]	; (800f418 <hal_delay_timer_is_expired+0x2c>)
 800f3f6:	685a      	ldr	r2, [r3, #4]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	1ad2      	subs	r2, r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	429a      	cmp	r2, r3
 800f404:	bf2c      	ite	cs
 800f406:	2301      	movcs	r3, #1
 800f408:	2300      	movcc	r3, #0
 800f40a:	b2db      	uxtb	r3, r3
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	370c      	adds	r7, #12
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr
 800f418:	e0001000 	.word	0xe0001000

0800f41c <LL_GPIO_SetPinMode>:
{
 800f41c:	b480      	push	{r7}
 800f41e:	b089      	sub	sp, #36	; 0x24
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	fa93 f3a3 	rbit	r3, r3
 800f436:	613b      	str	r3, [r7, #16]
  return result;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	fab3 f383 	clz	r3, r3
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	005b      	lsls	r3, r3, #1
 800f442:	2103      	movs	r1, #3
 800f444:	fa01 f303 	lsl.w	r3, r1, r3
 800f448:	43db      	mvns	r3, r3
 800f44a:	401a      	ands	r2, r3
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	fa93 f3a3 	rbit	r3, r3
 800f456:	61bb      	str	r3, [r7, #24]
  return result;
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	fab3 f383 	clz	r3, r3
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	005b      	lsls	r3, r3, #1
 800f462:	6879      	ldr	r1, [r7, #4]
 800f464:	fa01 f303 	lsl.w	r3, r1, r3
 800f468:	431a      	orrs	r2, r3
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	601a      	str	r2, [r3, #0]
}
 800f46e:	bf00      	nop
 800f470:	3724      	adds	r7, #36	; 0x24
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <LL_GPIO_SetPinOutputType>:
{
 800f47a:	b480      	push	{r7}
 800f47c:	b085      	sub	sp, #20
 800f47e:	af00      	add	r7, sp, #0
 800f480:	60f8      	str	r0, [r7, #12]
 800f482:	60b9      	str	r1, [r7, #8]
 800f484:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	685a      	ldr	r2, [r3, #4]
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	43db      	mvns	r3, r3
 800f48e:	401a      	ands	r2, r3
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	6879      	ldr	r1, [r7, #4]
 800f494:	fb01 f303 	mul.w	r3, r1, r3
 800f498:	431a      	orrs	r2, r3
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	605a      	str	r2, [r3, #4]
}
 800f49e:	bf00      	nop
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr

0800f4aa <LL_GPIO_SetPinSpeed>:
{
 800f4aa:	b480      	push	{r7}
 800f4ac:	b089      	sub	sp, #36	; 0x24
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	60f8      	str	r0, [r7, #12]
 800f4b2:	60b9      	str	r1, [r7, #8]
 800f4b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	689a      	ldr	r2, [r3, #8]
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	fa93 f3a3 	rbit	r3, r3
 800f4c4:	613b      	str	r3, [r7, #16]
  return result;
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	fab3 f383 	clz	r3, r3
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	005b      	lsls	r3, r3, #1
 800f4d0:	2103      	movs	r1, #3
 800f4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f4d6:	43db      	mvns	r3, r3
 800f4d8:	401a      	ands	r2, r3
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	fa93 f3a3 	rbit	r3, r3
 800f4e4:	61bb      	str	r3, [r7, #24]
  return result;
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	fab3 f383 	clz	r3, r3
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	005b      	lsls	r3, r3, #1
 800f4f0:	6879      	ldr	r1, [r7, #4]
 800f4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800f4f6:	431a      	orrs	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	609a      	str	r2, [r3, #8]
}
 800f4fc:	bf00      	nop
 800f4fe:	3724      	adds	r7, #36	; 0x24
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <LL_GPIO_SetPinPull>:
{
 800f508:	b480      	push	{r7}
 800f50a:	b089      	sub	sp, #36	; 0x24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	68da      	ldr	r2, [r3, #12]
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	fa93 f3a3 	rbit	r3, r3
 800f522:	613b      	str	r3, [r7, #16]
  return result;
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	fab3 f383 	clz	r3, r3
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	005b      	lsls	r3, r3, #1
 800f52e:	2103      	movs	r1, #3
 800f530:	fa01 f303 	lsl.w	r3, r1, r3
 800f534:	43db      	mvns	r3, r3
 800f536:	401a      	ands	r2, r3
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	fa93 f3a3 	rbit	r3, r3
 800f542:	61bb      	str	r3, [r7, #24]
  return result;
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	fab3 f383 	clz	r3, r3
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	fa01 f303 	lsl.w	r3, r1, r3
 800f554:	431a      	orrs	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	60da      	str	r2, [r3, #12]
}
 800f55a:	bf00      	nop
 800f55c:	3724      	adds	r7, #36	; 0x24
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr

0800f566 <LL_GPIO_SetAFPin_0_7>:
{
 800f566:	b480      	push	{r7}
 800f568:	b089      	sub	sp, #36	; 0x24
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	60f8      	str	r0, [r7, #12]
 800f56e:	60b9      	str	r1, [r7, #8]
 800f570:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6a1a      	ldr	r2, [r3, #32]
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	fa93 f3a3 	rbit	r3, r3
 800f580:	613b      	str	r3, [r7, #16]
  return result;
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	fab3 f383 	clz	r3, r3
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	210f      	movs	r1, #15
 800f58e:	fa01 f303 	lsl.w	r3, r1, r3
 800f592:	43db      	mvns	r3, r3
 800f594:	401a      	ands	r2, r3
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	fa93 f3a3 	rbit	r3, r3
 800f5a0:	61bb      	str	r3, [r7, #24]
  return result;
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	fab3 f383 	clz	r3, r3
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	6879      	ldr	r1, [r7, #4]
 800f5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f5b2:	431a      	orrs	r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	621a      	str	r2, [r3, #32]
}
 800f5b8:	bf00      	nop
 800f5ba:	3724      	adds	r7, #36	; 0x24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <LL_GPIO_SetAFPin_8_15>:
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b089      	sub	sp, #36	; 0x24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	0a1b      	lsrs	r3, r3, #8
 800f5d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	fa93 f3a3 	rbit	r3, r3
 800f5e0:	613b      	str	r3, [r7, #16]
  return result;
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	fab3 f383 	clz	r3, r3
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	210f      	movs	r1, #15
 800f5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f5f2:	43db      	mvns	r3, r3
 800f5f4:	401a      	ands	r2, r3
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	0a1b      	lsrs	r3, r3, #8
 800f5fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	fa93 f3a3 	rbit	r3, r3
 800f602:	61bb      	str	r3, [r7, #24]
  return result;
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	fab3 f383 	clz	r3, r3
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	6879      	ldr	r1, [r7, #4]
 800f610:	fa01 f303 	lsl.w	r3, r1, r3
 800f614:	431a      	orrs	r2, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f61a:	bf00      	nop
 800f61c:	3724      	adds	r7, #36	; 0x24
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
	...

0800f628 <LL_SYSCFG_SetEXTISource>:
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800f632:	4a13      	ldr	r2, [pc, #76]	; (800f680 <LL_SYSCFG_SetEXTISource+0x58>)
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	b2db      	uxtb	r3, r3
 800f638:	3302      	adds	r3, #2
 800f63a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	0c1b      	lsrs	r3, r3, #16
 800f642:	43db      	mvns	r3, r3
 800f644:	ea02 0103 	and.w	r1, r2, r3
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	0c1b      	lsrs	r3, r3, #16
 800f64c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	fa93 f3a3 	rbit	r3, r3
 800f654:	60bb      	str	r3, [r7, #8]
  return result;
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	fab3 f383 	clz	r3, r3
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	461a      	mov	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	fa03 f202 	lsl.w	r2, r3, r2
 800f666:	4806      	ldr	r0, [pc, #24]	; (800f680 <LL_SYSCFG_SetEXTISource+0x58>)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	430a      	orrs	r2, r1
 800f66e:	3302      	adds	r3, #2
 800f670:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800f674:	bf00      	nop
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	40013800 	.word	0x40013800

0800f684 <LL_SYSCFG_GetEXTISource>:
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800f68c:	4a0d      	ldr	r2, [pc, #52]	; (800f6c4 <LL_SYSCFG_GetEXTISource+0x40>)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	b2db      	uxtb	r3, r3
 800f692:	3302      	adds	r3, #2
 800f694:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	0c1b      	lsrs	r3, r3, #16
 800f69c:	4013      	ands	r3, r2
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	0c12      	lsrs	r2, r2, #16
 800f6a2:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	fa92 f2a2 	rbit	r2, r2
 800f6aa:	60ba      	str	r2, [r7, #8]
  return result;
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	fab2 f282 	clz	r2, r2
 800f6b2:	b2d2      	uxtb	r2, r2
 800f6b4:	40d3      	lsrs	r3, r2
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	40013800 	.word	0x40013800

0800f6c8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800f6d0:	4b05      	ldr	r3, [pc, #20]	; (800f6e8 <LL_EXTI_EnableIT_0_31+0x20>)
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	4904      	ldr	r1, [pc, #16]	; (800f6e8 <LL_EXTI_EnableIT_0_31+0x20>)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	600b      	str	r3, [r1, #0]
}
 800f6dc:	bf00      	nop
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	40013c00 	.word	0x40013c00

0800f6ec <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800f6f4:	4b06      	ldr	r3, [pc, #24]	; (800f710 <LL_EXTI_DisableIT_0_31+0x24>)
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	43db      	mvns	r3, r3
 800f6fc:	4904      	ldr	r1, [pc, #16]	; (800f710 <LL_EXTI_DisableIT_0_31+0x24>)
 800f6fe:	4013      	ands	r3, r2
 800f700:	600b      	str	r3, [r1, #0]
}
 800f702:	bf00      	nop
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	40013c00 	.word	0x40013c00

0800f714 <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 800f71c:	4b07      	ldr	r3, [pc, #28]	; (800f73c <LL_EXTI_IsEnabledIT_0_31+0x28>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4013      	ands	r3, r2
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	429a      	cmp	r2, r3
 800f728:	bf0c      	ite	eq
 800f72a:	2301      	moveq	r3, #1
 800f72c:	2300      	movne	r3, #0
 800f72e:	b2db      	uxtb	r3, r3
}
 800f730:	4618      	mov	r0, r3
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	40013c00 	.word	0x40013c00

0800f740 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800f748:	4b05      	ldr	r3, [pc, #20]	; (800f760 <LL_EXTI_EnableEvent_0_31+0x20>)
 800f74a:	685a      	ldr	r2, [r3, #4]
 800f74c:	4904      	ldr	r1, [pc, #16]	; (800f760 <LL_EXTI_EnableEvent_0_31+0x20>)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4313      	orrs	r3, r2
 800f752:	604b      	str	r3, [r1, #4]

}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr
 800f760:	40013c00 	.word	0x40013c00

0800f764 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800f76c:	4b05      	ldr	r3, [pc, #20]	; (800f784 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800f76e:	689a      	ldr	r2, [r3, #8]
 800f770:	4904      	ldr	r1, [pc, #16]	; (800f784 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4313      	orrs	r3, r2
 800f776:	608b      	str	r3, [r1, #8]

}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr
 800f784:	40013c00 	.word	0x40013c00

0800f788 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800f790:	4b06      	ldr	r3, [pc, #24]	; (800f7ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800f792:	689a      	ldr	r2, [r3, #8]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	43db      	mvns	r3, r3
 800f798:	4904      	ldr	r1, [pc, #16]	; (800f7ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800f79a:	4013      	ands	r3, r2
 800f79c:	608b      	str	r3, [r1, #8]

}
 800f79e:	bf00      	nop
 800f7a0:	370c      	adds	r7, #12
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	40013c00 	.word	0x40013c00

0800f7b0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800f7b8:	4b05      	ldr	r3, [pc, #20]	; (800f7d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800f7ba:	68da      	ldr	r2, [r3, #12]
 800f7bc:	4904      	ldr	r1, [pc, #16]	; (800f7d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	60cb      	str	r3, [r1, #12]
}
 800f7c4:	bf00      	nop
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	40013c00 	.word	0x40013c00

0800f7d4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800f7dc:	4b06      	ldr	r3, [pc, #24]	; (800f7f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800f7de:	68da      	ldr	r2, [r3, #12]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	43db      	mvns	r3, r3
 800f7e4:	4904      	ldr	r1, [pc, #16]	; (800f7f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800f7e6:	4013      	ands	r3, r2
 800f7e8:	60cb      	str	r3, [r1, #12]
}
 800f7ea:	bf00      	nop
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop
 800f7f8:	40013c00 	.word	0x40013c00

0800f7fc <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800f804:	4b07      	ldr	r3, [pc, #28]	; (800f824 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800f806:	695a      	ldr	r2, [r3, #20]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4013      	ands	r3, r2
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	429a      	cmp	r2, r3
 800f810:	bf0c      	ite	eq
 800f812:	2301      	moveq	r3, #1
 800f814:	2300      	movne	r3, #0
 800f816:	b2db      	uxtb	r3, r3
}
 800f818:	4618      	mov	r0, r3
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	40013c00 	.word	0x40013c00

0800f828 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800f830:	4a04      	ldr	r2, [pc, #16]	; (800f844 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6153      	str	r3, [r2, #20]
}
 800f836:	bf00      	nop
 800f838:	370c      	adds	r7, #12
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	40013c00 	.word	0x40013c00

0800f848 <hal_gpio_get_pin_number>:
static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio);
static void hal_gpio_exti_call(uint16_t pin_num);

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800f850:	2300      	movs	r3, #0
 800f852:	73fb      	strb	r3, [r7, #15]
 800f854:	e00c      	b.n	800f870 <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	889b      	ldrh	r3, [r3, #4]
 800f85a:	461a      	mov	r2, r3
 800f85c:	7bfb      	ldrb	r3, [r7, #15]
 800f85e:	fa42 f303 	asr.w	r3, r2, r3
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	2b00      	cmp	r3, #0
 800f868:	d106      	bne.n	800f878 <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
 800f86c:	3301      	adds	r3, #1
 800f86e:	73fb      	strb	r3, [r7, #15]
 800f870:	7bfb      	ldrb	r3, [r7, #15]
 800f872:	2b0f      	cmp	r3, #15
 800f874:	d9ef      	bls.n	800f856 <hal_gpio_get_pin_number+0xe>
 800f876:	e000      	b.n	800f87a <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 800f878:	bf00      	nop
	}
	return pin_number;
 800f87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3714      	adds	r7, #20
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af02      	add	r7, sp, #8
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	4608      	mov	r0, r1
 800f892:	4611      	mov	r1, r2
 800f894:	461a      	mov	r2, r3
 800f896:	4603      	mov	r3, r0
 800f898:	70fb      	strb	r3, [r7, #3]
 800f89a:	460b      	mov	r3, r1
 800f89c:	70bb      	strb	r3, [r7, #2]
 800f89e:	4613      	mov	r3, r2
 800f8a0:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 800f8a2:	787b      	ldrb	r3, [r7, #1]
 800f8a4:	78ba      	ldrb	r2, [r7, #2]
 800f8a6:	78f9      	ldrb	r1, [r7, #3]
 800f8a8:	2010      	movs	r0, #16
 800f8aa:	9000      	str	r0, [sp, #0]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 f805 	bl	800f8bc <hal_gpio_init_alt>
}
 800f8b2:	bf00      	nop
 800f8b4:	3708      	adds	r7, #8
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
	...

0800f8bc <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b086      	sub	sp, #24
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	4608      	mov	r0, r1
 800f8c6:	4611      	mov	r1, r2
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	70fb      	strb	r3, [r7, #3]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	70bb      	strb	r3, [r7, #2]
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a8d      	ldr	r2, [pc, #564]	; (800fb10 <hal_gpio_init_alt+0x254>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d02b      	beq.n	800f938 <hal_gpio_init_alt+0x7c>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a8b      	ldr	r2, [pc, #556]	; (800fb14 <hal_gpio_init_alt+0x258>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d024      	beq.n	800f934 <hal_gpio_init_alt+0x78>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a8a      	ldr	r2, [pc, #552]	; (800fb18 <hal_gpio_init_alt+0x25c>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d01d      	beq.n	800f930 <hal_gpio_init_alt+0x74>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a88      	ldr	r2, [pc, #544]	; (800fb1c <hal_gpio_init_alt+0x260>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d016      	beq.n	800f92c <hal_gpio_init_alt+0x70>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a87      	ldr	r2, [pc, #540]	; (800fb20 <hal_gpio_init_alt+0x264>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d00f      	beq.n	800f928 <hal_gpio_init_alt+0x6c>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a85      	ldr	r2, [pc, #532]	; (800fb24 <hal_gpio_init_alt+0x268>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d008      	beq.n	800f924 <hal_gpio_init_alt+0x68>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4a84      	ldr	r2, [pc, #528]	; (800fb28 <hal_gpio_init_alt+0x26c>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d101      	bne.n	800f920 <hal_gpio_init_alt+0x64>
 800f91c:	2306      	movs	r3, #6
 800f91e:	e00c      	b.n	800f93a <hal_gpio_init_alt+0x7e>
 800f920:	2307      	movs	r3, #7
 800f922:	e00a      	b.n	800f93a <hal_gpio_init_alt+0x7e>
 800f924:	2305      	movs	r3, #5
 800f926:	e008      	b.n	800f93a <hal_gpio_init_alt+0x7e>
 800f928:	2304      	movs	r3, #4
 800f92a:	e006      	b.n	800f93a <hal_gpio_init_alt+0x7e>
 800f92c:	2303      	movs	r3, #3
 800f92e:	e004      	b.n	800f93a <hal_gpio_init_alt+0x7e>
 800f930:	2302      	movs	r3, #2
 800f932:	e002      	b.n	800f93a <hal_gpio_init_alt+0x7e>
 800f934:	2301      	movs	r3, #1
 800f936:	e000      	b.n	800f93a <hal_gpio_init_alt+0x7e>
 800f938:	2300      	movs	r3, #0
 800f93a:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	889b      	ldrh	r3, [r3, #4]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d05f      	beq.n	800fa04 <hal_gpio_init_alt+0x148>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	889b      	ldrh	r3, [r3, #4]
 800f948:	2b02      	cmp	r3, #2
 800f94a:	d058      	beq.n	800f9fe <hal_gpio_init_alt+0x142>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	889b      	ldrh	r3, [r3, #4]
 800f950:	2b04      	cmp	r3, #4
 800f952:	d051      	beq.n	800f9f8 <hal_gpio_init_alt+0x13c>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	889b      	ldrh	r3, [r3, #4]
 800f958:	2b08      	cmp	r3, #8
 800f95a:	d04a      	beq.n	800f9f2 <hal_gpio_init_alt+0x136>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	889b      	ldrh	r3, [r3, #4]
 800f960:	2b10      	cmp	r3, #16
 800f962:	d044      	beq.n	800f9ee <hal_gpio_init_alt+0x132>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	889b      	ldrh	r3, [r3, #4]
 800f968:	2b20      	cmp	r3, #32
 800f96a:	d03e      	beq.n	800f9ea <hal_gpio_init_alt+0x12e>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	889b      	ldrh	r3, [r3, #4]
 800f970:	2b40      	cmp	r3, #64	; 0x40
 800f972:	d038      	beq.n	800f9e6 <hal_gpio_init_alt+0x12a>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	889b      	ldrh	r3, [r3, #4]
 800f978:	2b80      	cmp	r3, #128	; 0x80
 800f97a:	d032      	beq.n	800f9e2 <hal_gpio_init_alt+0x126>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	889b      	ldrh	r3, [r3, #4]
 800f980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f984:	d02b      	beq.n	800f9de <hal_gpio_init_alt+0x122>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	889b      	ldrh	r3, [r3, #4]
 800f98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f98e:	d024      	beq.n	800f9da <hal_gpio_init_alt+0x11e>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	889b      	ldrh	r3, [r3, #4]
 800f994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f998:	d01d      	beq.n	800f9d6 <hal_gpio_init_alt+0x11a>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	889b      	ldrh	r3, [r3, #4]
 800f99e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9a2:	d016      	beq.n	800f9d2 <hal_gpio_init_alt+0x116>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	889b      	ldrh	r3, [r3, #4]
 800f9a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9ac:	d00f      	beq.n	800f9ce <hal_gpio_init_alt+0x112>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	889b      	ldrh	r3, [r3, #4]
 800f9b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9b6:	d008      	beq.n	800f9ca <hal_gpio_init_alt+0x10e>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	889b      	ldrh	r3, [r3, #4]
 800f9bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f9c0:	d101      	bne.n	800f9c6 <hal_gpio_init_alt+0x10a>
 800f9c2:	4b5a      	ldr	r3, [pc, #360]	; (800fb2c <hal_gpio_init_alt+0x270>)
 800f9c4:	e020      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9c6:	4b5a      	ldr	r3, [pc, #360]	; (800fb30 <hal_gpio_init_alt+0x274>)
 800f9c8:	e01e      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9ca:	4b5a      	ldr	r3, [pc, #360]	; (800fb34 <hal_gpio_init_alt+0x278>)
 800f9cc:	e01c      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9ce:	4b5a      	ldr	r3, [pc, #360]	; (800fb38 <hal_gpio_init_alt+0x27c>)
 800f9d0:	e01a      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9d2:	4b5a      	ldr	r3, [pc, #360]	; (800fb3c <hal_gpio_init_alt+0x280>)
 800f9d4:	e018      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9d6:	4b5a      	ldr	r3, [pc, #360]	; (800fb40 <hal_gpio_init_alt+0x284>)
 800f9d8:	e016      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9da:	4b5a      	ldr	r3, [pc, #360]	; (800fb44 <hal_gpio_init_alt+0x288>)
 800f9dc:	e014      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9de:	4b5a      	ldr	r3, [pc, #360]	; (800fb48 <hal_gpio_init_alt+0x28c>)
 800f9e0:	e012      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9e2:	4b5a      	ldr	r3, [pc, #360]	; (800fb4c <hal_gpio_init_alt+0x290>)
 800f9e4:	e010      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9e6:	4b5a      	ldr	r3, [pc, #360]	; (800fb50 <hal_gpio_init_alt+0x294>)
 800f9e8:	e00e      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9ea:	4b5a      	ldr	r3, [pc, #360]	; (800fb54 <hal_gpio_init_alt+0x298>)
 800f9ec:	e00c      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9ee:	4b5a      	ldr	r3, [pc, #360]	; (800fb58 <hal_gpio_init_alt+0x29c>)
 800f9f0:	e00a      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9f2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800f9f6:	e007      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9f8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800f9fc:	e004      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800f9fe:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800fa02:	e001      	b.n	800fa08 <hal_gpio_init_alt+0x14c>
 800fa04:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800fa08:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	889b      	ldrh	r3, [r3, #4]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d064      	beq.n	800fadc <hal_gpio_init_alt+0x220>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	889b      	ldrh	r3, [r3, #4]
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d05e      	beq.n	800fad8 <hal_gpio_init_alt+0x21c>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	889b      	ldrh	r3, [r3, #4]
 800fa1e:	2b04      	cmp	r3, #4
 800fa20:	d058      	beq.n	800fad4 <hal_gpio_init_alt+0x218>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	889b      	ldrh	r3, [r3, #4]
 800fa26:	2b08      	cmp	r3, #8
 800fa28:	d052      	beq.n	800fad0 <hal_gpio_init_alt+0x214>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	889b      	ldrh	r3, [r3, #4]
 800fa2e:	2b10      	cmp	r3, #16
 800fa30:	d04c      	beq.n	800facc <hal_gpio_init_alt+0x210>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	889b      	ldrh	r3, [r3, #4]
 800fa36:	2b20      	cmp	r3, #32
 800fa38:	d046      	beq.n	800fac8 <hal_gpio_init_alt+0x20c>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	889b      	ldrh	r3, [r3, #4]
 800fa3e:	2b40      	cmp	r3, #64	; 0x40
 800fa40:	d040      	beq.n	800fac4 <hal_gpio_init_alt+0x208>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	889b      	ldrh	r3, [r3, #4]
 800fa46:	2b80      	cmp	r3, #128	; 0x80
 800fa48:	d03a      	beq.n	800fac0 <hal_gpio_init_alt+0x204>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	889b      	ldrh	r3, [r3, #4]
 800fa4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa52:	d032      	beq.n	800faba <hal_gpio_init_alt+0x1fe>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	889b      	ldrh	r3, [r3, #4]
 800fa58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa5c:	d02a      	beq.n	800fab4 <hal_gpio_init_alt+0x1f8>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	889b      	ldrh	r3, [r3, #4]
 800fa62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa66:	d022      	beq.n	800faae <hal_gpio_init_alt+0x1f2>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	889b      	ldrh	r3, [r3, #4]
 800fa6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa70:	d01a      	beq.n	800faa8 <hal_gpio_init_alt+0x1ec>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	889b      	ldrh	r3, [r3, #4]
 800fa76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa7a:	d012      	beq.n	800faa2 <hal_gpio_init_alt+0x1e6>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	889b      	ldrh	r3, [r3, #4]
 800fa80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa84:	d00a      	beq.n	800fa9c <hal_gpio_init_alt+0x1e0>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	889b      	ldrh	r3, [r3, #4]
 800fa8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa8e:	d102      	bne.n	800fa96 <hal_gpio_init_alt+0x1da>
 800fa90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fa94:	e023      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fa96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa9a:	e020      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fa9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800faa0:	e01d      	b.n	800fade <hal_gpio_init_alt+0x222>
 800faa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800faa6:	e01a      	b.n	800fade <hal_gpio_init_alt+0x222>
 800faa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800faac:	e017      	b.n	800fade <hal_gpio_init_alt+0x222>
 800faae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fab2:	e014      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fab8:	e011      	b.n	800fade <hal_gpio_init_alt+0x222>
 800faba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fabe:	e00e      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fac0:	2380      	movs	r3, #128	; 0x80
 800fac2:	e00c      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fac4:	2340      	movs	r3, #64	; 0x40
 800fac6:	e00a      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fac8:	2320      	movs	r3, #32
 800faca:	e008      	b.n	800fade <hal_gpio_init_alt+0x222>
 800facc:	2310      	movs	r3, #16
 800face:	e006      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fad0:	2308      	movs	r3, #8
 800fad2:	e004      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fad4:	2304      	movs	r3, #4
 800fad6:	e002      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fad8:	2302      	movs	r3, #2
 800fada:	e000      	b.n	800fade <hal_gpio_init_alt+0x222>
 800fadc:	2301      	movs	r3, #1
 800fade:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 800fae0:	787b      	ldrb	r3, [r7, #1]
 800fae2:	2b03      	cmp	r3, #3
 800fae4:	d855      	bhi.n	800fb92 <hal_gpio_init_alt+0x2d6>
 800fae6:	a201      	add	r2, pc, #4	; (adr r2, 800faec <hal_gpio_init_alt+0x230>)
 800fae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faec:	0800fafd 	.word	0x0800fafd
 800faf0:	0800fb5d 	.word	0x0800fb5d
 800faf4:	0800fb6f 	.word	0x0800fb6f
 800faf8:	0800fb81 	.word	0x0800fb81
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6818      	ldr	r0, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	889b      	ldrh	r3, [r3, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	4619      	mov	r1, r3
 800fb08:	f7ff fccf 	bl	800f4aa <LL_GPIO_SetPinSpeed>
		break;
 800fb0c:	e041      	b.n	800fb92 <hal_gpio_init_alt+0x2d6>
 800fb0e:	bf00      	nop
 800fb10:	40020000 	.word	0x40020000
 800fb14:	40020400 	.word	0x40020400
 800fb18:	40020800 	.word	0x40020800
 800fb1c:	40020c00 	.word	0x40020c00
 800fb20:	40021000 	.word	0x40021000
 800fb24:	40021400 	.word	0x40021400
 800fb28:	40021800 	.word	0x40021800
 800fb2c:	0f000003 	.word	0x0f000003
 800fb30:	f0000003 	.word	0xf0000003
 800fb34:	00f00003 	.word	0x00f00003
 800fb38:	000f0003 	.word	0x000f0003
 800fb3c:	f0000002 	.word	0xf0000002
 800fb40:	0f000002 	.word	0x0f000002
 800fb44:	00f00002 	.word	0x00f00002
 800fb48:	000f0002 	.word	0x000f0002
 800fb4c:	f0000001 	.word	0xf0000001
 800fb50:	0f000001 	.word	0x0f000001
 800fb54:	00f00001 	.word	0x00f00001
 800fb58:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6818      	ldr	r0, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	889b      	ldrh	r3, [r3, #4]
 800fb64:	2201      	movs	r2, #1
 800fb66:	4619      	mov	r1, r3
 800fb68:	f7ff fc9f 	bl	800f4aa <LL_GPIO_SetPinSpeed>
		break;
 800fb6c:	e011      	b.n	800fb92 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	889b      	ldrh	r3, [r3, #4]
 800fb76:	2202      	movs	r2, #2
 800fb78:	4619      	mov	r1, r3
 800fb7a:	f7ff fc96 	bl	800f4aa <LL_GPIO_SetPinSpeed>
		break;
 800fb7e:	e008      	b.n	800fb92 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6818      	ldr	r0, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	889b      	ldrh	r3, [r3, #4]
 800fb88:	2203      	movs	r2, #3
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	f7ff fc8d 	bl	800f4aa <LL_GPIO_SetPinSpeed>
		break;
 800fb90:	bf00      	nop
	}

	switch(pull) {
 800fb92:	78bb      	ldrb	r3, [r7, #2]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d018      	beq.n	800fbca <hal_gpio_init_alt+0x30e>
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	dc1f      	bgt.n	800fbdc <hal_gpio_init_alt+0x320>
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <hal_gpio_init_alt+0x2ea>
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d009      	beq.n	800fbb8 <hal_gpio_init_alt+0x2fc>
 800fba4:	e01a      	b.n	800fbdc <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6818      	ldr	r0, [r3, #0]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	889b      	ldrh	r3, [r3, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	f7ff fca9 	bl	800f508 <LL_GPIO_SetPinPull>
		break;
 800fbb6:	e011      	b.n	800fbdc <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6818      	ldr	r0, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	889b      	ldrh	r3, [r3, #4]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	f7ff fca0 	bl	800f508 <LL_GPIO_SetPinPull>
		break;
 800fbc8:	e008      	b.n	800fbdc <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6818      	ldr	r0, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	889b      	ldrh	r3, [r3, #4]
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	f7ff fc97 	bl	800f508 <LL_GPIO_SetPinPull>
		break;
 800fbda:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 800fbdc:	78fb      	ldrb	r3, [r7, #3]
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	d93d      	bls.n	800fc5e <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6818      	ldr	r0, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	889b      	ldrh	r3, [r3, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	4619      	mov	r1, r3
 800fbee:	f7ff fc15 	bl	800f41c <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 800fbf2:	6939      	ldr	r1, [r7, #16]
 800fbf4:	6978      	ldr	r0, [r7, #20]
 800fbf6:	f7ff fd17 	bl	800f628 <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 800fbfa:	78fb      	ldrb	r3, [r7, #3]
 800fbfc:	2b06      	cmp	r3, #6
 800fbfe:	d002      	beq.n	800fc06 <hal_gpio_init_alt+0x34a>
 800fc00:	78fb      	ldrb	r3, [r7, #3]
 800fc02:	2b08      	cmp	r3, #8
 800fc04:	d105      	bne.n	800fc12 <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f7ff fd5e 	bl	800f6c8 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f7ff fda9 	bl	800f764 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 800fc12:	78fb      	ldrb	r3, [r7, #3]
 800fc14:	2b07      	cmp	r3, #7
 800fc16:	d002      	beq.n	800fc1e <hal_gpio_init_alt+0x362>
 800fc18:	78fb      	ldrb	r3, [r7, #3]
 800fc1a:	2b08      	cmp	r3, #8
 800fc1c:	d105      	bne.n	800fc2a <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	f7ff fd52 	bl	800f6c8 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800fc24:	68f8      	ldr	r0, [r7, #12]
 800fc26:	f7ff fdc3 	bl	800f7b0 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 800fc2a:	78fb      	ldrb	r3, [r7, #3]
 800fc2c:	2b09      	cmp	r3, #9
 800fc2e:	d002      	beq.n	800fc36 <hal_gpio_init_alt+0x37a>
 800fc30:	78fb      	ldrb	r3, [r7, #3]
 800fc32:	2b0b      	cmp	r3, #11
 800fc34:	d105      	bne.n	800fc42 <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7ff fd82 	bl	800f740 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f7ff fd91 	bl	800f764 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 800fc42:	78fb      	ldrb	r3, [r7, #3]
 800fc44:	2b0a      	cmp	r3, #10
 800fc46:	d003      	beq.n	800fc50 <hal_gpio_init_alt+0x394>
 800fc48:	78fb      	ldrb	r3, [r7, #3]
 800fc4a:	2b0b      	cmp	r3, #11
 800fc4c:	f040 80a7 	bne.w	800fd9e <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f7ff fd39 	bl	800f6c8 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f7ff fdaa 	bl	800f7b0 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 800fc5c:	e09f      	b.n	800fd9e <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800fc5e:	6938      	ldr	r0, [r7, #16]
 800fc60:	f7ff fd10 	bl	800f684 <LL_SYSCFG_GetEXTISource>
 800fc64:	4602      	mov	r2, r0
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d10e      	bne.n	800fc8a <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f7ff fd51 	bl	800f714 <LL_EXTI_IsEnabledIT_0_31>
 800fc72:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d008      	beq.n	800fc8a <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff fd37 	bl	800f6ec <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f7ff fda8 	bl	800f7d4 <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f7ff fd7f 	bl	800f788 <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 800fc8a:	78fb      	ldrb	r3, [r7, #3]
 800fc8c:	2b03      	cmp	r3, #3
 800fc8e:	d002      	beq.n	800fc96 <hal_gpio_init_alt+0x3da>
 800fc90:	78fb      	ldrb	r3, [r7, #3]
 800fc92:	2b04      	cmp	r3, #4
 800fc94:	d11a      	bne.n	800fccc <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff fdd6 	bl	800f848 <hal_gpio_get_pin_number>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b07      	cmp	r3, #7
 800fca0:	d80a      	bhi.n	800fcb8 <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6818      	ldr	r0, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	889b      	ldrh	r3, [r3, #4]
 800fcaa:	4619      	mov	r1, r3
 800fcac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	f7ff fc58 	bl	800f566 <LL_GPIO_SetAFPin_0_7>
 800fcb6:	e009      	b.n	800fccc <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6818      	ldr	r0, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	889b      	ldrh	r3, [r3, #4]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	f7ff fc7c 	bl	800f5c4 <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 800fccc:	78fb      	ldrb	r3, [r7, #3]
 800fcce:	2b05      	cmp	r3, #5
 800fcd0:	d864      	bhi.n	800fd9c <hal_gpio_init_alt+0x4e0>
 800fcd2:	a201      	add	r2, pc, #4	; (adr r2, 800fcd8 <hal_gpio_init_alt+0x41c>)
 800fcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd8:	0800fcf1 	.word	0x0800fcf1
 800fcdc:	0800fd03 	.word	0x0800fd03
 800fce0:	0800fd25 	.word	0x0800fd25
 800fce4:	0800fd47 	.word	0x0800fd47
 800fce8:	0800fd69 	.word	0x0800fd69
 800fcec:	0800fd8b 	.word	0x0800fd8b
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6818      	ldr	r0, [r3, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	889b      	ldrh	r3, [r3, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	f7ff fb8e 	bl	800f41c <LL_GPIO_SetPinMode>
			break;
 800fd00:	e04d      	b.n	800fd9e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6818      	ldr	r0, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	889b      	ldrh	r3, [r3, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	f7ff fb85 	bl	800f41c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6818      	ldr	r0, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	889b      	ldrh	r3, [r3, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	f7ff fbac 	bl	800f47a <LL_GPIO_SetPinOutputType>
			break;
 800fd22:	e03c      	b.n	800fd9e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6818      	ldr	r0, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	889b      	ldrh	r3, [r3, #4]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	4619      	mov	r1, r3
 800fd30:	f7ff fb74 	bl	800f41c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6818      	ldr	r0, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	889b      	ldrh	r3, [r3, #4]
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	4619      	mov	r1, r3
 800fd40:	f7ff fb9b 	bl	800f47a <LL_GPIO_SetPinOutputType>
			break;
 800fd44:	e02b      	b.n	800fd9e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6818      	ldr	r0, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	889b      	ldrh	r3, [r3, #4]
 800fd4e:	2202      	movs	r2, #2
 800fd50:	4619      	mov	r1, r3
 800fd52:	f7ff fb63 	bl	800f41c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	889b      	ldrh	r3, [r3, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	4619      	mov	r1, r3
 800fd62:	f7ff fb8a 	bl	800f47a <LL_GPIO_SetPinOutputType>
			break;
 800fd66:	e01a      	b.n	800fd9e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6818      	ldr	r0, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	889b      	ldrh	r3, [r3, #4]
 800fd70:	2202      	movs	r2, #2
 800fd72:	4619      	mov	r1, r3
 800fd74:	f7ff fb52 	bl	800f41c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6818      	ldr	r0, [r3, #0]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	889b      	ldrh	r3, [r3, #4]
 800fd80:	2201      	movs	r2, #1
 800fd82:	4619      	mov	r1, r3
 800fd84:	f7ff fb79 	bl	800f47a <LL_GPIO_SetPinOutputType>
			break;
 800fd88:	e009      	b.n	800fd9e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6818      	ldr	r0, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	889b      	ldrh	r3, [r3, #4]
 800fd92:	2203      	movs	r2, #3
 800fd94:	4619      	mov	r1, r3
 800fd96:	f7ff fb41 	bl	800f41c <LL_GPIO_SetPinMode>
			break;
 800fd9a:	e000      	b.n	800fd9e <hal_gpio_init_alt+0x4e2>
			break;
 800fd9c:	bf00      	nop
}
 800fd9e:	bf00      	nop
 800fda0:	3718      	adds	r7, #24
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop

0800fda8 <hal_gpio_exti_call>:
	gpio_interrupt[pin].context = context;
	gpio_interrupt[pin].ready = true;
	taskEXIT_CRITICAL();
}

static void hal_gpio_exti_call(uint16_t pin_num) {
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	4603      	mov	r3, r0
 800fdb0:	80fb      	strh	r3, [r7, #6]
	if(gpio_interrupt[pin_num].callback && gpio_interrupt[pin_num].ready) {
 800fdb2:	88fa      	ldrh	r2, [r7, #6]
 800fdb4:	4915      	ldr	r1, [pc, #84]	; (800fe0c <hal_gpio_exti_call+0x64>)
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	4413      	add	r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	440b      	add	r3, r1
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d01e      	beq.n	800fe04 <hal_gpio_exti_call+0x5c>
 800fdc6:	88fa      	ldrh	r2, [r7, #6]
 800fdc8:	4910      	ldr	r1, [pc, #64]	; (800fe0c <hal_gpio_exti_call+0x64>)
 800fdca:	4613      	mov	r3, r2
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	4413      	add	r3, r2
 800fdd0:	009b      	lsls	r3, r3, #2
 800fdd2:	440b      	add	r3, r1
 800fdd4:	3308      	adds	r3, #8
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d012      	beq.n	800fe04 <hal_gpio_exti_call+0x5c>
		gpio_interrupt[pin_num].callback(gpio_interrupt[pin_num].context);
 800fdde:	88fa      	ldrh	r2, [r7, #6]
 800fde0:	490a      	ldr	r1, [pc, #40]	; (800fe0c <hal_gpio_exti_call+0x64>)
 800fde2:	4613      	mov	r3, r2
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	440b      	add	r3, r1
 800fdec:	6819      	ldr	r1, [r3, #0]
 800fdee:	88fa      	ldrh	r2, [r7, #6]
 800fdf0:	4806      	ldr	r0, [pc, #24]	; (800fe0c <hal_gpio_exti_call+0x64>)
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	005b      	lsls	r3, r3, #1
 800fdf6:	4413      	add	r3, r2
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	4403      	add	r3, r0
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4618      	mov	r0, r3
 800fe02:	4788      	blx	r1
	}
}
 800fe04:	bf00      	nop
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	20006ca0 	.word	0x20006ca0

0800fe10 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 800fe10:	b580      	push	{r7, lr}
 800fe12:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0)) {
 800fe14:	2001      	movs	r0, #1
 800fe16:	f7ff fcf1 	bl	800f7fc <LL_EXTI_IsActiveFlag_0_31>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d005      	beq.n	800fe2c <EXTI0_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800fe20:	2001      	movs	r0, #1
 800fe22:	f7ff fd01 	bl	800f828 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(0);
 800fe26:	2000      	movs	r0, #0
 800fe28:	f7ff ffbe 	bl	800fda8 <hal_gpio_exti_call>
    }
}
 800fe2c:	bf00      	nop
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 800fe30:	b580      	push	{r7, lr}
 800fe32:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1)) {
 800fe34:	2002      	movs	r0, #2
 800fe36:	f7ff fce1 	bl	800f7fc <LL_EXTI_IsActiveFlag_0_31>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d005      	beq.n	800fe4c <EXTI1_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800fe40:	2002      	movs	r0, #2
 800fe42:	f7ff fcf1 	bl	800f828 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(1);
 800fe46:	2001      	movs	r0, #1
 800fe48:	f7ff ffae 	bl	800fda8 <hal_gpio_exti_call>
    }
}
 800fe4c:	bf00      	nop
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 800fe50:	b580      	push	{r7, lr}
 800fe52:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2)) {
 800fe54:	2004      	movs	r0, #4
 800fe56:	f7ff fcd1 	bl	800f7fc <LL_EXTI_IsActiveFlag_0_31>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d005      	beq.n	800fe6c <EXTI2_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800fe60:	2004      	movs	r0, #4
 800fe62:	f7ff fce1 	bl	800f828 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(2);
 800fe66:	2002      	movs	r0, #2
 800fe68:	f7ff ff9e 	bl	800fda8 <hal_gpio_exti_call>
    }
}
 800fe6c:	bf00      	nop
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 800fe70:	b580      	push	{r7, lr}
 800fe72:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3)) {
 800fe74:	2008      	movs	r0, #8
 800fe76:	f7ff fcc1 	bl	800f7fc <LL_EXTI_IsActiveFlag_0_31>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d005      	beq.n	800fe8c <EXTI3_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800fe80:	2008      	movs	r0, #8
 800fe82:	f7ff fcd1 	bl	800f828 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(3);
 800fe86:	2003      	movs	r0, #3
 800fe88:	f7ff ff8e 	bl	800fda8 <hal_gpio_exti_call>
    }
}
 800fe8c:	bf00      	nop
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4)) {
 800fe94:	2010      	movs	r0, #16
 800fe96:	f7ff fcb1 	bl	800f7fc <LL_EXTI_IsActiveFlag_0_31>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d005      	beq.n	800feac <EXTI4_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800fea0:	2010      	movs	r0, #16
 800fea2:	f7ff fcc1 	bl	800f828 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(4);
 800fea6:	2004      	movs	r0, #4
 800fea8:	f7ff ff7e 	bl	800fda8 <hal_gpio_exti_call>
    }
}
 800feac:	bf00      	nop
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
        __asm volatile
 800feb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	607b      	str	r3, [r7, #4]
    }
 800fec8:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800feca:	e7fe      	b.n	800feca <vApplicationMallocFailedHook+0x1a>

0800fecc <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
        __asm volatile
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	f383 8811 	msr	BASEPRI, r3
 800fede:	f3bf 8f6f 	isb	sy
 800fee2:	f3bf 8f4f 	dsb	sy
 800fee6:	60fb      	str	r3, [r7, #12]
    }
 800fee8:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800feea:	e7fe      	b.n	800feea <vApplicationStackOverflowHook+0x1e>

0800feec <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	4a07      	ldr	r2, [pc, #28]	; (800ff18 <vApplicationGetIdleTaskMemory+0x2c>)
 800fefc:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	4a06      	ldr	r2, [pc, #24]	; (800ff1c <vApplicationGetIdleTaskMemory+0x30>)
 800ff02:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff0a:	601a      	str	r2, [r3, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	20006d60 	.word	0x20006d60
 800ff1c:	20006dbc 	.word	0x20006dbc

0800ff20 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	4a07      	ldr	r2, [pc, #28]	; (800ff4c <vApplicationGetTimerTaskMemory+0x2c>)
 800ff30:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	4a06      	ldr	r2, [pc, #24]	; (800ff50 <vApplicationGetTimerTaskMemory+0x30>)
 800ff36:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff3e:	601a      	str	r2, [r3, #0]
}
 800ff40:	bf00      	nop
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	200075bc 	.word	0x200075bc
 800ff50:	20007618 	.word	0x20007618

0800ff54 <__NVIC_GetPriorityGrouping>:
{
 800ff54:	b480      	push	{r7}
 800ff56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ff58:	4b04      	ldr	r3, [pc, #16]	; (800ff6c <__NVIC_GetPriorityGrouping+0x18>)
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	0a1b      	lsrs	r3, r3, #8
 800ff5e:	f003 0307 	and.w	r3, r3, #7
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	e000ed00 	.word	0xe000ed00

0800ff70 <__NVIC_EnableIRQ>:
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ff7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	db0b      	blt.n	800ff9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	f003 021f 	and.w	r2, r3, #31
 800ff88:	4907      	ldr	r1, [pc, #28]	; (800ffa8 <__NVIC_EnableIRQ+0x38>)
 800ff8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff8e:	095b      	lsrs	r3, r3, #5
 800ff90:	2001      	movs	r0, #1
 800ff92:	fa00 f202 	lsl.w	r2, r0, r2
 800ff96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ff9a:	bf00      	nop
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	e000e100 	.word	0xe000e100

0800ffac <__NVIC_SetPriority>:
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	6039      	str	r1, [r7, #0]
 800ffb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ffb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	db0a      	blt.n	800ffd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	b2da      	uxtb	r2, r3
 800ffc4:	490c      	ldr	r1, [pc, #48]	; (800fff8 <__NVIC_SetPriority+0x4c>)
 800ffc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffca:	0112      	lsls	r2, r2, #4
 800ffcc:	b2d2      	uxtb	r2, r2
 800ffce:	440b      	add	r3, r1
 800ffd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ffd4:	e00a      	b.n	800ffec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	b2da      	uxtb	r2, r3
 800ffda:	4908      	ldr	r1, [pc, #32]	; (800fffc <__NVIC_SetPriority+0x50>)
 800ffdc:	79fb      	ldrb	r3, [r7, #7]
 800ffde:	f003 030f 	and.w	r3, r3, #15
 800ffe2:	3b04      	subs	r3, #4
 800ffe4:	0112      	lsls	r2, r2, #4
 800ffe6:	b2d2      	uxtb	r2, r2
 800ffe8:	440b      	add	r3, r1
 800ffea:	761a      	strb	r2, [r3, #24]
}
 800ffec:	bf00      	nop
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	e000e100 	.word	0xe000e100
 800fffc:	e000ed00 	.word	0xe000ed00

08010000 <NVIC_EncodePriority>:
{
 8010000:	b480      	push	{r7}
 8010002:	b089      	sub	sp, #36	; 0x24
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f003 0307 	and.w	r3, r3, #7
 8010012:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	f1c3 0307 	rsb	r3, r3, #7
 801001a:	2b04      	cmp	r3, #4
 801001c:	bf28      	it	cs
 801001e:	2304      	movcs	r3, #4
 8010020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	3304      	adds	r3, #4
 8010026:	2b06      	cmp	r3, #6
 8010028:	d902      	bls.n	8010030 <NVIC_EncodePriority+0x30>
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	3b03      	subs	r3, #3
 801002e:	e000      	b.n	8010032 <NVIC_EncodePriority+0x32>
 8010030:	2300      	movs	r3, #0
 8010032:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010038:	69bb      	ldr	r3, [r7, #24]
 801003a:	fa02 f303 	lsl.w	r3, r2, r3
 801003e:	43da      	mvns	r2, r3
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	401a      	ands	r2, r3
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	fa01 f303 	lsl.w	r3, r1, r3
 8010052:	43d9      	mvns	r1, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010058:	4313      	orrs	r3, r2
}
 801005a:	4618      	mov	r0, r3
 801005c:	3724      	adds	r7, #36	; 0x24
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr

08010066 <LL_I2C_EnableClockStretching>:
{
 8010066:	b480      	push	{r7}
 8010068:	b083      	sub	sp, #12
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	601a      	str	r2, [r3, #0]
}
 801007a:	bf00      	nop
 801007c:	370c      	adds	r7, #12
 801007e:	46bd      	mov	sp, r7
 8010080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010084:	4770      	bx	lr

08010086 <LL_I2C_DisableGeneralCall>:
{
 8010086:	b480      	push	{r7}
 8010088:	b083      	sub	sp, #12
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	601a      	str	r2, [r3, #0]
}
 801009a:	bf00      	nop
 801009c:	370c      	adds	r7, #12
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr

080100a6 <LL_I2C_SetOwnAddress2>:
{
 80100a6:	b480      	push	{r7}
 80100a8:	b083      	sub	sp, #12
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	431a      	orrs	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	60da      	str	r2, [r3, #12]
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <LL_I2C_DisableOwnAddress2>:
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	f023 0201 	bic.w	r2, r3, #1
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	60da      	str	r2, [r3, #12]
}
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <LL_I2C_IsActiveFlag_TXE>:
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	695b      	ldr	r3, [r3, #20]
 80100f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100fc:	2b80      	cmp	r3, #128	; 0x80
 80100fe:	bf0c      	ite	eq
 8010100:	2301      	moveq	r3, #1
 8010102:	2300      	movne	r3, #0
 8010104:	b2db      	uxtb	r3, r3
}
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <LL_I2C_IsActiveFlag_BTF>:
{
 8010112:	b480      	push	{r7}
 8010114:	b083      	sub	sp, #12
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	695b      	ldr	r3, [r3, #20]
 801011e:	f003 0304 	and.w	r3, r3, #4
 8010122:	2b04      	cmp	r3, #4
 8010124:	bf0c      	ite	eq
 8010126:	2301      	moveq	r3, #1
 8010128:	2300      	movne	r3, #0
 801012a:	b2db      	uxtb	r3, r3
}
 801012c:	4618      	mov	r0, r3
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <LL_I2C_IsActiveFlag_RXNE>:
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	695b      	ldr	r3, [r3, #20]
 8010144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010148:	2b40      	cmp	r3, #64	; 0x40
 801014a:	bf0c      	ite	eq
 801014c:	2301      	moveq	r3, #1
 801014e:	2300      	movne	r3, #0
 8010150:	b2db      	uxtb	r3, r3
}
 8010152:	4618      	mov	r0, r3
 8010154:	370c      	adds	r7, #12
 8010156:	46bd      	mov	sp, r7
 8010158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015c:	4770      	bx	lr

0801015e <LL_I2C_IsActiveFlag_SB>:
{
 801015e:	b480      	push	{r7}
 8010160:	b083      	sub	sp, #12
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	f003 0301 	and.w	r3, r3, #1
 801016e:	2b01      	cmp	r3, #1
 8010170:	bf0c      	ite	eq
 8010172:	2301      	moveq	r3, #1
 8010174:	2300      	movne	r3, #0
 8010176:	b2db      	uxtb	r3, r3
}
 8010178:	4618      	mov	r0, r3
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <LL_I2C_IsActiveFlag_ADDR>:
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	f003 0302 	and.w	r3, r3, #2
 8010194:	2b02      	cmp	r3, #2
 8010196:	bf0c      	ite	eq
 8010198:	2301      	moveq	r3, #1
 801019a:	2300      	movne	r3, #0
 801019c:	b2db      	uxtb	r3, r3
}
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <LL_I2C_IsActiveFlag_BUSY>:
{
 80101aa:	b480      	push	{r7}
 80101ac:	b083      	sub	sp, #12
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	699b      	ldr	r3, [r3, #24]
 80101b6:	f003 0302 	and.w	r3, r3, #2
 80101ba:	2b02      	cmp	r3, #2
 80101bc:	bf0c      	ite	eq
 80101be:	2301      	moveq	r3, #1
 80101c0:	2300      	movne	r3, #0
 80101c2:	b2db      	uxtb	r3, r3
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	370c      	adds	r7, #12
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr

080101d0 <LL_I2C_ClearFlag_ADDR>:
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	695b      	ldr	r3, [r3, #20]
 80101dc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80101de:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	699b      	ldr	r3, [r3, #24]
 80101e4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80101e6:	68fb      	ldr	r3, [r7, #12]
}
 80101e8:	bf00      	nop
 80101ea:	3714      	adds	r7, #20
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr

080101f4 <LL_I2C_AcknowledgeNextData>:
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	431a      	orrs	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	601a      	str	r2, [r3, #0]
}
 801020e:	bf00      	nop
 8010210:	370c      	adds	r7, #12
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr

0801021a <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 801021a:	b480      	push	{r7}
 801021c:	b083      	sub	sp, #12
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	601a      	str	r2, [r3, #0]
}
 801022e:	bf00      	nop
 8010230:	370c      	adds	r7, #12
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 801023a:	b480      	push	{r7}
 801023c:	b083      	sub	sp, #12
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	601a      	str	r2, [r3, #0]
}
 801024e:	bf00      	nop
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 801025a:	b480      	push	{r7}
 801025c:	b083      	sub	sp, #12
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	691b      	ldr	r3, [r3, #16]
 8010266:	b2db      	uxtb	r3, r3
}
 8010268:	4618      	mov	r0, r3
 801026a:	370c      	adds	r7, #12
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr

08010274 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	460b      	mov	r3, r1
 801027e:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	691b      	ldr	r3, [r3, #16]
 8010284:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010288:	78fb      	ldrb	r3, [r7, #3]
 801028a:	431a      	orrs	r2, r3
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	611a      	str	r2, [r3, #16]
}
 8010290:	bf00      	nop
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <LL_DMA_SetDataTransferDirection>:
{
 801029c:	b480      	push	{r7}
 801029e:	b085      	sub	sp, #20
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80102a8:	4a0d      	ldr	r2, [pc, #52]	; (80102e0 <LL_DMA_SetDataTransferDirection+0x44>)
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	4413      	add	r3, r2
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	461a      	mov	r2, r3
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	4413      	add	r3, r2
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80102bc:	4908      	ldr	r1, [pc, #32]	; (80102e0 <LL_DMA_SetDataTransferDirection+0x44>)
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	440b      	add	r3, r1
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	4619      	mov	r1, r3
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	440b      	add	r3, r1
 80102ca:	4619      	mov	r1, r3
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	600b      	str	r3, [r1, #0]
}
 80102d2:	bf00      	nop
 80102d4:	3714      	adds	r7, #20
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	08014214 	.word	0x08014214

080102e4 <LL_DMA_SetMode>:
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80102f0:	4a0d      	ldr	r2, [pc, #52]	; (8010328 <LL_DMA_SetMode+0x44>)
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	4413      	add	r3, r2
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	461a      	mov	r2, r3
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	4413      	add	r3, r2
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8010304:	4908      	ldr	r1, [pc, #32]	; (8010328 <LL_DMA_SetMode+0x44>)
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	440b      	add	r3, r1
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	4619      	mov	r1, r3
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	440b      	add	r3, r1
 8010312:	4619      	mov	r1, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4313      	orrs	r3, r2
 8010318:	600b      	str	r3, [r1, #0]
}
 801031a:	bf00      	nop
 801031c:	3714      	adds	r7, #20
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	08014214 	.word	0x08014214

0801032c <LL_DMA_SetPeriphIncMode>:
{
 801032c:	b480      	push	{r7}
 801032e:	b085      	sub	sp, #20
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8010338:	4a0d      	ldr	r2, [pc, #52]	; (8010370 <LL_DMA_SetPeriphIncMode+0x44>)
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	4413      	add	r3, r2
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	461a      	mov	r2, r3
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	4413      	add	r3, r2
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801034c:	4908      	ldr	r1, [pc, #32]	; (8010370 <LL_DMA_SetPeriphIncMode+0x44>)
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	440b      	add	r3, r1
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	4619      	mov	r1, r3
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	440b      	add	r3, r1
 801035a:	4619      	mov	r1, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4313      	orrs	r3, r2
 8010360:	600b      	str	r3, [r1, #0]
}
 8010362:	bf00      	nop
 8010364:	3714      	adds	r7, #20
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	08014214 	.word	0x08014214

08010374 <LL_DMA_SetMemoryIncMode>:
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8010380:	4a0d      	ldr	r2, [pc, #52]	; (80103b8 <LL_DMA_SetMemoryIncMode+0x44>)
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	4413      	add	r3, r2
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	461a      	mov	r2, r3
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	4413      	add	r3, r2
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010394:	4908      	ldr	r1, [pc, #32]	; (80103b8 <LL_DMA_SetMemoryIncMode+0x44>)
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	440b      	add	r3, r1
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	4619      	mov	r1, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	440b      	add	r3, r1
 80103a2:	4619      	mov	r1, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4313      	orrs	r3, r2
 80103a8:	600b      	str	r3, [r1, #0]
}
 80103aa:	bf00      	nop
 80103ac:	3714      	adds	r7, #20
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	08014214 	.word	0x08014214

080103bc <LL_DMA_SetPeriphSize>:
{
 80103bc:	b480      	push	{r7}
 80103be:	b085      	sub	sp, #20
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80103c8:	4a0d      	ldr	r2, [pc, #52]	; (8010400 <LL_DMA_SetPeriphSize+0x44>)
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	4413      	add	r3, r2
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	461a      	mov	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	4413      	add	r3, r2
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80103dc:	4908      	ldr	r1, [pc, #32]	; (8010400 <LL_DMA_SetPeriphSize+0x44>)
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	440b      	add	r3, r1
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	4619      	mov	r1, r3
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	440b      	add	r3, r1
 80103ea:	4619      	mov	r1, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4313      	orrs	r3, r2
 80103f0:	600b      	str	r3, [r1, #0]
}
 80103f2:	bf00      	nop
 80103f4:	3714      	adds	r7, #20
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	08014214 	.word	0x08014214

08010404 <LL_DMA_SetMemorySize>:
{
 8010404:	b480      	push	{r7}
 8010406:	b085      	sub	sp, #20
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8010410:	4a0d      	ldr	r2, [pc, #52]	; (8010448 <LL_DMA_SetMemorySize+0x44>)
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	4413      	add	r3, r2
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	461a      	mov	r2, r3
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	4413      	add	r3, r2
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8010424:	4908      	ldr	r1, [pc, #32]	; (8010448 <LL_DMA_SetMemorySize+0x44>)
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	440b      	add	r3, r1
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	4619      	mov	r1, r3
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	440b      	add	r3, r1
 8010432:	4619      	mov	r1, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4313      	orrs	r3, r2
 8010438:	600b      	str	r3, [r1, #0]
}
 801043a:	bf00      	nop
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	08014214 	.word	0x08014214

0801044c <LL_DMA_SetStreamPriorityLevel>:
{
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8010458:	4a0d      	ldr	r2, [pc, #52]	; (8010490 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	4413      	add	r3, r2
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	461a      	mov	r2, r3
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	4413      	add	r3, r2
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801046c:	4908      	ldr	r1, [pc, #32]	; (8010490 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	440b      	add	r3, r1
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	4619      	mov	r1, r3
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	440b      	add	r3, r1
 801047a:	4619      	mov	r1, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4313      	orrs	r3, r2
 8010480:	600b      	str	r3, [r1, #0]
}
 8010482:	bf00      	nop
 8010484:	3714      	adds	r7, #20
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	08014214 	.word	0x08014214

08010494 <LL_DMA_SetChannelSelection>:
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80104a0:	4a0d      	ldr	r2, [pc, #52]	; (80104d8 <LL_DMA_SetChannelSelection+0x44>)
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	4413      	add	r3, r2
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	461a      	mov	r2, r3
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	4413      	add	r3, r2
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80104b4:	4908      	ldr	r1, [pc, #32]	; (80104d8 <LL_DMA_SetChannelSelection+0x44>)
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	440b      	add	r3, r1
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	4619      	mov	r1, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	440b      	add	r3, r1
 80104c2:	4619      	mov	r1, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	600b      	str	r3, [r1, #0]
}
 80104ca:	bf00      	nop
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	08014214 	.word	0x08014214

080104dc <LL_DMA_DisableFifoMode>:
{
 80104dc:	b480      	push	{r7}
 80104de:	b083      	sub	sp, #12
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80104e6:	4a0c      	ldr	r2, [pc, #48]	; (8010518 <LL_DMA_DisableFifoMode+0x3c>)
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	4413      	add	r3, r2
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	461a      	mov	r2, r3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4413      	add	r3, r2
 80104f4:	695b      	ldr	r3, [r3, #20]
 80104f6:	4908      	ldr	r1, [pc, #32]	; (8010518 <LL_DMA_DisableFifoMode+0x3c>)
 80104f8:	683a      	ldr	r2, [r7, #0]
 80104fa:	440a      	add	r2, r1
 80104fc:	7812      	ldrb	r2, [r2, #0]
 80104fe:	4611      	mov	r1, r2
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	440a      	add	r2, r1
 8010504:	f023 0304 	bic.w	r3, r3, #4
 8010508:	6153      	str	r3, [r2, #20]
}
 801050a:	bf00      	nop
 801050c:	370c      	adds	r7, #12
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	08014214 	.word	0x08014214

0801051c <i2c_init>:

#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	4603      	mov	r3, r0
 8010524:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 8010526:	f7f8 fe0f 	bl	8009148 <vPortEnterCritical>

	switch(i2c_id) {
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d002      	beq.n	8010536 <i2c_init+0x1a>
 8010530:	2b03      	cmp	r3, #3
 8010532:	d00f      	beq.n	8010554 <i2c_init+0x38>
 8010534:	e01d      	b.n	8010572 <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 8010536:	f000 faab 	bl	8010a90 <i2c1_init>
		i2c1drv.i2c = I2C1;
 801053a:	4b13      	ldr	r3, [pc, #76]	; (8010588 <i2c_init+0x6c>)
 801053c:	4a13      	ldr	r2, [pc, #76]	; (801058c <i2c_init+0x70>)
 801053e:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 8010540:	2001      	movs	r0, #1
 8010542:	f7f9 f8f7 	bl	8009734 <xQueueCreateMutex>
 8010546:	4603      	mov	r3, r0
 8010548:	4a0f      	ldr	r2, [pc, #60]	; (8010588 <i2c_init+0x6c>)
 801054a:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 801054c:	4810      	ldr	r0, [pc, #64]	; (8010590 <i2c_init+0x74>)
 801054e:	f7fe fc45 	bl	800eddc <hal_cli_printf>
		break;
 8010552:	e012      	b.n	801057a <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 8010554:	f000 fb64 	bl	8010c20 <i2c3_init>
		i2c3drv.i2c = I2C3;
 8010558:	4b0e      	ldr	r3, [pc, #56]	; (8010594 <i2c_init+0x78>)
 801055a:	4a0f      	ldr	r2, [pc, #60]	; (8010598 <i2c_init+0x7c>)
 801055c:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 801055e:	2001      	movs	r0, #1
 8010560:	f7f9 f8e8 	bl	8009734 <xQueueCreateMutex>
 8010564:	4603      	mov	r3, r0
 8010566:	4a0b      	ldr	r2, [pc, #44]	; (8010594 <i2c_init+0x78>)
 8010568:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 801056a:	480c      	ldr	r0, [pc, #48]	; (801059c <i2c_init+0x80>)
 801056c:	f7fe fc36 	bl	800eddc <hal_cli_printf>
		break;
 8010570:	e003      	b.n	801057a <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 8010572:	480b      	ldr	r0, [pc, #44]	; (80105a0 <i2c_init+0x84>)
 8010574:	f7fe fc32 	bl	800eddc <hal_cli_printf>
		break;
 8010578:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 801057a:	f7f8 fe15 	bl	80091a8 <vPortExitCritical>
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	20007a18 	.word	0x20007a18
 801058c:	40005400 	.word	0x40005400
 8010590:	08013a00 	.word	0x08013a00
 8010594:	20007a20 	.word	0x20007a20
 8010598:	40005c00 	.word	0x40005c00
 801059c:	08013a0c 	.word	0x08013a0c
 80105a0:	08013a18 	.word	0x08013a18

080105a4 <hal_i2c_transfer>:

bool hal_i2c_transfer(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b08a      	sub	sp, #40	; 0x28
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6178      	str	r0, [r7, #20]
 80105ac:	60fa      	str	r2, [r7, #12]
 80105ae:	60bb      	str	r3, [r7, #8]
 80105b0:	460b      	mov	r3, r1
 80105b2:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 80105b4:	2300      	movs	r3, #0
 80105b6:	627b      	str	r3, [r7, #36]	; 0x24

	timeout *= 1000;
 80105b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80105be:	fb02 f303 	mul.w	r3, r2, r3
 80105c2:	637b      	str	r3, [r7, #52]	; 0x34

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7f9 fbbd 	bl	8009d4c <xQueueSemaphoreTake>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d004      	beq.n	80105e2 <hal_i2c_transfer+0x3e>
		hal_cli_printf("i2c semaphore take timeout");
 80105d8:	4899      	ldr	r0, [pc, #612]	; (8010840 <hal_i2c_transfer+0x29c>)
 80105da:	f7fe fbff 	bl	800eddc <hal_cli_printf>
		return false;
 80105de:	2300      	movs	r3, #0
 80105e0:	e129      	b.n	8010836 <hal_i2c_transfer+0x292>
	}

	timer = hal_get_delay_timer(timeout);
 80105e2:	463b      	mov	r3, r7
 80105e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fe feda 	bl	800f3a0 <hal_get_delay_timer>
 80105ec:	f107 031c 	add.w	r3, r7, #28
 80105f0:	463a      	mov	r2, r7
 80105f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105f6:	e883 0003 	stmia.w	r3, {r0, r1}

	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 80105fa:	e013      	b.n	8010624 <hal_i2c_transfer+0x80>
		if(hal_delay_timer_is_expired(&timer)) {
 80105fc:	f107 031c 	add.w	r3, r7, #28
 8010600:	4618      	mov	r0, r3
 8010602:	f7fe fef3 	bl	800f3ec <hal_delay_timer_is_expired>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00b      	beq.n	8010624 <hal_i2c_transfer+0x80>
			xSemaphoreGive(drv->mutex);
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	6858      	ldr	r0, [r3, #4]
 8010610:	2300      	movs	r3, #0
 8010612:	2200      	movs	r2, #0
 8010614:	2100      	movs	r1, #0
 8010616:	f7f9 f8a5 	bl	8009764 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 801061a:	488a      	ldr	r0, [pc, #552]	; (8010844 <hal_i2c_transfer+0x2a0>)
 801061c:	f7fe fbde 	bl	800eddc <hal_cli_printf>
			return false;
 8010620:	2300      	movs	r3, #0
 8010622:	e108      	b.n	8010836 <hal_i2c_transfer+0x292>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff fdbe 	bl	80101aa <LL_I2C_IsActiveFlag_BUSY>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1e3      	bne.n	80105fc <hal_i2c_transfer+0x58>
		}
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4618      	mov	r0, r3
 801063a:	f7ff fdee 	bl	801021a <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 801063e:	e018      	b.n	8010672 <hal_i2c_transfer+0xce>
		if(hal_delay_timer_is_expired(&timer)) {
 8010640:	f107 031c 	add.w	r3, r7, #28
 8010644:	4618      	mov	r0, r3
 8010646:	f7fe fed1 	bl	800f3ec <hal_delay_timer_is_expired>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d010      	beq.n	8010672 <hal_i2c_transfer+0xce>
			xSemaphoreGive(drv->mutex);
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	6858      	ldr	r0, [r3, #4]
 8010654:	2300      	movs	r3, #0
 8010656:	2200      	movs	r2, #0
 8010658:	2100      	movs	r1, #0
 801065a:	f7f9 f883 	bl	8009764 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4618      	mov	r0, r3
 8010664:	f7ff fde9 	bl	801023a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 8010668:	4877      	ldr	r0, [pc, #476]	; (8010848 <hal_i2c_transfer+0x2a4>)
 801066a:	f7fe fbb7 	bl	800eddc <hal_cli_printf>
			return false;
 801066e:	2300      	movs	r3, #0
 8010670:	e0e1      	b.n	8010836 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4618      	mov	r0, r3
 8010678:	f7ff fd71 	bl	801015e <LL_I2C_IsActiveFlag_SB>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d0de      	beq.n	8010640 <hal_i2c_transfer+0x9c>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr);
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	7cfa      	ldrb	r2, [r7, #19]
 8010688:	4611      	mov	r1, r2
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff fdf2 	bl	8010274 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8010690:	e018      	b.n	80106c4 <hal_i2c_transfer+0x120>
		if(hal_delay_timer_is_expired(&timer)) {
 8010692:	f107 031c 	add.w	r3, r7, #28
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fea8 	bl	800f3ec <hal_delay_timer_is_expired>
 801069c:	4603      	mov	r3, r0
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d010      	beq.n	80106c4 <hal_i2c_transfer+0x120>
			xSemaphoreGive(drv->mutex);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	6858      	ldr	r0, [r3, #4]
 80106a6:	2300      	movs	r3, #0
 80106a8:	2200      	movs	r2, #0
 80106aa:	2100      	movs	r1, #0
 80106ac:	f7f9 f85a 	bl	8009764 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7ff fdc0 	bl	801023a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 80106ba:	4864      	ldr	r0, [pc, #400]	; (801084c <hal_i2c_transfer+0x2a8>)
 80106bc:	f7fe fb8e 	bl	800eddc <hal_cli_printf>
			return false;
 80106c0:	2300      	movs	r3, #0
 80106c2:	e0b8      	b.n	8010836 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7ff fd5b 	bl	8010184 <LL_I2C_IsActiveFlag_ADDR>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d0de      	beq.n	8010692 <hal_i2c_transfer+0xee>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff fd79 	bl	80101d0 <LL_I2C_ClearFlag_ADDR>

	/* register address transfer */
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80106de:	e018      	b.n	8010712 <hal_i2c_transfer+0x16e>
		if(hal_delay_timer_is_expired(&timer)) {
 80106e0:	f107 031c 	add.w	r3, r7, #28
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fe fe81 	bl	800f3ec <hal_delay_timer_is_expired>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d010      	beq.n	8010712 <hal_i2c_transfer+0x16e>
			xSemaphoreGive(drv->mutex);
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	6858      	ldr	r0, [r3, #4]
 80106f4:	2300      	movs	r3, #0
 80106f6:	2200      	movs	r2, #0
 80106f8:	2100      	movs	r1, #0
 80106fa:	f7f9 f833 	bl	8009764 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4618      	mov	r0, r3
 8010704:	f7ff fd99 	bl	801023a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c register address transmit timeout");
 8010708:	4851      	ldr	r0, [pc, #324]	; (8010850 <hal_i2c_transfer+0x2ac>)
 801070a:	f7fe fb67 	bl	800eddc <hal_cli_printf>
			return false;
 801070e:	2300      	movs	r3, #0
 8010710:	e091      	b.n	8010836 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4618      	mov	r0, r3
 8010718:	f7ff fce8 	bl	80100ec <LL_I2C_IsActiveFlag_TXE>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d0de      	beq.n	80106e0 <hal_i2c_transfer+0x13c>
		}
	}
	LL_I2C_TransmitData8(drv->i2c, regaddr);
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	68fa      	ldr	r2, [r7, #12]
 8010728:	b2d2      	uxtb	r2, r2
 801072a:	4611      	mov	r1, r2
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff fda1 	bl	8010274 <LL_I2C_TransmitData8>


	while(index < size) {
 8010732:	e02b      	b.n	801078c <hal_i2c_transfer+0x1e8>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8010734:	f107 031c 	add.w	r3, r7, #28
 8010738:	4618      	mov	r0, r3
 801073a:	f7fe fe57 	bl	800f3ec <hal_delay_timer_is_expired>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d010      	beq.n	8010766 <hal_i2c_transfer+0x1c2>
				xSemaphoreGive(drv->mutex);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	6858      	ldr	r0, [r3, #4]
 8010748:	2300      	movs	r3, #0
 801074a:	2200      	movs	r2, #0
 801074c:	2100      	movs	r1, #0
 801074e:	f7f9 f809 	bl	8009764 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff fd6f 	bl	801023a <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c TXE flag timeout");
 801075c:	483d      	ldr	r0, [pc, #244]	; (8010854 <hal_i2c_transfer+0x2b0>)
 801075e:	f7fe fb3d 	bl	800eddc <hal_cli_printf>
				return false;
 8010762:	2300      	movs	r3, #0
 8010764:	e067      	b.n	8010836 <hal_i2c_transfer+0x292>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff fcbe 	bl	80100ec <LL_I2C_IsActiveFlag_TXE>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0de      	beq.n	8010734 <hal_i2c_transfer+0x190>
			}
		}

		LL_I2C_TransmitData8(drv->i2c, buf[index++]);
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	6818      	ldr	r0, [r3, #0]
 801077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077c:	1c5a      	adds	r2, r3, #1
 801077e:	627a      	str	r2, [r7, #36]	; 0x24
 8010780:	68ba      	ldr	r2, [r7, #8]
 8010782:	4413      	add	r3, r2
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	4619      	mov	r1, r3
 8010788:	f7ff fd74 	bl	8010274 <LL_I2C_TransmitData8>
	while(index < size) {
 801078c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	429a      	cmp	r2, r3
 8010792:	d3e8      	bcc.n	8010766 <hal_i2c_transfer+0x1c2>
	}


	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8010794:	e018      	b.n	80107c8 <hal_i2c_transfer+0x224>
		if(hal_delay_timer_is_expired(&timer)) {
 8010796:	f107 031c 	add.w	r3, r7, #28
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe fe26 	bl	800f3ec <hal_delay_timer_is_expired>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d010      	beq.n	80107c8 <hal_i2c_transfer+0x224>
			xSemaphoreGive(drv->mutex);
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	6858      	ldr	r0, [r3, #4]
 80107aa:	2300      	movs	r3, #0
 80107ac:	2200      	movs	r2, #0
 80107ae:	2100      	movs	r1, #0
 80107b0:	f7f8 ffd8 	bl	8009764 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7ff fd3e 	bl	801023a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c TXE flag timeout");
 80107be:	4825      	ldr	r0, [pc, #148]	; (8010854 <hal_i2c_transfer+0x2b0>)
 80107c0:	f7fe fb0c 	bl	800eddc <hal_cli_printf>
			return false;
 80107c4:	2300      	movs	r3, #0
 80107c6:	e036      	b.n	8010836 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7ff fc8d 	bl	80100ec <LL_I2C_IsActiveFlag_TXE>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d0de      	beq.n	8010796 <hal_i2c_transfer+0x1f2>
		}
	}

	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 80107d8:	e018      	b.n	801080c <hal_i2c_transfer+0x268>
		if(hal_delay_timer_is_expired(&timer)) {
 80107da:	f107 031c 	add.w	r3, r7, #28
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fe fe04 	bl	800f3ec <hal_delay_timer_is_expired>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d010      	beq.n	801080c <hal_i2c_transfer+0x268>
			xSemaphoreGive(drv->mutex);
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	6858      	ldr	r0, [r3, #4]
 80107ee:	2300      	movs	r3, #0
 80107f0:	2200      	movs	r2, #0
 80107f2:	2100      	movs	r1, #0
 80107f4:	f7f8 ffb6 	bl	8009764 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fd1c 	bl	801023a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c BTF flag timeout");
 8010802:	4815      	ldr	r0, [pc, #84]	; (8010858 <hal_i2c_transfer+0x2b4>)
 8010804:	f7fe faea 	bl	800eddc <hal_cli_printf>
			return false;
 8010808:	2300      	movs	r3, #0
 801080a:	e014      	b.n	8010836 <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff fc7e 	bl	8010112 <LL_I2C_IsActiveFlag_BTF>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d0de      	beq.n	80107da <hal_i2c_transfer+0x236>
		}
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	4618      	mov	r0, r3
 8010822:	f7ff fd0a 	bl	801023a <LL_I2C_GenerateStopCondition>
	xSemaphoreGive(drv->mutex);
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	6858      	ldr	r0, [r3, #4]
 801082a:	2300      	movs	r3, #0
 801082c:	2200      	movs	r2, #0
 801082e:	2100      	movs	r1, #0
 8010830:	f7f8 ff98 	bl	8009764 <xQueueGenericSend>

	return true;
 8010834:	2301      	movs	r3, #1
}
 8010836:	4618      	mov	r0, r3
 8010838:	3728      	adds	r7, #40	; 0x28
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	08013a2c 	.word	0x08013a2c
 8010844:	08013a48 	.word	0x08013a48
 8010848:	08013a60 	.word	0x08013a60
 801084c:	08013a7c 	.word	0x08013a7c
 8010850:	08013a9c 	.word	0x08013a9c
 8010854:	08013ac4 	.word	0x08013ac4
 8010858:	08013adc 	.word	0x08013adc

0801085c <hal_i2c_receive>:


bool hal_i2c_receive(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 801085c:	b590      	push	{r4, r7, lr}
 801085e:	b08d      	sub	sp, #52	; 0x34
 8010860:	af02      	add	r7, sp, #8
 8010862:	6178      	str	r0, [r7, #20]
 8010864:	60fa      	str	r2, [r7, #12]
 8010866:	60bb      	str	r3, [r7, #8]
 8010868:	460b      	mov	r3, r1
 801086a:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 801086c:	2300      	movs	r3, #0
 801086e:	627b      	str	r3, [r7, #36]	; 0x24

	if(hal_i2c_transfer(drv,addr,regaddr,NULL,0,timeout) == false) {
 8010870:	7cf9      	ldrb	r1, [r7, #19]
 8010872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	2300      	movs	r3, #0
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	2300      	movs	r3, #0
 801087c:	68fa      	ldr	r2, [r7, #12]
 801087e:	6978      	ldr	r0, [r7, #20]
 8010880:	f7ff fe90 	bl	80105a4 <hal_i2c_transfer>
 8010884:	4603      	mov	r3, r0
 8010886:	f083 0301 	eor.w	r3, r3, #1
 801088a:	b2db      	uxtb	r3, r3
 801088c:	2b00      	cmp	r3, #0
 801088e:	d004      	beq.n	801089a <hal_i2c_receive+0x3e>
		hal_cli_printf("i2c transfer error");
 8010890:	4879      	ldr	r0, [pc, #484]	; (8010a78 <hal_i2c_receive+0x21c>)
 8010892:	f7fe faa3 	bl	800eddc <hal_cli_printf>
		return false;
 8010896:	2300      	movs	r3, #0
 8010898:	e0ea      	b.n	8010a70 <hal_i2c_receive+0x214>
	}

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7f9 fa52 	bl	8009d4c <xQueueSemaphoreTake>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d004      	beq.n	80108b8 <hal_i2c_receive+0x5c>
		hal_cli_printf("i2c semaphore take timeout");
 80108ae:	4873      	ldr	r0, [pc, #460]	; (8010a7c <hal_i2c_receive+0x220>)
 80108b0:	f7fe fa94 	bl	800eddc <hal_cli_printf>
		return false;
 80108b4:	2300      	movs	r3, #0
 80108b6:	e0db      	b.n	8010a70 <hal_i2c_receive+0x214>
	}

	timer = hal_get_delay_timer(timeout);
 80108b8:	463b      	mov	r3, r7
 80108ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fe fd6f 	bl	800f3a0 <hal_get_delay_timer>
 80108c2:	f107 031c 	add.w	r3, r7, #28
 80108c6:	463a      	mov	r2, r7
 80108c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108cc:	e883 0003 	stmia.w	r3, {r0, r1}


	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 80108d0:	e013      	b.n	80108fa <hal_i2c_receive+0x9e>
		if(hal_delay_timer_is_expired(&timer)) {
 80108d2:	f107 031c 	add.w	r3, r7, #28
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fe fd88 	bl	800f3ec <hal_delay_timer_is_expired>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00b      	beq.n	80108fa <hal_i2c_receive+0x9e>
			xSemaphoreGive(drv->mutex);
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	6858      	ldr	r0, [r3, #4]
 80108e6:	2300      	movs	r3, #0
 80108e8:	2200      	movs	r2, #0
 80108ea:	2100      	movs	r1, #0
 80108ec:	f7f8 ff3a 	bl	8009764 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 80108f0:	4863      	ldr	r0, [pc, #396]	; (8010a80 <hal_i2c_receive+0x224>)
 80108f2:	f7fe fa73 	bl	800eddc <hal_cli_printf>
			return false;
 80108f6:	2300      	movs	r3, #0
 80108f8:	e0ba      	b.n	8010a70 <hal_i2c_receive+0x214>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4618      	mov	r0, r3
 8010900:	f7ff fc53 	bl	80101aa <LL_I2C_IsActiveFlag_BUSY>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d1e3      	bne.n	80108d2 <hal_i2c_receive+0x76>
		}
	}

	if(size == 1) {
 801090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090c:	2b01      	cmp	r3, #1
 801090e:	d106      	bne.n	801091e <hal_i2c_receive+0xc2>
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2100      	movs	r1, #0
 8010916:	4618      	mov	r0, r3
 8010918:	f7ff fc6c 	bl	80101f4 <LL_I2C_AcknowledgeNextData>
 801091c:	e006      	b.n	801092c <hal_i2c_receive+0xd0>
	} else {
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_ACK);
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff fc64 	bl	80101f4 <LL_I2C_AcknowledgeNextData>
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4618      	mov	r0, r3
 8010932:	f7ff fc72 	bl	801021a <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8010936:	e018      	b.n	801096a <hal_i2c_receive+0x10e>
		if(hal_delay_timer_is_expired(&timer)) {
 8010938:	f107 031c 	add.w	r3, r7, #28
 801093c:	4618      	mov	r0, r3
 801093e:	f7fe fd55 	bl	800f3ec <hal_delay_timer_is_expired>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d010      	beq.n	801096a <hal_i2c_receive+0x10e>
			xSemaphoreGive(drv->mutex);
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	6858      	ldr	r0, [r3, #4]
 801094c:	2300      	movs	r3, #0
 801094e:	2200      	movs	r2, #0
 8010950:	2100      	movs	r1, #0
 8010952:	f7f8 ff07 	bl	8009764 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4618      	mov	r0, r3
 801095c:	f7ff fc6d 	bl	801023a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 8010960:	4848      	ldr	r0, [pc, #288]	; (8010a84 <hal_i2c_receive+0x228>)
 8010962:	f7fe fa3b 	bl	800eddc <hal_cli_printf>
			return false;
 8010966:	2300      	movs	r3, #0
 8010968:	e082      	b.n	8010a70 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	4618      	mov	r0, r3
 8010970:	f7ff fbf5 	bl	801015e <LL_I2C_IsActiveFlag_SB>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d0de      	beq.n	8010938 <hal_i2c_receive+0xdc>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr | 0x01);
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	7cfb      	ldrb	r3, [r7, #19]
 8010980:	f043 0301 	orr.w	r3, r3, #1
 8010984:	b2db      	uxtb	r3, r3
 8010986:	4619      	mov	r1, r3
 8010988:	4610      	mov	r0, r2
 801098a:	f7ff fc73 	bl	8010274 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 801098e:	e018      	b.n	80109c2 <hal_i2c_receive+0x166>
		if(hal_delay_timer_is_expired(&timer)) {
 8010990:	f107 031c 	add.w	r3, r7, #28
 8010994:	4618      	mov	r0, r3
 8010996:	f7fe fd29 	bl	800f3ec <hal_delay_timer_is_expired>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d010      	beq.n	80109c2 <hal_i2c_receive+0x166>
			xSemaphoreGive(drv->mutex);
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	6858      	ldr	r0, [r3, #4]
 80109a4:	2300      	movs	r3, #0
 80109a6:	2200      	movs	r2, #0
 80109a8:	2100      	movs	r1, #0
 80109aa:	f7f8 fedb 	bl	8009764 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7ff fc41 	bl	801023a <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 80109b8:	4833      	ldr	r0, [pc, #204]	; (8010a88 <hal_i2c_receive+0x22c>)
 80109ba:	f7fe fa0f 	bl	800eddc <hal_cli_printf>
			return false;
 80109be:	2300      	movs	r3, #0
 80109c0:	e056      	b.n	8010a70 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7ff fbdc 	bl	8010184 <LL_I2C_IsActiveFlag_ADDR>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0de      	beq.n	8010990 <hal_i2c_receive+0x134>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7ff fbfa 	bl	80101d0 <LL_I2C_ClearFlag_ADDR>

	while(index < size) {
 80109dc:	e037      	b.n	8010a4e <hal_i2c_receive+0x1f2>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 80109de:	f107 031c 	add.w	r3, r7, #28
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fe fd02 	bl	800f3ec <hal_delay_timer_is_expired>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d010      	beq.n	8010a10 <hal_i2c_receive+0x1b4>
				xSemaphoreGive(drv->mutex);
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	6858      	ldr	r0, [r3, #4]
 80109f2:	2300      	movs	r3, #0
 80109f4:	2200      	movs	r2, #0
 80109f6:	2100      	movs	r1, #0
 80109f8:	f7f8 feb4 	bl	8009764 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff fc1a 	bl	801023a <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c RXNE flag timeout");
 8010a06:	4821      	ldr	r0, [pc, #132]	; (8010a8c <hal_i2c_receive+0x230>)
 8010a08:	f7fe f9e8 	bl	800eddc <hal_cli_printf>
				return false;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	e02f      	b.n	8010a70 <hal_i2c_receive+0x214>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff fb8f 	bl	8010138 <LL_I2C_IsActiveFlag_RXNE>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d0de      	beq.n	80109de <hal_i2c_receive+0x182>
			}
		}
		buf[index++] = LL_I2C_ReceiveData8(drv->i2c);
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	6819      	ldr	r1, [r3, #0]
 8010a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	627a      	str	r2, [r7, #36]	; 0x24
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	18d4      	adds	r4, r2, r3
 8010a2e:	4608      	mov	r0, r1
 8010a30:	f7ff fc13 	bl	801025a <LL_I2C_ReceiveData8>
 8010a34:	4603      	mov	r3, r0
 8010a36:	7023      	strb	r3, [r4, #0]

		if(index == size - 1)
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	3b01      	subs	r3, #1
 8010a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d105      	bne.n	8010a4e <hal_i2c_receive+0x1f2>
			LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2100      	movs	r1, #0
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ff fbd3 	bl	80101f4 <LL_I2C_AcknowledgeNextData>
	while(index < size) {
 8010a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d3dc      	bcc.n	8010a10 <hal_i2c_receive+0x1b4>
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7ff fbed 	bl	801023a <LL_I2C_GenerateStopCondition>

	xSemaphoreGive(drv->mutex);
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	6858      	ldr	r0, [r3, #4]
 8010a64:	2300      	movs	r3, #0
 8010a66:	2200      	movs	r2, #0
 8010a68:	2100      	movs	r1, #0
 8010a6a:	f7f8 fe7b 	bl	8009764 <xQueueGenericSend>

	return true;
 8010a6e:	2301      	movs	r3, #1
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	372c      	adds	r7, #44	; 0x2c
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd90      	pop	{r4, r7, pc}
 8010a78:	08013af4 	.word	0x08013af4
 8010a7c:	08013a2c 	.word	0x08013a2c
 8010a80:	08013a48 	.word	0x08013a48
 8010a84:	08013a60 	.word	0x08013a60
 8010a88:	08013a7c 	.word	0x08013a7c
 8010a8c:	08013b08 	.word	0x08013b08

08010a90 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b08a      	sub	sp, #40	; 0x28
 8010a94:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8010a96:	463b      	mov	r3, r7
 8010a98:	2220      	movs	r2, #32
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f002 fa17 	bl	8012ed0 <memset>

	hal_gpio_init_alt(
 8010aa2:	2304      	movs	r3, #4
 8010aa4:	9300      	str	r3, [sp, #0]
 8010aa6:	2303      	movs	r3, #3
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	2104      	movs	r1, #4
 8010aac:	4857      	ldr	r0, [pc, #348]	; (8010c0c <i2c1_init+0x17c>)
 8010aae:	f7fe ff05 	bl	800f8bc <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 8010ab2:	2304      	movs	r3, #4
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	2303      	movs	r3, #3
 8010ab8:	2200      	movs	r2, #0
 8010aba:	2104      	movs	r1, #4
 8010abc:	4854      	ldr	r0, [pc, #336]	; (8010c10 <i2c1_init+0x180>)
 8010abe:	f7fe fefd 	bl	800f8bc <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_TX_STREAM, DMA_I2C1_TX_CHANNEL);
 8010ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010ac6:	2106      	movs	r1, #6
 8010ac8:	4852      	ldr	r0, [pc, #328]	; (8010c14 <i2c1_init+0x184>)
 8010aca:	f7ff fce3 	bl	8010494 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8010ace:	2240      	movs	r2, #64	; 0x40
 8010ad0:	2106      	movs	r1, #6
 8010ad2:	4850      	ldr	r0, [pc, #320]	; (8010c14 <i2c1_init+0x184>)
 8010ad4:	f7ff fbe2 	bl	801029c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8010ad8:	2200      	movs	r2, #0
 8010ada:	2106      	movs	r1, #6
 8010adc:	484d      	ldr	r0, [pc, #308]	; (8010c14 <i2c1_init+0x184>)
 8010ade:	f7ff fcb5 	bl	801044c <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	2106      	movs	r1, #6
 8010ae6:	484b      	ldr	r0, [pc, #300]	; (8010c14 <i2c1_init+0x184>)
 8010ae8:	f7ff fbfc 	bl	80102e4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8010aec:	2200      	movs	r2, #0
 8010aee:	2106      	movs	r1, #6
 8010af0:	4848      	ldr	r0, [pc, #288]	; (8010c14 <i2c1_init+0x184>)
 8010af2:	f7ff fc1b 	bl	801032c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8010af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010afa:	2106      	movs	r1, #6
 8010afc:	4845      	ldr	r0, [pc, #276]	; (8010c14 <i2c1_init+0x184>)
 8010afe:	f7ff fc39 	bl	8010374 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8010b02:	2200      	movs	r2, #0
 8010b04:	2106      	movs	r1, #6
 8010b06:	4843      	ldr	r0, [pc, #268]	; (8010c14 <i2c1_init+0x184>)
 8010b08:	f7ff fc58 	bl	80103bc <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	2106      	movs	r1, #6
 8010b10:	4840      	ldr	r0, [pc, #256]	; (8010c14 <i2c1_init+0x184>)
 8010b12:	f7ff fc77 	bl	8010404 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_TX_STREAM);
 8010b16:	2106      	movs	r1, #6
 8010b18:	483e      	ldr	r0, [pc, #248]	; (8010c14 <i2c1_init+0x184>)
 8010b1a:	f7ff fcdf 	bl	80104dc <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_RX_STREAM, DMA_I2C1_RX_CHANNEL);
 8010b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010b22:	2100      	movs	r1, #0
 8010b24:	483b      	ldr	r0, [pc, #236]	; (8010c14 <i2c1_init+0x184>)
 8010b26:	f7ff fcb5 	bl	8010494 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	4839      	ldr	r0, [pc, #228]	; (8010c14 <i2c1_init+0x184>)
 8010b30:	f7ff fbb4 	bl	801029c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8010b34:	2200      	movs	r2, #0
 8010b36:	2100      	movs	r1, #0
 8010b38:	4836      	ldr	r0, [pc, #216]	; (8010c14 <i2c1_init+0x184>)
 8010b3a:	f7ff fc87 	bl	801044c <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MODE_NORMAL);
 8010b3e:	2200      	movs	r2, #0
 8010b40:	2100      	movs	r1, #0
 8010b42:	4834      	ldr	r0, [pc, #208]	; (8010c14 <i2c1_init+0x184>)
 8010b44:	f7ff fbce 	bl	80102e4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8010b48:	2200      	movs	r2, #0
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	4831      	ldr	r0, [pc, #196]	; (8010c14 <i2c1_init+0x184>)
 8010b4e:	f7ff fbed 	bl	801032c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8010b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010b56:	2100      	movs	r1, #0
 8010b58:	482e      	ldr	r0, [pc, #184]	; (8010c14 <i2c1_init+0x184>)
 8010b5a:	f7ff fc0b 	bl	8010374 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2100      	movs	r1, #0
 8010b62:	482c      	ldr	r0, [pc, #176]	; (8010c14 <i2c1_init+0x184>)
 8010b64:	f7ff fc2a 	bl	80103bc <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8010b68:	2200      	movs	r2, #0
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	4829      	ldr	r0, [pc, #164]	; (8010c14 <i2c1_init+0x184>)
 8010b6e:	f7ff fc49 	bl	8010404 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_RX_STREAM);
 8010b72:	2100      	movs	r1, #0
 8010b74:	4827      	ldr	r0, [pc, #156]	; (8010c14 <i2c1_init+0x184>)
 8010b76:	f7ff fcb1 	bl	80104dc <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010b7a:	f7ff f9eb 	bl	800ff54 <__NVIC_GetPriorityGrouping>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2200      	movs	r2, #0
 8010b82:	2105      	movs	r1, #5
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7ff fa3b 	bl	8010000 <NVIC_EncodePriority>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	201f      	movs	r0, #31
 8010b90:	f7ff fa0c 	bl	800ffac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8010b94:	201f      	movs	r0, #31
 8010b96:	f7ff f9eb 	bl	800ff70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010b9a:	f7ff f9db 	bl	800ff54 <__NVIC_GetPriorityGrouping>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	2105      	movs	r1, #5
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff fa2b 	bl	8010000 <NVIC_EncodePriority>
 8010baa:	4603      	mov	r3, r0
 8010bac:	4619      	mov	r1, r3
 8010bae:	2020      	movs	r0, #32
 8010bb0:	f7ff f9fc 	bl	800ffac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8010bb4:	2020      	movs	r0, #32
 8010bb6:	f7ff f9db 	bl	800ff70 <__NVIC_EnableIRQ>

  /* I2C Initialization */
  LL_I2C_DisableOwnAddress2(I2C1);
 8010bba:	4817      	ldr	r0, [pc, #92]	; (8010c18 <i2c1_init+0x188>)
 8010bbc:	f7ff fa86 	bl	80100cc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8010bc0:	4815      	ldr	r0, [pc, #84]	; (8010c18 <i2c1_init+0x188>)
 8010bc2:	f7ff fa60 	bl	8010086 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8010bc6:	4814      	ldr	r0, [pc, #80]	; (8010c18 <i2c1_init+0x188>)
 8010bc8:	f7ff fa4d 	bl	8010066 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 400000;
 8010bd0:	4b12      	ldr	r3, [pc, #72]	; (8010c1c <i2c1_init+0x18c>)
 8010bd2:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8010be0:	2300      	movs	r3, #0
 8010be2:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8010be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010be8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8010bea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010bee:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8010bf0:	463b      	mov	r3, r7
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	4808      	ldr	r0, [pc, #32]	; (8010c18 <i2c1_init+0x188>)
 8010bf6:	f7f3 f963 	bl	8003ec0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	4806      	ldr	r0, [pc, #24]	; (8010c18 <i2c1_init+0x188>)
 8010bfe:	f7ff fa52 	bl	80100a6 <LL_I2C_SetOwnAddress2>
}
 8010c02:	bf00      	nop
 8010c04:	3720      	adds	r7, #32
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	0801426c 	.word	0x0801426c
 8010c10:	08014274 	.word	0x08014274
 8010c14:	40026000 	.word	0x40026000
 8010c18:	40005400 	.word	0x40005400
 8010c1c:	00061a80 	.word	0x00061a80

08010c20 <i2c3_init>:

static void i2c3_init(void)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b08a      	sub	sp, #40	; 0x28
 8010c24:	af02      	add	r7, sp, #8
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8010c26:	463b      	mov	r3, r7
 8010c28:	2220      	movs	r2, #32
 8010c2a:	2100      	movs	r1, #0
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f002 f94f 	bl	8012ed0 <memset>

	hal_gpio_init_alt(
 8010c32:	2304      	movs	r3, #4
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	2303      	movs	r3, #3
 8010c38:	2200      	movs	r2, #0
 8010c3a:	2104      	movs	r1, #4
 8010c3c:	4829      	ldr	r0, [pc, #164]	; (8010ce4 <i2c3_init+0xc4>)
 8010c3e:	f7fe fe3d 	bl	800f8bc <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

	hal_gpio_init_alt(
 8010c42:	2304      	movs	r3, #4
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	2303      	movs	r3, #3
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2104      	movs	r1, #4
 8010c4c:	4826      	ldr	r0, [pc, #152]	; (8010ce8 <i2c3_init+0xc8>)
 8010c4e:	f7fe fe35 	bl	800f8bc <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010c52:	f7ff f97f 	bl	800ff54 <__NVIC_GetPriorityGrouping>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2200      	movs	r2, #0
 8010c5a:	2105      	movs	r1, #5
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff f9cf 	bl	8010000 <NVIC_EncodePriority>
 8010c62:	4603      	mov	r3, r0
 8010c64:	4619      	mov	r1, r3
 8010c66:	2048      	movs	r0, #72	; 0x48
 8010c68:	f7ff f9a0 	bl	800ffac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 8010c6c:	2048      	movs	r0, #72	; 0x48
 8010c6e:	f7ff f97f 	bl	800ff70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010c72:	f7ff f96f 	bl	800ff54 <__NVIC_GetPriorityGrouping>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2200      	movs	r2, #0
 8010c7a:	2105      	movs	r1, #5
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7ff f9bf 	bl	8010000 <NVIC_EncodePriority>
 8010c82:	4603      	mov	r3, r0
 8010c84:	4619      	mov	r1, r3
 8010c86:	2049      	movs	r0, #73	; 0x49
 8010c88:	f7ff f990 	bl	800ffac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 8010c8c:	2049      	movs	r0, #73	; 0x49
 8010c8e:	f7ff f96f 	bl	800ff70 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8010c92:	4816      	ldr	r0, [pc, #88]	; (8010cec <i2c3_init+0xcc>)
 8010c94:	f7ff fa1a 	bl	80100cc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8010c98:	4814      	ldr	r0, [pc, #80]	; (8010cec <i2c3_init+0xcc>)
 8010c9a:	f7ff f9f4 	bl	8010086 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8010c9e:	4813      	ldr	r0, [pc, #76]	; (8010cec <i2c3_init+0xcc>)
 8010ca0:	f7ff f9e1 	bl	8010066 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 8010ca8:	4b11      	ldr	r3, [pc, #68]	; (8010cf0 <i2c3_init+0xd0>)
 8010caa:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8010cac:	2300      	movs	r3, #0
 8010cae:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8010cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cc0:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8010cc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010cc6:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8010cc8:	463b      	mov	r3, r7
 8010cca:	4619      	mov	r1, r3
 8010ccc:	4807      	ldr	r0, [pc, #28]	; (8010cec <i2c3_init+0xcc>)
 8010cce:	f7f3 f8f7 	bl	8003ec0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	4805      	ldr	r0, [pc, #20]	; (8010cec <i2c3_init+0xcc>)
 8010cd6:	f7ff f9e6 	bl	80100a6 <LL_I2C_SetOwnAddress2>
}
 8010cda:	bf00      	nop
 8010cdc:	3720      	adds	r7, #32
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	0801427c 	.word	0x0801427c
 8010ce8:	08014284 	.word	0x08014284
 8010cec:	40005c00 	.word	0x40005c00
 8010cf0:	000186a0 	.word	0x000186a0

08010cf4 <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	af00      	add	r7, sp, #0

}
 8010cf8:	bf00      	nop
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr

08010d02 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8010d02:	b480      	push	{r7}
 8010d04:	af00      	add	r7, sp, #0

}
 8010d06:	bf00      	nop
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8010d10:	b480      	push	{r7}
 8010d12:	af00      	add	r7, sp, #0

}
 8010d14:	bf00      	nop
 8010d16:	46bd      	mov	sp, r7
 8010d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1c:	4770      	bx	lr

08010d1e <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8010d1e:	b480      	push	{r7}
 8010d20:	af00      	add	r7, sp, #0

}
 8010d22:	bf00      	nop
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr

08010d2c <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0

}
 8010d30:	bf00      	nop
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr

08010d3a <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 8010d3a:	b480      	push	{r7}
 8010d3c:	af00      	add	r7, sp, #0

}
 8010d3e:	bf00      	nop
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <initThread>:
/* application */
#include "mp3_app.h"
#include "display_app.h"


static void initThread(void* param) {
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af02      	add	r7, sp, #8
 8010d4e:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter initThread");
 8010d50:	481d      	ldr	r0, [pc, #116]	; (8010dc8 <initThread+0x80>)
 8010d52:	f7fe f843 	bl	800eddc <hal_cli_printf>

	sdio_init();
 8010d56:	f000 f9ff 	bl	8011158 <sdio_init>
	MX_FATFS_Init();
 8010d5a:	f7f4 fdcf 	bl	80058fc <MX_FATFS_Init>

	i2c_init(I2cId1);
 8010d5e:	2001      	movs	r0, #1
 8010d60:	f7ff fbdc 	bl	801051c <i2c_init>
	i2c_init(I2cId3);
 8010d64:	2003      	movs	r0, #3
 8010d66:	f7ff fbd9 	bl	801051c <i2c_init>

	spi_init(SpiId2);
 8010d6a:	2002      	movs	r0, #2
 8010d6c:	f000 fd5a 	bl	8011824 <spi_init>
	spi_init(SpiId4);
 8010d70:	2004      	movs	r0, #4
 8010d72:	f000 fd57 	bl	8011824 <spi_init>

	adc_init(AdcId1);
 8010d76:	2001      	movs	r0, #1
 8010d78:	f7fd fe82 	bl	800ea80 <adc_init>

	tim_init(TimId4);
 8010d7c:	2004      	movs	r0, #4
 8010d7e:	f001 fad3 	bl	8012328 <tim_init>

	hal_resources_init();
 8010d82:	f000 f91d 	bl	8010fc0 <hal_resources_init>

	xTaskCreate(mp3Thread, "mp3_app", 512, NULL, 3, NULL);
 8010d86:	2300      	movs	r3, #0
 8010d88:	9301      	str	r3, [sp, #4]
 8010d8a:	2303      	movs	r3, #3
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d94:	490d      	ldr	r1, [pc, #52]	; (8010dcc <initThread+0x84>)
 8010d96:	480e      	ldr	r0, [pc, #56]	; (8010dd0 <initThread+0x88>)
 8010d98:	f7f9 faff 	bl	800a39a <xTaskCreate>
	xTaskCreate(displayThread, "display", 512, NULL, 3, NULL);
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	9301      	str	r3, [sp, #4]
 8010da0:	2303      	movs	r3, #3
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	2300      	movs	r3, #0
 8010da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010daa:	490a      	ldr	r1, [pc, #40]	; (8010dd4 <initThread+0x8c>)
 8010dac:	480a      	ldr	r0, [pc, #40]	; (8010dd8 <initThread+0x90>)
 8010dae:	f7f9 faf4 	bl	800a39a <xTaskCreate>

	hal_cli_printf("exit initThread");
 8010db2:	480a      	ldr	r0, [pc, #40]	; (8010ddc <initThread+0x94>)
 8010db4:	f7fe f812 	bl	800eddc <hal_cli_printf>

	vTaskDelete(NULL);
 8010db8:	2000      	movs	r0, #0
 8010dba:	f7f9 fc57 	bl	800a66c <vTaskDelete>
}
 8010dbe:	bf00      	nop
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	08013b20 	.word	0x08013b20
 8010dcc:	08013b34 	.word	0x08013b34
 8010dd0:	08012cc9 	.word	0x08012cc9
 8010dd4:	08013b3c 	.word	0x08013b3c
 8010dd8:	08012b81 	.word	0x08012b81
 8010ddc:	08013b44 	.word	0x08013b44

08010de0 <main>:

int main(void) {
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af02      	add	r7, sp, #8
	HAL_Init();
 8010de6:	f7f0 fa49 	bl	800127c <HAL_Init>

	hal_bus_init_early();
 8010dea:	f7fe f9ff 	bl	800f1ec <hal_bus_init_early>
	hal_clock_init_early();
 8010dee:	f7fe fa3f 	bl	800f270 <hal_clock_init_early>
	hal_dwt_init_early();
 8010df2:	f7fe fa95 	bl	800f320 <hal_dwt_init_early>

	hal_resources_init_early();
 8010df6:	f000 f8c7 	bl	8010f88 <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 8010dfa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8010dfe:	2000      	movs	r0, #0
 8010e00:	f001 fe32 	bl	8012a68 <hal_uart_init>
	hal_cli_init();
 8010e04:	f7fe f824 	bl	800ee50 <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 8010e08:	4809      	ldr	r0, [pc, #36]	; (8010e30 <main+0x50>)
 8010e0a:	f7fd ffe7 	bl	800eddc <hal_cli_printf>

	traceSTART();
 8010e0e:	f7fc fb0d 	bl	800d42c <SEGGER_SYSVIEW_Conf>
	xTaskCreate(initThread, "init", 256, NULL, 3, NULL);
 8010e12:	2300      	movs	r3, #0
 8010e14:	9301      	str	r3, [sp, #4]
 8010e16:	2303      	movs	r3, #3
 8010e18:	9300      	str	r3, [sp, #0]
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010e20:	4904      	ldr	r1, [pc, #16]	; (8010e34 <main+0x54>)
 8010e22:	4805      	ldr	r0, [pc, #20]	; (8010e38 <main+0x58>)
 8010e24:	f7f9 fab9 	bl	800a39a <xTaskCreate>
	vTaskStartScheduler();
 8010e28:	f7f9 fcac 	bl	800a784 <vTaskStartScheduler>

	for(;;);
 8010e2c:	e7fe      	b.n	8010e2c <main+0x4c>
 8010e2e:	bf00      	nop
 8010e30:	08013b54 	.word	0x08013b54
 8010e34:	08013b6c 	.word	0x08013b6c
 8010e38:	08010d49 	.word	0x08010d49

08010e3c <__NVIC_GetPriorityGrouping>:
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010e40:	4b04      	ldr	r3, [pc, #16]	; (8010e54 <__NVIC_GetPriorityGrouping+0x18>)
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	0a1b      	lsrs	r3, r3, #8
 8010e46:	f003 0307 	and.w	r3, r3, #7
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	e000ed00 	.word	0xe000ed00

08010e58 <__NVIC_EnableIRQ>:
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	4603      	mov	r3, r0
 8010e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	db0b      	blt.n	8010e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e6a:	79fb      	ldrb	r3, [r7, #7]
 8010e6c:	f003 021f 	and.w	r2, r3, #31
 8010e70:	4907      	ldr	r1, [pc, #28]	; (8010e90 <__NVIC_EnableIRQ+0x38>)
 8010e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e76:	095b      	lsrs	r3, r3, #5
 8010e78:	2001      	movs	r0, #1
 8010e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8010e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010e82:	bf00      	nop
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	e000e100 	.word	0xe000e100

08010e94 <__NVIC_SetPriority>:
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	6039      	str	r1, [r7, #0]
 8010e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	db0a      	blt.n	8010ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	b2da      	uxtb	r2, r3
 8010eac:	490c      	ldr	r1, [pc, #48]	; (8010ee0 <__NVIC_SetPriority+0x4c>)
 8010eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eb2:	0112      	lsls	r2, r2, #4
 8010eb4:	b2d2      	uxtb	r2, r2
 8010eb6:	440b      	add	r3, r1
 8010eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010ebc:	e00a      	b.n	8010ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	b2da      	uxtb	r2, r3
 8010ec2:	4908      	ldr	r1, [pc, #32]	; (8010ee4 <__NVIC_SetPriority+0x50>)
 8010ec4:	79fb      	ldrb	r3, [r7, #7]
 8010ec6:	f003 030f 	and.w	r3, r3, #15
 8010eca:	3b04      	subs	r3, #4
 8010ecc:	0112      	lsls	r2, r2, #4
 8010ece:	b2d2      	uxtb	r2, r2
 8010ed0:	440b      	add	r3, r1
 8010ed2:	761a      	strb	r2, [r3, #24]
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	e000e100 	.word	0xe000e100
 8010ee4:	e000ed00 	.word	0xe000ed00

08010ee8 <NVIC_EncodePriority>:
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b089      	sub	sp, #36	; 0x24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f003 0307 	and.w	r3, r3, #7
 8010efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	f1c3 0307 	rsb	r3, r3, #7
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	bf28      	it	cs
 8010f06:	2304      	movcs	r3, #4
 8010f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	2b06      	cmp	r3, #6
 8010f10:	d902      	bls.n	8010f18 <NVIC_EncodePriority+0x30>
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	3b03      	subs	r3, #3
 8010f16:	e000      	b.n	8010f1a <NVIC_EncodePriority+0x32>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	fa02 f303 	lsl.w	r3, r2, r3
 8010f26:	43da      	mvns	r2, r3
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	401a      	ands	r2, r3
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	fa01 f303 	lsl.w	r3, r1, r3
 8010f3a:	43d9      	mvns	r1, r3
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f40:	4313      	orrs	r3, r2
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3724      	adds	r7, #36	; 0x24
 8010f46:	46bd      	mov	sp, r7
 8010f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4c:	4770      	bx	lr

08010f4e <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8010f4e:	b480      	push	{r7}
 8010f50:	b083      	sub	sp, #12
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	460b      	mov	r3, r1
 8010f58:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8010f5a:	78fb      	ldrb	r3, [r7, #3]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d005      	beq.n	8010f6c <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	889a      	ldrh	r2, [r3, #4]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8010f6a:	e006      	b.n	8010f7a <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	889b      	ldrh	r3, [r3, #4]
 8010f70:	461a      	mov	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	0412      	lsls	r2, r2, #16
 8010f78:	619a      	str	r2, [r3, #24]
}
 8010f7a:	bf00      	nop
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr
	...

08010f88 <hal_resources_init_early>:
const GpioPin gpio_vs1053_dcs = {.port = VS1053_DCS_GPIO_PORT, .pin = VS1053_DCS_PIN};
const GpioPin gpio_vs1053_rst = {.port = VS1053_RST_GPIO_PORT, .pin = VS1053_RST_PIN};
const GpioPin gpio_vs1053_dreq = {.port = VS1053_DREQ_GPIO_PORT, .pin = VS1053_DREQ_PIN};


void hal_resources_init_early(void) {
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	2201      	movs	r2, #1
 8010f90:	2101      	movs	r1, #1
 8010f92:	4809      	ldr	r0, [pc, #36]	; (8010fb8 <hal_resources_init_early+0x30>)
 8010f94:	f7fe fc78 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 8010f98:	2101      	movs	r1, #1
 8010f9a:	4807      	ldr	r0, [pc, #28]	; (8010fb8 <hal_resources_init_early+0x30>)
 8010f9c:	f7ff ffd7 	bl	8010f4e <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	2101      	movs	r1, #1
 8010fa6:	4805      	ldr	r0, [pc, #20]	; (8010fbc <hal_resources_init_early+0x34>)
 8010fa8:	f7fe fc6e 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 8010fac:	2101      	movs	r1, #1
 8010fae:	4803      	ldr	r0, [pc, #12]	; (8010fbc <hal_resources_init_early+0x34>)
 8010fb0:	f7ff ffcd 	bl	8010f4e <hal_gpio_write>
}
 8010fb4:	bf00      	nop
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	0801421c 	.word	0x0801421c
 8010fbc:	08014224 	.word	0x08014224

08010fc0 <hal_resources_init>:

void hal_resources_init(void) {
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	af00      	add	r7, sp, #0
	/* button */
	hal_gpio_init(&gpio_button_left, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	2107      	movs	r1, #7
 8010fca:	4857      	ldr	r0, [pc, #348]	; (8011128 <hal_resources_init+0x168>)
 8010fcc:	f7fe fc5c 	bl	800f888 <hal_gpio_init>
	hal_gpio_init(&gpio_button_right, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	2107      	movs	r1, #7
 8010fd6:	4855      	ldr	r0, [pc, #340]	; (801112c <hal_resources_init+0x16c>)
 8010fd8:	f7fe fc56 	bl	800f888 <hal_gpio_init>
	hal_gpio_init(&gpio_button_center, GpioModeInterruptFall, GpioPullNo, GpioSpeedFreqLow);
 8010fdc:	2300      	movs	r3, #0
 8010fde:	2200      	movs	r2, #0
 8010fe0:	2107      	movs	r1, #7
 8010fe2:	4853      	ldr	r0, [pc, #332]	; (8011130 <hal_resources_init+0x170>)
 8010fe4:	f7fe fc50 	bl	800f888 <hal_gpio_init>
	hal_gpio_init(&gpio_button_up, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010fe8:	2300      	movs	r3, #0
 8010fea:	2201      	movs	r2, #1
 8010fec:	2107      	movs	r1, #7
 8010fee:	4851      	ldr	r0, [pc, #324]	; (8011134 <hal_resources_init+0x174>)
 8010ff0:	f7fe fc4a 	bl	800f888 <hal_gpio_init>
	hal_gpio_init(&gpio_button_down, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	2107      	movs	r1, #7
 8010ffa:	484f      	ldr	r0, [pc, #316]	; (8011138 <hal_resources_init+0x178>)
 8010ffc:	f7fe fc44 	bl	800f888 <hal_gpio_init>

	NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011000:	f7ff ff1c 	bl	8010e3c <__NVIC_GetPriorityGrouping>
 8011004:	4603      	mov	r3, r0
 8011006:	2200      	movs	r2, #0
 8011008:	2105      	movs	r1, #5
 801100a:	4618      	mov	r0, r3
 801100c:	f7ff ff6c 	bl	8010ee8 <NVIC_EncodePriority>
 8011010:	4603      	mov	r3, r0
 8011012:	4619      	mov	r1, r3
 8011014:	2006      	movs	r0, #6
 8011016:	f7ff ff3d 	bl	8010e94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 801101a:	2006      	movs	r0, #6
 801101c:	f7ff ff1c 	bl	8010e58 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011020:	f7ff ff0c 	bl	8010e3c <__NVIC_GetPriorityGrouping>
 8011024:	4603      	mov	r3, r0
 8011026:	2200      	movs	r2, #0
 8011028:	2105      	movs	r1, #5
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff ff5c 	bl	8010ee8 <NVIC_EncodePriority>
 8011030:	4603      	mov	r3, r0
 8011032:	4619      	mov	r1, r3
 8011034:	2007      	movs	r0, #7
 8011036:	f7ff ff2d 	bl	8010e94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI1_IRQn);
 801103a:	2007      	movs	r0, #7
 801103c:	f7ff ff0c 	bl	8010e58 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011040:	f7ff fefc 	bl	8010e3c <__NVIC_GetPriorityGrouping>
 8011044:	4603      	mov	r3, r0
 8011046:	2200      	movs	r2, #0
 8011048:	2105      	movs	r1, #5
 801104a:	4618      	mov	r0, r3
 801104c:	f7ff ff4c 	bl	8010ee8 <NVIC_EncodePriority>
 8011050:	4603      	mov	r3, r0
 8011052:	4619      	mov	r1, r3
 8011054:	2008      	movs	r0, #8
 8011056:	f7ff ff1d 	bl	8010e94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_IRQn);
 801105a:	2008      	movs	r0, #8
 801105c:	f7ff fefc 	bl	8010e58 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011060:	f7ff feec 	bl	8010e3c <__NVIC_GetPriorityGrouping>
 8011064:	4603      	mov	r3, r0
 8011066:	2200      	movs	r2, #0
 8011068:	2105      	movs	r1, #5
 801106a:	4618      	mov	r0, r3
 801106c:	f7ff ff3c 	bl	8010ee8 <NVIC_EncodePriority>
 8011070:	4603      	mov	r3, r0
 8011072:	4619      	mov	r1, r3
 8011074:	2009      	movs	r0, #9
 8011076:	f7ff ff0d 	bl	8010e94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI3_IRQn);
 801107a:	2009      	movs	r0, #9
 801107c:	f7ff feec 	bl	8010e58 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011080:	f7ff fedc 	bl	8010e3c <__NVIC_GetPriorityGrouping>
 8011084:	4603      	mov	r3, r0
 8011086:	2200      	movs	r2, #0
 8011088:	2105      	movs	r1, #5
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff ff2c 	bl	8010ee8 <NVIC_EncodePriority>
 8011090:	4603      	mov	r3, r0
 8011092:	4619      	mov	r1, r3
 8011094:	200a      	movs	r0, #10
 8011096:	f7ff fefd 	bl	8010e94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn);
 801109a:	200a      	movs	r0, #10
 801109c:	f7ff fedc 	bl	8010e58 <__NVIC_EnableIRQ>

	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80110a0:	2300      	movs	r3, #0
 80110a2:	2201      	movs	r2, #1
 80110a4:	2101      	movs	r1, #1
 80110a6:	4825      	ldr	r0, [pc, #148]	; (801113c <hal_resources_init+0x17c>)
 80110a8:	f7fe fbee 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 80110ac:	2101      	movs	r1, #1
 80110ae:	4823      	ldr	r0, [pc, #140]	; (801113c <hal_resources_init+0x17c>)
 80110b0:	f7ff ff4d 	bl	8010f4e <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80110b4:	2300      	movs	r3, #0
 80110b6:	2201      	movs	r2, #1
 80110b8:	2101      	movs	r1, #1
 80110ba:	4821      	ldr	r0, [pc, #132]	; (8011140 <hal_resources_init+0x180>)
 80110bc:	f7fe fbe4 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 80110c0:	2101      	movs	r1, #1
 80110c2:	481f      	ldr	r0, [pc, #124]	; (8011140 <hal_resources_init+0x180>)
 80110c4:	f7ff ff43 	bl	8010f4e <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80110c8:	2300      	movs	r3, #0
 80110ca:	2201      	movs	r2, #1
 80110cc:	2101      	movs	r1, #1
 80110ce:	481d      	ldr	r0, [pc, #116]	; (8011144 <hal_resources_init+0x184>)
 80110d0:	f7fe fbda 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 80110d4:	2101      	movs	r1, #1
 80110d6:	481b      	ldr	r0, [pc, #108]	; (8011144 <hal_resources_init+0x184>)
 80110d8:	f7ff ff39 	bl	8010f4e <hal_gpio_write>

	/* vs1053 */
	hal_gpio_init(&gpio_vs1053_cs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 80110dc:	2300      	movs	r3, #0
 80110de:	2200      	movs	r2, #0
 80110e0:	2101      	movs	r1, #1
 80110e2:	4819      	ldr	r0, [pc, #100]	; (8011148 <hal_resources_init+0x188>)
 80110e4:	f7fe fbd0 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_cs, 1);
 80110e8:	2101      	movs	r1, #1
 80110ea:	4817      	ldr	r0, [pc, #92]	; (8011148 <hal_resources_init+0x188>)
 80110ec:	f7ff ff2f 	bl	8010f4e <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dcs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 80110f0:	2300      	movs	r3, #0
 80110f2:	2200      	movs	r2, #0
 80110f4:	2101      	movs	r1, #1
 80110f6:	4815      	ldr	r0, [pc, #84]	; (801114c <hal_resources_init+0x18c>)
 80110f8:	f7fe fbc6 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 80110fc:	2101      	movs	r1, #1
 80110fe:	4813      	ldr	r0, [pc, #76]	; (801114c <hal_resources_init+0x18c>)
 8011100:	f7ff ff25 	bl	8010f4e <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_rst, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8011104:	2300      	movs	r3, #0
 8011106:	2200      	movs	r2, #0
 8011108:	2101      	movs	r1, #1
 801110a:	4811      	ldr	r0, [pc, #68]	; (8011150 <hal_resources_init+0x190>)
 801110c:	f7fe fbbc 	bl	800f888 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_rst, 1);
 8011110:	2101      	movs	r1, #1
 8011112:	480f      	ldr	r0, [pc, #60]	; (8011150 <hal_resources_init+0x190>)
 8011114:	f7ff ff1b 	bl	8010f4e <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dreq, GpioModeInput, GpioPullNo, GpioSpeedFreqLow);
 8011118:	2300      	movs	r3, #0
 801111a:	2200      	movs	r2, #0
 801111c:	2100      	movs	r1, #0
 801111e:	480d      	ldr	r0, [pc, #52]	; (8011154 <hal_resources_init+0x194>)
 8011120:	f7fe fbb2 	bl	800f888 <hal_gpio_init>

}
 8011124:	bf00      	nop
 8011126:	bd80      	pop	{r7, pc}
 8011128:	0801422c 	.word	0x0801422c
 801112c:	08014234 	.word	0x08014234
 8011130:	0801423c 	.word	0x0801423c
 8011134:	08014244 	.word	0x08014244
 8011138:	0801424c 	.word	0x0801424c
 801113c:	080142b4 	.word	0x080142b4
 8011140:	080142bc 	.word	0x080142bc
 8011144:	080142c4 	.word	0x080142c4
 8011148:	080142cc 	.word	0x080142cc
 801114c:	080142d4 	.word	0x080142d4
 8011150:	080142dc 	.word	0x080142dc
 8011154:	080142e4 	.word	0x080142e4

08011158 <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 8011158:	b480      	push	{r7}
 801115a:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 801115c:	4b0c      	ldr	r3, [pc, #48]	; (8011190 <sdio_init+0x38>)
 801115e:	4a0d      	ldr	r2, [pc, #52]	; (8011194 <sdio_init+0x3c>)
 8011160:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8011162:	4b0b      	ldr	r3, [pc, #44]	; (8011190 <sdio_init+0x38>)
 8011164:	2200      	movs	r2, #0
 8011166:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8011168:	4b09      	ldr	r3, [pc, #36]	; (8011190 <sdio_init+0x38>)
 801116a:	2200      	movs	r2, #0
 801116c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 801116e:	4b08      	ldr	r3, [pc, #32]	; (8011190 <sdio_init+0x38>)
 8011170:	2200      	movs	r2, #0
 8011172:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8011174:	4b06      	ldr	r3, [pc, #24]	; (8011190 <sdio_init+0x38>)
 8011176:	2200      	movs	r2, #0
 8011178:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 801117a:	4b05      	ldr	r3, [pc, #20]	; (8011190 <sdio_init+0x38>)
 801117c:	2200      	movs	r2, #0
 801117e:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 8011180:	4b03      	ldr	r3, [pc, #12]	; (8011190 <sdio_init+0x38>)
 8011182:	2200      	movs	r2, #0
 8011184:	619a      	str	r2, [r3, #24]
}
 8011186:	bf00      	nop
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr
 8011190:	20007a28 	.word	0x20007a28
 8011194:	40012c00 	.word	0x40012c00

08011198 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b08c      	sub	sp, #48	; 0x30
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80111a0:	2300      	movs	r3, #0
 80111a2:	61bb      	str	r3, [r7, #24]
 80111a4:	4b60      	ldr	r3, [pc, #384]	; (8011328 <HAL_SD_MspInit+0x190>)
 80111a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a8:	4a5f      	ldr	r2, [pc, #380]	; (8011328 <HAL_SD_MspInit+0x190>)
 80111aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80111ae:	6313      	str	r3, [r2, #48]	; 0x30
 80111b0:	4b5d      	ldr	r3, [pc, #372]	; (8011328 <HAL_SD_MspInit+0x190>)
 80111b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80111b8:	61bb      	str	r3, [r7, #24]
 80111ba:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80111bc:	2200      	movs	r2, #0
 80111be:	2100      	movs	r1, #0
 80111c0:	203b      	movs	r0, #59	; 0x3b
 80111c2:	f7f0 f979 	bl	80014b8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80111c6:	203b      	movs	r0, #59	; 0x3b
 80111c8:	f7f0 f992 	bl	80014f0 <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111cc:	f107 031c 	add.w	r3, r7, #28
 80111d0:	2200      	movs	r2, #0
 80111d2:	601a      	str	r2, [r3, #0]
 80111d4:	605a      	str	r2, [r3, #4]
 80111d6:	609a      	str	r2, [r3, #8]
 80111d8:	60da      	str	r2, [r3, #12]
 80111da:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4a52      	ldr	r2, [pc, #328]	; (801132c <HAL_SD_MspInit+0x194>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	f040 809c 	bne.w	8011320 <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 80111e8:	2300      	movs	r3, #0
 80111ea:	617b      	str	r3, [r7, #20]
 80111ec:	4b4e      	ldr	r3, [pc, #312]	; (8011328 <HAL_SD_MspInit+0x190>)
 80111ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111f0:	4a4d      	ldr	r2, [pc, #308]	; (8011328 <HAL_SD_MspInit+0x190>)
 80111f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80111f6:	6453      	str	r3, [r2, #68]	; 0x44
 80111f8:	4b4b      	ldr	r3, [pc, #300]	; (8011328 <HAL_SD_MspInit+0x190>)
 80111fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011200:	617b      	str	r3, [r7, #20]
 8011202:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011204:	2300      	movs	r3, #0
 8011206:	613b      	str	r3, [r7, #16]
 8011208:	4b47      	ldr	r3, [pc, #284]	; (8011328 <HAL_SD_MspInit+0x190>)
 801120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801120c:	4a46      	ldr	r2, [pc, #280]	; (8011328 <HAL_SD_MspInit+0x190>)
 801120e:	f043 0304 	orr.w	r3, r3, #4
 8011212:	6313      	str	r3, [r2, #48]	; 0x30
 8011214:	4b44      	ldr	r3, [pc, #272]	; (8011328 <HAL_SD_MspInit+0x190>)
 8011216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011218:	f003 0304 	and.w	r3, r3, #4
 801121c:	613b      	str	r3, [r7, #16]
 801121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011220:	2300      	movs	r3, #0
 8011222:	60fb      	str	r3, [r7, #12]
 8011224:	4b40      	ldr	r3, [pc, #256]	; (8011328 <HAL_SD_MspInit+0x190>)
 8011226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011228:	4a3f      	ldr	r2, [pc, #252]	; (8011328 <HAL_SD_MspInit+0x190>)
 801122a:	f043 0308 	orr.w	r3, r3, #8
 801122e:	6313      	str	r3, [r2, #48]	; 0x30
 8011230:	4b3d      	ldr	r3, [pc, #244]	; (8011328 <HAL_SD_MspInit+0x190>)
 8011232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011234:	f003 0308 	and.w	r3, r3, #8
 8011238:	60fb      	str	r3, [r7, #12]
 801123a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 801123c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8011240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011242:	2302      	movs	r3, #2
 8011244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011246:	2300      	movs	r3, #0
 8011248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801124a:	2303      	movs	r3, #3
 801124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801124e:	230c      	movs	r3, #12
 8011250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011252:	f107 031c 	add.w	r3, r7, #28
 8011256:	4619      	mov	r1, r3
 8011258:	4835      	ldr	r0, [pc, #212]	; (8011330 <HAL_SD_MspInit+0x198>)
 801125a:	f7f0 fcf5 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801125e:	2304      	movs	r3, #4
 8011260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011262:	2302      	movs	r3, #2
 8011264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011266:	2300      	movs	r3, #0
 8011268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801126a:	2303      	movs	r3, #3
 801126c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801126e:	230c      	movs	r3, #12
 8011270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011272:	f107 031c 	add.w	r3, r7, #28
 8011276:	4619      	mov	r1, r3
 8011278:	482e      	ldr	r0, [pc, #184]	; (8011334 <HAL_SD_MspInit+0x19c>)
 801127a:	f7f0 fce5 	bl	8001c48 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 801127e:	2200      	movs	r2, #0
 8011280:	2105      	movs	r1, #5
 8011282:	203b      	movs	r0, #59	; 0x3b
 8011284:	f7f0 f918 	bl	80014b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8011288:	203b      	movs	r0, #59	; 0x3b
 801128a:	f7f0 f931 	bl	80014f0 <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 801128e:	4b2a      	ldr	r3, [pc, #168]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 8011290:	4a2a      	ldr	r2, [pc, #168]	; (801133c <HAL_SD_MspInit+0x1a4>)
 8011292:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8011294:	4b28      	ldr	r3, [pc, #160]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 8011296:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801129a:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801129c:	4b26      	ldr	r3, [pc, #152]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 801129e:	2200      	movs	r2, #0
 80112a0:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 80112a2:	4b25      	ldr	r3, [pc, #148]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 80112a8:	4b23      	ldr	r3, [pc, #140]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80112ae:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80112b0:	4b21      	ldr	r3, [pc, #132]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80112b6:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80112b8:	4b1f      	ldr	r3, [pc, #124]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80112be:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 80112c0:	4b1d      	ldr	r3, [pc, #116]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112c2:	2220      	movs	r2, #32
 80112c4:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 80112c6:	4b1c      	ldr	r3, [pc, #112]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80112cc:	4b1a      	ldr	r3, [pc, #104]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112ce:	2204      	movs	r2, #4
 80112d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80112d2:	4b19      	ldr	r3, [pc, #100]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112d4:	2203      	movs	r2, #3
 80112d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 80112d8:	4b17      	ldr	r3, [pc, #92]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80112de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 80112e0:	4b15      	ldr	r3, [pc, #84]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80112e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 80112e8:	4813      	ldr	r0, [pc, #76]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112ea:	f7f0 f90f 	bl	800150c <HAL_DMA_Init>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 80112f4:	f001 fd76 	bl	8012de4 <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	4a0f      	ldr	r2, [pc, #60]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 80112fc:	641a      	str	r2, [r3, #64]	; 0x40
 80112fe:	4a0e      	ldr	r2, [pc, #56]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4a0c      	ldr	r2, [pc, #48]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 8011308:	63da      	str	r2, [r3, #60]	; 0x3c
 801130a:	4a0b      	ldr	r2, [pc, #44]	; (8011338 <HAL_SD_MspInit+0x1a0>)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8011310:	2200      	movs	r2, #0
 8011312:	2105      	movs	r1, #5
 8011314:	2031      	movs	r0, #49	; 0x31
 8011316:	f7f0 f8cf 	bl	80014b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 801131a:	2031      	movs	r0, #49	; 0x31
 801131c:	f7f0 f8e8 	bl	80014f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8011320:	bf00      	nop
 8011322:	3730      	adds	r7, #48	; 0x30
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	40023800 	.word	0x40023800
 801132c:	40012c00 	.word	0x40012c00
 8011330:	40020800 	.word	0x40020800
 8011334:	40020c00 	.word	0x40020c00
 8011338:	20007aac 	.word	0x20007aac
 801133c:	40026458 	.word	0x40026458

08011340 <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 8011344:	4802      	ldr	r0, [pc, #8]	; (8011350 <DMA2_Stream3_IRQHandler+0x10>)
 8011346:	f7f0 fa09 	bl	800175c <HAL_DMA_IRQHandler>
}
 801134a:	bf00      	nop
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	20007aac 	.word	0x20007aac

08011354 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 8011358:	4802      	ldr	r0, [pc, #8]	; (8011364 <SDIO_IRQHandler+0x10>)
 801135a:	f7f1 f8eb 	bl	8002534 <HAL_SD_IRQHandler>
}
 801135e:	bf00      	nop
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	20007a28 	.word	0x20007a28

08011368 <__NVIC_GetPriorityGrouping>:
{
 8011368:	b480      	push	{r7}
 801136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801136c:	4b04      	ldr	r3, [pc, #16]	; (8011380 <__NVIC_GetPriorityGrouping+0x18>)
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	0a1b      	lsrs	r3, r3, #8
 8011372:	f003 0307 	and.w	r3, r3, #7
}
 8011376:	4618      	mov	r0, r3
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	e000ed00 	.word	0xe000ed00

08011384 <__NVIC_EnableIRQ>:
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	4603      	mov	r3, r0
 801138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011392:	2b00      	cmp	r3, #0
 8011394:	db0b      	blt.n	80113ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011396:	79fb      	ldrb	r3, [r7, #7]
 8011398:	f003 021f 	and.w	r2, r3, #31
 801139c:	4907      	ldr	r1, [pc, #28]	; (80113bc <__NVIC_EnableIRQ+0x38>)
 801139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113a2:	095b      	lsrs	r3, r3, #5
 80113a4:	2001      	movs	r0, #1
 80113a6:	fa00 f202 	lsl.w	r2, r0, r2
 80113aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80113ae:	bf00      	nop
 80113b0:	370c      	adds	r7, #12
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	e000e100 	.word	0xe000e100

080113c0 <__NVIC_SetPriority>:
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	6039      	str	r1, [r7, #0]
 80113ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80113cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	db0a      	blt.n	80113ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	490c      	ldr	r1, [pc, #48]	; (801140c <__NVIC_SetPriority+0x4c>)
 80113da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113de:	0112      	lsls	r2, r2, #4
 80113e0:	b2d2      	uxtb	r2, r2
 80113e2:	440b      	add	r3, r1
 80113e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80113e8:	e00a      	b.n	8011400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	4908      	ldr	r1, [pc, #32]	; (8011410 <__NVIC_SetPriority+0x50>)
 80113f0:	79fb      	ldrb	r3, [r7, #7]
 80113f2:	f003 030f 	and.w	r3, r3, #15
 80113f6:	3b04      	subs	r3, #4
 80113f8:	0112      	lsls	r2, r2, #4
 80113fa:	b2d2      	uxtb	r2, r2
 80113fc:	440b      	add	r3, r1
 80113fe:	761a      	strb	r2, [r3, #24]
}
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
 801140c:	e000e100 	.word	0xe000e100
 8011410:	e000ed00 	.word	0xe000ed00

08011414 <NVIC_EncodePriority>:
{
 8011414:	b480      	push	{r7}
 8011416:	b089      	sub	sp, #36	; 0x24
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f003 0307 	and.w	r3, r3, #7
 8011426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	f1c3 0307 	rsb	r3, r3, #7
 801142e:	2b04      	cmp	r3, #4
 8011430:	bf28      	it	cs
 8011432:	2304      	movcs	r3, #4
 8011434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	3304      	adds	r3, #4
 801143a:	2b06      	cmp	r3, #6
 801143c:	d902      	bls.n	8011444 <NVIC_EncodePriority+0x30>
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	3b03      	subs	r3, #3
 8011442:	e000      	b.n	8011446 <NVIC_EncodePriority+0x32>
 8011444:	2300      	movs	r3, #0
 8011446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	fa02 f303 	lsl.w	r3, r2, r3
 8011452:	43da      	mvns	r2, r3
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	401a      	ands	r2, r3
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801145c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	fa01 f303 	lsl.w	r3, r1, r3
 8011466:	43d9      	mvns	r1, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801146c:	4313      	orrs	r3, r2
}
 801146e:	4618      	mov	r0, r3
 8011470:	3724      	adds	r7, #36	; 0x24
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr

0801147a <LL_SPI_Enable>:
{
 801147a:	b480      	push	{r7}
 801147c:	b083      	sub	sp, #12
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	601a      	str	r2, [r3, #0]
}
 801148e:	bf00      	nop
 8011490:	370c      	adds	r7, #12
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <LL_SPI_SetStandard>:
{
 801149a:	b480      	push	{r7}
 801149c:	b083      	sub	sp, #12
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
 80114a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	f023 0210 	bic.w	r2, r3, #16
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	431a      	orrs	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	605a      	str	r2, [r3, #4]
}
 80114b4:	bf00      	nop
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	f003 0301 	and.w	r3, r3, #1
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d101      	bne.n	80114d8 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80114d4:	2301      	movs	r3, #1
 80114d6:	e000      	b.n	80114da <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80114d8:	2300      	movs	r3, #0
}
 80114da:	4618      	mov	r0, r3
 80114dc:	370c      	adds	r7, #12
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr

080114e6 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80114e6:	b480      	push	{r7}
 80114e8:	b083      	sub	sp, #12
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	689b      	ldr	r3, [r3, #8]
 80114f2:	f003 0302 	and.w	r3, r3, #2
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d101      	bne.n	80114fe <LL_SPI_IsActiveFlag_TXE+0x18>
 80114fa:	2301      	movs	r3, #1
 80114fc:	e000      	b.n	8011500 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80114fe:	2300      	movs	r3, #0
}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr

0801150c <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801151c:	2b80      	cmp	r3, #128	; 0x80
 801151e:	d101      	bne.n	8011524 <LL_SPI_IsActiveFlag_BSY+0x18>
 8011520:	2301      	movs	r3, #1
 8011522:	e000      	b.n	8011526 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	370c      	adds	r7, #12
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr

08011532 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8011532:	b480      	push	{r7}
 8011534:	b083      	sub	sp, #12
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	330c      	adds	r3, #12
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	b2db      	uxtb	r3, r3
}
 8011542:	4618      	mov	r0, r3
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 801154e:	b480      	push	{r7}
 8011550:	b085      	sub	sp, #20
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	460b      	mov	r3, r1
 8011558:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	330c      	adds	r3, #12
 801155e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	78fa      	ldrb	r2, [r7, #3]
 8011564:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8011566:	bf00      	nop
 8011568:	3714      	adds	r7, #20
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr
	...

08011574 <LL_DMA_SetDataTransferDirection>:
{
 8011574:	b480      	push	{r7}
 8011576:	b085      	sub	sp, #20
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8011580:	4a0d      	ldr	r2, [pc, #52]	; (80115b8 <LL_DMA_SetDataTransferDirection+0x44>)
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	4413      	add	r3, r2
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	461a      	mov	r2, r3
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	4413      	add	r3, r2
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011594:	4908      	ldr	r1, [pc, #32]	; (80115b8 <LL_DMA_SetDataTransferDirection+0x44>)
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	440b      	add	r3, r1
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	4619      	mov	r1, r3
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	440b      	add	r3, r1
 80115a2:	4619      	mov	r1, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4313      	orrs	r3, r2
 80115a8:	600b      	str	r3, [r1, #0]
}
 80115aa:	bf00      	nop
 80115ac:	3714      	adds	r7, #20
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	080142ec 	.word	0x080142ec

080115bc <LL_DMA_SetMode>:
{
 80115bc:	b480      	push	{r7}
 80115be:	b085      	sub	sp, #20
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80115c8:	4a0d      	ldr	r2, [pc, #52]	; (8011600 <LL_DMA_SetMode+0x44>)
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	4413      	add	r3, r2
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	461a      	mov	r2, r3
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	4413      	add	r3, r2
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80115dc:	4908      	ldr	r1, [pc, #32]	; (8011600 <LL_DMA_SetMode+0x44>)
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	440b      	add	r3, r1
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	4619      	mov	r1, r3
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	440b      	add	r3, r1
 80115ea:	4619      	mov	r1, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4313      	orrs	r3, r2
 80115f0:	600b      	str	r3, [r1, #0]
}
 80115f2:	bf00      	nop
 80115f4:	3714      	adds	r7, #20
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop
 8011600:	080142ec 	.word	0x080142ec

08011604 <LL_DMA_SetPeriphIncMode>:
{
 8011604:	b480      	push	{r7}
 8011606:	b085      	sub	sp, #20
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8011610:	4a0d      	ldr	r2, [pc, #52]	; (8011648 <LL_DMA_SetPeriphIncMode+0x44>)
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	4413      	add	r3, r2
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	461a      	mov	r2, r3
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	4413      	add	r3, r2
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011624:	4908      	ldr	r1, [pc, #32]	; (8011648 <LL_DMA_SetPeriphIncMode+0x44>)
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	440b      	add	r3, r1
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	4619      	mov	r1, r3
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	440b      	add	r3, r1
 8011632:	4619      	mov	r1, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4313      	orrs	r3, r2
 8011638:	600b      	str	r3, [r1, #0]
}
 801163a:	bf00      	nop
 801163c:	3714      	adds	r7, #20
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop
 8011648:	080142ec 	.word	0x080142ec

0801164c <LL_DMA_SetMemoryIncMode>:
{
 801164c:	b480      	push	{r7}
 801164e:	b085      	sub	sp, #20
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8011658:	4a0d      	ldr	r2, [pc, #52]	; (8011690 <LL_DMA_SetMemoryIncMode+0x44>)
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	4413      	add	r3, r2
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	461a      	mov	r2, r3
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	4413      	add	r3, r2
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801166c:	4908      	ldr	r1, [pc, #32]	; (8011690 <LL_DMA_SetMemoryIncMode+0x44>)
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	440b      	add	r3, r1
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	4619      	mov	r1, r3
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	440b      	add	r3, r1
 801167a:	4619      	mov	r1, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4313      	orrs	r3, r2
 8011680:	600b      	str	r3, [r1, #0]
}
 8011682:	bf00      	nop
 8011684:	3714      	adds	r7, #20
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	080142ec 	.word	0x080142ec

08011694 <LL_DMA_SetPeriphSize>:
{
 8011694:	b480      	push	{r7}
 8011696:	b085      	sub	sp, #20
 8011698:	af00      	add	r7, sp, #0
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80116a0:	4a0d      	ldr	r2, [pc, #52]	; (80116d8 <LL_DMA_SetPeriphSize+0x44>)
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	4413      	add	r3, r2
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	461a      	mov	r2, r3
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	4413      	add	r3, r2
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80116b4:	4908      	ldr	r1, [pc, #32]	; (80116d8 <LL_DMA_SetPeriphSize+0x44>)
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	440b      	add	r3, r1
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	4619      	mov	r1, r3
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	440b      	add	r3, r1
 80116c2:	4619      	mov	r1, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4313      	orrs	r3, r2
 80116c8:	600b      	str	r3, [r1, #0]
}
 80116ca:	bf00      	nop
 80116cc:	3714      	adds	r7, #20
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop
 80116d8:	080142ec 	.word	0x080142ec

080116dc <LL_DMA_SetMemorySize>:
{
 80116dc:	b480      	push	{r7}
 80116de:	b085      	sub	sp, #20
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80116e8:	4a0d      	ldr	r2, [pc, #52]	; (8011720 <LL_DMA_SetMemorySize+0x44>)
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	4413      	add	r3, r2
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	461a      	mov	r2, r3
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	4413      	add	r3, r2
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80116fc:	4908      	ldr	r1, [pc, #32]	; (8011720 <LL_DMA_SetMemorySize+0x44>)
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	440b      	add	r3, r1
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	4619      	mov	r1, r3
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	440b      	add	r3, r1
 801170a:	4619      	mov	r1, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4313      	orrs	r3, r2
 8011710:	600b      	str	r3, [r1, #0]
}
 8011712:	bf00      	nop
 8011714:	3714      	adds	r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	080142ec 	.word	0x080142ec

08011724 <LL_DMA_SetStreamPriorityLevel>:
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8011730:	4a0d      	ldr	r2, [pc, #52]	; (8011768 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	4413      	add	r3, r2
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	461a      	mov	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	4413      	add	r3, r2
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011744:	4908      	ldr	r1, [pc, #32]	; (8011768 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	440b      	add	r3, r1
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	4619      	mov	r1, r3
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	440b      	add	r3, r1
 8011752:	4619      	mov	r1, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4313      	orrs	r3, r2
 8011758:	600b      	str	r3, [r1, #0]
}
 801175a:	bf00      	nop
 801175c:	3714      	adds	r7, #20
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	080142ec 	.word	0x080142ec

0801176c <LL_DMA_SetChannelSelection>:
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8011778:	4a0d      	ldr	r2, [pc, #52]	; (80117b0 <LL_DMA_SetChannelSelection+0x44>)
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	4413      	add	r3, r2
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	461a      	mov	r2, r3
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	4413      	add	r3, r2
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801178c:	4908      	ldr	r1, [pc, #32]	; (80117b0 <LL_DMA_SetChannelSelection+0x44>)
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	440b      	add	r3, r1
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	4619      	mov	r1, r3
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	440b      	add	r3, r1
 801179a:	4619      	mov	r1, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4313      	orrs	r3, r2
 80117a0:	600b      	str	r3, [r1, #0]
}
 80117a2:	bf00      	nop
 80117a4:	3714      	adds	r7, #20
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	080142ec 	.word	0x080142ec

080117b4 <LL_DMA_DisableFifoMode>:
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80117be:	4a0c      	ldr	r2, [pc, #48]	; (80117f0 <LL_DMA_DisableFifoMode+0x3c>)
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	4413      	add	r3, r2
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	461a      	mov	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4413      	add	r3, r2
 80117cc:	695b      	ldr	r3, [r3, #20]
 80117ce:	4908      	ldr	r1, [pc, #32]	; (80117f0 <LL_DMA_DisableFifoMode+0x3c>)
 80117d0:	683a      	ldr	r2, [r7, #0]
 80117d2:	440a      	add	r2, r1
 80117d4:	7812      	ldrb	r2, [r2, #0]
 80117d6:	4611      	mov	r1, r2
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	440a      	add	r2, r1
 80117dc:	f023 0304 	bic.w	r3, r3, #4
 80117e0:	6153      	str	r3, [r2, #20]
}
 80117e2:	bf00      	nop
 80117e4:	370c      	adds	r7, #12
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop
 80117f0:	080142ec 	.word	0x080142ec

080117f4 <LL_APB2_GRP1_EnableClock>:
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80117fc:	4b08      	ldr	r3, [pc, #32]	; (8011820 <LL_APB2_GRP1_EnableClock+0x2c>)
 80117fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011800:	4907      	ldr	r1, [pc, #28]	; (8011820 <LL_APB2_GRP1_EnableClock+0x2c>)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4313      	orrs	r3, r2
 8011806:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8011808:	4b05      	ldr	r3, [pc, #20]	; (8011820 <LL_APB2_GRP1_EnableClock+0x2c>)
 801180a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	4013      	ands	r3, r2
 8011810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011812:	68fb      	ldr	r3, [r7, #12]
}
 8011814:	bf00      	nop
 8011816:	3714      	adds	r7, #20
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr
 8011820:	40023800 	.word	0x40023800

08011824 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	4603      	mov	r3, r0
 801182c:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 801182e:	f7f7 fc8b 	bl	8009148 <vPortEnterCritical>

	switch(spi_id) {
 8011832:	79fb      	ldrb	r3, [r7, #7]
 8011834:	2b05      	cmp	r3, #5
 8011836:	d014      	beq.n	8011862 <spi_init+0x3e>
 8011838:	2b05      	cmp	r3, #5
 801183a:	dc19      	bgt.n	8011870 <spi_init+0x4c>
 801183c:	2b02      	cmp	r3, #2
 801183e:	d002      	beq.n	8011846 <spi_init+0x22>
 8011840:	2b04      	cmp	r3, #4
 8011842:	d007      	beq.n	8011854 <spi_init+0x30>
 8011844:	e014      	b.n	8011870 <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 8011846:	480f      	ldr	r0, [pc, #60]	; (8011884 <spi_init+0x60>)
 8011848:	f000 f900 	bl	8011a4c <spi2_init>
		hal_cli_printf("spi2 init");
 801184c:	480e      	ldr	r0, [pc, #56]	; (8011888 <spi_init+0x64>)
 801184e:	f7fd fac5 	bl	800eddc <hal_cli_printf>
		break;
 8011852:	e011      	b.n	8011878 <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 8011854:	480d      	ldr	r0, [pc, #52]	; (801188c <spi_init+0x68>)
 8011856:	f000 f921 	bl	8011a9c <spi4_init>
		hal_cli_printf("spi4 init");
 801185a:	480d      	ldr	r0, [pc, #52]	; (8011890 <spi_init+0x6c>)
 801185c:	f7fd fabe 	bl	800eddc <hal_cli_printf>
		break;
 8011860:	e00a      	b.n	8011878 <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 8011862:	480c      	ldr	r0, [pc, #48]	; (8011894 <spi_init+0x70>)
 8011864:	f000 f942 	bl	8011aec <spi5_init>
		hal_cli_printf("spi5 init");
 8011868:	480b      	ldr	r0, [pc, #44]	; (8011898 <spi_init+0x74>)
 801186a:	f7fd fab7 	bl	800eddc <hal_cli_printf>
		break;
 801186e:	e003      	b.n	8011878 <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 8011870:	480a      	ldr	r0, [pc, #40]	; (801189c <spi_init+0x78>)
 8011872:	f7fd fab3 	bl	800eddc <hal_cli_printf>
		break;
 8011876:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 8011878:	f7f7 fc96 	bl	80091a8 <vPortExitCritical>
}
 801187c:	bf00      	nop
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	20007b0c 	.word	0x20007b0c
 8011888:	08013b74 	.word	0x08013b74
 801188c:	20007b20 	.word	0x20007b20
 8011890:	08013b80 	.word	0x08013b80
 8011894:	20007b34 	.word	0x20007b34
 8011898:	08013b8c 	.word	0x08013b8c
 801189c:	08013b98 	.word	0x08013b98

080118a0 <hal_spi_transfer>:

bool hal_spi_transfer(spidrv_t* drv, uint8_t* data, uint32_t size, uint32_t timeout)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b088      	sub	sp, #32
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6178      	str	r0, [r7, #20]
 80118a8:	6139      	str	r1, [r7, #16]
 80118aa:	60fa      	str	r2, [r7, #12]
 80118ac:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 80118ae:	463b      	mov	r3, r7
 80118b0:	68b9      	ldr	r1, [r7, #8]
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fd fd74 	bl	800f3a0 <hal_get_delay_timer>
 80118b8:	f107 0318 	add.w	r3, r7, #24
 80118bc:	463a      	mov	r2, r7
 80118be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118c2:	e883 0003 	stmia.w	r3, {r0, r1}

	while(size > 0) {
 80118c6:	e023      	b.n	8011910 <hal_spi_transfer+0x70>
		LL_SPI_TransmitData8(drv->spi, *data);
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	4619      	mov	r1, r3
 80118d2:	4610      	mov	r0, r2
 80118d4:	f7ff fe3b 	bl	801154e <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 80118d8:	e00c      	b.n	80118f4 <hal_spi_transfer+0x54>
			if(hal_delay_timer_is_expired(&timer)) {
 80118da:	f107 0318 	add.w	r3, r7, #24
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fd fd84 	bl	800f3ec <hal_delay_timer_is_expired>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d004      	beq.n	80118f4 <hal_spi_transfer+0x54>
				hal_cli_printf("spi txe flag failed");
 80118ea:	4818      	ldr	r0, [pc, #96]	; (801194c <hal_spi_transfer+0xac>)
 80118ec:	f7fd fa76 	bl	800eddc <hal_cli_printf>
				return false;
 80118f0:	2300      	movs	r3, #0
 80118f2:	e027      	b.n	8011944 <hal_spi_transfer+0xa4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7ff fdf4 	bl	80114e6 <LL_SPI_IsActiveFlag_TXE>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	d0ea      	beq.n	80118da <hal_spi_transfer+0x3a>
			}
		}
		size--;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	3b01      	subs	r3, #1
 8011908:	60fb      	str	r3, [r7, #12]
		data++;
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	3301      	adds	r3, #1
 801190e:	613b      	str	r3, [r7, #16]
	while(size > 0) {
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1d8      	bne.n	80118c8 <hal_spi_transfer+0x28>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011916:	e00c      	b.n	8011932 <hal_spi_transfer+0x92>
		if(hal_delay_timer_is_expired(&timer)) {
 8011918:	f107 0318 	add.w	r3, r7, #24
 801191c:	4618      	mov	r0, r3
 801191e:	f7fd fd65 	bl	800f3ec <hal_delay_timer_is_expired>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d004      	beq.n	8011932 <hal_spi_transfer+0x92>
			hal_cli_printf("spi busy flag failed");
 8011928:	4809      	ldr	r0, [pc, #36]	; (8011950 <hal_spi_transfer+0xb0>)
 801192a:	f7fd fa57 	bl	800eddc <hal_cli_printf>
			return false;
 801192e:	2300      	movs	r3, #0
 8011930:	e008      	b.n	8011944 <hal_spi_transfer+0xa4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff fde8 	bl	801150c <LL_SPI_IsActiveFlag_BSY>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1ea      	bne.n	8011918 <hal_spi_transfer+0x78>
		}
	}

	return true;
 8011942:	2301      	movs	r3, #1
}
 8011944:	4618      	mov	r0, r3
 8011946:	3720      	adds	r7, #32
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	08013bac 	.word	0x08013bac
 8011950:	08013bc0 	.word	0x08013bc0

08011954 <hal_spi_txrx>:

	return true;
}

bool hal_spi_txrx(spidrv_t* drv, uint8_t* tx, uint8_t* rx, uint32_t size, uint32_t timeout)
{
 8011954:	b590      	push	{r4, r7, lr}
 8011956:	b08b      	sub	sp, #44	; 0x2c
 8011958:	af00      	add	r7, sp, #0
 801195a:	6178      	str	r0, [r7, #20]
 801195c:	6139      	str	r1, [r7, #16]
 801195e:	60fa      	str	r2, [r7, #12]
 8011960:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 8011962:	463b      	mov	r3, r7
 8011964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011966:	4618      	mov	r0, r3
 8011968:	f7fd fd1a 	bl	800f3a0 <hal_get_delay_timer>
 801196c:	f107 031c 	add.w	r3, r7, #28
 8011970:	463a      	mov	r2, r7
 8011972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011976:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int i = 0; i < size; i++) {
 801197a:	2300      	movs	r3, #0
 801197c:	627b      	str	r3, [r7, #36]	; 0x24
 801197e:	e040      	b.n	8011a02 <hal_spi_txrx+0xae>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8011980:	f107 031c 	add.w	r3, r7, #28
 8011984:	4618      	mov	r0, r3
 8011986:	f7fd fd31 	bl	800f3ec <hal_delay_timer_is_expired>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	d004      	beq.n	801199a <hal_spi_txrx+0x46>
				hal_cli_printf("spi txe flag failed");
 8011990:	482b      	ldr	r0, [pc, #172]	; (8011a40 <hal_spi_txrx+0xec>)
 8011992:	f7fd fa23 	bl	800eddc <hal_cli_printf>
				return false;
 8011996:	2300      	movs	r3, #0
 8011998:	e04e      	b.n	8011a38 <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4618      	mov	r0, r3
 80119a0:	f7ff fda1 	bl	80114e6 <LL_SPI_IsActiveFlag_TXE>
 80119a4:	4603      	mov	r3, r0
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d0ea      	beq.n	8011980 <hal_spi_txrx+0x2c>
			}
		}
		LL_SPI_TransmitData8(drv->spi, tx[i]);
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	6818      	ldr	r0, [r3, #0]
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b0:	693a      	ldr	r2, [r7, #16]
 80119b2:	4413      	add	r3, r2
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	4619      	mov	r1, r3
 80119b8:	f7ff fdc9 	bl	801154e <LL_SPI_TransmitData8>

		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 80119bc:	e00c      	b.n	80119d8 <hal_spi_txrx+0x84>
			if(hal_delay_timer_is_expired(&timer)) {
 80119be:	f107 031c 	add.w	r3, r7, #28
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fd fd12 	bl	800f3ec <hal_delay_timer_is_expired>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <hal_spi_txrx+0x84>
				hal_cli_printf("spi rxne flag failed");
 80119ce:	481d      	ldr	r0, [pc, #116]	; (8011a44 <hal_spi_txrx+0xf0>)
 80119d0:	f7fd fa04 	bl	800eddc <hal_cli_printf>
				return false;
 80119d4:	2300      	movs	r3, #0
 80119d6:	e02f      	b.n	8011a38 <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4618      	mov	r0, r3
 80119de:	f7ff fd6f 	bl	80114c0 <LL_SPI_IsActiveFlag_RXNE>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d0ea      	beq.n	80119be <hal_spi_txrx+0x6a>
			}
		}
		rx[i] = LL_SPI_ReceiveData8(drv->spi);
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	6819      	ldr	r1, [r3, #0]
 80119ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	18d4      	adds	r4, r2, r3
 80119f2:	4608      	mov	r0, r1
 80119f4:	f7ff fd9d 	bl	8011532 <LL_SPI_ReceiveData8>
 80119f8:	4603      	mov	r3, r0
 80119fa:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < size; i++) {
 80119fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fe:	3301      	adds	r3, #1
 8011a00:	627b      	str	r3, [r7, #36]	; 0x24
 8011a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a04:	68ba      	ldr	r2, [r7, #8]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d8c7      	bhi.n	801199a <hal_spi_txrx+0x46>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011a0a:	e00c      	b.n	8011a26 <hal_spi_txrx+0xd2>
		if(hal_delay_timer_is_expired(&timer)) {
 8011a0c:	f107 031c 	add.w	r3, r7, #28
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7fd fceb 	bl	800f3ec <hal_delay_timer_is_expired>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d004      	beq.n	8011a26 <hal_spi_txrx+0xd2>
			hal_cli_printf("spi busy flag failed");
 8011a1c:	480a      	ldr	r0, [pc, #40]	; (8011a48 <hal_spi_txrx+0xf4>)
 8011a1e:	f7fd f9dd 	bl	800eddc <hal_cli_printf>
			return false;
 8011a22:	2300      	movs	r3, #0
 8011a24:	e008      	b.n	8011a38 <hal_spi_txrx+0xe4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7ff fd6e 	bl	801150c <LL_SPI_IsActiveFlag_BSY>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1ea      	bne.n	8011a0c <hal_spi_txrx+0xb8>
		}
	}
	return true;
 8011a36:	2301      	movs	r3, #1
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	372c      	adds	r7, #44	; 0x2c
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd90      	pop	{r4, r7, pc}
 8011a40:	08013bac 	.word	0x08013bac
 8011a44:	08013bd8 	.word	0x08013bd8
 8011a48:	08013bc0 	.word	0x08013bc0

08011a4c <spi2_init>:


static void spi2_init(spidrv_t* drv)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 8011a54:	f000 f872 	bl	8011b3c <spi2_pin_conf>
	spi2_dma_init();
 8011a58:	f000 f88a 	bl	8011b70 <spi2_dma_init>
	spi2_config();
 8011a5c:	f000 f8cc 	bl	8011bf8 <spi2_config>

	LL_SPI_Enable(SPI2);
 8011a60:	480c      	ldr	r0, [pc, #48]	; (8011a94 <spi2_init+0x48>)
 8011a62:	f7ff fd0a 	bl	801147a <LL_SPI_Enable>

	drv->spi = SPI2;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	4a0a      	ldr	r2, [pc, #40]	; (8011a94 <spi2_init+0x48>)
 8011a6a:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4a0a      	ldr	r2, [pc, #40]	; (8011a98 <spi2_init+0x4c>)
 8011a70:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2204      	movs	r2, #4
 8011a76:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011a7e:	2001      	movs	r0, #1
 8011a80:	f7f7 fe58 	bl	8009734 <xQueueCreateMutex>
 8011a84:	4602      	mov	r2, r0
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	605a      	str	r2, [r3, #4]
}
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	40003800 	.word	0x40003800
 8011a98:	40026000 	.word	0x40026000

08011a9c <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 8011aa4:	f000 f8e6 	bl	8011c74 <spi4_pin_conf>
	spi4_dma_init();
 8011aa8:	f000 f908 	bl	8011cbc <spi4_dma_init>
	spi4_config();
 8011aac:	f000 f988 	bl	8011dc0 <spi4_config>

	LL_SPI_Enable(SPI4);
 8011ab0:	480c      	ldr	r0, [pc, #48]	; (8011ae4 <spi4_init+0x48>)
 8011ab2:	f7ff fce2 	bl	801147a <LL_SPI_Enable>

	drv->spi = SPI4;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	4a0a      	ldr	r2, [pc, #40]	; (8011ae4 <spi4_init+0x48>)
 8011aba:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4a0a      	ldr	r2, [pc, #40]	; (8011ae8 <spi4_init+0x4c>)
 8011ac0:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011ace:	2001      	movs	r0, #1
 8011ad0:	f7f7 fe30 	bl	8009734 <xQueueCreateMutex>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	605a      	str	r2, [r3, #4]
}
 8011ada:	bf00      	nop
 8011adc:	3708      	adds	r7, #8
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	40013400 	.word	0x40013400
 8011ae8:	40026400 	.word	0x40026400

08011aec <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 8011af4:	f000 f9a2 	bl	8011e3c <spi5_pin_conf>
	spi5_dma_init();
 8011af8:	f000 f9c4 	bl	8011e84 <spi5_dma_init>
	spi5_config();
 8011afc:	f000 fa06 	bl	8011f0c <spi5_config>

	LL_SPI_Enable(SPI5);
 8011b00:	480c      	ldr	r0, [pc, #48]	; (8011b34 <spi5_init+0x48>)
 8011b02:	f7ff fcba 	bl	801147a <LL_SPI_Enable>

	drv->spi = SPI5;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	4a0a      	ldr	r2, [pc, #40]	; (8011b34 <spi5_init+0x48>)
 8011b0a:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4a0a      	ldr	r2, [pc, #40]	; (8011b38 <spi5_init+0x4c>)
 8011b10:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2204      	movs	r2, #4
 8011b16:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011b1e:	2001      	movs	r0, #1
 8011b20:	f7f7 fe08 	bl	8009734 <xQueueCreateMutex>
 8011b24:	4602      	mov	r2, r0
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	605a      	str	r2, [r3, #4]
}
 8011b2a:	bf00      	nop
 8011b2c:	3708      	adds	r7, #8
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	40015000 	.word	0x40015000
 8011b38:	40026400 	.word	0x40026400

08011b3c <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8011b42:	2305      	movs	r3, #5
 8011b44:	9300      	str	r3, [sp, #0]
 8011b46:	2303      	movs	r3, #3
 8011b48:	2200      	movs	r2, #0
 8011b4a:	2103      	movs	r1, #3
 8011b4c:	4806      	ldr	r0, [pc, #24]	; (8011b68 <spi2_pin_conf+0x2c>)
 8011b4e:	f7fd feb5 	bl	800f8bc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011b52:	2305      	movs	r3, #5
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	2303      	movs	r3, #3
 8011b58:	2200      	movs	r2, #0
 8011b5a:	2103      	movs	r1, #3
 8011b5c:	4803      	ldr	r0, [pc, #12]	; (8011b6c <spi2_pin_conf+0x30>)
 8011b5e:	f7fd fead 	bl	800f8bc <hal_gpio_init_alt>
		&gpio_spi2_mosi,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8011b62:	bf00      	nop
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	0801428c 	.word	0x0801428c
 8011b6c:	08014294 	.word	0x08014294

08011b70 <spi2_dma_init>:

static void spi2_dma_init(void)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011b74:	f7ff fbf8 	bl	8011368 <__NVIC_GetPriorityGrouping>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	2105      	movs	r1, #5
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff fc48 	bl	8011414 <NVIC_EncodePriority>
 8011b84:	4603      	mov	r3, r0
 8011b86:	4619      	mov	r1, r3
 8011b88:	200f      	movs	r0, #15
 8011b8a:	f7ff fc19 	bl	80113c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8011b8e:	200f      	movs	r0, #15
 8011b90:	f7ff fbf8 	bl	8011384 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, DMA_SPI2_TX_STREAM, DMA_SPI2_TX_CHANNEL);
 8011b94:	2200      	movs	r2, #0
 8011b96:	2104      	movs	r1, #4
 8011b98:	4816      	ldr	r0, [pc, #88]	; (8011bf4 <spi2_dma_init+0x84>)
 8011b9a:	f7ff fde7 	bl	801176c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011b9e:	2240      	movs	r2, #64	; 0x40
 8011ba0:	2104      	movs	r1, #4
 8011ba2:	4814      	ldr	r0, [pc, #80]	; (8011bf4 <spi2_dma_init+0x84>)
 8011ba4:	f7ff fce6 	bl	8011574 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011ba8:	2200      	movs	r2, #0
 8011baa:	2104      	movs	r1, #4
 8011bac:	4811      	ldr	r0, [pc, #68]	; (8011bf4 <spi2_dma_init+0x84>)
 8011bae:	f7ff fdb9 	bl	8011724 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	2104      	movs	r1, #4
 8011bb6:	480f      	ldr	r0, [pc, #60]	; (8011bf4 <spi2_dma_init+0x84>)
 8011bb8:	f7ff fd00 	bl	80115bc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	2104      	movs	r1, #4
 8011bc0:	480c      	ldr	r0, [pc, #48]	; (8011bf4 <spi2_dma_init+0x84>)
 8011bc2:	f7ff fd1f 	bl	8011604 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011bca:	2104      	movs	r1, #4
 8011bcc:	4809      	ldr	r0, [pc, #36]	; (8011bf4 <spi2_dma_init+0x84>)
 8011bce:	f7ff fd3d 	bl	801164c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	2104      	movs	r1, #4
 8011bd6:	4807      	ldr	r0, [pc, #28]	; (8011bf4 <spi2_dma_init+0x84>)
 8011bd8:	f7ff fd5c 	bl	8011694 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011bdc:	2200      	movs	r2, #0
 8011bde:	2104      	movs	r1, #4
 8011be0:	4804      	ldr	r0, [pc, #16]	; (8011bf4 <spi2_dma_init+0x84>)
 8011be2:	f7ff fd7b 	bl	80116dc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, DMA_SPI2_TX_STREAM);
 8011be6:	2104      	movs	r1, #4
 8011be8:	4802      	ldr	r0, [pc, #8]	; (8011bf4 <spi2_dma_init+0x84>)
 8011bea:	f7ff fde3 	bl	80117b4 <LL_DMA_DisableFifoMode>
}
 8011bee:	bf00      	nop
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	40026000 	.word	0x40026000

08011bf8 <spi2_config>:

static void spi2_config(void)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b08a      	sub	sp, #40	; 0x28
 8011bfc:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011bfe:	463b      	mov	r3, r7
 8011c00:	2228      	movs	r2, #40	; 0x28
 8011c02:	2100      	movs	r1, #0
 8011c04:	4618      	mov	r0, r3
 8011c06:	f001 f963 	bl	8012ed0 <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011c0a:	f7ff fbad 	bl	8011368 <__NVIC_GetPriorityGrouping>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2200      	movs	r2, #0
 8011c12:	2105      	movs	r1, #5
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7ff fbfd 	bl	8011414 <NVIC_EncodePriority>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	2024      	movs	r0, #36	; 0x24
 8011c20:	f7ff fbce 	bl	80113c0 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 8011c24:	2024      	movs	r0, #36	; 0x24
 8011c26:	f7ff fbad 	bl	8011384 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011c2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011c32:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011c34:	2300      	movs	r3, #0
 8011c36:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c44:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8011c46:	2318      	movs	r3, #24
 8011c48:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 8011c52:	230a      	movs	r3, #10
 8011c54:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 8011c56:	463b      	mov	r3, r7
 8011c58:	4619      	mov	r1, r3
 8011c5a:	4805      	ldr	r0, [pc, #20]	; (8011c70 <spi2_config+0x78>)
 8011c5c:	f7f2 fff9 	bl	8004c52 <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8011c60:	2100      	movs	r1, #0
 8011c62:	4803      	ldr	r0, [pc, #12]	; (8011c70 <spi2_config+0x78>)
 8011c64:	f7ff fc19 	bl	801149a <LL_SPI_SetStandard>
}
 8011c68:	bf00      	nop
 8011c6a:	3728      	adds	r7, #40	; 0x28
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	40003800 	.word	0x40003800

08011c74 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8011c7a:	2305      	movs	r3, #5
 8011c7c:	9300      	str	r3, [sp, #0]
 8011c7e:	2303      	movs	r3, #3
 8011c80:	2200      	movs	r2, #0
 8011c82:	2103      	movs	r1, #3
 8011c84:	480a      	ldr	r0, [pc, #40]	; (8011cb0 <spi4_pin_conf+0x3c>)
 8011c86:	f7fd fe19 	bl	800f8bc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011c8a:	2305      	movs	r3, #5
 8011c8c:	9300      	str	r3, [sp, #0]
 8011c8e:	2303      	movs	r3, #3
 8011c90:	2200      	movs	r2, #0
 8011c92:	2103      	movs	r1, #3
 8011c94:	4807      	ldr	r0, [pc, #28]	; (8011cb4 <spi4_pin_conf+0x40>)
 8011c96:	f7fd fe11 	bl	800f8bc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011c9a:	2305      	movs	r3, #5
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	2303      	movs	r3, #3
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	2103      	movs	r1, #3
 8011ca4:	4804      	ldr	r0, [pc, #16]	; (8011cb8 <spi4_pin_conf+0x44>)
 8011ca6:	f7fd fe09 	bl	800f8bc <hal_gpio_init_alt>
		&gpio_spi4_miso,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8011caa:	bf00      	nop
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	0801429c 	.word	0x0801429c
 8011cb4:	080142a4 	.word	0x080142a4
 8011cb8:	080142ac 	.word	0x080142ac

08011cbc <spi4_dma_init>:

static void spi4_dma_init(void)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011cc0:	f7ff fb52 	bl	8011368 <__NVIC_GetPriorityGrouping>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	2105      	movs	r1, #5
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ff fba2 	bl	8011414 <NVIC_EncodePriority>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	2038      	movs	r0, #56	; 0x38
 8011cd6:	f7ff fb73 	bl	80113c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8011cda:	2038      	movs	r0, #56	; 0x38
 8011cdc:	f7ff fb52 	bl	8011384 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011ce0:	f7ff fb42 	bl	8011368 <__NVIC_GetPriorityGrouping>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	2105      	movs	r1, #5
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7ff fb92 	bl	8011414 <NVIC_EncodePriority>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	2039      	movs	r0, #57	; 0x39
 8011cf6:	f7ff fb63 	bl	80113c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8011cfa:	2039      	movs	r0, #57	; 0x39
 8011cfc:	f7ff fb42 	bl	8011384 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_RX_STREAM, DMA_SPI4_RX_CHANNEL);
 8011d00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011d04:	2100      	movs	r1, #0
 8011d06:	482d      	ldr	r0, [pc, #180]	; (8011dbc <spi4_dma_init+0x100>)
 8011d08:	f7ff fd30 	bl	801176c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	2100      	movs	r1, #0
 8011d10:	482a      	ldr	r0, [pc, #168]	; (8011dbc <spi4_dma_init+0x100>)
 8011d12:	f7ff fc2f 	bl	8011574 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8011d16:	2200      	movs	r2, #0
 8011d18:	2100      	movs	r1, #0
 8011d1a:	4828      	ldr	r0, [pc, #160]	; (8011dbc <spi4_dma_init+0x100>)
 8011d1c:	f7ff fd02 	bl	8011724 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MODE_NORMAL);
 8011d20:	2200      	movs	r2, #0
 8011d22:	2100      	movs	r1, #0
 8011d24:	4825      	ldr	r0, [pc, #148]	; (8011dbc <spi4_dma_init+0x100>)
 8011d26:	f7ff fc49 	bl	80115bc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	2100      	movs	r1, #0
 8011d2e:	4823      	ldr	r0, [pc, #140]	; (8011dbc <spi4_dma_init+0x100>)
 8011d30:	f7ff fc68 	bl	8011604 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011d38:	2100      	movs	r1, #0
 8011d3a:	4820      	ldr	r0, [pc, #128]	; (8011dbc <spi4_dma_init+0x100>)
 8011d3c:	f7ff fc86 	bl	801164c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011d40:	2200      	movs	r2, #0
 8011d42:	2100      	movs	r1, #0
 8011d44:	481d      	ldr	r0, [pc, #116]	; (8011dbc <spi4_dma_init+0x100>)
 8011d46:	f7ff fca5 	bl	8011694 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	2100      	movs	r1, #0
 8011d4e:	481b      	ldr	r0, [pc, #108]	; (8011dbc <spi4_dma_init+0x100>)
 8011d50:	f7ff fcc4 	bl	80116dc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_RX_STREAM);
 8011d54:	2100      	movs	r1, #0
 8011d56:	4819      	ldr	r0, [pc, #100]	; (8011dbc <spi4_dma_init+0x100>)
 8011d58:	f7ff fd2c 	bl	80117b4 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_TX_STREAM, DMA_SPI4_TX_CHANNEL);
 8011d5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011d60:	2101      	movs	r1, #1
 8011d62:	4816      	ldr	r0, [pc, #88]	; (8011dbc <spi4_dma_init+0x100>)
 8011d64:	f7ff fd02 	bl	801176c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011d68:	2240      	movs	r2, #64	; 0x40
 8011d6a:	2101      	movs	r1, #1
 8011d6c:	4813      	ldr	r0, [pc, #76]	; (8011dbc <spi4_dma_init+0x100>)
 8011d6e:	f7ff fc01 	bl	8011574 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011d72:	2200      	movs	r2, #0
 8011d74:	2101      	movs	r1, #1
 8011d76:	4811      	ldr	r0, [pc, #68]	; (8011dbc <spi4_dma_init+0x100>)
 8011d78:	f7ff fcd4 	bl	8011724 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	2101      	movs	r1, #1
 8011d80:	480e      	ldr	r0, [pc, #56]	; (8011dbc <spi4_dma_init+0x100>)
 8011d82:	f7ff fc1b 	bl	80115bc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011d86:	2200      	movs	r2, #0
 8011d88:	2101      	movs	r1, #1
 8011d8a:	480c      	ldr	r0, [pc, #48]	; (8011dbc <spi4_dma_init+0x100>)
 8011d8c:	f7ff fc3a 	bl	8011604 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011d94:	2101      	movs	r1, #1
 8011d96:	4809      	ldr	r0, [pc, #36]	; (8011dbc <spi4_dma_init+0x100>)
 8011d98:	f7ff fc58 	bl	801164c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	2101      	movs	r1, #1
 8011da0:	4806      	ldr	r0, [pc, #24]	; (8011dbc <spi4_dma_init+0x100>)
 8011da2:	f7ff fc77 	bl	8011694 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011da6:	2200      	movs	r2, #0
 8011da8:	2101      	movs	r1, #1
 8011daa:	4804      	ldr	r0, [pc, #16]	; (8011dbc <spi4_dma_init+0x100>)
 8011dac:	f7ff fc96 	bl	80116dc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_TX_STREAM);
 8011db0:	2101      	movs	r1, #1
 8011db2:	4802      	ldr	r0, [pc, #8]	; (8011dbc <spi4_dma_init+0x100>)
 8011db4:	f7ff fcfe 	bl	80117b4 <LL_DMA_DisableFifoMode>
}
 8011db8:	bf00      	nop
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	40026400 	.word	0x40026400

08011dc0 <spi4_config>:

static void spi4_config(void)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b08a      	sub	sp, #40	; 0x28
 8011dc4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011dc6:	463b      	mov	r3, r7
 8011dc8:	2228      	movs	r2, #40	; 0x28
 8011dca:	2100      	movs	r1, #0
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f001 f87f 	bl	8012ed0 <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011dd2:	f7ff fac9 	bl	8011368 <__NVIC_GetPriorityGrouping>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2200      	movs	r2, #0
 8011dda:	2105      	movs	r1, #5
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7ff fb19 	bl	8011414 <NVIC_EncodePriority>
 8011de2:	4603      	mov	r3, r0
 8011de4:	4619      	mov	r1, r3
 8011de6:	2054      	movs	r0, #84	; 0x54
 8011de8:	f7ff faea 	bl	80113c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 8011dec:	2054      	movs	r0, #84	; 0x54
 8011dee:	f7ff fac9 	bl	8011384 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011df2:	2300      	movs	r3, #0
 8011df4:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011df6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011dfa:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011e00:	2300      	movs	r3, #0
 8011e02:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011e04:	2300      	movs	r3, #0
 8011e06:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e0c:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8011e0e:	2328      	movs	r3, #40	; 0x28
 8011e10:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011e12:	2300      	movs	r3, #0
 8011e14:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011e16:	2300      	movs	r3, #0
 8011e18:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8011e1a:	230a      	movs	r3, #10
 8011e1c:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 8011e1e:	463b      	mov	r3, r7
 8011e20:	4619      	mov	r1, r3
 8011e22:	4805      	ldr	r0, [pc, #20]	; (8011e38 <spi4_config+0x78>)
 8011e24:	f7f2 ff15 	bl	8004c52 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8011e28:	2100      	movs	r1, #0
 8011e2a:	4803      	ldr	r0, [pc, #12]	; (8011e38 <spi4_config+0x78>)
 8011e2c:	f7ff fb35 	bl	801149a <LL_SPI_SetStandard>
}
 8011e30:	bf00      	nop
 8011e32:	3728      	adds	r7, #40	; 0x28
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	40013400 	.word	0x40013400

08011e3c <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b086      	sub	sp, #24
 8011e40:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e42:	463b      	mov	r3, r7
 8011e44:	2200      	movs	r2, #0
 8011e46:	601a      	str	r2, [r3, #0]
 8011e48:	605a      	str	r2, [r3, #4]
 8011e4a:	609a      	str	r2, [r3, #8]
 8011e4c:	60da      	str	r2, [r3, #12]
 8011e4e:	611a      	str	r2, [r3, #16]
 8011e50:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8011e52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8011e56:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011e58:	2302      	movs	r3, #2
 8011e5a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011e5c:	2303      	movs	r3, #3
 8011e5e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011e60:	2300      	movs	r3, #0
 8011e62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8011e64:	2300      	movs	r3, #0
 8011e66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8011e68:	2305      	movs	r3, #5
 8011e6a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011e6c:	463b      	mov	r3, r7
 8011e6e:	4619      	mov	r1, r3
 8011e70:	4803      	ldr	r0, [pc, #12]	; (8011e80 <spi5_pin_conf+0x44>)
 8011e72:	f7f1 fea6 	bl	8003bc2 <LL_GPIO_Init>
}
 8011e76:	bf00      	nop
 8011e78:	3718      	adds	r7, #24
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	40021400 	.word	0x40021400

08011e84 <spi5_dma_init>:

static void spi5_dma_init(void)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011e88:	f7ff fa6e 	bl	8011368 <__NVIC_GetPriorityGrouping>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2200      	movs	r2, #0
 8011e90:	2105      	movs	r1, #5
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff fabe 	bl	8011414 <NVIC_EncodePriority>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	203c      	movs	r0, #60	; 0x3c
 8011e9e:	f7ff fa8f 	bl	80113c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8011ea2:	203c      	movs	r0, #60	; 0x3c
 8011ea4:	f7ff fa6e 	bl	8011384 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 8011ea8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011eac:	2104      	movs	r1, #4
 8011eae:	4816      	ldr	r0, [pc, #88]	; (8011f08 <spi5_dma_init+0x84>)
 8011eb0:	f7ff fc5c 	bl	801176c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011eb4:	2240      	movs	r2, #64	; 0x40
 8011eb6:	2104      	movs	r1, #4
 8011eb8:	4813      	ldr	r0, [pc, #76]	; (8011f08 <spi5_dma_init+0x84>)
 8011eba:	f7ff fb5b 	bl	8011574 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	2104      	movs	r1, #4
 8011ec2:	4811      	ldr	r0, [pc, #68]	; (8011f08 <spi5_dma_init+0x84>)
 8011ec4:	f7ff fc2e 	bl	8011724 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8011ec8:	2200      	movs	r2, #0
 8011eca:	2104      	movs	r1, #4
 8011ecc:	480e      	ldr	r0, [pc, #56]	; (8011f08 <spi5_dma_init+0x84>)
 8011ece:	f7ff fb75 	bl	80115bc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	2104      	movs	r1, #4
 8011ed6:	480c      	ldr	r0, [pc, #48]	; (8011f08 <spi5_dma_init+0x84>)
 8011ed8:	f7ff fb94 	bl	8011604 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8011edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ee0:	2104      	movs	r1, #4
 8011ee2:	4809      	ldr	r0, [pc, #36]	; (8011f08 <spi5_dma_init+0x84>)
 8011ee4:	f7ff fbb2 	bl	801164c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8011ee8:	2200      	movs	r2, #0
 8011eea:	2104      	movs	r1, #4
 8011eec:	4806      	ldr	r0, [pc, #24]	; (8011f08 <spi5_dma_init+0x84>)
 8011eee:	f7ff fbd1 	bl	8011694 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	2104      	movs	r1, #4
 8011ef6:	4804      	ldr	r0, [pc, #16]	; (8011f08 <spi5_dma_init+0x84>)
 8011ef8:	f7ff fbf0 	bl	80116dc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 8011efc:	2104      	movs	r1, #4
 8011efe:	4802      	ldr	r0, [pc, #8]	; (8011f08 <spi5_dma_init+0x84>)
 8011f00:	f7ff fc58 	bl	80117b4 <LL_DMA_DisableFifoMode>
}
 8011f04:	bf00      	nop
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	40026400 	.word	0x40026400

08011f0c <spi5_config>:

static void spi5_config(void)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08a      	sub	sp, #40	; 0x28
 8011f10:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011f12:	463b      	mov	r3, r7
 8011f14:	2228      	movs	r2, #40	; 0x28
 8011f16:	2100      	movs	r1, #0
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f000 ffd9 	bl	8012ed0 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 8011f1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011f22:	f7ff fc67 	bl	80117f4 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011f26:	f7ff fa1f 	bl	8011368 <__NVIC_GetPriorityGrouping>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2105      	movs	r1, #5
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7ff fa6f 	bl	8011414 <NVIC_EncodePriority>
 8011f36:	4603      	mov	r3, r0
 8011f38:	4619      	mov	r1, r3
 8011f3a:	2055      	movs	r0, #85	; 0x55
 8011f3c:	f7ff fa40 	bl	80113c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 8011f40:	2055      	movs	r0, #85	; 0x55
 8011f42:	f7ff fa1f 	bl	8011384 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011f46:	2300      	movs	r3, #0
 8011f48:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011f4a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011f4e:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011f50:	2300      	movs	r3, #0
 8011f52:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011f54:	2300      	movs	r3, #0
 8011f56:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f60:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8011f62:	2318      	movs	r3, #24
 8011f64:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011f66:	2300      	movs	r3, #0
 8011f68:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8011f6e:	230a      	movs	r3, #10
 8011f70:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 8011f72:	463b      	mov	r3, r7
 8011f74:	4619      	mov	r1, r3
 8011f76:	4805      	ldr	r0, [pc, #20]	; (8011f8c <spi5_config+0x80>)
 8011f78:	f7f2 fe6b 	bl	8004c52 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 8011f7c:	2100      	movs	r1, #0
 8011f7e:	4803      	ldr	r0, [pc, #12]	; (8011f8c <spi5_config+0x80>)
 8011f80:	f7ff fa8b 	bl	801149a <LL_SPI_SetStandard>
}
 8011f84:	bf00      	nop
 8011f86:	3728      	adds	r7, #40	; 0x28
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	40015000 	.word	0x40015000

08011f90 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8011f90:	b480      	push	{r7}
 8011f92:	af00      	add	r7, sp, #0

}
 8011f94:	bf00      	nop
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr

08011f9e <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 8011f9e:	b480      	push	{r7}
 8011fa0:	af00      	add	r7, sp, #0

}
 8011fa2:	bf00      	nop
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr

08011fac <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 8011fac:	b480      	push	{r7}
 8011fae:	af00      	add	r7, sp, #0

}
 8011fb0:	bf00      	nop
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr

08011fba <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 8011fba:	b480      	push	{r7}
 8011fbc:	af00      	add	r7, sp, #0

}
 8011fbe:	bf00      	nop
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr

08011fc8 <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	af00      	add	r7, sp, #0

}
 8011fcc:	bf00      	nop
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	af00      	add	r7, sp, #0

}
 8011fda:	bf00      	nop
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	af00      	add	r7, sp, #0

}
 8011fe8:	bf00      	nop
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
	...

08011ff4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	607b      	str	r3, [r7, #4]
 8011ffe:	4b12      	ldr	r3, [pc, #72]	; (8012048 <HAL_MspInit+0x54>)
 8012000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012002:	4a11      	ldr	r2, [pc, #68]	; (8012048 <HAL_MspInit+0x54>)
 8012004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012008:	6453      	str	r3, [r2, #68]	; 0x44
 801200a:	4b0f      	ldr	r3, [pc, #60]	; (8012048 <HAL_MspInit+0x54>)
 801200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012012:	607b      	str	r3, [r7, #4]
 8012014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012016:	2300      	movs	r3, #0
 8012018:	603b      	str	r3, [r7, #0]
 801201a:	4b0b      	ldr	r3, [pc, #44]	; (8012048 <HAL_MspInit+0x54>)
 801201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801201e:	4a0a      	ldr	r2, [pc, #40]	; (8012048 <HAL_MspInit+0x54>)
 8012020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012024:	6413      	str	r3, [r2, #64]	; 0x40
 8012026:	4b08      	ldr	r3, [pc, #32]	; (8012048 <HAL_MspInit+0x54>)
 8012028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801202e:	603b      	str	r3, [r7, #0]
 8012030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012032:	2200      	movs	r2, #0
 8012034:	210f      	movs	r1, #15
 8012036:	f06f 0001 	mvn.w	r0, #1
 801203a:	f7ef fa3d 	bl	80014b8 <HAL_NVIC_SetPriority>
}
 801203e:	bf00      	nop
 8012040:	3708      	adds	r7, #8
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	40023800 	.word	0x40023800

0801204c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b08e      	sub	sp, #56	; 0x38
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8012054:	2300      	movs	r3, #0
 8012056:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8012058:	2300      	movs	r3, #0
 801205a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801205c:	2300      	movs	r3, #0
 801205e:	60fb      	str	r3, [r7, #12]
 8012060:	4b33      	ldr	r3, [pc, #204]	; (8012130 <HAL_InitTick+0xe4>)
 8012062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012064:	4a32      	ldr	r2, [pc, #200]	; (8012130 <HAL_InitTick+0xe4>)
 8012066:	f043 0310 	orr.w	r3, r3, #16
 801206a:	6413      	str	r3, [r2, #64]	; 0x40
 801206c:	4b30      	ldr	r3, [pc, #192]	; (8012130 <HAL_InitTick+0xe4>)
 801206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012070:	f003 0310 	and.w	r3, r3, #16
 8012074:	60fb      	str	r3, [r7, #12]
 8012076:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012078:	f107 0210 	add.w	r2, r7, #16
 801207c:	f107 0314 	add.w	r3, r7, #20
 8012080:	4611      	mov	r1, r2
 8012082:	4618      	mov	r0, r3
 8012084:	f7ef ffac 	bl	8001fe0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8012088:	6a3b      	ldr	r3, [r7, #32]
 801208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	2b00      	cmp	r3, #0
 8012090:	d103      	bne.n	801209a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8012092:	f7ef ff91 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8012096:	6378      	str	r0, [r7, #52]	; 0x34
 8012098:	e004      	b.n	80120a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801209a:	f7ef ff8d 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 801209e:	4603      	mov	r3, r0
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80120a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a6:	4a23      	ldr	r2, [pc, #140]	; (8012134 <HAL_InitTick+0xe8>)
 80120a8:	fba2 2303 	umull	r2, r3, r2, r3
 80120ac:	0c9b      	lsrs	r3, r3, #18
 80120ae:	3b01      	subs	r3, #1
 80120b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80120b2:	4b21      	ldr	r3, [pc, #132]	; (8012138 <HAL_InitTick+0xec>)
 80120b4:	4a21      	ldr	r2, [pc, #132]	; (801213c <HAL_InitTick+0xf0>)
 80120b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80120b8:	4b1f      	ldr	r3, [pc, #124]	; (8012138 <HAL_InitTick+0xec>)
 80120ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80120be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80120c0:	4a1d      	ldr	r2, [pc, #116]	; (8012138 <HAL_InitTick+0xec>)
 80120c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80120c6:	4b1c      	ldr	r3, [pc, #112]	; (8012138 <HAL_InitTick+0xec>)
 80120c8:	2200      	movs	r2, #0
 80120ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80120cc:	4b1a      	ldr	r3, [pc, #104]	; (8012138 <HAL_InitTick+0xec>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80120d2:	4b19      	ldr	r3, [pc, #100]	; (8012138 <HAL_InitTick+0xec>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80120d8:	4817      	ldr	r0, [pc, #92]	; (8012138 <HAL_InitTick+0xec>)
 80120da:	f7f1 f8e3 	bl	80032a4 <HAL_TIM_Base_Init>
 80120de:	4603      	mov	r3, r0
 80120e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80120e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d11b      	bne.n	8012124 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80120ec:	4812      	ldr	r0, [pc, #72]	; (8012138 <HAL_InitTick+0xec>)
 80120ee:	f7f1 f933 	bl	8003358 <HAL_TIM_Base_Start_IT>
 80120f2:	4603      	mov	r3, r0
 80120f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80120f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d111      	bne.n	8012124 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8012100:	2036      	movs	r0, #54	; 0x36
 8012102:	f7ef f9f5 	bl	80014f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2b0f      	cmp	r3, #15
 801210a:	d808      	bhi.n	801211e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 801210c:	2200      	movs	r2, #0
 801210e:	6879      	ldr	r1, [r7, #4]
 8012110:	2036      	movs	r0, #54	; 0x36
 8012112:	f7ef f9d1 	bl	80014b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012116:	4a0a      	ldr	r2, [pc, #40]	; (8012140 <HAL_InitTick+0xf4>)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6013      	str	r3, [r2, #0]
 801211c:	e002      	b.n	8012124 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 801211e:	2301      	movs	r3, #1
 8012120:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8012124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8012128:	4618      	mov	r0, r3
 801212a:	3738      	adds	r7, #56	; 0x38
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}
 8012130:	40023800 	.word	0x40023800
 8012134:	431bde83 	.word	0x431bde83
 8012138:	20007b48 	.word	0x20007b48
 801213c:	40001000 	.word	0x40001000
 8012140:	20000004 	.word	0x20000004

08012144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012144:	b480      	push	{r7}
 8012146:	af00      	add	r7, sp, #0
  while (1)
 8012148:	e7fe      	b.n	8012148 <NMI_Handler+0x4>

0801214a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801214a:	b480      	push	{r7}
 801214c:	af00      	add	r7, sp, #0
  while (1)
 801214e:	e7fe      	b.n	801214e <HardFault_Handler+0x4>

08012150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012150:	b480      	push	{r7}
 8012152:	af00      	add	r7, sp, #0
  while (1)
 8012154:	e7fe      	b.n	8012154 <MemManage_Handler+0x4>

08012156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012156:	b480      	push	{r7}
 8012158:	af00      	add	r7, sp, #0
  while (1)
 801215a:	e7fe      	b.n	801215a <BusFault_Handler+0x4>

0801215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801215c:	b480      	push	{r7}
 801215e:	af00      	add	r7, sp, #0
  while (1)
 8012160:	e7fe      	b.n	8012160 <UsageFault_Handler+0x4>

08012162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012162:	b480      	push	{r7}
 8012164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012166:	bf00      	nop
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8012174:	4802      	ldr	r0, [pc, #8]	; (8012180 <TIM6_DAC_IRQHandler+0x10>)
 8012176:	f7f1 f95f 	bl	8003438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801217a:	bf00      	nop
 801217c:	bd80      	pop	{r7, pc}
 801217e:	bf00      	nop
 8012180:	20007b48 	.word	0x20007b48

08012184 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a04      	ldr	r2, [pc, #16]	; (80121a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d101      	bne.n	801219a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8012196:	f7ef f893 	bl	80012c0 <HAL_IncTick>
  }
}
 801219a:	bf00      	nop
 801219c:	3708      	adds	r7, #8
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	40001000 	.word	0x40001000

080121a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80121a8:	b480      	push	{r7}
 80121aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80121ac:	4b06      	ldr	r3, [pc, #24]	; (80121c8 <SystemInit+0x20>)
 80121ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121b2:	4a05      	ldr	r2, [pc, #20]	; (80121c8 <SystemInit+0x20>)
 80121b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80121b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80121bc:	bf00      	nop
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop
 80121c8:	e000ed00 	.word	0xe000ed00

080121cc <__NVIC_GetPriorityGrouping>:
{
 80121cc:	b480      	push	{r7}
 80121ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80121d0:	4b04      	ldr	r3, [pc, #16]	; (80121e4 <__NVIC_GetPriorityGrouping+0x18>)
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	0a1b      	lsrs	r3, r3, #8
 80121d6:	f003 0307 	and.w	r3, r3, #7
}
 80121da:	4618      	mov	r0, r3
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr
 80121e4:	e000ed00 	.word	0xe000ed00

080121e8 <__NVIC_EnableIRQ>:
{
 80121e8:	b480      	push	{r7}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	4603      	mov	r3, r0
 80121f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80121f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	db0b      	blt.n	8012212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80121fa:	79fb      	ldrb	r3, [r7, #7]
 80121fc:	f003 021f 	and.w	r2, r3, #31
 8012200:	4907      	ldr	r1, [pc, #28]	; (8012220 <__NVIC_EnableIRQ+0x38>)
 8012202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012206:	095b      	lsrs	r3, r3, #5
 8012208:	2001      	movs	r0, #1
 801220a:	fa00 f202 	lsl.w	r2, r0, r2
 801220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012212:	bf00      	nop
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	e000e100 	.word	0xe000e100

08012224 <__NVIC_SetPriority>:
{
 8012224:	b480      	push	{r7}
 8012226:	b083      	sub	sp, #12
 8012228:	af00      	add	r7, sp, #0
 801222a:	4603      	mov	r3, r0
 801222c:	6039      	str	r1, [r7, #0]
 801222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012234:	2b00      	cmp	r3, #0
 8012236:	db0a      	blt.n	801224e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	b2da      	uxtb	r2, r3
 801223c:	490c      	ldr	r1, [pc, #48]	; (8012270 <__NVIC_SetPriority+0x4c>)
 801223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012242:	0112      	lsls	r2, r2, #4
 8012244:	b2d2      	uxtb	r2, r2
 8012246:	440b      	add	r3, r1
 8012248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801224c:	e00a      	b.n	8012264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	b2da      	uxtb	r2, r3
 8012252:	4908      	ldr	r1, [pc, #32]	; (8012274 <__NVIC_SetPriority+0x50>)
 8012254:	79fb      	ldrb	r3, [r7, #7]
 8012256:	f003 030f 	and.w	r3, r3, #15
 801225a:	3b04      	subs	r3, #4
 801225c:	0112      	lsls	r2, r2, #4
 801225e:	b2d2      	uxtb	r2, r2
 8012260:	440b      	add	r3, r1
 8012262:	761a      	strb	r2, [r3, #24]
}
 8012264:	bf00      	nop
 8012266:	370c      	adds	r7, #12
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr
 8012270:	e000e100 	.word	0xe000e100
 8012274:	e000ed00 	.word	0xe000ed00

08012278 <NVIC_EncodePriority>:
{
 8012278:	b480      	push	{r7}
 801227a:	b089      	sub	sp, #36	; 0x24
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f003 0307 	and.w	r3, r3, #7
 801228a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	f1c3 0307 	rsb	r3, r3, #7
 8012292:	2b04      	cmp	r3, #4
 8012294:	bf28      	it	cs
 8012296:	2304      	movcs	r3, #4
 8012298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	3304      	adds	r3, #4
 801229e:	2b06      	cmp	r3, #6
 80122a0:	d902      	bls.n	80122a8 <NVIC_EncodePriority+0x30>
 80122a2:	69fb      	ldr	r3, [r7, #28]
 80122a4:	3b03      	subs	r3, #3
 80122a6:	e000      	b.n	80122aa <NVIC_EncodePriority+0x32>
 80122a8:	2300      	movs	r3, #0
 80122aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80122ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	fa02 f303 	lsl.w	r3, r2, r3
 80122b6:	43da      	mvns	r2, r3
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	401a      	ands	r2, r3
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80122c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	fa01 f303 	lsl.w	r3, r1, r3
 80122ca:	43d9      	mvns	r1, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80122d0:	4313      	orrs	r3, r2
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3724      	adds	r7, #36	; 0x24
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <LL_TIM_DisableARRPreload>:
{
 80122de:	b480      	push	{r7}
 80122e0:	b083      	sub	sp, #12
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	601a      	str	r2, [r3, #0]
}
 80122f2:	bf00      	nop
 80122f4:	370c      	adds	r7, #12
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr

080122fe <LL_TIM_SetClockSource>:
{
 80122fe:	b480      	push	{r7}
 8012300:	b083      	sub	sp, #12
 8012302:	af00      	add	r7, sp, #0
 8012304:	6078      	str	r0, [r7, #4]
 8012306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012310:	f023 0307 	bic.w	r3, r3, #7
 8012314:	683a      	ldr	r2, [r7, #0]
 8012316:	431a      	orrs	r2, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	609a      	str	r2, [r3, #8]
}
 801231c:	bf00      	nop
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr

08012328 <tim_init>:
		LL_TIM_DisableCounter(TIM4);
		LL_TIM_DisableIT_UPDATE(TIM4);
	}
}

void tim_init(TimID id) {
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	4603      	mov	r3, r0
 8012330:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 8012332:	79fb      	ldrb	r3, [r7, #7]
 8012334:	2b04      	cmp	r3, #4
 8012336:	d102      	bne.n	801233e <tim_init+0x16>
	case TimId4:
		tim4_init();
 8012338:	f000 f80c 	bl	8012354 <tim4_init>
	//	LL_TIM_EnableCounter(TIM4);
	//	LL_TIM_ClearFlag_UPDATE(TIM4);
		break;
 801233c:	e003      	b.n	8012346 <tim_init+0x1e>

	default:
		hal_cli_printf("timer init argument error");
 801233e:	4804      	ldr	r0, [pc, #16]	; (8012350 <tim_init+0x28>)
 8012340:	f7fc fd4c 	bl	800eddc <hal_cli_printf>
		break;
 8012344:	bf00      	nop
	}
}
 8012346:	bf00      	nop
 8012348:	3708      	adds	r7, #8
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	08013bf0 	.word	0x08013bf0

08012354 <tim4_init>:

	return ret;
}

static void tim4_init(void)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 801235a:	1d3b      	adds	r3, r7, #4
 801235c:	2200      	movs	r2, #0
 801235e:	601a      	str	r2, [r3, #0]
 8012360:	605a      	str	r2, [r3, #4]
 8012362:	609a      	str	r2, [r3, #8]
 8012364:	60da      	str	r2, [r3, #12]
 8012366:	611a      	str	r2, [r3, #16]
#if 0
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
#endif

	NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012368:	f7ff ff30 	bl	80121cc <__NVIC_GetPriorityGrouping>
 801236c:	4603      	mov	r3, r0
 801236e:	2200      	movs	r2, #0
 8012370:	2105      	movs	r1, #5
 8012372:	4618      	mov	r0, r3
 8012374:	f7ff ff80 	bl	8012278 <NVIC_EncodePriority>
 8012378:	4603      	mov	r3, r0
 801237a:	4619      	mov	r1, r3
 801237c:	201e      	movs	r0, #30
 801237e:	f7ff ff51 	bl	8012224 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 8012382:	201e      	movs	r0, #30
 8012384:	f7ff ff30 	bl	80121e8 <__NVIC_EnableIRQ>

	/* tim init */
	TIM_InitStruct.Prescaler = 180-(uint16_t)LL_TIM_IC_FILTER_FDIV1_N2;
 8012388:	23b4      	movs	r3, #180	; 0xb4
 801238a:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 801238c:	2300      	movs	r3, #0
 801238e:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 2500-LL_TIM_IC_FILTER_FDIV1_N2;
 8012390:	4b09      	ldr	r3, [pc, #36]	; (80123b8 <tim4_init+0x64>)
 8012392:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8012394:	2300      	movs	r3, #0
 8012396:	613b      	str	r3, [r7, #16]
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 8012398:	1d3b      	adds	r3, r7, #4
 801239a:	4619      	mov	r1, r3
 801239c:	4807      	ldr	r0, [pc, #28]	; (80123bc <tim4_init+0x68>)
 801239e:	f7f2 fce5 	bl	8004d6c <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM4);
 80123a2:	4806      	ldr	r0, [pc, #24]	; (80123bc <tim4_init+0x68>)
 80123a4:	f7ff ff9b 	bl	80122de <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80123a8:	2100      	movs	r1, #0
 80123aa:	4804      	ldr	r0, [pc, #16]	; (80123bc <tim4_init+0x68>)
 80123ac:	f7ff ffa7 	bl	80122fe <LL_TIM_SetClockSource>
		GpioPullNo,
		GpioSpeedFreqLow,
		GpioAltFnTim4);

#endif
}
 80123b0:	bf00      	nop
 80123b2:	3718      	adds	r7, #24
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}
 80123b8:	fff009c4 	.word	0xfff009c4
 80123bc:	40000800 	.word	0x40000800

080123c0 <hal_tim_int_call>:
	tim_interrupt[tim].context = context;
	tim_interrupt[tim].ready = true;
	taskEXIT_CRITICAL();
}

static void hal_tim_int_call(uint32_t tim) {
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
	if(tim_interrupt[tim].callback && tim_interrupt[tim].ready) {
 80123c8:	4916      	ldr	r1, [pc, #88]	; (8012424 <hal_tim_int_call+0x64>)
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	4613      	mov	r3, r2
 80123ce:	005b      	lsls	r3, r3, #1
 80123d0:	4413      	add	r3, r2
 80123d2:	009b      	lsls	r3, r3, #2
 80123d4:	440b      	add	r3, r1
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d01e      	beq.n	801241a <hal_tim_int_call+0x5a>
 80123dc:	4911      	ldr	r1, [pc, #68]	; (8012424 <hal_tim_int_call+0x64>)
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	4613      	mov	r3, r2
 80123e2:	005b      	lsls	r3, r3, #1
 80123e4:	4413      	add	r3, r2
 80123e6:	009b      	lsls	r3, r3, #2
 80123e8:	440b      	add	r3, r1
 80123ea:	3308      	adds	r3, #8
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	b2db      	uxtb	r3, r3
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d012      	beq.n	801241a <hal_tim_int_call+0x5a>
		tim_interrupt[tim].callback(tim_interrupt[tim].context);
 80123f4:	490b      	ldr	r1, [pc, #44]	; (8012424 <hal_tim_int_call+0x64>)
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	4613      	mov	r3, r2
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	4413      	add	r3, r2
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	440b      	add	r3, r1
 8012402:	6819      	ldr	r1, [r3, #0]
 8012404:	4807      	ldr	r0, [pc, #28]	; (8012424 <hal_tim_int_call+0x64>)
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	4613      	mov	r3, r2
 801240a:	005b      	lsls	r3, r3, #1
 801240c:	4413      	add	r3, r2
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	4403      	add	r3, r0
 8012412:	3304      	adds	r3, #4
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	4618      	mov	r0, r3
 8012418:	4788      	blx	r1
	}
}
 801241a:	bf00      	nop
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	20007b90 	.word	0x20007b90

08012428 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void) {
 8012428:	b580      	push	{r7, lr}
 801242a:	af00      	add	r7, sp, #0
	hal_tim_int_call(4);
 801242c:	2004      	movs	r0, #4
 801242e:	f7ff ffc7 	bl	80123c0 <hal_tim_int_call>
}
 8012432:	bf00      	nop
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <__NVIC_GetPriorityGrouping>:
{
 8012438:	b480      	push	{r7}
 801243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801243c:	4b04      	ldr	r3, [pc, #16]	; (8012450 <__NVIC_GetPriorityGrouping+0x18>)
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	0a1b      	lsrs	r3, r3, #8
 8012442:	f003 0307 	and.w	r3, r3, #7
}
 8012446:	4618      	mov	r0, r3
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr
 8012450:	e000ed00 	.word	0xe000ed00

08012454 <__NVIC_EnableIRQ>:
{
 8012454:	b480      	push	{r7}
 8012456:	b083      	sub	sp, #12
 8012458:	af00      	add	r7, sp, #0
 801245a:	4603      	mov	r3, r0
 801245c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012462:	2b00      	cmp	r3, #0
 8012464:	db0b      	blt.n	801247e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012466:	79fb      	ldrb	r3, [r7, #7]
 8012468:	f003 021f 	and.w	r2, r3, #31
 801246c:	4907      	ldr	r1, [pc, #28]	; (801248c <__NVIC_EnableIRQ+0x38>)
 801246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012472:	095b      	lsrs	r3, r3, #5
 8012474:	2001      	movs	r0, #1
 8012476:	fa00 f202 	lsl.w	r2, r0, r2
 801247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801247e:	bf00      	nop
 8012480:	370c      	adds	r7, #12
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr
 801248a:	bf00      	nop
 801248c:	e000e100 	.word	0xe000e100

08012490 <__NVIC_SetPriority>:
{
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	4603      	mov	r3, r0
 8012498:	6039      	str	r1, [r7, #0]
 801249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	db0a      	blt.n	80124ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	b2da      	uxtb	r2, r3
 80124a8:	490c      	ldr	r1, [pc, #48]	; (80124dc <__NVIC_SetPriority+0x4c>)
 80124aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124ae:	0112      	lsls	r2, r2, #4
 80124b0:	b2d2      	uxtb	r2, r2
 80124b2:	440b      	add	r3, r1
 80124b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80124b8:	e00a      	b.n	80124d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	b2da      	uxtb	r2, r3
 80124be:	4908      	ldr	r1, [pc, #32]	; (80124e0 <__NVIC_SetPriority+0x50>)
 80124c0:	79fb      	ldrb	r3, [r7, #7]
 80124c2:	f003 030f 	and.w	r3, r3, #15
 80124c6:	3b04      	subs	r3, #4
 80124c8:	0112      	lsls	r2, r2, #4
 80124ca:	b2d2      	uxtb	r2, r2
 80124cc:	440b      	add	r3, r1
 80124ce:	761a      	strb	r2, [r3, #24]
}
 80124d0:	bf00      	nop
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr
 80124dc:	e000e100 	.word	0xe000e100
 80124e0:	e000ed00 	.word	0xe000ed00

080124e4 <NVIC_EncodePriority>:
{
 80124e4:	b480      	push	{r7}
 80124e6:	b089      	sub	sp, #36	; 0x24
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f003 0307 	and.w	r3, r3, #7
 80124f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	f1c3 0307 	rsb	r3, r3, #7
 80124fe:	2b04      	cmp	r3, #4
 8012500:	bf28      	it	cs
 8012502:	2304      	movcs	r3, #4
 8012504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012506:	69fb      	ldr	r3, [r7, #28]
 8012508:	3304      	adds	r3, #4
 801250a:	2b06      	cmp	r3, #6
 801250c:	d902      	bls.n	8012514 <NVIC_EncodePriority+0x30>
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	3b03      	subs	r3, #3
 8012512:	e000      	b.n	8012516 <NVIC_EncodePriority+0x32>
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801251c:	69bb      	ldr	r3, [r7, #24]
 801251e:	fa02 f303 	lsl.w	r3, r2, r3
 8012522:	43da      	mvns	r2, r3
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	401a      	ands	r2, r3
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801252c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	fa01 f303 	lsl.w	r3, r1, r3
 8012536:	43d9      	mvns	r1, r3
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801253c:	4313      	orrs	r3, r2
}
 801253e:	4618      	mov	r0, r3
 8012540:	3724      	adds	r7, #36	; 0x24
 8012542:	46bd      	mov	sp, r7
 8012544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012548:	4770      	bx	lr

0801254a <LL_USART_Enable>:
{
 801254a:	b480      	push	{r7}
 801254c:	b083      	sub	sp, #12
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	60da      	str	r2, [r3, #12]
}
 801255e:	bf00      	nop
 8012560:	370c      	adds	r7, #12
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr

0801256a <LL_USART_IsEnabled>:
{
 801256a:	b480      	push	{r7}
 801256c:	b083      	sub	sp, #12
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801257a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801257e:	bf0c      	ite	eq
 8012580:	2301      	moveq	r3, #1
 8012582:	2300      	movne	r3, #0
 8012584:	b2db      	uxtb	r3, r3
}
 8012586:	4618      	mov	r0, r3
 8012588:	370c      	adds	r7, #12
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr

08012592 <LL_USART_ConfigAsyncMode>:
{
 8012592:	b480      	push	{r7}
 8012594:	b083      	sub	sp, #12
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	691b      	ldr	r3, [r3, #16]
 801259e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	695b      	ldr	r3, [r3, #20]
 80125aa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	615a      	str	r2, [r3, #20]
}
 80125b2:	bf00      	nop
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <LL_USART_IsActiveFlag_IDLE>:
{
 80125be:	b480      	push	{r7}
 80125c0:	b083      	sub	sp, #12
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f003 0310 	and.w	r3, r3, #16
 80125ce:	2b10      	cmp	r3, #16
 80125d0:	bf0c      	ite	eq
 80125d2:	2301      	moveq	r3, #1
 80125d4:	2300      	movne	r3, #0
 80125d6:	b2db      	uxtb	r3, r3
}
 80125d8:	4618      	mov	r0, r3
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <LL_USART_IsActiveFlag_TXE>:
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125f4:	2b80      	cmp	r3, #128	; 0x80
 80125f6:	bf0c      	ite	eq
 80125f8:	2301      	moveq	r3, #1
 80125fa:	2300      	movne	r3, #0
 80125fc:	b2db      	uxtb	r3, r3
}
 80125fe:	4618      	mov	r0, r3
 8012600:	370c      	adds	r7, #12
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr

0801260a <LL_USART_ClearFlag_IDLE>:
{
 801260a:	b480      	push	{r7}
 801260c:	b085      	sub	sp, #20
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8012618:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8012620:	68fb      	ldr	r3, [r7, #12]
}
 8012622:	bf00      	nop
 8012624:	3714      	adds	r7, #20
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr

0801262e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 801262e:	b480      	push	{r7}
 8012630:	b083      	sub	sp, #12
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	460b      	mov	r3, r1
 8012638:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 801263a:	78fa      	ldrb	r2, [r7, #3]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	605a      	str	r2, [r3, #4]
}
 8012640:	bf00      	nop
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <LL_DMA_SetDataTransferDirection>:
{
 801264c:	b480      	push	{r7}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8012658:	4a0d      	ldr	r2, [pc, #52]	; (8012690 <LL_DMA_SetDataTransferDirection+0x44>)
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	4413      	add	r3, r2
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	461a      	mov	r2, r3
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	4413      	add	r3, r2
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801266c:	4908      	ldr	r1, [pc, #32]	; (8012690 <LL_DMA_SetDataTransferDirection+0x44>)
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	440b      	add	r3, r1
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	4619      	mov	r1, r3
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	440b      	add	r3, r1
 801267a:	4619      	mov	r1, r3
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4313      	orrs	r3, r2
 8012680:	600b      	str	r3, [r1, #0]
}
 8012682:	bf00      	nop
 8012684:	3714      	adds	r7, #20
 8012686:	46bd      	mov	sp, r7
 8012688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268c:	4770      	bx	lr
 801268e:	bf00      	nop
 8012690:	0801430c 	.word	0x0801430c

08012694 <LL_DMA_SetMode>:
{
 8012694:	b480      	push	{r7}
 8012696:	b085      	sub	sp, #20
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80126a0:	4a0d      	ldr	r2, [pc, #52]	; (80126d8 <LL_DMA_SetMode+0x44>)
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	4413      	add	r3, r2
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	461a      	mov	r2, r3
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	4413      	add	r3, r2
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80126b4:	4908      	ldr	r1, [pc, #32]	; (80126d8 <LL_DMA_SetMode+0x44>)
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	440b      	add	r3, r1
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	4619      	mov	r1, r3
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	440b      	add	r3, r1
 80126c2:	4619      	mov	r1, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	4313      	orrs	r3, r2
 80126c8:	600b      	str	r3, [r1, #0]
}
 80126ca:	bf00      	nop
 80126cc:	3714      	adds	r7, #20
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	0801430c 	.word	0x0801430c

080126dc <LL_DMA_SetPeriphIncMode>:
{
 80126dc:	b480      	push	{r7}
 80126de:	b085      	sub	sp, #20
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80126e8:	4a0d      	ldr	r2, [pc, #52]	; (8012720 <LL_DMA_SetPeriphIncMode+0x44>)
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	4413      	add	r3, r2
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	461a      	mov	r2, r3
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	4413      	add	r3, r2
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80126fc:	4908      	ldr	r1, [pc, #32]	; (8012720 <LL_DMA_SetPeriphIncMode+0x44>)
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	440b      	add	r3, r1
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	4619      	mov	r1, r3
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	440b      	add	r3, r1
 801270a:	4619      	mov	r1, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	4313      	orrs	r3, r2
 8012710:	600b      	str	r3, [r1, #0]
}
 8012712:	bf00      	nop
 8012714:	3714      	adds	r7, #20
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	0801430c 	.word	0x0801430c

08012724 <LL_DMA_SetMemoryIncMode>:
{
 8012724:	b480      	push	{r7}
 8012726:	b085      	sub	sp, #20
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8012730:	4a0d      	ldr	r2, [pc, #52]	; (8012768 <LL_DMA_SetMemoryIncMode+0x44>)
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	4413      	add	r3, r2
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	461a      	mov	r2, r3
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	4413      	add	r3, r2
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012744:	4908      	ldr	r1, [pc, #32]	; (8012768 <LL_DMA_SetMemoryIncMode+0x44>)
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	440b      	add	r3, r1
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	4619      	mov	r1, r3
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	440b      	add	r3, r1
 8012752:	4619      	mov	r1, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	4313      	orrs	r3, r2
 8012758:	600b      	str	r3, [r1, #0]
}
 801275a:	bf00      	nop
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	0801430c 	.word	0x0801430c

0801276c <LL_DMA_SetPeriphSize>:
{
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	60f8      	str	r0, [r7, #12]
 8012774:	60b9      	str	r1, [r7, #8]
 8012776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8012778:	4a0d      	ldr	r2, [pc, #52]	; (80127b0 <LL_DMA_SetPeriphSize+0x44>)
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	4413      	add	r3, r2
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	461a      	mov	r2, r3
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	4413      	add	r3, r2
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801278c:	4908      	ldr	r1, [pc, #32]	; (80127b0 <LL_DMA_SetPeriphSize+0x44>)
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	440b      	add	r3, r1
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	4619      	mov	r1, r3
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	440b      	add	r3, r1
 801279a:	4619      	mov	r1, r3
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4313      	orrs	r3, r2
 80127a0:	600b      	str	r3, [r1, #0]
}
 80127a2:	bf00      	nop
 80127a4:	3714      	adds	r7, #20
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	0801430c 	.word	0x0801430c

080127b4 <LL_DMA_SetMemorySize>:
{
 80127b4:	b480      	push	{r7}
 80127b6:	b085      	sub	sp, #20
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80127c0:	4a0d      	ldr	r2, [pc, #52]	; (80127f8 <LL_DMA_SetMemorySize+0x44>)
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	4413      	add	r3, r2
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	461a      	mov	r2, r3
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	4413      	add	r3, r2
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80127d4:	4908      	ldr	r1, [pc, #32]	; (80127f8 <LL_DMA_SetMemorySize+0x44>)
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	440b      	add	r3, r1
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	4619      	mov	r1, r3
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	440b      	add	r3, r1
 80127e2:	4619      	mov	r1, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4313      	orrs	r3, r2
 80127e8:	600b      	str	r3, [r1, #0]
}
 80127ea:	bf00      	nop
 80127ec:	3714      	adds	r7, #20
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	0801430c 	.word	0x0801430c

080127fc <LL_DMA_SetStreamPriorityLevel>:
{
 80127fc:	b480      	push	{r7}
 80127fe:	b085      	sub	sp, #20
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8012808:	4a0d      	ldr	r2, [pc, #52]	; (8012840 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	4413      	add	r3, r2
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	461a      	mov	r2, r3
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	4413      	add	r3, r2
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801281c:	4908      	ldr	r1, [pc, #32]	; (8012840 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	440b      	add	r3, r1
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	4619      	mov	r1, r3
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	440b      	add	r3, r1
 801282a:	4619      	mov	r1, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	4313      	orrs	r3, r2
 8012830:	600b      	str	r3, [r1, #0]
}
 8012832:	bf00      	nop
 8012834:	3714      	adds	r7, #20
 8012836:	46bd      	mov	sp, r7
 8012838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop
 8012840:	0801430c 	.word	0x0801430c

08012844 <LL_DMA_GetDataLength>:
{
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 801284e:	4a07      	ldr	r2, [pc, #28]	; (801286c <LL_DMA_GetDataLength+0x28>)
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	4413      	add	r3, r2
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	461a      	mov	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4413      	add	r3, r2
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	b29b      	uxth	r3, r3
}
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	0801430c 	.word	0x0801430c

08012870 <LL_DMA_SetChannelSelection>:
{
 8012870:	b480      	push	{r7}
 8012872:	b085      	sub	sp, #20
 8012874:	af00      	add	r7, sp, #0
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 801287c:	4a0d      	ldr	r2, [pc, #52]	; (80128b4 <LL_DMA_SetChannelSelection+0x44>)
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	4413      	add	r3, r2
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	461a      	mov	r2, r3
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	4413      	add	r3, r2
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8012890:	4908      	ldr	r1, [pc, #32]	; (80128b4 <LL_DMA_SetChannelSelection+0x44>)
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	440b      	add	r3, r1
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	4619      	mov	r1, r3
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	440b      	add	r3, r1
 801289e:	4619      	mov	r1, r3
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	4313      	orrs	r3, r2
 80128a4:	600b      	str	r3, [r1, #0]
}
 80128a6:	bf00      	nop
 80128a8:	3714      	adds	r7, #20
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	0801430c 	.word	0x0801430c

080128b8 <LL_DMA_DisableFifoMode>:
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80128c2:	4a0c      	ldr	r2, [pc, #48]	; (80128f4 <LL_DMA_DisableFifoMode+0x3c>)
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	4413      	add	r3, r2
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	461a      	mov	r2, r3
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	4413      	add	r3, r2
 80128d0:	695b      	ldr	r3, [r3, #20]
 80128d2:	4908      	ldr	r1, [pc, #32]	; (80128f4 <LL_DMA_DisableFifoMode+0x3c>)
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	440a      	add	r2, r1
 80128d8:	7812      	ldrb	r2, [r2, #0]
 80128da:	4611      	mov	r1, r2
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	440a      	add	r2, r1
 80128e0:	f023 0304 	bic.w	r3, r3, #4
 80128e4:	6153      	str	r3, [r2, #20]
}
 80128e6:	bf00      	nop
 80128e8:	370c      	adds	r7, #12
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	0801430c 	.word	0x0801430c

080128f8 <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b08c      	sub	sp, #48	; 0x30
 80128fc:	af02      	add	r7, sp, #8
 80128fe:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 8012900:	2307      	movs	r3, #7
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	2303      	movs	r3, #3
 8012906:	2200      	movs	r2, #0
 8012908:	2103      	movs	r1, #3
 801290a:	4853      	ldr	r0, [pc, #332]	; (8012a58 <hal_uart1_init+0x160>)
 801290c:	f7fc ffd6 	bl	800f8bc <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 8012910:	2307      	movs	r3, #7
 8012912:	9300      	str	r3, [sp, #0]
 8012914:	2303      	movs	r3, #3
 8012916:	2200      	movs	r2, #0
 8012918:	2103      	movs	r1, #3
 801291a:	4850      	ldr	r0, [pc, #320]	; (8012a5c <hal_uart1_init+0x164>)
 801291c:	f7fc ffce 	bl	800f8bc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8012920:	2200      	movs	r2, #0
 8012922:	2105      	movs	r1, #5
 8012924:	203a      	movs	r0, #58	; 0x3a
 8012926:	f7ee fdc7 	bl	80014b8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 801292a:	203a      	movs	r0, #58	; 0x3a
 801292c:	f7ee fde0 	bl	80014f0 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8012930:	2200      	movs	r2, #0
 8012932:	2105      	movs	r1, #5
 8012934:	2046      	movs	r0, #70	; 0x46
 8012936:	f7ee fdbf 	bl	80014b8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 801293a:	2046      	movs	r0, #70	; 0x46
 801293c:	f7ee fdd8 	bl	80014f0 <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 8012940:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012944:	2102      	movs	r1, #2
 8012946:	4846      	ldr	r0, [pc, #280]	; (8012a60 <hal_uart1_init+0x168>)
 8012948:	f7ff ff92 	bl	8012870 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 801294c:	2200      	movs	r2, #0
 801294e:	2102      	movs	r1, #2
 8012950:	4843      	ldr	r0, [pc, #268]	; (8012a60 <hal_uart1_init+0x168>)
 8012952:	f7ff fe7b 	bl	801264c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8012956:	2200      	movs	r2, #0
 8012958:	2102      	movs	r1, #2
 801295a:	4841      	ldr	r0, [pc, #260]	; (8012a60 <hal_uart1_init+0x168>)
 801295c:	f7ff ff4e 	bl	80127fc <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 8012960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012964:	2102      	movs	r1, #2
 8012966:	483e      	ldr	r0, [pc, #248]	; (8012a60 <hal_uart1_init+0x168>)
 8012968:	f7ff fe94 	bl	8012694 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 801296c:	2200      	movs	r2, #0
 801296e:	2102      	movs	r1, #2
 8012970:	483b      	ldr	r0, [pc, #236]	; (8012a60 <hal_uart1_init+0x168>)
 8012972:	f7ff feb3 	bl	80126dc <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801297a:	2102      	movs	r1, #2
 801297c:	4838      	ldr	r0, [pc, #224]	; (8012a60 <hal_uart1_init+0x168>)
 801297e:	f7ff fed1 	bl	8012724 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012982:	2200      	movs	r2, #0
 8012984:	2102      	movs	r1, #2
 8012986:	4836      	ldr	r0, [pc, #216]	; (8012a60 <hal_uart1_init+0x168>)
 8012988:	f7ff fef0 	bl	801276c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 801298c:	2200      	movs	r2, #0
 801298e:	2102      	movs	r1, #2
 8012990:	4833      	ldr	r0, [pc, #204]	; (8012a60 <hal_uart1_init+0x168>)
 8012992:	f7ff ff0f 	bl	80127b4 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 8012996:	2102      	movs	r1, #2
 8012998:	4831      	ldr	r0, [pc, #196]	; (8012a60 <hal_uart1_init+0x168>)
 801299a:	f7ff ff8d 	bl	80128b8 <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 801299e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80129a2:	2107      	movs	r1, #7
 80129a4:	482e      	ldr	r0, [pc, #184]	; (8012a60 <hal_uart1_init+0x168>)
 80129a6:	f7ff ff63 	bl	8012870 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80129aa:	2240      	movs	r2, #64	; 0x40
 80129ac:	2107      	movs	r1, #7
 80129ae:	482c      	ldr	r0, [pc, #176]	; (8012a60 <hal_uart1_init+0x168>)
 80129b0:	f7ff fe4c 	bl	801264c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 80129b4:	2200      	movs	r2, #0
 80129b6:	2107      	movs	r1, #7
 80129b8:	4829      	ldr	r0, [pc, #164]	; (8012a60 <hal_uart1_init+0x168>)
 80129ba:	f7ff ff1f 	bl	80127fc <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 80129be:	2200      	movs	r2, #0
 80129c0:	2107      	movs	r1, #7
 80129c2:	4827      	ldr	r0, [pc, #156]	; (8012a60 <hal_uart1_init+0x168>)
 80129c4:	f7ff fe66 	bl	8012694 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 80129c8:	2200      	movs	r2, #0
 80129ca:	2107      	movs	r1, #7
 80129cc:	4824      	ldr	r0, [pc, #144]	; (8012a60 <hal_uart1_init+0x168>)
 80129ce:	f7ff fe85 	bl	80126dc <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 80129d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80129d6:	2107      	movs	r1, #7
 80129d8:	4821      	ldr	r0, [pc, #132]	; (8012a60 <hal_uart1_init+0x168>)
 80129da:	f7ff fea3 	bl	8012724 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 80129de:	2200      	movs	r2, #0
 80129e0:	2107      	movs	r1, #7
 80129e2:	481f      	ldr	r0, [pc, #124]	; (8012a60 <hal_uart1_init+0x168>)
 80129e4:	f7ff fec2 	bl	801276c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 80129e8:	2200      	movs	r2, #0
 80129ea:	2107      	movs	r1, #7
 80129ec:	481c      	ldr	r0, [pc, #112]	; (8012a60 <hal_uart1_init+0x168>)
 80129ee:	f7ff fee1 	bl	80127b4 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 80129f2:	2107      	movs	r1, #7
 80129f4:	481a      	ldr	r0, [pc, #104]	; (8012a60 <hal_uart1_init+0x168>)
 80129f6:	f7ff ff5f 	bl	80128b8 <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80129fe:	2300      	movs	r3, #0
 8012a00:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8012a02:	2300      	movs	r3, #0
 8012a04:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8012a06:	2300      	movs	r3, #0
 8012a08:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8012a0a:	230c      	movs	r3, #12
 8012a0c:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8012a12:	2300      	movs	r3, #0
 8012a14:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 8012a16:	f107 030c 	add.w	r3, r7, #12
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	4811      	ldr	r0, [pc, #68]	; (8012a64 <hal_uart1_init+0x16c>)
 8012a1e:	f7f2 fca5 	bl	800536c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8012a22:	4810      	ldr	r0, [pc, #64]	; (8012a64 <hal_uart1_init+0x16c>)
 8012a24:	f7ff fdb5 	bl	8012592 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 8012a28:	480e      	ldr	r0, [pc, #56]	; (8012a64 <hal_uart1_init+0x16c>)
 8012a2a:	f7ff fd8e 	bl	801254a <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012a2e:	f7ff fd03 	bl	8012438 <__NVIC_GetPriorityGrouping>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2200      	movs	r2, #0
 8012a36:	2105      	movs	r1, #5
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7ff fd53 	bl	80124e4 <NVIC_EncodePriority>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	4619      	mov	r1, r3
 8012a42:	2025      	movs	r0, #37	; 0x25
 8012a44:	f7ff fd24 	bl	8012490 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8012a48:	2025      	movs	r0, #37	; 0x25
 8012a4a:	f7ff fd03 	bl	8012454 <__NVIC_EnableIRQ>
}
 8012a4e:	bf00      	nop
 8012a50:	3728      	adds	r7, #40	; 0x28
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	0801425c 	.word	0x0801425c
 8012a5c:	08014264 	.word	0x08014264
 8012a60:	40026400 	.word	0x40026400
 8012a64:	40011000 	.word	0x40011000

08012a68 <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	4603      	mov	r3, r0
 8012a70:	6039      	str	r1, [r7, #0]
 8012a72:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 8012a74:	79fb      	ldrb	r3, [r7, #7]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d102      	bne.n	8012a80 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 8012a7a:	6838      	ldr	r0, [r7, #0]
 8012a7c:	f7ff ff3c 	bl	80128f8 <hal_uart1_init>
}
 8012a80:	bf00      	nop
 8012a82:	3708      	adds	r7, #8
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
 8012a94:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 8012a96:	7bfb      	ldrb	r3, [r7, #15]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d11e      	bne.n	8012ada <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8012a9c:	4810      	ldr	r0, [pc, #64]	; (8012ae0 <hal_uart_transfer+0x58>)
 8012a9e:	f7ff fd64 	bl	801256a <LL_USART_IsEnabled>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d017      	beq.n	8012ad8 <hal_uart_transfer+0x50>

        while(size > 0) {
 8012aa8:	e012      	b.n	8012ad0 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 8012aaa:	bf00      	nop
 8012aac:	480c      	ldr	r0, [pc, #48]	; (8012ae0 <hal_uart_transfer+0x58>)
 8012aae:	f7ff fd99 	bl	80125e4 <LL_USART_IsActiveFlag_TXE>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d0f9      	beq.n	8012aac <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	4619      	mov	r1, r3
 8012abe:	4808      	ldr	r0, [pc, #32]	; (8012ae0 <hal_uart_transfer+0x58>)
 8012ac0:	f7ff fdb5 	bl	801262e <LL_USART_TransmitData8>
            buf++;
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	60bb      	str	r3, [r7, #8]
            size--;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	3b01      	subs	r3, #1
 8012ace:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d1e9      	bne.n	8012aaa <hal_uart_transfer+0x22>
 8012ad6:	e000      	b.n	8012ada <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8012ad8:	bf00      	nop
        }
    }
}
 8012ada:	3710      	adds	r7, #16
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}
 8012ae0:	40011000 	.word	0x40011000

08012ae4 <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 8012ae4:	b590      	push	{r4, r7, lr}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8012aee:	4813      	ldr	r0, [pc, #76]	; (8012b3c <USART1_IRQHandler+0x58>)
 8012af0:	f7ff fd65 	bl	80125be <LL_USART_IsActiveFlag_IDLE>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d01c      	beq.n	8012b34 <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 8012afa:	4810      	ldr	r0, [pc, #64]	; (8012b3c <USART1_IRQHandler+0x58>)
 8012afc:	f7ff fd85 	bl	801260a <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 8012b00:	4b0f      	ldr	r3, [pc, #60]	; (8012b40 <USART1_IRQHandler+0x5c>)
 8012b02:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8012b06:	2102      	movs	r1, #2
 8012b08:	480e      	ldr	r0, [pc, #56]	; (8012b44 <USART1_IRQHandler+0x60>)
 8012b0a:	f7ff fe9b 	bl	8012844 <LL_DMA_GetDataLength>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	4423      	add	r3, r4
 8012b12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	bfb8      	it	lt
 8012b1a:	425b      	neglt	r3, r3
 8012b1c:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 8012b1e:	4b08      	ldr	r3, [pc, #32]	; (8012b40 <USART1_IRQHandler+0x5c>)
 8012b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	4413      	add	r3, r2
 8012b28:	2bff      	cmp	r3, #255	; 0xff
 8012b2a:	d903      	bls.n	8012b34 <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 8012b2c:	4b04      	ldr	r3, [pc, #16]	; (8012b40 <USART1_IRQHandler+0x5c>)
 8012b2e:	2201      	movs	r2, #1
 8012b30:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 8012b34:	bf00      	nop
 8012b36:	370c      	adds	r7, #12
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd90      	pop	{r4, r7, pc}
 8012b3c:	40011000 	.word	0x40011000
 8012b40:	20006a8c 	.word	0x20006a8c
 8012b44:	40026400 	.word	0x40026400

08012b48 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	af00      	add	r7, sp, #0

}
 8012b4c:	bf00      	nop
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr

08012b56 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8012b56:	b480      	push	{r7}
 8012b58:	af00      	add	r7, sp, #0

}
 8012b5a:	bf00      	nop
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <refresh_rtc_timercb>:

static u8g2_t u8g2;
static ds3231_time_t ds3231_time;
static TimerHandle_t rtc_timer;

static void refresh_rtc_timercb (TimerHandle_t xTimer) {
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
	ds3231_get_time(&ds3231_time);
 8012b6c:	4803      	ldr	r0, [pc, #12]	; (8012b7c <refresh_rtc_timercb+0x18>)
 8012b6e:	f7ed fd71 	bl	8000654 <ds3231_get_time>
}
 8012b72:	bf00      	nop
 8012b74:	3708      	adds	r7, #8
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	20007cd8 	.word	0x20007cd8

08012b80 <displayThread>:

void displayThread(void* param) {
 8012b80:	b590      	push	{r4, r7, lr}
 8012b82:	b085      	sub	sp, #20
 8012b84:	af02      	add	r7, sp, #8
 8012b86:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8012b88:	4b27      	ldr	r3, [pc, #156]	; (8012c28 <displayThread+0xa8>)
 8012b8a:	4a28      	ldr	r2, [pc, #160]	; (8012c2c <displayThread+0xac>)
 8012b8c:	4928      	ldr	r1, [pc, #160]	; (8012c30 <displayThread+0xb0>)
 8012b8e:	4829      	ldr	r0, [pc, #164]	; (8012c34 <displayThread+0xb4>)
 8012b90:	f7fa ffc4 	bl	800db1c <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2);
 8012b94:	4827      	ldr	r0, [pc, #156]	; (8012c34 <displayThread+0xb4>)
 8012b96:	f7fb fdfd 	bl	800e794 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	4825      	ldr	r0, [pc, #148]	; (8012c34 <displayThread+0xb4>)
 8012b9e:	f7fb fe08 	bl	800e7b2 <u8x8_SetPowerSave>

	ds3231_register_driver(&i2c1drv);
 8012ba2:	4825      	ldr	r0, [pc, #148]	; (8012c38 <displayThread+0xb8>)
 8012ba4:	f7ed fd46 	bl	8000634 <ds3231_register_driver>

	rtc_timer = xTimerCreate("rtc",
 8012ba8:	4b24      	ldr	r3, [pc, #144]	; (8012c3c <displayThread+0xbc>)
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	2300      	movs	r3, #0
 8012bae:	2201      	movs	r2, #1
 8012bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012bb4:	4822      	ldr	r0, [pc, #136]	; (8012c40 <displayThread+0xc0>)
 8012bb6:	f7f8 fd19 	bl	800b5ec <xTimerCreate>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	4a21      	ldr	r2, [pc, #132]	; (8012c44 <displayThread+0xc4>)
 8012bbe:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(RTC_TIMER_PERIOD),
							pdTRUE,
							(void*)0,
							refresh_rtc_timercb);

	if(rtc_timer == NULL) {
 8012bc0:	4b20      	ldr	r3, [pc, #128]	; (8012c44 <displayThread+0xc4>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d103      	bne.n	8012bd0 <displayThread+0x50>
		hal_cli_printf("rtc timer create failed");
 8012bc8:	481f      	ldr	r0, [pc, #124]	; (8012c48 <displayThread+0xc8>)
 8012bca:	f7fc f907 	bl	800eddc <hal_cli_printf>
		return;
 8012bce:	e028      	b.n	8012c22 <displayThread+0xa2>
	} else {
		if(xTimerStart(rtc_timer, 0) != pdPASS) {
 8012bd0:	4b1c      	ldr	r3, [pc, #112]	; (8012c44 <displayThread+0xc4>)
 8012bd2:	681c      	ldr	r4, [r3, #0]
 8012bd4:	f7f7 ff00 	bl	800a9d8 <xTaskGetTickCount>
 8012bd8:	4602      	mov	r2, r0
 8012bda:	2300      	movs	r3, #0
 8012bdc:	9300      	str	r3, [sp, #0]
 8012bde:	2300      	movs	r3, #0
 8012be0:	2101      	movs	r1, #1
 8012be2:	4620      	mov	r0, r4
 8012be4:	f7f8 fd5e 	bl	800b6a4 <xTimerGenericCommand>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d003      	beq.n	8012bf6 <displayThread+0x76>
			hal_cli_printf("rtc timer start failed");
 8012bee:	4817      	ldr	r0, [pc, #92]	; (8012c4c <displayThread+0xcc>)
 8012bf0:	f7fc f8f4 	bl	800eddc <hal_cli_printf>
			return;
 8012bf4:	e015      	b.n	8012c22 <displayThread+0xa2>
		}
	}


	while(1) {
	    u8g2_FirstPage(&u8g2);
 8012bf6:	480f      	ldr	r0, [pc, #60]	; (8012c34 <displayThread+0xb4>)
 8012bf8:	f7fa ff6c 	bl	800dad4 <u8g2_FirstPage>
	    icon_draw_play(&u8g2, 0, 0);
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	2100      	movs	r1, #0
 8012c00:	480c      	ldr	r0, [pc, #48]	; (8012c34 <displayThread+0xb4>)
 8012c02:	f7ed fdc3 	bl	800078c <icon_draw_play>
	    icon_draw_pause(&u8g2, 120, 0);
 8012c06:	2200      	movs	r2, #0
 8012c08:	2178      	movs	r1, #120	; 0x78
 8012c0a:	480a      	ldr	r0, [pc, #40]	; (8012c34 <displayThread+0xb4>)
 8012c0c:	f7ed fde2 	bl	80007d4 <icon_draw_pause>

#if 0
	    u8g2_SetFont(&u8g2, u8g2_font_6x13B_tf);
	    u8g2_DrawStr(&u8g2, 1, 14, "hello world!");
#endif
		taskYIELD();
 8012c10:	4b0f      	ldr	r3, [pc, #60]	; (8012c50 <displayThread+0xd0>)
 8012c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c16:	601a      	str	r2, [r3, #0]
 8012c18:	f3bf 8f4f 	dsb	sy
 8012c1c:	f3bf 8f6f 	isb	sy
	    u8g2_FirstPage(&u8g2);
 8012c20:	e7e9      	b.n	8012bf6 <displayThread+0x76>
	}
}
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd90      	pop	{r4, r7, pc}
 8012c28:	08000a61 	.word	0x08000a61
 8012c2c:	08000b81 	.word	0x08000b81
 8012c30:	08014190 	.word	0x08014190
 8012c34:	20007c50 	.word	0x20007c50
 8012c38:	20007a18 	.word	0x20007a18
 8012c3c:	08012b65 	.word	0x08012b65
 8012c40:	08013c4c 	.word	0x08013c4c
 8012c44:	20007ce0 	.word	0x20007ce0
 8012c48:	08013c50 	.word	0x08013c50
 8012c4c:	08013c68 	.word	0x08013c68
 8012c50:	e000ed04 	.word	0xe000ed04

08012c54 <volume_control_timercb>:
	if(MP3_is_playing())
		MP3_Feeder();
}
#endif

static void volume_control_timercb(TimerHandle_t xTimer) {
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
	uint32_t potentiometer = 0;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	60bb      	str	r3, [r7, #8]
	uint8_t volume = 0xFF;
 8012c60:	23ff      	movs	r3, #255	; 0xff
 8012c62:	73fb      	strb	r3, [r7, #15]

	hal_adc_getdata(1, &potentiometer);
 8012c64:	f107 0308 	add.w	r3, r7, #8
 8012c68:	4619      	mov	r1, r3
 8012c6a:	2001      	movs	r0, #1
 8012c6c:	f7fb ff2a 	bl	800eac4 <hal_adc_getdata>
	potentiometer >>= 9; // 12bit adc resolution. only refer to msb 3bit to change the volume
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	0a5b      	lsrs	r3, r3, #9
 8012c74:	60bb      	str	r3, [r7, #8]

	if(prev_volume != potentiometer) {
 8012c76:	4b12      	ldr	r3, [pc, #72]	; (8012cc0 <volume_control_timercb+0x6c>)
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d00c      	beq.n	8012c9c <volume_control_timercb+0x48>
		volume = convert_volume_level(potentiometer);
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	4618      	mov	r0, r3
 8012c88:	f000 f86a 	bl	8012d60 <convert_volume_level>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	73fb      	strb	r3, [r7, #15]
		VS1053_SetVolume(volume, volume);
 8012c90:	7bfa      	ldrb	r2, [r7, #15]
 8012c92:	7bfb      	ldrb	r3, [r7, #15]
 8012c94:	4611      	mov	r1, r2
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7ee f8ec 	bl	8000e74 <VS1053_SetVolume>
	}

	prev_volume = potentiometer;
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	b2da      	uxtb	r2, r3
 8012ca0:	4b07      	ldr	r3, [pc, #28]	; (8012cc0 <volume_control_timercb+0x6c>)
 8012ca2:	701a      	strb	r2, [r3, #0]
	hal_cli_printf("%d", VS1053_GetDecodeTime()/256);
 8012ca4:	f7ee f97d 	bl	8000fa2 <VS1053_GetDecodeTime>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	0a1b      	lsrs	r3, r3, #8
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	4619      	mov	r1, r3
 8012cb0:	4804      	ldr	r0, [pc, #16]	; (8012cc4 <volume_control_timercb+0x70>)
 8012cb2:	f7fc f893 	bl	800eddc <hal_cli_printf>
}
 8012cb6:	bf00      	nop
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	20007ce8 	.word	0x20007ce8
 8012cc4:	08013c80 	.word	0x08013c80

08012cc8 <mp3Thread>:

void mp3Thread(void* param) {
 8012cc8:	b590      	push	{r4, r7, lr}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af02      	add	r7, sp, #8
 8012cce:	6078      	str	r0, [r7, #4]
	MP3_Init();
 8012cd0:	f7ed fda4 	bl	800081c <MP3_Init>
	MP3_Play("/mp3/Mercy.mp3");
 8012cd4:	481b      	ldr	r0, [pc, #108]	; (8012d44 <mp3Thread+0x7c>)
 8012cd6:	f7ed fdbf 	bl	8000858 <MP3_Play>

	vs1053_volume_timer = xTimerCreate(
 8012cda:	4b1b      	ldr	r3, [pc, #108]	; (8012d48 <mp3Thread+0x80>)
 8012cdc:	9300      	str	r3, [sp, #0]
 8012cde:	2300      	movs	r3, #0
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012ce6:	4819      	ldr	r0, [pc, #100]	; (8012d4c <mp3Thread+0x84>)
 8012ce8:	f7f8 fc80 	bl	800b5ec <xTimerCreate>
 8012cec:	4603      	mov	r3, r0
 8012cee:	4a18      	ldr	r2, [pc, #96]	; (8012d50 <mp3Thread+0x88>)
 8012cf0:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(VS1053_VOLUME_PERIOD),
							pdTRUE,
							(void*)0,
							volume_control_timercb);

	if(!vs1053_volume_timer) {
 8012cf2:	4b17      	ldr	r3, [pc, #92]	; (8012d50 <mp3Thread+0x88>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d103      	bne.n	8012d02 <mp3Thread+0x3a>
		hal_cli_printf("mp3 volume timer create failed");
 8012cfa:	4816      	ldr	r0, [pc, #88]	; (8012d54 <mp3Thread+0x8c>)
 8012cfc:	f7fc f86e 	bl	800eddc <hal_cli_printf>
		return;
 8012d00:	e01d      	b.n	8012d3e <mp3Thread+0x76>
	} else {
		if(xTimerStart(vs1053_volume_timer, 0) != pdPASS) {
 8012d02:	4b13      	ldr	r3, [pc, #76]	; (8012d50 <mp3Thread+0x88>)
 8012d04:	681c      	ldr	r4, [r3, #0]
 8012d06:	f7f7 fe67 	bl	800a9d8 <xTaskGetTickCount>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	2300      	movs	r3, #0
 8012d12:	2101      	movs	r1, #1
 8012d14:	4620      	mov	r0, r4
 8012d16:	f7f8 fcc5 	bl	800b6a4 <xTimerGenericCommand>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d003      	beq.n	8012d28 <mp3Thread+0x60>
			hal_cli_printf("mp3 volume timer start failed");
 8012d20:	480d      	ldr	r0, [pc, #52]	; (8012d58 <mp3Thread+0x90>)
 8012d22:	f7fc f85b 	bl	800eddc <hal_cli_printf>
			return;
 8012d26:	e00a      	b.n	8012d3e <mp3Thread+0x76>
		}
	}

	while(1) {
		MP3_Feeder();
 8012d28:	f7ed fe1e 	bl	8000968 <MP3_Feeder>
		taskYIELD();
 8012d2c:	4b0b      	ldr	r3, [pc, #44]	; (8012d5c <mp3Thread+0x94>)
 8012d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d32:	601a      	str	r2, [r3, #0]
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	f3bf 8f6f 	isb	sy
		MP3_Feeder();
 8012d3c:	e7f4      	b.n	8012d28 <mp3Thread+0x60>
	}
}
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd90      	pop	{r4, r7, pc}
 8012d44:	08013c84 	.word	0x08013c84
 8012d48:	08012c55 	.word	0x08012c55
 8012d4c:	08013c94 	.word	0x08013c94
 8012d50:	20007ce4 	.word	0x20007ce4
 8012d54:	08013ca0 	.word	0x08013ca0
 8012d58:	08013cc0 	.word	0x08013cc0
 8012d5c:	e000ed04 	.word	0xe000ed04

08012d60 <convert_volume_level>:


static uint8_t convert_volume_level(VolumeLevel vol) {
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	4603      	mov	r3, r0
 8012d68:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch(vol) {
 8012d6a:	79fb      	ldrb	r3, [r7, #7]
 8012d6c:	2b07      	cmp	r3, #7
 8012d6e:	d82b      	bhi.n	8012dc8 <convert_volume_level+0x68>
 8012d70:	a201      	add	r2, pc, #4	; (adr r2, 8012d78 <convert_volume_level+0x18>)
 8012d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d76:	bf00      	nop
 8012d78:	08012dc3 	.word	0x08012dc3
 8012d7c:	08012d99 	.word	0x08012d99
 8012d80:	08012d9f 	.word	0x08012d9f
 8012d84:	08012da5 	.word	0x08012da5
 8012d88:	08012dab 	.word	0x08012dab
 8012d8c:	08012db1 	.word	0x08012db1
 8012d90:	08012db7 	.word	0x08012db7
 8012d94:	08012dbd 	.word	0x08012dbd
	case VOLUME_LEVEL_1:
		value = 0x0C;
 8012d98:	230c      	movs	r3, #12
 8012d9a:	73fb      	strb	r3, [r7, #15]
		break;
 8012d9c:	e01a      	b.n	8012dd4 <convert_volume_level+0x74>
	case VOLUME_LEVEL_2:
		value = 0x0A;
 8012d9e:	230a      	movs	r3, #10
 8012da0:	73fb      	strb	r3, [r7, #15]
		break;
 8012da2:	e017      	b.n	8012dd4 <convert_volume_level+0x74>
	case VOLUME_LEVEL_3:
		value = 0x08;
 8012da4:	2308      	movs	r3, #8
 8012da6:	73fb      	strb	r3, [r7, #15]
		break;
 8012da8:	e014      	b.n	8012dd4 <convert_volume_level+0x74>
	case VOLUME_LEVEL_4:
		value = 0x06;
 8012daa:	2306      	movs	r3, #6
 8012dac:	73fb      	strb	r3, [r7, #15]
		break;
 8012dae:	e011      	b.n	8012dd4 <convert_volume_level+0x74>
	case VOLUME_LEVEL_5:
		value = 0x04;
 8012db0:	2304      	movs	r3, #4
 8012db2:	73fb      	strb	r3, [r7, #15]
		break;
 8012db4:	e00e      	b.n	8012dd4 <convert_volume_level+0x74>
	case VOLUME_LEVEL_6:
		value = 0x02;
 8012db6:	2302      	movs	r3, #2
 8012db8:	73fb      	strb	r3, [r7, #15]
		break;
 8012dba:	e00b      	b.n	8012dd4 <convert_volume_level+0x74>
	case VOLUME_LEVEL_7:
		value = 0x00;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	73fb      	strb	r3, [r7, #15]
		break;
 8012dc0:	e008      	b.n	8012dd4 <convert_volume_level+0x74>
	case VOLUME_OFF:
		value = 0xFF;
 8012dc2:	23ff      	movs	r3, #255	; 0xff
 8012dc4:	73fb      	strb	r3, [r7, #15]
		break;
 8012dc6:	e005      	b.n	8012dd4 <convert_volume_level+0x74>
	default:
		value = 0xFF;
 8012dc8:	23ff      	movs	r3, #255	; 0xff
 8012dca:	73fb      	strb	r3, [r7, #15]
		hal_cli_printf("volume level argument error");
 8012dcc:	4804      	ldr	r0, [pc, #16]	; (8012de0 <convert_volume_level+0x80>)
 8012dce:	f7fc f805 	bl	800eddc <hal_cli_printf>
		break;
 8012dd2:	bf00      	nop
	}

	return value;
 8012dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3710      	adds	r7, #16
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	08013ce0 	.word	0x08013ce0

08012de4 <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012de8:	b672      	cpsid	i
}
 8012dea:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 8012dec:	4801      	ldr	r0, [pc, #4]	; (8012df4 <ErrorHandler+0x10>)
 8012dee:	f7fb fff5 	bl	800eddc <hal_cli_printf>
  while (1)
 8012df2:	e7fe      	b.n	8012df2 <ErrorHandler+0xe>
 8012df4:	08013cfc 	.word	0x08013cfc

08012df8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8012df8:	480d      	ldr	r0, [pc, #52]	; (8012e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8012dfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8012dfc:	f7ff f9d4 	bl	80121a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8012e00:	480c      	ldr	r0, [pc, #48]	; (8012e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8012e02:	490d      	ldr	r1, [pc, #52]	; (8012e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8012e04:	4a0d      	ldr	r2, [pc, #52]	; (8012e3c <LoopForever+0xe>)
  movs r3, #0
 8012e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012e08:	e002      	b.n	8012e10 <LoopCopyDataInit>

08012e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012e0e:	3304      	adds	r3, #4

08012e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012e14:	d3f9      	bcc.n	8012e0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012e16:	4a0a      	ldr	r2, [pc, #40]	; (8012e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8012e18:	4c0a      	ldr	r4, [pc, #40]	; (8012e44 <LoopForever+0x16>)
  movs r3, #0
 8012e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012e1c:	e001      	b.n	8012e22 <LoopFillZerobss>

08012e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012e20:	3204      	adds	r2, #4

08012e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012e24:	d3fb      	bcc.n	8012e1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8012e26:	f000 f811 	bl	8012e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8012e2a:	f7fd ffd9 	bl	8010de0 <main>

08012e2e <LoopForever>:

LoopForever:
    b LoopForever
 8012e2e:	e7fe      	b.n	8012e2e <LoopForever>
  ldr   r0, =_estack
 8012e30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8012e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012e38:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8012e3c:	080143b8 	.word	0x080143b8
  ldr r2, =_sbss
 8012e40:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8012e44:	20007cfc 	.word	0x20007cfc

08012e48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8012e48:	e7fe      	b.n	8012e48 <ADC_IRQHandler>
	...

08012e4c <__libc_init_array>:
 8012e4c:	b570      	push	{r4, r5, r6, lr}
 8012e4e:	4d0d      	ldr	r5, [pc, #52]	; (8012e84 <__libc_init_array+0x38>)
 8012e50:	4c0d      	ldr	r4, [pc, #52]	; (8012e88 <__libc_init_array+0x3c>)
 8012e52:	1b64      	subs	r4, r4, r5
 8012e54:	10a4      	asrs	r4, r4, #2
 8012e56:	2600      	movs	r6, #0
 8012e58:	42a6      	cmp	r6, r4
 8012e5a:	d109      	bne.n	8012e70 <__libc_init_array+0x24>
 8012e5c:	4d0b      	ldr	r5, [pc, #44]	; (8012e8c <__libc_init_array+0x40>)
 8012e5e:	4c0c      	ldr	r4, [pc, #48]	; (8012e90 <__libc_init_array+0x44>)
 8012e60:	f000 fccc 	bl	80137fc <_init>
 8012e64:	1b64      	subs	r4, r4, r5
 8012e66:	10a4      	asrs	r4, r4, #2
 8012e68:	2600      	movs	r6, #0
 8012e6a:	42a6      	cmp	r6, r4
 8012e6c:	d105      	bne.n	8012e7a <__libc_init_array+0x2e>
 8012e6e:	bd70      	pop	{r4, r5, r6, pc}
 8012e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e74:	4798      	blx	r3
 8012e76:	3601      	adds	r6, #1
 8012e78:	e7ee      	b.n	8012e58 <__libc_init_array+0xc>
 8012e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e7e:	4798      	blx	r3
 8012e80:	3601      	adds	r6, #1
 8012e82:	e7f2      	b.n	8012e6a <__libc_init_array+0x1e>
 8012e84:	080143b0 	.word	0x080143b0
 8012e88:	080143b0 	.word	0x080143b0
 8012e8c:	080143b0 	.word	0x080143b0
 8012e90:	080143b4 	.word	0x080143b4

08012e94 <memcmp>:
 8012e94:	b510      	push	{r4, lr}
 8012e96:	3901      	subs	r1, #1
 8012e98:	4402      	add	r2, r0
 8012e9a:	4290      	cmp	r0, r2
 8012e9c:	d101      	bne.n	8012ea2 <memcmp+0xe>
 8012e9e:	2000      	movs	r0, #0
 8012ea0:	e005      	b.n	8012eae <memcmp+0x1a>
 8012ea2:	7803      	ldrb	r3, [r0, #0]
 8012ea4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012ea8:	42a3      	cmp	r3, r4
 8012eaa:	d001      	beq.n	8012eb0 <memcmp+0x1c>
 8012eac:	1b18      	subs	r0, r3, r4
 8012eae:	bd10      	pop	{r4, pc}
 8012eb0:	3001      	adds	r0, #1
 8012eb2:	e7f2      	b.n	8012e9a <memcmp+0x6>

08012eb4 <memcpy>:
 8012eb4:	440a      	add	r2, r1
 8012eb6:	4291      	cmp	r1, r2
 8012eb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012ebc:	d100      	bne.n	8012ec0 <memcpy+0xc>
 8012ebe:	4770      	bx	lr
 8012ec0:	b510      	push	{r4, lr}
 8012ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eca:	4291      	cmp	r1, r2
 8012ecc:	d1f9      	bne.n	8012ec2 <memcpy+0xe>
 8012ece:	bd10      	pop	{r4, pc}

08012ed0 <memset>:
 8012ed0:	4402      	add	r2, r0
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	d100      	bne.n	8012eda <memset+0xa>
 8012ed8:	4770      	bx	lr
 8012eda:	f803 1b01 	strb.w	r1, [r3], #1
 8012ede:	e7f9      	b.n	8012ed4 <memset+0x4>

08012ee0 <siprintf>:
 8012ee0:	b40e      	push	{r1, r2, r3}
 8012ee2:	b500      	push	{lr}
 8012ee4:	b09c      	sub	sp, #112	; 0x70
 8012ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8012ee8:	9002      	str	r0, [sp, #8]
 8012eea:	9006      	str	r0, [sp, #24]
 8012eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ef0:	4809      	ldr	r0, [pc, #36]	; (8012f18 <siprintf+0x38>)
 8012ef2:	9107      	str	r1, [sp, #28]
 8012ef4:	9104      	str	r1, [sp, #16]
 8012ef6:	4909      	ldr	r1, [pc, #36]	; (8012f1c <siprintf+0x3c>)
 8012ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012efc:	9105      	str	r1, [sp, #20]
 8012efe:	6800      	ldr	r0, [r0, #0]
 8012f00:	9301      	str	r3, [sp, #4]
 8012f02:	a902      	add	r1, sp, #8
 8012f04:	f000 f91e 	bl	8013144 <_svfiprintf_r>
 8012f08:	9b02      	ldr	r3, [sp, #8]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	701a      	strb	r2, [r3, #0]
 8012f0e:	b01c      	add	sp, #112	; 0x70
 8012f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f14:	b003      	add	sp, #12
 8012f16:	4770      	bx	lr
 8012f18:	20000018 	.word	0x20000018
 8012f1c:	ffff0208 	.word	0xffff0208

08012f20 <_vsiprintf_r>:
 8012f20:	b500      	push	{lr}
 8012f22:	b09b      	sub	sp, #108	; 0x6c
 8012f24:	9100      	str	r1, [sp, #0]
 8012f26:	9104      	str	r1, [sp, #16]
 8012f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f2c:	9105      	str	r1, [sp, #20]
 8012f2e:	9102      	str	r1, [sp, #8]
 8012f30:	4905      	ldr	r1, [pc, #20]	; (8012f48 <_vsiprintf_r+0x28>)
 8012f32:	9103      	str	r1, [sp, #12]
 8012f34:	4669      	mov	r1, sp
 8012f36:	f000 f905 	bl	8013144 <_svfiprintf_r>
 8012f3a:	9b00      	ldr	r3, [sp, #0]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	701a      	strb	r2, [r3, #0]
 8012f40:	b01b      	add	sp, #108	; 0x6c
 8012f42:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f46:	bf00      	nop
 8012f48:	ffff0208 	.word	0xffff0208

08012f4c <vsiprintf>:
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	460a      	mov	r2, r1
 8012f50:	4601      	mov	r1, r0
 8012f52:	4802      	ldr	r0, [pc, #8]	; (8012f5c <vsiprintf+0x10>)
 8012f54:	6800      	ldr	r0, [r0, #0]
 8012f56:	f7ff bfe3 	b.w	8012f20 <_vsiprintf_r>
 8012f5a:	bf00      	nop
 8012f5c:	20000018 	.word	0x20000018

08012f60 <__retarget_lock_acquire_recursive>:
 8012f60:	4770      	bx	lr

08012f62 <__retarget_lock_release_recursive>:
 8012f62:	4770      	bx	lr

08012f64 <sbrk_aligned>:
 8012f64:	b570      	push	{r4, r5, r6, lr}
 8012f66:	4e0e      	ldr	r6, [pc, #56]	; (8012fa0 <sbrk_aligned+0x3c>)
 8012f68:	460c      	mov	r4, r1
 8012f6a:	6831      	ldr	r1, [r6, #0]
 8012f6c:	4605      	mov	r5, r0
 8012f6e:	b911      	cbnz	r1, 8012f76 <sbrk_aligned+0x12>
 8012f70:	f000 fb7c 	bl	801366c <_sbrk_r>
 8012f74:	6030      	str	r0, [r6, #0]
 8012f76:	4621      	mov	r1, r4
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f000 fb77 	bl	801366c <_sbrk_r>
 8012f7e:	1c43      	adds	r3, r0, #1
 8012f80:	d00a      	beq.n	8012f98 <sbrk_aligned+0x34>
 8012f82:	1cc4      	adds	r4, r0, #3
 8012f84:	f024 0403 	bic.w	r4, r4, #3
 8012f88:	42a0      	cmp	r0, r4
 8012f8a:	d007      	beq.n	8012f9c <sbrk_aligned+0x38>
 8012f8c:	1a21      	subs	r1, r4, r0
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f000 fb6c 	bl	801366c <_sbrk_r>
 8012f94:	3001      	adds	r0, #1
 8012f96:	d101      	bne.n	8012f9c <sbrk_aligned+0x38>
 8012f98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	bd70      	pop	{r4, r5, r6, pc}
 8012fa0:	20007cf0 	.word	0x20007cf0

08012fa4 <_malloc_r>:
 8012fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa8:	1ccd      	adds	r5, r1, #3
 8012faa:	f025 0503 	bic.w	r5, r5, #3
 8012fae:	3508      	adds	r5, #8
 8012fb0:	2d0c      	cmp	r5, #12
 8012fb2:	bf38      	it	cc
 8012fb4:	250c      	movcc	r5, #12
 8012fb6:	2d00      	cmp	r5, #0
 8012fb8:	4607      	mov	r7, r0
 8012fba:	db01      	blt.n	8012fc0 <_malloc_r+0x1c>
 8012fbc:	42a9      	cmp	r1, r5
 8012fbe:	d905      	bls.n	8012fcc <_malloc_r+0x28>
 8012fc0:	230c      	movs	r3, #12
 8012fc2:	603b      	str	r3, [r7, #0]
 8012fc4:	2600      	movs	r6, #0
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fcc:	4e2e      	ldr	r6, [pc, #184]	; (8013088 <_malloc_r+0xe4>)
 8012fce:	f000 fb77 	bl	80136c0 <__malloc_lock>
 8012fd2:	6833      	ldr	r3, [r6, #0]
 8012fd4:	461c      	mov	r4, r3
 8012fd6:	bb34      	cbnz	r4, 8013026 <_malloc_r+0x82>
 8012fd8:	4629      	mov	r1, r5
 8012fda:	4638      	mov	r0, r7
 8012fdc:	f7ff ffc2 	bl	8012f64 <sbrk_aligned>
 8012fe0:	1c43      	adds	r3, r0, #1
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	d14d      	bne.n	8013082 <_malloc_r+0xde>
 8012fe6:	6834      	ldr	r4, [r6, #0]
 8012fe8:	4626      	mov	r6, r4
 8012fea:	2e00      	cmp	r6, #0
 8012fec:	d140      	bne.n	8013070 <_malloc_r+0xcc>
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	4631      	mov	r1, r6
 8012ff2:	4638      	mov	r0, r7
 8012ff4:	eb04 0803 	add.w	r8, r4, r3
 8012ff8:	f000 fb38 	bl	801366c <_sbrk_r>
 8012ffc:	4580      	cmp	r8, r0
 8012ffe:	d13a      	bne.n	8013076 <_malloc_r+0xd2>
 8013000:	6821      	ldr	r1, [r4, #0]
 8013002:	3503      	adds	r5, #3
 8013004:	1a6d      	subs	r5, r5, r1
 8013006:	f025 0503 	bic.w	r5, r5, #3
 801300a:	3508      	adds	r5, #8
 801300c:	2d0c      	cmp	r5, #12
 801300e:	bf38      	it	cc
 8013010:	250c      	movcc	r5, #12
 8013012:	4629      	mov	r1, r5
 8013014:	4638      	mov	r0, r7
 8013016:	f7ff ffa5 	bl	8012f64 <sbrk_aligned>
 801301a:	3001      	adds	r0, #1
 801301c:	d02b      	beq.n	8013076 <_malloc_r+0xd2>
 801301e:	6823      	ldr	r3, [r4, #0]
 8013020:	442b      	add	r3, r5
 8013022:	6023      	str	r3, [r4, #0]
 8013024:	e00e      	b.n	8013044 <_malloc_r+0xa0>
 8013026:	6822      	ldr	r2, [r4, #0]
 8013028:	1b52      	subs	r2, r2, r5
 801302a:	d41e      	bmi.n	801306a <_malloc_r+0xc6>
 801302c:	2a0b      	cmp	r2, #11
 801302e:	d916      	bls.n	801305e <_malloc_r+0xba>
 8013030:	1961      	adds	r1, r4, r5
 8013032:	42a3      	cmp	r3, r4
 8013034:	6025      	str	r5, [r4, #0]
 8013036:	bf18      	it	ne
 8013038:	6059      	strne	r1, [r3, #4]
 801303a:	6863      	ldr	r3, [r4, #4]
 801303c:	bf08      	it	eq
 801303e:	6031      	streq	r1, [r6, #0]
 8013040:	5162      	str	r2, [r4, r5]
 8013042:	604b      	str	r3, [r1, #4]
 8013044:	4638      	mov	r0, r7
 8013046:	f104 060b 	add.w	r6, r4, #11
 801304a:	f000 fb3f 	bl	80136cc <__malloc_unlock>
 801304e:	f026 0607 	bic.w	r6, r6, #7
 8013052:	1d23      	adds	r3, r4, #4
 8013054:	1af2      	subs	r2, r6, r3
 8013056:	d0b6      	beq.n	8012fc6 <_malloc_r+0x22>
 8013058:	1b9b      	subs	r3, r3, r6
 801305a:	50a3      	str	r3, [r4, r2]
 801305c:	e7b3      	b.n	8012fc6 <_malloc_r+0x22>
 801305e:	6862      	ldr	r2, [r4, #4]
 8013060:	42a3      	cmp	r3, r4
 8013062:	bf0c      	ite	eq
 8013064:	6032      	streq	r2, [r6, #0]
 8013066:	605a      	strne	r2, [r3, #4]
 8013068:	e7ec      	b.n	8013044 <_malloc_r+0xa0>
 801306a:	4623      	mov	r3, r4
 801306c:	6864      	ldr	r4, [r4, #4]
 801306e:	e7b2      	b.n	8012fd6 <_malloc_r+0x32>
 8013070:	4634      	mov	r4, r6
 8013072:	6876      	ldr	r6, [r6, #4]
 8013074:	e7b9      	b.n	8012fea <_malloc_r+0x46>
 8013076:	230c      	movs	r3, #12
 8013078:	603b      	str	r3, [r7, #0]
 801307a:	4638      	mov	r0, r7
 801307c:	f000 fb26 	bl	80136cc <__malloc_unlock>
 8013080:	e7a1      	b.n	8012fc6 <_malloc_r+0x22>
 8013082:	6025      	str	r5, [r4, #0]
 8013084:	e7de      	b.n	8013044 <_malloc_r+0xa0>
 8013086:	bf00      	nop
 8013088:	20007cec 	.word	0x20007cec

0801308c <__ssputs_r>:
 801308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013090:	688e      	ldr	r6, [r1, #8]
 8013092:	429e      	cmp	r6, r3
 8013094:	4682      	mov	sl, r0
 8013096:	460c      	mov	r4, r1
 8013098:	4690      	mov	r8, r2
 801309a:	461f      	mov	r7, r3
 801309c:	d838      	bhi.n	8013110 <__ssputs_r+0x84>
 801309e:	898a      	ldrh	r2, [r1, #12]
 80130a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80130a4:	d032      	beq.n	801310c <__ssputs_r+0x80>
 80130a6:	6825      	ldr	r5, [r4, #0]
 80130a8:	6909      	ldr	r1, [r1, #16]
 80130aa:	eba5 0901 	sub.w	r9, r5, r1
 80130ae:	6965      	ldr	r5, [r4, #20]
 80130b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80130b8:	3301      	adds	r3, #1
 80130ba:	444b      	add	r3, r9
 80130bc:	106d      	asrs	r5, r5, #1
 80130be:	429d      	cmp	r5, r3
 80130c0:	bf38      	it	cc
 80130c2:	461d      	movcc	r5, r3
 80130c4:	0553      	lsls	r3, r2, #21
 80130c6:	d531      	bpl.n	801312c <__ssputs_r+0xa0>
 80130c8:	4629      	mov	r1, r5
 80130ca:	f7ff ff6b 	bl	8012fa4 <_malloc_r>
 80130ce:	4606      	mov	r6, r0
 80130d0:	b950      	cbnz	r0, 80130e8 <__ssputs_r+0x5c>
 80130d2:	230c      	movs	r3, #12
 80130d4:	f8ca 3000 	str.w	r3, [sl]
 80130d8:	89a3      	ldrh	r3, [r4, #12]
 80130da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130de:	81a3      	strh	r3, [r4, #12]
 80130e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130e8:	6921      	ldr	r1, [r4, #16]
 80130ea:	464a      	mov	r2, r9
 80130ec:	f7ff fee2 	bl	8012eb4 <memcpy>
 80130f0:	89a3      	ldrh	r3, [r4, #12]
 80130f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80130f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130fa:	81a3      	strh	r3, [r4, #12]
 80130fc:	6126      	str	r6, [r4, #16]
 80130fe:	6165      	str	r5, [r4, #20]
 8013100:	444e      	add	r6, r9
 8013102:	eba5 0509 	sub.w	r5, r5, r9
 8013106:	6026      	str	r6, [r4, #0]
 8013108:	60a5      	str	r5, [r4, #8]
 801310a:	463e      	mov	r6, r7
 801310c:	42be      	cmp	r6, r7
 801310e:	d900      	bls.n	8013112 <__ssputs_r+0x86>
 8013110:	463e      	mov	r6, r7
 8013112:	6820      	ldr	r0, [r4, #0]
 8013114:	4632      	mov	r2, r6
 8013116:	4641      	mov	r1, r8
 8013118:	f000 fab8 	bl	801368c <memmove>
 801311c:	68a3      	ldr	r3, [r4, #8]
 801311e:	1b9b      	subs	r3, r3, r6
 8013120:	60a3      	str	r3, [r4, #8]
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	4433      	add	r3, r6
 8013126:	6023      	str	r3, [r4, #0]
 8013128:	2000      	movs	r0, #0
 801312a:	e7db      	b.n	80130e4 <__ssputs_r+0x58>
 801312c:	462a      	mov	r2, r5
 801312e:	f000 fb1f 	bl	8013770 <_realloc_r>
 8013132:	4606      	mov	r6, r0
 8013134:	2800      	cmp	r0, #0
 8013136:	d1e1      	bne.n	80130fc <__ssputs_r+0x70>
 8013138:	6921      	ldr	r1, [r4, #16]
 801313a:	4650      	mov	r0, sl
 801313c:	f000 facc 	bl	80136d8 <_free_r>
 8013140:	e7c7      	b.n	80130d2 <__ssputs_r+0x46>
	...

08013144 <_svfiprintf_r>:
 8013144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013148:	4698      	mov	r8, r3
 801314a:	898b      	ldrh	r3, [r1, #12]
 801314c:	061b      	lsls	r3, r3, #24
 801314e:	b09d      	sub	sp, #116	; 0x74
 8013150:	4607      	mov	r7, r0
 8013152:	460d      	mov	r5, r1
 8013154:	4614      	mov	r4, r2
 8013156:	d50e      	bpl.n	8013176 <_svfiprintf_r+0x32>
 8013158:	690b      	ldr	r3, [r1, #16]
 801315a:	b963      	cbnz	r3, 8013176 <_svfiprintf_r+0x32>
 801315c:	2140      	movs	r1, #64	; 0x40
 801315e:	f7ff ff21 	bl	8012fa4 <_malloc_r>
 8013162:	6028      	str	r0, [r5, #0]
 8013164:	6128      	str	r0, [r5, #16]
 8013166:	b920      	cbnz	r0, 8013172 <_svfiprintf_r+0x2e>
 8013168:	230c      	movs	r3, #12
 801316a:	603b      	str	r3, [r7, #0]
 801316c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013170:	e0d1      	b.n	8013316 <_svfiprintf_r+0x1d2>
 8013172:	2340      	movs	r3, #64	; 0x40
 8013174:	616b      	str	r3, [r5, #20]
 8013176:	2300      	movs	r3, #0
 8013178:	9309      	str	r3, [sp, #36]	; 0x24
 801317a:	2320      	movs	r3, #32
 801317c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013180:	f8cd 800c 	str.w	r8, [sp, #12]
 8013184:	2330      	movs	r3, #48	; 0x30
 8013186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013330 <_svfiprintf_r+0x1ec>
 801318a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801318e:	f04f 0901 	mov.w	r9, #1
 8013192:	4623      	mov	r3, r4
 8013194:	469a      	mov	sl, r3
 8013196:	f813 2b01 	ldrb.w	r2, [r3], #1
 801319a:	b10a      	cbz	r2, 80131a0 <_svfiprintf_r+0x5c>
 801319c:	2a25      	cmp	r2, #37	; 0x25
 801319e:	d1f9      	bne.n	8013194 <_svfiprintf_r+0x50>
 80131a0:	ebba 0b04 	subs.w	fp, sl, r4
 80131a4:	d00b      	beq.n	80131be <_svfiprintf_r+0x7a>
 80131a6:	465b      	mov	r3, fp
 80131a8:	4622      	mov	r2, r4
 80131aa:	4629      	mov	r1, r5
 80131ac:	4638      	mov	r0, r7
 80131ae:	f7ff ff6d 	bl	801308c <__ssputs_r>
 80131b2:	3001      	adds	r0, #1
 80131b4:	f000 80aa 	beq.w	801330c <_svfiprintf_r+0x1c8>
 80131b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131ba:	445a      	add	r2, fp
 80131bc:	9209      	str	r2, [sp, #36]	; 0x24
 80131be:	f89a 3000 	ldrb.w	r3, [sl]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	f000 80a2 	beq.w	801330c <_svfiprintf_r+0x1c8>
 80131c8:	2300      	movs	r3, #0
 80131ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131d2:	f10a 0a01 	add.w	sl, sl, #1
 80131d6:	9304      	str	r3, [sp, #16]
 80131d8:	9307      	str	r3, [sp, #28]
 80131da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131de:	931a      	str	r3, [sp, #104]	; 0x68
 80131e0:	4654      	mov	r4, sl
 80131e2:	2205      	movs	r2, #5
 80131e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131e8:	4851      	ldr	r0, [pc, #324]	; (8013330 <_svfiprintf_r+0x1ec>)
 80131ea:	f7ed f851 	bl	8000290 <memchr>
 80131ee:	9a04      	ldr	r2, [sp, #16]
 80131f0:	b9d8      	cbnz	r0, 801322a <_svfiprintf_r+0xe6>
 80131f2:	06d0      	lsls	r0, r2, #27
 80131f4:	bf44      	itt	mi
 80131f6:	2320      	movmi	r3, #32
 80131f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131fc:	0711      	lsls	r1, r2, #28
 80131fe:	bf44      	itt	mi
 8013200:	232b      	movmi	r3, #43	; 0x2b
 8013202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013206:	f89a 3000 	ldrb.w	r3, [sl]
 801320a:	2b2a      	cmp	r3, #42	; 0x2a
 801320c:	d015      	beq.n	801323a <_svfiprintf_r+0xf6>
 801320e:	9a07      	ldr	r2, [sp, #28]
 8013210:	4654      	mov	r4, sl
 8013212:	2000      	movs	r0, #0
 8013214:	f04f 0c0a 	mov.w	ip, #10
 8013218:	4621      	mov	r1, r4
 801321a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801321e:	3b30      	subs	r3, #48	; 0x30
 8013220:	2b09      	cmp	r3, #9
 8013222:	d94e      	bls.n	80132c2 <_svfiprintf_r+0x17e>
 8013224:	b1b0      	cbz	r0, 8013254 <_svfiprintf_r+0x110>
 8013226:	9207      	str	r2, [sp, #28]
 8013228:	e014      	b.n	8013254 <_svfiprintf_r+0x110>
 801322a:	eba0 0308 	sub.w	r3, r0, r8
 801322e:	fa09 f303 	lsl.w	r3, r9, r3
 8013232:	4313      	orrs	r3, r2
 8013234:	9304      	str	r3, [sp, #16]
 8013236:	46a2      	mov	sl, r4
 8013238:	e7d2      	b.n	80131e0 <_svfiprintf_r+0x9c>
 801323a:	9b03      	ldr	r3, [sp, #12]
 801323c:	1d19      	adds	r1, r3, #4
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	9103      	str	r1, [sp, #12]
 8013242:	2b00      	cmp	r3, #0
 8013244:	bfbb      	ittet	lt
 8013246:	425b      	neglt	r3, r3
 8013248:	f042 0202 	orrlt.w	r2, r2, #2
 801324c:	9307      	strge	r3, [sp, #28]
 801324e:	9307      	strlt	r3, [sp, #28]
 8013250:	bfb8      	it	lt
 8013252:	9204      	strlt	r2, [sp, #16]
 8013254:	7823      	ldrb	r3, [r4, #0]
 8013256:	2b2e      	cmp	r3, #46	; 0x2e
 8013258:	d10c      	bne.n	8013274 <_svfiprintf_r+0x130>
 801325a:	7863      	ldrb	r3, [r4, #1]
 801325c:	2b2a      	cmp	r3, #42	; 0x2a
 801325e:	d135      	bne.n	80132cc <_svfiprintf_r+0x188>
 8013260:	9b03      	ldr	r3, [sp, #12]
 8013262:	1d1a      	adds	r2, r3, #4
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	9203      	str	r2, [sp, #12]
 8013268:	2b00      	cmp	r3, #0
 801326a:	bfb8      	it	lt
 801326c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013270:	3402      	adds	r4, #2
 8013272:	9305      	str	r3, [sp, #20]
 8013274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013340 <_svfiprintf_r+0x1fc>
 8013278:	7821      	ldrb	r1, [r4, #0]
 801327a:	2203      	movs	r2, #3
 801327c:	4650      	mov	r0, sl
 801327e:	f7ed f807 	bl	8000290 <memchr>
 8013282:	b140      	cbz	r0, 8013296 <_svfiprintf_r+0x152>
 8013284:	2340      	movs	r3, #64	; 0x40
 8013286:	eba0 000a 	sub.w	r0, r0, sl
 801328a:	fa03 f000 	lsl.w	r0, r3, r0
 801328e:	9b04      	ldr	r3, [sp, #16]
 8013290:	4303      	orrs	r3, r0
 8013292:	3401      	adds	r4, #1
 8013294:	9304      	str	r3, [sp, #16]
 8013296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801329a:	4826      	ldr	r0, [pc, #152]	; (8013334 <_svfiprintf_r+0x1f0>)
 801329c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132a0:	2206      	movs	r2, #6
 80132a2:	f7ec fff5 	bl	8000290 <memchr>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d038      	beq.n	801331c <_svfiprintf_r+0x1d8>
 80132aa:	4b23      	ldr	r3, [pc, #140]	; (8013338 <_svfiprintf_r+0x1f4>)
 80132ac:	bb1b      	cbnz	r3, 80132f6 <_svfiprintf_r+0x1b2>
 80132ae:	9b03      	ldr	r3, [sp, #12]
 80132b0:	3307      	adds	r3, #7
 80132b2:	f023 0307 	bic.w	r3, r3, #7
 80132b6:	3308      	adds	r3, #8
 80132b8:	9303      	str	r3, [sp, #12]
 80132ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132bc:	4433      	add	r3, r6
 80132be:	9309      	str	r3, [sp, #36]	; 0x24
 80132c0:	e767      	b.n	8013192 <_svfiprintf_r+0x4e>
 80132c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80132c6:	460c      	mov	r4, r1
 80132c8:	2001      	movs	r0, #1
 80132ca:	e7a5      	b.n	8013218 <_svfiprintf_r+0xd4>
 80132cc:	2300      	movs	r3, #0
 80132ce:	3401      	adds	r4, #1
 80132d0:	9305      	str	r3, [sp, #20]
 80132d2:	4619      	mov	r1, r3
 80132d4:	f04f 0c0a 	mov.w	ip, #10
 80132d8:	4620      	mov	r0, r4
 80132da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132de:	3a30      	subs	r2, #48	; 0x30
 80132e0:	2a09      	cmp	r2, #9
 80132e2:	d903      	bls.n	80132ec <_svfiprintf_r+0x1a8>
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d0c5      	beq.n	8013274 <_svfiprintf_r+0x130>
 80132e8:	9105      	str	r1, [sp, #20]
 80132ea:	e7c3      	b.n	8013274 <_svfiprintf_r+0x130>
 80132ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80132f0:	4604      	mov	r4, r0
 80132f2:	2301      	movs	r3, #1
 80132f4:	e7f0      	b.n	80132d8 <_svfiprintf_r+0x194>
 80132f6:	ab03      	add	r3, sp, #12
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	462a      	mov	r2, r5
 80132fc:	4b0f      	ldr	r3, [pc, #60]	; (801333c <_svfiprintf_r+0x1f8>)
 80132fe:	a904      	add	r1, sp, #16
 8013300:	4638      	mov	r0, r7
 8013302:	f3af 8000 	nop.w
 8013306:	1c42      	adds	r2, r0, #1
 8013308:	4606      	mov	r6, r0
 801330a:	d1d6      	bne.n	80132ba <_svfiprintf_r+0x176>
 801330c:	89ab      	ldrh	r3, [r5, #12]
 801330e:	065b      	lsls	r3, r3, #25
 8013310:	f53f af2c 	bmi.w	801316c <_svfiprintf_r+0x28>
 8013314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013316:	b01d      	add	sp, #116	; 0x74
 8013318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801331c:	ab03      	add	r3, sp, #12
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	462a      	mov	r2, r5
 8013322:	4b06      	ldr	r3, [pc, #24]	; (801333c <_svfiprintf_r+0x1f8>)
 8013324:	a904      	add	r1, sp, #16
 8013326:	4638      	mov	r0, r7
 8013328:	f000 f87a 	bl	8013420 <_printf_i>
 801332c:	e7eb      	b.n	8013306 <_svfiprintf_r+0x1c2>
 801332e:	bf00      	nop
 8013330:	08014374 	.word	0x08014374
 8013334:	0801437e 	.word	0x0801437e
 8013338:	00000000 	.word	0x00000000
 801333c:	0801308d 	.word	0x0801308d
 8013340:	0801437a 	.word	0x0801437a

08013344 <_printf_common>:
 8013344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013348:	4616      	mov	r6, r2
 801334a:	4699      	mov	r9, r3
 801334c:	688a      	ldr	r2, [r1, #8]
 801334e:	690b      	ldr	r3, [r1, #16]
 8013350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013354:	4293      	cmp	r3, r2
 8013356:	bfb8      	it	lt
 8013358:	4613      	movlt	r3, r2
 801335a:	6033      	str	r3, [r6, #0]
 801335c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013360:	4607      	mov	r7, r0
 8013362:	460c      	mov	r4, r1
 8013364:	b10a      	cbz	r2, 801336a <_printf_common+0x26>
 8013366:	3301      	adds	r3, #1
 8013368:	6033      	str	r3, [r6, #0]
 801336a:	6823      	ldr	r3, [r4, #0]
 801336c:	0699      	lsls	r1, r3, #26
 801336e:	bf42      	ittt	mi
 8013370:	6833      	ldrmi	r3, [r6, #0]
 8013372:	3302      	addmi	r3, #2
 8013374:	6033      	strmi	r3, [r6, #0]
 8013376:	6825      	ldr	r5, [r4, #0]
 8013378:	f015 0506 	ands.w	r5, r5, #6
 801337c:	d106      	bne.n	801338c <_printf_common+0x48>
 801337e:	f104 0a19 	add.w	sl, r4, #25
 8013382:	68e3      	ldr	r3, [r4, #12]
 8013384:	6832      	ldr	r2, [r6, #0]
 8013386:	1a9b      	subs	r3, r3, r2
 8013388:	42ab      	cmp	r3, r5
 801338a:	dc26      	bgt.n	80133da <_printf_common+0x96>
 801338c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013390:	1e13      	subs	r3, r2, #0
 8013392:	6822      	ldr	r2, [r4, #0]
 8013394:	bf18      	it	ne
 8013396:	2301      	movne	r3, #1
 8013398:	0692      	lsls	r2, r2, #26
 801339a:	d42b      	bmi.n	80133f4 <_printf_common+0xb0>
 801339c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80133a0:	4649      	mov	r1, r9
 80133a2:	4638      	mov	r0, r7
 80133a4:	47c0      	blx	r8
 80133a6:	3001      	adds	r0, #1
 80133a8:	d01e      	beq.n	80133e8 <_printf_common+0xa4>
 80133aa:	6823      	ldr	r3, [r4, #0]
 80133ac:	68e5      	ldr	r5, [r4, #12]
 80133ae:	6832      	ldr	r2, [r6, #0]
 80133b0:	f003 0306 	and.w	r3, r3, #6
 80133b4:	2b04      	cmp	r3, #4
 80133b6:	bf08      	it	eq
 80133b8:	1aad      	subeq	r5, r5, r2
 80133ba:	68a3      	ldr	r3, [r4, #8]
 80133bc:	6922      	ldr	r2, [r4, #16]
 80133be:	bf0c      	ite	eq
 80133c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80133c4:	2500      	movne	r5, #0
 80133c6:	4293      	cmp	r3, r2
 80133c8:	bfc4      	itt	gt
 80133ca:	1a9b      	subgt	r3, r3, r2
 80133cc:	18ed      	addgt	r5, r5, r3
 80133ce:	2600      	movs	r6, #0
 80133d0:	341a      	adds	r4, #26
 80133d2:	42b5      	cmp	r5, r6
 80133d4:	d11a      	bne.n	801340c <_printf_common+0xc8>
 80133d6:	2000      	movs	r0, #0
 80133d8:	e008      	b.n	80133ec <_printf_common+0xa8>
 80133da:	2301      	movs	r3, #1
 80133dc:	4652      	mov	r2, sl
 80133de:	4649      	mov	r1, r9
 80133e0:	4638      	mov	r0, r7
 80133e2:	47c0      	blx	r8
 80133e4:	3001      	adds	r0, #1
 80133e6:	d103      	bne.n	80133f0 <_printf_common+0xac>
 80133e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f0:	3501      	adds	r5, #1
 80133f2:	e7c6      	b.n	8013382 <_printf_common+0x3e>
 80133f4:	18e1      	adds	r1, r4, r3
 80133f6:	1c5a      	adds	r2, r3, #1
 80133f8:	2030      	movs	r0, #48	; 0x30
 80133fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80133fe:	4422      	add	r2, r4
 8013400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013408:	3302      	adds	r3, #2
 801340a:	e7c7      	b.n	801339c <_printf_common+0x58>
 801340c:	2301      	movs	r3, #1
 801340e:	4622      	mov	r2, r4
 8013410:	4649      	mov	r1, r9
 8013412:	4638      	mov	r0, r7
 8013414:	47c0      	blx	r8
 8013416:	3001      	adds	r0, #1
 8013418:	d0e6      	beq.n	80133e8 <_printf_common+0xa4>
 801341a:	3601      	adds	r6, #1
 801341c:	e7d9      	b.n	80133d2 <_printf_common+0x8e>
	...

08013420 <_printf_i>:
 8013420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013424:	7e0f      	ldrb	r7, [r1, #24]
 8013426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013428:	2f78      	cmp	r7, #120	; 0x78
 801342a:	4691      	mov	r9, r2
 801342c:	4680      	mov	r8, r0
 801342e:	460c      	mov	r4, r1
 8013430:	469a      	mov	sl, r3
 8013432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013436:	d807      	bhi.n	8013448 <_printf_i+0x28>
 8013438:	2f62      	cmp	r7, #98	; 0x62
 801343a:	d80a      	bhi.n	8013452 <_printf_i+0x32>
 801343c:	2f00      	cmp	r7, #0
 801343e:	f000 80d8 	beq.w	80135f2 <_printf_i+0x1d2>
 8013442:	2f58      	cmp	r7, #88	; 0x58
 8013444:	f000 80a3 	beq.w	801358e <_printf_i+0x16e>
 8013448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801344c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013450:	e03a      	b.n	80134c8 <_printf_i+0xa8>
 8013452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013456:	2b15      	cmp	r3, #21
 8013458:	d8f6      	bhi.n	8013448 <_printf_i+0x28>
 801345a:	a101      	add	r1, pc, #4	; (adr r1, 8013460 <_printf_i+0x40>)
 801345c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013460:	080134b9 	.word	0x080134b9
 8013464:	080134cd 	.word	0x080134cd
 8013468:	08013449 	.word	0x08013449
 801346c:	08013449 	.word	0x08013449
 8013470:	08013449 	.word	0x08013449
 8013474:	08013449 	.word	0x08013449
 8013478:	080134cd 	.word	0x080134cd
 801347c:	08013449 	.word	0x08013449
 8013480:	08013449 	.word	0x08013449
 8013484:	08013449 	.word	0x08013449
 8013488:	08013449 	.word	0x08013449
 801348c:	080135d9 	.word	0x080135d9
 8013490:	080134fd 	.word	0x080134fd
 8013494:	080135bb 	.word	0x080135bb
 8013498:	08013449 	.word	0x08013449
 801349c:	08013449 	.word	0x08013449
 80134a0:	080135fb 	.word	0x080135fb
 80134a4:	08013449 	.word	0x08013449
 80134a8:	080134fd 	.word	0x080134fd
 80134ac:	08013449 	.word	0x08013449
 80134b0:	08013449 	.word	0x08013449
 80134b4:	080135c3 	.word	0x080135c3
 80134b8:	682b      	ldr	r3, [r5, #0]
 80134ba:	1d1a      	adds	r2, r3, #4
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	602a      	str	r2, [r5, #0]
 80134c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134c8:	2301      	movs	r3, #1
 80134ca:	e0a3      	b.n	8013614 <_printf_i+0x1f4>
 80134cc:	6820      	ldr	r0, [r4, #0]
 80134ce:	6829      	ldr	r1, [r5, #0]
 80134d0:	0606      	lsls	r6, r0, #24
 80134d2:	f101 0304 	add.w	r3, r1, #4
 80134d6:	d50a      	bpl.n	80134ee <_printf_i+0xce>
 80134d8:	680e      	ldr	r6, [r1, #0]
 80134da:	602b      	str	r3, [r5, #0]
 80134dc:	2e00      	cmp	r6, #0
 80134de:	da03      	bge.n	80134e8 <_printf_i+0xc8>
 80134e0:	232d      	movs	r3, #45	; 0x2d
 80134e2:	4276      	negs	r6, r6
 80134e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134e8:	485e      	ldr	r0, [pc, #376]	; (8013664 <_printf_i+0x244>)
 80134ea:	230a      	movs	r3, #10
 80134ec:	e019      	b.n	8013522 <_printf_i+0x102>
 80134ee:	680e      	ldr	r6, [r1, #0]
 80134f0:	602b      	str	r3, [r5, #0]
 80134f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80134f6:	bf18      	it	ne
 80134f8:	b236      	sxthne	r6, r6
 80134fa:	e7ef      	b.n	80134dc <_printf_i+0xbc>
 80134fc:	682b      	ldr	r3, [r5, #0]
 80134fe:	6820      	ldr	r0, [r4, #0]
 8013500:	1d19      	adds	r1, r3, #4
 8013502:	6029      	str	r1, [r5, #0]
 8013504:	0601      	lsls	r1, r0, #24
 8013506:	d501      	bpl.n	801350c <_printf_i+0xec>
 8013508:	681e      	ldr	r6, [r3, #0]
 801350a:	e002      	b.n	8013512 <_printf_i+0xf2>
 801350c:	0646      	lsls	r6, r0, #25
 801350e:	d5fb      	bpl.n	8013508 <_printf_i+0xe8>
 8013510:	881e      	ldrh	r6, [r3, #0]
 8013512:	4854      	ldr	r0, [pc, #336]	; (8013664 <_printf_i+0x244>)
 8013514:	2f6f      	cmp	r7, #111	; 0x6f
 8013516:	bf0c      	ite	eq
 8013518:	2308      	moveq	r3, #8
 801351a:	230a      	movne	r3, #10
 801351c:	2100      	movs	r1, #0
 801351e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013522:	6865      	ldr	r5, [r4, #4]
 8013524:	60a5      	str	r5, [r4, #8]
 8013526:	2d00      	cmp	r5, #0
 8013528:	bfa2      	ittt	ge
 801352a:	6821      	ldrge	r1, [r4, #0]
 801352c:	f021 0104 	bicge.w	r1, r1, #4
 8013530:	6021      	strge	r1, [r4, #0]
 8013532:	b90e      	cbnz	r6, 8013538 <_printf_i+0x118>
 8013534:	2d00      	cmp	r5, #0
 8013536:	d04d      	beq.n	80135d4 <_printf_i+0x1b4>
 8013538:	4615      	mov	r5, r2
 801353a:	fbb6 f1f3 	udiv	r1, r6, r3
 801353e:	fb03 6711 	mls	r7, r3, r1, r6
 8013542:	5dc7      	ldrb	r7, [r0, r7]
 8013544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013548:	4637      	mov	r7, r6
 801354a:	42bb      	cmp	r3, r7
 801354c:	460e      	mov	r6, r1
 801354e:	d9f4      	bls.n	801353a <_printf_i+0x11a>
 8013550:	2b08      	cmp	r3, #8
 8013552:	d10b      	bne.n	801356c <_printf_i+0x14c>
 8013554:	6823      	ldr	r3, [r4, #0]
 8013556:	07de      	lsls	r6, r3, #31
 8013558:	d508      	bpl.n	801356c <_printf_i+0x14c>
 801355a:	6923      	ldr	r3, [r4, #16]
 801355c:	6861      	ldr	r1, [r4, #4]
 801355e:	4299      	cmp	r1, r3
 8013560:	bfde      	ittt	le
 8013562:	2330      	movle	r3, #48	; 0x30
 8013564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013568:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801356c:	1b52      	subs	r2, r2, r5
 801356e:	6122      	str	r2, [r4, #16]
 8013570:	f8cd a000 	str.w	sl, [sp]
 8013574:	464b      	mov	r3, r9
 8013576:	aa03      	add	r2, sp, #12
 8013578:	4621      	mov	r1, r4
 801357a:	4640      	mov	r0, r8
 801357c:	f7ff fee2 	bl	8013344 <_printf_common>
 8013580:	3001      	adds	r0, #1
 8013582:	d14c      	bne.n	801361e <_printf_i+0x1fe>
 8013584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013588:	b004      	add	sp, #16
 801358a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801358e:	4835      	ldr	r0, [pc, #212]	; (8013664 <_printf_i+0x244>)
 8013590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013594:	6829      	ldr	r1, [r5, #0]
 8013596:	6823      	ldr	r3, [r4, #0]
 8013598:	f851 6b04 	ldr.w	r6, [r1], #4
 801359c:	6029      	str	r1, [r5, #0]
 801359e:	061d      	lsls	r5, r3, #24
 80135a0:	d514      	bpl.n	80135cc <_printf_i+0x1ac>
 80135a2:	07df      	lsls	r7, r3, #31
 80135a4:	bf44      	itt	mi
 80135a6:	f043 0320 	orrmi.w	r3, r3, #32
 80135aa:	6023      	strmi	r3, [r4, #0]
 80135ac:	b91e      	cbnz	r6, 80135b6 <_printf_i+0x196>
 80135ae:	6823      	ldr	r3, [r4, #0]
 80135b0:	f023 0320 	bic.w	r3, r3, #32
 80135b4:	6023      	str	r3, [r4, #0]
 80135b6:	2310      	movs	r3, #16
 80135b8:	e7b0      	b.n	801351c <_printf_i+0xfc>
 80135ba:	6823      	ldr	r3, [r4, #0]
 80135bc:	f043 0320 	orr.w	r3, r3, #32
 80135c0:	6023      	str	r3, [r4, #0]
 80135c2:	2378      	movs	r3, #120	; 0x78
 80135c4:	4828      	ldr	r0, [pc, #160]	; (8013668 <_printf_i+0x248>)
 80135c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80135ca:	e7e3      	b.n	8013594 <_printf_i+0x174>
 80135cc:	0659      	lsls	r1, r3, #25
 80135ce:	bf48      	it	mi
 80135d0:	b2b6      	uxthmi	r6, r6
 80135d2:	e7e6      	b.n	80135a2 <_printf_i+0x182>
 80135d4:	4615      	mov	r5, r2
 80135d6:	e7bb      	b.n	8013550 <_printf_i+0x130>
 80135d8:	682b      	ldr	r3, [r5, #0]
 80135da:	6826      	ldr	r6, [r4, #0]
 80135dc:	6961      	ldr	r1, [r4, #20]
 80135de:	1d18      	adds	r0, r3, #4
 80135e0:	6028      	str	r0, [r5, #0]
 80135e2:	0635      	lsls	r5, r6, #24
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	d501      	bpl.n	80135ec <_printf_i+0x1cc>
 80135e8:	6019      	str	r1, [r3, #0]
 80135ea:	e002      	b.n	80135f2 <_printf_i+0x1d2>
 80135ec:	0670      	lsls	r0, r6, #25
 80135ee:	d5fb      	bpl.n	80135e8 <_printf_i+0x1c8>
 80135f0:	8019      	strh	r1, [r3, #0]
 80135f2:	2300      	movs	r3, #0
 80135f4:	6123      	str	r3, [r4, #16]
 80135f6:	4615      	mov	r5, r2
 80135f8:	e7ba      	b.n	8013570 <_printf_i+0x150>
 80135fa:	682b      	ldr	r3, [r5, #0]
 80135fc:	1d1a      	adds	r2, r3, #4
 80135fe:	602a      	str	r2, [r5, #0]
 8013600:	681d      	ldr	r5, [r3, #0]
 8013602:	6862      	ldr	r2, [r4, #4]
 8013604:	2100      	movs	r1, #0
 8013606:	4628      	mov	r0, r5
 8013608:	f7ec fe42 	bl	8000290 <memchr>
 801360c:	b108      	cbz	r0, 8013612 <_printf_i+0x1f2>
 801360e:	1b40      	subs	r0, r0, r5
 8013610:	6060      	str	r0, [r4, #4]
 8013612:	6863      	ldr	r3, [r4, #4]
 8013614:	6123      	str	r3, [r4, #16]
 8013616:	2300      	movs	r3, #0
 8013618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801361c:	e7a8      	b.n	8013570 <_printf_i+0x150>
 801361e:	6923      	ldr	r3, [r4, #16]
 8013620:	462a      	mov	r2, r5
 8013622:	4649      	mov	r1, r9
 8013624:	4640      	mov	r0, r8
 8013626:	47d0      	blx	sl
 8013628:	3001      	adds	r0, #1
 801362a:	d0ab      	beq.n	8013584 <_printf_i+0x164>
 801362c:	6823      	ldr	r3, [r4, #0]
 801362e:	079b      	lsls	r3, r3, #30
 8013630:	d413      	bmi.n	801365a <_printf_i+0x23a>
 8013632:	68e0      	ldr	r0, [r4, #12]
 8013634:	9b03      	ldr	r3, [sp, #12]
 8013636:	4298      	cmp	r0, r3
 8013638:	bfb8      	it	lt
 801363a:	4618      	movlt	r0, r3
 801363c:	e7a4      	b.n	8013588 <_printf_i+0x168>
 801363e:	2301      	movs	r3, #1
 8013640:	4632      	mov	r2, r6
 8013642:	4649      	mov	r1, r9
 8013644:	4640      	mov	r0, r8
 8013646:	47d0      	blx	sl
 8013648:	3001      	adds	r0, #1
 801364a:	d09b      	beq.n	8013584 <_printf_i+0x164>
 801364c:	3501      	adds	r5, #1
 801364e:	68e3      	ldr	r3, [r4, #12]
 8013650:	9903      	ldr	r1, [sp, #12]
 8013652:	1a5b      	subs	r3, r3, r1
 8013654:	42ab      	cmp	r3, r5
 8013656:	dcf2      	bgt.n	801363e <_printf_i+0x21e>
 8013658:	e7eb      	b.n	8013632 <_printf_i+0x212>
 801365a:	2500      	movs	r5, #0
 801365c:	f104 0619 	add.w	r6, r4, #25
 8013660:	e7f5      	b.n	801364e <_printf_i+0x22e>
 8013662:	bf00      	nop
 8013664:	08014385 	.word	0x08014385
 8013668:	08014396 	.word	0x08014396

0801366c <_sbrk_r>:
 801366c:	b538      	push	{r3, r4, r5, lr}
 801366e:	4d06      	ldr	r5, [pc, #24]	; (8013688 <_sbrk_r+0x1c>)
 8013670:	2300      	movs	r3, #0
 8013672:	4604      	mov	r4, r0
 8013674:	4608      	mov	r0, r1
 8013676:	602b      	str	r3, [r5, #0]
 8013678:	f000 f8b2 	bl	80137e0 <_sbrk>
 801367c:	1c43      	adds	r3, r0, #1
 801367e:	d102      	bne.n	8013686 <_sbrk_r+0x1a>
 8013680:	682b      	ldr	r3, [r5, #0]
 8013682:	b103      	cbz	r3, 8013686 <_sbrk_r+0x1a>
 8013684:	6023      	str	r3, [r4, #0]
 8013686:	bd38      	pop	{r3, r4, r5, pc}
 8013688:	20007cf4 	.word	0x20007cf4

0801368c <memmove>:
 801368c:	4288      	cmp	r0, r1
 801368e:	b510      	push	{r4, lr}
 8013690:	eb01 0402 	add.w	r4, r1, r2
 8013694:	d902      	bls.n	801369c <memmove+0x10>
 8013696:	4284      	cmp	r4, r0
 8013698:	4623      	mov	r3, r4
 801369a:	d807      	bhi.n	80136ac <memmove+0x20>
 801369c:	1e43      	subs	r3, r0, #1
 801369e:	42a1      	cmp	r1, r4
 80136a0:	d008      	beq.n	80136b4 <memmove+0x28>
 80136a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80136aa:	e7f8      	b.n	801369e <memmove+0x12>
 80136ac:	4402      	add	r2, r0
 80136ae:	4601      	mov	r1, r0
 80136b0:	428a      	cmp	r2, r1
 80136b2:	d100      	bne.n	80136b6 <memmove+0x2a>
 80136b4:	bd10      	pop	{r4, pc}
 80136b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80136be:	e7f7      	b.n	80136b0 <memmove+0x24>

080136c0 <__malloc_lock>:
 80136c0:	4801      	ldr	r0, [pc, #4]	; (80136c8 <__malloc_lock+0x8>)
 80136c2:	f7ff bc4d 	b.w	8012f60 <__retarget_lock_acquire_recursive>
 80136c6:	bf00      	nop
 80136c8:	20007ce9 	.word	0x20007ce9

080136cc <__malloc_unlock>:
 80136cc:	4801      	ldr	r0, [pc, #4]	; (80136d4 <__malloc_unlock+0x8>)
 80136ce:	f7ff bc48 	b.w	8012f62 <__retarget_lock_release_recursive>
 80136d2:	bf00      	nop
 80136d4:	20007ce9 	.word	0x20007ce9

080136d8 <_free_r>:
 80136d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136da:	2900      	cmp	r1, #0
 80136dc:	d044      	beq.n	8013768 <_free_r+0x90>
 80136de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136e2:	9001      	str	r0, [sp, #4]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f1a1 0404 	sub.w	r4, r1, #4
 80136ea:	bfb8      	it	lt
 80136ec:	18e4      	addlt	r4, r4, r3
 80136ee:	f7ff ffe7 	bl	80136c0 <__malloc_lock>
 80136f2:	4a1e      	ldr	r2, [pc, #120]	; (801376c <_free_r+0x94>)
 80136f4:	9801      	ldr	r0, [sp, #4]
 80136f6:	6813      	ldr	r3, [r2, #0]
 80136f8:	b933      	cbnz	r3, 8013708 <_free_r+0x30>
 80136fa:	6063      	str	r3, [r4, #4]
 80136fc:	6014      	str	r4, [r2, #0]
 80136fe:	b003      	add	sp, #12
 8013700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013704:	f7ff bfe2 	b.w	80136cc <__malloc_unlock>
 8013708:	42a3      	cmp	r3, r4
 801370a:	d908      	bls.n	801371e <_free_r+0x46>
 801370c:	6825      	ldr	r5, [r4, #0]
 801370e:	1961      	adds	r1, r4, r5
 8013710:	428b      	cmp	r3, r1
 8013712:	bf01      	itttt	eq
 8013714:	6819      	ldreq	r1, [r3, #0]
 8013716:	685b      	ldreq	r3, [r3, #4]
 8013718:	1949      	addeq	r1, r1, r5
 801371a:	6021      	streq	r1, [r4, #0]
 801371c:	e7ed      	b.n	80136fa <_free_r+0x22>
 801371e:	461a      	mov	r2, r3
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	b10b      	cbz	r3, 8013728 <_free_r+0x50>
 8013724:	42a3      	cmp	r3, r4
 8013726:	d9fa      	bls.n	801371e <_free_r+0x46>
 8013728:	6811      	ldr	r1, [r2, #0]
 801372a:	1855      	adds	r5, r2, r1
 801372c:	42a5      	cmp	r5, r4
 801372e:	d10b      	bne.n	8013748 <_free_r+0x70>
 8013730:	6824      	ldr	r4, [r4, #0]
 8013732:	4421      	add	r1, r4
 8013734:	1854      	adds	r4, r2, r1
 8013736:	42a3      	cmp	r3, r4
 8013738:	6011      	str	r1, [r2, #0]
 801373a:	d1e0      	bne.n	80136fe <_free_r+0x26>
 801373c:	681c      	ldr	r4, [r3, #0]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	6053      	str	r3, [r2, #4]
 8013742:	4421      	add	r1, r4
 8013744:	6011      	str	r1, [r2, #0]
 8013746:	e7da      	b.n	80136fe <_free_r+0x26>
 8013748:	d902      	bls.n	8013750 <_free_r+0x78>
 801374a:	230c      	movs	r3, #12
 801374c:	6003      	str	r3, [r0, #0]
 801374e:	e7d6      	b.n	80136fe <_free_r+0x26>
 8013750:	6825      	ldr	r5, [r4, #0]
 8013752:	1961      	adds	r1, r4, r5
 8013754:	428b      	cmp	r3, r1
 8013756:	bf04      	itt	eq
 8013758:	6819      	ldreq	r1, [r3, #0]
 801375a:	685b      	ldreq	r3, [r3, #4]
 801375c:	6063      	str	r3, [r4, #4]
 801375e:	bf04      	itt	eq
 8013760:	1949      	addeq	r1, r1, r5
 8013762:	6021      	streq	r1, [r4, #0]
 8013764:	6054      	str	r4, [r2, #4]
 8013766:	e7ca      	b.n	80136fe <_free_r+0x26>
 8013768:	b003      	add	sp, #12
 801376a:	bd30      	pop	{r4, r5, pc}
 801376c:	20007cec 	.word	0x20007cec

08013770 <_realloc_r>:
 8013770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013774:	4680      	mov	r8, r0
 8013776:	4614      	mov	r4, r2
 8013778:	460e      	mov	r6, r1
 801377a:	b921      	cbnz	r1, 8013786 <_realloc_r+0x16>
 801377c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013780:	4611      	mov	r1, r2
 8013782:	f7ff bc0f 	b.w	8012fa4 <_malloc_r>
 8013786:	b92a      	cbnz	r2, 8013794 <_realloc_r+0x24>
 8013788:	f7ff ffa6 	bl	80136d8 <_free_r>
 801378c:	4625      	mov	r5, r4
 801378e:	4628      	mov	r0, r5
 8013790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013794:	f000 f81b 	bl	80137ce <_malloc_usable_size_r>
 8013798:	4284      	cmp	r4, r0
 801379a:	4607      	mov	r7, r0
 801379c:	d802      	bhi.n	80137a4 <_realloc_r+0x34>
 801379e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80137a2:	d812      	bhi.n	80137ca <_realloc_r+0x5a>
 80137a4:	4621      	mov	r1, r4
 80137a6:	4640      	mov	r0, r8
 80137a8:	f7ff fbfc 	bl	8012fa4 <_malloc_r>
 80137ac:	4605      	mov	r5, r0
 80137ae:	2800      	cmp	r0, #0
 80137b0:	d0ed      	beq.n	801378e <_realloc_r+0x1e>
 80137b2:	42bc      	cmp	r4, r7
 80137b4:	4622      	mov	r2, r4
 80137b6:	4631      	mov	r1, r6
 80137b8:	bf28      	it	cs
 80137ba:	463a      	movcs	r2, r7
 80137bc:	f7ff fb7a 	bl	8012eb4 <memcpy>
 80137c0:	4631      	mov	r1, r6
 80137c2:	4640      	mov	r0, r8
 80137c4:	f7ff ff88 	bl	80136d8 <_free_r>
 80137c8:	e7e1      	b.n	801378e <_realloc_r+0x1e>
 80137ca:	4635      	mov	r5, r6
 80137cc:	e7df      	b.n	801378e <_realloc_r+0x1e>

080137ce <_malloc_usable_size_r>:
 80137ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137d2:	1f18      	subs	r0, r3, #4
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	bfbc      	itt	lt
 80137d8:	580b      	ldrlt	r3, [r1, r0]
 80137da:	18c0      	addlt	r0, r0, r3
 80137dc:	4770      	bx	lr
	...

080137e0 <_sbrk>:
 80137e0:	4a04      	ldr	r2, [pc, #16]	; (80137f4 <_sbrk+0x14>)
 80137e2:	6811      	ldr	r1, [r2, #0]
 80137e4:	4603      	mov	r3, r0
 80137e6:	b909      	cbnz	r1, 80137ec <_sbrk+0xc>
 80137e8:	4903      	ldr	r1, [pc, #12]	; (80137f8 <_sbrk+0x18>)
 80137ea:	6011      	str	r1, [r2, #0]
 80137ec:	6810      	ldr	r0, [r2, #0]
 80137ee:	4403      	add	r3, r0
 80137f0:	6013      	str	r3, [r2, #0]
 80137f2:	4770      	bx	lr
 80137f4:	20007cf8 	.word	0x20007cf8
 80137f8:	20007d00 	.word	0x20007d00

080137fc <_init>:
 80137fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137fe:	bf00      	nop
 8013800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013802:	bc08      	pop	{r3}
 8013804:	469e      	mov	lr, r3
 8013806:	4770      	bx	lr

08013808 <_fini>:
 8013808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380a:	bf00      	nop
 801380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801380e:	bc08      	pop	{r3}
 8013810:	469e      	mov	lr, r3
 8013812:	4770      	bx	lr
