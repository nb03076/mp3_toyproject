
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  08013cd4  08013cd4  00023cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014868  08014868  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08014868  08014868  00024868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014870  08014870  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014870  08014870  00024870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014874  08014874  00024874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08014878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00007c88  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007d04  20007d04  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004af5f  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009508  00000000  00000000  0007b00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000046d8  00000000  00000000  00084518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004228  00000000  00000000  00088bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003495d  00000000  00000000  0008ce18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000425dd  00000000  00000000  000c1775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d315  00000000  00000000  00103d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00221067  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00013244  00000000  00000000  002210b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  002342fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013cbc 	.word	0x08013cbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08013cbc 	.word	0x08013cbc

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20002f7c 	.word	0x20002f7c
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <ds3231_register_driver>:
static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size);

static inline uint8_t B2D(uint8_t bcd);
static inline uint8_t D2B(uint8_t decimal);

void ds3231_register_driver(i2cdrv_t* drv) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	ds3231i2cdrv = drv;
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <ds3231_register_driver+0x1c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000098 	.word	0x20000098

08000654 <ds3231_get_time>:

bool ds3231_get_time(ds3231_time_t *info) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t data[7];

	if(ds3231_read_reg(DS3231_REG_SEC, data, 7) != true) {
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2207      	movs	r2, #7
 8000662:	4619      	mov	r1, r3
 8000664:	2000      	movs	r0, #0
 8000666:	f000 f85d 	bl	8000724 <ds3231_read_reg>
 800066a:	4603      	mov	r3, r0
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d004      	beq.n	8000680 <ds3231_get_time+0x2c>
		hal_cli_printf("ds3231 read register failed");
 8000676:	482a      	ldr	r0, [pc, #168]	; (8000720 <ds3231_get_time+0xcc>)
 8000678:	f00e fc38 	bl	800eeec <hal_cli_printf>
		return false;
 800067c:	2300      	movs	r3, #0
 800067e:	e04a      	b.n	8000716 <ds3231_get_time+0xc2>
	}

	info->sec = B2D(data[0] & 0x7F);
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f865 	bl	8000758 <B2D>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	701a      	strb	r2, [r3, #0]
	info->min = B2D(data[1] & 0x7F);
 8000696:	7a7b      	ldrb	r3, [r7, #9]
 8000698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f85a 	bl	8000758 <B2D>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	705a      	strb	r2, [r3, #1]
	info->hour = B2D(data[2] & 0x3F);
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f84f 	bl	8000758 <B2D>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	709a      	strb	r2, [r3, #2]
	info->day = B2D(data[3] & 0x07);
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f844 	bl	8000758 <B2D>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	70da      	strb	r2, [r3, #3]
	info->date = B2D(data[4] & 0x3F);
 80006d8:	7b3b      	ldrb	r3, [r7, #12]
 80006da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f839 	bl	8000758 <B2D>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	711a      	strb	r2, [r3, #4]
	info->month = B2D(data[5] & 0x1F);
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f82e 	bl	8000758 <B2D>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	715a      	strb	r2, [r3, #5]
	info->year = B2D(data[6] & 0xFF);
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f826 	bl	8000758 <B2D>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	719a      	strb	r2, [r3, #6]

	return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08013cd4 	.word	0x08013cd4

08000724 <ds3231_read_reg>:
		hal_cli_printf("ds3231 day to string argument error");
		return 0;
	}
}

static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af02      	add	r7, sp, #8
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	73fb      	strb	r3, [r7, #15]
	return hal_i2c_receive(
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ds3231_read_reg+0x30>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	7bfa      	ldrb	r2, [r7, #15]
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	21d0      	movs	r1, #208	; 0xd0
 8000744:	f010 f924 	bl	8010990 <hal_i2c_receive>
 8000748:	4603      	mov	r3, r0
			DS3231_DEV_ADDR,
			reg,
			data,
			size,
			DS3231_I2C_TIMEOUT);
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000098 	.word	0x20000098

08000758 <B2D>:

static inline uint8_t B2D(uint8_t bcd) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	091b      	lsrs	r3, r3, #4
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4413      	add	r3, r2
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <icon_draw_play>:

const uint8_t icon_pause[] = {
		0x00, 0x24, 0x3c, 0x3c, 0x3c, 0x3c, 0x24, 0x00
};

void icon_draw_play(u8g2_t* handle, u8g2_uint_t x, u8g2_uint_t y) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
 8000798:	4613      	mov	r3, r2
 800079a:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(handle,1);
 800079c:	2101      	movs	r1, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f00d fb7a 	bl	800de98 <u8g2_SetDrawColor>
    u8g2_SetBitmapMode(handle,1);
 80007a4:	2101      	movs	r1, #1
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f00d f8c5 	bl	800d936 <u8g2_SetBitmapMode>
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_play);
 80007ac:	78ba      	ldrb	r2, [r7, #2]
 80007ae:	78f9      	ldrb	r1, [r7, #3]
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <icon_draw_play+0x44>)
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	2308      	movs	r3, #8
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f00d f939 	bl	800da32 <u8g2_DrawBitmap>
    u8g2_SendBuffer(handle);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f00d f9e9 	bl	800db98 <u8g2_SendBuffer>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	080141d0 	.word	0x080141d0

080007d4 <icon_draw_pause>:

void icon_draw_pause(u8g2_t* handle, u8g2_uint_t x, u8g2_uint_t y) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(handle,1);
 80007e4:	2101      	movs	r1, #1
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f00d fb56 	bl	800de98 <u8g2_SetDrawColor>
    u8g2_SetBitmapMode(handle,1);
 80007ec:	2101      	movs	r1, #1
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f00d f8a1 	bl	800d936 <u8g2_SetBitmapMode>
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_pause);
 80007f4:	78ba      	ldrb	r2, [r7, #2]
 80007f6:	78f9      	ldrb	r1, [r7, #3]
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <icon_draw_pause+0x44>)
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2308      	movs	r3, #8
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f00d f915 	bl	800da32 <u8g2_DrawBitmap>
    u8g2_SendBuffer(handle);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f00d f9c5 	bl	800db98 <u8g2_SendBuffer>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	080141d8 	.word	0x080141d8

0800081c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	619a      	str	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	041a      	lsls	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	619a      	str	r2, [r3, #24]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <u8x8_stm32_gpio_and_delay>:
#define SSD1306_TIMEOUT		100
#define SSD1306_SPIDRV		&spi2drv

// u8g2 gpio & delay control callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	72fb      	strb	r3, [r7, #11]
 8000866:	4613      	mov	r3, r2
 8000868:	72bb      	strb	r3, [r7, #10]
  /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
  switch(msg)
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	3b28      	subs	r3, #40	; 0x28
 800086e:	2b23      	cmp	r3, #35	; 0x23
 8000870:	d87a      	bhi.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <u8x8_stm32_gpio_and_delay+0x20>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000969 	.word	0x08000969
 800087c:	08000909 	.word	0x08000909
 8000880:	08000969 	.word	0x08000969
 8000884:	08000969 	.word	0x08000969
 8000888:	08000969 	.word	0x08000969
 800088c:	08000969 	.word	0x08000969
 8000890:	08000969 	.word	0x08000969
 8000894:	08000969 	.word	0x08000969
 8000898:	08000969 	.word	0x08000969
 800089c:	08000969 	.word	0x08000969
 80008a0:	08000969 	.word	0x08000969
 80008a4:	08000969 	.word	0x08000969
 80008a8:	08000969 	.word	0x08000969
 80008ac:	08000969 	.word	0x08000969
 80008b0:	08000969 	.word	0x08000969
 80008b4:	08000969 	.word	0x08000969
 80008b8:	08000969 	.word	0x08000969
 80008bc:	08000969 	.word	0x08000969
 80008c0:	08000969 	.word	0x08000969
 80008c4:	08000969 	.word	0x08000969
 80008c8:	08000969 	.word	0x08000969
 80008cc:	08000969 	.word	0x08000969
 80008d0:	08000969 	.word	0x08000969
 80008d4:	08000969 	.word	0x08000969
 80008d8:	08000969 	.word	0x08000969
 80008dc:	08000969 	.word	0x08000969
 80008e0:	08000969 	.word	0x08000969
 80008e4:	08000969 	.word	0x08000969
 80008e8:	08000969 	.word	0x08000969
 80008ec:	08000969 	.word	0x08000969
 80008f0:	08000969 	.word	0x08000969
 80008f4:	08000969 	.word	0x08000969
 80008f8:	08000969 	.word	0x08000969
 80008fc:	0800091b 	.word	0x0800091b
 8000900:	08000935 	.word	0x08000935
 8000904:	0800094f 	.word	0x0800094f
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    /* Insert codes for initialization */
    break;
  case U8X8_MSG_DELAY_MILLI:
    /* ms Delay */
	hal_delay_us(10*arg_int);
 8000908:	7aba      	ldrb	r2, [r7, #10]
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f00e fda6 	bl	800f464 <hal_delay_us>
    break;
 8000918:	e026      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_CS:
    /* Insert codes for SS pin control */
    if(arg_int) {
 800091a:	7abb      	ldrb	r3, [r7, #10]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d004      	beq.n	800092a <u8x8_stm32_gpio_and_delay+0xd2>
      LL_GPIO_SetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000920:	2104      	movs	r1, #4
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000924:	f7ff ff7a 	bl	800081c <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
    }
    break;
 8000928:	e01e      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 800092a:	2104      	movs	r1, #4
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 800092e:	f7ff ff83 	bl	8000838 <LL_GPIO_ResetOutputPin>
    break;
 8000932:	e019      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_DC:
    /* Insert codes for DC pin control */
    if(arg_int) {
 8000934:	7abb      	ldrb	r3, [r7, #10]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d004      	beq.n	8000944 <u8x8_stm32_gpio_and_delay+0xec>
      LL_GPIO_SetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 800093a:	2102      	movs	r1, #2
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 800093e:	f7ff ff6d 	bl	800081c <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
    }
    break;
 8000942:	e011      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000944:	2102      	movs	r1, #2
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000948:	f7ff ff76 	bl	8000838 <LL_GPIO_ResetOutputPin>
    break;
 800094c:	e00c      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_RESET:
    /* Insert codes for RST pin control */
    if(arg_int) {
 800094e:	7abb      	ldrb	r3, [r7, #10]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d004      	beq.n	800095e <u8x8_stm32_gpio_and_delay+0x106>
      LL_GPIO_SetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 8000954:	2101      	movs	r1, #1
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000958:	f7ff ff60 	bl	800081c <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
    }
    break;
 800095c:	e003      	b.n	8000966 <u8x8_stm32_gpio_and_delay+0x10e>
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 800095e:	2101      	movs	r1, #1
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000962:	f7ff ff69 	bl	8000838 <LL_GPIO_ResetOutputPin>
    break;
 8000966:	bf00      	nop
  }
  return 1;
 8000968:	2301      	movs	r3, #1
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020800 	.word	0x40020800

08000978 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	72fb      	strb	r3, [r7, #11]
 8000986:	4613      	mov	r3, r2
 8000988:	72bb      	strb	r3, [r7, #10]
  uint8_t* data = arg_ptr;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	617b      	str	r3, [r7, #20]

  switch(msg) {
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	3b14      	subs	r3, #20
 8000992:	2b0c      	cmp	r3, #12
 8000994:	d842      	bhi.n	8000a1c <u8x8_byte_stm32_hw_spi+0xa4>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <u8x8_byte_stm32_hw_spi+0x24>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	08000a21 	.word	0x08000a21
 80009a0:	08000a1d 	.word	0x08000a1d
 80009a4:	08000a1d 	.word	0x08000a1d
 80009a8:	080009d1 	.word	0x080009d1
 80009ac:	080009ed 	.word	0x080009ed
 80009b0:	08000a05 	.word	0x08000a05
 80009b4:	08000a1d 	.word	0x08000a1d
 80009b8:	08000a1d 	.word	0x08000a1d
 80009bc:	08000a1d 	.word	0x08000a1d
 80009c0:	08000a1d 	.word	0x08000a1d
 80009c4:	08000a1d 	.word	0x08000a1d
 80009c8:	08000a1d 	.word	0x08000a1d
 80009cc:	080009df 	.word	0x080009df
  case U8X8_MSG_BYTE_SEND:
    /* Insert codes to transmit data */
	hal_spi_transfer(SSD1306_SPIDRV, data, arg_int, SSD1306_TIMEOUT);
 80009d0:	7aba      	ldrb	r2, [r7, #10]
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	6979      	ldr	r1, [r7, #20]
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <u8x8_byte_stm32_hw_spi+0xb4>)
 80009d8:	f010 fffc 	bl	80119d4 <hal_spi_transfer>
    break;
 80009dc:	e021      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_INIT:
    /* Insert codes to begin SPI transmission */
    break;
  case U8X8_MSG_BYTE_SET_DC:
    /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
    u8x8_gpio_SetDC(u8x8, arg_int);
 80009de:	7abb      	ldrb	r3, [r7, #10]
 80009e0:	461a      	mov	r2, r3
 80009e2:	214a      	movs	r1, #74	; 0x4a
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f00d ff8c 	bl	800e902 <u8x8_gpio_call>
    break;
 80009ea:	e01a      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_START_TRANSFER:
    /* Select slave, U8X8_MSG_GPIO_CS will be called */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	2149      	movs	r1, #73	; 0x49
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f00d ff83 	bl	800e902 <u8x8_gpio_call>
    hal_delay_us(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f00e fd31 	bl	800f464 <hal_delay_us>
    break;
 8000a02:	e00e      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_END_TRANSFER:
	hal_delay_us(100);
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f00e fd2d 	bl	800f464 <hal_delay_us>
    /* Insert codes to end SPI transmission */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	785b      	ldrb	r3, [r3, #1]
 8000a10:	461a      	mov	r2, r3
 8000a12:	2149      	movs	r1, #73	; 0x49
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f00d ff74 	bl	800e902 <u8x8_gpio_call>
    break;
 8000a1a:	e002      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  default:
    return 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e001      	b.n	8000a24 <u8x8_byte_stm32_hw_spi+0xac>
    break;
 8000a20:	bf00      	nop
  }
  return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20005a78 	.word	0x20005a78

08000a30 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <LL_GPIO_IsInputPinSet>:
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	4013      	ands	r3, r2
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	889a      	ldrh	r2, [r3, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8000a9c:	e006      	b.n	8000aac <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	889b      	ldrh	r3, [r3, #4]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	0412      	lsls	r2, r2, #16
 8000aaa:	619a      	str	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <hal_gpio_readpin>:
	} else {
		return false;
	}
}

static inline uint32_t hal_gpio_readpin(const GpioPin* gpio) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	return LL_GPIO_IsInputPinSet(gpio->port, gpio->pin);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	889b      	ldrh	r3, [r3, #4]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4610      	mov	r0, r2
 8000acc:	f7ff ffc3 	bl	8000a56 <LL_GPIO_IsInputPinSet>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <VS1053_Init>:
/* endFill byte is required to stop playing */
uint8_t endFillByte;

/* Initialize VS1053 */
bool VS1053_Init()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	uint16_t status = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	80fb      	strh	r3, [r7, #6]

	XCS_HIGH;		    /* XCS High */
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4841      	ldr	r0, [pc, #260]	; (8000bf0 <VS1053_Init+0x114>)
 8000aea:	f7ff ffc9 	bl	8000a80 <hal_gpio_write>
	XDCS_HIGH;		    /* XDCS High */
 8000aee:	2101      	movs	r1, #1
 8000af0:	4840      	ldr	r0, [pc, #256]	; (8000bf4 <VS1053_Init+0x118>)
 8000af2:	f7ff ffc5 	bl	8000a80 <hal_gpio_write>
	VS1053_Reset();     /* Hard Reset */
 8000af6:	f000 f883 	bl	8000c00 <VS1053_Reset>

	/* MP3 Mode GPIO configuration */
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC017)) return false; /* GPIO direction */
 8000afa:	2307      	movs	r3, #7
 8000afc:	f24c 0117 	movw	r1, #49175	; 0xc017
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f9b1 	bl	8000e68 <VS1053_SciWrite>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <VS1053_Init+0x3a>
 8000b12:	2300      	movs	r3, #0
 8000b14:	e067      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 3)) return false;
 8000b16:	2306      	movs	r3, #6
 8000b18:	2103      	movs	r1, #3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f9a4 	bl	8000e68 <VS1053_SciWrite>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f083 0301 	eor.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <VS1053_Init+0x54>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e05a      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC019)) return false; /* GPIO output */
 8000b30:	2307      	movs	r3, #7
 8000b32:	f24c 0119 	movw	r1, #49177	; 0xc019
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f996 	bl	8000e68 <VS1053_SciWrite>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f083 0301 	eor.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <VS1053_Init+0x70>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e04c      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f989 	bl	8000e68 <VS1053_SciWrite>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f083 0301 	eor.w	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <VS1053_Init+0x8a>
 8000b62:	2300      	movs	r3, #0
 8000b64:	e03f      	b.n	8000be6 <VS1053_Init+0x10a>

	/* Soft reset */
	if(!VS1053_SoftReset()) return false;
 8000b66:	f000 f86d 	bl	8000c44 <VS1053_SoftReset>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <VS1053_Init+0x9e>
 8000b76:	2300      	movs	r3, #0
 8000b78:	e035      	b.n	8000be6 <VS1053_Init+0x10a>

	/* x4.0 Clock */
	if(!VS1053_SciWrite(VS1053_REG_CLOCKF, 0x8000)) return false;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f971 	bl	8000e68 <VS1053_SciWrite>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f083 0301 	eor.w	r3, r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <VS1053_Init+0xba>
 8000b92:	2300      	movs	r3, #0
 8000b94:	e027      	b.n	8000be6 <VS1053_Init+0x10a>

	LL_SPI_SetBaudRatePrescaler(vs1053spidrv->spi, LL_SPI_BAUDRATEPRESCALER_DIV32); /* 90MHz / 16 = about 5.6mhz */
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <VS1053_Init+0x11c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff46 	bl	8000a30 <LL_SPI_SetBaudRatePrescaler>

	/* Read endFill Byte */
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f95c 	bl	8000e68 <VS1053_SciWrite>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <VS1053_Init+0xe4>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e012      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000bc0:	2206      	movs	r2, #6
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	f000 f994 	bl	8000ef4 <VS1053_SciRead>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f083 0301 	eor.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <VS1053_Init+0x100>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e004      	b.n	8000be6 <VS1053_Init+0x10a>
	endFillByte = regVal & 0xFF;
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <VS1053_Init+0x120>)
 8000be2:	701a      	strb	r2, [r3, #0]

	return true;
 8000be4:	2301      	movs	r3, #1
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	0801478c 	.word	0x0801478c
 8000bf4:	08014794 	.word	0x08014794
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	2000009c 	.word	0x2000009c

08000c00 <VS1053_Reset>:

/* Hard reset */
void VS1053_Reset()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8000c06:	23ff      	movs	r3, #255	; 0xff
 8000c08:	71fb      	strb	r3, [r7, #7]
	XRST_LOW;		                                    /* XRST Low */
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <VS1053_Reset+0x3c>)
 8000c0e:	f7ff ff37 	bl	8000a80 <hal_gpio_write>
	hal_spi_transfer(vs1053spidrv, &dummy, 1, VS1053_SPI_TIMEOUT); /* Tx Dummy */
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <VS1053_Reset+0x40>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f010 feda 	bl	80119d4 <hal_spi_transfer>
	LL_mDelay(10);										/* 10ms Delay */
 8000c20:	200a      	movs	r0, #10
 8000c22:	f004 fb43 	bl	80052ac <LL_mDelay>
	XRST_HIGH;			                                /* XRST High */
 8000c26:	2101      	movs	r1, #1
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <VS1053_Reset+0x3c>)
 8000c2a:	f7ff ff29 	bl	8000a80 <hal_gpio_write>
	LL_mDelay(10);
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f004 fb3c 	bl	80052ac <LL_mDelay>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0801479c 	.word	0x0801479c
 8000c40:	20000000 	.word	0x20000000

08000c44 <VS1053_SoftReset>:

/* Soft reset */
bool VS1053_SoftReset()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_MODE, 0x4804)) return false;	/* SM LINE1 | SM SDINEW | SM RESET */
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f644 0104 	movw	r1, #18436	; 0x4804
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f90a 	bl	8000e68 <VS1053_SciWrite>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <VS1053_SoftReset+0x20>
 8000c60:	2300      	movs	r3, #0
 8000c62:	e003      	b.n	8000c6c <VS1053_SoftReset+0x28>
	LL_mDelay(100);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f004 fb21 	bl	80052ac <LL_mDelay>
	return true;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <VS1053_SetVolume>:

/* Volume control */
bool VS1053_SetVolume(uint8_t volumeLeft, uint8_t volumeRight)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	460a      	mov	r2, r1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
    uint16_t volume;
    volume = ( volumeLeft << 8 ) + volumeRight;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	81fb      	strh	r3, [r7, #14]

    if(!VS1053_SciWrite(VS1053_REG_VOL, volume)) return false;
 8000c90:	220b      	movs	r2, #11
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f000 f8e6 	bl	8000e68 <VS1053_SciWrite>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <VS1053_SetVolume+0x3c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e000      	b.n	8000cae <VS1053_SetVolume+0x3e>
    return true;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <VS1053_SetMode>:


/* Mode control */
bool VS1053_SetMode(uint16_t mode)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_MODE, mode)) return false;
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	f000 f8ce 	bl	8000e68 <VS1053_SciWrite>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f083 0301 	eor.w	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <VS1053_SetMode+0x26>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e000      	b.n	8000cde <VS1053_SetMode+0x28>
	return true;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <VS1053_GetMode>:

bool VS1053_GetMode(uint16_t *mode)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	if(!VS1053_SciRead(VS1053_REG_MODE, mode)) return false;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f8fe 	bl	8000ef4 <VS1053_SciRead>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <VS1053_GetMode+0x22>
 8000d04:	2300      	movs	r3, #0
 8000d06:	e000      	b.n	8000d0a <VS1053_GetMode+0x24>
	return true;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <VS1053_AutoResync>:

/* Resync control */
bool VS1053_AutoResync()
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E29)) return false; /* Auto Resync */
 8000d16:	2307      	movs	r3, #7
 8000d18:	f641 6129 	movw	r1, #7721	; 0x1e29
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 f8a3 	bl	8000e68 <VS1053_SciWrite>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <VS1053_AutoResync+0x20>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e00d      	b.n	8000d4e <VS1053_AutoResync+0x3c>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000d32:	2306      	movs	r3, #6
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f896 	bl	8000e68 <VS1053_SciWrite>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <VS1053_AutoResync+0x3a>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e000      	b.n	8000d4e <VS1053_AutoResync+0x3c>
	return true;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <VS1053_SetDecodeTime>:

/* Set decode time */
bool VS1053_SetDecodeTime(uint16_t time)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f000 f880 	bl	8000e68 <VS1053_SciWrite>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f083 0301 	eor.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <VS1053_SetDecodeTime+0x26>
 8000d74:	2300      	movs	r3, #0
 8000d76:	e00e      	b.n	8000d96 <VS1053_SetDecodeTime+0x44>
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000d78:	2204      	movs	r2, #4
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4610      	mov	r0, r2
 8000d80:	f000 f872 	bl	8000e68 <VS1053_SciWrite>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <VS1053_SetDecodeTime+0x42>
 8000d90:	2300      	movs	r3, #0
 8000d92:	e000      	b.n	8000d96 <VS1053_SetDecodeTime+0x44>
	return true;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <VS1053_GetDecodeTime>:

uint16_t VS1053_GetDecodeTime(void) {
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
	uint16_t time = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciRead(VS1053_REG_DECODE_TIME, &time)) return false;
 8000da8:	2204      	movs	r2, #4
 8000daa:	1dbb      	adds	r3, r7, #6
 8000dac:	4619      	mov	r1, r3
 8000dae:	4610      	mov	r0, r2
 8000db0:	f000 f8a0 	bl	8000ef4 <VS1053_SciRead>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <VS1053_GetDecodeTime+0x26>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e000      	b.n	8000dc6 <VS1053_GetDecodeTime+0x28>
	return time;
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <VS1053_SendEndFill>:

/* Send endfill bytes */
bool VS1053_SendEndFill(uint16_t num)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000dda:	2307      	movs	r3, #7
 8000ddc:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f841 	bl	8000e68 <VS1053_SciWrite>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <VS1053_SendEndFill+0x26>
 8000df2:	2300      	movs	r3, #0
 8000df4:	e022      	b.n	8000e3c <VS1053_SendEndFill+0x6c>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000df6:	2206      	movs	r2, #6
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4610      	mov	r0, r2
 8000e00:	f000 f878 	bl	8000ef4 <VS1053_SciRead>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f083 0301 	eor.w	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <VS1053_SendEndFill+0x44>
 8000e10:	2300      	movs	r3, #0
 8000e12:	e013      	b.n	8000e3c <VS1053_SendEndFill+0x6c>
	endFillByte = regVal & 0xFF;
 8000e14:	89bb      	ldrh	r3, [r7, #12]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <VS1053_SendEndFill+0x74>)
 8000e1a:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < num; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	81fb      	strh	r3, [r7, #14]
 8000e20:	e007      	b.n	8000e32 <VS1053_SendEndFill+0x62>
	{
		VS1053_SdiWrite(endFillByte);
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <VS1053_SendEndFill+0x74>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f8da 	bl	8000fe0 <VS1053_SdiWrite>
	for(uint16_t i = 0; i < num; i++)
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	81fb      	strh	r3, [r7, #14]
 8000e32:	89fa      	ldrh	r2, [r7, #14]
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d3f3      	bcc.n	8000e22 <VS1053_SendEndFill+0x52>
	}
	return true;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000009c 	.word	0x2000009c

08000e48 <VS1053_IsBusy>:

/* Check DREQ pin */
bool VS1053_IsBusy()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	if(hal_gpio_readpin(&gpio_vs1053_dreq) == 1) return false;
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <VS1053_IsBusy+0x1c>)
 8000e4e:	f7ff fe33 	bl	8000ab8 <hal_gpio_readpin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d101      	bne.n	8000e5c <VS1053_IsBusy+0x14>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e000      	b.n	8000e5e <VS1053_IsBusy+0x16>
	else return true; // busy
 8000e5c:	2301      	movs	r3, #1
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	080147a4 	.word	0x080147a4

08000e68 <VS1053_SciWrite>:

/* SCI Tx */
bool VS1053_SciWrite( uint8_t address, uint16_t input )
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	buffer[0] = VS1053_WRITE_CMD;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	737b      	strb	r3, [r7, #13]
	buffer[2] = input >> 8;			/* Input MSB */
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	73bb      	strb	r3, [r7, #14]
	buffer[3] = input & 0x00FF;		/* Input LSB */
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000e90:	bf00      	nop
 8000e92:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <VS1053_SciWrite+0x80>)
 8000e94:	f7ff fe10 	bl	8000ab8 <hal_gpio_readpin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f9      	beq.n	8000e92 <VS1053_SciWrite+0x2a>

	XCS_LOW;			/* XCS Low */
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <VS1053_SciWrite+0x84>)
 8000ea2:	f7ff fded 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, buffer, sizeof(buffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <VS1053_SciWrite+0x88>)
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	f107 010c 	add.w	r1, r7, #12
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	f010 fd8f 	bl	80119d4 <hal_spi_transfer>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f083 0301 	eor.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <VS1053_SciWrite+0x5e>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e00b      	b.n	8000ede <VS1053_SciWrite+0x76>
	XCS_HIGH;			/* XCS High */
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <VS1053_SciWrite+0x84>)
 8000eca:	f7ff fdd9 	bl	8000a80 <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000ece:	bf00      	nop
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <VS1053_SciWrite+0x80>)
 8000ed2:	f7ff fdf1 	bl	8000ab8 <hal_gpio_readpin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f9      	beq.n	8000ed0 <VS1053_SciWrite+0x68>

	return true;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	080147a4 	.word	0x080147a4
 8000eec:	0801478c 	.word	0x0801478c
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <VS1053_SciRead>:

/* SCI TxRx */
bool VS1053_SciRead( uint8_t address, uint16_t *res)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8000f00:	23ff      	movs	r3, #255	; 0xff
 8000f02:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];

	txBuffer[0] = VS1053_READ_CMD;
 8000f04:	2303      	movs	r3, #3
 8000f06:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = address;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	737b      	strb	r3, [r7, #13]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000f0c:	bf00      	nop
 8000f0e:	4831      	ldr	r0, [pc, #196]	; (8000fd4 <VS1053_SciRead+0xe0>)
 8000f10:	f7ff fdd2 	bl	8000ab8 <hal_gpio_readpin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <VS1053_SciRead+0x1a>

	XCS_LOW;        /* XCS Low */
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	482e      	ldr	r0, [pc, #184]	; (8000fd8 <VS1053_SciRead+0xe4>)
 8000f1e:	f7ff fdaf 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, txBuffer, sizeof(txBuffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <VS1053_SciRead+0xe8>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 010c 	add.w	r1, r7, #12
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	f010 fd51 	bl	80119d4 <hal_spi_transfer>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f083 0301 	eor.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <VS1053_SciRead+0x4e>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e044      	b.n	8000fcc <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[0], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <VS1053_SciRead+0xe8>)
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	f107 0208 	add.w	r2, r7, #8
 8000f4a:	f107 010f 	add.w	r1, r7, #15
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	f010 fd98 	bl	8011a88 <hal_spi_txrx>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f083 0301 	eor.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <VS1053_SciRead+0x74>
 8000f64:	2300      	movs	r3, #0
 8000f66:	e031      	b.n	8000fcc <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[1], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <VS1053_SciRead+0xe8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	f107 010f 	add.w	r1, r7, #15
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f010 fd84 	bl	8011a88 <hal_spi_txrx>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <VS1053_SciRead+0x9c>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e01d      	b.n	8000fcc <VS1053_SciRead+0xd8>
	XCS_HIGH;       /* XCS High */
 8000f90:	2101      	movs	r1, #1
 8000f92:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <VS1053_SciRead+0xe4>)
 8000f94:	f7ff fd74 	bl	8000a80 <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000f98:	bf00      	nop
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <VS1053_SciRead+0xe0>)
 8000f9c:	f7ff fd8c 	bl	8000ab8 <hal_gpio_readpin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f9      	beq.n	8000f9a <VS1053_SciRead+0xa6>

	*res = rxBuffer[0];     /* Received data */
 8000fa6:	7a3b      	ldrb	r3, [r7, #8]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	801a      	strh	r2, [r3, #0]
	*res <<= 8;				/* MSB */
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	801a      	strh	r2, [r3, #0]
	*res |= rxBuffer[1];	/* LSB */
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	7a7b      	ldrb	r3, [r7, #9]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	801a      	strh	r2, [r3, #0]

	return true;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	080147a4 	.word	0x080147a4
 8000fd8:	0801478c 	.word	0x0801478c
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <VS1053_SdiWrite>:

/* SDI Tx */
bool VS1053_SdiWrite( uint8_t input )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000fea:	bf00      	nop
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <VS1053_SdiWrite+0x50>)
 8000fee:	f7ff fd63 	bl	8000ab8 <hal_gpio_readpin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f9      	beq.n	8000fec <VS1053_SdiWrite+0xc>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <VS1053_SdiWrite+0x54>)
 8000ffc:	f7ff fd40 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, &input, 1, VS1053_SPI_TIMEOUT) != true) return false;		/* SPI Tx 1 byte */
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <VS1053_SdiWrite+0x58>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	1df9      	adds	r1, r7, #7
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	2201      	movs	r2, #1
 800100a:	f010 fce3 	bl	80119d4 <hal_spi_transfer>
 800100e:	4603      	mov	r3, r0
 8001010:	f083 0301 	eor.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <VS1053_SdiWrite+0x3e>
 800101a:	2300      	movs	r3, #0
 800101c:	e004      	b.n	8001028 <VS1053_SdiWrite+0x48>
	XDCS_HIGH;			/* XDCS High(SDI) */
 800101e:	2101      	movs	r1, #1
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <VS1053_SdiWrite+0x54>)
 8001022:	f7ff fd2d 	bl	8000a80 <hal_gpio_write>

	return true;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	080147a4 	.word	0x080147a4
 8001034:	08014794 	.word	0x08014794
 8001038:	20000000 	.word	0x20000000

0800103c <VS1053_SdiWrite32>:

/* SDI Tx 32 bytes */
bool VS1053_SdiWrite32( uint8_t *input32 )
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8001044:	bf00      	nop
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <VS1053_SdiWrite32+0x50>)
 8001048:	f7ff fd36 	bl	8000ab8 <hal_gpio_readpin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f9      	beq.n	8001046 <VS1053_SdiWrite32+0xa>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8001052:	2100      	movs	r1, #0
 8001054:	480e      	ldr	r0, [pc, #56]	; (8001090 <VS1053_SdiWrite32+0x54>)
 8001056:	f7ff fd13 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, input32, 32, VS1053_SPI_TIMEOUT) != true) return false; /* SPI Tx 32 bytes */
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <VS1053_SdiWrite32+0x58>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	2220      	movs	r2, #32
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f010 fcb6 	bl	80119d4 <hal_spi_transfer>
 8001068:	4603      	mov	r3, r0
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <VS1053_SdiWrite32+0x3c>
 8001074:	2300      	movs	r3, #0
 8001076:	e004      	b.n	8001082 <VS1053_SdiWrite32+0x46>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8001078:	2101      	movs	r1, #1
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <VS1053_SdiWrite32+0x54>)
 800107c:	f7ff fd00 	bl	8000a80 <hal_gpio_write>

	return true;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	080147a4 	.word	0x080147a4
 8001090:	08014794 	.word	0x08014794
 8001094:	20000000 	.word	0x20000000

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f8fc 	bl	80012be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	2005      	movs	r0, #5
 80010c8:	f011 f85a 	bl	8012180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f011 f82c 	bl	8012128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	200000a0 	.word	0x200000a0

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200000a0 	.word	0x200000a0

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff4c 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e6:	f7ff ff61 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	6978      	ldr	r0, [r7, #20]
 80012f2:	f7ff ffb1 	bl	8001258 <NVIC_EncodePriority>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff80 	bl	8001204 <__NVIC_SetPriority>
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff54 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff fee6 	bl	8001104 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e099      	b.n	8001478 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001364:	e00f      	b.n	8001386 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001366:	f7ff fecd 	bl	8001104 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b05      	cmp	r3, #5
 8001372:	d908      	bls.n	8001386 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2220      	movs	r2, #32
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e078      	b.n	8001478 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1e8      	bne.n	8001366 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_DMA_Init+0x158>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d107      	bne.n	80013f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	4313      	orrs	r3, r2
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f023 0307 	bic.w	r3, r3, #7
 8001406:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	4313      	orrs	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	2b04      	cmp	r3, #4
 8001418:	d117      	bne.n	800144a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00e      	beq.n	800144a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fa9d 	bl	800196c <DMA_CheckFifoParam>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001446:	2301      	movs	r3, #1
 8001448:	e016      	b.n	8001478 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fa54 	bl	8001900 <DMA_CalcBaseAndBitshift>
 8001458:	4603      	mov	r3, r0
 800145a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001460:	223f      	movs	r2, #63	; 0x3f
 8001462:	409a      	lsls	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	f010803f 	.word	0xf010803f

08001484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_DMA_Start_IT+0x26>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e040      	b.n	800152c <HAL_DMA_Start_IT+0xa8>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d12f      	bne.n	800151e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2202      	movs	r2, #2
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f9e6 	bl	80018a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	223f      	movs	r2, #63	; 0x3f
 80014de:	409a      	lsls	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0216 	orr.w	r2, r2, #22
 80014f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d007      	beq.n	800150c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0208 	orr.w	r2, r2, #8
 800150a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e005      	b.n	800152a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001526:	2302      	movs	r3, #2
 8001528:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800152a:	7dfb      	ldrb	r3, [r7, #23]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d004      	beq.n	8001552 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00c      	b.n	800156c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2205      	movs	r2, #5
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001584:	4b8e      	ldr	r3, [pc, #568]	; (80017c0 <HAL_DMA_IRQHandler+0x248>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a8e      	ldr	r2, [pc, #568]	; (80017c4 <HAL_DMA_IRQHandler+0x24c>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0a9b      	lsrs	r3, r3, #10
 8001590:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	2208      	movs	r2, #8
 80015a4:	409a      	lsls	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d01a      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0204 	bic.w	r2, r2, #4
 80015ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2208      	movs	r2, #8
 80015d2:	409a      	lsls	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	2201      	movs	r2, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d012      	beq.n	800161a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2201      	movs	r2, #1
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001612:	f043 0202 	orr.w	r2, r3, #2
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	2204      	movs	r2, #4
 8001620:	409a      	lsls	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d012      	beq.n	8001650 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00b      	beq.n	8001650 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	2204      	movs	r2, #4
 800163e:	409a      	lsls	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	f043 0204 	orr.w	r2, r3, #4
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	2210      	movs	r2, #16
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d043      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03c      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	2210      	movs	r2, #16
 8001674:	409a      	lsls	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d018      	beq.n	80016ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d108      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	2b00      	cmp	r3, #0
 800169c:	d024      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
 80016a6:	e01f      	b.n	80016e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01b      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e016      	b.n	80016e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d107      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0208 	bic.w	r2, r2, #8
 80016d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2220      	movs	r2, #32
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 808f 	beq.w	8001818 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8087 	beq.w	8001818 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	2220      	movs	r2, #32
 8001710:	409a      	lsls	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b05      	cmp	r3, #5
 8001720:	d136      	bne.n	8001790 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0216 	bic.w	r2, r2, #22
 8001730:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001740:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <HAL_DMA_IRQHandler+0x1da>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0208 	bic.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	223f      	movs	r2, #63	; 0x3f
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	2b00      	cmp	r3, #0
 8001784:	d07e      	beq.n	8001884 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
        }
        return;
 800178e:	e079      	b.n	8001884 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d01d      	beq.n	80017da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10d      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d031      	beq.n	8001818 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
 80017bc:	e02c      	b.n	8001818 <HAL_DMA_IRQHandler+0x2a0>
 80017be:	bf00      	nop
 80017c0:	20000014 	.word	0x20000014
 80017c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d023      	beq.n	8001818 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
 80017d8:	e01e      	b.n	8001818 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10f      	bne.n	8001808 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0210 	bic.w	r2, r2, #16
 80017f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	2b00      	cmp	r3, #0
 800181e:	d032      	beq.n	8001886 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d022      	beq.n	8001872 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2205      	movs	r2, #5
 8001830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3301      	adds	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	d307      	bcc.n	8001860 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f2      	bne.n	8001844 <HAL_DMA_IRQHandler+0x2cc>
 800185e:	e000      	b.n	8001862 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001860:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
 8001882:	e000      	b.n	8001886 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001884:	bf00      	nop
    }
  }
}
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b40      	cmp	r3, #64	; 0x40
 80018d0:	d108      	bne.n	80018e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018e2:	e007      	b.n	80018f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	60da      	str	r2, [r3, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3b10      	subs	r3, #16
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <DMA_CalcBaseAndBitshift+0x64>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <DMA_CalcBaseAndBitshift+0x68>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d909      	bls.n	8001942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001936:	f023 0303 	bic.w	r3, r3, #3
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	; 0x58
 8001940:	e007      	b.n	8001952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	aaaaaaab 	.word	0xaaaaaaab
 8001968:	080141e0 	.word	0x080141e0

0800196c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11f      	bne.n	80019c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d856      	bhi.n	8001a3a <DMA_CheckFifoParam+0xce>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <DMA_CheckFifoParam+0x28>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019b7 	.word	0x080019b7
 800199c:	080019a5 	.word	0x080019a5
 80019a0:	08001a3b 	.word	0x08001a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d046      	beq.n	8001a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b4:	e043      	b.n	8001a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019be:	d140      	bne.n	8001a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c4:	e03d      	b.n	8001a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d121      	bne.n	8001a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d837      	bhi.n	8001a46 <DMA_CheckFifoParam+0xda>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <DMA_CheckFifoParam+0x70>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019ed 	.word	0x080019ed
 80019e0:	080019f3 	.word	0x080019f3
 80019e4:	080019ed 	.word	0x080019ed
 80019e8:	08001a05 	.word	0x08001a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      break;
 80019f0:	e030      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d025      	beq.n	8001a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a02:	e022      	b.n	8001a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a0c:	d11f      	bne.n	8001a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a12:	e01c      	b.n	8001a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d903      	bls.n	8001a22 <DMA_CheckFifoParam+0xb6>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d003      	beq.n	8001a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a20:	e018      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
      break;
 8001a26:	e015      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      break;
 8001a38:	e00b      	b.n	8001a52 <DMA_CheckFifoParam+0xe6>
      break;
 8001a3a:	bf00      	nop
 8001a3c:	e00a      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e008      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e006      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e004      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e002      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a4e:	bf00      	nop
 8001a50:	e000      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a52:	bf00      	nop
    }
  } 
  
  return status; 
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e177      	b.n	8001d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8166 	bne.w	8001d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80c0 	beq.w	8001d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a61      	ldr	r2, [pc, #388]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d037      	beq.n	8001ca2 <HAL_GPIO_Init+0x23e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d031      	beq.n	8001c9e <HAL_GPIO_Init+0x23a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x236>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x338>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x232>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <HAL_GPIO_Init+0x33c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x22e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <HAL_GPIO_Init+0x340>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x22a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x344>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x348>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_GPIO_Init+0x34c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	e012      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c7e:	230a      	movs	r3, #10
 8001c80:	e010      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae84 	bls.w	8001a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40022400 	.word	0x40022400
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000014 	.word	0x20000014

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	080147c4 	.word	0x080147c4

08001dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	220f      	movs	r2, #15
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_RCC_GetClockConfig+0x60>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 020f 	and.w	r2, r3, #15
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	601a      	str	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40023c00 	.word	0x40023c00

08001e60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e022      	b.n	8001eb8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f00f fa21 	bl	80112cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f814 	bl	8001ec0 <HAL_SD_InitCard>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00a      	b.n	8001eb8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b08e      	sub	sp, #56	; 0x38
 8001ec4:	af04      	add	r7, sp, #16
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001edc:	2376      	movs	r3, #118	; 0x76
 8001ede:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681d      	ldr	r5, [r3, #0]
 8001ee4:	466c      	mov	r4, sp
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f002 f863 	bl	8003fc4 <SDIO_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e04f      	b.n	8001fb0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_SD_InitCard+0xf8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 f89b 	bl	8004056 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_SD_InitCard+0xf8>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001f26:	2002      	movs	r0, #2
 8001f28:	f7ff f8f8 	bl	800111c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 ff6b 	bl	8002e08 <SD_PowerON>
 8001f32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e02e      	b.n	8001fb0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fe8a 	bl	8002c6c <SD_InitCard>
 8001f58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00b      	beq.n	8001f78 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e01b      	b.n	8001fb0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 f8fa 	bl	800417a <SDMMC_CmdBlockLength>
 8001f86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00f      	beq.n	8001fae <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_SD_InitCard+0xfc>)
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3728      	adds	r7, #40	; 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb8:	422580a0 	.word	0x422580a0
 8001fbc:	004005ff 	.word	0x004005ff

08001fc0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d107      	bne.n	8001fe8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0c0      	b.n	800216a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	f040 80b9 	bne.w	8002168 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	441a      	add	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	429a      	cmp	r2, r3
 8002008:	d907      	bls.n	800201a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0a7      	b.n	800216a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2203      	movs	r2, #3
 800201e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800204c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2200      	movs	r2, #0
 8002054:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3380      	adds	r3, #128	; 0x80
 8002084:	4619      	mov	r1, r3
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	f7ff f9f9 	bl	8001484 <HAL_DMA_Start_IT>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d017      	beq.n	80020c8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e050      	b.n	800216a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d002      	beq.n	80020dc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	025b      	lsls	r3, r3, #9
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	025b      	lsls	r3, r3, #9
 80020e6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020e8:	2390      	movs	r3, #144	; 0x90
 80020ea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f107 0210 	add.w	r2, r7, #16
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f002 f80d 	bl	8004122 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d90a      	bls.n	8002124 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2282      	movs	r2, #130	; 0x82
 8002112:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800211a:	4618      	mov	r0, r3
 800211c:	f002 f871 	bl	8004202 <SDMMC_CmdReadMultiBlock>
 8002120:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002122:	e009      	b.n	8002138 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2281      	movs	r2, #129	; 0x81
 8002128:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002130:	4618      	mov	r0, r3
 8002132:	f002 f844 	bl	80041be <SDMMC_CmdReadSingleBlock>
 8002136:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e002      	b.n	800216a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e000      	b.n	800216a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002168:	2302      	movs	r3, #2
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3730      	adds	r7, #48	; 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	08002a7b 	.word	0x08002a7b
 8002178:	08002aed 	.word	0x08002aed
 800217c:	004005ff 	.word	0x004005ff
 8002180:	4225858c 	.word	0x4225858c

08002184 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0c5      	b.n	8002338 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	f040 80be 	bne.w	8002336 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80021c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	441a      	add	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d907      	bls.n	80021de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0ac      	b.n	8002338 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002210:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	2200      	movs	r2, #0
 8002218:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	2b01      	cmp	r3, #1
 8002220:	d002      	beq.n	8002228 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	025b      	lsls	r3, r3, #9
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d90a      	bls.n	8002244 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	22a0      	movs	r2, #160	; 0xa0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223a:	4618      	mov	r0, r3
 800223c:	f002 f825 	bl	800428a <SDMMC_CmdWriteMultiBlock>
 8002240:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002242:	e009      	b.n	8002258 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2290      	movs	r2, #144	; 0x90
 8002248:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fff8 	bl	8004246 <SDMMC_CmdWriteSingleBlock>
 8002256:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d012      	beq.n	8002284 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a39      	ldr	r2, [pc, #228]	; (8002348 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	431a      	orrs	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e059      	b.n	8002338 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002284:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3380      	adds	r3, #128	; 0x80
 80022ba:	461a      	mov	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	f7ff f8df 	bl	8001484 <HAL_DMA_Start_IT>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01c      	beq.n	8002306 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80022da:	f023 0302 	bic.w	r3, r3, #2
 80022de:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e018      	b.n	8002338 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	025b      	lsls	r3, r3, #9
 8002310:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002312:	2390      	movs	r3, #144	; 0x90
 8002314:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800231e:	2301      	movs	r3, #1
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f107 0210 	add.w	r2, r7, #16
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f001 fef8 	bl	8004122 <SDIO_ConfigData>

      return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002336:	2302      	movs	r3, #2
  }
}
 8002338:	4618      	mov	r0, r3
 800233a:	3730      	adds	r7, #48	; 0x30
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	08002a51 	.word	0x08002a51
 8002344:	08002aed 	.word	0x08002aed
 8002348:	004005ff 	.word	0x004005ff
 800234c:	4225858c 	.word	0x4225858c

08002350 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_SD_IRQHandler+0x2e>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fdfc 	bl	8002f74 <SD_Read_IT>
 800237c:	e165      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 808f 	beq.w	80024ac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002396:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80023a6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80023aa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d039      	beq.n	800243a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_SD_IRQHandler+0x8a>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d011      	beq.n	80023fe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 ff76 	bl	80042d0 <SDMMC_CmdStopTransfer>
 80023e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f92f 	bl	800265c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f240 523a 	movw	r2, #1338	; 0x53a
 8002406:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_SD_IRQHandler+0xda>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f002 fff2 	bl	8005414 <HAL_SD_RxCpltCallback>
 8002430:	e10b      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f002 ffe4 	bl	8005400 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002438:	e107      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8102 	beq.w	800264a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d011      	beq.n	8002474 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f001 ff3b 	bl	80042d0 <SDMMC_CmdStopTransfer>
 800245a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8f4 	bl	800265c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 80e5 	bne.w	800264a <HAL_SD_IRQHandler+0x2fa>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 80df 	bne.w	800264a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0208 	bic.w	r2, r2, #8
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f002 ffab 	bl	8005400 <HAL_SD_TxCpltCallback>
}
 80024aa:	e0ce      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_SD_IRQHandler+0x17c>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fda6 	bl	8003016 <SD_Write_IT>
 80024ca:	e0be      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d2:	f240 233a 	movw	r3, #570	; 0x23a
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80b6 	beq.w	800264a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	f043 0202 	orr.w	r2, r3, #2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	f043 0208 	orr.w	r2, r3, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	f043 0220 	orr.w	r2, r3, #32
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	f043 0208 	orr.w	r2, r3, #8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f240 723a 	movw	r2, #1850	; 0x73a
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002578:	f023 0302 	bic.w	r3, r3, #2
 800257c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f001 fea4 	bl	80042d0 <SDMMC_CmdStopTransfer>
 8002588:	4602      	mov	r2, r0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f855 	bl	800265c <HAL_SD_ErrorCallback>
}
 80025b2:	e04a      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d045      	beq.n	800264a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_SD_IRQHandler+0x282>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <HAL_SD_IRQHandler+0x304>)
 80025d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe ffa8 	bl	8001534 <HAL_DMA_Abort_IT>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02f      	beq.n	800264a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 face 	bl	8002b90 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80025f4:	e029      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <HAL_SD_IRQHandler+0x2ba>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d011      	beq.n	800262e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <HAL_SD_IRQHandler+0x308>)
 8002610:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe ff8c 	bl	8001534 <HAL_DMA_Abort_IT>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d013      	beq.n	800264a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fae9 	bl	8002bfe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800262c:	e00d      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f002 fed2 	bl	80053ec <HAL_SD_AbortCallback>
}
 8002648:	e7ff      	b.n	800264a <HAL_SD_IRQHandler+0x2fa>
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	08002b91 	.word	0x08002b91
 8002658:	08002bff 	.word	0x08002bff

0800265c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800267e:	0f9b      	lsrs	r3, r3, #30
 8002680:	b2da      	uxtb	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	b2da      	uxtb	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800269c:	0e1b      	lsrs	r3, r3, #24
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ae:	0c1b      	lsrs	r3, r3, #16
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d0:	0d1b      	lsrs	r3, r3, #20
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	0bdb      	lsrs	r3, r3, #15
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002700:	0b9b      	lsrs	r3, r3, #14
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	b2da      	uxtb	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002712:	0b5b      	lsrs	r3, r3, #13
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002724:	0b1b      	lsrs	r3, r3, #12
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273c:	2b00      	cmp	r3, #0
 800273e:	d163      	bne.n	8002808 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	f640 73fc 	movw	r3, #4092	; 0xffc
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002750:	0f92      	lsrs	r2, r2, #30
 8002752:	431a      	orrs	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275c:	0edb      	lsrs	r3, r3, #27
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	b2da      	uxtb	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276e:	0e1b      	lsrs	r3, r3, #24
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	b2da      	uxtb	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	b2da      	uxtb	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002792:	0c9b      	lsrs	r3, r3, #18
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	b2da      	uxtb	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a4:	0bdb      	lsrs	r3, r3, #15
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	7e1b      	ldrb	r3, [r3, #24]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	3302      	adds	r3, #2
 80027c8:	2201      	movs	r2, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80027d2:	fb03 f202 	mul.w	r2, r3, r2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7a1b      	ldrb	r3, [r3, #8]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027f4:	0a52      	lsrs	r2, r2, #9
 80027f6:	fb03 f202 	mul.w	r2, r3, r2
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002804:	661a      	str	r2, [r3, #96]	; 0x60
 8002806:	e031      	b.n	800286c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	2b01      	cmp	r3, #1
 800280e:	d11d      	bne.n	800284c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	3301      	adds	r3, #1
 800282c:	029a      	lsls	r2, r3, #10
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002840:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	661a      	str	r2, [r3, #96]	; 0x60
 800284a:	e00f      	b.n	800286c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_SD_GetCardCSD+0x344>)
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e09d      	b.n	80029a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002870:	0b9b      	lsrs	r3, r3, #14
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002882:	09db      	lsrs	r3, r3, #7
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800288a:	b2da      	uxtb	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800289a:	b2da      	uxtb	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	0fdb      	lsrs	r3, r3, #31
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	0f5b      	lsrs	r3, r3, #29
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	0d9b      	lsrs	r3, r3, #22
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	0d5b      	lsrs	r3, r3, #21
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	0bdb      	lsrs	r3, r3, #15
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	0b9b      	lsrs	r3, r3, #14
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	0b1b      	lsrs	r3, r3, #12
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	b2da      	uxtb	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	b2da      	uxtb	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002996:	b2da      	uxtb	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	004005ff 	.word	0x004005ff

080029b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa7e 	bl	8002f24 <SD_SendStatus>
 8002a28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002a46:	693b      	ldr	r3, [r7, #16]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	2b82      	cmp	r3, #130	; 0x82
 8002a8e:	d111      	bne.n	8002ab4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 fc1b 	bl	80042d0 <SDMMC_CmdStopTransfer>
 8002a9a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7ff fdd4 	bl	800265c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f240 523a 	movw	r2, #1338	; 0x53a
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f002 fc99 	bl	8005414 <HAL_SD_RxCpltCallback>
#endif
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe fec6 	bl	800188c <HAL_DMA_GetError>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d03e      	beq.n	8002b84 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d002      	beq.n	8002b22 <SD_DMAError+0x36>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d12d      	bne.n	8002b7e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <SD_DMAError+0xa0>)
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002b38:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7ff ff62 	bl	8002a10 <HAL_SD_GetCardState>
 8002b4c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d002      	beq.n	8002b5a <SD_DMAError+0x6e>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10a      	bne.n	8002b70 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 fbb6 	bl	80042d0 <SDMMC_CmdStopTransfer>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff fd6c 	bl	800265c <HAL_SD_ErrorCallback>
#endif
  }
}
 8002b84:	bf00      	nop
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	004005ff 	.word	0x004005ff

08002b90 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f240 523a 	movw	r2, #1338	; 0x53a
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff ff31 	bl	8002a10 <HAL_SD_GetCardState>
 8002bae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b06      	cmp	r3, #6
 8002bc2:	d002      	beq.n	8002bca <SD_DMATxAbort+0x3a>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d10a      	bne.n	8002be0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 fb7e 	bl	80042d0 <SDMMC_CmdStopTransfer>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f002 fbff 	bl	80053ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002bee:	e002      	b.n	8002bf6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fd33 	bl	800265c <HAL_SD_ErrorCallback>
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fefa 	bl	8002a10 <HAL_SD_GetCardState>
 8002c1c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d002      	beq.n	8002c38 <SD_DMARxAbort+0x3a>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10a      	bne.n	8002c4e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fb47 	bl	80042d0 <SDMMC_CmdStopTransfer>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f002 fbc8 	bl	80053ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002c5c:	e002      	b.n	8002c64 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff fcfc 	bl	800265c <HAL_SD_ErrorCallback>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b094      	sub	sp, #80	; 0x50
 8002c70:	af04      	add	r7, sp, #16
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002c74:	2301      	movs	r3, #1
 8002c76:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 f9f8 	bl	8004072 <SDIO_GetPowerState>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c8c:	e0b8      	b.n	8002e00 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d02f      	beq.n	8002cf6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fbdf 	bl	800445e <SDMMC_CmdSendCID>
 8002ca0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <SD_InitCard+0x40>
    {
      return errorstate;
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002caa:	e0a9      	b.n	8002e00 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fa22 	bl	80040fc <SDIO_GetResponse>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fa19 	bl	80040fc <SDIO_GetResponse>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2108      	movs	r1, #8
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fa10 	bl	80040fc <SDIO_GetResponse>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	210c      	movs	r1, #12
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fa07 	bl	80040fc <SDIO_GetResponse>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d00d      	beq.n	8002d1a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f107 020e 	add.w	r2, r7, #14
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 fbe5 	bl	80044d8 <SDMMC_CmdSetRelAdd>
 8002d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <SD_InitCard+0xae>
    {
      return errorstate;
 8002d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d18:	e072      	b.n	8002e00 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d036      	beq.n	8002d90 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f001 fbaf 	bl	800449a <SDMMC_CmdSendCSD>
 8002d3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	e05b      	b.n	8002e00 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 f9d4 	bl	80040fc <SDIO_GetResponse>
 8002d54:	4602      	mov	r2, r0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2104      	movs	r1, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 f9cb 	bl	80040fc <SDIO_GetResponse>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2108      	movs	r1, #8
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f9c2 	bl	80040fc <SDIO_GetResponse>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	210c      	movs	r1, #12
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 f9b9 	bl	80040fc <SDIO_GetResponse>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2104      	movs	r1, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 f9b0 	bl	80040fc <SDIO_GetResponse>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	0d1a      	lsrs	r2, r3, #20
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fc60 	bl	8002670 <HAL_SD_GetCardCSD>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dba:	e021      	b.n	8002e00 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	461c      	mov	r4, r3
 8002dca:	4615      	mov	r5, r2
 8002dcc:	4622      	mov	r2, r4
 8002dce:	462b      	mov	r3, r5
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	f001 fa9f 	bl	8004314 <SDMMC_CmdSelDesel>
 8002dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <SD_InitCard+0x176>
  {
    return errorstate;
 8002dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de0:	e00e      	b.n	8002e00 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681d      	ldr	r5, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	466c      	mov	r4, sp
 8002dea:	f103 0210 	add.w	r2, r3, #16
 8002dee:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002df4:	3304      	adds	r3, #4
 8002df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df8:	4628      	mov	r0, r5
 8002dfa:	f001 f8e3 	bl	8003fc4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3740      	adds	r7, #64	; 0x40
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bdb0      	pop	{r4, r5, r7, pc}

08002e08 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fa9a 	bl	800435a <SDMMC_CmdGoIdleState>
 8002e26:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	e072      	b.n	8002f18 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 faad 	bl	8004396 <SDMMC_CmdOperCond>
 8002e3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 fa83 	bl	800435a <SDMMC_CmdGoIdleState>
 8002e54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	e05b      	b.n	8002f18 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d137      	bne.n	8002ede <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 faad 	bl	80043d4 <SDMMC_CmdAppCommand>
 8002e7a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02d      	beq.n	8002ede <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e86:	e047      	b.n	8002f18 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 faa0 	bl	80043d4 <SDMMC_CmdAppCommand>
 8002e94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <SD_PowerON+0x98>
    {
      return errorstate;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	e03b      	b.n	8002f18 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	491e      	ldr	r1, [pc, #120]	; (8002f20 <SD_PowerON+0x118>)
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 fab6 	bl	8004418 <SDMMC_CmdAppOperCommand>
 8002eac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002eb8:	e02e      	b.n	8002f18 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 f91b 	bl	80040fc <SDIO_GetResponse>
 8002ec6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	0fdb      	lsrs	r3, r3, #31
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <SD_PowerON+0xcc>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <SD_PowerON+0xce>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]

    count++;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3301      	adds	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d802      	bhi.n	8002eee <SD_PowerON+0xe6>
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0cc      	beq.n	8002e88 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d902      	bls.n	8002efe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002efc:	e00c      	b.n	8002f18 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8002f0e:	e002      	b.n	8002f16 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	c1100000 	.word	0xc1100000

08002f24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f38:	e018      	b.n	8002f6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f001 fae7 	bl	800451a <SDMMC_CmdSendStatus>
 8002f4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	e009      	b.n	8002f6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 f8cc 	bl	80040fc <SDIO_GetResponse>
 8002f64:	4602      	mov	r2, r0
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03f      	beq.n	800300e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e033      	b.n	8002ffc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 f83e 	bl	800401a <SDIO_ReadFIFO>
 8002f9e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0e1b      	lsrs	r3, r3, #24
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3301      	adds	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b07      	cmp	r3, #7
 8003000:	d9c8      	bls.n	8002f94 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d043      	beq.n	80030b8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e037      	b.n	80030a6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3b01      	subs	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	3b01      	subs	r3, #1
 800305e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	041a      	lsls	r2, r3, #16
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4313      	orrs	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	3b01      	subs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	061a      	lsls	r2, r3, #24
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4313      	orrs	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3301      	adds	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	3b01      	subs	r3, #1
 800308e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f107 0208 	add.w	r2, r7, #8
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 ffca 	bl	8004034 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3301      	adds	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b07      	cmp	r3, #7
 80030aa:	d9c4      	bls.n	8003036 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e041      	b.n	8003156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f839 	bl	800315e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f000 f9d8 	bl	80034b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e04e      	b.n	800322a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a23      	ldr	r2, [pc, #140]	; (8003238 <HAL_TIM_Base_Start_IT+0xc4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d022      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b6:	d01d      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1f      	ldr	r2, [pc, #124]	; (800323c <HAL_TIM_Base_Start_IT+0xc8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d018      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <HAL_TIM_Base_Start_IT+0xcc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <HAL_TIM_Base_Start_IT+0xd0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00e      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <HAL_TIM_Base_Start_IT+0xd4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a19      	ldr	r2, [pc, #100]	; (800324c <HAL_TIM_Base_Start_IT+0xd8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <HAL_TIM_Base_Start_IT+0xdc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d111      	bne.n	8003218 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b06      	cmp	r3, #6
 8003204:	d010      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003216:	e007      	b.n	8003228 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40010400 	.word	0x40010400
 800324c:	40014000 	.word	0x40014000
 8003250:	40001800 	.word	0x40001800

08003254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0202 	mvn.w	r2, #2
 8003280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8ee 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8e0 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8f1 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0204 	mvn.w	r2, #4
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8c4 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8b6 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f8c7 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0208 	mvn.w	r2, #8
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2204      	movs	r2, #4
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f89a 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f88c 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f89d 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b10      	cmp	r3, #16
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0210 	mvn.w	r2, #16
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2208      	movs	r2, #8
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f870 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f862 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f873 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10e      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0201 	mvn.w	r2, #1
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f00e ff70 	bl	80122b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d10e      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d107      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f902 	bl	8003608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d10e      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d107      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f838 	bl	80034a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d10e      	bne.n	800345c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d107      	bne.n	800345c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0220 	mvn.w	r2, #32
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8cc 	bl	80035f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3d      	ldr	r2, [pc, #244]	; (80035cc <TIM_Base_SetConfig+0x118>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <TIM_Base_SetConfig+0x11c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <TIM_Base_SetConfig+0x120>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d027      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <TIM_Base_SetConfig+0x118>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d023      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <TIM_Base_SetConfig+0x11c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01f      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <TIM_Base_SetConfig+0x120>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01b      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d017      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <TIM_Base_SetConfig+0x128>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <TIM_Base_SetConfig+0x12c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00f      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <TIM_Base_SetConfig+0x130>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00b      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <TIM_Base_SetConfig+0x134>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a24      	ldr	r2, [pc, #144]	; (80035ec <TIM_Base_SetConfig+0x138>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d003      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <TIM_Base_SetConfig+0x13c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d108      	bne.n	8003578 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0xf8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40010400 	.word	0x40010400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800
 80035e8:	40001800 	.word	0x40001800
 80035ec:	40001c00 	.word	0x40001c00
 80035f0:	40002000 	.word	0x40002000

080035f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003676:	481c      	ldr	r0, [pc, #112]	; (80036e8 <LL_ADC_CommonInit+0x80>)
 8003678:	f7ff ffe3 	bl	8003642 <LL_ADC_IsEnabled>
 800367c:	4604      	mov	r4, r0
 800367e:	481b      	ldr	r0, [pc, #108]	; (80036ec <LL_ADC_CommonInit+0x84>)
 8003680:	f7ff ffdf 	bl	8003642 <LL_ADC_IsEnabled>
 8003684:	4603      	mov	r3, r0
 8003686:	431c      	orrs	r4, r3
 8003688:	4819      	ldr	r0, [pc, #100]	; (80036f0 <LL_ADC_CommonInit+0x88>)
 800368a:	f7ff ffda 	bl	8003642 <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	4323      	orrs	r3, r4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d120      	bne.n	80036d8 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <LL_ADC_CommonInit+0x8c>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6852      	ldr	r2, [r2, #4]
 80036ae:	4311      	orrs	r1, r2
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	4311      	orrs	r1, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	68d2      	ldr	r2, [r2, #12]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e00b      	b.n	80036dc <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <LL_ADC_CommonInit+0x8c>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e001      	b.n	80036dc <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd90      	pop	{r4, r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40012000 	.word	0x40012000
 80036ec:	40012100 	.word	0x40012100
 80036f0:	40012200 	.word	0x40012200
 80036f4:	fffc10e0 	.word	0xfffc10e0

080036f8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff9b 	bl	8003642 <LL_ADC_IsEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d117      	bne.n	8003742 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800371a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6811      	ldr	r1, [r2, #0]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	6892      	ldr	r2, [r2, #8]
 8003726:	430a      	orrs	r2, r1
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	e001      	b.n	8003746 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff6f 	bl	8003642 <LL_ADC_IsEnabled>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12b      	bne.n	80037c2 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	e005      	b.n	8003792 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <LL_ADC_REG_Init+0x80>)
 8003798:	4013      	ands	r3, r2
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	4311      	orrs	r1, r2
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	6912      	ldr	r2, [r2, #16]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ff2e 	bl	800361c <LL_ADC_REG_SetSequencerLength>
 80037c0:	e001      	b.n	80037c6 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	c0fffcfd 	.word	0xc0fffcfd

080037d4 <LL_GPIO_SetPinMode>:
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2103      	movs	r1, #3
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	61bb      	str	r3, [r7, #24]
  return result;
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	431a      	orrs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_GPIO_SetPinOutputType>:
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	605a      	str	r2, [r3, #4]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_GPIO_SetPinSpeed>:
{
 8003862:	b480      	push	{r7}
 8003864:	b089      	sub	sp, #36	; 0x24
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	613b      	str	r3, [r7, #16]
  return result;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2103      	movs	r1, #3
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	401a      	ands	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	61bb      	str	r3, [r7, #24]
  return result;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	609a      	str	r2, [r3, #8]
}
 80038b4:	bf00      	nop
 80038b6:	3724      	adds	r7, #36	; 0x24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_GPIO_SetPinPull>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	613b      	str	r3, [r7, #16]
  return result;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2103      	movs	r1, #3
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	401a      	ands	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	61bb      	str	r3, [r7, #24]
  return result;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	60da      	str	r2, [r3, #12]
}
 8003912:	bf00      	nop
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_GPIO_SetAFPin_0_7>:
{
 800391e:	b480      	push	{r7}
 8003920:	b089      	sub	sp, #36	; 0x24
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1a      	ldr	r2, [r3, #32]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	613b      	str	r3, [r7, #16]
  return result;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	210f      	movs	r1, #15
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	401a      	ands	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	61bb      	str	r3, [r7, #24]
  return result;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	3724      	adds	r7, #36	; 0x24
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_GPIO_SetAFPin_8_15>:
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	613b      	str	r3, [r7, #16]
  return result;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	210f      	movs	r1, #15
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	401a      	ands	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	61bb      	str	r3, [r7, #24]
  return result;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b088      	sub	sp, #32
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	613b      	str	r3, [r7, #16]
  return result;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a08:	e050      	b.n	8003aac <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d042      	beq.n	8003aa6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d003      	beq.n	8003a30 <LL_GPIO_Init+0x52>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d10d      	bne.n	8003a4c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	461a      	mov	r2, r3
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff12 	bl	8003862 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	461a      	mov	r2, r3
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fef3 	bl	8003832 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	461a      	mov	r2, r3
 8003a52:	69b9      	ldr	r1, [r7, #24]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff33 	bl	80038c0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d11a      	bne.n	8003a98 <LL_GPIO_Init+0xba>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	60bb      	str	r3, [r7, #8]
  return result;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b07      	cmp	r3, #7
 8003a78:	d807      	bhi.n	8003a8a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	69b9      	ldr	r1, [r7, #24]
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff4b 	bl	800391e <LL_GPIO_SetAFPin_0_7>
 8003a88:	e006      	b.n	8003a98 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ff72 	bl	800397c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fe97 	bl	80037d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1a7      	bne.n	8003a0a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 0201 	bic.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f023 021f 	bic.w	r2, r3, #31
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4a42      	ldr	r2, [pc, #264]	; (8003c84 <LL_I2C_ConfigSpeed+0x124>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	0c9b      	lsrs	r3, r3, #18
 8003b80:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	493a      	ldr	r1, [pc, #232]	; (8003c88 <LL_I2C_ConfigSpeed+0x128>)
 8003b9e:	428b      	cmp	r3, r1
 8003ba0:	d802      	bhi.n	8003ba8 <LL_I2C_ConfigSpeed+0x48>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	e009      	b.n	8003bbc <LL_I2C_ConfigSpeed+0x5c>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4936      	ldr	r1, [pc, #216]	; (8003c8c <LL_I2C_ConfigSpeed+0x12c>)
 8003bb4:	fba1 1303 	umull	r1, r3, r1, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3301      	adds	r3, #1
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	; (8003c88 <LL_I2C_ConfigSpeed+0x128>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d939      	bls.n	8003c3e <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d117      	bne.n	8003c00 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf8:	e01d      	b.n	8003c36 <LL_I2C_ConfigSpeed+0xd6>
 8003bfa:	f248 0301 	movw	r3, #32769	; 0x8001
 8003bfe:	e01a      	b.n	8003c36 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009a      	lsls	r2, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c30:	e001      	b.n	8003c36 <LL_I2C_ConfigSpeed+0xd6>
 8003c32:	f248 0301 	movw	r3, #32769	; 0x8001
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e011      	b.n	8003c62 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c4c:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	e000      	b.n	8003c60 <LL_I2C_ConfigSpeed+0x100>
 8003c5e:	2304      	movs	r3, #4
 8003c60:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	61da      	str	r2, [r3, #28]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	431bde83 	.word	0x431bde83
 8003c88:	000186a0 	.word	0x000186a0
 8003c8c:	10624dd3 	.word	0x10624dd3

08003c90 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 021a 	bic.w	r2, r3, #26
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fefc 	bl	8003ae4 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f89d 	bl	8003e30 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68d9      	ldr	r1, [r3, #12]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff feff 	bl	8003b04 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff25 	bl	8003b60 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6959      	ldr	r1, [r3, #20]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff05 	bl	8003b30 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ffaf 	bl	8003c90 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fec6 	bl	8003ac4 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ffb9 	bl	8003cb6 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <LL_RCC_GetSysClkSource+0x18>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <LL_RCC_GetAHBPrescaler+0x18>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <LL_RCC_GetAPB2Prescaler+0x18>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <LL_RCC_PLL_GetMainSource+0x18>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <LL_RCC_PLL_GetN+0x18>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40023800 	.word	0x40023800

08003df8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <LL_RCC_PLL_GetP+0x18>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800

08003e14 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <LL_RCC_PLL_GetDivider+0x18>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800

08003e30 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e38:	f000 f820 	bl	8003e7c <RCC_GetSystemClockFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f840 	bl	8003ecc <RCC_GetHCLKClockFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f84e 	bl	8003ef8 <RCC_GetPCLK1ClockFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f85a 	bl	8003f20 <RCC_GetPCLK2ClockFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e86:	f7ff ff63 	bl	8003d50 <LL_RCC_GetSysClkSource>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d00c      	beq.n	8003eaa <RCC_GetSystemClockFreq+0x2e>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d80f      	bhi.n	8003eb4 <RCC_GetSystemClockFreq+0x38>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <RCC_GetSystemClockFreq+0x22>
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d003      	beq.n	8003ea4 <RCC_GetSystemClockFreq+0x28>
 8003e9c:	e00a      	b.n	8003eb4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <RCC_GetSystemClockFreq+0x48>)
 8003ea0:	607b      	str	r3, [r7, #4]
      break;
 8003ea2:	e00a      	b.n	8003eba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <RCC_GetSystemClockFreq+0x4c>)
 8003ea6:	607b      	str	r3, [r7, #4]
      break;
 8003ea8:	e007      	b.n	8003eba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003eaa:	2008      	movs	r0, #8
 8003eac:	f000 f84c 	bl	8003f48 <RCC_PLL_GetFreqDomain_SYS>
 8003eb0:	6078      	str	r0, [r7, #4]
      break;
 8003eb2:	e002      	b.n	8003eba <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <RCC_GetSystemClockFreq+0x48>)
 8003eb6:	607b      	str	r3, [r7, #4]
      break;
 8003eb8:	bf00      	nop
  }

  return frequency;
 8003eba:	687b      	ldr	r3, [r7, #4]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ed4:	f7ff ff4a 	bl	8003d6c <LL_RCC_GetAHBPrescaler>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <RCC_GetHCLKClockFreq+0x28>)
 8003ee2:	5cd3      	ldrb	r3, [r2, r3]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	40d3      	lsrs	r3, r2
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	080147b4 	.word	0x080147b4

08003ef8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003f00:	f7ff ff42 	bl	8003d88 <LL_RCC_GetAPB1Prescaler>
 8003f04:	4603      	mov	r3, r0
 8003f06:	0a9b      	lsrs	r3, r3, #10
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <RCC_GetPCLK1ClockFreq+0x24>)
 8003f0a:	5cd3      	ldrb	r3, [r2, r3]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	40d3      	lsrs	r3, r2
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	080147c4 	.word	0x080147c4

08003f20 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f28:	f7ff ff3c 	bl	8003da4 <LL_RCC_GetAPB2Prescaler>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	0b5b      	lsrs	r3, r3, #13
 8003f30:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	461a      	mov	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	40d3      	lsrs	r3, r2
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	080147c4 	.word	0x080147c4

08003f48 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f5c:	f7ff ff30 	bl	8003dc0 <LL_RCC_PLL_GetMainSource>
 8003f60:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6e:	d003      	beq.n	8003f78 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003f70:	e005      	b.n	8003f7e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f74:	617b      	str	r3, [r7, #20]
      break;
 8003f76:	e005      	b.n	8003f84 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f78:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f7a:	617b      	str	r3, [r7, #20]
      break;
 8003f7c:	e002      	b.n	8003f84 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f80:	617b      	str	r3, [r7, #20]
      break;
 8003f82:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d113      	bne.n	8003fb2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f8a:	f7ff ff43 	bl	8003e14 <LL_RCC_PLL_GetDivider>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f96:	f7ff ff21 	bl	8003ddc <LL_RCC_PLL_GetN>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	fb03 f404 	mul.w	r4, r3, r4
 8003fa0:	f7ff ff2a 	bl	8003df8 <LL_RCC_PLL_GetP>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	3301      	adds	r3, #1
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fbb4 f3f3 	udiv	r3, r4, r3
 8003fb0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003fb2:	693b      	ldr	r3, [r7, #16]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd90      	pop	{r4, r7, pc}
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	007a1200 	.word	0x007a1200

08003fc4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	f107 001c 	add.w	r0, r7, #28
 8003fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003fda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003fde:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003fe2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003fe6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003fea:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003fee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003ffe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	b004      	add	sp, #16
 8004018:	4770      	bx	lr

0800401a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2203      	movs	r2, #3
 8004062:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0303 	and.w	r3, r3, #3
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040ac:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80040b2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80040b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80040c8:	f023 030f 	bic.w	r3, r3, #15
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	b2db      	uxtb	r3, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3314      	adds	r3, #20
 800410a:	461a      	mov	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4413      	add	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
}  
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004148:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800414e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004154:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800416c:	2300      	movs	r3, #0

}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b088      	sub	sp, #32
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004188:	2310      	movs	r3, #16
 800418a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800418c:	2340      	movs	r3, #64	; 0x40
 800418e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004198:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff74 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	2110      	movs	r1, #16
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f9d7 	bl	8004560 <SDMMC_GetCmdResp1>
 80041b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041b4:	69fb      	ldr	r3, [r7, #28]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b088      	sub	sp, #32
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80041cc:	2311      	movs	r3, #17
 80041ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff52 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	2111      	movs	r1, #17
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f9b5 	bl	8004560 <SDMMC_GetCmdResp1>
 80041f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041f8:	69fb      	ldr	r3, [r7, #28]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b088      	sub	sp, #32
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004210:	2312      	movs	r3, #18
 8004212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004214:	2340      	movs	r3, #64	; 0x40
 8004216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800421c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004220:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff30 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	2112      	movs	r1, #18
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f993 	bl	8004560 <SDMMC_GetCmdResp1>
 800423a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800423c:	69fb      	ldr	r3, [r7, #28]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b088      	sub	sp, #32
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004254:	2318      	movs	r3, #24
 8004256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004258:	2340      	movs	r3, #64	; 0x40
 800425a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff0e 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	2118      	movs	r1, #24
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f971 	bl	8004560 <SDMMC_GetCmdResp1>
 800427e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004280:	69fb      	ldr	r3, [r7, #28]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b088      	sub	sp, #32
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004298:	2319      	movs	r3, #25
 800429a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042aa:	f107 0308 	add.w	r3, r7, #8
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff feec 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	2119      	movs	r1, #25
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f94f 	bl	8004560 <SDMMC_GetCmdResp1>
 80042c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042c4:	69fb      	ldr	r3, [r7, #28]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80042dc:	230c      	movs	r3, #12
 80042de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042e0:	2340      	movs	r3, #64	; 0x40
 80042e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff feca 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042fa:	4a05      	ldr	r2, [pc, #20]	; (8004310 <SDMMC_CmdStopTransfer+0x40>)
 80042fc:	210c      	movs	r1, #12
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f92e 	bl	8004560 <SDMMC_GetCmdResp1>
 8004304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004306:	69fb      	ldr	r3, [r7, #28]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	05f5e100 	.word	0x05f5e100

08004314 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004324:	2307      	movs	r3, #7
 8004326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004328:	2340      	movs	r3, #64	; 0x40
 800432a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004334:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004336:	f107 0310 	add.w	r3, r7, #16
 800433a:	4619      	mov	r1, r3
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff fea6 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	2107      	movs	r1, #7
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f909 	bl	8004560 <SDMMC_GetCmdResp1>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004352:	4618      	mov	r0, r3
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b088      	sub	sp, #32
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004376:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004378:	f107 0308 	add.w	r3, r7, #8
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fe85 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb23 	bl	80049d0 <SDMMC_GetCmdError>
 800438a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800438c:	69fb      	ldr	r3, [r7, #28]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b088      	sub	sp, #32
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800439e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80043a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80043a4:	2308      	movs	r3, #8
 80043a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043a8:	2340      	movs	r3, #64	; 0x40
 80043aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043b6:	f107 0308 	add.w	r3, r7, #8
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fe66 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fab6 	bl	8004934 <SDMMC_GetCmdResp7>
 80043c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043ca:	69fb      	ldr	r3, [r7, #28]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80043e2:	2337      	movs	r3, #55	; 0x37
 80043e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043e6:	2340      	movs	r3, #64	; 0x40
 80043e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fe47 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004400:	f241 3288 	movw	r2, #5000	; 0x1388
 8004404:	2137      	movs	r1, #55	; 0x37
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8aa 	bl	8004560 <SDMMC_GetCmdResp1>
 800440c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800440e:	69fb      	ldr	r3, [r7, #28]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800442c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800442e:	2329      	movs	r3, #41	; 0x29
 8004430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004432:	2340      	movs	r3, #64	; 0x40
 8004434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800443a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800443e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fe21 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9bd 	bl	80047cc <SDMMC_GetCmdResp3>
 8004452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004454:	69fb      	ldr	r3, [r7, #28]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800446a:	2302      	movs	r3, #2
 800446c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800446e:	23c0      	movs	r3, #192	; 0xc0
 8004470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fe03 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f957 	bl	800473c <SDMMC_GetCmdResp2>
 800448e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004490:	69fb      	ldr	r3, [r7, #28]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b088      	sub	sp, #32
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80044a8:	2309      	movs	r3, #9
 80044aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80044ac:	23c0      	movs	r3, #192	; 0xc0
 80044ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fde4 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f938 	bl	800473c <SDMMC_GetCmdResp2>
 80044cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044ce:	69fb      	ldr	r3, [r7, #28]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80044e6:	2303      	movs	r3, #3
 80044e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044ea:	2340      	movs	r3, #64	; 0x40
 80044ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044f8:	f107 0308 	add.w	r3, r7, #8
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fdc5 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	2103      	movs	r1, #3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f99d 	bl	8004848 <SDMMC_GetCmdResp6>
 800450e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004510:	69fb      	ldr	r3, [r7, #28]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b088      	sub	sp, #32
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004528:	230d      	movs	r3, #13
 800452a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800452c:	2340      	movs	r3, #64	; 0x40
 800452e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800453a:	f107 0308 	add.w	r3, r7, #8
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fda4 	bl	800408e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	210d      	movs	r1, #13
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f807 	bl	8004560 <SDMMC_GetCmdResp1>
 8004552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004554:	69fb      	ldr	r3, [r7, #28]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	460b      	mov	r3, r1
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800456e:	4b70      	ldr	r3, [pc, #448]	; (8004730 <SDMMC_GetCmdResp1+0x1d0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a70      	ldr	r2, [pc, #448]	; (8004734 <SDMMC_GetCmdResp1+0x1d4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	0a5a      	lsrs	r2, r3, #9
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	1e5a      	subs	r2, r3, #1
 8004586:	61fa      	str	r2, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800458c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004590:	e0c9      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ef      	beq.n	8004582 <SDMMC_GetCmdResp1+0x22>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ea      	bne.n	8004582 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2204      	movs	r2, #4
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045be:	2304      	movs	r3, #4
 80045c0:	e0b1      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0a6      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	22c5      	movs	r2, #197	; 0xc5
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff fd7f 	bl	80040e2 <SDIO_GetCommandResponse>
 80045e4:	4603      	mov	r3, r0
 80045e6:	461a      	mov	r2, r3
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d001      	beq.n	80045f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e099      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80045f2:	2100      	movs	r1, #0
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fd81 	bl	80040fc <SDIO_GetResponse>
 80045fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4b4e      	ldr	r3, [pc, #312]	; (8004738 <SDMMC_GetCmdResp1+0x1d8>)
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004606:	2300      	movs	r3, #0
 8004608:	e08d      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	da02      	bge.n	8004616 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004614:	e087      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	e080      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	e079      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800463c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004640:	e071      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800464c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004650:	e069      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800465c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004660:	e061      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800466c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004670:	e059      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800467c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004680:	e051      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800468c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004690:	e049      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800469c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046a0:	e041      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80046ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b0:	e039      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80046bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c0:	e031      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80046cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046d0:	e029      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80046dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046e0:	e021      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80046ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046f0:	e019      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80046fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004700:	e011      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800470c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004710:	e009      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800471c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004720:	e001      	b.n	8004726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000014 	.word	0x20000014
 8004734:	10624dd3 	.word	0x10624dd3
 8004738:	fdffe008 	.word	0xfdffe008

0800473c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004744:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <SDMMC_GetCmdResp2+0x88>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <SDMMC_GetCmdResp2+0x8c>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0a5b      	lsrs	r3, r3, #9
 8004750:	f241 3288 	movw	r2, #5000	; 0x1388
 8004754:	fb02 f303 	mul.w	r3, r2, r3
 8004758:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	60fa      	str	r2, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004764:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004768:	e026      	b.n	80047b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ef      	beq.n	800475a <SDMMC_GetCmdResp2+0x1e>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ea      	bne.n	800475a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2204      	movs	r2, #4
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004796:	2304      	movs	r3, #4
 8004798:	e00e      	b.n	80047b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e003      	b.n	80047b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	22c5      	movs	r2, #197	; 0xc5
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000014 	.word	0x20000014
 80047c8:	10624dd3 	.word	0x10624dd3

080047cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <SDMMC_GetCmdResp3+0x74>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <SDMMC_GetCmdResp3+0x78>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	0a5b      	lsrs	r3, r3, #9
 80047e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	60fa      	str	r2, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047f8:	e01b      	b.n	8004832 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ef      	beq.n	80047ea <SDMMC_GetCmdResp3+0x1e>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ea      	bne.n	80047ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2204      	movs	r2, #4
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004826:	2304      	movs	r3, #4
 8004828:	e003      	b.n	8004832 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	22c5      	movs	r2, #197	; 0xc5
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000014 	.word	0x20000014
 8004844:	10624dd3 	.word	0x10624dd3

08004848 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	460b      	mov	r3, r1
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004856:	4b35      	ldr	r3, [pc, #212]	; (800492c <SDMMC_GetCmdResp6+0xe4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a35      	ldr	r2, [pc, #212]	; (8004930 <SDMMC_GetCmdResp6+0xe8>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	1e5a      	subs	r2, r3, #1
 8004870:	61fa      	str	r2, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800487a:	e052      	b.n	8004922 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ef      	beq.n	800486c <SDMMC_GetCmdResp6+0x24>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ea      	bne.n	800486c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2204      	movs	r2, #4
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048a8:	2304      	movs	r3, #4
 80048aa:	e03a      	b.n	8004922 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048be:	2301      	movs	r3, #1
 80048c0:	e02f      	b.n	8004922 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fc0d 	bl	80040e2 <SDIO_GetCommandResponse>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d001      	beq.n	80048d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e025      	b.n	8004922 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	22c5      	movs	r2, #197	; 0xc5
 80048da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80048dc:	2100      	movs	r1, #0
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff fc0c 	bl	80040fc <SDIO_GetResponse>
 80048e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	0c1b      	lsrs	r3, r3, #16
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e011      	b.n	8004922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800490c:	e009      	b.n	8004922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800491c:	e001      	b.n	8004922 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800491e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000014 	.word	0x20000014
 8004930:	10624dd3 	.word	0x10624dd3

08004934 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <SDMMC_GetCmdResp7+0x94>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <SDMMC_GetCmdResp7+0x98>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0a5b      	lsrs	r3, r3, #9
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1e5a      	subs	r2, r3, #1
 8004956:	60fa      	str	r2, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800495c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004960:	e02c      	b.n	80049bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <SDMMC_GetCmdResp7+0x1e>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1ea      	bne.n	8004952 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2204      	movs	r2, #4
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800498e:	2304      	movs	r3, #4
 8004990:	e014      	b.n	80049bc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e009      	b.n	80049bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2240      	movs	r2, #64	; 0x40
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80049ba:	2300      	movs	r3, #0
  
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	20000014 	.word	0x20000014
 80049cc:	10624dd3 	.word	0x10624dd3

080049d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <SDMMC_GetCmdError+0x50>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a11      	ldr	r2, [pc, #68]	; (8004a24 <SDMMC_GetCmdError+0x54>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0a5b      	lsrs	r3, r3, #9
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	60fa      	str	r2, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049fc:	e009      	b.n	8004a12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f1      	beq.n	80049ee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	22c5      	movs	r2, #197	; 0xc5
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000014 	.word	0x20000014
 8004a24:	10624dd3 	.word	0x10624dd3

08004a28 <LL_SPI_IsEnabled>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d101      	bne.n	8004a40 <LL_SPI_IsEnabled+0x18>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <LL_SPI_IsEnabled+0x1a>
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ffd3 	bl	8004a28 <LL_SPI_IsEnabled>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d139      	bne.n	8004afc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a90:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	6811      	ldr	r1, [r2, #0]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	6852      	ldr	r2, [r2, #4]
 8004a9c:	4311      	orrs	r1, r2
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	6892      	ldr	r2, [r2, #8]
 8004aa2:	4311      	orrs	r1, r2
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	68d2      	ldr	r2, [r2, #12]
 8004aa8:	4311      	orrs	r1, r2
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	6912      	ldr	r2, [r2, #16]
 8004aae:	4311      	orrs	r1, r2
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	6952      	ldr	r2, [r2, #20]
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	6992      	ldr	r2, [r2, #24]
 8004aba:	4311      	orrs	r1, r2
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	69d2      	ldr	r2, [r2, #28]
 8004ac0:	4311      	orrs	r1, r2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	6a12      	ldr	r2, [r2, #32]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f023 0204 	bic.w	r2, r3, #4
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aea:	d105      	bne.n	8004af8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	4619      	mov	r1, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff ffab 	bl	8004a4e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	61da      	str	r2, [r3, #28]
  return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	615a      	str	r2, [r3, #20]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3d      	ldr	r2, [pc, #244]	; (8004c90 <LL_TIM_Init+0x108>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d013      	beq.n	8004bc8 <LL_TIM_Init+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d00f      	beq.n	8004bc8 <LL_TIM_Init+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <LL_TIM_Init+0x10c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <LL_TIM_Init+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a39      	ldr	r2, [pc, #228]	; (8004c98 <LL_TIM_Init+0x110>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <LL_TIM_Init+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a38      	ldr	r2, [pc, #224]	; (8004c9c <LL_TIM_Init+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <LL_TIM_Init+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a37      	ldr	r2, [pc, #220]	; (8004ca0 <LL_TIM_Init+0x118>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d106      	bne.n	8004bd6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	; (8004c90 <LL_TIM_Init+0x108>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d02b      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be4:	d027      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <LL_TIM_Init+0x10c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d023      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <LL_TIM_Init+0x110>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01f      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <LL_TIM_Init+0x114>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01b      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <LL_TIM_Init+0x118>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d017      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <LL_TIM_Init+0x11c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <LL_TIM_Init+0x120>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00f      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a24      	ldr	r2, [pc, #144]	; (8004cac <LL_TIM_Init+0x124>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a23      	ldr	r2, [pc, #140]	; (8004cb0 <LL_TIM_Init+0x128>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a22      	ldr	r2, [pc, #136]	; (8004cb4 <LL_TIM_Init+0x12c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <LL_TIM_Init+0xae>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a21      	ldr	r2, [pc, #132]	; (8004cb8 <LL_TIM_Init+0x130>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d106      	bne.n	8004c44 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff ff6c 	bl	8004b2e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff58 	bl	8004b12 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <LL_TIM_Init+0x108>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <LL_TIM_Init+0xea>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <LL_TIM_Init+0x118>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d105      	bne.n	8004c7e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ff66 	bl	8004b4a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ff71 	bl	8004b66 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40010400 	.word	0x40010400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800
 8004cb0:	40001800 	.word	0x40001800
 8004cb4:	40001c00 	.word	0x40001c00
 8004cb8:	40002000 	.word	0x40002000

08004cbc <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	611a      	str	r2, [r3, #16]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	615a      	str	r2, [r3, #20]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d34:	b0c0      	sub	sp, #256	; 0x100
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d3c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004d40:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	f040 810c 	bne.w	8004f6c <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	1891      	adds	r1, r2, r2
 8004d6c:	6639      	str	r1, [r7, #96]	; 0x60
 8004d6e:	415b      	adcs	r3, r3
 8004d70:	667b      	str	r3, [r7, #100]	; 0x64
 8004d72:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004d76:	4621      	mov	r1, r4
 8004d78:	eb12 0801 	adds.w	r8, r2, r1
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	eb43 0901 	adc.w	r9, r3, r1
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d96:	4690      	mov	r8, r2
 8004d98:	4699      	mov	r9, r3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	eb18 0303 	adds.w	r3, r8, r3
 8004da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004da4:	462b      	mov	r3, r5
 8004da6:	eb49 0303 	adc.w	r3, r9, r3
 8004daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004db2:	2200      	movs	r2, #0
 8004db4:	469a      	mov	sl, r3
 8004db6:	4693      	mov	fp, r2
 8004db8:	eb1a 030a 	adds.w	r3, sl, sl
 8004dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dbe:	eb4b 030b 	adc.w	r3, fp, fp
 8004dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dcc:	f7fb fab0 	bl	8000330 <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <LL_USART_SetBaudRate+0x238>)
 8004dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	b29c      	uxth	r4, r3
 8004de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dec:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004df0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	6539      	str	r1, [r7, #80]	; 0x50
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e38:	464b      	mov	r3, r9
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	eb42 0303 	adc.w	r3, r2, r3
 8004e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e4e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004e52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e56:	460b      	mov	r3, r1
 8004e58:	18db      	adds	r3, r3, r3
 8004e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	eb42 0303 	adc.w	r3, r2, r3
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e68:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e6c:	f7fb fa60 	bl	8000330 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	4b3c      	ldr	r3, [pc, #240]	; (8004f68 <LL_USART_SetBaudRate+0x238>)
 8004e78:	fba3 2301 	umull	r2, r3, r3, r1
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	2264      	movs	r2, #100	; 0x64
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	1acb      	subs	r3, r1, r3
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e8c:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <LL_USART_SetBaudRate+0x238>)
 8004e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	4423      	add	r3, r4
 8004ea2:	b29c      	uxth	r4, r3
 8004ea4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eae:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004eb2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	464b      	mov	r3, r9
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ebe:	415b      	adcs	r3, r3
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	1851      	adds	r1, r2, r1
 8004eca:	6339      	str	r1, [r7, #48]	; 0x30
 8004ecc:	4649      	mov	r1, r9
 8004ece:	414b      	adcs	r3, r1
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ede:	4659      	mov	r1, fp
 8004ee0:	00cb      	lsls	r3, r1, #3
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee8:	4651      	mov	r1, sl
 8004eea:	00ca      	lsls	r2, r1, #3
 8004eec:	4610      	mov	r0, r2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004efa:	464b      	mov	r3, r9
 8004efc:	460a      	mov	r2, r1
 8004efe:	eb42 0303 	adc.w	r3, r2, r3
 8004f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f10:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004f14:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	18db      	adds	r3, r3, r3
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f1e:	4613      	mov	r3, r2
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004f2e:	f7fb f9ff 	bl	8000330 <__aeabi_uldivmod>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <LL_USART_SetBaudRate+0x238>)
 8004f38:	fba3 1302 	umull	r1, r3, r3, r2
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	2164      	movs	r1, #100	; 0x64
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	3332      	adds	r3, #50	; 0x32
 8004f4a:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <LL_USART_SetBaudRate+0x238>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	4423      	add	r3, r4
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8004f66:	e107      	b.n	8005178 <LL_USART_SetBaudRate+0x448>
 8004f68:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f76:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f7a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	6239      	str	r1, [r7, #32]
 8004f86:	415b      	adcs	r3, r3
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f8e:	4641      	mov	r1, r8
 8004f90:	1854      	adds	r4, r2, r1
 8004f92:	4649      	mov	r1, r9
 8004f94:	eb43 0501 	adc.w	r5, r3, r1
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	00eb      	lsls	r3, r5, #3
 8004fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa6:	00e2      	lsls	r2, r4, #3
 8004fa8:	4614      	mov	r4, r2
 8004faa:	461d      	mov	r5, r3
 8004fac:	4643      	mov	r3, r8
 8004fae:	18e3      	adds	r3, r4, r3
 8004fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	eb45 0303 	adc.w	r3, r5, r3
 8004fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fc8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004fd8:	4629      	mov	r1, r5
 8004fda:	008b      	lsls	r3, r1, #2
 8004fdc:	4621      	mov	r1, r4
 8004fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	008a      	lsls	r2, r1, #2
 8004fe6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004fea:	f7fb f9a1 	bl	8000330 <__aeabi_uldivmod>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4b64      	ldr	r3, [pc, #400]	; (8005184 <LL_USART_SetBaudRate+0x454>)
 8004ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	b29c      	uxth	r4, r3
 8005000:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005004:	2200      	movs	r2, #0
 8005006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800500a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800500e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005012:	4642      	mov	r2, r8
 8005014:	464b      	mov	r3, r9
 8005016:	1891      	adds	r1, r2, r2
 8005018:	61b9      	str	r1, [r7, #24]
 800501a:	415b      	adcs	r3, r3
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005022:	4641      	mov	r1, r8
 8005024:	1851      	adds	r1, r2, r1
 8005026:	6139      	str	r1, [r7, #16]
 8005028:	4649      	mov	r1, r9
 800502a:	414b      	adcs	r3, r1
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800503a:	4659      	mov	r1, fp
 800503c:	00cb      	lsls	r3, r1, #3
 800503e:	4651      	mov	r1, sl
 8005040:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005044:	4651      	mov	r1, sl
 8005046:	00ca      	lsls	r2, r1, #3
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	4603      	mov	r3, r0
 800504e:	4642      	mov	r2, r8
 8005050:	189b      	adds	r3, r3, r2
 8005052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005056:	464b      	mov	r3, r9
 8005058:	460a      	mov	r2, r1
 800505a:	eb42 0303 	adc.w	r3, r2, r3
 800505e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005062:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005066:	2200      	movs	r2, #0
 8005068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800506c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800507c:	4649      	mov	r1, r9
 800507e:	008b      	lsls	r3, r1, #2
 8005080:	4641      	mov	r1, r8
 8005082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005086:	4641      	mov	r1, r8
 8005088:	008a      	lsls	r2, r1, #2
 800508a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800508e:	f7fb f94f 	bl	8000330 <__aeabi_uldivmod>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <LL_USART_SetBaudRate+0x454>)
 8005098:	fba3 1302 	umull	r1, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	2164      	movs	r1, #100	; 0x64
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	3332      	adds	r3, #50	; 0x32
 80050aa:	4a36      	ldr	r2, [pc, #216]	; (8005184 <LL_USART_SetBaudRate+0x454>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	4423      	add	r3, r4
 80050bc:	b29c      	uxth	r4, r3
 80050be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050c2:	2200      	movs	r2, #0
 80050c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	1891      	adds	r1, r2, r2
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	415b      	adcs	r3, r3
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050dc:	4641      	mov	r1, r8
 80050de:	1851      	adds	r1, r2, r1
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	4649      	mov	r1, r9
 80050e4:	414b      	adcs	r3, r1
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050f4:	4659      	mov	r1, fp
 80050f6:	00cb      	lsls	r3, r1, #3
 80050f8:	4651      	mov	r1, sl
 80050fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050fe:	4651      	mov	r1, sl
 8005100:	00ca      	lsls	r2, r1, #3
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	4603      	mov	r3, r0
 8005108:	4642      	mov	r2, r8
 800510a:	189b      	adds	r3, r3, r2
 800510c:	673b      	str	r3, [r7, #112]	; 0x70
 800510e:	464b      	mov	r3, r9
 8005110:	460a      	mov	r2, r1
 8005112:	eb42 0303 	adc.w	r3, r2, r3
 8005116:	677b      	str	r3, [r7, #116]	; 0x74
 8005118:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800511c:	2200      	movs	r2, #0
 800511e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005120:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800512e:	4649      	mov	r1, r9
 8005130:	008b      	lsls	r3, r1, #2
 8005132:	4641      	mov	r1, r8
 8005134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005138:	4641      	mov	r1, r8
 800513a:	008a      	lsls	r2, r1, #2
 800513c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005140:	f7fb f8f6 	bl	8000330 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <LL_USART_SetBaudRate+0x454>)
 800514a:	fba3 1302 	umull	r1, r3, r3, r2
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2164      	movs	r1, #100	; 0x64
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	3332      	adds	r3, #50	; 0x32
 800515c:	4a09      	ldr	r2, [pc, #36]	; (8005184 <LL_USART_SetBaudRate+0x454>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	b29b      	uxth	r3, r3
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	b29b      	uxth	r3, r3
 800516c:	4423      	add	r3, r4
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005184:	51eb851f 	.word	0x51eb851f

08005188 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005196:	2300      	movs	r3, #0
 8005198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fd8e 	bl	8004cbc <LL_USART_IsEnabled>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d16c      	bne.n	8005280 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051ae:	f023 030c 	bic.w	r3, r3, #12
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	6851      	ldr	r1, [r2, #4]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	68d2      	ldr	r2, [r2, #12]
 80051ba:	4311      	orrs	r1, r2
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	6912      	ldr	r2, [r2, #16]
 80051c0:	4311      	orrs	r1, r2
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	6992      	ldr	r2, [r2, #24]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fd85 	bl	8004ce4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fd92 	bl	8004d0a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fe20 	bl	8003e30 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a26      	ldr	r2, [pc, #152]	; (800528c <LL_USART_Init+0x104>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d102      	bne.n	80051fe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e02f      	b.n	800525e <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a23      	ldr	r2, [pc, #140]	; (8005290 <LL_USART_Init+0x108>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d102      	bne.n	800520c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e028      	b.n	800525e <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a21      	ldr	r2, [pc, #132]	; (8005294 <LL_USART_Init+0x10c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d102      	bne.n	800521a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e021      	b.n	800525e <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <LL_USART_Init+0x110>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d102      	bne.n	8005228 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e01a      	b.n	800525e <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <LL_USART_Init+0x114>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d102      	bne.n	8005236 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e013      	b.n	800525e <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <LL_USART_Init+0x118>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d102      	bne.n	8005244 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e00c      	b.n	800525e <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <LL_USART_Init+0x11c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d102      	bne.n	8005252 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e005      	b.n	800525e <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <LL_USART_Init+0x120>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 800526c:	2300      	movs	r3, #0
 800526e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69b9      	ldr	r1, [r7, #24]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fd58 	bl	8004d30 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005280:	7ffb      	ldrb	r3, [r7, #31]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40011000 	.word	0x40011000
 8005290:	40004400 	.word	0x40004400
 8005294:	40004800 	.word	0x40004800
 8005298:	40011400 	.word	0x40011400
 800529c:	40004c00 	.word	0x40004c00
 80052a0:	40005000 	.word	0x40005000
 80052a4:	40007800 	.word	0x40007800
 80052a8:	40007c00 	.word	0x40007c00

080052ac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80052b4:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <LL_mDelay+0x48>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80052ba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c2:	d00c      	beq.n	80052de <LL_mDelay+0x32>
  {
    Delay++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3301      	adds	r3, #1
 80052c8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80052ca:	e008      	b.n	80052de <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <LL_mDelay+0x48>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <LL_mDelay+0x32>
    {
      Delay--;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f3      	bne.n	80052cc <LL_mDelay+0x20>
    }
  }
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000e010 	.word	0xe000e010

080052f8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005300:	4a04      	ldr	r2, [pc, #16]	; (8005314 <LL_SetSystemCoreClock+0x1c>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6013      	str	r3, [r2, #0]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000014 	.word	0x20000014

08005318 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005322:	f000 f888 	bl	8005436 <BSP_SD_IsDetected>
 8005326:	4603      	mov	r3, r0
 8005328:	2b01      	cmp	r3, #1
 800532a:	d001      	beq.n	8005330 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e005      	b.n	800533c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005330:	4804      	ldr	r0, [pc, #16]	; (8005344 <BSP_SD_Init+0x2c>)
 8005332:	f7fc fd95 	bl	8001e60 <HAL_SD_Init>
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800533a:	79fb      	ldrb	r3, [r7, #7]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20005994 	.word	0x20005994

08005348 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	68f9      	ldr	r1, [r7, #12]
 800535e:	4806      	ldr	r0, [pc, #24]	; (8005378 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005360:	f7fc fe2e 	bl	8001fc0 <HAL_SD_ReadBlocks_DMA>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20005994 	.word	0x20005994

0800537c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	4806      	ldr	r0, [pc, #24]	; (80053ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8005394:	f7fc fef6 	bl	8002184 <HAL_SD_WriteBlocks_DMA>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20005994 	.word	0x20005994

080053b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80053b4:	4805      	ldr	r0, [pc, #20]	; (80053cc <BSP_SD_GetCardState+0x1c>)
 80053b6:	f7fd fb2b 	bl	8002a10 <HAL_SD_GetCardState>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b04      	cmp	r3, #4
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20005994 	.word	0x20005994

080053d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4803      	ldr	r0, [pc, #12]	; (80053e8 <BSP_SD_GetCardInfo+0x18>)
 80053dc:	f7fd faec 	bl	80029b8 <HAL_SD_GetCardInfo>
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20005994 	.word	0x20005994

080053ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80053f4:	f000 f818 	bl	8005428 <BSP_SD_AbortCallback>
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005408:	f003 f9b0 	bl	800876c <BSP_SD_WriteCpltCallback>
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800541c:	f003 f9b2 	bl	8008784 <BSP_SD_ReadCpltCallback>
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0

}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800543c:	2301      	movs	r3, #1
 800543e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	b2db      	uxtb	r3, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	2b7f      	cmp	r3, #127	; 0x7f
 8005460:	d802      	bhi.n	8005468 <ff_convert+0x18>
		c = chr;
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	81fb      	strh	r3, [r7, #14]
 8005466:	e025      	b.n	80054b4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	2bff      	cmp	r3, #255	; 0xff
 8005472:	d805      	bhi.n	8005480 <ff_convert+0x30>
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	3b80      	subs	r3, #128	; 0x80
 8005478:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <ff_convert+0x74>)
 800547a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547e:	e000      	b.n	8005482 <ff_convert+0x32>
 8005480:	2300      	movs	r3, #0
 8005482:	81fb      	strh	r3, [r7, #14]
 8005484:	e016      	b.n	80054b4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005486:	2300      	movs	r3, #0
 8005488:	81fb      	strh	r3, [r7, #14]
 800548a:	e009      	b.n	80054a0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800548c:	89fb      	ldrh	r3, [r7, #14]
 800548e:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <ff_convert+0x74>)
 8005490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005494:	88fa      	ldrh	r2, [r7, #6]
 8005496:	429a      	cmp	r2, r3
 8005498:	d006      	beq.n	80054a8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800549a:	89fb      	ldrh	r3, [r7, #14]
 800549c:	3301      	adds	r3, #1
 800549e:	81fb      	strh	r3, [r7, #14]
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	2b7f      	cmp	r3, #127	; 0x7f
 80054a4:	d9f2      	bls.n	800548c <ff_convert+0x3c>
 80054a6:	e000      	b.n	80054aa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80054a8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80054aa:	89fb      	ldrh	r3, [r7, #14]
 80054ac:	3380      	adds	r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80054b4:	89fb      	ldrh	r3, [r7, #14]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	080141e8 	.word	0x080141e8

080054c8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d201      	bcs.n	80054de <ff_wtoupper+0x16>
 80054da:	4b3e      	ldr	r3, [pc, #248]	; (80055d4 <ff_wtoupper+0x10c>)
 80054dc:	e000      	b.n	80054e0 <ff_wtoupper+0x18>
 80054de:	4b3e      	ldr	r3, [pc, #248]	; (80055d8 <ff_wtoupper+0x110>)
 80054e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	1c9a      	adds	r2, r3, #2
 80054e6:	617a      	str	r2, [r7, #20]
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80054ec:	8a7b      	ldrh	r3, [r7, #18]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d068      	beq.n	80055c4 <ff_wtoupper+0xfc>
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	8a7b      	ldrh	r3, [r7, #18]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d364      	bcc.n	80055c4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1c9a      	adds	r2, r3, #2
 80054fe:	617a      	str	r2, [r7, #20]
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	823b      	strh	r3, [r7, #16]
 8005504:	8a3b      	ldrh	r3, [r7, #16]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	81fb      	strh	r3, [r7, #14]
 800550a:	8a3b      	ldrh	r3, [r7, #16]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005510:	88fa      	ldrh	r2, [r7, #6]
 8005512:	8a79      	ldrh	r1, [r7, #18]
 8005514:	8a3b      	ldrh	r3, [r7, #16]
 8005516:	440b      	add	r3, r1
 8005518:	429a      	cmp	r2, r3
 800551a:	da49      	bge.n	80055b0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800551c:	89fb      	ldrh	r3, [r7, #14]
 800551e:	2b08      	cmp	r3, #8
 8005520:	d84f      	bhi.n	80055c2 <ff_wtoupper+0xfa>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <ff_wtoupper+0x60>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800554d 	.word	0x0800554d
 800552c:	0800555f 	.word	0x0800555f
 8005530:	08005575 	.word	0x08005575
 8005534:	0800557d 	.word	0x0800557d
 8005538:	08005585 	.word	0x08005585
 800553c:	0800558d 	.word	0x0800558d
 8005540:	08005595 	.word	0x08005595
 8005544:	0800559d 	.word	0x0800559d
 8005548:	080055a5 	.word	0x080055a5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	8a7b      	ldrh	r3, [r7, #18]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	80fb      	strh	r3, [r7, #6]
 800555c:	e027      	b.n	80055ae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	8a7b      	ldrh	r3, [r7, #18]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	b29b      	uxth	r3, r3
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	80fb      	strh	r3, [r7, #6]
 8005572:	e01c      	b.n	80055ae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	3b10      	subs	r3, #16
 8005578:	80fb      	strh	r3, [r7, #6]
 800557a:	e018      	b.n	80055ae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	3b20      	subs	r3, #32
 8005580:	80fb      	strh	r3, [r7, #6]
 8005582:	e014      	b.n	80055ae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	3b30      	subs	r3, #48	; 0x30
 8005588:	80fb      	strh	r3, [r7, #6]
 800558a:	e010      	b.n	80055ae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	3b1a      	subs	r3, #26
 8005590:	80fb      	strh	r3, [r7, #6]
 8005592:	e00c      	b.n	80055ae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	3308      	adds	r3, #8
 8005598:	80fb      	strh	r3, [r7, #6]
 800559a:	e008      	b.n	80055ae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	3b50      	subs	r3, #80	; 0x50
 80055a0:	80fb      	strh	r3, [r7, #6]
 80055a2:	e004      	b.n	80055ae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80055aa:	80fb      	strh	r3, [r7, #6]
 80055ac:	bf00      	nop
			}
			break;
 80055ae:	e008      	b.n	80055c2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80055b0:	89fb      	ldrh	r3, [r7, #14]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d195      	bne.n	80054e2 <ff_wtoupper+0x1a>
 80055b6:	8a3b      	ldrh	r3, [r7, #16]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80055c0:	e78f      	b.n	80054e2 <ff_wtoupper+0x1a>
			break;
 80055c2:	bf00      	nop
	}

	return chr;
 80055c4:	88fb      	ldrh	r3, [r7, #6]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	080142e8 	.word	0x080142e8
 80055d8:	080144dc 	.word	0x080144dc

080055dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	4a08      	ldr	r2, [pc, #32]	; (800560c <disk_status+0x30>)
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	79fa      	ldrb	r2, [r7, #7]
 80055f4:	4905      	ldr	r1, [pc, #20]	; (800560c <disk_status+0x30>)
 80055f6:	440a      	add	r2, r1
 80055f8:	7a12      	ldrb	r2, [r2, #8]
 80055fa:	4610      	mov	r0, r2
 80055fc:	4798      	blx	r3
 80055fe:	4603      	mov	r3, r0
 8005600:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200000d4 	.word	0x200000d4

08005610 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <disk_initialize+0x48>)
 8005622:	5cd3      	ldrb	r3, [r2, r3]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d111      	bne.n	800564c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	4a0b      	ldr	r2, [pc, #44]	; (8005658 <disk_initialize+0x48>)
 800562c:	2101      	movs	r1, #1
 800562e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <disk_initialize+0x48>)
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	79fa      	ldrb	r2, [r7, #7]
 800563e:	4906      	ldr	r1, [pc, #24]	; (8005658 <disk_initialize+0x48>)
 8005640:	440a      	add	r2, r1
 8005642:	7a12      	ldrb	r2, [r2, #8]
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	200000d4 	.word	0x200000d4

0800565c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <disk_read+0x3c>)
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	689c      	ldr	r4, [r3, #8]
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	4a07      	ldr	r2, [pc, #28]	; (8005698 <disk_read+0x3c>)
 800567c:	4413      	add	r3, r2
 800567e:	7a18      	ldrb	r0, [r3, #8]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	47a0      	blx	r4
 8005688:	4603      	mov	r3, r0
 800568a:	75fb      	strb	r3, [r7, #23]
  return res;
 800568c:	7dfb      	ldrb	r3, [r7, #23]
}
 800568e:	4618      	mov	r0, r3
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}
 8005696:	bf00      	nop
 8005698:	200000d4 	.word	0x200000d4

0800569c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4603      	mov	r3, r0
 80056aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	4a0a      	ldr	r2, [pc, #40]	; (80056d8 <disk_write+0x3c>)
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68dc      	ldr	r4, [r3, #12]
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <disk_write+0x3c>)
 80056bc:	4413      	add	r3, r2
 80056be:	7a18      	ldrb	r0, [r3, #8]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	47a0      	blx	r4
 80056c8:	4603      	mov	r3, r0
 80056ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200000d4 	.word	0x200000d4

080056dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	603a      	str	r2, [r7, #0]
 80056e6:	71fb      	strb	r3, [r7, #7]
 80056e8:	460b      	mov	r3, r1
 80056ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	4a09      	ldr	r2, [pc, #36]	; (8005714 <disk_ioctl+0x38>)
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	79fa      	ldrb	r2, [r7, #7]
 80056fa:	4906      	ldr	r1, [pc, #24]	; (8005714 <disk_ioctl+0x38>)
 80056fc:	440a      	add	r2, r1
 80056fe:	7a10      	ldrb	r0, [r2, #8]
 8005700:	79b9      	ldrb	r1, [r7, #6]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	4798      	blx	r3
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]
  return res;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	200000d4 	.word	0x200000d4

08005718 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800571c:	4904      	ldr	r1, [pc, #16]	; (8005730 <MX_FATFS_Init+0x18>)
 800571e:	4805      	ldr	r0, [pc, #20]	; (8005734 <MX_FATFS_Init+0x1c>)
 8005720:	f002 feac 	bl	800847c <FATFS_LinkDriver>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <MX_FATFS_Init+0x20>)
 800572a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800572c:	bf00      	nop
 800572e:	bd80      	pop	{r7, pc}
 8005730:	200000a8 	.word	0x200000a8
 8005734:	08014628 	.word	0x08014628
 8005738:	200000a4 	.word	0x200000a4

0800573c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005740:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005742:	4618      	mov	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3301      	adds	r3, #1
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800575c:	89fb      	ldrh	r3, [r7, #14]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	b21a      	sxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b21b      	sxth	r3, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	b21b      	sxth	r3, r3
 800576c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800576e:	89fb      	ldrh	r3, [r7, #14]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3303      	adds	r3, #3
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	3202      	adds	r2, #2
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	3201      	adds	r2, #1
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	7812      	ldrb	r2, [r2, #0]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80057b4:	68fb      	ldr	r3, [r7, #12]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	460b      	mov	r3, r1
 80057cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	887a      	ldrh	r2, [r7, #2]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	0a1b      	lsrs	r3, r3, #8
 80057de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	0a1b      	lsrs	r3, r3, #8
 8005812:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	1c53      	adds	r3, r2, #1
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	6179      	str	r1, [r7, #20]
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3b01      	subs	r3, #1
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f1      	bne.n	800586a <mem_cpy+0x1a>
	}
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005892:	b480      	push	{r7}
 8005894:	b087      	sub	sp, #28
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	617a      	str	r2, [r7, #20]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f3      	bne.n	80058a2 <mem_set+0x10>
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	4619      	mov	r1, r3
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	61ba      	str	r2, [r7, #24]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	1acb      	subs	r3, r1, r3
 80058f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <mem_cmp+0x40>
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0eb      	beq.n	80058e0 <mem_cmp+0x18>

	return r;
 8005908:	697b      	ldr	r3, [r7, #20]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3724      	adds	r7, #36	; 0x24
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005920:	e002      	b.n	8005928 <chk_chr+0x12>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3301      	adds	r3, #1
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <chk_chr+0x26>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	4293      	cmp	r3, r2
 800593a:	d1f2      	bne.n	8005922 <chk_chr+0xc>
	return *str;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	781b      	ldrb	r3, [r3, #0]
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e029      	b.n	80059b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005960:	4a27      	ldr	r2, [pc, #156]	; (8005a00 <chk_lock+0xb4>)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	4413      	add	r3, r2
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01d      	beq.n	80059aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800596e:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <chk_lock+0xb4>)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	4413      	add	r3, r2
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d116      	bne.n	80059ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005980:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <chk_lock+0xb4>)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	4413      	add	r3, r2
 8005988:	3304      	adds	r3, #4
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005990:	429a      	cmp	r2, r3
 8005992:	d10c      	bne.n	80059ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005994:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <chk_lock+0xb4>)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	4413      	add	r3, r2
 800599c:	3308      	adds	r3, #8
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d102      	bne.n	80059ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80059a8:	e007      	b.n	80059ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d9d2      	bls.n	8005960 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d109      	bne.n	80059d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <chk_lock+0x80>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d101      	bne.n	80059d0 <chk_lock+0x84>
 80059cc:	2300      	movs	r3, #0
 80059ce:	e010      	b.n	80059f2 <chk_lock+0xa6>
 80059d0:	2312      	movs	r3, #18
 80059d2:	e00e      	b.n	80059f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d108      	bne.n	80059ec <chk_lock+0xa0>
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <chk_lock+0xb4>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	4413      	add	r3, r2
 80059e2:	330c      	adds	r3, #12
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ea:	d101      	bne.n	80059f0 <chk_lock+0xa4>
 80059ec:	2310      	movs	r3, #16
 80059ee:	e000      	b.n	80059f2 <chk_lock+0xa6>
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	200000b4 	.word	0x200000b4

08005a04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	e002      	b.n	8005a16 <enq_lock+0x12>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3301      	adds	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d806      	bhi.n	8005a2a <enq_lock+0x26>
 8005a1c:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <enq_lock+0x40>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	4413      	add	r3, r2
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f2      	bne.n	8005a10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200000b4 	.word	0x200000b4

08005a48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e01f      	b.n	8005a98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005a58:	4a41      	ldr	r2, [pc, #260]	; (8005b60 <inc_lock+0x118>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4413      	add	r3, r2
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d113      	bne.n	8005a92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005a6a:	4a3d      	ldr	r2, [pc, #244]	; (8005b60 <inc_lock+0x118>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	4413      	add	r3, r2
 8005a72:	3304      	adds	r3, #4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d109      	bne.n	8005a92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005a7e:	4a38      	ldr	r2, [pc, #224]	; (8005b60 <inc_lock+0x118>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	4413      	add	r3, r2
 8005a86:	3308      	adds	r3, #8
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d006      	beq.n	8005aa0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d9dc      	bls.n	8005a58 <inc_lock+0x10>
 8005a9e:	e000      	b.n	8005aa2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005aa0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d132      	bne.n	8005b0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	e002      	b.n	8005ab4 <inc_lock+0x6c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d806      	bhi.n	8005ac8 <inc_lock+0x80>
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <inc_lock+0x118>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	4413      	add	r3, r2
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f2      	bne.n	8005aae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d101      	bne.n	8005ad2 <inc_lock+0x8a>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e040      	b.n	8005b54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4922      	ldr	r1, [pc, #136]	; (8005b60 <inc_lock+0x118>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	440b      	add	r3, r1
 8005ade:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	491e      	ldr	r1, [pc, #120]	; (8005b60 <inc_lock+0x118>)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	440b      	add	r3, r1
 8005aec:	3304      	adds	r3, #4
 8005aee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	491a      	ldr	r1, [pc, #104]	; (8005b60 <inc_lock+0x118>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	440b      	add	r3, r1
 8005afc:	3308      	adds	r3, #8
 8005afe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <inc_lock+0x118>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	4413      	add	r3, r2
 8005b08:	330c      	adds	r3, #12
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <inc_lock+0xe0>
 8005b14:	4a12      	ldr	r2, [pc, #72]	; (8005b60 <inc_lock+0x118>)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	4413      	add	r3, r2
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <inc_lock+0xe0>
 8005b24:	2300      	movs	r3, #0
 8005b26:	e015      	b.n	8005b54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d108      	bne.n	8005b40 <inc_lock+0xf8>
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <inc_lock+0x118>)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	4413      	add	r3, r2
 8005b36:	330c      	adds	r3, #12
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	e001      	b.n	8005b44 <inc_lock+0xfc>
 8005b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b44:	4906      	ldr	r1, [pc, #24]	; (8005b60 <inc_lock+0x118>)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	440b      	add	r3, r1
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	200000b4 	.word	0x200000b4

08005b64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d825      	bhi.n	8005bc4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005b78:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <dec_lock+0x74>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	4413      	add	r3, r2
 8005b80:	330c      	adds	r3, #12
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b86:	89fb      	ldrh	r3, [r7, #14]
 8005b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8c:	d101      	bne.n	8005b92 <dec_lock+0x2e>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005b92:	89fb      	ldrh	r3, [r7, #14]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <dec_lock+0x3a>
 8005b98:	89fb      	ldrh	r3, [r7, #14]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	; (8005bd8 <dec_lock+0x74>)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	4413      	add	r3, r2
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	89fa      	ldrh	r2, [r7, #14]
 8005baa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d105      	bne.n	8005bbe <dec_lock+0x5a>
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <dec_lock+0x74>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	4413      	add	r3, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	737b      	strb	r3, [r7, #13]
 8005bc2:	e001      	b.n	8005bc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005bc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	200000b4 	.word	0x200000b4

08005bdc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e010      	b.n	8005c0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005bea:	4a0d      	ldr	r2, [pc, #52]	; (8005c20 <clear_lock+0x44>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	4413      	add	r3, r2
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d105      	bne.n	8005c06 <clear_lock+0x2a>
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <clear_lock+0x44>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	4413      	add	r3, r2
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d9eb      	bls.n	8005bea <clear_lock+0xe>
	}
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	200000b4 	.word	0x200000b4

08005c24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	78db      	ldrb	r3, [r3, #3]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d034      	beq.n	8005ca2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7858      	ldrb	r0, [r3, #1]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c48:	2301      	movs	r3, #1
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	f7ff fd26 	bl	800569c <disk_write>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	e022      	b.n	8005ca2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	1ad2      	subs	r2, r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d217      	bcs.n	8005ca2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	789b      	ldrb	r3, [r3, #2]
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	e010      	b.n	8005c9c <sync_window+0x78>
					wsect += fs->fsize;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	7858      	ldrb	r0, [r3, #1]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c8e:	2301      	movs	r3, #1
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	f7ff fd03 	bl	800569c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d8eb      	bhi.n	8005c7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d01b      	beq.n	8005cfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ffad 	bl	8005c24 <sync_window>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d113      	bne.n	8005cfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7858      	ldrb	r0, [r3, #1]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cde:	2301      	movs	r3, #1
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	f7ff fcbb 	bl	800565c <disk_read>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ff87 	bl	8005c24 <sync_window>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d159      	bne.n	8005dd4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d149      	bne.n	8005dbc <sync_fs+0xb4>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	791b      	ldrb	r3, [r3, #4]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d145      	bne.n	8005dbc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	899b      	ldrh	r3, [r3, #12]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	f7ff fda8 	bl	8005892 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3338      	adds	r3, #56	; 0x38
 8005d46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d4a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fd37 	bl	80057c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3338      	adds	r3, #56	; 0x38
 8005d58:	4921      	ldr	r1, [pc, #132]	; (8005de0 <sync_fs+0xd8>)
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fd4c 	bl	80057f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3338      	adds	r3, #56	; 0x38
 8005d64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d68:	491e      	ldr	r1, [pc, #120]	; (8005de4 <sync_fs+0xdc>)
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fd44 	bl	80057f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3338      	adds	r3, #56	; 0x38
 8005d74:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7ff fd3a 	bl	80057f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3338      	adds	r3, #56	; 0x38
 8005d88:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7ff fd30 	bl	80057f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7858      	ldrb	r0, [r3, #1]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db0:	2301      	movs	r3, #1
 8005db2:	f7ff fc73 	bl	800569c <disk_write>
			fs->fsi_flag = 0;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fc89 	bl	80056dc <disk_ioctl>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <sync_fs+0xcc>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	41615252 	.word	0x41615252
 8005de4:	61417272 	.word	0x61417272

08005de8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	3b02      	subs	r3, #2
 8005df6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	3b02      	subs	r3, #2
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d301      	bcc.n	8005e08 <clust2sect+0x20>
 8005e04:	2300      	movs	r3, #0
 8005e06:	e008      	b.n	8005e1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	895b      	ldrh	r3, [r3, #10]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	fb03 f202 	mul.w	r2, r3, r2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	4413      	add	r3, r2
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b086      	sub	sp, #24
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d904      	bls.n	8005e46 <get_fat+0x20>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d302      	bcc.n	8005e4c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005e46:	2301      	movs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e0bb      	b.n	8005fc4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	f000 8083 	beq.w	8005f62 <get_fat+0x13c>
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	f300 80a7 	bgt.w	8005fb0 <get_fat+0x18a>
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d002      	beq.n	8005e6c <get_fat+0x46>
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d056      	beq.n	8005f18 <get_fat+0xf2>
 8005e6a:	e0a1      	b.n	8005fb0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	899b      	ldrh	r3, [r3, #12]
 8005e82:	4619      	mov	r1, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6938      	ldr	r0, [r7, #16]
 8005e90:	f7ff ff0c 	bl	8005cac <move_window>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 808d 	bne.w	8005fb6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	60fa      	str	r2, [r7, #12]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	8992      	ldrh	r2, [r2, #12]
 8005ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eaa:	fb01 f202 	mul.w	r2, r1, r2
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005eb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	899b      	ldrh	r3, [r3, #12]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eca:	4413      	add	r3, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6938      	ldr	r0, [r7, #16]
 8005ed0:	f7ff feec 	bl	8005cac <move_window>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d16f      	bne.n	8005fba <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	899b      	ldrh	r3, [r3, #12]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ee6:	fb01 f202 	mul.w	r2, r1, r2
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <get_fat+0xe8>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	e002      	b.n	8005f14 <get_fat+0xee>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f14:	617b      	str	r3, [r7, #20]
			break;
 8005f16:	e055      	b.n	8005fc4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	899b      	ldrh	r3, [r3, #12]
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	4619      	mov	r1, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f2c:	4413      	add	r3, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6938      	ldr	r0, [r7, #16]
 8005f32:	f7ff febb 	bl	8005cac <move_window>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d140      	bne.n	8005fbe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	8992      	ldrh	r2, [r2, #12]
 8005f4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f4e:	fb00 f202 	mul.w	r2, r0, r2
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	440b      	add	r3, r1
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fbf8 	bl	800574c <ld_word>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	617b      	str	r3, [r7, #20]
			break;
 8005f60:	e030      	b.n	8005fc4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	899b      	ldrh	r3, [r3, #12]
 8005f6a:	089b      	lsrs	r3, r3, #2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f76:	4413      	add	r3, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6938      	ldr	r0, [r7, #16]
 8005f7c:	f7ff fe96 	bl	8005cac <move_window>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d11d      	bne.n	8005fc2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	8992      	ldrh	r2, [r2, #12]
 8005f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f98:	fb00 f202 	mul.w	r2, r0, r2
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fbeb 	bl	800577c <ld_dword>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005fac:	617b      	str	r3, [r7, #20]
			break;
 8005fae:	e009      	b.n	8005fc4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e006      	b.n	8005fc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fb6:	bf00      	nop
 8005fb8:	e004      	b.n	8005fc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fc2:	bf00      	nop
		}
	}

	return val;
 8005fc4:	697b      	ldr	r3, [r7, #20]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005fce:	b590      	push	{r4, r7, lr}
 8005fd0:	b089      	sub	sp, #36	; 0x24
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	f240 8102 	bls.w	80061ea <put_fat+0x21c>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	f080 80fc 	bcs.w	80061ea <put_fat+0x21c>
		switch (fs->fs_type) {
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	f000 80b6 	beq.w	8006168 <put_fat+0x19a>
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	f300 80fd 	bgt.w	80061fc <put_fat+0x22e>
 8006002:	2b01      	cmp	r3, #1
 8006004:	d003      	beq.n	800600e <put_fat+0x40>
 8006006:	2b02      	cmp	r3, #2
 8006008:	f000 8083 	beq.w	8006112 <put_fat+0x144>
 800600c:	e0f6      	b.n	80061fc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4413      	add	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	899b      	ldrh	r3, [r3, #12]
 8006024:	4619      	mov	r1, r3
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	fbb3 f3f1 	udiv	r3, r3, r1
 800602c:	4413      	add	r3, r2
 800602e:	4619      	mov	r1, r3
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff fe3b 	bl	8005cac <move_window>
 8006036:	4603      	mov	r3, r0
 8006038:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800603a:	7ffb      	ldrb	r3, [r7, #31]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 80d6 	bne.w	80061ee <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	61ba      	str	r2, [r7, #24]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	8992      	ldrh	r2, [r2, #12]
 8006052:	fbb3 f0f2 	udiv	r0, r3, r2
 8006056:	fb00 f202 	mul.w	r2, r0, r2
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	440b      	add	r3, r1
 800605e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <put_fat+0xb8>
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	b25b      	sxtb	r3, r3
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	b25a      	sxtb	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	b25b      	sxtb	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b25b      	sxtb	r3, r3
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e001      	b.n	800608a <put_fat+0xbc>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	899b      	ldrh	r3, [r3, #12]
 800609c:	4619      	mov	r1, r3
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80060a4:	4413      	add	r3, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fdff 	bl	8005cac <move_window>
 80060ae:	4603      	mov	r3, r0
 80060b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060b2:	7ffb      	ldrb	r3, [r7, #31]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 809c 	bne.w	80061f2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	899b      	ldrh	r3, [r3, #12]
 80060c4:	461a      	mov	r2, r3
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80060cc:	fb00 f202 	mul.w	r2, r0, r2
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	440b      	add	r3, r1
 80060d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <put_fat+0x11a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e00e      	b.n	8006106 <put_fat+0x138>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b25b      	sxtb	r3, r3
 80060ee:	f023 030f 	bic.w	r3, r3, #15
 80060f2:	b25a      	sxtb	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	4313      	orrs	r3, r2
 8006102:	b25b      	sxtb	r3, r3
 8006104:	b2db      	uxtb	r3, r3
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	70da      	strb	r2, [r3, #3]
			break;
 8006110:	e074      	b.n	80061fc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	899b      	ldrh	r3, [r3, #12]
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	b29b      	uxth	r3, r3
 800611e:	4619      	mov	r1, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	fbb3 f3f1 	udiv	r3, r3, r1
 8006126:	4413      	add	r3, r2
 8006128:	4619      	mov	r1, r3
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fdbe 	bl	8005cac <move_window>
 8006130:	4603      	mov	r3, r0
 8006132:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006134:	7ffb      	ldrb	r3, [r7, #31]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d15d      	bne.n	80061f6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	8992      	ldrh	r2, [r2, #12]
 8006148:	fbb3 f0f2 	udiv	r0, r3, r2
 800614c:	fb00 f202 	mul.w	r2, r0, r2
 8006150:	1a9b      	subs	r3, r3, r2
 8006152:	440b      	add	r3, r1
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	b292      	uxth	r2, r2
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fb31 	bl	80057c2 <st_word>
			fs->wflag = 1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	70da      	strb	r2, [r3, #3]
			break;
 8006166:	e049      	b.n	80061fc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	899b      	ldrh	r3, [r3, #12]
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	b29b      	uxth	r3, r3
 8006174:	4619      	mov	r1, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	fbb3 f3f1 	udiv	r3, r3, r1
 800617c:	4413      	add	r3, r2
 800617e:	4619      	mov	r1, r3
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fd93 	bl	8005cac <move_window>
 8006186:	4603      	mov	r3, r0
 8006188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800618a:	7ffb      	ldrb	r3, [r7, #31]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d134      	bne.n	80061fa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	8992      	ldrh	r2, [r2, #12]
 80061a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80061a8:	fb00 f202 	mul.w	r2, r0, r2
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	440b      	add	r3, r1
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fae3 	bl	800577c <ld_dword>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061bc:	4323      	orrs	r3, r4
 80061be:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	8992      	ldrh	r2, [r2, #12]
 80061ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80061d2:	fb00 f202 	mul.w	r2, r0, r2
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	440b      	add	r3, r1
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fb0b 	bl	80057f8 <st_dword>
			fs->wflag = 1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	70da      	strb	r2, [r3, #3]
			break;
 80061e8:	e008      	b.n	80061fc <put_fat+0x22e>
		}
	}
 80061ea:	bf00      	nop
 80061ec:	e006      	b.n	80061fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061ee:	bf00      	nop
 80061f0:	e004      	b.n	80061fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061f2:	bf00      	nop
 80061f4:	e002      	b.n	80061fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061fa:	bf00      	nop
	return res;
 80061fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3724      	adds	r7, #36	; 0x24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}

08006206 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b088      	sub	sp, #32
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d904      	bls.n	800622c <remove_chain+0x26>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	429a      	cmp	r2, r3
 800622a:	d301      	bcc.n	8006230 <remove_chain+0x2a>
 800622c:	2302      	movs	r3, #2
 800622e:	e04b      	b.n	80062c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00c      	beq.n	8006250 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	69b8      	ldr	r0, [r7, #24]
 800623e:	f7ff fec6 	bl	8005fce <put_fat>
 8006242:	4603      	mov	r3, r0
 8006244:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <remove_chain+0x4a>
 800624c:	7ffb      	ldrb	r3, [r7, #31]
 800624e:	e03b      	b.n	80062c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fde7 	bl	8005e26 <get_fat>
 8006258:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d031      	beq.n	80062c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <remove_chain+0x64>
 8006266:	2302      	movs	r3, #2
 8006268:	e02e      	b.n	80062c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006270:	d101      	bne.n	8006276 <remove_chain+0x70>
 8006272:	2301      	movs	r3, #1
 8006274:	e028      	b.n	80062c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006276:	2200      	movs	r2, #0
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	69b8      	ldr	r0, [r7, #24]
 800627c:	f7ff fea7 	bl	8005fce <put_fat>
 8006280:	4603      	mov	r3, r0
 8006282:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006284:	7ffb      	ldrb	r3, [r7, #31]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <remove_chain+0x88>
 800628a:	7ffb      	ldrb	r3, [r7, #31]
 800628c:	e01c      	b.n	80062c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	3b02      	subs	r3, #2
 8006298:	429a      	cmp	r2, r3
 800629a:	d20b      	bcs.n	80062b4 <remove_chain+0xae>
			fs->free_clst++;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	791b      	ldrb	r3, [r3, #4]
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d3c6      	bcc.n	8006250 <remove_chain+0x4a>
 80062c2:	e000      	b.n	80062c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80062c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <create_chain+0x2c>
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d31b      	bcc.n	8006334 <create_chain+0x64>
 80062fc:	2301      	movs	r3, #1
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e018      	b.n	8006334 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff fd8e 	bl	8005e26 <get_fat>
 800630a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d801      	bhi.n	8006316 <create_chain+0x46>
 8006312:	2301      	movs	r3, #1
 8006314:	e070      	b.n	80063f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800631c:	d101      	bne.n	8006322 <create_chain+0x52>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	e06a      	b.n	80063f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	429a      	cmp	r2, r3
 800632a:	d201      	bcs.n	8006330 <create_chain+0x60>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	e063      	b.n	80063f8 <create_chain+0x128>
		scl = clst;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	429a      	cmp	r2, r3
 8006346:	d307      	bcc.n	8006358 <create_chain+0x88>
				ncl = 2;
 8006348:	2302      	movs	r3, #2
 800634a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	d901      	bls.n	8006358 <create_chain+0x88>
 8006354:	2300      	movs	r3, #0
 8006356:	e04f      	b.n	80063f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006358:	69f9      	ldr	r1, [r7, #28]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff fd63 	bl	8005e26 <get_fat>
 8006360:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d003      	beq.n	8006376 <create_chain+0xa6>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006374:	d101      	bne.n	800637a <create_chain+0xaa>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	e03e      	b.n	80063f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	429a      	cmp	r2, r3
 8006380:	d1da      	bne.n	8006338 <create_chain+0x68>
 8006382:	2300      	movs	r3, #0
 8006384:	e038      	b.n	80063f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006386:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800638c:	69f9      	ldr	r1, [r7, #28]
 800638e:	6938      	ldr	r0, [r7, #16]
 8006390:	f7ff fe1d 	bl	8005fce <put_fat>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <create_chain+0xe2>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d006      	beq.n	80063b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6938      	ldr	r0, [r7, #16]
 80063aa:	f7ff fe10 	bl	8005fce <put_fat>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d116      	bne.n	80063e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	3b02      	subs	r3, #2
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d804      	bhi.n	80063d6 <create_chain+0x106>
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	1e5a      	subs	r2, r3, #1
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	791b      	ldrb	r3, [r3, #4]
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	711a      	strb	r2, [r3, #4]
 80063e4:	e007      	b.n	80063f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d102      	bne.n	80063f2 <create_chain+0x122>
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f0:	e000      	b.n	80063f4 <create_chain+0x124>
 80063f2:	2301      	movs	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80063f6:	69fb      	ldr	r3, [r7, #28]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	3304      	adds	r3, #4
 8006416:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	899b      	ldrh	r3, [r3, #12]
 800641c:	461a      	mov	r2, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	fbb3 f3f2 	udiv	r3, r3, r2
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	8952      	ldrh	r2, [r2, #10]
 8006428:	fbb3 f3f2 	udiv	r3, r3, r2
 800642c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1d1a      	adds	r2, r3, #4
 8006432:	613a      	str	r2, [r7, #16]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <clmt_clust+0x42>
 800643e:	2300      	movs	r3, #0
 8006440:	e010      	b.n	8006464 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d307      	bcc.n	800645a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3304      	adds	r3, #4
 8006456:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006458:	e7e9      	b.n	800642e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800645a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4413      	add	r3, r2
}
 8006464:	4618      	mov	r0, r3
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006486:	d204      	bcs.n	8006492 <dir_sdi+0x22>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006492:	2302      	movs	r3, #2
 8006494:	e071      	b.n	800657a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <dir_sdi+0x46>
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d902      	bls.n	80064b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10c      	bne.n	80064d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	8912      	ldrh	r2, [r2, #8]
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d301      	bcc.n	80064cc <dir_sdi+0x5c>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e056      	b.n	800657a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	61da      	str	r2, [r3, #28]
 80064d4:	e02d      	b.n	8006532 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	895b      	ldrh	r3, [r3, #10]
 80064da:	461a      	mov	r2, r3
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	899b      	ldrh	r3, [r3, #12]
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064e6:	e019      	b.n	800651c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fc9a 	bl	8005e26 <get_fat>
 80064f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064fa:	d101      	bne.n	8006500 <dir_sdi+0x90>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e03c      	b.n	800657a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d904      	bls.n	8006510 <dir_sdi+0xa0>
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	429a      	cmp	r2, r3
 800650e:	d301      	bcc.n	8006514 <dir_sdi+0xa4>
 8006510:	2302      	movs	r3, #2
 8006512:	e032      	b.n	800657a <dir_sdi+0x10a>
			ofs -= csz;
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	429a      	cmp	r2, r3
 8006522:	d2e1      	bcs.n	80064e8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006524:	6979      	ldr	r1, [r7, #20]
 8006526:	6938      	ldr	r0, [r7, #16]
 8006528:	f7ff fc5e 	bl	8005de8 <clust2sect>
 800652c:	4602      	mov	r2, r0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <dir_sdi+0xd4>
 8006540:	2302      	movs	r3, #2
 8006542:	e01a      	b.n	800657a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	899b      	ldrh	r3, [r3, #12]
 800654c:	4619      	mov	r1, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	fbb3 f3f1 	udiv	r3, r3, r1
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	899b      	ldrh	r3, [r3, #12]
 8006564:	461a      	mov	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	fbb3 f0f2 	udiv	r0, r3, r2
 800656c:	fb00 f202 	mul.w	r2, r0, r2
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	18ca      	adds	r2, r1, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	3320      	adds	r3, #32
 8006598:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <dir_next+0x28>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065a8:	d301      	bcc.n	80065ae <dir_next+0x2c>
 80065aa:	2304      	movs	r3, #4
 80065ac:	e0bb      	b.n	8006726 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	899b      	ldrh	r3, [r3, #12]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ba:	fb01 f202 	mul.w	r2, r1, r2
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 809d 	bne.w	8006700 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	8912      	ldrh	r2, [r2, #8]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	f0c0 808d 	bcc.w	8006700 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	61da      	str	r2, [r3, #28]
 80065ec:	2304      	movs	r3, #4
 80065ee:	e09a      	b.n	8006726 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	899b      	ldrh	r3, [r3, #12]
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	8952      	ldrh	r2, [r2, #10]
 8006600:	3a01      	subs	r2, #1
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d17b      	bne.n	8006700 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7ff fc08 	bl	8005e26 <get_fat>
 8006616:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d801      	bhi.n	8006622 <dir_next+0xa0>
 800661e:	2302      	movs	r3, #2
 8006620:	e081      	b.n	8006726 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006628:	d101      	bne.n	800662e <dir_next+0xac>
 800662a:	2301      	movs	r3, #1
 800662c:	e07b      	b.n	8006726 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	429a      	cmp	r2, r3
 8006636:	d359      	bcc.n	80066ec <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	61da      	str	r2, [r3, #28]
 8006644:	2304      	movs	r3, #4
 8006646:	e06e      	b.n	8006726 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7ff fe3d 	bl	80062d0 <create_chain>
 8006656:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <dir_next+0xe0>
 800665e:	2307      	movs	r3, #7
 8006660:	e061      	b.n	8006726 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <dir_next+0xea>
 8006668:	2302      	movs	r3, #2
 800666a:	e05c      	b.n	8006726 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006672:	d101      	bne.n	8006678 <dir_next+0xf6>
 8006674:	2301      	movs	r3, #1
 8006676:	e056      	b.n	8006726 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff fad3 	bl	8005c24 <sync_window>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <dir_next+0x106>
 8006684:	2301      	movs	r3, #1
 8006686:	e04e      	b.n	8006726 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	899b      	ldrh	r3, [r3, #12]
 8006692:	461a      	mov	r2, r3
 8006694:	2100      	movs	r1, #0
 8006696:	f7ff f8fc 	bl	8005892 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	6979      	ldr	r1, [r7, #20]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff fba1 	bl	8005de8 <clust2sect>
 80066a6:	4602      	mov	r2, r0
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	635a      	str	r2, [r3, #52]	; 0x34
 80066ac:	e012      	b.n	80066d4 <dir_next+0x152>
						fs->wflag = 1;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fab5 	bl	8005c24 <sync_window>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <dir_next+0x142>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e030      	b.n	8006726 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	3301      	adds	r3, #1
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	635a      	str	r2, [r3, #52]	; 0x34
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	461a      	mov	r2, r3
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4293      	cmp	r3, r2
 80066de:	d3e6      	bcc.n	80066ae <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80066f2:	6979      	ldr	r1, [r7, #20]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff fb77 	bl	8005de8 <clust2sect>
 80066fa:	4602      	mov	r2, r0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	899b      	ldrh	r3, [r3, #12]
 8006710:	461a      	mov	r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	fbb3 f0f2 	udiv	r0, r3, r2
 8006718:	fb00 f202 	mul.w	r2, r0, r2
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	18ca      	adds	r2, r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800673e:	2100      	movs	r1, #0
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff fe95 	bl	8006470 <dir_sdi>
 8006746:	4603      	mov	r3, r0
 8006748:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d12b      	bne.n	80067a8 <dir_alloc+0x7a>
		n = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	4619      	mov	r1, r3
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff faa6 	bl	8005cac <move_window>
 8006760:	4603      	mov	r3, r0
 8006762:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d11d      	bne.n	80067a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2be5      	cmp	r3, #229	; 0xe5
 8006772:	d004      	beq.n	800677e <dir_alloc+0x50>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3301      	adds	r3, #1
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d102      	bne.n	8006792 <dir_alloc+0x64>
 800678c:	e00c      	b.n	80067a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006792:	2101      	movs	r1, #1
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff fef4 	bl	8006582 <dir_next>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0d7      	beq.n	8006754 <dir_alloc+0x26>
 80067a4:	e000      	b.n	80067a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80067a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d101      	bne.n	80067b2 <dir_alloc+0x84>
 80067ae:	2307      	movs	r3, #7
 80067b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	331a      	adds	r3, #26
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe ffbe 	bl	800574c <ld_word>
 80067d0:	4603      	mov	r3, r0
 80067d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d109      	bne.n	80067f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe ffb3 	bl	800574c <ld_word>
 80067e6:	4603      	mov	r3, r0
 80067e8:	041b      	lsls	r3, r3, #16
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80067f0:	68fb      	ldr	r3, [r7, #12]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	331a      	adds	r3, #26
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	b292      	uxth	r2, r2
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f7fe ffd6 	bl	80057c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b03      	cmp	r3, #3
 800681c:	d109      	bne.n	8006832 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f103 0214 	add.w	r2, r3, #20
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	0c1b      	lsrs	r3, r3, #16
 8006828:	b29b      	uxth	r3, r3
 800682a:	4619      	mov	r1, r3
 800682c:	4610      	mov	r0, r2
 800682e:	f7fe ffc8 	bl	80057c2 <st_word>
	}
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	331a      	adds	r3, #26
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe ff7e 	bl	800574c <ld_word>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <cmp_lfn+0x1e>
 8006856:	2300      	movs	r3, #0
 8006858:	e059      	b.n	800690e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006862:	1e5a      	subs	r2, r3, #1
 8006864:	4613      	mov	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006870:	2301      	movs	r3, #1
 8006872:	81fb      	strh	r3, [r7, #14]
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	e033      	b.n	80068e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800687a:	4a27      	ldr	r2, [pc, #156]	; (8006918 <cmp_lfn+0xdc>)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4413      	add	r3, r2
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	4413      	add	r3, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe ff5f 	bl	800574c <ld_word>
 800688e:	4603      	mov	r3, r0
 8006890:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006892:	89fb      	ldrh	r3, [r7, #14]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01a      	beq.n	80068ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2bfe      	cmp	r3, #254	; 0xfe
 800689c:	d812      	bhi.n	80068c4 <cmp_lfn+0x88>
 800689e:	89bb      	ldrh	r3, [r7, #12]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fe11 	bl	80054c8 <ff_wtoupper>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461c      	mov	r4, r3
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	617a      	str	r2, [r7, #20]
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fe05 	bl	80054c8 <ff_wtoupper>
 80068be:	4603      	mov	r3, r0
 80068c0:	429c      	cmp	r4, r3
 80068c2:	d001      	beq.n	80068c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80068c4:	2300      	movs	r3, #0
 80068c6:	e022      	b.n	800690e <cmp_lfn+0xd2>
			}
			wc = uc;
 80068c8:	89bb      	ldrh	r3, [r7, #12]
 80068ca:	81fb      	strh	r3, [r7, #14]
 80068cc:	e006      	b.n	80068dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80068ce:	89bb      	ldrh	r3, [r7, #12]
 80068d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d001      	beq.n	80068dc <cmp_lfn+0xa0>
 80068d8:	2300      	movs	r3, #0
 80068da:	e018      	b.n	800690e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3301      	adds	r3, #1
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b0c      	cmp	r3, #12
 80068e6:	d9c8      	bls.n	800687a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <cmp_lfn+0xd0>
 80068f4:	89fb      	ldrh	r3, [r7, #14]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <cmp_lfn+0xd0>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <cmp_lfn+0xd0>
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800690c:	2301      	movs	r3, #1
}
 800690e:	4618      	mov	r0, r3
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd90      	pop	{r4, r7, pc}
 8006916:	bf00      	nop
 8006918:	08014618 	.word	0x08014618

0800691c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4611      	mov	r1, r2
 8006928:	461a      	mov	r2, r3
 800692a:	460b      	mov	r3, r1
 800692c:	71fb      	strb	r3, [r7, #7]
 800692e:	4613      	mov	r3, r2
 8006930:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	330d      	adds	r3, #13
 8006936:	79ba      	ldrb	r2, [r7, #6]
 8006938:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	330b      	adds	r3, #11
 800693e:	220f      	movs	r2, #15
 8006940:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	330c      	adds	r3, #12
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	331a      	adds	r3, #26
 800694e:	2100      	movs	r1, #0
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe ff36 	bl	80057c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	4613      	mov	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	82fb      	strh	r3, [r7, #22]
 800696a:	2300      	movs	r3, #0
 800696c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800696e:	8afb      	ldrh	r3, [r7, #22]
 8006970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006974:	4293      	cmp	r3, r2
 8006976:	d007      	beq.n	8006988 <put_lfn+0x6c>
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	61fa      	str	r2, [r7, #28]
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006988:	4a17      	ldr	r2, [pc, #92]	; (80069e8 <put_lfn+0xcc>)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	4413      	add	r3, r2
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4413      	add	r3, r2
 8006996:	8afa      	ldrh	r2, [r7, #22]
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe ff11 	bl	80057c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80069a0:	8afb      	ldrh	r3, [r7, #22]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <put_lfn+0x90>
 80069a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	3301      	adds	r3, #1
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	d9da      	bls.n	800696e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80069b8:	8afb      	ldrh	r3, [r7, #22]
 80069ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069be:	4293      	cmp	r3, r2
 80069c0:	d006      	beq.n	80069d0 <put_lfn+0xb4>
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <put_lfn+0xbc>
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	79fa      	ldrb	r2, [r7, #7]
 80069dc:	701a      	strb	r2, [r3, #0]
}
 80069de:	bf00      	nop
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	08014618 	.word	0x08014618

080069ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08c      	sub	sp, #48	; 0x30
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80069fa:	220b      	movs	r2, #11
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7fe ff26 	bl	8005850 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	d92b      	bls.n	8006a62 <gen_numname+0x76>
		sr = seq;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006a0e:	e022      	b.n	8006a56 <gen_numname+0x6a>
			wc = *lfn++;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	1c9a      	adds	r2, r3, #2
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1e:	e017      	b.n	8006a50 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	005a      	lsls	r2, r3, #1
 8006a24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <gen_numname+0x5e>
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006a44:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006a48:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	2b0f      	cmp	r3, #15
 8006a54:	d9e4      	bls.n	8006a20 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1d8      	bne.n	8006a10 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006a62:	2307      	movs	r3, #7
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	3330      	adds	r3, #48	; 0x30
 8006a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a7a:	2b39      	cmp	r3, #57	; 0x39
 8006a7c:	d904      	bls.n	8006a88 <gen_numname+0x9c>
 8006a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a82:	3307      	adds	r3, #7
 8006a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	1e5a      	subs	r2, r3, #1
 8006a8c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a8e:	3330      	adds	r3, #48	; 0x30
 8006a90:	443b      	add	r3, r7
 8006a92:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006a96:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1df      	bne.n	8006a66 <gen_numname+0x7a>
	ns[i] = '~';
 8006aa6:	f107 0214 	add.w	r2, r7, #20
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	4413      	add	r3, r2
 8006aae:	227e      	movs	r2, #126	; 0x7e
 8006ab0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab6:	e002      	b.n	8006abe <gen_numname+0xd2>
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	3301      	adds	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
 8006abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d205      	bcs.n	8006ad2 <gen_numname+0xe6>
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	4413      	add	r3, r2
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d1f2      	bne.n	8006ab8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	2b07      	cmp	r3, #7
 8006ad6:	d807      	bhi.n	8006ae8 <gen_numname+0xfc>
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ade:	3330      	adds	r3, #48	; 0x30
 8006ae0:	443b      	add	r3, r7
 8006ae2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006ae6:	e000      	b.n	8006aea <gen_numname+0xfe>
 8006ae8:	2120      	movs	r1, #32
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	627a      	str	r2, [r7, #36]	; 0x24
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	460a      	mov	r2, r1
 8006af6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	2b07      	cmp	r3, #7
 8006afc:	d9e9      	bls.n	8006ad2 <gen_numname+0xe6>
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	3730      	adds	r7, #48	; 0x30
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006b14:	230b      	movs	r3, #11
 8006b16:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	0852      	lsrs	r2, r2, #1
 8006b1e:	01db      	lsls	r3, r3, #7
 8006b20:	4313      	orrs	r3, r2
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	6079      	str	r1, [r7, #4]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1ed      	bne.n	8006b18 <sum_sfn+0x10>
	return sum;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff fc88 	bl	8006470 <dir_sdi>
 8006b60:	4603      	mov	r3, r0
 8006b62:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <dir_find+0x24>
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	e0a9      	b.n	8006cc2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b6e:	23ff      	movs	r3, #255	; 0xff
 8006b70:	753b      	strb	r3, [r7, #20]
 8006b72:	7d3b      	ldrb	r3, [r7, #20]
 8006b74:	757b      	strb	r3, [r7, #21]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6938      	ldr	r0, [r7, #16]
 8006b86:	f7ff f891 	bl	8005cac <move_window>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 8090 	bne.w	8006cb6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <dir_find+0x60>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	75fb      	strb	r3, [r7, #23]
 8006ba8:	e08a      	b.n	8006cc0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	330b      	adds	r3, #11
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb6:	73fb      	strb	r3, [r7, #15]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7bfa      	ldrb	r2, [r7, #15]
 8006bbc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006bbe:	7dbb      	ldrb	r3, [r7, #22]
 8006bc0:	2be5      	cmp	r3, #229	; 0xe5
 8006bc2:	d007      	beq.n	8006bd4 <dir_find+0x8a>
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <dir_find+0x98>
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
 8006bd0:	2b0f      	cmp	r3, #15
 8006bd2:	d006      	beq.n	8006be2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006bd4:	23ff      	movs	r3, #255	; 0xff
 8006bd6:	757b      	strb	r3, [r7, #21]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bde:	631a      	str	r2, [r3, #48]	; 0x30
 8006be0:	e05e      	b.n	8006ca0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b0f      	cmp	r3, #15
 8006be6:	d136      	bne.n	8006c56 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d154      	bne.n	8006ca0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006bf6:	7dbb      	ldrb	r3, [r7, #22]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00d      	beq.n	8006c1c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	7b5b      	ldrb	r3, [r3, #13]
 8006c06:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006c08:	7dbb      	ldrb	r3, [r7, #22]
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0e:	75bb      	strb	r3, [r7, #22]
 8006c10:	7dbb      	ldrb	r3, [r7, #22]
 8006c12:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006c1c:	7dba      	ldrb	r2, [r7, #22]
 8006c1e:	7d7b      	ldrb	r3, [r7, #21]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d115      	bne.n	8006c50 <dir_find+0x106>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	330d      	adds	r3, #13
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	7d3a      	ldrb	r2, [r7, #20]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d10e      	bne.n	8006c50 <dir_find+0x106>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	f7ff fdfd 	bl	800683c <cmp_lfn>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <dir_find+0x106>
 8006c48:	7d7b      	ldrb	r3, [r7, #21]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	e000      	b.n	8006c52 <dir_find+0x108>
 8006c50:	23ff      	movs	r3, #255	; 0xff
 8006c52:	757b      	strb	r3, [r7, #21]
 8006c54:	e024      	b.n	8006ca0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006c56:	7d7b      	ldrb	r3, [r7, #21]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <dir_find+0x126>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff ff51 	bl	8006b08 <sum_sfn>
 8006c66:	4603      	mov	r3, r0
 8006c68:	461a      	mov	r2, r3
 8006c6a:	7d3b      	ldrb	r3, [r7, #20]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d024      	beq.n	8006cba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10a      	bne.n	8006c94 <dir_find+0x14a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a18      	ldr	r0, [r3, #32]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3324      	adds	r3, #36	; 0x24
 8006c86:	220b      	movs	r2, #11
 8006c88:	4619      	mov	r1, r3
 8006c8a:	f7fe fe1d 	bl	80058c8 <mem_cmp>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d014      	beq.n	8006cbe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c94:	23ff      	movs	r3, #255	; 0xff
 8006c96:	757b      	strb	r3, [r7, #21]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fc6d 	bl	8006582 <dir_next>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f43f af65 	beq.w	8006b7e <dir_find+0x34>
 8006cb4:	e004      	b.n	8006cc0 <dir_find+0x176>
		if (res != FR_OK) break;
 8006cb6:	bf00      	nop
 8006cb8:	e002      	b.n	8006cc0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006cba:	bf00      	nop
 8006cbc:	e000      	b.n	8006cc0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006cbe:	bf00      	nop

	return res;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08c      	sub	sp, #48	; 0x30
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ce0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <dir_register+0x20>
 8006ce8:	2306      	movs	r3, #6
 8006cea:	e0e0      	b.n	8006eae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006cec:	2300      	movs	r3, #0
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf0:	e002      	b.n	8006cf8 <dir_register+0x2c>
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f4      	bne.n	8006cf2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006d0e:	f107 030c 	add.w	r3, r7, #12
 8006d12:	220c      	movs	r2, #12
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fd9b 	bl	8005850 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d032      	beq.n	8006d8a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2240      	movs	r2, #64	; 0x40
 8006d28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d30:	e016      	b.n	8006d60 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	f107 010c 	add.w	r1, r7, #12
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f7ff fe53 	bl	80069ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff feff 	bl	8006b4a <dir_find>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	2b63      	cmp	r3, #99	; 0x63
 8006d64:	d9e5      	bls.n	8006d32 <dir_register+0x66>
 8006d66:	e000      	b.n	8006d6a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006d68:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	2b64      	cmp	r3, #100	; 0x64
 8006d6e:	d101      	bne.n	8006d74 <dir_register+0xa8>
 8006d70:	2307      	movs	r3, #7
 8006d72:	e09c      	b.n	8006eae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d002      	beq.n	8006d82 <dir_register+0xb6>
 8006d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d80:	e095      	b.n	8006eae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006d82:	7dfa      	ldrb	r2, [r7, #23]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <dir_register+0xd8>
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	330c      	adds	r3, #12
 8006d98:	4a47      	ldr	r2, [pc, #284]	; (8006eb8 <dir_register+0x1ec>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	089b      	lsrs	r3, r3, #2
 8006da0:	3301      	adds	r3, #1
 8006da2:	e000      	b.n	8006da6 <dir_register+0xda>
 8006da4:	2301      	movs	r3, #1
 8006da6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006da8:	6a39      	ldr	r1, [r7, #32]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fcbf 	bl	800672e <dir_alloc>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d148      	bne.n	8006e50 <dir_register+0x184>
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d042      	beq.n	8006e50 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	015b      	lsls	r3, r3, #5
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fb4a 	bl	8006470 <dir_sdi>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d132      	bne.n	8006e50 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3324      	adds	r3, #36	; 0x24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff fe8a 	bl	8006b08 <sum_sfn>
 8006df4:	4603      	mov	r3, r0
 8006df6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	69f8      	ldr	r0, [r7, #28]
 8006e00:	f7fe ff54 	bl	8005cac <move_window>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d11d      	bne.n	8006e4e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	6918      	ldr	r0, [r3, #16]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a19      	ldr	r1, [r3, #32]
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	7efb      	ldrb	r3, [r7, #27]
 8006e20:	f7ff fd7c 	bl	800691c <put_lfn>
				fs->wflag = 1;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2201      	movs	r2, #1
 8006e28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff fba8 	bl	8006582 <dir_next>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d107      	bne.n	8006e50 <dir_register+0x184>
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	623b      	str	r3, [r7, #32]
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1d5      	bne.n	8006df8 <dir_register+0x12c>
 8006e4c:	e000      	b.n	8006e50 <dir_register+0x184>
				if (res != FR_OK) break;
 8006e4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d128      	bne.n	8006eaa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	69f8      	ldr	r0, [r7, #28]
 8006e60:	f7fe ff24 	bl	8005cac <move_window>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d11b      	bne.n	8006eaa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	2220      	movs	r2, #32
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fd09 	bl	8005892 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a18      	ldr	r0, [r3, #32]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3324      	adds	r3, #36	; 0x24
 8006e88:	220b      	movs	r2, #11
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f7fe fce0 	bl	8005850 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	f002 0218 	and.w	r2, r2, #24
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3730      	adds	r7, #48	; 0x30
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	4ec4ec4f 	.word	0x4ec4ec4f

08006ebc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	61ba      	str	r2, [r7, #24]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eec:	2b1f      	cmp	r3, #31
 8006eee:	d940      	bls.n	8006f72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8006ef4:	d006      	beq.n	8006f04 <create_name+0x48>
 8006ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8006efa:	d110      	bne.n	8006f1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006efc:	e002      	b.n	8006f04 <create_name+0x48>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	3301      	adds	r3, #1
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	4413      	add	r3, r2
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b2f      	cmp	r3, #47	; 0x2f
 8006f0e:	d0f6      	beq.n	8006efe <create_name+0x42>
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4413      	add	r3, r2
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b5c      	cmp	r3, #92	; 0x5c
 8006f1a:	d0f0      	beq.n	8006efe <create_name+0x42>
			break;
 8006f1c:	e02a      	b.n	8006f74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2bfe      	cmp	r3, #254	; 0xfe
 8006f22:	d901      	bls.n	8006f28 <create_name+0x6c>
 8006f24:	2306      	movs	r3, #6
 8006f26:	e17d      	b.n	8007224 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f30:	2101      	movs	r1, #1
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fa8c 	bl	8005450 <ff_convert>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <create_name+0x8a>
 8006f42:	2306      	movs	r3, #6
 8006f44:	e16e      	b.n	8007224 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f48:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4a:	d809      	bhi.n	8006f60 <create_name+0xa4>
 8006f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f4e:	4619      	mov	r1, r3
 8006f50:	488d      	ldr	r0, [pc, #564]	; (8007188 <create_name+0x2cc>)
 8006f52:	f7fe fce0 	bl	8005916 <chk_chr>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <create_name+0xa4>
 8006f5c:	2306      	movs	r3, #6
 8006f5e:	e161      	b.n	8007224 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	617a      	str	r2, [r7, #20]
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f70:	e7b4      	b.n	8006edc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006f72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	441a      	add	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f80:	2b1f      	cmp	r3, #31
 8006f82:	d801      	bhi.n	8006f88 <create_name+0xcc>
 8006f84:	2304      	movs	r3, #4
 8006f86:	e000      	b.n	8006f8a <create_name+0xce>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f8e:	e011      	b.n	8006fb4 <create_name+0xf8>
		w = lfn[di - 1];
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f96:	3b01      	subs	r3, #1
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d002      	beq.n	8006fae <create_name+0xf2>
 8006fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006faa:	2b2e      	cmp	r3, #46	; 0x2e
 8006fac:	d106      	bne.n	8006fbc <create_name+0x100>
		di--;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ea      	bne.n	8006f90 <create_name+0xd4>
 8006fba:	e000      	b.n	8006fbe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006fbc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <create_name+0x118>
 8006fd0:	2306      	movs	r3, #6
 8006fd2:	e127      	b.n	8007224 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3324      	adds	r3, #36	; 0x24
 8006fd8:	220b      	movs	r2, #11
 8006fda:	2120      	movs	r1, #32
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe fc58 	bl	8005892 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	e002      	b.n	8006fee <create_name+0x132>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	3301      	adds	r3, #1
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d0f5      	beq.n	8006fe8 <create_name+0x12c>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	2b2e      	cmp	r3, #46	; 0x2e
 8007008:	d0ee      	beq.n	8006fe8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <create_name+0x168>
 8007010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007014:	f043 0303 	orr.w	r3, r3, #3
 8007018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800701c:	e002      	b.n	8007024 <create_name+0x168>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3b01      	subs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <create_name+0x182>
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007030:	3b01      	subs	r3, #1
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	2b2e      	cmp	r3, #46	; 0x2e
 800703c:	d1ef      	bne.n	800701e <create_name+0x162>

	i = b = 0; ni = 8;
 800703e:	2300      	movs	r3, #0
 8007040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007044:	2300      	movs	r3, #0
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	2308      	movs	r3, #8
 800704a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	61ba      	str	r2, [r7, #24]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800705c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8090 	beq.w	8007184 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007066:	2b20      	cmp	r3, #32
 8007068:	d006      	beq.n	8007078 <create_name+0x1bc>
 800706a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800706c:	2b2e      	cmp	r3, #46	; 0x2e
 800706e:	d10a      	bne.n	8007086 <create_name+0x1ca>
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	429a      	cmp	r2, r3
 8007076:	d006      	beq.n	8007086 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707c:	f043 0303 	orr.w	r3, r3, #3
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007084:	e07d      	b.n	8007182 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	429a      	cmp	r2, r3
 800708c:	d203      	bcs.n	8007096 <create_name+0x1da>
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	429a      	cmp	r2, r3
 8007094:	d123      	bne.n	80070de <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2b0b      	cmp	r3, #11
 800709a:	d106      	bne.n	80070aa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800709c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a0:	f043 0303 	orr.w	r3, r3, #3
 80070a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070a8:	e075      	b.n	8007196 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d005      	beq.n	80070be <create_name+0x202>
 80070b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b6:	f043 0303 	orr.w	r3, r3, #3
 80070ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d866      	bhi.n	8007194 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	2308      	movs	r3, #8
 80070cc:	623b      	str	r3, [r7, #32]
 80070ce:	230b      	movs	r3, #11
 80070d0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80070d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070dc:	e051      	b.n	8007182 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80070de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070e0:	2b7f      	cmp	r3, #127	; 0x7f
 80070e2:	d914      	bls.n	800710e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80070e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe f9b1 	bl	8005450 <ff_convert>
 80070ee:	4603      	mov	r3, r0
 80070f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80070f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <create_name+0x246>
 80070f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070fa:	3b80      	subs	r3, #128	; 0x80
 80070fc:	4a23      	ldr	r2, [pc, #140]	; (800718c <create_name+0x2d0>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007106:	f043 0302 	orr.w	r3, r3, #2
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800710e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <create_name+0x268>
 8007114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007116:	4619      	mov	r1, r3
 8007118:	481d      	ldr	r0, [pc, #116]	; (8007190 <create_name+0x2d4>)
 800711a:	f7fe fbfc 	bl	8005916 <chk_chr>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007124:	235f      	movs	r3, #95	; 0x5f
 8007126:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800712c:	f043 0303 	orr.w	r3, r3, #3
 8007130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007134:	e01b      	b.n	800716e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	d909      	bls.n	8007150 <create_name+0x294>
 800713c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800713e:	2b5a      	cmp	r3, #90	; 0x5a
 8007140:	d806      	bhi.n	8007150 <create_name+0x294>
					b |= 2;
 8007142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007146:	f043 0302 	orr.w	r3, r3, #2
 800714a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800714e:	e00e      	b.n	800716e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007152:	2b60      	cmp	r3, #96	; 0x60
 8007154:	d90b      	bls.n	800716e <create_name+0x2b2>
 8007156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007158:	2b7a      	cmp	r3, #122	; 0x7a
 800715a:	d808      	bhi.n	800716e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800715c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716a:	3b20      	subs	r3, #32
 800716c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	623a      	str	r2, [r7, #32]
 8007174:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007176:	b2d1      	uxtb	r1, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4413      	add	r3, r2
 800717c:	460a      	mov	r2, r1
 800717e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007182:	e763      	b.n	800704c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007184:	bf00      	nop
 8007186:	e006      	b.n	8007196 <create_name+0x2da>
 8007188:	08013d54 	.word	0x08013d54
 800718c:	08014598 	.word	0x08014598
 8007190:	08013d60 	.word	0x08013d60
			if (si > di) break;			/* No extension */
 8007194:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800719c:	2be5      	cmp	r3, #229	; 0xe5
 800719e:	d103      	bne.n	80071a8 <create_name+0x2ec>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2205      	movs	r2, #5
 80071a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d104      	bne.n	80071b8 <create_name+0x2fc>
 80071ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80071b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071bc:	f003 030c 	and.w	r3, r3, #12
 80071c0:	2b0c      	cmp	r3, #12
 80071c2:	d005      	beq.n	80071d0 <create_name+0x314>
 80071c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d105      	bne.n	80071dc <create_name+0x320>
 80071d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80071dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d117      	bne.n	8007218 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80071e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d105      	bne.n	8007200 <create_name+0x344>
 80071f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f8:	f043 0310 	orr.w	r3, r3, #16
 80071fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007204:	f003 030c 	and.w	r3, r3, #12
 8007208:	2b04      	cmp	r3, #4
 800720a:	d105      	bne.n	8007218 <create_name+0x35c>
 800720c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007210:	f043 0308 	orr.w	r3, r3, #8
 8007214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800721e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007222:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007224:	4618      	mov	r0, r3
 8007226:	3728      	adds	r7, #40	; 0x28
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007240:	e002      	b.n	8007248 <follow_path+0x1c>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b2f      	cmp	r3, #47	; 0x2f
 800724e:	d0f8      	beq.n	8007242 <follow_path+0x16>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b5c      	cmp	r3, #92	; 0x5c
 8007256:	d0f4      	beq.n	8007242 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b1f      	cmp	r3, #31
 8007264:	d80a      	bhi.n	800727c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2280      	movs	r2, #128	; 0x80
 800726a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800726e:	2100      	movs	r1, #0
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f8fd 	bl	8006470 <dir_sdi>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]
 800727a:	e048      	b.n	800730e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800727c:	463b      	mov	r3, r7
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fe1b 	bl	8006ebc <create_name>
 8007286:	4603      	mov	r3, r0
 8007288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d139      	bne.n	8007304 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fc5a 	bl	8006b4a <dir_find>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d12c      	bne.n	8007308 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d127      	bne.n	8007308 <follow_path+0xdc>
 80072b8:	2305      	movs	r3, #5
 80072ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80072bc:	e024      	b.n	8007308 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d121      	bne.n	800730c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	799b      	ldrb	r3, [r3, #6]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <follow_path+0xae>
				res = FR_NO_PATH; break;
 80072d4:	2305      	movs	r3, #5
 80072d6:	75fb      	strb	r3, [r7, #23]
 80072d8:	e019      	b.n	800730e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	8992      	ldrh	r2, [r2, #12]
 80072e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80072ec:	fb00 f202 	mul.w	r2, r0, r2
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	440b      	add	r3, r1
 80072f4:	4619      	mov	r1, r3
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff fa60 	bl	80067bc <ld_clust>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007302:	e7bb      	b.n	800727c <follow_path+0x50>
			if (res != FR_OK) break;
 8007304:	bf00      	nop
 8007306:	e002      	b.n	800730e <follow_path+0xe2>
				break;
 8007308:	bf00      	nop
 800730a:	e000      	b.n	800730e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800730c:	bf00      	nop
			}
		}
	}

	return res;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007324:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d031      	beq.n	8007392 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e002      	b.n	800733c <get_ldnumber+0x24>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3301      	adds	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b1f      	cmp	r3, #31
 8007342:	d903      	bls.n	800734c <get_ldnumber+0x34>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b3a      	cmp	r3, #58	; 0x3a
 800734a:	d1f4      	bne.n	8007336 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b3a      	cmp	r3, #58	; 0x3a
 8007352:	d11c      	bne.n	800738e <get_ldnumber+0x76>
			tp = *path;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	60fa      	str	r2, [r7, #12]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	3b30      	subs	r3, #48	; 0x30
 8007364:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b09      	cmp	r3, #9
 800736a:	d80e      	bhi.n	800738a <get_ldnumber+0x72>
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	429a      	cmp	r2, r3
 8007372:	d10a      	bne.n	800738a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <get_ldnumber+0x72>
					vol = (int)i;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	3301      	adds	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	e002      	b.n	8007394 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007392:	693b      	ldr	r3, [r7, #16]
}
 8007394:	4618      	mov	r0, r3
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	70da      	strb	r2, [r3, #3]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073b6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fe fc76 	bl	8005cac <move_window>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <check_fs+0x2a>
 80073c6:	2304      	movs	r3, #4
 80073c8:	e038      	b.n	800743c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3338      	adds	r3, #56	; 0x38
 80073ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe f9ba 	bl	800574c <ld_word>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d001      	beq.n	80073e8 <check_fs+0x48>
 80073e4:	2303      	movs	r3, #3
 80073e6:	e029      	b.n	800743c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073ee:	2be9      	cmp	r3, #233	; 0xe9
 80073f0:	d009      	beq.n	8007406 <check_fs+0x66>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073f8:	2beb      	cmp	r3, #235	; 0xeb
 80073fa:	d11e      	bne.n	800743a <check_fs+0x9a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007402:	2b90      	cmp	r3, #144	; 0x90
 8007404:	d119      	bne.n	800743a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3338      	adds	r3, #56	; 0x38
 800740a:	3336      	adds	r3, #54	; 0x36
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe f9b5 	bl	800577c <ld_dword>
 8007412:	4603      	mov	r3, r0
 8007414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007418:	4a0a      	ldr	r2, [pc, #40]	; (8007444 <check_fs+0xa4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <check_fs+0x82>
 800741e:	2300      	movs	r3, #0
 8007420:	e00c      	b.n	800743c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3338      	adds	r3, #56	; 0x38
 8007426:	3352      	adds	r3, #82	; 0x52
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe f9a7 	bl	800577c <ld_dword>
 800742e:	4603      	mov	r3, r0
 8007430:	4a05      	ldr	r2, [pc, #20]	; (8007448 <check_fs+0xa8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d101      	bne.n	800743a <check_fs+0x9a>
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800743a:	2302      	movs	r3, #2
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	00544146 	.word	0x00544146
 8007448:	33544146 	.word	0x33544146

0800744c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b096      	sub	sp, #88	; 0x58
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff ff59 	bl	8007318 <get_ldnumber>
 8007466:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	da01      	bge.n	8007472 <find_volume+0x26>
 800746e:	230b      	movs	r3, #11
 8007470:	e262      	b.n	8007938 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007472:	4a9f      	ldr	r2, [pc, #636]	; (80076f0 <find_volume+0x2a4>)
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <find_volume+0x3a>
 8007482:	230c      	movs	r3, #12
 8007484:	e258      	b.n	8007938 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800748a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	f023 0301 	bic.w	r3, r3, #1
 8007492:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01a      	beq.n	80074d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe f89b 	bl	80055dc <disk_status>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10c      	bne.n	80074d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <find_volume+0x82>
 80074be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80074ca:	230a      	movs	r3, #10
 80074cc:	e234      	b.n	8007938 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80074ce:	2300      	movs	r3, #0
 80074d0:	e232      	b.n	8007938 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe f893 	bl	8005610 <disk_initialize>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80074f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80074fc:	2303      	movs	r3, #3
 80074fe:	e21b      	b.n	8007938 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <find_volume+0xca>
 8007506:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007512:	230a      	movs	r3, #10
 8007514:	e210      	b.n	8007938 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	7858      	ldrb	r0, [r3, #1]
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	330c      	adds	r3, #12
 800751e:	461a      	mov	r2, r3
 8007520:	2102      	movs	r1, #2
 8007522:	f7fe f8db 	bl	80056dc <disk_ioctl>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <find_volume+0xe4>
 800752c:	2301      	movs	r3, #1
 800752e:	e203      	b.n	8007938 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	899b      	ldrh	r3, [r3, #12]
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007538:	d80d      	bhi.n	8007556 <find_volume+0x10a>
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	899b      	ldrh	r3, [r3, #12]
 800753e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007542:	d308      	bcc.n	8007556 <find_volume+0x10a>
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	899b      	ldrh	r3, [r3, #12]
 8007548:	461a      	mov	r2, r3
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	899b      	ldrh	r3, [r3, #12]
 800754e:	3b01      	subs	r3, #1
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <find_volume+0x10e>
 8007556:	2301      	movs	r3, #1
 8007558:	e1ee      	b.n	8007938 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800755e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007562:	f7ff ff1d 	bl	80073a0 <check_fs>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800756c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007570:	2b02      	cmp	r3, #2
 8007572:	d149      	bne.n	8007608 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007574:	2300      	movs	r3, #0
 8007576:	643b      	str	r3, [r7, #64]	; 0x40
 8007578:	e01e      	b.n	80075b8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007588:	4413      	add	r3, r2
 800758a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	3304      	adds	r3, #4
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <find_volume+0x158>
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	3308      	adds	r3, #8
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe f8ee 	bl	800577c <ld_dword>
 80075a0:	4602      	mov	r2, r0
 80075a2:	e000      	b.n	80075a6 <find_volume+0x15a>
 80075a4:	2200      	movs	r2, #0
 80075a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	3358      	adds	r3, #88	; 0x58
 80075ac:	443b      	add	r3, r7
 80075ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b4:	3301      	adds	r3, #1
 80075b6:	643b      	str	r3, [r7, #64]	; 0x40
 80075b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d9dd      	bls.n	800757a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80075be:	2300      	movs	r3, #0
 80075c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80075c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <find_volume+0x182>
 80075c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ca:	3b01      	subs	r3, #1
 80075cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	3358      	adds	r3, #88	; 0x58
 80075d4:	443b      	add	r3, r7
 80075d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <find_volume+0x1a2>
 80075e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075e6:	f7ff fedb 	bl	80073a0 <check_fs>
 80075ea:	4603      	mov	r3, r0
 80075ec:	e000      	b.n	80075f0 <find_volume+0x1a4>
 80075ee:	2303      	movs	r3, #3
 80075f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80075f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d905      	bls.n	8007608 <find_volume+0x1bc>
 80075fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fe:	3301      	adds	r3, #1
 8007600:	643b      	str	r3, [r7, #64]	; 0x40
 8007602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007604:	2b03      	cmp	r3, #3
 8007606:	d9e2      	bls.n	80075ce <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800760c:	2b04      	cmp	r3, #4
 800760e:	d101      	bne.n	8007614 <find_volume+0x1c8>
 8007610:	2301      	movs	r3, #1
 8007612:	e191      	b.n	8007938 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007618:	2b01      	cmp	r3, #1
 800761a:	d901      	bls.n	8007620 <find_volume+0x1d4>
 800761c:	230d      	movs	r3, #13
 800761e:	e18b      	b.n	8007938 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	3338      	adds	r3, #56	; 0x38
 8007624:	330b      	adds	r3, #11
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe f890 	bl	800574c <ld_word>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	899b      	ldrh	r3, [r3, #12]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <find_volume+0x1f0>
 8007638:	230d      	movs	r3, #13
 800763a:	e17d      	b.n	8007938 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	3338      	adds	r3, #56	; 0x38
 8007640:	3316      	adds	r3, #22
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe f882 	bl	800574c <ld_word>
 8007648:	4603      	mov	r3, r0
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <find_volume+0x214>
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	3338      	adds	r3, #56	; 0x38
 8007656:	3324      	adds	r3, #36	; 0x24
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe f88f 	bl	800577c <ld_dword>
 800765e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007664:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	789b      	ldrb	r3, [r3, #2]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d005      	beq.n	8007684 <find_volume+0x238>
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	789b      	ldrb	r3, [r3, #2]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d001      	beq.n	8007684 <find_volume+0x238>
 8007680:	230d      	movs	r3, #13
 8007682:	e159      	b.n	8007938 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	789b      	ldrb	r3, [r3, #2]
 8007688:	461a      	mov	r2, r3
 800768a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768c:	fb02 f303 	mul.w	r3, r2, r3
 8007690:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007698:	b29a      	uxth	r2, r3
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	895b      	ldrh	r3, [r3, #10]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d008      	beq.n	80076b8 <find_volume+0x26c>
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	895b      	ldrh	r3, [r3, #10]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	895b      	ldrh	r3, [r3, #10]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4013      	ands	r3, r2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <find_volume+0x270>
 80076b8:	230d      	movs	r3, #13
 80076ba:	e13d      	b.n	8007938 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	3338      	adds	r3, #56	; 0x38
 80076c0:	3311      	adds	r3, #17
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe f842 	bl	800574c <ld_word>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	891b      	ldrh	r3, [r3, #8]
 80076d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d6:	8992      	ldrh	r2, [r2, #12]
 80076d8:	0952      	lsrs	r2, r2, #5
 80076da:	b292      	uxth	r2, r2
 80076dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e0:	fb01 f202 	mul.w	r2, r1, r2
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <find_volume+0x2a8>
 80076ec:	230d      	movs	r3, #13
 80076ee:	e123      	b.n	8007938 <find_volume+0x4ec>
 80076f0:	200000ac 	.word	0x200000ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	3338      	adds	r3, #56	; 0x38
 80076f8:	3313      	adds	r3, #19
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe f826 	bl	800574c <ld_word>
 8007700:	4603      	mov	r3, r0
 8007702:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <find_volume+0x2cc>
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	3338      	adds	r3, #56	; 0x38
 800770e:	3320      	adds	r3, #32
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe f833 	bl	800577c <ld_dword>
 8007716:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	3338      	adds	r3, #56	; 0x38
 800771c:	330e      	adds	r3, #14
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe f814 	bl	800574c <ld_word>
 8007724:	4603      	mov	r3, r0
 8007726:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <find_volume+0x2e6>
 800772e:	230d      	movs	r3, #13
 8007730:	e102      	b.n	8007938 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007732:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007736:	4413      	add	r3, r2
 8007738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773a:	8911      	ldrh	r1, [r2, #8]
 800773c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773e:	8992      	ldrh	r2, [r2, #12]
 8007740:	0952      	lsrs	r2, r2, #5
 8007742:	b292      	uxth	r2, r2
 8007744:	fbb1 f2f2 	udiv	r2, r1, r2
 8007748:	b292      	uxth	r2, r2
 800774a:	4413      	add	r3, r2
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800774e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	429a      	cmp	r2, r3
 8007754:	d201      	bcs.n	800775a <find_volume+0x30e>
 8007756:	230d      	movs	r3, #13
 8007758:	e0ee      	b.n	8007938 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800775a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007762:	8952      	ldrh	r2, [r2, #10]
 8007764:	fbb3 f3f2 	udiv	r3, r3, r2
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <find_volume+0x328>
 8007770:	230d      	movs	r3, #13
 8007772:	e0e1      	b.n	8007938 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007774:	2303      	movs	r3, #3
 8007776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007780:	4293      	cmp	r3, r2
 8007782:	d802      	bhi.n	800778a <find_volume+0x33e>
 8007784:	2302      	movs	r3, #2
 8007786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007790:	4293      	cmp	r3, r2
 8007792:	d802      	bhi.n	800779a <find_volume+0x34e>
 8007794:	2301      	movs	r3, #1
 8007796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	1c9a      	adds	r2, r3, #2
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80077a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ac:	441a      	add	r2, r3
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80077b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	441a      	add	r2, r3
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80077bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d11e      	bne.n	8007802 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	3338      	adds	r3, #56	; 0x38
 80077c8:	332a      	adds	r3, #42	; 0x2a
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd ffbe 	bl	800574c <ld_word>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <find_volume+0x38e>
 80077d6:	230d      	movs	r3, #13
 80077d8:	e0ae      	b.n	8007938 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	891b      	ldrh	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <find_volume+0x39a>
 80077e2:	230d      	movs	r3, #13
 80077e4:	e0a8      	b.n	8007938 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	3338      	adds	r3, #56	; 0x38
 80077ea:	332c      	adds	r3, #44	; 0x2c
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd ffc5 	bl	800577c <ld_dword>
 80077f2:	4602      	mov	r2, r0
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007800:	e01f      	b.n	8007842 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	891b      	ldrh	r3, [r3, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <find_volume+0x3c2>
 800780a:	230d      	movs	r3, #13
 800780c:	e094      	b.n	8007938 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007814:	441a      	add	r2, r3
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800781a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <find_volume+0x3de>
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	e00a      	b.n	8007840 <find_volume+0x3f4>
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	4613      	mov	r3, r2
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	4413      	add	r3, r2
 8007834:	085a      	lsrs	r2, r3, #1
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007840:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	899b      	ldrh	r3, [r3, #12]
 800784a:	4619      	mov	r1, r3
 800784c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784e:	440b      	add	r3, r1
 8007850:	3b01      	subs	r3, #1
 8007852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007854:	8989      	ldrh	r1, [r1, #12]
 8007856:	fbb3 f3f1 	udiv	r3, r3, r1
 800785a:	429a      	cmp	r2, r3
 800785c:	d201      	bcs.n	8007862 <find_volume+0x416>
 800785e:	230d      	movs	r3, #13
 8007860:	e06a      	b.n	8007938 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007868:	619a      	str	r2, [r3, #24]
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	2280      	movs	r2, #128	; 0x80
 8007876:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007878:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800787c:	2b03      	cmp	r3, #3
 800787e:	d149      	bne.n	8007914 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	3338      	adds	r3, #56	; 0x38
 8007884:	3330      	adds	r3, #48	; 0x30
 8007886:	4618      	mov	r0, r3
 8007888:	f7fd ff60 	bl	800574c <ld_word>
 800788c:	4603      	mov	r3, r0
 800788e:	2b01      	cmp	r3, #1
 8007890:	d140      	bne.n	8007914 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007894:	3301      	adds	r3, #1
 8007896:	4619      	mov	r1, r3
 8007898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800789a:	f7fe fa07 	bl	8005cac <move_window>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d137      	bne.n	8007914 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	2200      	movs	r2, #0
 80078a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	3338      	adds	r3, #56	; 0x38
 80078ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd ff4a 	bl	800574c <ld_word>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d127      	bne.n	8007914 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	3338      	adds	r3, #56	; 0x38
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fd ff57 	bl	800577c <ld_dword>
 80078ce:	4603      	mov	r3, r0
 80078d0:	4a1b      	ldr	r2, [pc, #108]	; (8007940 <find_volume+0x4f4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d11e      	bne.n	8007914 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	3338      	adds	r3, #56	; 0x38
 80078da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fd ff4c 	bl	800577c <ld_dword>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4a17      	ldr	r2, [pc, #92]	; (8007944 <find_volume+0x4f8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d113      	bne.n	8007914 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	3338      	adds	r3, #56	; 0x38
 80078f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fd ff41 	bl	800577c <ld_dword>
 80078fa:	4602      	mov	r2, r0
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	3338      	adds	r3, #56	; 0x38
 8007904:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007908:	4618      	mov	r0, r3
 800790a:	f7fd ff37 	bl	800577c <ld_dword>
 800790e:	4602      	mov	r2, r0
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800791a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800791c:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <find_volume+0x4fc>)
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	4b08      	ldr	r3, [pc, #32]	; (8007948 <find_volume+0x4fc>)
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	4b07      	ldr	r3, [pc, #28]	; (8007948 <find_volume+0x4fc>)
 800792a:	881a      	ldrh	r2, [r3, #0]
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007932:	f7fe f953 	bl	8005bdc <clear_lock>
#endif
	return FR_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3758      	adds	r7, #88	; 0x58
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	41615252 	.word	0x41615252
 8007944:	61417272 	.word	0x61417272
 8007948:	200000b0 	.word	0x200000b0

0800794c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007956:	2309      	movs	r3, #9
 8007958:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01c      	beq.n	800799a <validate+0x4e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d018      	beq.n	800799a <validate+0x4e>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d013      	beq.n	800799a <validate+0x4e>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	889a      	ldrh	r2, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	88db      	ldrh	r3, [r3, #6]
 800797c:	429a      	cmp	r2, r3
 800797e:	d10c      	bne.n	800799a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fd fe28 	bl	80055dc <disk_status>
 800798c:	4603      	mov	r3, r0
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <validate+0x4e>
			res = FR_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <validate+0x5a>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	e000      	b.n	80079a8 <validate+0x5c>
 80079a6:	2300      	movs	r3, #0
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	6013      	str	r3, [r2, #0]
	return res;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80079ca:	f107 0310 	add.w	r3, r7, #16
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fca2 	bl	8007318 <get_ldnumber>
 80079d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	da01      	bge.n	80079e0 <f_mount+0x28>
 80079dc:	230b      	movs	r3, #11
 80079de:	e02b      	b.n	8007a38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80079e0:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <f_mount+0x88>)
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80079f0:	69b8      	ldr	r0, [r7, #24]
 80079f2:	f7fe f8f3 	bl	8005bdc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	490d      	ldr	r1, [pc, #52]	; (8007a40 <f_mount+0x88>)
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <f_mount+0x66>
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d001      	beq.n	8007a22 <f_mount+0x6a>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e00a      	b.n	8007a38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a22:	f107 010c 	add.w	r1, r7, #12
 8007a26:	f107 0308 	add.w	r3, r7, #8
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff fd0d 	bl	800744c <find_volume>
 8007a32:	4603      	mov	r3, r0
 8007a34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3720      	adds	r7, #32
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200000ac 	.word	0x200000ac

08007a44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a54:	6018      	str	r0, [r3, #0]
 8007a56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007a5e:	6019      	str	r1, [r3, #0]
 8007a60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a64:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007a68:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a6a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a6e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <f_open+0x38>
 8007a78:	2309      	movs	r3, #9
 8007a7a:	e2a6      	b.n	8007fca <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007a7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a80:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007a84:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007a88:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007a8c:	7812      	ldrb	r2, [r2, #0]
 8007a8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007a92:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007a94:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a98:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fcd0 	bl	800744c <find_volume>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007ab2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f040 827a 	bne.w	8007fb0 <f_open+0x56c>
		dj.obj.fs = fs;
 8007abc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007ac0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 8007ac4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007ac8:	f107 0210 	add.w	r2, r7, #16
 8007acc:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ace:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ad2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff fba4 	bl	800722c <follow_path>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007aea:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d11e      	bne.n	8007b30 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007af2:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8007af6:	b25b      	sxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	da03      	bge.n	8007b04 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007afc:	2306      	movs	r3, #6
 8007afe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007b02:	e015      	b.n	8007b30 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b08:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf14      	ite	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	2300      	moveq	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fd ff11 	bl	800594c <chk_lock>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b34:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f003 031c 	and.w	r3, r3, #28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 80a7 	beq.w	8007c92 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007b44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01f      	beq.n	8007b8c <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b4c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d10e      	bne.n	8007b72 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b54:	f7fd ff56 	bl	8005a04 <enq_lock>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d006      	beq.n	8007b6c <f_open+0x128>
 8007b5e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff f8b2 	bl	8006ccc <dir_register>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	e000      	b.n	8007b6e <f_open+0x12a>
 8007b6c:	2312      	movs	r3, #18
 8007b6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b76:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007b7a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007b7e:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007b82:	7812      	ldrb	r2, [r2, #0]
 8007b84:	f042 0208 	orr.w	r2, r2, #8
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	e015      	b.n	8007bb8 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b8c:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007b90:	f003 0311 	and.w	r3, r3, #17
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <f_open+0x15c>
					res = FR_DENIED;
 8007b98:	2307      	movs	r3, #7
 8007b9a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007b9e:	e00b      	b.n	8007bb8 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ba0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ba4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <f_open+0x174>
 8007bb2:	2308      	movs	r3, #8
 8007bb4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bb8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 8088 	bne.w	8007cd2 <f_open+0x28e>
 8007bc2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007bc6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d07e      	beq.n	8007cd2 <f_open+0x28e>
				dw = GET_FATTIME();
 8007bd4:	f7fd fdb2 	bl	800573c <get_fattime>
 8007bd8:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007bdc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007be0:	330e      	adds	r3, #14
 8007be2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fd fe06 	bl	80057f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007bec:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007bf0:	3316      	adds	r3, #22
 8007bf2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd fdfe 	bl	80057f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007bfc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007c00:	330b      	adds	r3, #11
 8007c02:	2220      	movs	r2, #32
 8007c04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c06:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c0a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fdd3 	bl	80067bc <ld_clust>
 8007c16:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c1a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c1e:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8007c22:	2200      	movs	r2, #0
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fde8 	bl	80067fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c2a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007c2e:	331c      	adds	r3, #28
 8007c30:	2100      	movs	r1, #0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fd fde0 	bl	80057f8 <st_dword>
					fs->wflag = 1;
 8007c38:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c40:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d044      	beq.n	8007cd2 <f_open+0x28e>
						dw = fs->winsect;
 8007c48:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007c52:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fad2 	bl	8006206 <remove_chain>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007c68:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d130      	bne.n	8007cd2 <f_open+0x28e>
							res = move_window(fs, dw);
 8007c70:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c74:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe f817 	bl	8005cac <move_window>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c84:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c88:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007c8c:	3a01      	subs	r2, #1
 8007c8e:	615a      	str	r2, [r3, #20]
 8007c90:	e01f      	b.n	8007cd2 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007c92:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d11b      	bne.n	8007cd2 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007c9a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <f_open+0x26a>
					res = FR_NO_FILE;
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007cac:	e011      	b.n	8007cd2 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cb2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <f_open+0x28e>
 8007cc0:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <f_open+0x28e>
						res = FR_DENIED;
 8007ccc:	2307      	movs	r3, #7
 8007cce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007cd2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d14a      	bne.n	8007d70 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cde:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8007cec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cf0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007cf4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007cf8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d02:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d0a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d0e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007d16:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007d1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d2a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bf14      	ite	ne
 8007d38:	2301      	movne	r3, #1
 8007d3a:	2300      	moveq	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fd fe7e 	bl	8005a48 <inc_lock>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <f_open+0x32c>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d70:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f040 811b 	bne.w	8007fb0 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d7a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007d7e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe fd19 	bl	80067bc <ld_clust>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d90:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d98:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007d9c:	331c      	adds	r3, #28
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd fcec 	bl	800577c <ld_dword>
 8007da4:	4602      	mov	r2, r0
 8007da6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007daa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007db2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007db6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007dc0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007dc4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dc8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007dd0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007dd4:	88da      	ldrh	r2, [r3, #6]
 8007dd6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dda:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007de2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007de6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007df0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007df4:	7812      	ldrb	r2, [r2, #0]
 8007df6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007df8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dfc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007e06:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e0a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2200      	movs	r2, #0
 8007e12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007e14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e18:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007e22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3330      	adds	r3, #48	; 0x30
 8007e2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fd fd2c 	bl	8005892 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007e3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e3e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80b1 	beq.w	8007fb0 <f_open+0x56c>
 8007e4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80a8 	beq.w	8007fb0 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007e60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e64:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e70:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e78:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e7c:	895b      	ldrh	r3, [r3, #10]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e84:	899b      	ldrh	r3, [r3, #12]
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
 8007e8a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ea2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007eae:	e021      	b.n	8007ef4 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8007eb0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007eb4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd ffb1 	bl	8005e26 <get_fat>
 8007ec4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007ec8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d802      	bhi.n	8007ed6 <f_open+0x492>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007ed6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ede:	d102      	bne.n	8007ee6 <f_open+0x4a2>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ee6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007eea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007ef4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d105      	bne.n	8007f08 <f_open+0x4c4>
 8007efc:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007f00:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d8d3      	bhi.n	8007eb0 <f_open+0x46c>
				}
				fp->clust = clst;
 8007f08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007f16:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007f18:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d147      	bne.n	8007fb0 <f_open+0x56c>
 8007f20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f24:	899b      	ldrh	r3, [r3, #12]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f30:	fb01 f202 	mul.w	r2, r1, r2
 8007f34:	1a9b      	subs	r3, r3, r2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d03a      	beq.n	8007fb0 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007f3a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f3e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fd ff50 	bl	8005de8 <clust2sect>
 8007f48:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007f4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d103      	bne.n	8007f5c <f_open+0x518>
						res = FR_INT_ERR;
 8007f54:	2302      	movs	r3, #2
 8007f56:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007f5a:	e029      	b.n	8007fb0 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007f5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f60:	899b      	ldrh	r3, [r3, #12]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007f68:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f70:	441a      	add	r2, r3
 8007f72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f76:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007f7e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f82:	7858      	ldrb	r0, [r3, #1]
 8007f84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6a1a      	ldr	r2, [r3, #32]
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f7fd fb5c 	bl	800565c <disk_read>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <f_open+0x56c>
 8007faa:	2301      	movs	r3, #1
 8007fac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007fb0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d006      	beq.n	8007fc6 <f_open+0x582>
 8007fb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fbc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007fc6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08e      	sub	sp, #56	; 0x38
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f107 0214 	add.w	r2, r7, #20
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff fca9 	bl	800794c <validate>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008004:	2b00      	cmp	r3, #0
 8008006:	d107      	bne.n	8008018 <f_read+0x44>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	7d5b      	ldrb	r3, [r3, #21]
 800800c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <f_read+0x4a>
 8008018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800801c:	e135      	b.n	800828a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	7d1b      	ldrb	r3, [r3, #20]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <f_read+0x5a>
 800802a:	2307      	movs	r3, #7
 800802c:	e12d      	b.n	800828a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	429a      	cmp	r2, r3
 8008040:	f240 811e 	bls.w	8008280 <f_read+0x2ac>
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008048:	e11a      	b.n	8008280 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	8992      	ldrh	r2, [r2, #12]
 8008052:	fbb3 f1f2 	udiv	r1, r3, r2
 8008056:	fb01 f202 	mul.w	r2, r1, r2
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 80d5 	bne.w	800820c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	8992      	ldrh	r2, [r2, #12]
 800806a:	fbb3 f3f2 	udiv	r3, r3, r2
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	8952      	ldrh	r2, [r2, #10]
 8008072:	3a01      	subs	r2, #1
 8008074:	4013      	ands	r3, r2
 8008076:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d12f      	bne.n	80080de <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	633b      	str	r3, [r7, #48]	; 0x30
 800808c:	e013      	b.n	80080b6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d007      	beq.n	80080a6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	4619      	mov	r1, r3
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7fe f9af 	bl	8006400 <clmt_clust>
 80080a2:	6338      	str	r0, [r7, #48]	; 0x30
 80080a4:	e007      	b.n	80080b6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	4619      	mov	r1, r3
 80080ae:	4610      	mov	r0, r2
 80080b0:	f7fd feb9 	bl	8005e26 <get_fat>
 80080b4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d804      	bhi.n	80080c6 <f_read+0xf2>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2202      	movs	r2, #2
 80080c0:	755a      	strb	r2, [r3, #21]
 80080c2:	2302      	movs	r3, #2
 80080c4:	e0e1      	b.n	800828a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080cc:	d104      	bne.n	80080d8 <f_read+0x104>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	755a      	strb	r2, [r3, #21]
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0d8      	b.n	800828a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080dc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f7fd fe7e 	bl	8005de8 <clust2sect>
 80080ec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <f_read+0x12a>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2202      	movs	r2, #2
 80080f8:	755a      	strb	r2, [r3, #21]
 80080fa:	2302      	movs	r3, #2
 80080fc:	e0c5      	b.n	800828a <f_read+0x2b6>
			sect += csect;
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	4413      	add	r3, r2
 8008104:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	899b      	ldrh	r3, [r3, #12]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d041      	beq.n	800819e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811e:	4413      	add	r3, r2
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	8952      	ldrh	r2, [r2, #10]
 8008124:	4293      	cmp	r3, r2
 8008126:	d905      	bls.n	8008134 <f_read+0x160>
					cc = fs->csize - csect;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	895b      	ldrh	r3, [r3, #10]
 800812c:	461a      	mov	r2, r3
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	7858      	ldrb	r0, [r3, #1]
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800813e:	f7fd fa8d 	bl	800565c <disk_read>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <f_read+0x17e>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	755a      	strb	r2, [r3, #21]
 800814e:	2301      	movs	r3, #1
 8008150:	e09b      	b.n	800828a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	7d1b      	ldrb	r3, [r3, #20]
 8008156:	b25b      	sxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	da18      	bge.n	800818e <f_read+0x1ba>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1a      	ldr	r2, [r3, #32]
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008166:	429a      	cmp	r2, r3
 8008168:	d911      	bls.n	800818e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1a      	ldr	r2, [r3, #32]
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	8992      	ldrh	r2, [r2, #12]
 8008176:	fb02 f303 	mul.w	r3, r2, r3
 800817a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817c:	18d0      	adds	r0, r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	899b      	ldrh	r3, [r3, #12]
 8008188:	461a      	mov	r2, r3
 800818a:	f7fd fb61 	bl	8005850 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	899b      	ldrh	r3, [r3, #12]
 8008192:	461a      	mov	r2, r3
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	fb02 f303 	mul.w	r3, r2, r3
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800819c:	e05c      	b.n	8008258 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d02e      	beq.n	8008206 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	7d1b      	ldrb	r3, [r3, #20]
 80081ac:	b25b      	sxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da18      	bge.n	80081e4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	7858      	ldrb	r0, [r3, #1]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1a      	ldr	r2, [r3, #32]
 80081c0:	2301      	movs	r3, #1
 80081c2:	f7fd fa6b 	bl	800569c <disk_write>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <f_read+0x202>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	755a      	strb	r2, [r3, #21]
 80081d2:	2301      	movs	r3, #1
 80081d4:	e059      	b.n	800828a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	7d1b      	ldrb	r3, [r3, #20]
 80081da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	7858      	ldrb	r0, [r3, #1]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081ee:	2301      	movs	r3, #1
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	f7fd fa33 	bl	800565c <disk_read>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <f_read+0x232>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	755a      	strb	r2, [r3, #21]
 8008202:	2301      	movs	r3, #1
 8008204:	e041      	b.n	800828a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	899b      	ldrh	r3, [r3, #12]
 8008210:	4618      	mov	r0, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	8992      	ldrh	r2, [r2, #12]
 800821a:	fbb3 f1f2 	udiv	r1, r3, r2
 800821e:	fb01 f202 	mul.w	r2, r1, r2
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	1ac3      	subs	r3, r0, r3
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d901      	bls.n	8008234 <f_read+0x260>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	8992      	ldrh	r2, [r2, #12]
 8008242:	fbb3 f0f2 	udiv	r0, r3, r2
 8008246:	fb00 f202 	mul.w	r2, r0, r2
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	440b      	add	r3, r1
 800824e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008250:	4619      	mov	r1, r3
 8008252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008254:	f7fd fafc 	bl	8005850 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	4413      	add	r3, r2
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	699a      	ldr	r2, [r3, #24]
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008266:	441a      	add	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	619a      	str	r2, [r3, #24]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	441a      	add	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f47f aee1 	bne.w	800804a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3738      	adds	r7, #56	; 0x38
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b086      	sub	sp, #24
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f107 0208 	add.w	r2, r7, #8
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fb52 	bl	800794c <validate>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d168      	bne.n	8008384 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7d1b      	ldrb	r3, [r3, #20]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d062      	beq.n	8008384 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7d1b      	ldrb	r3, [r3, #20]
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	da15      	bge.n	80082f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	7858      	ldrb	r0, [r3, #1]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1a      	ldr	r2, [r3, #32]
 80082d6:	2301      	movs	r3, #1
 80082d8:	f7fd f9e0 	bl	800569c <disk_write>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <f_sync+0x54>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e04f      	b.n	8008386 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7d1b      	ldrb	r3, [r3, #20]
 80082ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80082f4:	f7fd fa22 	bl	800573c <get_fattime>
 80082f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f7fd fcd2 	bl	8005cac <move_window>
 8008308:	4603      	mov	r3, r0
 800830a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d138      	bne.n	8008384 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	330b      	adds	r3, #11
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	330b      	adds	r3, #11
 8008322:	f042 0220 	orr.w	r2, r2, #32
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	461a      	mov	r2, r3
 8008334:	68f9      	ldr	r1, [r7, #12]
 8008336:	f7fe fa60 	bl	80067fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f103 021c 	add.w	r2, r3, #28
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	4619      	mov	r1, r3
 8008346:	4610      	mov	r0, r2
 8008348:	f7fd fa56 	bl	80057f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3316      	adds	r3, #22
 8008350:	6939      	ldr	r1, [r7, #16]
 8008352:	4618      	mov	r0, r3
 8008354:	f7fd fa50 	bl	80057f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3312      	adds	r3, #18
 800835c:	2100      	movs	r1, #0
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd fa2f 	bl	80057c2 <st_word>
					fs->wflag = 1;
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2201      	movs	r2, #1
 8008368:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4618      	mov	r0, r3
 800836e:	f7fd fccb 	bl	8005d08 <sync_fs>
 8008372:	4603      	mov	r3, r0
 8008374:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7d1b      	ldrb	r3, [r3, #20]
 800837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837e:	b2da      	uxtb	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008384:	7dfb      	ldrb	r3, [r7, #23]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff ff7b 	bl	8008292 <f_sync>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d118      	bne.n	80083d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f107 0208 	add.w	r2, r7, #8
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff facc 	bl	800794c <validate>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10c      	bne.n	80083d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd fbce 	bl	8005b64 <dec_lock>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80083fa:	4b1f      	ldr	r3, [pc, #124]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 80083fc:	7a5b      	ldrb	r3, [r3, #9]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d131      	bne.n	8008468 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008404:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 8008406:	7a5b      	ldrb	r3, [r3, #9]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	4b1a      	ldr	r3, [pc, #104]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 800840e:	2100      	movs	r1, #0
 8008410:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008412:	4b19      	ldr	r3, [pc, #100]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 8008414:	7a5b      	ldrb	r3, [r3, #9]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	4a17      	ldr	r2, [pc, #92]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 8008424:	7a5b      	ldrb	r3, [r3, #9]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	4b13      	ldr	r3, [pc, #76]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 800842c:	4413      	add	r3, r2
 800842e:	79fa      	ldrb	r2, [r7, #7]
 8008430:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008432:	4b11      	ldr	r3, [pc, #68]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 8008434:	7a5b      	ldrb	r3, [r3, #9]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	b2d1      	uxtb	r1, r2
 800843c:	4a0e      	ldr	r2, [pc, #56]	; (8008478 <FATFS_LinkDriverEx+0x94>)
 800843e:	7251      	strb	r1, [r2, #9]
 8008440:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008442:	7dbb      	ldrb	r3, [r7, #22]
 8008444:	3330      	adds	r3, #48	; 0x30
 8008446:	b2da      	uxtb	r2, r3
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	3301      	adds	r3, #1
 8008450:	223a      	movs	r2, #58	; 0x3a
 8008452:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3302      	adds	r3, #2
 8008458:	222f      	movs	r2, #47	; 0x2f
 800845a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	3303      	adds	r3, #3
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
}
 800846a:	4618      	mov	r0, r3
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	200000d4 	.word	0x200000d4

0800847c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008486:	2200      	movs	r2, #0
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff ffaa 	bl	80083e4 <FATFS_LinkDriverEx>
 8008490:	4603      	mov	r3, r0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80084a2:	f7f8 fe2f 	bl	8001104 <HAL_GetTick>
 80084a6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80084a8:	e006      	b.n	80084b8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80084aa:	f7fc ff81 	bl	80053b0 <BSP_SD_GetCardState>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e009      	b.n	80084cc <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80084b8:	f7f8 fe24 	bl	8001104 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d8f0      	bhi.n	80084aa <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80084c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80084de:	4b0b      	ldr	r3, [pc, #44]	; (800850c <SD_CheckStatus+0x38>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80084e4:	f7fc ff64 	bl	80053b0 <BSP_SD_GetCardState>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80084ee:	4b07      	ldr	r3, [pc, #28]	; (800850c <SD_CheckStatus+0x38>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f023 0301 	bic.w	r3, r3, #1
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <SD_CheckStatus+0x38>)
 80084fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80084fe:	4b03      	ldr	r3, [pc, #12]	; (800850c <SD_CheckStatus+0x38>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b2db      	uxtb	r3, r3
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000009 	.word	0x20000009

08008510 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800851a:	f7fc fefd 	bl	8005318 <BSP_SD_Init>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d107      	bne.n	8008534 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff ffd4 	bl	80084d4 <SD_CheckStatus>
 800852c:	4603      	mov	r3, r0
 800852e:	461a      	mov	r2, r3
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <SD_initialize+0x34>)
 8008532:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008534:	4b03      	ldr	r3, [pc, #12]	; (8008544 <SD_initialize+0x34>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	b2db      	uxtb	r3, r3
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000009 	.word	0x20000009

08008548 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff ffbd 	bl	80084d4 <SD_CheckStatus>
 800855a:	4603      	mov	r3, r0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008578:	f247 5030 	movw	r0, #30000	; 0x7530
 800857c:	f7ff ff8d 	bl	800849a <SD_CheckStatusWithTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	da01      	bge.n	800858a <SD_read+0x26>
  {
    return res;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	e03b      	b.n	8008602 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	68b8      	ldr	r0, [r7, #8]
 8008590:	f7fc feda 	bl	8005348 <BSP_SD_ReadBlocks_DMA>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d132      	bne.n	8008600 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800859a:	4b1c      	ldr	r3, [pc, #112]	; (800860c <SD_read+0xa8>)
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80085a0:	f7f8 fdb0 	bl	8001104 <HAL_GetTick>
 80085a4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80085a6:	bf00      	nop
 80085a8:	4b18      	ldr	r3, [pc, #96]	; (800860c <SD_read+0xa8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d108      	bne.n	80085c2 <SD_read+0x5e>
 80085b0:	f7f8 fda8 	bl	8001104 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	f247 522f 	movw	r2, #29999	; 0x752f
 80085be:	4293      	cmp	r3, r2
 80085c0:	d9f2      	bls.n	80085a8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80085c2:	4b12      	ldr	r3, [pc, #72]	; (800860c <SD_read+0xa8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d102      	bne.n	80085d0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	75fb      	strb	r3, [r7, #23]
 80085ce:	e017      	b.n	8008600 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80085d0:	4b0e      	ldr	r3, [pc, #56]	; (800860c <SD_read+0xa8>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80085d6:	f7f8 fd95 	bl	8001104 <HAL_GetTick>
 80085da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80085dc:	e007      	b.n	80085ee <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80085de:	f7fc fee7 	bl	80053b0 <BSP_SD_GetCardState>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <SD_read+0x8a>
          {
            res = RES_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80085ec:	e008      	b.n	8008600 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80085ee:	f7f8 fd89 	bl	8001104 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d9ee      	bls.n	80085de <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	200000e4 	.word	0x200000e4

08008610 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008624:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <SD_write+0xa8>)
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800862a:	f247 5030 	movw	r0, #30000	; 0x7530
 800862e:	f7ff ff34 	bl	800849a <SD_CheckStatusWithTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	da01      	bge.n	800863c <SD_write+0x2c>
  {
    return res;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	e038      	b.n	80086ae <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	68b8      	ldr	r0, [r7, #8]
 8008642:	f7fc fe9b 	bl	800537c <BSP_SD_WriteBlocks_DMA>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d12f      	bne.n	80086ac <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800864c:	f7f8 fd5a 	bl	8001104 <HAL_GetTick>
 8008650:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008652:	bf00      	nop
 8008654:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <SD_write+0xa8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d108      	bne.n	800866e <SD_write+0x5e>
 800865c:	f7f8 fd52 	bl	8001104 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	f247 522f 	movw	r2, #29999	; 0x752f
 800866a:	4293      	cmp	r3, r2
 800866c:	d9f2      	bls.n	8008654 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <SD_write+0xa8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	75fb      	strb	r3, [r7, #23]
 800867a:	e017      	b.n	80086ac <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800867c:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <SD_write+0xa8>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008682:	f7f8 fd3f 	bl	8001104 <HAL_GetTick>
 8008686:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008688:	e007      	b.n	800869a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800868a:	f7fc fe91 	bl	80053b0 <BSP_SD_GetCardState>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <SD_write+0x8a>
          {
            res = RES_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	75fb      	strb	r3, [r7, #23]
            break;
 8008698:	e008      	b.n	80086ac <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800869a:	f7f8 fd33 	bl	8001104 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d9ee      	bls.n	800868a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200000e0 	.word	0x200000e0

080086bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08c      	sub	sp, #48	; 0x30
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	603a      	str	r2, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
 80086c8:	460b      	mov	r3, r1
 80086ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80086d2:	4b25      	ldr	r3, [pc, #148]	; (8008768 <SD_ioctl+0xac>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_ioctl+0x28>
 80086e0:	2303      	movs	r3, #3
 80086e2:	e03c      	b.n	800875e <SD_ioctl+0xa2>

  switch (cmd)
 80086e4:	79bb      	ldrb	r3, [r7, #6]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d834      	bhi.n	8008754 <SD_ioctl+0x98>
 80086ea:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <SD_ioctl+0x34>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008709 	.word	0x08008709
 80086f8:	08008721 	.word	0x08008721
 80086fc:	0800873b 	.word	0x0800873b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008706:	e028      	b.n	800875a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008708:	f107 030c 	add.w	r3, r7, #12
 800870c:	4618      	mov	r0, r3
 800870e:	f7fc fe5f 	bl	80053d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800871e:	e01c      	b.n	800875a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008720:	f107 030c 	add.w	r3, r7, #12
 8008724:	4618      	mov	r0, r3
 8008726:	f7fc fe53 	bl	80053d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	b29a      	uxth	r2, r3
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008738:	e00f      	b.n	800875a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	4618      	mov	r0, r3
 8008740:	f7fc fe46 	bl	80053d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	0a5a      	lsrs	r2, r3, #9
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008752:	e002      	b.n	800875a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008754:	2304      	movs	r3, #4
 8008756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800875a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800875e:	4618      	mov	r0, r3
 8008760:	3730      	adds	r7, #48	; 0x30
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000009 	.word	0x20000009

0800876c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008770:	4b03      	ldr	r3, [pc, #12]	; (8008780 <BSP_SD_WriteCpltCallback+0x14>)
 8008772:	2201      	movs	r2, #1
 8008774:	601a      	str	r2, [r3, #0]
}
 8008776:	bf00      	nop
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	200000e0 	.word	0x200000e0

08008784 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <BSP_SD_ReadCpltCallback+0x14>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	200000e4 	.word	0x200000e4

0800879c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80087a8:	f001 ffae 	bl	800a708 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80087ac:	4b67      	ldr	r3, [pc, #412]	; (800894c <pvPortMalloc+0x1b0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80087b4:	f000 f938 	bl	8008a28 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087b8:	4b65      	ldr	r3, [pc, #404]	; (8008950 <pvPortMalloc+0x1b4>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4013      	ands	r3, r2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f040 80a7 	bne.w	8008914 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d02d      	beq.n	8008828 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80087cc:	2208      	movs	r2, #8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d227      	bcs.n	8008828 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80087d8:	2208      	movs	r2, #8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d021      	beq.n	800882e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	3308      	adds	r3, #8
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d214      	bcs.n	8008822 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f023 0307 	bic.w	r3, r3, #7
 80087fe:	3308      	adds	r3, #8
 8008800:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f003 0307 	and.w	r3, r3, #7
 8008808:	2b00      	cmp	r3, #0
 800880a:	d010      	beq.n	800882e <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008826:	e002      	b.n	800882e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	e000      	b.n	8008830 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800882e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d06e      	beq.n	8008914 <pvPortMalloc+0x178>
 8008836:	4b47      	ldr	r3, [pc, #284]	; (8008954 <pvPortMalloc+0x1b8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	429a      	cmp	r2, r3
 800883e:	d869      	bhi.n	8008914 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008840:	4b45      	ldr	r3, [pc, #276]	; (8008958 <pvPortMalloc+0x1bc>)
 8008842:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008844:	4b44      	ldr	r3, [pc, #272]	; (8008958 <pvPortMalloc+0x1bc>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800884a:	e004      	b.n	8008856 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d903      	bls.n	8008868 <pvPortMalloc+0xcc>
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f1      	bne.n	800884c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008868:	4b38      	ldr	r3, [pc, #224]	; (800894c <pvPortMalloc+0x1b0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886e:	429a      	cmp	r2, r3
 8008870:	d050      	beq.n	8008914 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2208      	movs	r2, #8
 8008878:	4413      	add	r3, r2
 800887a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	1ad2      	subs	r2, r2, r3
 800888c:	2308      	movs	r3, #8
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	429a      	cmp	r2, r3
 8008892:	d91f      	bls.n	80088d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4413      	add	r3, r2
 800889a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <pvPortMalloc+0x120>
        __asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	613b      	str	r3, [r7, #16]
    }
 80088b8:	bf00      	nop
 80088ba:	e7fe      	b.n	80088ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	1ad2      	subs	r2, r2, r3
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088ce:	69b8      	ldr	r0, [r7, #24]
 80088d0:	f000 f90c 	bl	8008aec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088d4:	4b1f      	ldr	r3, [pc, #124]	; (8008954 <pvPortMalloc+0x1b8>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	4a1d      	ldr	r2, [pc, #116]	; (8008954 <pvPortMalloc+0x1b8>)
 80088e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088e2:	4b1c      	ldr	r3, [pc, #112]	; (8008954 <pvPortMalloc+0x1b8>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b1d      	ldr	r3, [pc, #116]	; (800895c <pvPortMalloc+0x1c0>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d203      	bcs.n	80088f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088ee:	4b19      	ldr	r3, [pc, #100]	; (8008954 <pvPortMalloc+0x1b8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1a      	ldr	r2, [pc, #104]	; (800895c <pvPortMalloc+0x1c0>)
 80088f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <pvPortMalloc+0x1b4>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	431a      	orrs	r2, r3
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800890a:	4b15      	ldr	r3, [pc, #84]	; (8008960 <pvPortMalloc+0x1c4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3301      	adds	r3, #1
 8008910:	4a13      	ldr	r2, [pc, #76]	; (8008960 <pvPortMalloc+0x1c4>)
 8008912:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008914:	f001 ff06 	bl	800a724 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 800891e:	f007 fb61 	bl	800ffe4 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <pvPortMalloc+0x1a6>
        __asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	60fb      	str	r3, [r7, #12]
    }
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <pvPortMalloc+0x1a4>
    return pvReturn;
 8008942:	69fb      	ldr	r3, [r7, #28]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3728      	adds	r7, #40	; 0x28
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	200028f0 	.word	0x200028f0
 8008950:	20002904 	.word	0x20002904
 8008954:	200028f4 	.word	0x200028f4
 8008958:	200028e8 	.word	0x200028e8
 800895c:	200028f8 	.word	0x200028f8
 8008960:	200028fc 	.word	0x200028fc

08008964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d04d      	beq.n	8008a12 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008976:	2308      	movs	r3, #8
 8008978:	425b      	negs	r3, r3
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4413      	add	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	4b24      	ldr	r3, [pc, #144]	; (8008a1c <vPortFree+0xb8>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4013      	ands	r3, r2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <vPortFree+0x44>
        __asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60fb      	str	r3, [r7, #12]
    }
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00a      	beq.n	80089c6 <vPortFree+0x62>
        __asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60bb      	str	r3, [r7, #8]
    }
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <vPortFree+0xb8>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4013      	ands	r3, r2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01e      	beq.n	8008a12 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d11a      	bne.n	8008a12 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <vPortFree+0xb8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	43db      	mvns	r3, r3
 80089e6:	401a      	ands	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80089ec:	f001 fe8c 	bl	800a708 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <vPortFree+0xbc>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4413      	add	r3, r2
 80089fa:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <vPortFree+0xbc>)
 80089fc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089fe:	6938      	ldr	r0, [r7, #16]
 8008a00:	f000 f874 	bl	8008aec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008a04:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <vPortFree+0xc0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	4a06      	ldr	r2, [pc, #24]	; (8008a24 <vPortFree+0xc0>)
 8008a0c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008a0e:	f001 fe89 	bl	800a724 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008a12:	bf00      	nop
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20002904 	.word	0x20002904
 8008a20:	200028f4 	.word	0x200028f4
 8008a24:	20002900 	.word	0x20002900

08008a28 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008a32:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008a34:	4b27      	ldr	r3, [pc, #156]	; (8008ad4 <prvHeapInit+0xac>)
 8008a36:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00c      	beq.n	8008a5c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3307      	adds	r3, #7
 8008a46:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0307 	bic.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	4a1f      	ldr	r2, [pc, #124]	; (8008ad4 <prvHeapInit+0xac>)
 8008a58:	4413      	add	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a60:	4a1d      	ldr	r2, [pc, #116]	; (8008ad8 <prvHeapInit+0xb0>)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008a66:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <prvHeapInit+0xb0>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4413      	add	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008a74:	2208      	movs	r2, #8
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0307 	bic.w	r3, r3, #7
 8008a82:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4a15      	ldr	r2, [pc, #84]	; (8008adc <prvHeapInit+0xb4>)
 8008a88:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008a8a:	4b14      	ldr	r3, [pc, #80]	; (8008adc <prvHeapInit+0xb4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <prvHeapInit+0xb4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	1ad2      	subs	r2, r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008aa8:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <prvHeapInit+0xb4>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <prvHeapInit+0xb8>)
 8008ab6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <prvHeapInit+0xbc>)
 8008abe:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ac0:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <prvHeapInit+0xc0>)
 8008ac2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ac6:	601a      	str	r2, [r3, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	200000e8 	.word	0x200000e8
 8008ad8:	200028e8 	.word	0x200028e8
 8008adc:	200028f0 	.word	0x200028f0
 8008ae0:	200028f8 	.word	0x200028f8
 8008ae4:	200028f4 	.word	0x200028f4
 8008ae8:	20002904 	.word	0x20002904

08008aec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008af4:	4b28      	ldr	r3, [pc, #160]	; (8008b98 <prvInsertBlockIntoFreeList+0xac>)
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e002      	b.n	8008b00 <prvInsertBlockIntoFreeList+0x14>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d8f7      	bhi.n	8008afa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	4413      	add	r3, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d108      	bne.n	8008b2e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	441a      	add	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	441a      	add	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d118      	bne.n	8008b74 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <prvInsertBlockIntoFreeList+0xb0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d00d      	beq.n	8008b6a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	441a      	add	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	e008      	b.n	8008b7c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <prvInsertBlockIntoFreeList+0xb0>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	e003      	b.n	8008b7c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d002      	beq.n	8008b8a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008b8a:	bf00      	nop
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	200028e8 	.word	0x200028e8
 8008b9c:	200028f0 	.word	0x200028f0

08008ba0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f103 0208 	add.w	r2, r3, #8
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bb8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f103 0208 	add.w	r2, r3, #8
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f103 0208 	add.w	r2, r3, #8
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	601a      	str	r2, [r3, #0]
}
 8008c36:	bf00      	nop
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c58:	d103      	bne.n	8008c62 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	e00c      	b.n	8008c7c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3308      	adds	r3, #8
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	e002      	b.n	8008c70 <vListInsert+0x2e>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d2f6      	bcs.n	8008c6a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]
}
 8008ca8:	bf00      	nop
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6892      	ldr	r2, [r2, #8]
 8008cca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6852      	ldr	r2, [r2, #4]
 8008cd4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d103      	bne.n	8008ce8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	1e5a      	subs	r2, r3, #1
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3b04      	subs	r3, #4
 8008d18:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3b04      	subs	r3, #4
 8008d26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f023 0201 	bic.w	r2, r3, #1
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008d38:	4a0c      	ldr	r2, [pc, #48]	; (8008d6c <pxPortInitialiseStack+0x64>)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3b14      	subs	r3, #20
 8008d42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3b04      	subs	r3, #4
 8008d4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f06f 0202 	mvn.w	r2, #2
 8008d56:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3b20      	subs	r3, #32
 8008d5c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	08008d71 	.word	0x08008d71

08008d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008d7a:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <prvTaskExitError+0x54>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d82:	d00a      	beq.n	8008d9a <prvTaskExitError+0x2a>
        __asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	60fb      	str	r3, [r7, #12]
    }
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <prvTaskExitError+0x28>
        __asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60bb      	str	r3, [r7, #8]
    }
 8008dac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008dae:	bf00      	nop
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0fc      	beq.n	8008db0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008db6:	bf00      	nop
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	2000000c 	.word	0x2000000c
	...

08008dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <pxCurrentTCBConst2>)
 8008dd2:	6819      	ldr	r1, [r3, #0]
 8008dd4:	6808      	ldr	r0, [r1, #0]
 8008dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	f380 8809 	msr	PSP, r0
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	4770      	bx	lr
 8008dec:	f3af 8000 	nop.w

08008df0 <pxCurrentTCBConst2>:
 8008df0:	20002950 	.word	0x20002950
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop

08008df8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008df8:	4808      	ldr	r0, [pc, #32]	; (8008e1c <prvPortStartFirstTask+0x24>)
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f380 8808 	msr	MSP, r0
 8008e02:	f04f 0000 	mov.w	r0, #0
 8008e06:	f380 8814 	msr	CONTROL, r0
 8008e0a:	b662      	cpsie	i
 8008e0c:	b661      	cpsie	f
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	df00      	svc	0
 8008e18:	bf00      	nop
 8008e1a:	0000      	.short	0x0000
 8008e1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop

08008e24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e2a:	4b46      	ldr	r3, [pc, #280]	; (8008f44 <xPortStartScheduler+0x120>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a46      	ldr	r2, [pc, #280]	; (8008f48 <xPortStartScheduler+0x124>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d10a      	bne.n	8008e4a <xPortStartScheduler+0x26>
        __asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	613b      	str	r3, [r7, #16]
    }
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e4a:	4b3e      	ldr	r3, [pc, #248]	; (8008f44 <xPortStartScheduler+0x120>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a3f      	ldr	r2, [pc, #252]	; (8008f4c <xPortStartScheduler+0x128>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d10a      	bne.n	8008e6a <xPortStartScheduler+0x46>
        __asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	60fb      	str	r3, [r7, #12]
    }
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e6a:	4b39      	ldr	r3, [pc, #228]	; (8008f50 <xPortStartScheduler+0x12c>)
 8008e6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	22ff      	movs	r2, #255	; 0xff
 8008e7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <xPortStartScheduler+0x130>)
 8008e90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e92:	4b31      	ldr	r3, [pc, #196]	; (8008f58 <xPortStartScheduler+0x134>)
 8008e94:	2207      	movs	r2, #7
 8008e96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e98:	e009      	b.n	8008eae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008e9a:	4b2f      	ldr	r3, [pc, #188]	; (8008f58 <xPortStartScheduler+0x134>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	4a2d      	ldr	r2, [pc, #180]	; (8008f58 <xPortStartScheduler+0x134>)
 8008ea2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb6:	2b80      	cmp	r3, #128	; 0x80
 8008eb8:	d0ef      	beq.n	8008e9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008eba:	4b27      	ldr	r3, [pc, #156]	; (8008f58 <xPortStartScheduler+0x134>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f1c3 0307 	rsb	r3, r3, #7
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d00a      	beq.n	8008edc <xPortStartScheduler+0xb8>
        __asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60bb      	str	r3, [r7, #8]
    }
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008edc:	4b1e      	ldr	r3, [pc, #120]	; (8008f58 <xPortStartScheduler+0x134>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	021b      	lsls	r3, r3, #8
 8008ee2:	4a1d      	ldr	r2, [pc, #116]	; (8008f58 <xPortStartScheduler+0x134>)
 8008ee4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ee6:	4b1c      	ldr	r3, [pc, #112]	; (8008f58 <xPortStartScheduler+0x134>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eee:	4a1a      	ldr	r2, [pc, #104]	; (8008f58 <xPortStartScheduler+0x134>)
 8008ef0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008efa:	4b18      	ldr	r3, [pc, #96]	; (8008f5c <xPortStartScheduler+0x138>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a17      	ldr	r2, [pc, #92]	; (8008f5c <xPortStartScheduler+0x138>)
 8008f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008f06:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <xPortStartScheduler+0x138>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a14      	ldr	r2, [pc, #80]	; (8008f5c <xPortStartScheduler+0x138>)
 8008f0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008f12:	f000 f8e3 	bl	80090dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008f16:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <xPortStartScheduler+0x13c>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008f1c:	f000 f902 	bl	8009124 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f20:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <xPortStartScheduler+0x140>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a0f      	ldr	r2, [pc, #60]	; (8008f64 <xPortStartScheduler+0x140>)
 8008f26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008f2c:	f7ff ff64 	bl	8008df8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008f30:	f001 fd7a 	bl	800aa28 <vTaskSwitchContext>
    prvTaskExitError();
 8008f34:	f7ff ff1c 	bl	8008d70 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	e000ed00 	.word	0xe000ed00
 8008f48:	410fc271 	.word	0x410fc271
 8008f4c:	410fc270 	.word	0x410fc270
 8008f50:	e000e400 	.word	0xe000e400
 8008f54:	20002908 	.word	0x20002908
 8008f58:	2000290c 	.word	0x2000290c
 8008f5c:	e000ed20 	.word	0xe000ed20
 8008f60:	2000000c 	.word	0x2000000c
 8008f64:	e000ef34 	.word	0xe000ef34

08008f68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	607b      	str	r3, [r7, #4]
    }
 8008f80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008f82:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <vPortEnterCritical+0x58>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	4a0d      	ldr	r2, [pc, #52]	; (8008fc0 <vPortEnterCritical+0x58>)
 8008f8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <vPortEnterCritical+0x58>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d10f      	bne.n	8008fb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f94:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <vPortEnterCritical+0x5c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00a      	beq.n	8008fb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	603b      	str	r3, [r7, #0]
    }
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <vPortEnterCritical+0x4a>
    }
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	2000000c 	.word	0x2000000c
 8008fc4:	e000ed04 	.word	0xe000ed04

08008fc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <vPortExitCritical+0x50>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <vPortExitCritical+0x24>
        __asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	607b      	str	r3, [r7, #4]
    }
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <vPortExitCritical+0x50>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	4a09      	ldr	r2, [pc, #36]	; (8009018 <vPortExitCritical+0x50>)
 8008ff4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008ff6:	4b08      	ldr	r3, [pc, #32]	; (8009018 <vPortExitCritical+0x50>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <vPortExitCritical+0x42>
 8008ffe:	2300      	movs	r3, #0
 8009000:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009008:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	2000000c 	.word	0x2000000c
 800901c:	00000000 	.word	0x00000000

08009020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009020:	f3ef 8009 	mrs	r0, PSP
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	4b15      	ldr	r3, [pc, #84]	; (8009080 <pxCurrentTCBConst>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	f01e 0f10 	tst.w	lr, #16
 8009030:	bf08      	it	eq
 8009032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	6010      	str	r0, [r2, #0]
 800903c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009044:	f380 8811 	msr	BASEPRI, r0
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f001 fcea 	bl	800aa28 <vTaskSwitchContext>
 8009054:	f04f 0000 	mov.w	r0, #0
 8009058:	f380 8811 	msr	BASEPRI, r0
 800905c:	bc09      	pop	{r0, r3}
 800905e:	6819      	ldr	r1, [r3, #0]
 8009060:	6808      	ldr	r0, [r1, #0]
 8009062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009066:	f01e 0f10 	tst.w	lr, #16
 800906a:	bf08      	it	eq
 800906c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009070:	f380 8809 	msr	PSP, r0
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w

08009080 <pxCurrentTCBConst>:
 8009080:	20002950 	.word	0x20002950
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop

08009088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
        __asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	607b      	str	r3, [r7, #4]
    }
 80090a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80090a2:	f003 ff39 	bl	800cf18 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80090a6:	f001 fc01 	bl	800a8ac <xTaskIncrementTick>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80090b0:	f003 ff90 	bl	800cfd4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090b4:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <SysTick_Handler+0x50>)
 80090b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	e001      	b.n	80090c2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80090be:	f003 ff6d 	bl	800cf9c <SEGGER_SYSVIEW_RecordExitISR>
 80090c2:	2300      	movs	r3, #0
 80090c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	f383 8811 	msr	BASEPRI, r3
    }
 80090cc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090e0:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <vPortSetupTimerInterrupt+0x34>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <vPortSetupTimerInterrupt+0x38>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090ec:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <vPortSetupTimerInterrupt+0x3c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <vPortSetupTimerInterrupt+0x40>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	099b      	lsrs	r3, r3, #6
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <vPortSetupTimerInterrupt+0x44>)
 80090fa:	3b01      	subs	r3, #1
 80090fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090fe:	4b04      	ldr	r3, [pc, #16]	; (8009110 <vPortSetupTimerInterrupt+0x34>)
 8009100:	2207      	movs	r2, #7
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	e000e010 	.word	0xe000e010
 8009114:	e000e018 	.word	0xe000e018
 8009118:	20000014 	.word	0x20000014
 800911c:	10624dd3 	.word	0x10624dd3
 8009120:	e000e014 	.word	0xe000e014

08009124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009134 <vPortEnableVFP+0x10>
 8009128:	6801      	ldr	r1, [r0, #0]
 800912a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800912e:	6001      	str	r1, [r0, #0]
 8009130:	4770      	bx	lr
 8009132:	0000      	.short	0x0000
 8009134:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop

0800913c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8009142:	f000 f83b 	bl	80091bc <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009146:	f3ef 8305 	mrs	r3, IPSR
 800914a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b0f      	cmp	r3, #15
 8009150:	d914      	bls.n	800917c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009152:	4a16      	ldr	r2, [pc, #88]	; (80091ac <vPortValidateInterruptPriority+0x70>)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800915c:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <vPortValidateInterruptPriority+0x74>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	7afa      	ldrb	r2, [r7, #11]
 8009162:	429a      	cmp	r2, r3
 8009164:	d20a      	bcs.n	800917c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	607b      	str	r3, [r7, #4]
    }
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800917c:	4b0d      	ldr	r3, [pc, #52]	; (80091b4 <vPortValidateInterruptPriority+0x78>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009184:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <vPortValidateInterruptPriority+0x7c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d90a      	bls.n	80091a2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	603b      	str	r3, [r7, #0]
    }
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <vPortValidateInterruptPriority+0x64>
    }
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	e000e3f0 	.word	0xe000e3f0
 80091b0:	20002908 	.word	0x20002908
 80091b4:	e000ed0c 	.word	0xe000ed0c
 80091b8:	2000290c 	.word	0x2000290c

080091bc <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091c2:	4b1f      	ldr	r3, [pc, #124]	; (8009240 <vSetVarulMaxPRIGROUPValue+0x84>)
 80091c4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	22ff      	movs	r2, #255	; 0xff
 80091ca:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091d4:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091d6:	2207      	movs	r2, #7
 80091d8:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091da:	e009      	b.n	80091f0 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80091dc:	4b19      	ldr	r3, [pc, #100]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	4a18      	ldr	r2, [pc, #96]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091e4:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d0ef      	beq.n	80091dc <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091fc:	4b11      	ldr	r3, [pc, #68]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f1c3 0307 	rsb	r3, r3, #7
 8009204:	2b04      	cmp	r3, #4
 8009206:	d00a      	beq.n	800921e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	60bb      	str	r3, [r7, #8]
    }
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	4a07      	ldr	r2, [pc, #28]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009226:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009230:	4a04      	ldr	r2, [pc, #16]	; (8009244 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009232:	6013      	str	r3, [r2, #0]
}
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	e000e400 	.word	0xe000e400
 8009244:	2000290c 	.word	0x2000290c

08009248 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xQueueGenericReset+0x2a>
        __asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60bb      	str	r3, [r7, #8]
    }
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8009272:	f7ff fe79 	bl	8008f68 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	441a      	add	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	3b01      	subs	r3, #1
 80092a4:	68f9      	ldr	r1, [r7, #12]
 80092a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	441a      	add	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	22ff      	movs	r2, #255	; 0xff
 80092b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	22ff      	movs	r2, #255	; 0xff
 80092be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d114      	bne.n	80092f2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01a      	beq.n	8009306 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3310      	adds	r3, #16
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 fc8b 	bl	800abf0 <xTaskRemoveFromEventList>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d012      	beq.n	8009306 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80092e0:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <xQueueGenericReset+0xcc>)
 80092e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	e009      	b.n	8009306 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3310      	adds	r3, #16
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fc52 	bl	8008ba0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff fc4d 	bl	8008ba0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8009306:	f7ff fe5f 	bl	8008fc8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800930a:	2301      	movs	r3, #1
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8009318:	b580      	push	{r7, lr}
 800931a:	b08e      	sub	sp, #56	; 0x38
 800931c:	af02      	add	r7, sp, #8
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <xQueueGenericCreateStatic+0x52>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <xQueueGenericCreateStatic+0x56>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <xQueueGenericCreateStatic+0x58>
 800936e:	2300      	movs	r3, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	623b      	str	r3, [r7, #32]
    }
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d102      	bne.n	8009396 <xQueueGenericCreateStatic+0x7e>
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <xQueueGenericCreateStatic+0x82>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <xQueueGenericCreateStatic+0x84>
 800939a:	2300      	movs	r3, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	61fb      	str	r3, [r7, #28]
    }
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80093b6:	2350      	movs	r3, #80	; 0x50
 80093b8:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b50      	cmp	r3, #80	; 0x50
 80093be:	d00a      	beq.n	80093d6 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	61bb      	str	r3, [r7, #24]
    }
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093d6:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00d      	beq.n	80093fe <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4613      	mov	r3, r2
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f868 	bl	80094ce <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8009400:	4618      	mov	r0, r3
 8009402:	3730      	adds	r7, #48	; 0x30
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	; 0x30
 800940c:	af02      	add	r7, sp, #8
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10a      	bne.n	8009432 <xQueueGenericCreate+0x2a>
        __asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	61bb      	str	r3, [r7, #24]
    }
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	fb02 f303 	mul.w	r3, r2, r3
 800943a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d006      	beq.n	8009450 <xQueueGenericCreate+0x48>
 8009442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	fbb2 f3f3 	udiv	r3, r2, r3
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	429a      	cmp	r2, r3
 800944e:	d101      	bne.n	8009454 <xQueueGenericCreate+0x4c>
 8009450:	2301      	movs	r3, #1
 8009452:	e000      	b.n	8009456 <xQueueGenericCreate+0x4e>
 8009454:	2300      	movs	r3, #0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <xQueueGenericCreate+0x68>
        __asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	617b      	str	r3, [r7, #20]
    }
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8009476:	d90a      	bls.n	800948e <xQueueGenericCreate+0x86>
        __asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	613b      	str	r3, [r7, #16]
    }
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	3350      	adds	r3, #80	; 0x50
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff f982 	bl	800879c <pvPortMalloc>
 8009498:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d011      	beq.n	80094c4 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	3350      	adds	r3, #80	; 0x50
 80094a8:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094b2:	79fa      	ldrb	r2, [r7, #7]
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	4613      	mov	r3, r2
 80094ba:	69fa      	ldr	r2, [r7, #28]
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 f805 	bl	80094ce <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80094c4:	6a3b      	ldr	r3, [r7, #32]
    }
 80094c6:	4618      	mov	r0, r3
 80094c8:	3728      	adds	r7, #40	; 0x28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d103      	bne.n	80094ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e002      	b.n	80094f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094fc:	2101      	movs	r1, #1
 80094fe:	69b8      	ldr	r0, [r7, #24]
 8009500:	f7ff fea2 	bl	8009248 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	68f9      	ldr	r1, [r7, #12]
 8009512:	2073      	movs	r0, #115	; 0x73
 8009514:	f003 f930 	bl	800c778 <SEGGER_SYSVIEW_RecordU32x3>
}
 8009518:	bf00      	nop
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00e      	beq.n	800954c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009540:	2300      	movs	r3, #0
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f81c 	bl	8009584 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800955e:	2301      	movs	r3, #1
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	2300      	movs	r3, #0
 8009564:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	461a      	mov	r2, r3
 800956a:	6939      	ldr	r1, [r7, #16]
 800956c:	6978      	ldr	r0, [r7, #20]
 800956e:	f7ff ff4b 	bl	8009408 <xQueueGenericCreate>
 8009572:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff ffd3 	bl	8009520 <prvInitialiseMutex>

        return xNewQueue;
 800957a:	68fb      	ldr	r3, [r7, #12]
    }
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b090      	sub	sp, #64	; 0x40
 8009588:	af02      	add	r7, sp, #8
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009592:	2300      	movs	r3, #0
 8009594:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <xQueueGenericSend+0x32>
        __asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d103      	bne.n	80095c4 <xQueueGenericSend+0x40>
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <xQueueGenericSend+0x44>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e000      	b.n	80095ca <xQueueGenericSend+0x46>
 80095c8:	2300      	movs	r3, #0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <xQueueGenericSend+0x60>
        __asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d103      	bne.n	80095f2 <xQueueGenericSend+0x6e>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <xQueueGenericSend+0x72>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e000      	b.n	80095f8 <xQueueGenericSend+0x74>
 80095f6:	2300      	movs	r3, #0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <xQueueGenericSend+0x8e>
        __asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	623b      	str	r3, [r7, #32]
    }
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009612:	f001 fcf7 	bl	800b004 <xTaskGetSchedulerState>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <xQueueGenericSend+0x9e>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <xQueueGenericSend+0xa2>
 8009622:	2301      	movs	r3, #1
 8009624:	e000      	b.n	8009628 <xQueueGenericSend+0xa4>
 8009626:	2300      	movs	r3, #0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <xQueueGenericSend+0xbe>
        __asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	61fb      	str	r3, [r7, #28]
    }
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009642:	f7ff fc91 	bl	8008f68 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964e:	429a      	cmp	r2, r3
 8009650:	d302      	bcc.n	8009658 <xQueueGenericSend+0xd4>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d136      	bne.n	80096c6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	4618      	mov	r0, r3
 800965c:	f003 fe18 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	460b      	mov	r3, r1
 800966a:	4601      	mov	r1, r0
 800966c:	205a      	movs	r0, #90	; 0x5a
 800966e:	f003 f8f9 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009678:	f000 fbcc 	bl	8009e14 <prvCopyDataToQueue>
 800967c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009682:	2b00      	cmp	r3, #0
 8009684:	d010      	beq.n	80096a8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	3324      	adds	r3, #36	; 0x24
 800968a:	4618      	mov	r0, r3
 800968c:	f001 fab0 	bl	800abf0 <xTaskRemoveFromEventList>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d013      	beq.n	80096be <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009696:	4b4d      	ldr	r3, [pc, #308]	; (80097cc <xQueueGenericSend+0x248>)
 8009698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	e00a      	b.n	80096be <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80096ae:	4b47      	ldr	r3, [pc, #284]	; (80097cc <xQueueGenericSend+0x248>)
 80096b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80096be:	f7ff fc83 	bl	8008fc8 <vPortExitCritical>
                return pdPASS;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e07d      	b.n	80097c2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d110      	bne.n	80096ee <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80096cc:	f7ff fc7c 	bl	8008fc8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	4618      	mov	r0, r3
 80096d4:	f003 fddc 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	460b      	mov	r3, r1
 80096e2:	4601      	mov	r1, r0
 80096e4:	205a      	movs	r0, #90	; 0x5a
 80096e6:	f003 f8bd 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	e069      	b.n	80097c2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d106      	bne.n	8009702 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fae1 	bl	800acc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80096fe:	2301      	movs	r3, #1
 8009700:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009702:	f7ff fc61 	bl	8008fc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009706:	f000 ffff 	bl	800a708 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800970a:	f7ff fc2d 	bl	8008f68 <vPortEnterCritical>
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009714:	b25b      	sxtb	r3, r3
 8009716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800971a:	d103      	bne.n	8009724 <xQueueGenericSend+0x1a0>
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800972a:	b25b      	sxtb	r3, r3
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009730:	d103      	bne.n	800973a <xQueueGenericSend+0x1b6>
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800973a:	f7ff fc45 	bl	8008fc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800973e:	1d3a      	adds	r2, r7, #4
 8009740:	f107 0314 	add.w	r3, r7, #20
 8009744:	4611      	mov	r1, r2
 8009746:	4618      	mov	r0, r3
 8009748:	f001 fad0 	bl	800acec <xTaskCheckForTimeOut>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d124      	bne.n	800979c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009754:	f000 fc56 	bl	800a004 <prvIsQueueFull>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d018      	beq.n	8009790 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	3310      	adds	r3, #16
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	4611      	mov	r1, r2
 8009766:	4618      	mov	r0, r3
 8009768:	f001 f9f0 	bl	800ab4c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800976c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800976e:	f000 fbe1 	bl	8009f34 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009772:	f000 ffd7 	bl	800a724 <xTaskResumeAll>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	f47f af62 	bne.w	8009642 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800977e:	4b13      	ldr	r3, [pc, #76]	; (80097cc <xQueueGenericSend+0x248>)
 8009780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	e758      	b.n	8009642 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009792:	f000 fbcf 	bl	8009f34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009796:	f000 ffc5 	bl	800a724 <xTaskResumeAll>
 800979a:	e752      	b.n	8009642 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800979c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800979e:	f000 fbc9 	bl	8009f34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80097a2:	f000 ffbf 	bl	800a724 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	4618      	mov	r0, r3
 80097aa:	f003 fd71 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	460b      	mov	r3, r1
 80097b8:	4601      	mov	r1, r0
 80097ba:	205a      	movs	r0, #90	; 0x5a
 80097bc:	f003 f852 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80097c0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3738      	adds	r7, #56	; 0x38
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b090      	sub	sp, #64	; 0x40
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <xQueueGenericSendFromISR+0x3c>
 8009804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <xQueueGenericSendFromISR+0x40>
 800980c:	2301      	movs	r3, #1
 800980e:	e000      	b.n	8009812 <xQueueGenericSendFromISR+0x42>
 8009810:	2300      	movs	r3, #0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009828:	bf00      	nop
 800982a:	e7fe      	b.n	800982a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b02      	cmp	r3, #2
 8009830:	d103      	bne.n	800983a <xQueueGenericSendFromISR+0x6a>
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	2b01      	cmp	r3, #1
 8009838:	d101      	bne.n	800983e <xQueueGenericSendFromISR+0x6e>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <xQueueGenericSendFromISR+0x70>
 800983e:	2300      	movs	r3, #0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	623b      	str	r3, [r7, #32]
    }
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800985a:	f7ff fc6f 	bl	800913c <vPortValidateInterruptPriority>
        __asm volatile
 800985e:	f3ef 8211 	mrs	r2, BASEPRI
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	61fa      	str	r2, [r7, #28]
 8009874:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8009876:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	429a      	cmp	r2, r3
 8009884:	d302      	bcc.n	800988c <xQueueGenericSendFromISR+0xbc>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d148      	bne.n	800991e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	4618      	mov	r0, r3
 80098a0:	f003 fcf6 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 80098a4:	4601      	mov	r1, r0
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	461a      	mov	r2, r3
 80098aa:	2060      	movs	r0, #96	; 0x60
 80098ac:	f002 ff0a 	bl	800c6c4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098b6:	f000 faad 	bl	8009e14 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80098ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098c2:	d112      	bne.n	80098ea <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d025      	beq.n	8009918 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	3324      	adds	r3, #36	; 0x24
 80098d0:	4618      	mov	r0, r3
 80098d2:	f001 f98d 	bl	800abf0 <xTaskRemoveFromEventList>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01d      	beq.n	8009918 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d01a      	beq.n	8009918 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	e016      	b.n	8009918 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80098ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80098ee:	2b7f      	cmp	r3, #127	; 0x7f
 80098f0:	d10a      	bne.n	8009908 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	617b      	str	r3, [r7, #20]
    }
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800990c:	3301      	adds	r3, #1
 800990e:	b2db      	uxtb	r3, r3
 8009910:	b25a      	sxtb	r2, r3
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009918:	2301      	movs	r3, #1
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800991c:	e00b      	b.n	8009936 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800991e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009920:	4618      	mov	r0, r3
 8009922:	f003 fcb5 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009926:	4601      	mov	r1, r0
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	461a      	mov	r2, r3
 800992c:	2060      	movs	r0, #96	; 0x60
 800992e:	f002 fec9 	bl	800c6c4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009932:	2300      	movs	r3, #0
 8009934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009938:	613b      	str	r3, [r7, #16]
        __asm volatile
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f383 8811 	msr	BASEPRI, r3
    }
 8009940:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009944:	4618      	mov	r0, r3
 8009946:	3740      	adds	r7, #64	; 0x40
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b08f      	sub	sp, #60	; 0x3c
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009958:	2300      	movs	r3, #0
 800995a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <xQueueReceive+0x30>
        __asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	623b      	str	r3, [r7, #32]
    }
 8009978:	bf00      	nop
 800997a:	e7fe      	b.n	800997a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d103      	bne.n	800998a <xQueueReceive+0x3e>
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <xQueueReceive+0x42>
 800998a:	2301      	movs	r3, #1
 800998c:	e000      	b.n	8009990 <xQueueReceive+0x44>
 800998e:	2300      	movs	r3, #0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <xQueueReceive+0x5e>
        __asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	61fb      	str	r3, [r7, #28]
    }
 80099a6:	bf00      	nop
 80099a8:	e7fe      	b.n	80099a8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099aa:	f001 fb2b 	bl	800b004 <xTaskGetSchedulerState>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <xQueueReceive+0x6e>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <xQueueReceive+0x72>
 80099ba:	2301      	movs	r3, #1
 80099bc:	e000      	b.n	80099c0 <xQueueReceive+0x74>
 80099be:	2300      	movs	r3, #0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <xQueueReceive+0x8e>
        __asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	61bb      	str	r3, [r7, #24]
    }
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80099da:	f7ff fac5 	bl	8008f68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d02f      	beq.n	8009a4a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099ea:	68b9      	ldr	r1, [r7, #8]
 80099ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ee:	f000 fa7b 	bl	8009ee8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	4618      	mov	r0, r3
 80099f6:	f003 fc4b 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 80099fa:	4604      	mov	r4, r0
 80099fc:	2000      	movs	r0, #0
 80099fe:	f003 fc47 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009a02:	4602      	mov	r2, r0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2101      	movs	r1, #1
 8009a08:	9100      	str	r1, [sp, #0]
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	205c      	movs	r0, #92	; 0x5c
 8009a0e:	f002 ff29 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	1e5a      	subs	r2, r3, #1
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00f      	beq.n	8009a42 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	3310      	adds	r3, #16
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 f8e2 	bl	800abf0 <xTaskRemoveFromEventList>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009a32:	4b4d      	ldr	r3, [pc, #308]	; (8009b68 <xQueueReceive+0x21c>)
 8009a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009a42:	f7ff fac1 	bl	8008fc8 <vPortExitCritical>
                return pdPASS;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e08a      	b.n	8009b60 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d113      	bne.n	8009a78 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009a50:	f7ff faba 	bl	8008fc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	4618      	mov	r0, r3
 8009a58:	f003 fc1a 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f003 fc16 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009a64:	4602      	mov	r2, r0
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2101      	movs	r1, #1
 8009a6a:	9100      	str	r1, [sp, #0]
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	205c      	movs	r0, #92	; 0x5c
 8009a70:	f002 fef8 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009a74:	2300      	movs	r3, #0
 8009a76:	e073      	b.n	8009b60 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009a7e:	f107 0310 	add.w	r3, r7, #16
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 f91c 	bl	800acc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009a8c:	f7ff fa9c 	bl	8008fc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009a90:	f000 fe3a 	bl	800a708 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009a94:	f7ff fa68 	bl	8008f68 <vPortEnterCritical>
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a9e:	b25b      	sxtb	r3, r3
 8009aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa4:	d103      	bne.n	8009aae <xQueueReceive+0x162>
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ab4:	b25b      	sxtb	r3, r3
 8009ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aba:	d103      	bne.n	8009ac4 <xQueueReceive+0x178>
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ac4:	f7ff fa80 	bl	8008fc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ac8:	1d3a      	adds	r2, r7, #4
 8009aca:	f107 0310 	add.w	r3, r7, #16
 8009ace:	4611      	mov	r1, r2
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f90b 	bl	800acec <xTaskCheckForTimeOut>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d124      	bne.n	8009b26 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ade:	f000 fa7b 	bl	8009fd8 <prvIsQueueEmpty>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d018      	beq.n	8009b1a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 f82b 	bl	800ab4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af8:	f000 fa1c 	bl	8009f34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009afc:	f000 fe12 	bl	800a724 <xTaskResumeAll>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f47f af69 	bne.w	80099da <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8009b08:	4b17      	ldr	r3, [pc, #92]	; (8009b68 <xQueueReceive+0x21c>)
 8009b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	e75f      	b.n	80099da <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1c:	f000 fa0a 	bl	8009f34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009b20:	f000 fe00 	bl	800a724 <xTaskResumeAll>
 8009b24:	e759      	b.n	80099da <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b28:	f000 fa04 	bl	8009f34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009b2c:	f000 fdfa 	bl	800a724 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b32:	f000 fa51 	bl	8009fd8 <prvIsQueueEmpty>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f43f af4e 	beq.w	80099da <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	4618      	mov	r0, r3
 8009b42:	f003 fba5 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009b46:	4604      	mov	r4, r0
 8009b48:	2000      	movs	r0, #0
 8009b4a:	f003 fba1 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2101      	movs	r1, #1
 8009b54:	9100      	str	r1, [sp, #0]
 8009b56:	4621      	mov	r1, r4
 8009b58:	205c      	movs	r0, #92	; 0x5c
 8009b5a:	f002 fe83 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009b5e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3734      	adds	r7, #52	; 0x34
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd90      	pop	{r4, r7, pc}
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009b6c:	b590      	push	{r4, r7, lr}
 8009b6e:	b091      	sub	sp, #68	; 0x44
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	623b      	str	r3, [r7, #32]
    }
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00a      	beq.n	8009bbc <xQueueSemaphoreTake+0x50>
        __asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	61fb      	str	r3, [r7, #28]
    }
 8009bb8:	bf00      	nop
 8009bba:	e7fe      	b.n	8009bba <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bbc:	f001 fa22 	bl	800b004 <xTaskGetSchedulerState>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d102      	bne.n	8009bcc <xQueueSemaphoreTake+0x60>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <xQueueSemaphoreTake+0x64>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e000      	b.n	8009bd2 <xQueueSemaphoreTake+0x66>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <xQueueSemaphoreTake+0x80>
        __asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	61bb      	str	r3, [r7, #24]
    }
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009bec:	f7ff f9bc 	bl	8008f68 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d034      	beq.n	8009c66 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f003 fb46 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009c04:	4604      	mov	r4, r0
 8009c06:	2000      	movs	r0, #0
 8009c08:	f003 fb42 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2101      	movs	r1, #1
 8009c12:	9100      	str	r1, [sp, #0]
 8009c14:	4621      	mov	r1, r4
 8009c16:	205c      	movs	r0, #92	; 0x5c
 8009c18:	f002 fe24 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	1e5a      	subs	r2, r3, #1
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c2c:	f001 fb7a 	bl	800b324 <pvTaskIncrementMutexHeldCount>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00f      	beq.n	8009c5e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	3310      	adds	r3, #16
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 ffd4 	bl	800abf0 <xTaskRemoveFromEventList>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d007      	beq.n	8009c5e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009c4e:	4b64      	ldr	r3, [pc, #400]	; (8009de0 <xQueueSemaphoreTake+0x274>)
 8009c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009c5e:	f7ff f9b3 	bl	8008fc8 <vPortExitCritical>
                return pdPASS;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e0b7      	b.n	8009dd6 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d121      	bne.n	8009cb0 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00a      	beq.n	8009c88 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	617b      	str	r3, [r7, #20]
    }
 8009c84:	bf00      	nop
 8009c86:	e7fe      	b.n	8009c86 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009c88:	f7ff f99e 	bl	8008fc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f003 fafe 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009c94:	4604      	mov	r4, r0
 8009c96:	2000      	movs	r0, #0
 8009c98:	f003 fafa 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	9100      	str	r1, [sp, #0]
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	205c      	movs	r0, #92	; 0x5c
 8009ca8:	f002 fddc 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009cac:	2300      	movs	r3, #0
 8009cae:	e092      	b.n	8009dd6 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d106      	bne.n	8009cc4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009cb6:	f107 030c 	add.w	r3, r7, #12
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 f800 	bl	800acc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009cc4:	f7ff f980 	bl	8008fc8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009cc8:	f000 fd1e 	bl	800a708 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009ccc:	f7ff f94c 	bl	8008f68 <vPortEnterCritical>
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cd6:	b25b      	sxtb	r3, r3
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cdc:	d103      	bne.n	8009ce6 <xQueueSemaphoreTake+0x17a>
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cec:	b25b      	sxtb	r3, r3
 8009cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf2:	d103      	bne.n	8009cfc <xQueueSemaphoreTake+0x190>
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cfc:	f7ff f964 	bl	8008fc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d00:	463a      	mov	r2, r7
 8009d02:	f107 030c 	add.w	r3, r7, #12
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 ffef 	bl	800acec <xTaskCheckForTimeOut>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d132      	bne.n	8009d7a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d16:	f000 f95f 	bl	8009fd8 <prvIsQueueEmpty>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d026      	beq.n	8009d6e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d109      	bne.n	8009d3c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8009d28:	f7ff f91e 	bl	8008f68 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 f985 	bl	800b040 <xTaskPriorityInherit>
 8009d36:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8009d38:	f7ff f946 	bl	8008fc8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3e:	3324      	adds	r3, #36	; 0x24
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 ff01 	bl	800ab4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d4c:	f000 f8f2 	bl	8009f34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009d50:	f000 fce8 	bl	800a724 <xTaskResumeAll>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f47f af48 	bne.w	8009bec <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8009d5c:	4b20      	ldr	r3, [pc, #128]	; (8009de0 <xQueueSemaphoreTake+0x274>)
 8009d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	e73e      	b.n	8009bec <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d70:	f000 f8e0 	bl	8009f34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009d74:	f000 fcd6 	bl	800a724 <xTaskResumeAll>
 8009d78:	e738      	b.n	8009bec <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d7c:	f000 f8da 	bl	8009f34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009d80:	f000 fcd0 	bl	800a724 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d86:	f000 f927 	bl	8009fd8 <prvIsQueueEmpty>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f43f af2d 	beq.w	8009bec <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00d      	beq.n	8009db4 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8009d98:	f7ff f8e6 	bl	8008f68 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d9e:	f000 f821 	bl	8009de4 <prvGetDisinheritPriorityAfterTimeout>
 8009da2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 fa30 	bl	800b210 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8009db0:	f7ff f90a 	bl	8008fc8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	4618      	mov	r0, r3
 8009db8:	f003 fa6a 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	f003 fa66 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2101      	movs	r1, #1
 8009dca:	9100      	str	r1, [sp, #0]
 8009dcc:	4621      	mov	r1, r4
 8009dce:	205c      	movs	r0, #92	; 0x5c
 8009dd0:	f002 fd48 	bl	800c864 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009dd4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	373c      	adds	r7, #60	; 0x3c
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd90      	pop	{r4, r7, pc}
 8009dde:	bf00      	nop
 8009de0:	e000ed04 	.word	0xe000ed04

08009de4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d006      	beq.n	8009e02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e001      	b.n	8009e06 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009e06:	68fb      	ldr	r3, [r7, #12]
    }
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10d      	bne.n	8009e4e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d14d      	bne.n	8009ed6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 f970 	bl	800b124 <xTaskPriorityDisinherit>
 8009e44:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	609a      	str	r2, [r3, #8]
 8009e4c:	e043      	b.n	8009ed6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d119      	bne.n	8009e88 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6858      	ldr	r0, [r3, #4]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	68b9      	ldr	r1, [r7, #8]
 8009e60:	f009 fa88 	bl	8013374 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6c:	441a      	add	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	685a      	ldr	r2, [r3, #4]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d32b      	bcc.n	8009ed6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	e026      	b.n	8009ed6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68d8      	ldr	r0, [r3, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e90:	461a      	mov	r2, r3
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	f009 fa6e 	bl	8013374 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	425b      	negs	r3, r3
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d207      	bcs.n	8009ec4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	689a      	ldr	r2, [r3, #8]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebc:	425b      	negs	r3, r3
 8009ebe:	441a      	add	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d105      	bne.n	8009ed6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8009ede:	697b      	ldr	r3, [r7, #20]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d018      	beq.n	8009f2c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	441a      	add	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d303      	bcc.n	8009f1c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68d9      	ldr	r1, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	461a      	mov	r2, r3
 8009f26:	6838      	ldr	r0, [r7, #0]
 8009f28:	f009 fa24 	bl	8013374 <memcpy>
    }
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009f3c:	f7ff f814 	bl	8008f68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f46:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f48:	e011      	b.n	8009f6e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d012      	beq.n	8009f78 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3324      	adds	r3, #36	; 0x24
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fe4a 	bl	800abf0 <xTaskRemoveFromEventList>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009f62:	f000 ff29 	bl	800adb8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	dce9      	bgt.n	8009f4a <prvUnlockQueue+0x16>
 8009f76:	e000      	b.n	8009f7a <prvUnlockQueue+0x46>
                        break;
 8009f78:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	22ff      	movs	r2, #255	; 0xff
 8009f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8009f82:	f7ff f821 	bl	8008fc8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009f86:	f7fe ffef 	bl	8008f68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f90:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f92:	e011      	b.n	8009fb8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d012      	beq.n	8009fc2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3310      	adds	r3, #16
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fe25 	bl	800abf0 <xTaskRemoveFromEventList>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009fac:	f000 ff04 	bl	800adb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dce9      	bgt.n	8009f94 <prvUnlockQueue+0x60>
 8009fc0:	e000      	b.n	8009fc4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009fc2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	22ff      	movs	r2, #255	; 0xff
 8009fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8009fcc:	f7fe fffc 	bl	8008fc8 <vPortExitCritical>
}
 8009fd0:	bf00      	nop
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009fe0:	f7fe ffc2 	bl	8008f68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d102      	bne.n	8009ff2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009fec:	2301      	movs	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e001      	b.n	8009ff6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009ff6:	f7fe ffe7 	bl	8008fc8 <vPortExitCritical>

    return xReturn;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a00c:	f7fe ffac 	bl	8008f68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a018:	429a      	cmp	r2, r3
 800a01a:	d102      	bne.n	800a022 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800a01c:	2301      	movs	r3, #1
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	e001      	b.n	800a026 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a026:	f7fe ffcf 	bl	8008fc8 <vPortExitCritical>

    return xReturn;
 800a02a:	68fb      	ldr	r3, [r7, #12]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	e01e      	b.n	800a082 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a044:	4a13      	ldr	r2, [pc, #76]	; (800a094 <vQueueAddToRegistry+0x60>)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d115      	bne.n	800a07c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a050:	4910      	ldr	r1, [pc, #64]	; (800a094 <vQueueAddToRegistry+0x60>)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800a05a:	4a0e      	ldr	r2, [pc, #56]	; (800a094 <vQueueAddToRegistry+0x60>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	4413      	add	r3, r2
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4618      	mov	r0, r3
 800a06a:	f003 f911 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 800a06e:	4601      	mov	r1, r0
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	461a      	mov	r2, r3
 800a074:	2071      	movs	r0, #113	; 0x71
 800a076:	f002 fb25 	bl	800c6c4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800a07a:	e006      	b.n	800a08a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3301      	adds	r3, #1
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b07      	cmp	r3, #7
 800a086:	d9dd      	bls.n	800a044 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20002910 	.word	0x20002910

0800a098 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a0a8:	f7fe ff5e 	bl	8008f68 <vPortEnterCritical>
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b2:	b25b      	sxtb	r3, r3
 800a0b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0b8:	d103      	bne.n	800a0c2 <vQueueWaitForMessageRestricted+0x2a>
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c8:	b25b      	sxtb	r3, r3
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ce:	d103      	bne.n	800a0d8 <vQueueWaitForMessageRestricted+0x40>
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0d8:	f7fe ff76 	bl	8008fc8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d106      	bne.n	800a0f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	3324      	adds	r3, #36	; 0x24
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	68b9      	ldr	r1, [r7, #8]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 fd51 	bl	800ab94 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f7ff ff1e 	bl	8009f34 <prvUnlockQueue>
    }
 800a0f8:	bf00      	nop
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800a100:	b580      	push	{r7, lr}
 800a102:	b08e      	sub	sp, #56	; 0x38
 800a104:	af04      	add	r7, sp, #16
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800a10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <xTaskCreateStatic+0x2a>
        __asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	623b      	str	r3, [r7, #32]
    }
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xTaskCreateStatic+0x46>
        __asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	61fb      	str	r3, [r7, #28]
    }
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800a146:	235c      	movs	r3, #92	; 0x5c
 800a148:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b5c      	cmp	r3, #92	; 0x5c
 800a14e:	d00a      	beq.n	800a166 <xTaskCreateStatic+0x66>
        __asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	61bb      	str	r3, [r7, #24]
    }
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a166:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d01e      	beq.n	800a1ac <xTaskCreateStatic+0xac>
 800a16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01b      	beq.n	800a1ac <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	2202      	movs	r2, #2
 800a182:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a186:	2300      	movs	r3, #0
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	9302      	str	r3, [sp, #8]
 800a18e:	f107 0314 	add.w	r3, r7, #20
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f850 	bl	800a244 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a1a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1a6:	f000 f8e3 	bl	800a370 <prvAddNewTaskToReadyList>
 800a1aa:	e001      	b.n	800a1b0 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800a1b0:	697b      	ldr	r3, [r7, #20]
    }
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3728      	adds	r7, #40	; 0x28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b08c      	sub	sp, #48	; 0x30
 800a1be:	af04      	add	r7, sp, #16
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fae4 	bl	800879c <pvPortMalloc>
 800a1d4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00e      	beq.n	800a1fa <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1dc:	205c      	movs	r0, #92	; 0x5c
 800a1de:	f7fe fadd 	bl	800879c <pvPortMalloc>
 800a1e2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	631a      	str	r2, [r3, #48]	; 0x30
 800a1f0:	e005      	b.n	800a1fe <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a1f2:	6978      	ldr	r0, [r7, #20]
 800a1f4:	f7fe fbb6 	bl	8008964 <vPortFree>
 800a1f8:	e001      	b.n	800a1fe <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d017      	beq.n	800a234 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	2300      	movs	r3, #0
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	9302      	str	r3, [sp, #8]
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68b9      	ldr	r1, [r7, #8]
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 f80e 	bl	800a244 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a228:	69f8      	ldr	r0, [r7, #28]
 800a22a:	f000 f8a1 	bl	800a370 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a22e:	2301      	movs	r3, #1
 800a230:	61bb      	str	r3, [r7, #24]
 800a232:	e002      	b.n	800a23a <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a238:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a23a:	69bb      	ldr	r3, [r7, #24]
    }
 800a23c:	4618      	mov	r0, r3
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	461a      	mov	r2, r3
 800a25c:	21a5      	movs	r1, #165	; 0xa5
 800a25e:	f009 f897 	bl	8013390 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a26c:	3b01      	subs	r3, #1
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <prvInitialiseNewTask+0x58>
        __asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	617b      	str	r3, [r7, #20]
    }
 800a298:	bf00      	nop
 800a29a:	e7fe      	b.n	800a29a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d01f      	beq.n	800a2e2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	e012      	b.n	800a2ce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	7819      	ldrb	r1, [r3, #0]
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3334      	adds	r3, #52	; 0x34
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d006      	beq.n	800a2d6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	2b0f      	cmp	r3, #15
 800a2d2:	d9e9      	bls.n	800a2a8 <prvInitialiseNewTask+0x64>
 800a2d4:	e000      	b.n	800a2d8 <prvInitialiseNewTask+0x94>
            {
                break;
 800a2d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2e0:	e003      	b.n	800a2ea <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ec:	2b37      	cmp	r3, #55	; 0x37
 800a2ee:	d901      	bls.n	800a2f4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2f0:	2337      	movs	r3, #55	; 0x37
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2f8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2fe:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	2200      	movs	r2, #0
 800a304:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fc68 	bl	8008be0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	3318      	adds	r3, #24
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fc63 	bl	8008be0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a32e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	3354      	adds	r3, #84	; 0x54
 800a334:	2204      	movs	r2, #4
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f009 f829 	bl	8013390 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	3358      	adds	r3, #88	; 0x58
 800a342:	2201      	movs	r2, #1
 800a344:	2100      	movs	r1, #0
 800a346:	4618      	mov	r0, r3
 800a348:	f009 f822 	bl	8013390 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	68f9      	ldr	r1, [r7, #12]
 800a350:	69b8      	ldr	r0, [r7, #24]
 800a352:	f7fe fcd9 	bl	8008d08 <pxPortInitialiseStack>
 800a356:	4602      	mov	r2, r0
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a366:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a368:	bf00      	nop
 800a36a:	3720      	adds	r7, #32
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a370:	b5b0      	push	{r4, r5, r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af02      	add	r7, sp, #8
 800a376:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a378:	f7fe fdf6 	bl	8008f68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a37c:	4b3c      	ldr	r3, [pc, #240]	; (800a470 <prvAddNewTaskToReadyList+0x100>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3301      	adds	r3, #1
 800a382:	4a3b      	ldr	r2, [pc, #236]	; (800a470 <prvAddNewTaskToReadyList+0x100>)
 800a384:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a386:	4b3b      	ldr	r3, [pc, #236]	; (800a474 <prvAddNewTaskToReadyList+0x104>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a38e:	4a39      	ldr	r2, [pc, #228]	; (800a474 <prvAddNewTaskToReadyList+0x104>)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a394:	4b36      	ldr	r3, [pc, #216]	; (800a470 <prvAddNewTaskToReadyList+0x100>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d110      	bne.n	800a3be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a39c:	f000 fd30 	bl	800ae00 <prvInitialiseTaskLists>
 800a3a0:	e00d      	b.n	800a3be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a3a2:	4b35      	ldr	r3, [pc, #212]	; (800a478 <prvAddNewTaskToReadyList+0x108>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d109      	bne.n	800a3be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3aa:	4b32      	ldr	r3, [pc, #200]	; (800a474 <prvAddNewTaskToReadyList+0x104>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d802      	bhi.n	800a3be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a3b8:	4a2e      	ldr	r2, [pc, #184]	; (800a474 <prvAddNewTaskToReadyList+0x104>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a3be:	4b2f      	ldr	r3, [pc, #188]	; (800a47c <prvAddNewTaskToReadyList+0x10c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	4a2d      	ldr	r2, [pc, #180]	; (800a47c <prvAddNewTaskToReadyList+0x10c>)
 800a3c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3c8:	4b2c      	ldr	r3, [pc, #176]	; (800a47c <prvAddNewTaskToReadyList+0x10c>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d016      	beq.n	800a404 <prvAddNewTaskToReadyList+0x94>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f002 fe33 	bl	800d044 <SEGGER_SYSVIEW_OnTaskCreate>
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461c      	mov	r4, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fa:	1ae3      	subs	r3, r4, r3
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	462b      	mov	r3, r5
 800a400:	f003 f954 	bl	800d6ac <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4618      	mov	r0, r3
 800a408:	f002 fea0 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <prvAddNewTaskToReadyList+0x110>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d903      	bls.n	800a420 <prvAddNewTaskToReadyList+0xb0>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	4a18      	ldr	r2, [pc, #96]	; (800a480 <prvAddNewTaskToReadyList+0x110>)
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a15      	ldr	r2, [pc, #84]	; (800a484 <prvAddNewTaskToReadyList+0x114>)
 800a42e:	441a      	add	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7fe fbdf 	bl	8008bfa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a43c:	f7fe fdc4 	bl	8008fc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a440:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <prvAddNewTaskToReadyList+0x108>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00e      	beq.n	800a466 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <prvAddNewTaskToReadyList+0x104>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	429a      	cmp	r2, r3
 800a454:	d207      	bcs.n	800a466 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a456:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <prvAddNewTaskToReadyList+0x118>)
 800a458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bdb0      	pop	{r4, r5, r7, pc}
 800a46e:	bf00      	nop
 800a470:	20002e24 	.word	0x20002e24
 800a474:	20002950 	.word	0x20002950
 800a478:	20002e30 	.word	0x20002e30
 800a47c:	20002e40 	.word	0x20002e40
 800a480:	20002e2c 	.word	0x20002e2c
 800a484:	20002954 	.word	0x20002954
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800a494:	f7fe fd68 	bl	8008f68 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <vTaskDelete+0x18>
 800a49e:	4b39      	ldr	r3, [pc, #228]	; (800a584 <vTaskDelete+0xf8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	e000      	b.n	800a4a6 <vTaskDelete+0x1a>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fe fc01 	bl	8008cb4 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d004      	beq.n	800a4c4 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3318      	adds	r3, #24
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fbf8 	bl	8008cb4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800a4c4:	4b30      	ldr	r3, [pc, #192]	; (800a588 <vTaskDelete+0xfc>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	4a2f      	ldr	r2, [pc, #188]	; (800a588 <vTaskDelete+0xfc>)
 800a4cc:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800a4ce:	4b2d      	ldr	r3, [pc, #180]	; (800a584 <vTaskDelete+0xf8>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d118      	bne.n	800a50a <vTaskDelete+0x7e>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	482b      	ldr	r0, [pc, #172]	; (800a58c <vTaskDelete+0x100>)
 800a4e0:	f7fe fb8b 	bl	8008bfa <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800a4e4:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <vTaskDelete+0x104>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	4a29      	ldr	r2, [pc, #164]	; (800a590 <vTaskDelete+0x104>)
 800a4ec:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f002 fecd 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	2022      	movs	r0, #34	; 0x22
 800a4fc:	f002 f8a6 	bl	800c64c <SEGGER_SYSVIEW_RecordU32>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4618      	mov	r0, r3
 800a504:	f003 f93a 	bl	800d77c <SYSVIEW_DeleteTask>
 800a508:	e016      	b.n	800a538 <vTaskDelete+0xac>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800a50a:	4b22      	ldr	r3, [pc, #136]	; (800a594 <vTaskDelete+0x108>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3b01      	subs	r3, #1
 800a510:	4a20      	ldr	r2, [pc, #128]	; (800a594 <vTaskDelete+0x108>)
 800a512:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4618      	mov	r0, r3
 800a518:	f002 feba 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 800a51c:	4603      	mov	r3, r0
 800a51e:	4619      	mov	r1, r3
 800a520:	2022      	movs	r0, #34	; 0x22
 800a522:	f002 f893 	bl	800c64c <SEGGER_SYSVIEW_RecordU32>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4618      	mov	r0, r3
 800a52a:	f003 f927 	bl	800d77c <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 fd0c 	bl	800af4c <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800a534:	f000 fd3a 	bl	800afac <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800a538:	f7fe fd46 	bl	8008fc8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800a53c:	4b16      	ldr	r3, [pc, #88]	; (800a598 <vTaskDelete+0x10c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01b      	beq.n	800a57c <vTaskDelete+0xf0>
        {
            if( pxTCB == pxCurrentTCB )
 800a544:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <vTaskDelete+0xf8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d116      	bne.n	800a57c <vTaskDelete+0xf0>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800a54e:	4b13      	ldr	r3, [pc, #76]	; (800a59c <vTaskDelete+0x110>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <vTaskDelete+0xe0>
        __asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	60bb      	str	r3, [r7, #8]
    }
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <vTaskDelete+0xde>
                portYIELD_WITHIN_API();
 800a56c:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <vTaskDelete+0x114>)
 800a56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20002950 	.word	0x20002950
 800a588:	20002e40 	.word	0x20002e40
 800a58c:	20002df8 	.word	0x20002df8
 800a590:	20002e0c 	.word	0x20002e0c
 800a594:	20002e24 	.word	0x20002e24
 800a598:	20002e30 	.word	0x20002e30
 800a59c:	20002e4c 	.word	0x20002e4c
 800a5a0:	e000ed04 	.word	0xe000ed04

0800a5a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01b      	beq.n	800a5ee <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800a5b6:	4b15      	ldr	r3, [pc, #84]	; (800a60c <vTaskDelay+0x68>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <vTaskDelay+0x30>
        __asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60bb      	str	r3, [r7, #8]
    }
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800a5d4:	f000 f898 	bl	800a708 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	2023      	movs	r0, #35	; 0x23
 800a5dc:	f002 f836 	bl	800c64c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 ffe2 	bl	800b5ac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800a5e8:	f000 f89c 	bl	800a724 <xTaskResumeAll>
 800a5ec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d107      	bne.n	800a604 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800a5f4:	4b06      	ldr	r3, [pc, #24]	; (800a610 <vTaskDelay+0x6c>)
 800a5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a604:	bf00      	nop
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	20002e4c 	.word	0x20002e4c
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08a      	sub	sp, #40	; 0x28
 800a618:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a622:	463a      	mov	r2, r7
 800a624:	1d39      	adds	r1, r7, #4
 800a626:	f107 0308 	add.w	r3, r7, #8
 800a62a:	4618      	mov	r0, r3
 800a62c:	f005 fcf8 	bl	8010020 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	9202      	str	r2, [sp, #8]
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	2300      	movs	r3, #0
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	2300      	movs	r3, #0
 800a640:	460a      	mov	r2, r1
 800a642:	4929      	ldr	r1, [pc, #164]	; (800a6e8 <vTaskStartScheduler+0xd4>)
 800a644:	4829      	ldr	r0, [pc, #164]	; (800a6ec <vTaskStartScheduler+0xd8>)
 800a646:	f7ff fd5b 	bl	800a100 <xTaskCreateStatic>
 800a64a:	4603      	mov	r3, r0
 800a64c:	4a28      	ldr	r2, [pc, #160]	; (800a6f0 <vTaskStartScheduler+0xdc>)
 800a64e:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800a650:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <vTaskStartScheduler+0xdc>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800a658:	2301      	movs	r3, #1
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e001      	b.n	800a662 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800a65e:	2300      	movs	r3, #0
 800a660:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d102      	bne.n	800a66e <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800a668:	f001 f800 	bl	800b66c <xTimerCreateTimerTask>
 800a66c:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d124      	bne.n	800a6be <vTaskStartScheduler+0xaa>
        __asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	613b      	str	r3, [r7, #16]
    }
 800a686:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a688:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <vTaskStartScheduler+0xe0>)
 800a68a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a68e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a690:	4b19      	ldr	r3, [pc, #100]	; (800a6f8 <vTaskStartScheduler+0xe4>)
 800a692:	2201      	movs	r2, #1
 800a694:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a696:	4b19      	ldr	r3, [pc, #100]	; (800a6fc <vTaskStartScheduler+0xe8>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a69c:	4b18      	ldr	r3, [pc, #96]	; (800a700 <vTaskStartScheduler+0xec>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	4b13      	ldr	r3, [pc, #76]	; (800a6f0 <vTaskStartScheduler+0xdc>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d102      	bne.n	800a6ae <vTaskStartScheduler+0x9a>
 800a6a8:	f002 fcb0 	bl	800d00c <SEGGER_SYSVIEW_OnIdle>
 800a6ac:	e004      	b.n	800a6b8 <vTaskStartScheduler+0xa4>
 800a6ae:	4b14      	ldr	r3, [pc, #80]	; (800a700 <vTaskStartScheduler+0xec>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f002 fd08 	bl	800d0c8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a6b8:	f7fe fbb4 	bl	8008e24 <xPortStartScheduler>
 800a6bc:	e00e      	b.n	800a6dc <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c4:	d10a      	bne.n	800a6dc <vTaskStartScheduler+0xc8>
        __asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60fb      	str	r3, [r7, #12]
    }
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <vTaskStartScheduler+0xf0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	08013d9c 	.word	0x08013d9c
 800a6ec:	0800add1 	.word	0x0800add1
 800a6f0:	20002e48 	.word	0x20002e48
 800a6f4:	20002e44 	.word	0x20002e44
 800a6f8:	20002e30 	.word	0x20002e30
 800a6fc:	20002e28 	.word	0x20002e28
 800a700:	20002950 	.word	0x20002950
 800a704:	20000010 	.word	0x20000010

0800a708 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <vTaskSuspendAll+0x18>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3301      	adds	r3, #1
 800a712:	4a03      	ldr	r2, [pc, #12]	; (800a720 <vTaskSuspendAll+0x18>)
 800a714:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a716:	bf00      	nop
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	20002e4c 	.word	0x20002e4c

0800a724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a72e:	2300      	movs	r3, #0
 800a730:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a732:	4b44      	ldr	r3, [pc, #272]	; (800a844 <xTaskResumeAll+0x120>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10a      	bne.n	800a750 <xTaskResumeAll+0x2c>
        __asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	603b      	str	r3, [r7, #0]
    }
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a750:	f7fe fc0a 	bl	8008f68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a754:	4b3b      	ldr	r3, [pc, #236]	; (800a844 <xTaskResumeAll+0x120>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3b01      	subs	r3, #1
 800a75a:	4a3a      	ldr	r2, [pc, #232]	; (800a844 <xTaskResumeAll+0x120>)
 800a75c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a75e:	4b39      	ldr	r3, [pc, #228]	; (800a844 <xTaskResumeAll+0x120>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d166      	bne.n	800a834 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a766:	4b38      	ldr	r3, [pc, #224]	; (800a848 <xTaskResumeAll+0x124>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d062      	beq.n	800a834 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a76e:	e033      	b.n	800a7d8 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a770:	4b36      	ldr	r3, [pc, #216]	; (800a84c <xTaskResumeAll+0x128>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3318      	adds	r3, #24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe fa99 	bl	8008cb4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3304      	adds	r3, #4
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fa94 	bl	8008cb4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4618      	mov	r0, r3
 800a790:	f002 fcdc 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a798:	4b2d      	ldr	r3, [pc, #180]	; (800a850 <xTaskResumeAll+0x12c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d903      	bls.n	800a7a8 <xTaskResumeAll+0x84>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	4a2a      	ldr	r2, [pc, #168]	; (800a850 <xTaskResumeAll+0x12c>)
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4a27      	ldr	r2, [pc, #156]	; (800a854 <xTaskResumeAll+0x130>)
 800a7b6:	441a      	add	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4610      	mov	r0, r2
 800a7c0:	f7fe fa1b 	bl	8008bfa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c8:	4b23      	ldr	r3, [pc, #140]	; (800a858 <xTaskResumeAll+0x134>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d302      	bcc.n	800a7d8 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a7d2:	4b22      	ldr	r3, [pc, #136]	; (800a85c <xTaskResumeAll+0x138>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7d8:	4b1c      	ldr	r3, [pc, #112]	; (800a84c <xTaskResumeAll+0x128>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1c7      	bne.n	800a770 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a7e6:	f000 fbe1 	bl	800afac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7ea:	4b1d      	ldr	r3, [pc, #116]	; (800a860 <xTaskResumeAll+0x13c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d010      	beq.n	800a818 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a7f6:	f000 f859 	bl	800a8ac <xTaskIncrementTick>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a800:	4b16      	ldr	r3, [pc, #88]	; (800a85c <xTaskResumeAll+0x138>)
 800a802:	2201      	movs	r2, #1
 800a804:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	3b01      	subs	r3, #1
 800a80a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1f1      	bne.n	800a7f6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a812:	4b13      	ldr	r3, [pc, #76]	; (800a860 <xTaskResumeAll+0x13c>)
 800a814:	2200      	movs	r2, #0
 800a816:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a818:	4b10      	ldr	r3, [pc, #64]	; (800a85c <xTaskResumeAll+0x138>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d009      	beq.n	800a834 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a820:	2301      	movs	r3, #1
 800a822:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a824:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <xTaskResumeAll+0x140>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a834:	f7fe fbc8 	bl	8008fc8 <vPortExitCritical>

    return xAlreadyYielded;
 800a838:	68bb      	ldr	r3, [r7, #8]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20002e4c 	.word	0x20002e4c
 800a848:	20002e24 	.word	0x20002e24
 800a84c:	20002de4 	.word	0x20002de4
 800a850:	20002e2c 	.word	0x20002e2c
 800a854:	20002954 	.word	0x20002954
 800a858:	20002950 	.word	0x20002950
 800a85c:	20002e38 	.word	0x20002e38
 800a860:	20002e34 	.word	0x20002e34
 800a864:	e000ed04 	.word	0xe000ed04

0800a868 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <xTaskGetTickCount+0x1c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a874:	687b      	ldr	r3, [r7, #4]
}
 800a876:	4618      	mov	r0, r3
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20002e28 	.word	0x20002e28

0800a888 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a88e:	f7fe fc55 	bl	800913c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a892:	2300      	movs	r3, #0
 800a894:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a896:	4b04      	ldr	r3, [pc, #16]	; (800a8a8 <xTaskGetTickCountFromISR+0x20>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a89c:	683b      	ldr	r3, [r7, #0]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20002e28 	.word	0x20002e28

0800a8ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8b6:	4b51      	ldr	r3, [pc, #324]	; (800a9fc <xTaskIncrementTick+0x150>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f040 8093 	bne.w	800a9e6 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8c0:	4b4f      	ldr	r3, [pc, #316]	; (800aa00 <xTaskIncrementTick+0x154>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a8c8:	4a4d      	ldr	r2, [pc, #308]	; (800aa00 <xTaskIncrementTick+0x154>)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d120      	bne.n	800a916 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800a8d4:	4b4b      	ldr	r3, [pc, #300]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <xTaskIncrementTick+0x48>
        __asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	603b      	str	r3, [r7, #0]
    }
 800a8f0:	bf00      	nop
 800a8f2:	e7fe      	b.n	800a8f2 <xTaskIncrementTick+0x46>
 800a8f4:	4b43      	ldr	r3, [pc, #268]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	60fb      	str	r3, [r7, #12]
 800a8fa:	4b43      	ldr	r3, [pc, #268]	; (800aa08 <xTaskIncrementTick+0x15c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a41      	ldr	r2, [pc, #260]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	4a41      	ldr	r2, [pc, #260]	; (800aa08 <xTaskIncrementTick+0x15c>)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	4b40      	ldr	r3, [pc, #256]	; (800aa0c <xTaskIncrementTick+0x160>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	4a3f      	ldr	r2, [pc, #252]	; (800aa0c <xTaskIncrementTick+0x160>)
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	f000 fb4b 	bl	800afac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a916:	4b3e      	ldr	r3, [pc, #248]	; (800aa10 <xTaskIncrementTick+0x164>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d34d      	bcc.n	800a9bc <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a920:	4b38      	ldr	r3, [pc, #224]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a92a:	4b39      	ldr	r3, [pc, #228]	; (800aa10 <xTaskIncrementTick+0x164>)
 800a92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a930:	601a      	str	r2, [r3, #0]
                    break;
 800a932:	e043      	b.n	800a9bc <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a934:	4b33      	ldr	r3, [pc, #204]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d203      	bcs.n	800a954 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a94c:	4a30      	ldr	r2, [pc, #192]	; (800aa10 <xTaskIncrementTick+0x164>)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a952:	e033      	b.n	800a9bc <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3304      	adds	r3, #4
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe f9ab 	bl	8008cb4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	3318      	adds	r3, #24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe f9a2 	bl	8008cb4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	4618      	mov	r0, r3
 800a974:	f002 fbea 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97c:	4b25      	ldr	r3, [pc, #148]	; (800aa14 <xTaskIncrementTick+0x168>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	429a      	cmp	r2, r3
 800a982:	d903      	bls.n	800a98c <xTaskIncrementTick+0xe0>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a988:	4a22      	ldr	r2, [pc, #136]	; (800aa14 <xTaskIncrementTick+0x168>)
 800a98a:	6013      	str	r3, [r2, #0]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a990:	4613      	mov	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4a1f      	ldr	r2, [pc, #124]	; (800aa18 <xTaskIncrementTick+0x16c>)
 800a99a:	441a      	add	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	f7fe f929 	bl	8008bfa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ac:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <xTaskIncrementTick+0x170>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d3b4      	bcc.n	800a920 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9ba:	e7b1      	b.n	800a920 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9bc:	4b17      	ldr	r3, [pc, #92]	; (800aa1c <xTaskIncrementTick+0x170>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c2:	4915      	ldr	r1, [pc, #84]	; (800aa18 <xTaskIncrementTick+0x16c>)
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	440b      	add	r3, r1
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d901      	bls.n	800a9d8 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a9d8:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <xTaskIncrementTick+0x174>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d007      	beq.n	800a9f0 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	617b      	str	r3, [r7, #20]
 800a9e4:	e004      	b.n	800a9f0 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <xTaskIncrementTick+0x178>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4a0d      	ldr	r2, [pc, #52]	; (800aa24 <xTaskIncrementTick+0x178>)
 800a9ee:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a9f0:	697b      	ldr	r3, [r7, #20]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20002e4c 	.word	0x20002e4c
 800aa00:	20002e28 	.word	0x20002e28
 800aa04:	20002ddc 	.word	0x20002ddc
 800aa08:	20002de0 	.word	0x20002de0
 800aa0c:	20002e3c 	.word	0x20002e3c
 800aa10:	20002e44 	.word	0x20002e44
 800aa14:	20002e2c 	.word	0x20002e2c
 800aa18:	20002954 	.word	0x20002954
 800aa1c:	20002950 	.word	0x20002950
 800aa20:	20002e38 	.word	0x20002e38
 800aa24:	20002e34 	.word	0x20002e34

0800aa28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa2e:	4b41      	ldr	r3, [pc, #260]	; (800ab34 <vTaskSwitchContext+0x10c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800aa36:	4b40      	ldr	r3, [pc, #256]	; (800ab38 <vTaskSwitchContext+0x110>)
 800aa38:	2201      	movs	r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800aa3c:	e076      	b.n	800ab2c <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 800aa3e:	4b3e      	ldr	r3, [pc, #248]	; (800ab38 <vTaskSwitchContext+0x110>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800aa44:	4b3d      	ldr	r3, [pc, #244]	; (800ab3c <vTaskSwitchContext+0x114>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d111      	bne.n	800aa80 <vTaskSwitchContext+0x58>
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d10b      	bne.n	800aa80 <vTaskSwitchContext+0x58>
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d105      	bne.n	800aa80 <vTaskSwitchContext+0x58>
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	330c      	adds	r3, #12
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d008      	beq.n	800aa92 <vTaskSwitchContext+0x6a>
 800aa80:	4b2e      	ldr	r3, [pc, #184]	; (800ab3c <vTaskSwitchContext+0x114>)
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	4b2d      	ldr	r3, [pc, #180]	; (800ab3c <vTaskSwitchContext+0x114>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3334      	adds	r3, #52	; 0x34
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	f005 fab7 	bl	8010000 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa92:	4b2b      	ldr	r3, [pc, #172]	; (800ab40 <vTaskSwitchContext+0x118>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	617b      	str	r3, [r7, #20]
 800aa98:	e010      	b.n	800aabc <vTaskSwitchContext+0x94>
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <vTaskSwitchContext+0x8e>
        __asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	607b      	str	r3, [r7, #4]
    }
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <vTaskSwitchContext+0x8c>
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	617b      	str	r3, [r7, #20]
 800aabc:	4921      	ldr	r1, [pc, #132]	; (800ab44 <vTaskSwitchContext+0x11c>)
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0e4      	beq.n	800aa9a <vTaskSwitchContext+0x72>
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4a1a      	ldr	r2, [pc, #104]	; (800ab44 <vTaskSwitchContext+0x11c>)
 800aadc:	4413      	add	r3, r2
 800aade:	60bb      	str	r3, [r7, #8]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d104      	bne.n	800ab00 <vTaskSwitchContext+0xd8>
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	605a      	str	r2, [r3, #4]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	4a0d      	ldr	r2, [pc, #52]	; (800ab3c <vTaskSwitchContext+0x114>)
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	4a0d      	ldr	r2, [pc, #52]	; (800ab40 <vTaskSwitchContext+0x118>)
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <vTaskSwitchContext+0x114>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <vTaskSwitchContext+0x120>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d102      	bne.n	800ab22 <vTaskSwitchContext+0xfa>
 800ab1c:	f002 fa76 	bl	800d00c <SEGGER_SYSVIEW_OnIdle>
}
 800ab20:	e004      	b.n	800ab2c <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 800ab22:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <vTaskSwitchContext+0x114>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f002 face 	bl	800d0c8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800ab2c:	bf00      	nop
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	20002e4c 	.word	0x20002e4c
 800ab38:	20002e38 	.word	0x20002e38
 800ab3c:	20002950 	.word	0x20002950
 800ab40:	20002e2c 	.word	0x20002e2c
 800ab44:	20002954 	.word	0x20002954
 800ab48:	20002e48 	.word	0x20002e48

0800ab4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10a      	bne.n	800ab72 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	60fb      	str	r3, [r7, #12]
    }
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab72:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <vTaskPlaceOnEventList+0x44>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3318      	adds	r3, #24
 800ab78:	4619      	mov	r1, r3
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7fe f861 	bl	8008c42 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab80:	2101      	movs	r1, #1
 800ab82:	6838      	ldr	r0, [r7, #0]
 800ab84:	f000 fd12 	bl	800b5ac <prvAddCurrentTaskToDelayedList>
}
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20002950 	.word	0x20002950

0800ab94 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10a      	bne.n	800abbc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	617b      	str	r3, [r7, #20]
    }
 800abb8:	bf00      	nop
 800abba:	e7fe      	b.n	800abba <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abbc:	4b0b      	ldr	r3, [pc, #44]	; (800abec <vTaskPlaceOnEventListRestricted+0x58>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3318      	adds	r3, #24
 800abc2:	4619      	mov	r1, r3
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f7fe f818 	bl	8008bfa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abd4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800abd6:	2024      	movs	r0, #36	; 0x24
 800abd8:	f001 fd1a 	bl	800c610 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	68b8      	ldr	r0, [r7, #8]
 800abe0:	f000 fce4 	bl	800b5ac <prvAddCurrentTaskToDelayedList>
    }
 800abe4:	bf00      	nop
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20002950 	.word	0x20002950

0800abf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	60fb      	str	r3, [r7, #12]
    }
 800ac18:	bf00      	nop
 800ac1a:	e7fe      	b.n	800ac1a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	3318      	adds	r3, #24
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fe f847 	bl	8008cb4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac26:	4b20      	ldr	r3, [pc, #128]	; (800aca8 <xTaskRemoveFromEventList+0xb8>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d121      	bne.n	800ac72 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe f83e 	bl	8008cb4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f002 fa86 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac44:	4b19      	ldr	r3, [pc, #100]	; (800acac <xTaskRemoveFromEventList+0xbc>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d903      	bls.n	800ac54 <xTaskRemoveFromEventList+0x64>
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac50:	4a16      	ldr	r2, [pc, #88]	; (800acac <xTaskRemoveFromEventList+0xbc>)
 800ac52:	6013      	str	r3, [r2, #0]
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4a13      	ldr	r2, [pc, #76]	; (800acb0 <xTaskRemoveFromEventList+0xc0>)
 800ac62:	441a      	add	r2, r3
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f7fd ffc5 	bl	8008bfa <vListInsertEnd>
 800ac70:	e005      	b.n	800ac7e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3318      	adds	r3, #24
 800ac76:	4619      	mov	r1, r3
 800ac78:	480e      	ldr	r0, [pc, #56]	; (800acb4 <xTaskRemoveFromEventList+0xc4>)
 800ac7a:	f7fd ffbe 	bl	8008bfa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <xTaskRemoveFromEventList+0xc8>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d905      	bls.n	800ac98 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800ac90:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <xTaskRemoveFromEventList+0xcc>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	e001      	b.n	800ac9c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800ac9c:	697b      	ldr	r3, [r7, #20]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	20002e4c 	.word	0x20002e4c
 800acac:	20002e2c 	.word	0x20002e2c
 800acb0:	20002954 	.word	0x20002954
 800acb4:	20002de4 	.word	0x20002de4
 800acb8:	20002950 	.word	0x20002950
 800acbc:	20002e38 	.word	0x20002e38

0800acc0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acc8:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <vTaskInternalSetTimeOutState+0x24>)
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800acd0:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <vTaskInternalSetTimeOutState+0x28>)
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	605a      	str	r2, [r3, #4]
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	20002e3c 	.word	0x20002e3c
 800ace8:	20002e28 	.word	0x20002e28

0800acec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	613b      	str	r3, [r7, #16]
    }
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	60fb      	str	r3, [r7, #12]
    }
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800ad2e:	f7fe f91b 	bl	8008f68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800ad32:	4b1f      	ldr	r3, [pc, #124]	; (800adb0 <xTaskCheckForTimeOut+0xc4>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad4a:	d102      	bne.n	800ad52 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	e026      	b.n	800ada0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	4b17      	ldr	r3, [pc, #92]	; (800adb4 <xTaskCheckForTimeOut+0xc8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d00a      	beq.n	800ad74 <xTaskCheckForTimeOut+0x88>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d305      	bcc.n	800ad74 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	e015      	b.n	800ada0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d20b      	bcs.n	800ad96 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff ff98 	bl	800acc0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ad90:	2300      	movs	r3, #0
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	e004      	b.n	800ada0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800ada0:	f7fe f912 	bl	8008fc8 <vPortExitCritical>

    return xReturn;
 800ada4:	69fb      	ldr	r3, [r7, #28]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20002e28 	.word	0x20002e28
 800adb4:	20002e3c 	.word	0x20002e3c

0800adb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800adb8:	b480      	push	{r7}
 800adba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800adbc:	4b03      	ldr	r3, [pc, #12]	; (800adcc <vTaskMissedYield+0x14>)
 800adbe:	2201      	movs	r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
}
 800adc2:	bf00      	nop
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	20002e38 	.word	0x20002e38

0800add0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800add8:	f000 f852 	bl	800ae80 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800addc:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <prvIdleTask+0x28>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d9f9      	bls.n	800add8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800ade4:	4b05      	ldr	r3, [pc, #20]	; (800adfc <prvIdleTask+0x2c>)
 800ade6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800adf4:	e7f0      	b.n	800add8 <prvIdleTask+0x8>
 800adf6:	bf00      	nop
 800adf8:	20002954 	.word	0x20002954
 800adfc:	e000ed04 	.word	0xe000ed04

0800ae00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae06:	2300      	movs	r3, #0
 800ae08:	607b      	str	r3, [r7, #4]
 800ae0a:	e00c      	b.n	800ae26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4a12      	ldr	r2, [pc, #72]	; (800ae60 <prvInitialiseTaskLists+0x60>)
 800ae18:	4413      	add	r3, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fd fec0 	bl	8008ba0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3301      	adds	r3, #1
 800ae24:	607b      	str	r3, [r7, #4]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b37      	cmp	r3, #55	; 0x37
 800ae2a:	d9ef      	bls.n	800ae0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ae2c:	480d      	ldr	r0, [pc, #52]	; (800ae64 <prvInitialiseTaskLists+0x64>)
 800ae2e:	f7fd feb7 	bl	8008ba0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ae32:	480d      	ldr	r0, [pc, #52]	; (800ae68 <prvInitialiseTaskLists+0x68>)
 800ae34:	f7fd feb4 	bl	8008ba0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ae38:	480c      	ldr	r0, [pc, #48]	; (800ae6c <prvInitialiseTaskLists+0x6c>)
 800ae3a:	f7fd feb1 	bl	8008ba0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800ae3e:	480c      	ldr	r0, [pc, #48]	; (800ae70 <prvInitialiseTaskLists+0x70>)
 800ae40:	f7fd feae 	bl	8008ba0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800ae44:	480b      	ldr	r0, [pc, #44]	; (800ae74 <prvInitialiseTaskLists+0x74>)
 800ae46:	f7fd feab 	bl	8008ba0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <prvInitialiseTaskLists+0x78>)
 800ae4c:	4a05      	ldr	r2, [pc, #20]	; (800ae64 <prvInitialiseTaskLists+0x64>)
 800ae4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae50:	4b0a      	ldr	r3, [pc, #40]	; (800ae7c <prvInitialiseTaskLists+0x7c>)
 800ae52:	4a05      	ldr	r2, [pc, #20]	; (800ae68 <prvInitialiseTaskLists+0x68>)
 800ae54:	601a      	str	r2, [r3, #0]
}
 800ae56:	bf00      	nop
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20002954 	.word	0x20002954
 800ae64:	20002db4 	.word	0x20002db4
 800ae68:	20002dc8 	.word	0x20002dc8
 800ae6c:	20002de4 	.word	0x20002de4
 800ae70:	20002df8 	.word	0x20002df8
 800ae74:	20002e10 	.word	0x20002e10
 800ae78:	20002ddc 	.word	0x20002ddc
 800ae7c:	20002de0 	.word	0x20002de0

0800ae80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae86:	e019      	b.n	800aebc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800ae88:	f7fe f86e 	bl	8008f68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae8c:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <prvCheckTasksWaitingTermination+0x50>)
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3304      	adds	r3, #4
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fd ff0b 	bl	8008cb4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	; (800aed4 <prvCheckTasksWaitingTermination+0x54>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3b01      	subs	r3, #1
 800aea4:	4a0b      	ldr	r2, [pc, #44]	; (800aed4 <prvCheckTasksWaitingTermination+0x54>)
 800aea6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800aea8:	4b0b      	ldr	r3, [pc, #44]	; (800aed8 <prvCheckTasksWaitingTermination+0x58>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	4a0a      	ldr	r2, [pc, #40]	; (800aed8 <prvCheckTasksWaitingTermination+0x58>)
 800aeb0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800aeb2:	f7fe f889 	bl	8008fc8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f848 	bl	800af4c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <prvCheckTasksWaitingTermination+0x58>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e1      	bne.n	800ae88 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20002df8 	.word	0x20002df8
 800aed4:	20002e24 	.word	0x20002e24
 800aed8:	20002e0c 	.word	0x20002e0c

0800aedc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aee8:	e005      	b.n	800aef6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3301      	adds	r3, #1
 800aeee:	607b      	str	r3, [r7, #4]
            ulCount++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2ba5      	cmp	r3, #165	; 0xa5
 800aefc:	d0f5      	beq.n	800aeea <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	089b      	lsrs	r3, r3, #2
 800af02:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	b29b      	uxth	r3, r3
    }
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d102      	bne.n	800af28 <uxTaskGetStackHighWaterMark+0x14>
 800af22:	4b09      	ldr	r3, [pc, #36]	; (800af48 <uxTaskGetStackHighWaterMark+0x34>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	e000      	b.n	800af2a <uxTaskGetStackHighWaterMark+0x16>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af30:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800af32:	6938      	ldr	r0, [r7, #16]
 800af34:	f7ff ffd2 	bl	800aedc <prvTaskCheckFreeStackSpace>
 800af38:	4603      	mov	r3, r0
 800af3a:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 800af3c:	68fb      	ldr	r3, [r7, #12]
    }
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20002950 	.word	0x20002950

0800af4c <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d108      	bne.n	800af70 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af62:	4618      	mov	r0, r3
 800af64:	f7fd fcfe 	bl	8008964 <vPortFree>
                    vPortFree( pxTCB );
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7fd fcfb 	bl	8008964 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800af6e:	e018      	b.n	800afa2 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af76:	2b01      	cmp	r3, #1
 800af78:	d103      	bne.n	800af82 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7fd fcf2 	bl	8008964 <vPortFree>
    }
 800af80:	e00f      	b.n	800afa2 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d00a      	beq.n	800afa2 <prvDeleteTCB+0x56>
        __asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
    }
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <prvDeleteTCB+0x54>
    }
 800afa2:	bf00      	nop
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afac:	b480      	push	{r7}
 800afae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afb0:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <prvResetNextTaskUnblockTime+0x30>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d104      	bne.n	800afc4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800afba:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <prvResetNextTaskUnblockTime+0x34>)
 800afbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afc0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800afc2:	e005      	b.n	800afd0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800afc4:	4b05      	ldr	r3, [pc, #20]	; (800afdc <prvResetNextTaskUnblockTime+0x30>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a04      	ldr	r2, [pc, #16]	; (800afe0 <prvResetNextTaskUnblockTime+0x34>)
 800afce:	6013      	str	r3, [r2, #0]
}
 800afd0:	bf00      	nop
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20002ddc 	.word	0x20002ddc
 800afe0:	20002e44 	.word	0x20002e44

0800afe4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <xTaskGetCurrentTaskHandle+0x1c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	607b      	str	r3, [r7, #4]

        return xReturn;
 800aff0:	687b      	ldr	r3, [r7, #4]
    }
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	20002950 	.word	0x20002950

0800b004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <xTaskGetSchedulerState+0x34>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d102      	bne.n	800b018 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b012:	2301      	movs	r3, #1
 800b014:	607b      	str	r3, [r7, #4]
 800b016:	e008      	b.n	800b02a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b018:	4b08      	ldr	r3, [pc, #32]	; (800b03c <xTaskGetSchedulerState+0x38>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b020:	2302      	movs	r3, #2
 800b022:	607b      	str	r3, [r7, #4]
 800b024:	e001      	b.n	800b02a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b026:	2300      	movs	r3, #0
 800b028:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b02a:	687b      	ldr	r3, [r7, #4]
    }
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	20002e30 	.word	0x20002e30
 800b03c:	20002e4c 	.word	0x20002e4c

0800b040 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800b04c:	2300      	movs	r3, #0
 800b04e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d05a      	beq.n	800b10c <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05a:	4b2f      	ldr	r3, [pc, #188]	; (800b118 <xTaskPriorityInherit+0xd8>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	429a      	cmp	r2, r3
 800b062:	d24a      	bcs.n	800b0fa <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	db06      	blt.n	800b07a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b06c:	4b2a      	ldr	r3, [pc, #168]	; (800b118 <xTaskPriorityInherit+0xd8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6959      	ldr	r1, [r3, #20]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4a24      	ldr	r2, [pc, #144]	; (800b11c <xTaskPriorityInherit+0xdc>)
 800b08c:	4413      	add	r3, r2
 800b08e:	4299      	cmp	r1, r3
 800b090:	d126      	bne.n	800b0e0 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	3304      	adds	r3, #4
 800b096:	4618      	mov	r0, r3
 800b098:	f7fd fe0c 	bl	8008cb4 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b09c:	4b1e      	ldr	r3, [pc, #120]	; (800b118 <xTaskPriorityInherit+0xd8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f002 f84f 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b2:	4b1b      	ldr	r3, [pc, #108]	; (800b120 <xTaskPriorityInherit+0xe0>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d903      	bls.n	800b0c2 <xTaskPriorityInherit+0x82>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	4a18      	ldr	r2, [pc, #96]	; (800b120 <xTaskPriorityInherit+0xe0>)
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4a13      	ldr	r2, [pc, #76]	; (800b11c <xTaskPriorityInherit+0xdc>)
 800b0d0:	441a      	add	r2, r3
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4610      	mov	r0, r2
 800b0da:	f7fd fd8e 	bl	8008bfa <vListInsertEnd>
 800b0de:	e004      	b.n	800b0ea <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	; (800b118 <xTaskPriorityInherit+0xd8>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	2049      	movs	r0, #73	; 0x49
 800b0f0:	f001 faac 	bl	800c64c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	e008      	b.n	800b10c <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0fe:	4b06      	ldr	r3, [pc, #24]	; (800b118 <xTaskPriorityInherit+0xd8>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	429a      	cmp	r2, r3
 800b106:	d201      	bcs.n	800b10c <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b10c:	68fb      	ldr	r3, [r7, #12]
    }
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	20002950 	.word	0x20002950
 800b11c:	20002954 	.word	0x20002954
 800b120:	20002e2c 	.word	0x20002e2c

0800b124 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d05f      	beq.n	800b1fa <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b13a:	4b32      	ldr	r3, [pc, #200]	; (800b204 <xTaskPriorityDisinherit+0xe0>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	429a      	cmp	r2, r3
 800b142:	d00a      	beq.n	800b15a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	60fb      	str	r3, [r7, #12]
    }
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60bb      	str	r3, [r7, #8]
    }
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b17c:	1e5a      	subs	r2, r3, #1
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d035      	beq.n	800b1fa <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b192:	2b00      	cmp	r3, #0
 800b194:	d131      	bne.n	800b1fa <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3304      	adds	r3, #4
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fd fd8a 	bl	8008cb4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	204a      	movs	r0, #74	; 0x4a
 800b1a6:	f001 fa51 	bl	800c64c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f001 ffc3 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	; (800b208 <xTaskPriorityDisinherit+0xe4>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d903      	bls.n	800b1da <xTaskPriorityDisinherit+0xb6>
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d6:	4a0c      	ldr	r2, [pc, #48]	; (800b208 <xTaskPriorityDisinherit+0xe4>)
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1de:	4613      	mov	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4a09      	ldr	r2, [pc, #36]	; (800b20c <xTaskPriorityDisinherit+0xe8>)
 800b1e8:	441a      	add	r2, r3
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	f7fd fd02 	bl	8008bfa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b1fa:	697b      	ldr	r3, [r7, #20]
    }
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20002950 	.word	0x20002950
 800b208:	20002e2c 	.word	0x20002e2c
 800b20c:	20002954 	.word	0x20002954

0800b210 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b210:	b580      	push	{r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b21e:	2301      	movs	r3, #1
 800b220:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d073      	beq.n	800b310 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	60fb      	str	r3, [r7, #12]
    }
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d902      	bls.n	800b256 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	61fb      	str	r3, [r7, #28]
 800b254:	e002      	b.n	800b25c <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	69fa      	ldr	r2, [r7, #28]
 800b262:	429a      	cmp	r2, r3
 800b264:	d054      	beq.n	800b310 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d14f      	bne.n	800b310 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b270:	4b29      	ldr	r3, [pc, #164]	; (800b318 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	429a      	cmp	r2, r3
 800b278:	d10a      	bne.n	800b290 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60bb      	str	r3, [r7, #8]
    }
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4619      	mov	r1, r3
 800b294:	204a      	movs	r0, #74	; 0x4a
 800b296:	f001 f9d9 	bl	800c64c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	69fa      	ldr	r2, [r7, #28]
 800b2a4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	db04      	blt.n	800b2b8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	6959      	ldr	r1, [r3, #20]
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4a15      	ldr	r2, [pc, #84]	; (800b31c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b2c8:	4413      	add	r3, r2
 800b2ca:	4299      	cmp	r1, r3
 800b2cc:	d120      	bne.n	800b310 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fd fcee 	bl	8008cb4 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 ff36 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d903      	bls.n	800b2f4 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	4a0b      	ldr	r2, [pc, #44]	; (800b320 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4a06      	ldr	r2, [pc, #24]	; (800b31c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b302:	441a      	add	r2, r3
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	3304      	adds	r3, #4
 800b308:	4619      	mov	r1, r3
 800b30a:	4610      	mov	r0, r2
 800b30c:	f7fd fc75 	bl	8008bfa <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b310:	bf00      	nop
 800b312:	3720      	adds	r7, #32
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20002950 	.word	0x20002950
 800b31c:	20002954 	.word	0x20002954
 800b320:	20002e2c 	.word	0x20002e2c

0800b324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b324:	b480      	push	{r7}
 800b326:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b328:	4b07      	ldr	r3, [pc, #28]	; (800b348 <pvTaskIncrementMutexHeldCount+0x24>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d004      	beq.n	800b33a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b330:	4b05      	ldr	r3, [pc, #20]	; (800b348 <pvTaskIncrementMutexHeldCount+0x24>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b336:	3201      	adds	r2, #1
 800b338:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800b33a:	4b03      	ldr	r3, [pc, #12]	; (800b348 <pvTaskIncrementMutexHeldCount+0x24>)
 800b33c:	681b      	ldr	r3, [r3, #0]
    }
 800b33e:	4618      	mov	r0, r3
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	20002950 	.word	0x20002950

0800b34c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00a      	beq.n	800b374 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	613b      	str	r3, [r7, #16]
    }
 800b370:	bf00      	nop
 800b372:	e7fe      	b.n	800b372 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 800b374:	f7fd fdf8 	bl	8008f68 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800b378:	4b2b      	ldr	r3, [pc, #172]	; (800b428 <ulTaskGenericNotifyTake+0xdc>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3314      	adds	r3, #20
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d115      	bne.n	800b3b6 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800b38a:	4b27      	ldr	r3, [pc, #156]	; (800b428 <ulTaskGenericNotifyTake+0xdc>)
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	4413      	add	r3, r2
 800b392:	3358      	adds	r3, #88	; 0x58
 800b394:	2201      	movs	r2, #1
 800b396:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00b      	beq.n	800b3b6 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b39e:	2101      	movs	r1, #1
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f903 	bl	800b5ac <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800b3a6:	4b21      	ldr	r3, [pc, #132]	; (800b42c <ulTaskGenericNotifyTake+0xe0>)
 800b3a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b3b6:	f7fd fe07 	bl	8008fc8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800b3ba:	f7fd fdd5 	bl	8008f68 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	2042      	movs	r0, #66	; 0x42
 800b3c6:	f001 f97d 	bl	800c6c4 <SEGGER_SYSVIEW_RecordU32x2>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800b3ca:	4b17      	ldr	r3, [pc, #92]	; (800b428 <ulTaskGenericNotifyTake+0xdc>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3314      	adds	r3, #20
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d014      	beq.n	800b40a <ulTaskGenericNotifyTake+0xbe>
            {
                if( xClearCountOnExit != pdFALSE )
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d008      	beq.n	800b3f8 <ulTaskGenericNotifyTake+0xac>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800b3e6:	4b10      	ldr	r3, [pc, #64]	; (800b428 <ulTaskGenericNotifyTake+0xdc>)
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3314      	adds	r3, #20
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	605a      	str	r2, [r3, #4]
 800b3f6:	e008      	b.n	800b40a <ulTaskGenericNotifyTake+0xbe>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800b3f8:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <ulTaskGenericNotifyTake+0xdc>)
 800b3fa:	6819      	ldr	r1, [r3, #0]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	1e5a      	subs	r2, r3, #1
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	3314      	adds	r3, #20
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	440b      	add	r3, r1
 800b408:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <ulTaskGenericNotifyTake+0xdc>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	4413      	add	r3, r2
 800b412:	3358      	adds	r3, #88	; 0x58
 800b414:	2200      	movs	r2, #0
 800b416:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800b418:	f7fd fdd6 	bl	8008fc8 <vPortExitCritical>

        return ulReturn;
 800b41c:	697b      	ldr	r3, [r7, #20]
    }
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20002950 	.word	0x20002950
 800b42c:	e000ed04 	.word	0xe000ed04

0800b430 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 800b430:	b580      	push	{r7, lr}
 800b432:	b08e      	sub	sp, #56	; 0x38
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <vTaskGenericNotifyGiveFromISR+0x28>
        __asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <vTaskGenericNotifyGiveFromISR+0x44>
        __asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800b470:	bf00      	nop
 800b472:	e7fe      	b.n	800b472 <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b474:	f7fd fe62 	bl	800913c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	637b      	str	r3, [r7, #52]	; 0x34
        __asm volatile
 800b47c:	f3ef 8211 	mrs	r2, BASEPRI
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	623a      	str	r2, [r7, #32]
 800b492:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800b494:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b496:	633b      	str	r3, [r7, #48]	; 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800b498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	4413      	add	r3, r2
 800b49e:	3358      	adds	r3, #88	; 0x58
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800b4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	3358      	adds	r3, #88	; 0x58
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800b4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	3314      	adds	r3, #20
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3314      	adds	r3, #20
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	440b      	add	r3, r1
 800b4ca:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
 800b4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f001 fede 	bl	800d290 <SEGGER_SYSVIEW_ShrinkId>
 800b4d4:	4601      	mov	r1, r0
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	2041      	movs	r0, #65	; 0x41
 800b4dc:	f001 f8f2 	bl	800c6c4 <SEGGER_SYSVIEW_RecordU32x2>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b4e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d14a      	bne.n	800b57e <vTaskGenericNotifyGiveFromISR+0x14e>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <vTaskGenericNotifyGiveFromISR+0xd6>
        __asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	61bb      	str	r3, [r7, #24]
    }
 800b502:	bf00      	nop
 800b504:	e7fe      	b.n	800b504 <vTaskGenericNotifyGiveFromISR+0xd4>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b506:	4b23      	ldr	r3, [pc, #140]	; (800b594 <vTaskGenericNotifyGiveFromISR+0x164>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d121      	bne.n	800b552 <vTaskGenericNotifyGiveFromISR+0x122>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b510:	3304      	adds	r3, #4
 800b512:	4618      	mov	r0, r3
 800b514:	f7fd fbce 	bl	8008cb4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fe16 	bl	800d14c <SEGGER_SYSVIEW_OnTaskStartReady>
 800b520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b524:	4b1c      	ldr	r3, [pc, #112]	; (800b598 <vTaskGenericNotifyGiveFromISR+0x168>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d903      	bls.n	800b534 <vTaskGenericNotifyGiveFromISR+0x104>
 800b52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b530:	4a19      	ldr	r2, [pc, #100]	; (800b598 <vTaskGenericNotifyGiveFromISR+0x168>)
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b538:	4613      	mov	r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4a16      	ldr	r2, [pc, #88]	; (800b59c <vTaskGenericNotifyGiveFromISR+0x16c>)
 800b542:	441a      	add	r2, r3
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	3304      	adds	r3, #4
 800b548:	4619      	mov	r1, r3
 800b54a:	4610      	mov	r0, r2
 800b54c:	f7fd fb55 	bl	8008bfa <vListInsertEnd>
 800b550:	e005      	b.n	800b55e <vTaskGenericNotifyGiveFromISR+0x12e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b554:	3318      	adds	r3, #24
 800b556:	4619      	mov	r1, r3
 800b558:	4811      	ldr	r0, [pc, #68]	; (800b5a0 <vTaskGenericNotifyGiveFromISR+0x170>)
 800b55a:	f7fd fb4e 	bl	8008bfa <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b562:	4b10      	ldr	r3, [pc, #64]	; (800b5a4 <vTaskGenericNotifyGiveFromISR+0x174>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d908      	bls.n	800b57e <vTaskGenericNotifyGiveFromISR+0x14e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <vTaskGenericNotifyGiveFromISR+0x148>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800b578:	4b0b      	ldr	r3, [pc, #44]	; (800b5a8 <vTaskGenericNotifyGiveFromISR+0x178>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	617b      	str	r3, [r7, #20]
        __asm volatile
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f383 8811 	msr	BASEPRI, r3
    }
 800b588:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 800b58a:	bf00      	nop
 800b58c:	3738      	adds	r7, #56	; 0x38
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	20002e4c 	.word	0x20002e4c
 800b598:	20002e2c 	.word	0x20002e2c
 800b59c:	20002954 	.word	0x20002954
 800b5a0:	20002de4 	.word	0x20002de4
 800b5a4:	20002950 	.word	0x20002950
 800b5a8:	20002e38 	.word	0x20002e38

0800b5ac <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b5b6:	4b27      	ldr	r3, [pc, #156]	; (800b654 <prvAddCurrentTaskToDelayedList+0xa8>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5bc:	4b26      	ldr	r3, [pc, #152]	; (800b658 <prvAddCurrentTaskToDelayedList+0xac>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fd fb76 	bl	8008cb4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ce:	d10a      	bne.n	800b5e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d007      	beq.n	800b5e6 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5d6:	4b20      	ldr	r3, [pc, #128]	; (800b658 <prvAddCurrentTaskToDelayedList+0xac>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	481f      	ldr	r0, [pc, #124]	; (800b65c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b5e0:	f7fd fb0b 	bl	8008bfa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b5e4:	e032      	b.n	800b64c <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5ee:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <prvAddCurrentTaskToDelayedList+0xac>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d20f      	bcs.n	800b61e <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b5fe:	4b16      	ldr	r3, [pc, #88]	; (800b658 <prvAddCurrentTaskToDelayedList+0xac>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2104      	movs	r1, #4
 800b604:	4618      	mov	r0, r3
 800b606:	f001 fde3 	bl	800d1d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b60a:	4b15      	ldr	r3, [pc, #84]	; (800b660 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	4b12      	ldr	r3, [pc, #72]	; (800b658 <prvAddCurrentTaskToDelayedList+0xac>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3304      	adds	r3, #4
 800b614:	4619      	mov	r1, r3
 800b616:	4610      	mov	r0, r2
 800b618:	f7fd fb13 	bl	8008c42 <vListInsert>
}
 800b61c:	e016      	b.n	800b64c <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 800b61e:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <prvAddCurrentTaskToDelayedList+0xac>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2104      	movs	r1, #4
 800b624:	4618      	mov	r0, r3
 800b626:	f001 fdd3 	bl	800d1d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b62a:	4b0e      	ldr	r3, [pc, #56]	; (800b664 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <prvAddCurrentTaskToDelayedList+0xac>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3304      	adds	r3, #4
 800b634:	4619      	mov	r1, r3
 800b636:	4610      	mov	r0, r2
 800b638:	f7fd fb03 	bl	8008c42 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b63c:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	429a      	cmp	r2, r3
 800b644:	d202      	bcs.n	800b64c <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800b646:	4a08      	ldr	r2, [pc, #32]	; (800b668 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	6013      	str	r3, [r2, #0]
}
 800b64c:	bf00      	nop
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20002e28 	.word	0x20002e28
 800b658:	20002950 	.word	0x20002950
 800b65c:	20002e10 	.word	0x20002e10
 800b660:	20002de0 	.word	0x20002de0
 800b664:	20002ddc 	.word	0x20002ddc
 800b668:	20002e44 	.word	0x20002e44

0800b66c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08a      	sub	sp, #40	; 0x28
 800b670:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b676:	f000 fb63 	bl	800bd40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b67a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ec <xTimerCreateTimerTask+0x80>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d021      	beq.n	800b6c6 <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800b682:	2300      	movs	r3, #0
 800b684:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800b686:	2300      	movs	r3, #0
 800b688:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b68a:	1d3a      	adds	r2, r7, #4
 800b68c:	f107 0108 	add.w	r1, r7, #8
 800b690:	f107 030c 	add.w	r3, r7, #12
 800b694:	4618      	mov	r0, r3
 800b696:	f004 fcdd 	bl	8010054 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	9202      	str	r2, [sp, #8]
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	2305      	movs	r3, #5
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	460a      	mov	r2, r1
 800b6ac:	4910      	ldr	r1, [pc, #64]	; (800b6f0 <xTimerCreateTimerTask+0x84>)
 800b6ae:	4811      	ldr	r0, [pc, #68]	; (800b6f4 <xTimerCreateTimerTask+0x88>)
 800b6b0:	f7fe fd26 	bl	800a100 <xTaskCreateStatic>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	4a10      	ldr	r2, [pc, #64]	; (800b6f8 <xTimerCreateTimerTask+0x8c>)
 800b6b8:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800b6ba:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <xTimerCreateTimerTask+0x8c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10a      	bne.n	800b6e2 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	613b      	str	r3, [r7, #16]
    }
 800b6de:	bf00      	nop
 800b6e0:	e7fe      	b.n	800b6e0 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800b6e2:	697b      	ldr	r3, [r7, #20]
    }
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20002e80 	.word	0x20002e80
 800b6f0:	08013da4 	.word	0x08013da4
 800b6f4:	0800b8e9 	.word	0x0800b8e9
 800b6f8:	20002e84 	.word	0x20002e84

0800b6fc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af02      	add	r7, sp, #8
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
 800b708:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b70a:	202c      	movs	r0, #44	; 0x2c
 800b70c:	f7fd f846 	bl	800879c <pvPortMalloc>
 800b710:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00d      	beq.n	800b734 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f000 f805 	bl	800b73e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800b734:	697b      	ldr	r3, [r7, #20]
        }
 800b736:	4618      	mov	r0, r3
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800b73e:	b580      	push	{r7, lr}
 800b740:	b086      	sub	sp, #24
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	60b9      	str	r1, [r7, #8]
 800b748:	607a      	str	r2, [r7, #4]
 800b74a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	617b      	str	r3, [r7, #20]
    }
 800b764:	bf00      	nop
 800b766:	e7fe      	b.n	800b766 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d01e      	beq.n	800b7ac <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800b76e:	f000 fae7 	bl	800bd40 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	3304      	adds	r3, #4
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fd fa26 	bl	8008be0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d008      	beq.n	800b7ac <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7a0:	f043 0304 	orr.w	r3, r3, #4
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800b7ac:	bf00      	nop
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	; 0x28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10a      	bne.n	800b7e2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	623b      	str	r3, [r7, #32]
    }
 800b7de:	bf00      	nop
 800b7e0:	e7fe      	b.n	800b7e0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b7e2:	4b1a      	ldr	r3, [pc, #104]	; (800b84c <xTimerGenericCommand+0x98>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d02a      	beq.n	800b840 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b05      	cmp	r3, #5
 800b7fa:	dc18      	bgt.n	800b82e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7fc:	f7ff fc02 	bl	800b004 <xTaskGetSchedulerState>
 800b800:	4603      	mov	r3, r0
 800b802:	2b02      	cmp	r3, #2
 800b804:	d109      	bne.n	800b81a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b806:	4b11      	ldr	r3, [pc, #68]	; (800b84c <xTimerGenericCommand+0x98>)
 800b808:	6818      	ldr	r0, [r3, #0]
 800b80a:	f107 0110 	add.w	r1, r7, #16
 800b80e:	2300      	movs	r3, #0
 800b810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b812:	f7fd feb7 	bl	8009584 <xQueueGenericSend>
 800b816:	6278      	str	r0, [r7, #36]	; 0x24
 800b818:	e012      	b.n	800b840 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b81a:	4b0c      	ldr	r3, [pc, #48]	; (800b84c <xTimerGenericCommand+0x98>)
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	f107 0110 	add.w	r1, r7, #16
 800b822:	2300      	movs	r3, #0
 800b824:	2200      	movs	r2, #0
 800b826:	f7fd fead 	bl	8009584 <xQueueGenericSend>
 800b82a:	6278      	str	r0, [r7, #36]	; 0x24
 800b82c:	e008      	b.n	800b840 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b82e:	4b07      	ldr	r3, [pc, #28]	; (800b84c <xTimerGenericCommand+0x98>)
 800b830:	6818      	ldr	r0, [r3, #0]
 800b832:	f107 0110 	add.w	r1, r7, #16
 800b836:	2300      	movs	r3, #0
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	f7fd ffc9 	bl	80097d0 <xQueueGenericSendFromISR>
 800b83e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b842:	4618      	mov	r0, r3
 800b844:	3728      	adds	r7, #40	; 0x28
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	20002e80 	.word	0x20002e80

0800b850 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b850:	b580      	push	{r7, lr}
 800b852:	b088      	sub	sp, #32
 800b854:	af02      	add	r7, sp, #8
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b85a:	4b22      	ldr	r3, [pc, #136]	; (800b8e4 <prvProcessExpiredTimer+0x94>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	3304      	adds	r3, #4
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fd fa23 	bl	8008cb4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d022      	beq.n	800b8c2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	699a      	ldr	r2, [r3, #24]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	18d1      	adds	r1, r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	6978      	ldr	r0, [r7, #20]
 800b88a:	f000 f8d1 	bl	800ba30 <prvInsertTimerInActiveList>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01f      	beq.n	800b8d4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b894:	2300      	movs	r3, #0
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	2100      	movs	r1, #0
 800b89e:	6978      	ldr	r0, [r7, #20]
 800b8a0:	f7ff ff88 	bl	800b7b4 <xTimerGenericCommand>
 800b8a4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d113      	bne.n	800b8d4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	60fb      	str	r3, [r7, #12]
    }
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8c8:	f023 0301 	bic.w	r3, r3, #1
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	6978      	ldr	r0, [r7, #20]
 800b8da:	4798      	blx	r3
    }
 800b8dc:	bf00      	nop
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	20002e78 	.word	0x20002e78

0800b8e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8f0:	f107 0308 	add.w	r3, r7, #8
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 f857 	bl	800b9a8 <prvGetNextExpireTime>
 800b8fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	4619      	mov	r1, r3
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f803 	bl	800b90c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b906:	f000 f8d5 	bl	800bab4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b90a:	e7f1      	b.n	800b8f0 <prvTimerTask+0x8>

0800b90c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b916:	f7fe fef7 	bl	800a708 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f866 	bl	800b9f0 <prvSampleTimeNow>
 800b924:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d130      	bne.n	800b98e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <prvProcessTimerOrBlockTask+0x3c>
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	429a      	cmp	r2, r3
 800b938:	d806      	bhi.n	800b948 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b93a:	f7fe fef3 	bl	800a724 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b93e:	68f9      	ldr	r1, [r7, #12]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff ff85 	bl	800b850 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b946:	e024      	b.n	800b992 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d008      	beq.n	800b960 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b94e:	4b13      	ldr	r3, [pc, #76]	; (800b99c <prvProcessTimerOrBlockTask+0x90>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <prvProcessTimerOrBlockTask+0x50>
 800b958:	2301      	movs	r3, #1
 800b95a:	e000      	b.n	800b95e <prvProcessTimerOrBlockTask+0x52>
 800b95c:	2300      	movs	r3, #0
 800b95e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b960:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <prvProcessTimerOrBlockTask+0x94>)
 800b962:	6818      	ldr	r0, [r3, #0]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	4619      	mov	r1, r3
 800b96e:	f7fe fb93 	bl	800a098 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b972:	f7fe fed7 	bl	800a724 <xTaskResumeAll>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b97c:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <prvProcessTimerOrBlockTask+0x98>)
 800b97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	f3bf 8f6f 	isb	sy
    }
 800b98c:	e001      	b.n	800b992 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b98e:	f7fe fec9 	bl	800a724 <xTaskResumeAll>
    }
 800b992:	bf00      	nop
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20002e7c 	.word	0x20002e7c
 800b9a0:	20002e80 	.word	0x20002e80
 800b9a4:	e000ed04 	.word	0xe000ed04

0800b9a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9b0:	4b0e      	ldr	r3, [pc, #56]	; (800b9ec <prvGetNextExpireTime+0x44>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <prvGetNextExpireTime+0x16>
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	e000      	b.n	800b9c0 <prvGetNextExpireTime+0x18>
 800b9be:	2200      	movs	r2, #0
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d105      	bne.n	800b9d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9cc:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <prvGetNextExpireTime+0x44>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	e001      	b.n	800b9dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
    }
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20002e78 	.word	0x20002e78

0800b9f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b9f8:	f7fe ff36 	bl	800a868 <xTaskGetTickCount>
 800b9fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b9fe:	4b0b      	ldr	r3, [pc, #44]	; (800ba2c <prvSampleTimeNow+0x3c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d205      	bcs.n	800ba14 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800ba08:	f000 f936 	bl	800bc78 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	601a      	str	r2, [r3, #0]
 800ba12:	e002      	b.n	800ba1a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800ba1a:	4a04      	ldr	r2, [pc, #16]	; (800ba2c <prvSampleTimeNow+0x3c>)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800ba20:	68fb      	ldr	r3, [r7, #12]
    }
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20002e88 	.word	0x20002e88

0800ba30 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d812      	bhi.n	800ba7c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	1ad2      	subs	r2, r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d302      	bcc.n	800ba6a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800ba64:	2301      	movs	r3, #1
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	e01b      	b.n	800baa2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba6a:	4b10      	ldr	r3, [pc, #64]	; (800baac <prvInsertTimerInActiveList+0x7c>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3304      	adds	r3, #4
 800ba72:	4619      	mov	r1, r3
 800ba74:	4610      	mov	r0, r2
 800ba76:	f7fd f8e4 	bl	8008c42 <vListInsert>
 800ba7a:	e012      	b.n	800baa2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d206      	bcs.n	800ba92 <prvInsertTimerInActiveList+0x62>
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d302      	bcc.n	800ba92 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	617b      	str	r3, [r7, #20]
 800ba90:	e007      	b.n	800baa2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba92:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <prvInsertTimerInActiveList+0x80>)
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3304      	adds	r3, #4
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	f7fd f8d0 	bl	8008c42 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800baa2:	697b      	ldr	r3, [r7, #20]
    }
 800baa4:	4618      	mov	r0, r3
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20002e7c 	.word	0x20002e7c
 800bab0:	20002e78 	.word	0x20002e78

0800bab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b08e      	sub	sp, #56	; 0x38
 800bab8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baba:	e0ca      	b.n	800bc52 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da18      	bge.n	800baf4 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bac2:	1d3b      	adds	r3, r7, #4
 800bac4:	3304      	adds	r3, #4
 800bac6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <prvProcessReceivedCommands+0x30>
        __asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	61fb      	str	r3, [r7, #28]
    }
 800bae0:	bf00      	nop
 800bae2:	e7fe      	b.n	800bae2 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baea:	6850      	ldr	r0, [r2, #4]
 800baec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baee:	6892      	ldr	r2, [r2, #8]
 800baf0:	4611      	mov	r1, r2
 800baf2:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f2c0 80aa 	blt.w	800bc50 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d004      	beq.n	800bb12 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fd f8d1 	bl	8008cb4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb12:	463b      	mov	r3, r7
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff ff6b 	bl	800b9f0 <prvSampleTimeNow>
 800bb1a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b09      	cmp	r3, #9
 800bb20:	f200 8097 	bhi.w	800bc52 <prvProcessReceivedCommands+0x19e>
 800bb24:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <prvProcessReceivedCommands+0x78>)
 800bb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2a:	bf00      	nop
 800bb2c:	0800bb55 	.word	0x0800bb55
 800bb30:	0800bb55 	.word	0x0800bb55
 800bb34:	0800bb55 	.word	0x0800bb55
 800bb38:	0800bbc9 	.word	0x0800bbc9
 800bb3c:	0800bbdd 	.word	0x0800bbdd
 800bb40:	0800bc27 	.word	0x0800bc27
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bb55 	.word	0x0800bb55
 800bb4c:	0800bbc9 	.word	0x0800bbc9
 800bb50:	0800bbdd 	.word	0x0800bbdd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb5a:	f043 0301 	orr.w	r3, r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	18d1      	adds	r1, r2, r3
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb74:	f7ff ff5c 	bl	800ba30 <prvInsertTimerInActiveList>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d069      	beq.n	800bc52 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb84:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb8c:	f003 0304 	and.w	r3, r3, #4
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d05e      	beq.n	800bc52 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	441a      	add	r2, r3
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	2100      	movs	r1, #0
 800bba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bba6:	f7ff fe05 	bl	800b7b4 <xTimerGenericCommand>
 800bbaa:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d14f      	bne.n	800bc52 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	61bb      	str	r3, [r7, #24]
    }
 800bbc4:	bf00      	nop
 800bbc6:	e7fe      	b.n	800bbc6 <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbce:	f023 0301 	bic.w	r3, r3, #1
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800bbda:	e03a      	b.n	800bc52 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe2:	f043 0301 	orr.w	r3, r3, #1
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	617b      	str	r3, [r7, #20]
    }
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	699a      	ldr	r2, [r3, #24]
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	18d1      	adds	r1, r2, r3
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc20:	f7ff ff06 	bl	800ba30 <prvInsertTimerInActiveList>
                        break;
 800bc24:	e015      	b.n	800bc52 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d103      	bne.n	800bc3c <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 800bc34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc36:	f7fc fe95 	bl	8008964 <vPortFree>
 800bc3a:	e00a      	b.n	800bc52 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc42:	f023 0301 	bic.w	r3, r3, #1
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800bc4e:	e000      	b.n	800bc52 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800bc50:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc52:	4b08      	ldr	r3, [pc, #32]	; (800bc74 <prvProcessReceivedCommands+0x1c0>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	1d39      	adds	r1, r7, #4
 800bc58:	2200      	movs	r2, #0
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fd fe76 	bl	800994c <xQueueReceive>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f47f af2a 	bne.w	800babc <prvProcessReceivedCommands+0x8>
        }
    }
 800bc68:	bf00      	nop
 800bc6a:	bf00      	nop
 800bc6c:	3730      	adds	r7, #48	; 0x30
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20002e80 	.word	0x20002e80

0800bc78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc7e:	e048      	b.n	800bd12 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc80:	4b2d      	ldr	r3, [pc, #180]	; (800bd38 <prvSwitchTimerLists+0xc0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc8a:	4b2b      	ldr	r3, [pc, #172]	; (800bd38 <prvSwitchTimerLists+0xc0>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3304      	adds	r3, #4
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fd f80b 	bl	8008cb4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d02e      	beq.n	800bd12 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	4413      	add	r3, r2
 800bcbc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d90e      	bls.n	800bce4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcd2:	4b19      	ldr	r3, [pc, #100]	; (800bd38 <prvSwitchTimerLists+0xc0>)
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7fc ffb0 	bl	8008c42 <vListInsert>
 800bce2:	e016      	b.n	800bd12 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bce4:	2300      	movs	r3, #0
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	2300      	movs	r3, #0
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	2100      	movs	r1, #0
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff fd60 	bl	800b7b4 <xTimerGenericCommand>
 800bcf4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10a      	bne.n	800bd12 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	603b      	str	r3, [r7, #0]
    }
 800bd0e:	bf00      	nop
 800bd10:	e7fe      	b.n	800bd10 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd12:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <prvSwitchTimerLists+0xc0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1b1      	bne.n	800bc80 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800bd1c:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <prvSwitchTimerLists+0xc0>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800bd22:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <prvSwitchTimerLists+0xc4>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a04      	ldr	r2, [pc, #16]	; (800bd38 <prvSwitchTimerLists+0xc0>)
 800bd28:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800bd2a:	4a04      	ldr	r2, [pc, #16]	; (800bd3c <prvSwitchTimerLists+0xc4>)
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	6013      	str	r3, [r2, #0]
    }
 800bd30:	bf00      	nop
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20002e78 	.word	0x20002e78
 800bd3c:	20002e7c 	.word	0x20002e7c

0800bd40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800bd46:	f7fd f90f 	bl	8008f68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800bd4a:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <prvCheckForValidListAndQueue+0x60>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d120      	bne.n	800bd94 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800bd52:	4814      	ldr	r0, [pc, #80]	; (800bda4 <prvCheckForValidListAndQueue+0x64>)
 800bd54:	f7fc ff24 	bl	8008ba0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800bd58:	4813      	ldr	r0, [pc, #76]	; (800bda8 <prvCheckForValidListAndQueue+0x68>)
 800bd5a:	f7fc ff21 	bl	8008ba0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800bd5e:	4b13      	ldr	r3, [pc, #76]	; (800bdac <prvCheckForValidListAndQueue+0x6c>)
 800bd60:	4a10      	ldr	r2, [pc, #64]	; (800bda4 <prvCheckForValidListAndQueue+0x64>)
 800bd62:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800bd64:	4b12      	ldr	r3, [pc, #72]	; (800bdb0 <prvCheckForValidListAndQueue+0x70>)
 800bd66:	4a10      	ldr	r2, [pc, #64]	; (800bda8 <prvCheckForValidListAndQueue+0x68>)
 800bd68:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <prvCheckForValidListAndQueue+0x74>)
 800bd70:	4a11      	ldr	r2, [pc, #68]	; (800bdb8 <prvCheckForValidListAndQueue+0x78>)
 800bd72:	2110      	movs	r1, #16
 800bd74:	200a      	movs	r0, #10
 800bd76:	f7fd facf 	bl	8009318 <xQueueGenericCreateStatic>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <prvCheckForValidListAndQueue+0x60>)
 800bd7e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800bd80:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <prvCheckForValidListAndQueue+0x60>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d005      	beq.n	800bd94 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd88:	4b05      	ldr	r3, [pc, #20]	; (800bda0 <prvCheckForValidListAndQueue+0x60>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	490b      	ldr	r1, [pc, #44]	; (800bdbc <prvCheckForValidListAndQueue+0x7c>)
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fe f950 	bl	800a034 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800bd94:	f7fd f918 	bl	8008fc8 <vPortExitCritical>
    }
 800bd98:	bf00      	nop
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20002e80 	.word	0x20002e80
 800bda4:	20002e50 	.word	0x20002e50
 800bda8:	20002e64 	.word	0x20002e64
 800bdac:	20002e78 	.word	0x20002e78
 800bdb0:	20002e7c 	.word	0x20002e7c
 800bdb4:	20002f2c 	.word	0x20002f2c
 800bdb8:	20002e8c 	.word	0x20002e8c
 800bdbc:	08013dac 	.word	0x08013dac

0800bdc0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800bdc6:	4b24      	ldr	r3, [pc, #144]	; (800be58 <_DoInit+0x98>)
 800bdc8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a20      	ldr	r2, [pc, #128]	; (800be5c <_DoInit+0x9c>)
 800bdda:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a20      	ldr	r2, [pc, #128]	; (800be60 <_DoInit+0xa0>)
 800bde0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bde8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a17      	ldr	r2, [pc, #92]	; (800be5c <_DoInit+0x9c>)
 800be00:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a17      	ldr	r2, [pc, #92]	; (800be64 <_DoInit+0xa4>)
 800be06:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2210      	movs	r2, #16
 800be0c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3307      	adds	r3, #7
 800be24:	4a10      	ldr	r2, [pc, #64]	; (800be68 <_DoInit+0xa8>)
 800be26:	6810      	ldr	r0, [r2, #0]
 800be28:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800be2a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a0e      	ldr	r2, [pc, #56]	; (800be6c <_DoInit+0xac>)
 800be32:	6810      	ldr	r0, [r2, #0]
 800be34:	6018      	str	r0, [r3, #0]
 800be36:	8891      	ldrh	r1, [r2, #4]
 800be38:	7992      	ldrb	r2, [r2, #6]
 800be3a:	8099      	strh	r1, [r3, #4]
 800be3c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800be3e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2220      	movs	r2, #32
 800be46:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800be48:	f3bf 8f5f 	dmb	sy
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	20002f7c 	.word	0x20002f7c
 800be5c:	08013db4 	.word	0x08013db4
 800be60:	20003024 	.word	0x20003024
 800be64:	20004024 	.word	0x20004024
 800be68:	08013dc0 	.word	0x08013dc0
 800be6c:	08013dc4 	.word	0x08013dc4

0800be70 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b08c      	sub	sp, #48	; 0x30
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800be7c:	4b3e      	ldr	r3, [pc, #248]	; (800bf78 <SEGGER_RTT_ReadNoLock+0x108>)
 800be7e:	623b      	str	r3, [r7, #32]
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <SEGGER_RTT_ReadNoLock+0x1e>
 800be8a:	f7ff ff99 	bl	800bdc0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4613      	mov	r3, r2
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	4413      	add	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	3360      	adds	r3, #96	; 0x60
 800be9a:	4a37      	ldr	r2, [pc, #220]	; (800bf78 <SEGGER_RTT_ReadNoLock+0x108>)
 800be9c:	4413      	add	r3, r2
 800be9e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800beb0:	2300      	movs	r3, #0
 800beb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800beb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d92b      	bls.n	800bf14 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4293      	cmp	r3, r2
 800becc:	bf28      	it	cs
 800bece:	4613      	movcs	r3, r2
 800bed0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed8:	4413      	add	r3, r2
 800beda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	6939      	ldr	r1, [r7, #16]
 800bee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bee2:	f007 fa47 	bl	8013374 <memcpy>
    NumBytesRead += NumBytesRem;
 800bee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	4413      	add	r3, r2
 800beec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800beee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	4413      	add	r3, r2
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800befe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	4413      	add	r3, r2
 800bf04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d101      	bne.n	800bf14 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800bf10:	2300      	movs	r3, #0
 800bf12:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4293      	cmp	r3, r2
 800bf22:	bf28      	it	cs
 800bf24:	4613      	movcs	r3, r2
 800bf26:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d019      	beq.n	800bf62 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	4413      	add	r3, r2
 800bf36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	6939      	ldr	r1, [r7, #16]
 800bf3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf3e:	f007 fa19 	bl	8013374 <memcpy>
    NumBytesRead += NumBytesRem;
 800bf42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	4413      	add	r3, r2
 800bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800bf4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	4413      	add	r3, r2
 800bf50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bf5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	4413      	add	r3, r2
 800bf60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800bf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf6c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3730      	adds	r7, #48	; 0x30
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20002f7c 	.word	0x20002f7c

0800bf7c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800bf8a:	4b3d      	ldr	r3, [pc, #244]	; (800c080 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bf8c:	61bb      	str	r3, [r7, #24]
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <SEGGER_RTT_AllocUpBuffer+0x20>
 800bf98:	f7ff ff12 	bl	800bdc0 <_DoInit>
  SEGGER_RTT_LOCK();
 800bf9c:	f3ef 8311 	mrs	r3, BASEPRI
 800bfa0:	f04f 0120 	mov.w	r1, #32
 800bfa4:	f381 8811 	msr	BASEPRI, r1
 800bfa8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bfaa:	4b35      	ldr	r3, [pc, #212]	; (800c080 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bfac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800bfb2:	6939      	ldr	r1, [r7, #16]
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	4613      	mov	r3, r2
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	4413      	add	r3, r2
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	440b      	add	r3, r1
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d008      	beq.n	800bfdc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	69fa      	ldr	r2, [r7, #28]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	dbeb      	blt.n	800bfb2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800bfda:	e000      	b.n	800bfde <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800bfdc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	da3f      	bge.n	800c068 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800bfe8:	6939      	ldr	r1, [r7, #16]
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	440b      	add	r3, r1
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800bffc:	6939      	ldr	r1, [r7, #16]
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	4613      	mov	r3, r2
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	4413      	add	r3, r2
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	440b      	add	r3, r1
 800c00c:	3304      	adds	r3, #4
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c012:	6939      	ldr	r1, [r7, #16]
 800c014:	69fa      	ldr	r2, [r7, #28]
 800c016:	4613      	mov	r3, r2
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	4413      	add	r3, r2
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	440b      	add	r3, r1
 800c020:	3320      	adds	r3, #32
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c026:	6939      	ldr	r1, [r7, #16]
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	4613      	mov	r3, r2
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	4413      	add	r3, r2
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	440b      	add	r3, r1
 800c034:	3328      	adds	r3, #40	; 0x28
 800c036:	2200      	movs	r2, #0
 800c038:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c03a:	6939      	ldr	r1, [r7, #16]
 800c03c:	69fa      	ldr	r2, [r7, #28]
 800c03e:	4613      	mov	r3, r2
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4413      	add	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	440b      	add	r3, r1
 800c048:	3324      	adds	r3, #36	; 0x24
 800c04a:	2200      	movs	r2, #0
 800c04c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c04e:	6939      	ldr	r1, [r7, #16]
 800c050:	69fa      	ldr	r2, [r7, #28]
 800c052:	4613      	mov	r3, r2
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	4413      	add	r3, r2
 800c058:	00db      	lsls	r3, r3, #3
 800c05a:	440b      	add	r3, r1
 800c05c:	332c      	adds	r3, #44	; 0x2c
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c062:	f3bf 8f5f 	dmb	sy
 800c066:	e002      	b.n	800c06e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c06c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c074:	69fb      	ldr	r3, [r7, #28]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3720      	adds	r7, #32
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20002f7c 	.word	0x20002f7c

0800c084 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c084:	b580      	push	{r7, lr}
 800c086:	b08a      	sub	sp, #40	; 0x28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800c092:	4b21      	ldr	r3, [pc, #132]	; (800c118 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c094:	623b      	str	r3, [r7, #32]
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c0a0:	f7ff fe8e 	bl	800bdc0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c0a4:	4b1c      	ldr	r3, [pc, #112]	; (800c118 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c0a6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d82c      	bhi.n	800c108 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800c0ae:	f3ef 8311 	mrs	r3, BASEPRI
 800c0b2:	f04f 0120 	mov.w	r1, #32
 800c0b6:	f381 8811 	msr	BASEPRI, r1
 800c0ba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	4413      	add	r3, r2
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	3360      	adds	r3, #96	; 0x60
 800c0c8:	69fa      	ldr	r2, [r7, #28]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00e      	beq.n	800c0f2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0f6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c0f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c102:	2300      	movs	r3, #0
 800c104:	627b      	str	r3, [r7, #36]	; 0x24
 800c106:	e002      	b.n	800c10e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800c108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c110:	4618      	mov	r0, r3
 800c112:	3728      	adds	r7, #40	; 0x28
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20002f7c 	.word	0x20002f7c

0800c11c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c11c:	b480      	push	{r7}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00f      	beq.n	800c152 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800c132:	e002      	b.n	800c13a <_EncodeStr+0x1e>
      Len++;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	3301      	adds	r3, #1
 800c138:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	4413      	add	r3, r2
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1f6      	bne.n	800c134 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d901      	bls.n	800c152 <_EncodeStr+0x36>
      Len = Limit;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	2bfe      	cmp	r3, #254	; 0xfe
 800c156:	d806      	bhi.n	800c166 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	1c5a      	adds	r2, r3, #1
 800c15c:	60fa      	str	r2, [r7, #12]
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	b2d2      	uxtb	r2, r2
 800c162:	701a      	strb	r2, [r3, #0]
 800c164:	e011      	b.n	800c18a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	60fa      	str	r2, [r7, #12]
 800c16c:	22ff      	movs	r2, #255	; 0xff
 800c16e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	1c5a      	adds	r2, r3, #1
 800c174:	60fa      	str	r2, [r7, #12]
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	b2d2      	uxtb	r2, r2
 800c17a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	0a19      	lsrs	r1, r3, #8
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	60fa      	str	r2, [r7, #12]
 800c186:	b2ca      	uxtb	r2, r1
 800c188:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c18e:	e00a      	b.n	800c1a6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	1c53      	adds	r3, r2, #1
 800c194:	60bb      	str	r3, [r7, #8]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	1c59      	adds	r1, r3, #1
 800c19a:	60f9      	str	r1, [r7, #12]
 800c19c:	7812      	ldrb	r2, [r2, #0]
 800c19e:	701a      	strb	r2, [r3, #0]
    n++;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d3f0      	bcc.n	800c190 <_EncodeStr+0x74>
  }
  return pPayload;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	371c      	adds	r7, #28
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3304      	adds	r3, #4
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c1da:	4b36      	ldr	r3, [pc, #216]	; (800c2b4 <_HandleIncomingPacket+0xe0>)
 800c1dc:	7e1b      	ldrb	r3, [r3, #24]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	1cfb      	adds	r3, r7, #3
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f7ff fe43 	bl	800be70 <SEGGER_RTT_ReadNoLock>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	dd54      	ble.n	800c29e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800c1f4:	78fb      	ldrb	r3, [r7, #3]
 800c1f6:	2b80      	cmp	r3, #128	; 0x80
 800c1f8:	d032      	beq.n	800c260 <_HandleIncomingPacket+0x8c>
 800c1fa:	2b80      	cmp	r3, #128	; 0x80
 800c1fc:	dc42      	bgt.n	800c284 <_HandleIncomingPacket+0xb0>
 800c1fe:	2b07      	cmp	r3, #7
 800c200:	dc16      	bgt.n	800c230 <_HandleIncomingPacket+0x5c>
 800c202:	2b00      	cmp	r3, #0
 800c204:	dd3e      	ble.n	800c284 <_HandleIncomingPacket+0xb0>
 800c206:	3b01      	subs	r3, #1
 800c208:	2b06      	cmp	r3, #6
 800c20a:	d83b      	bhi.n	800c284 <_HandleIncomingPacket+0xb0>
 800c20c:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <_HandleIncomingPacket+0x40>)
 800c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c212:	bf00      	nop
 800c214:	0800c237 	.word	0x0800c237
 800c218:	0800c23d 	.word	0x0800c23d
 800c21c:	0800c243 	.word	0x0800c243
 800c220:	0800c249 	.word	0x0800c249
 800c224:	0800c24f 	.word	0x0800c24f
 800c228:	0800c255 	.word	0x0800c255
 800c22c:	0800c25b 	.word	0x0800c25b
 800c230:	2b7f      	cmp	r3, #127	; 0x7f
 800c232:	d036      	beq.n	800c2a2 <_HandleIncomingPacket+0xce>
 800c234:	e026      	b.n	800c284 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c236:	f000 fba7 	bl	800c988 <SEGGER_SYSVIEW_Start>
      break;
 800c23a:	e037      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c23c:	f000 fc5e 	bl	800cafc <SEGGER_SYSVIEW_Stop>
      break;
 800c240:	e034      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c242:	f000 fe37 	bl	800ceb4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c246:	e031      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c248:	f000 fdfc 	bl	800ce44 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c24c:	e02e      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c24e:	f000 fc7b 	bl	800cb48 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c252:	e02b      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c254:	f001 f8ca 	bl	800d3ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c258:	e028      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c25a:	f001 f8a9 	bl	800d3b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c25e:	e025      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c260:	4b14      	ldr	r3, [pc, #80]	; (800c2b4 <_HandleIncomingPacket+0xe0>)
 800c262:	7e1b      	ldrb	r3, [r3, #24]
 800c264:	4618      	mov	r0, r3
 800c266:	1cfb      	adds	r3, r7, #3
 800c268:	2201      	movs	r2, #1
 800c26a:	4619      	mov	r1, r3
 800c26c:	f7ff fe00 	bl	800be70 <SEGGER_RTT_ReadNoLock>
 800c270:	4603      	mov	r3, r0
 800c272:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	dd15      	ble.n	800c2a6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f001 f817 	bl	800d2b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c282:	e010      	b.n	800c2a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	b25b      	sxtb	r3, r3
 800c288:	2b00      	cmp	r3, #0
 800c28a:	da0e      	bge.n	800c2aa <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c28c:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <_HandleIncomingPacket+0xe0>)
 800c28e:	7e1b      	ldrb	r3, [r3, #24]
 800c290:	4618      	mov	r0, r3
 800c292:	1cfb      	adds	r3, r7, #3
 800c294:	2201      	movs	r2, #1
 800c296:	4619      	mov	r1, r3
 800c298:	f7ff fdea 	bl	800be70 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c29c:	e005      	b.n	800c2aa <_HandleIncomingPacket+0xd6>
    }
  }
 800c29e:	bf00      	nop
 800c2a0:	e004      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
      break;
 800c2a2:	bf00      	nop
 800c2a4:	e002      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
      break;
 800c2a6:	bf00      	nop
 800c2a8:	e000      	b.n	800c2ac <_HandleIncomingPacket+0xd8>
      break;
 800c2aa:	bf00      	nop
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	2000443c 	.word	0x2000443c

0800c2b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08c      	sub	sp, #48	; 0x30
 800c2bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c2be:	2301      	movs	r3, #1
 800c2c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c2c2:	1d3b      	adds	r3, r7, #4
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2cc:	4b31      	ldr	r3, [pc, #196]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c2ce:	695b      	ldr	r3, [r3, #20]
 800c2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2d2:	e00b      	b.n	800c2ec <_TrySendOverflowPacket+0x34>
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2da:	1c59      	adds	r1, r3, #1
 800c2dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c2de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2e2:	b2d2      	uxtb	r2, r2
 800c2e4:	701a      	strb	r2, [r3, #0]
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	09db      	lsrs	r3, r3, #7
 800c2ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c2f0:	d8f0      	bhi.n	800c2d4 <_TrySendOverflowPacket+0x1c>
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f4:	1c5a      	adds	r2, r3, #1
 800c2f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2fa:	b2d2      	uxtb	r2, r2
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c300:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c302:	4b25      	ldr	r3, [pc, #148]	; (800c398 <_TrySendOverflowPacket+0xe0>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c308:	4b22      	ldr	r3, [pc, #136]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	627b      	str	r3, [r7, #36]	; 0x24
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	623b      	str	r3, [r7, #32]
 800c31a:	e00b      	b.n	800c334 <_TrySendOverflowPacket+0x7c>
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	1c59      	adds	r1, r3, #1
 800c324:	6279      	str	r1, [r7, #36]	; 0x24
 800c326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c32a:	b2d2      	uxtb	r2, r2
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	6a3b      	ldr	r3, [r7, #32]
 800c330:	09db      	lsrs	r3, r3, #7
 800c332:	623b      	str	r3, [r7, #32]
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	2b7f      	cmp	r3, #127	; 0x7f
 800c338:	d8f0      	bhi.n	800c31c <_TrySendOverflowPacket+0x64>
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	627a      	str	r2, [r7, #36]	; 0x24
 800c340:	6a3a      	ldr	r2, [r7, #32]
 800c342:	b2d2      	uxtb	r2, r2
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c34a:	4b12      	ldr	r3, [pc, #72]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c34c:	785b      	ldrb	r3, [r3, #1]
 800c34e:	4618      	mov	r0, r3
 800c350:	1d3b      	adds	r3, r7, #4
 800c352:	69fa      	ldr	r2, [r7, #28]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	461a      	mov	r2, r3
 800c358:	1d3b      	adds	r3, r7, #4
 800c35a:	4619      	mov	r1, r3
 800c35c:	f7f3 ff48 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c360:	4603      	mov	r3, r0
 800c362:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d009      	beq.n	800c37e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c36a:	4a0a      	ldr	r2, [pc, #40]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c370:	4b08      	ldr	r3, [pc, #32]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	3b01      	subs	r3, #1
 800c376:	b2da      	uxtb	r2, r3
 800c378:	4b06      	ldr	r3, [pc, #24]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c37a:	701a      	strb	r2, [r3, #0]
 800c37c:	e004      	b.n	800c388 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	3301      	adds	r3, #1
 800c384:	4a03      	ldr	r2, [pc, #12]	; (800c394 <_TrySendOverflowPacket+0xdc>)
 800c386:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c388:	693b      	ldr	r3, [r7, #16]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3730      	adds	r7, #48	; 0x30
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	2000443c 	.word	0x2000443c
 800c398:	e0001004 	.word	0xe0001004

0800c39c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08a      	sub	sp, #40	; 0x28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c3a8:	4b6c      	ldr	r3, [pc, #432]	; (800c55c <_SendPacket+0x1c0>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d010      	beq.n	800c3d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c3b0:	4b6a      	ldr	r3, [pc, #424]	; (800c55c <_SendPacket+0x1c0>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 80a3 	beq.w	800c500 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c3ba:	4b68      	ldr	r3, [pc, #416]	; (800c55c <_SendPacket+0x1c0>)
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d109      	bne.n	800c3d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c3c2:	f7ff ff79 	bl	800c2b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c3c6:	4b65      	ldr	r3, [pc, #404]	; (800c55c <_SendPacket+0x1c0>)
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	f040 809a 	bne.w	800c504 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c3d0:	e001      	b.n	800c3d6 <_SendPacket+0x3a>
    goto Send;
 800c3d2:	bf00      	nop
 800c3d4:	e000      	b.n	800c3d8 <_SendPacket+0x3c>
Send:
 800c3d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b1f      	cmp	r3, #31
 800c3dc:	d809      	bhi.n	800c3f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c3de:	4b5f      	ldr	r3, [pc, #380]	; (800c55c <_SendPacket+0x1c0>)
 800c3e0:	69da      	ldr	r2, [r3, #28]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f040 808b 	bne.w	800c508 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b17      	cmp	r3, #23
 800c3f6:	d807      	bhi.n	800c408 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	b2da      	uxtb	r2, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	e03d      	b.n	800c484 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	2b7f      	cmp	r3, #127	; 0x7f
 800c414:	d912      	bls.n	800c43c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	09da      	lsrs	r2, r3, #7
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	b2d2      	uxtb	r2, r2
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	3a01      	subs	r2, #1
 800c42e:	60fa      	str	r2, [r7, #12]
 800c430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c434:	b2da      	uxtb	r2, r3
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	e006      	b.n	800c44a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3b01      	subs	r3, #1
 800c440:	60fb      	str	r3, [r7, #12]
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	b2da      	uxtb	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b7f      	cmp	r3, #127	; 0x7f
 800c44e:	d912      	bls.n	800c476 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	09da      	lsrs	r2, r3, #7
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3b01      	subs	r3, #1
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	b2d2      	uxtb	r2, r2
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	3a01      	subs	r2, #1
 800c468:	60fa      	str	r2, [r7, #12]
 800c46a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	701a      	strb	r2, [r3, #0]
 800c474:	e006      	b.n	800c484 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3b01      	subs	r3, #1
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c484:	4b36      	ldr	r3, [pc, #216]	; (800c560 <_SendPacket+0x1c4>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c48a:	4b34      	ldr	r3, [pc, #208]	; (800c55c <_SendPacket+0x1c0>)
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	69ba      	ldr	r2, [r7, #24]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	627b      	str	r3, [r7, #36]	; 0x24
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	623b      	str	r3, [r7, #32]
 800c49c:	e00b      	b.n	800c4b6 <_SendPacket+0x11a>
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	1c59      	adds	r1, r3, #1
 800c4a6:	6279      	str	r1, [r7, #36]	; 0x24
 800c4a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4ac:	b2d2      	uxtb	r2, r2
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	09db      	lsrs	r3, r3, #7
 800c4b4:	623b      	str	r3, [r7, #32]
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	2b7f      	cmp	r3, #127	; 0x7f
 800c4ba:	d8f0      	bhi.n	800c49e <_SendPacket+0x102>
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	627a      	str	r2, [r7, #36]	; 0x24
 800c4c2:	6a3a      	ldr	r2, [r7, #32]
 800c4c4:	b2d2      	uxtb	r2, r2
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c4cc:	4b23      	ldr	r3, [pc, #140]	; (800c55c <_SendPacket+0x1c0>)
 800c4ce:	785b      	ldrb	r3, [r3, #1]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	68f9      	ldr	r1, [r7, #12]
 800c4dc:	f7f3 fe88 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c4ea:	4a1c      	ldr	r2, [pc, #112]	; (800c55c <_SendPacket+0x1c0>)
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	60d3      	str	r3, [r2, #12]
 800c4f0:	e00b      	b.n	800c50a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c4f2:	4b1a      	ldr	r3, [pc, #104]	; (800c55c <_SendPacket+0x1c0>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	4b18      	ldr	r3, [pc, #96]	; (800c55c <_SendPacket+0x1c0>)
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	e004      	b.n	800c50a <_SendPacket+0x16e>
    goto SendDone;
 800c500:	bf00      	nop
 800c502:	e002      	b.n	800c50a <_SendPacket+0x16e>
      goto SendDone;
 800c504:	bf00      	nop
 800c506:	e000      	b.n	800c50a <_SendPacket+0x16e>
      goto SendDone;
 800c508:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c50a:	4b14      	ldr	r3, [pc, #80]	; (800c55c <_SendPacket+0x1c0>)
 800c50c:	7e1b      	ldrb	r3, [r3, #24]
 800c50e:	4619      	mov	r1, r3
 800c510:	4a14      	ldr	r2, [pc, #80]	; (800c564 <_SendPacket+0x1c8>)
 800c512:	460b      	mov	r3, r1
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	440b      	add	r3, r1
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	4413      	add	r3, r2
 800c51c:	336c      	adds	r3, #108	; 0x6c
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	4b0e      	ldr	r3, [pc, #56]	; (800c55c <_SendPacket+0x1c0>)
 800c522:	7e1b      	ldrb	r3, [r3, #24]
 800c524:	4618      	mov	r0, r3
 800c526:	490f      	ldr	r1, [pc, #60]	; (800c564 <_SendPacket+0x1c8>)
 800c528:	4603      	mov	r3, r0
 800c52a:	005b      	lsls	r3, r3, #1
 800c52c:	4403      	add	r3, r0
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	440b      	add	r3, r1
 800c532:	3370      	adds	r3, #112	; 0x70
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d00b      	beq.n	800c552 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c53a:	4b08      	ldr	r3, [pc, #32]	; (800c55c <_SendPacket+0x1c0>)
 800c53c:	789b      	ldrb	r3, [r3, #2]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d107      	bne.n	800c552 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c542:	4b06      	ldr	r3, [pc, #24]	; (800c55c <_SendPacket+0x1c0>)
 800c544:	2201      	movs	r2, #1
 800c546:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c548:	f7ff fe44 	bl	800c1d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c54c:	4b03      	ldr	r3, [pc, #12]	; (800c55c <_SendPacket+0x1c0>)
 800c54e:	2200      	movs	r2, #0
 800c550:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c552:	bf00      	nop
 800c554:	3728      	adds	r7, #40	; 0x28
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	2000443c 	.word	0x2000443c
 800c560:	e0001004 	.word	0xe0001004
 800c564:	20002f7c 	.word	0x20002f7c

0800c568 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c576:	2300      	movs	r3, #0
 800c578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c57c:	4917      	ldr	r1, [pc, #92]	; (800c5dc <SEGGER_SYSVIEW_Init+0x74>)
 800c57e:	4818      	ldr	r0, [pc, #96]	; (800c5e0 <SEGGER_SYSVIEW_Init+0x78>)
 800c580:	f7ff fcfc 	bl	800bf7c <SEGGER_RTT_AllocUpBuffer>
 800c584:	4603      	mov	r3, r0
 800c586:	b2da      	uxtb	r2, r3
 800c588:	4b16      	ldr	r3, [pc, #88]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c58a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c58c:	4b15      	ldr	r3, [pc, #84]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c58e:	785a      	ldrb	r2, [r3, #1]
 800c590:	4b14      	ldr	r3, [pc, #80]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c592:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c594:	4b13      	ldr	r3, [pc, #76]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c596:	7e1b      	ldrb	r3, [r3, #24]
 800c598:	4618      	mov	r0, r3
 800c59a:	2300      	movs	r3, #0
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	2308      	movs	r3, #8
 800c5a0:	4a11      	ldr	r2, [pc, #68]	; (800c5e8 <SEGGER_SYSVIEW_Init+0x80>)
 800c5a2:	490f      	ldr	r1, [pc, #60]	; (800c5e0 <SEGGER_SYSVIEW_Init+0x78>)
 800c5a4:	f7ff fd6e 	bl	800c084 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c5a8:	4b0e      	ldr	r3, [pc, #56]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c5ae:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <SEGGER_SYSVIEW_Init+0x84>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a0c      	ldr	r2, [pc, #48]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c5b4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c5b6:	4a0b      	ldr	r2, [pc, #44]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c5bc:	4a09      	ldr	r2, [pc, #36]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c5c2:	4a08      	ldr	r2, [pc, #32]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c5c8:	4a06      	ldr	r2, [pc, #24]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c5ce:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c5d4:	bf00      	nop
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20004034 	.word	0x20004034
 800c5e0:	08013dcc 	.word	0x08013dcc
 800c5e4:	2000443c 	.word	0x2000443c
 800c5e8:	20004434 	.word	0x20004434
 800c5ec:	e0001004 	.word	0xe0001004

0800c5f0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c5f8:	4a04      	ldr	r2, [pc, #16]	; (800c60c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6113      	str	r3, [r2, #16]
}
 800c5fe:	bf00      	nop
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	2000443c 	.word	0x2000443c

0800c610 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c618:	f3ef 8311 	mrs	r3, BASEPRI
 800c61c:	f04f 0120 	mov.w	r1, #32
 800c620:	f381 8811 	msr	BASEPRI, r1
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	4808      	ldr	r0, [pc, #32]	; (800c648 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c628:	f7ff fdc8 	bl	800c1bc <_PreparePacket>
 800c62c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	68b9      	ldr	r1, [r7, #8]
 800c632:	68b8      	ldr	r0, [r7, #8]
 800c634:	f7ff feb2 	bl	800c39c <_SendPacket>
  RECORD_END();
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f383 8811 	msr	BASEPRI, r3
}
 800c63e:	bf00      	nop
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	2000446c 	.word	0x2000446c

0800c64c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c656:	f3ef 8311 	mrs	r3, BASEPRI
 800c65a:	f04f 0120 	mov.w	r1, #32
 800c65e:	f381 8811 	msr	BASEPRI, r1
 800c662:	617b      	str	r3, [r7, #20]
 800c664:	4816      	ldr	r0, [pc, #88]	; (800c6c0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c666:	f7ff fda9 	bl	800c1bc <_PreparePacket>
 800c66a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	61fb      	str	r3, [r7, #28]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	61bb      	str	r3, [r7, #24]
 800c678:	e00b      	b.n	800c692 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	1c59      	adds	r1, r3, #1
 800c682:	61f9      	str	r1, [r7, #28]
 800c684:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c688:	b2d2      	uxtb	r2, r2
 800c68a:	701a      	strb	r2, [r3, #0]
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	09db      	lsrs	r3, r3, #7
 800c690:	61bb      	str	r3, [r7, #24]
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	2b7f      	cmp	r3, #127	; 0x7f
 800c696:	d8f0      	bhi.n	800c67a <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	61fa      	str	r2, [r7, #28]
 800c69e:	69ba      	ldr	r2, [r7, #24]
 800c6a0:	b2d2      	uxtb	r2, r2
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	68f9      	ldr	r1, [r7, #12]
 800c6ac:	6938      	ldr	r0, [r7, #16]
 800c6ae:	f7ff fe75 	bl	800c39c <_SendPacket>
  RECORD_END();
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f383 8811 	msr	BASEPRI, r3
}
 800c6b8:	bf00      	nop
 800c6ba:	3720      	adds	r7, #32
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	2000446c 	.word	0x2000446c

0800c6c4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08c      	sub	sp, #48	; 0x30
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c6d0:	f3ef 8311 	mrs	r3, BASEPRI
 800c6d4:	f04f 0120 	mov.w	r1, #32
 800c6d8:	f381 8811 	msr	BASEPRI, r1
 800c6dc:	61fb      	str	r3, [r7, #28]
 800c6de:	4825      	ldr	r0, [pc, #148]	; (800c774 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c6e0:	f7ff fd6c 	bl	800c1bc <_PreparePacket>
 800c6e4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6f2:	e00b      	b.n	800c70c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	1c59      	adds	r1, r3, #1
 800c6fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c6fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	09db      	lsrs	r3, r3, #7
 800c70a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70e:	2b7f      	cmp	r3, #127	; 0x7f
 800c710:	d8f0      	bhi.n	800c6f4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	1c5a      	adds	r2, r3, #1
 800c716:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71a:	b2d2      	uxtb	r2, r2
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c720:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	627b      	str	r3, [r7, #36]	; 0x24
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	623b      	str	r3, [r7, #32]
 800c72a:	e00b      	b.n	800c744 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c72c:	6a3b      	ldr	r3, [r7, #32]
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	1c59      	adds	r1, r3, #1
 800c734:	6279      	str	r1, [r7, #36]	; 0x24
 800c736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c73a:	b2d2      	uxtb	r2, r2
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	09db      	lsrs	r3, r3, #7
 800c742:	623b      	str	r3, [r7, #32]
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	2b7f      	cmp	r3, #127	; 0x7f
 800c748:	d8f0      	bhi.n	800c72c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	627a      	str	r2, [r7, #36]	; 0x24
 800c750:	6a3a      	ldr	r2, [r7, #32]
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c758:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	6979      	ldr	r1, [r7, #20]
 800c75e:	69b8      	ldr	r0, [r7, #24]
 800c760:	f7ff fe1c 	bl	800c39c <_SendPacket>
  RECORD_END();
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	f383 8811 	msr	BASEPRI, r3
}
 800c76a:	bf00      	nop
 800c76c:	3730      	adds	r7, #48	; 0x30
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	2000446c 	.word	0x2000446c

0800c778 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08e      	sub	sp, #56	; 0x38
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c786:	f3ef 8311 	mrs	r3, BASEPRI
 800c78a:	f04f 0120 	mov.w	r1, #32
 800c78e:	f381 8811 	msr	BASEPRI, r1
 800c792:	61fb      	str	r3, [r7, #28]
 800c794:	4832      	ldr	r0, [pc, #200]	; (800c860 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c796:	f7ff fd11 	bl	800c1bc <_PreparePacket>
 800c79a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7a8:	e00b      	b.n	800c7c2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b0:	1c59      	adds	r1, r3, #1
 800c7b2:	6379      	str	r1, [r7, #52]	; 0x34
 800c7b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7b8:	b2d2      	uxtb	r2, r2
 800c7ba:	701a      	strb	r2, [r3, #0]
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	09db      	lsrs	r3, r3, #7
 800c7c0:	633b      	str	r3, [r7, #48]	; 0x30
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c7c6:	d8f0      	bhi.n	800c7aa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	637a      	str	r2, [r7, #52]	; 0x34
 800c7ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7e0:	e00b      	b.n	800c7fa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	1c59      	adds	r1, r3, #1
 800c7ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c7ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7f0:	b2d2      	uxtb	r2, r2
 800c7f2:	701a      	strb	r2, [r3, #0]
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	09db      	lsrs	r3, r3, #7
 800c7f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c7fe:	d8f0      	bhi.n	800c7e2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c808:	b2d2      	uxtb	r2, r2
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	627b      	str	r3, [r7, #36]	; 0x24
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	623b      	str	r3, [r7, #32]
 800c818:	e00b      	b.n	800c832 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c81a:	6a3b      	ldr	r3, [r7, #32]
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	1c59      	adds	r1, r3, #1
 800c822:	6279      	str	r1, [r7, #36]	; 0x24
 800c824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c828:	b2d2      	uxtb	r2, r2
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	6a3b      	ldr	r3, [r7, #32]
 800c82e:	09db      	lsrs	r3, r3, #7
 800c830:	623b      	str	r3, [r7, #32]
 800c832:	6a3b      	ldr	r3, [r7, #32]
 800c834:	2b7f      	cmp	r3, #127	; 0x7f
 800c836:	d8f0      	bhi.n	800c81a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	627a      	str	r2, [r7, #36]	; 0x24
 800c83e:	6a3a      	ldr	r2, [r7, #32]
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	6979      	ldr	r1, [r7, #20]
 800c84c:	69b8      	ldr	r0, [r7, #24]
 800c84e:	f7ff fda5 	bl	800c39c <_SendPacket>
  RECORD_END();
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	f383 8811 	msr	BASEPRI, r3
}
 800c858:	bf00      	nop
 800c85a:	3738      	adds	r7, #56	; 0x38
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	2000446c 	.word	0x2000446c

0800c864 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c864:	b580      	push	{r7, lr}
 800c866:	b090      	sub	sp, #64	; 0x40
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c872:	f3ef 8311 	mrs	r3, BASEPRI
 800c876:	f04f 0120 	mov.w	r1, #32
 800c87a:	f381 8811 	msr	BASEPRI, r1
 800c87e:	61fb      	str	r3, [r7, #28]
 800c880:	4840      	ldr	r0, [pc, #256]	; (800c984 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c882:	f7ff fc9b 	bl	800c1bc <_PreparePacket>
 800c886:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	63bb      	str	r3, [r7, #56]	; 0x38
 800c894:	e00b      	b.n	800c8ae <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89c:	1c59      	adds	r1, r3, #1
 800c89e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c8a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8a4:	b2d2      	uxtb	r2, r2
 800c8a6:	701a      	strb	r2, [r3, #0]
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	09db      	lsrs	r3, r3, #7
 800c8ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	2b7f      	cmp	r3, #127	; 0x7f
 800c8b2:	d8f0      	bhi.n	800c896 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c8ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8bc:	b2d2      	uxtb	r2, r2
 800c8be:	701a      	strb	r2, [r3, #0]
 800c8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	633b      	str	r3, [r7, #48]	; 0x30
 800c8cc:	e00b      	b.n	800c8e6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d4:	1c59      	adds	r1, r3, #1
 800c8d6:	6379      	str	r1, [r7, #52]	; 0x34
 800c8d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8dc:	b2d2      	uxtb	r2, r2
 800c8de:	701a      	strb	r2, [r3, #0]
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	09db      	lsrs	r3, r3, #7
 800c8e4:	633b      	str	r3, [r7, #48]	; 0x30
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	2b7f      	cmp	r3, #127	; 0x7f
 800c8ea:	d8f0      	bhi.n	800c8ce <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	637a      	str	r2, [r7, #52]	; 0x34
 800c8f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8f4:	b2d2      	uxtb	r2, r2
 800c8f6:	701a      	strb	r2, [r3, #0]
 800c8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28
 800c904:	e00b      	b.n	800c91e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90c:	1c59      	adds	r1, r3, #1
 800c90e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c914:	b2d2      	uxtb	r2, r2
 800c916:	701a      	strb	r2, [r3, #0]
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	09db      	lsrs	r3, r3, #7
 800c91c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c920:	2b7f      	cmp	r3, #127	; 0x7f
 800c922:	d8f0      	bhi.n	800c906 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c92c:	b2d2      	uxtb	r2, r2
 800c92e:	701a      	strb	r2, [r3, #0]
 800c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c932:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
 800c938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93a:	623b      	str	r3, [r7, #32]
 800c93c:	e00b      	b.n	800c956 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	b2da      	uxtb	r2, r3
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	1c59      	adds	r1, r3, #1
 800c946:	6279      	str	r1, [r7, #36]	; 0x24
 800c948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c94c:	b2d2      	uxtb	r2, r2
 800c94e:	701a      	strb	r2, [r3, #0]
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	09db      	lsrs	r3, r3, #7
 800c954:	623b      	str	r3, [r7, #32]
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	2b7f      	cmp	r3, #127	; 0x7f
 800c95a:	d8f0      	bhi.n	800c93e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	627a      	str	r2, [r7, #36]	; 0x24
 800c962:	6a3a      	ldr	r2, [r7, #32]
 800c964:	b2d2      	uxtb	r2, r2
 800c966:	701a      	strb	r2, [r3, #0]
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	6979      	ldr	r1, [r7, #20]
 800c970:	69b8      	ldr	r0, [r7, #24]
 800c972:	f7ff fd13 	bl	800c39c <_SendPacket>
  RECORD_END();
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	f383 8811 	msr	BASEPRI, r3
}
 800c97c:	bf00      	nop
 800c97e:	3740      	adds	r7, #64	; 0x40
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	2000446c 	.word	0x2000446c

0800c988 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08c      	sub	sp, #48	; 0x30
 800c98c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c98e:	4b58      	ldr	r3, [pc, #352]	; (800caf0 <SEGGER_SYSVIEW_Start+0x168>)
 800c990:	2201      	movs	r2, #1
 800c992:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c994:	f3ef 8311 	mrs	r3, BASEPRI
 800c998:	f04f 0120 	mov.w	r1, #32
 800c99c:	f381 8811 	msr	BASEPRI, r1
 800c9a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c9a2:	4b53      	ldr	r3, [pc, #332]	; (800caf0 <SEGGER_SYSVIEW_Start+0x168>)
 800c9a4:	785b      	ldrb	r3, [r3, #1]
 800c9a6:	220a      	movs	r2, #10
 800c9a8:	4952      	ldr	r1, [pc, #328]	; (800caf4 <SEGGER_SYSVIEW_Start+0x16c>)
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7f3 fc20 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c9b6:	200a      	movs	r0, #10
 800c9b8:	f7ff fe2a 	bl	800c610 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c9bc:	f3ef 8311 	mrs	r3, BASEPRI
 800c9c0:	f04f 0120 	mov.w	r1, #32
 800c9c4:	f381 8811 	msr	BASEPRI, r1
 800c9c8:	60bb      	str	r3, [r7, #8]
 800c9ca:	484b      	ldr	r0, [pc, #300]	; (800caf8 <SEGGER_SYSVIEW_Start+0x170>)
 800c9cc:	f7ff fbf6 	bl	800c1bc <_PreparePacket>
 800c9d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9da:	4b45      	ldr	r3, [pc, #276]	; (800caf0 <SEGGER_SYSVIEW_Start+0x168>)
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9e0:	e00b      	b.n	800c9fa <SEGGER_SYSVIEW_Start+0x72>
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	1c59      	adds	r1, r3, #1
 800c9ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c9ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c9f0:	b2d2      	uxtb	r2, r2
 800c9f2:	701a      	strb	r2, [r3, #0]
 800c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f6:	09db      	lsrs	r3, r3, #7
 800c9f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c9fe:	d8f0      	bhi.n	800c9e2 <SEGGER_SYSVIEW_Start+0x5a>
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca08:	b2d2      	uxtb	r2, r2
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
 800ca14:	4b36      	ldr	r3, [pc, #216]	; (800caf0 <SEGGER_SYSVIEW_Start+0x168>)
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	623b      	str	r3, [r7, #32]
 800ca1a:	e00b      	b.n	800ca34 <SEGGER_SYSVIEW_Start+0xac>
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	1c59      	adds	r1, r3, #1
 800ca24:	6279      	str	r1, [r7, #36]	; 0x24
 800ca26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca2a:	b2d2      	uxtb	r2, r2
 800ca2c:	701a      	strb	r2, [r3, #0]
 800ca2e:	6a3b      	ldr	r3, [r7, #32]
 800ca30:	09db      	lsrs	r3, r3, #7
 800ca32:	623b      	str	r3, [r7, #32]
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	2b7f      	cmp	r3, #127	; 0x7f
 800ca38:	d8f0      	bhi.n	800ca1c <SEGGER_SYSVIEW_Start+0x94>
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	1c5a      	adds	r2, r3, #1
 800ca3e:	627a      	str	r2, [r7, #36]	; 0x24
 800ca40:	6a3a      	ldr	r2, [r7, #32]
 800ca42:	b2d2      	uxtb	r2, r2
 800ca44:	701a      	strb	r2, [r3, #0]
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	61fb      	str	r3, [r7, #28]
 800ca4e:	4b28      	ldr	r3, [pc, #160]	; (800caf0 <SEGGER_SYSVIEW_Start+0x168>)
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	61bb      	str	r3, [r7, #24]
 800ca54:	e00b      	b.n	800ca6e <SEGGER_SYSVIEW_Start+0xe6>
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	1c59      	adds	r1, r3, #1
 800ca5e:	61f9      	str	r1, [r7, #28]
 800ca60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	09db      	lsrs	r3, r3, #7
 800ca6c:	61bb      	str	r3, [r7, #24]
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2b7f      	cmp	r3, #127	; 0x7f
 800ca72:	d8f0      	bhi.n	800ca56 <SEGGER_SYSVIEW_Start+0xce>
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	1c5a      	adds	r2, r3, #1
 800ca78:	61fa      	str	r2, [r7, #28]
 800ca7a:	69ba      	ldr	r2, [r7, #24]
 800ca7c:	b2d2      	uxtb	r2, r2
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	2300      	movs	r3, #0
 800ca8a:	613b      	str	r3, [r7, #16]
 800ca8c:	e00b      	b.n	800caa6 <SEGGER_SYSVIEW_Start+0x11e>
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	1c59      	adds	r1, r3, #1
 800ca96:	6179      	str	r1, [r7, #20]
 800ca98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca9c:	b2d2      	uxtb	r2, r2
 800ca9e:	701a      	strb	r2, [r3, #0]
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	09db      	lsrs	r3, r3, #7
 800caa4:	613b      	str	r3, [r7, #16]
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2b7f      	cmp	r3, #127	; 0x7f
 800caaa:	d8f0      	bhi.n	800ca8e <SEGGER_SYSVIEW_Start+0x106>
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	617a      	str	r2, [r7, #20]
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	b2d2      	uxtb	r2, r2
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cabc:	2218      	movs	r2, #24
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f7ff fc6b 	bl	800c39c <_SendPacket>
      RECORD_END();
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cacc:	4b08      	ldr	r3, [pc, #32]	; (800caf0 <SEGGER_SYSVIEW_Start+0x168>)
 800cace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800cad4:	4b06      	ldr	r3, [pc, #24]	; (800caf0 <SEGGER_SYSVIEW_Start+0x168>)
 800cad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800cada:	f000 f9eb 	bl	800ceb4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800cade:	f000 f9b1 	bl	800ce44 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800cae2:	f000 fc83 	bl	800d3ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800cae6:	bf00      	nop
 800cae8:	3730      	adds	r7, #48	; 0x30
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	2000443c 	.word	0x2000443c
 800caf4:	0801463c 	.word	0x0801463c
 800caf8:	2000446c 	.word	0x2000446c

0800cafc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cb02:	f3ef 8311 	mrs	r3, BASEPRI
 800cb06:	f04f 0120 	mov.w	r1, #32
 800cb0a:	f381 8811 	msr	BASEPRI, r1
 800cb0e:	607b      	str	r3, [r7, #4]
 800cb10:	480b      	ldr	r0, [pc, #44]	; (800cb40 <SEGGER_SYSVIEW_Stop+0x44>)
 800cb12:	f7ff fb53 	bl	800c1bc <_PreparePacket>
 800cb16:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800cb18:	4b0a      	ldr	r3, [pc, #40]	; (800cb44 <SEGGER_SYSVIEW_Stop+0x48>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d007      	beq.n	800cb30 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cb20:	220b      	movs	r2, #11
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6838      	ldr	r0, [r7, #0]
 800cb26:	f7ff fc39 	bl	800c39c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800cb2a:	4b06      	ldr	r3, [pc, #24]	; (800cb44 <SEGGER_SYSVIEW_Stop+0x48>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f383 8811 	msr	BASEPRI, r3
}
 800cb36:	bf00      	nop
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	2000446c 	.word	0x2000446c
 800cb44:	2000443c 	.word	0x2000443c

0800cb48 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	; 0x30
 800cb4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cb4e:	f3ef 8311 	mrs	r3, BASEPRI
 800cb52:	f04f 0120 	mov.w	r1, #32
 800cb56:	f381 8811 	msr	BASEPRI, r1
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	4845      	ldr	r0, [pc, #276]	; (800cc74 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800cb5e:	f7ff fb2d 	bl	800c1bc <_PreparePacket>
 800cb62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb6c:	4b42      	ldr	r3, [pc, #264]	; (800cc78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb72:	e00b      	b.n	800cb8c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	1c59      	adds	r1, r3, #1
 800cb7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cb7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb82:	b2d2      	uxtb	r2, r2
 800cb84:	701a      	strb	r2, [r3, #0]
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	09db      	lsrs	r3, r3, #7
 800cb8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8e:	2b7f      	cmp	r3, #127	; 0x7f
 800cb90:	d8f0      	bhi.n	800cb74 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
 800cba6:	4b34      	ldr	r3, [pc, #208]	; (800cc78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	623b      	str	r3, [r7, #32]
 800cbac:	e00b      	b.n	800cbc6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	1c59      	adds	r1, r3, #1
 800cbb6:	6279      	str	r1, [r7, #36]	; 0x24
 800cbb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbbc:	b2d2      	uxtb	r2, r2
 800cbbe:	701a      	strb	r2, [r3, #0]
 800cbc0:	6a3b      	ldr	r3, [r7, #32]
 800cbc2:	09db      	lsrs	r3, r3, #7
 800cbc4:	623b      	str	r3, [r7, #32]
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	2b7f      	cmp	r3, #127	; 0x7f
 800cbca:	d8f0      	bhi.n	800cbae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	627a      	str	r2, [r7, #36]	; 0x24
 800cbd2:	6a3a      	ldr	r2, [r7, #32]
 800cbd4:	b2d2      	uxtb	r2, r2
 800cbd6:	701a      	strb	r2, [r3, #0]
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	61fb      	str	r3, [r7, #28]
 800cbe0:	4b25      	ldr	r3, [pc, #148]	; (800cc78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cbe2:	691b      	ldr	r3, [r3, #16]
 800cbe4:	61bb      	str	r3, [r7, #24]
 800cbe6:	e00b      	b.n	800cc00 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	1c59      	adds	r1, r3, #1
 800cbf0:	61f9      	str	r1, [r7, #28]
 800cbf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbf6:	b2d2      	uxtb	r2, r2
 800cbf8:	701a      	strb	r2, [r3, #0]
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	09db      	lsrs	r3, r3, #7
 800cbfe:	61bb      	str	r3, [r7, #24]
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2b7f      	cmp	r3, #127	; 0x7f
 800cc04:	d8f0      	bhi.n	800cbe8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	61fa      	str	r2, [r7, #28]
 800cc0c:	69ba      	ldr	r2, [r7, #24]
 800cc0e:	b2d2      	uxtb	r2, r2
 800cc10:	701a      	strb	r2, [r3, #0]
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	613b      	str	r3, [r7, #16]
 800cc1e:	e00b      	b.n	800cc38 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	1c59      	adds	r1, r3, #1
 800cc28:	6179      	str	r1, [r7, #20]
 800cc2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc2e:	b2d2      	uxtb	r2, r2
 800cc30:	701a      	strb	r2, [r3, #0]
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	09db      	lsrs	r3, r3, #7
 800cc36:	613b      	str	r3, [r7, #16]
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc3c:	d8f0      	bhi.n	800cc20 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	617a      	str	r2, [r7, #20]
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cc4e:	2218      	movs	r2, #24
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	68b8      	ldr	r0, [r7, #8]
 800cc54:	f7ff fba2 	bl	800c39c <_SendPacket>
  RECORD_END();
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cc5e:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d002      	beq.n	800cc6c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800cc66:	4b04      	ldr	r3, [pc, #16]	; (800cc78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6a:	4798      	blx	r3
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	3730      	adds	r7, #48	; 0x30
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	2000446c 	.word	0x2000446c
 800cc78:	2000443c 	.word	0x2000443c

0800cc7c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b092      	sub	sp, #72	; 0x48
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800cc84:	f3ef 8311 	mrs	r3, BASEPRI
 800cc88:	f04f 0120 	mov.w	r1, #32
 800cc8c:	f381 8811 	msr	BASEPRI, r1
 800cc90:	617b      	str	r3, [r7, #20]
 800cc92:	486a      	ldr	r0, [pc, #424]	; (800ce3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800cc94:	f7ff fa92 	bl	800c1bc <_PreparePacket>
 800cc98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	647b      	str	r3, [r7, #68]	; 0x44
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	4b66      	ldr	r3, [pc, #408]	; (800ce40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	643b      	str	r3, [r7, #64]	; 0x40
 800ccae:	e00b      	b.n	800ccc8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800ccb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb6:	1c59      	adds	r1, r3, #1
 800ccb8:	6479      	str	r1, [r7, #68]	; 0x44
 800ccba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccbe:	b2d2      	uxtb	r2, r2
 800ccc0:	701a      	strb	r2, [r3, #0]
 800ccc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccc4:	09db      	lsrs	r3, r3, #7
 800ccc6:	643b      	str	r3, [r7, #64]	; 0x40
 800ccc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccca:	2b7f      	cmp	r3, #127	; 0x7f
 800cccc:	d8f0      	bhi.n	800ccb0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800ccce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	647a      	str	r2, [r7, #68]	; 0x44
 800ccd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccd6:	b2d2      	uxtb	r2, r2
 800ccd8:	701a      	strb	r2, [r3, #0]
 800ccda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cce8:	e00b      	b.n	800cd02 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf0:	1c59      	adds	r1, r3, #1
 800ccf2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ccf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccf8:	b2d2      	uxtb	r2, r2
 800ccfa:	701a      	strb	r2, [r3, #0]
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	09db      	lsrs	r3, r3, #7
 800cd00:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	2b7f      	cmp	r3, #127	; 0x7f
 800cd06:	d8f0      	bhi.n	800ccea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800cd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd10:	b2d2      	uxtb	r2, r2
 800cd12:	701a      	strb	r2, [r3, #0]
 800cd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd16:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	2220      	movs	r2, #32
 800cd1e:	4619      	mov	r1, r3
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f7ff f9fb 	bl	800c11c <_EncodeStr>
 800cd26:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800cd28:	2209      	movs	r2, #9
 800cd2a:	68f9      	ldr	r1, [r7, #12]
 800cd2c:	6938      	ldr	r0, [r7, #16]
 800cd2e:	f7ff fb35 	bl	800c39c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	637b      	str	r3, [r7, #52]	; 0x34
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	4b40      	ldr	r3, [pc, #256]	; (800ce40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	633b      	str	r3, [r7, #48]	; 0x30
 800cd46:	e00b      	b.n	800cd60 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	1c59      	adds	r1, r3, #1
 800cd50:	6379      	str	r1, [r7, #52]	; 0x34
 800cd52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd56:	b2d2      	uxtb	r2, r2
 800cd58:	701a      	strb	r2, [r3, #0]
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	09db      	lsrs	r3, r3, #7
 800cd5e:	633b      	str	r3, [r7, #48]	; 0x30
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	2b7f      	cmp	r3, #127	; 0x7f
 800cd64:	d8f0      	bhi.n	800cd48 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800cd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd68:	1c5a      	adds	r2, r3, #1
 800cd6a:	637a      	str	r2, [r7, #52]	; 0x34
 800cd6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd80:	e00b      	b.n	800cd9a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	1c59      	adds	r1, r3, #1
 800cd8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cd8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd90:	b2d2      	uxtb	r2, r2
 800cd92:	701a      	strb	r2, [r3, #0]
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	09db      	lsrs	r3, r3, #7
 800cd98:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9c:	2b7f      	cmp	r3, #127	; 0x7f
 800cd9e:	d8f0      	bhi.n	800cd82 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	1c5a      	adds	r2, r3, #1
 800cda4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cda6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cda8:	b2d2      	uxtb	r2, r2
 800cdaa:	701a      	strb	r2, [r3, #0]
 800cdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	627b      	str	r3, [r7, #36]	; 0x24
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	623b      	str	r3, [r7, #32]
 800cdba:	e00b      	b.n	800cdd4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800cdbc:	6a3b      	ldr	r3, [r7, #32]
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	1c59      	adds	r1, r3, #1
 800cdc4:	6279      	str	r1, [r7, #36]	; 0x24
 800cdc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	701a      	strb	r2, [r3, #0]
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	09db      	lsrs	r3, r3, #7
 800cdd2:	623b      	str	r3, [r7, #32]
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	2b7f      	cmp	r3, #127	; 0x7f
 800cdd8:	d8f0      	bhi.n	800cdbc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	1c5a      	adds	r2, r3, #1
 800cdde:	627a      	str	r2, [r7, #36]	; 0x24
 800cde0:	6a3a      	ldr	r2, [r7, #32]
 800cde2:	b2d2      	uxtb	r2, r2
 800cde4:	701a      	strb	r2, [r3, #0]
 800cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	61fb      	str	r3, [r7, #28]
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	e00b      	b.n	800ce0c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	1c59      	adds	r1, r3, #1
 800cdfc:	61f9      	str	r1, [r7, #28]
 800cdfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	09db      	lsrs	r3, r3, #7
 800ce0a:	61bb      	str	r3, [r7, #24]
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ce10:	d8f0      	bhi.n	800cdf4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	1c5a      	adds	r2, r3, #1
 800ce16:	61fa      	str	r2, [r7, #28]
 800ce18:	69ba      	ldr	r2, [r7, #24]
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	701a      	strb	r2, [r3, #0]
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800ce22:	2215      	movs	r2, #21
 800ce24:	68f9      	ldr	r1, [r7, #12]
 800ce26:	6938      	ldr	r0, [r7, #16]
 800ce28:	f7ff fab8 	bl	800c39c <_SendPacket>
  RECORD_END();
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f383 8811 	msr	BASEPRI, r3
}
 800ce32:	bf00      	nop
 800ce34:	3748      	adds	r7, #72	; 0x48
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	2000446c 	.word	0x2000446c
 800ce40:	2000443c 	.word	0x2000443c

0800ce44 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800ce48:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ce4a:	6a1b      	ldr	r3, [r3, #32]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d008      	beq.n	800ce62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800ce50:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800ce5a:	4b03      	ldr	r3, [pc, #12]	; (800ce68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ce5c:	6a1b      	ldr	r3, [r3, #32]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	4798      	blx	r3
  }
}
 800ce62:	bf00      	nop
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	2000443c 	.word	0x2000443c

0800ce6c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ce74:	f3ef 8311 	mrs	r3, BASEPRI
 800ce78:	f04f 0120 	mov.w	r1, #32
 800ce7c:	f381 8811 	msr	BASEPRI, r1
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	480b      	ldr	r0, [pc, #44]	; (800ceb0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800ce84:	f7ff f99a 	bl	800c1bc <_PreparePacket>
 800ce88:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ce8a:	2280      	movs	r2, #128	; 0x80
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	6938      	ldr	r0, [r7, #16]
 800ce90:	f7ff f944 	bl	800c11c <_EncodeStr>
 800ce94:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800ce96:	220e      	movs	r2, #14
 800ce98:	68f9      	ldr	r1, [r7, #12]
 800ce9a:	6938      	ldr	r0, [r7, #16]
 800ce9c:	f7ff fa7e 	bl	800c39c <_SendPacket>
  RECORD_END();
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	f383 8811 	msr	BASEPRI, r3
}
 800cea6:	bf00      	nop
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	2000446c 	.word	0x2000446c

0800ceb4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800ceba:	4b15      	ldr	r3, [pc, #84]	; (800cf10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d01a      	beq.n	800cef8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800cec2:	4b13      	ldr	r3, [pc, #76]	; (800cf10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d015      	beq.n	800cef8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800cecc:	4b10      	ldr	r3, [pc, #64]	; (800cf10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cece:	6a1b      	ldr	r3, [r3, #32]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4798      	blx	r3
 800ced4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800ced8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800ceda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cede:	f04f 0200 	mov.w	r2, #0
 800cee2:	f04f 0300 	mov.w	r3, #0
 800cee6:	000a      	movs	r2, r1
 800cee8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800ceea:	4613      	mov	r3, r2
 800ceec:	461a      	mov	r2, r3
 800ceee:	4621      	mov	r1, r4
 800cef0:	200d      	movs	r0, #13
 800cef2:	f7ff fbe7 	bl	800c6c4 <SEGGER_SYSVIEW_RecordU32x2>
 800cef6:	e006      	b.n	800cf06 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4619      	mov	r1, r3
 800cefe:	200c      	movs	r0, #12
 800cf00:	f7ff fba4 	bl	800c64c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	370c      	adds	r7, #12
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd90      	pop	{r4, r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	2000443c 	.word	0x2000443c
 800cf14:	e0001004 	.word	0xe0001004

0800cf18 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cf1e:	f3ef 8311 	mrs	r3, BASEPRI
 800cf22:	f04f 0120 	mov.w	r1, #32
 800cf26:	f381 8811 	msr	BASEPRI, r1
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	4819      	ldr	r0, [pc, #100]	; (800cf94 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800cf2e:	f7ff f945 	bl	800c1bc <_PreparePacket>
 800cf32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800cf38:	4b17      	ldr	r3, [pc, #92]	; (800cf98 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf40:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	613b      	str	r3, [r7, #16]
 800cf4a:	e00b      	b.n	800cf64 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	1c59      	adds	r1, r3, #1
 800cf54:	6179      	str	r1, [r7, #20]
 800cf56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	09db      	lsrs	r3, r3, #7
 800cf62:	613b      	str	r3, [r7, #16]
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	2b7f      	cmp	r3, #127	; 0x7f
 800cf68:	d8f0      	bhi.n	800cf4c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	617a      	str	r2, [r7, #20]
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	b2d2      	uxtb	r2, r2
 800cf74:	701a      	strb	r2, [r3, #0]
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	68b8      	ldr	r0, [r7, #8]
 800cf80:	f7ff fa0c 	bl	800c39c <_SendPacket>
  RECORD_END();
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f383 8811 	msr	BASEPRI, r3
}
 800cf8a:	bf00      	nop
 800cf8c:	3718      	adds	r7, #24
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	2000446c 	.word	0x2000446c
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cfa2:	f3ef 8311 	mrs	r3, BASEPRI
 800cfa6:	f04f 0120 	mov.w	r1, #32
 800cfaa:	f381 8811 	msr	BASEPRI, r1
 800cfae:	607b      	str	r3, [r7, #4]
 800cfb0:	4807      	ldr	r0, [pc, #28]	; (800cfd0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800cfb2:	f7ff f903 	bl	800c1bc <_PreparePacket>
 800cfb6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800cfb8:	2203      	movs	r2, #3
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6838      	ldr	r0, [r7, #0]
 800cfbe:	f7ff f9ed 	bl	800c39c <_SendPacket>
  RECORD_END();
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f383 8811 	msr	BASEPRI, r3
}
 800cfc8:	bf00      	nop
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	2000446c 	.word	0x2000446c

0800cfd4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cfda:	f3ef 8311 	mrs	r3, BASEPRI
 800cfde:	f04f 0120 	mov.w	r1, #32
 800cfe2:	f381 8811 	msr	BASEPRI, r1
 800cfe6:	607b      	str	r3, [r7, #4]
 800cfe8:	4807      	ldr	r0, [pc, #28]	; (800d008 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800cfea:	f7ff f8e7 	bl	800c1bc <_PreparePacket>
 800cfee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800cff0:	2212      	movs	r2, #18
 800cff2:	6839      	ldr	r1, [r7, #0]
 800cff4:	6838      	ldr	r0, [r7, #0]
 800cff6:	f7ff f9d1 	bl	800c39c <_SendPacket>
  RECORD_END();
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f383 8811 	msr	BASEPRI, r3
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	2000446c 	.word	0x2000446c

0800d00c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d012:	f3ef 8311 	mrs	r3, BASEPRI
 800d016:	f04f 0120 	mov.w	r1, #32
 800d01a:	f381 8811 	msr	BASEPRI, r1
 800d01e:	607b      	str	r3, [r7, #4]
 800d020:	4807      	ldr	r0, [pc, #28]	; (800d040 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d022:	f7ff f8cb 	bl	800c1bc <_PreparePacket>
 800d026:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d028:	2211      	movs	r2, #17
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6838      	ldr	r0, [r7, #0]
 800d02e:	f7ff f9b5 	bl	800c39c <_SendPacket>
  RECORD_END();
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f383 8811 	msr	BASEPRI, r3
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	2000446c 	.word	0x2000446c

0800d044 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d04c:	f3ef 8311 	mrs	r3, BASEPRI
 800d050:	f04f 0120 	mov.w	r1, #32
 800d054:	f381 8811 	msr	BASEPRI, r1
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	4819      	ldr	r0, [pc, #100]	; (800d0c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d05c:	f7ff f8ae 	bl	800c1bc <_PreparePacket>
 800d060:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d066:	4b17      	ldr	r3, [pc, #92]	; (800d0c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	61fb      	str	r3, [r7, #28]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	61bb      	str	r3, [r7, #24]
 800d078:	e00b      	b.n	800d092 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	1c59      	adds	r1, r3, #1
 800d082:	61f9      	str	r1, [r7, #28]
 800d084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d088:	b2d2      	uxtb	r2, r2
 800d08a:	701a      	strb	r2, [r3, #0]
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	09db      	lsrs	r3, r3, #7
 800d090:	61bb      	str	r3, [r7, #24]
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	2b7f      	cmp	r3, #127	; 0x7f
 800d096:	d8f0      	bhi.n	800d07a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	61fa      	str	r2, [r7, #28]
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	b2d2      	uxtb	r2, r2
 800d0a2:	701a      	strb	r2, [r3, #0]
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d0a8:	2208      	movs	r2, #8
 800d0aa:	68f9      	ldr	r1, [r7, #12]
 800d0ac:	6938      	ldr	r0, [r7, #16]
 800d0ae:	f7ff f975 	bl	800c39c <_SendPacket>
  RECORD_END();
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f383 8811 	msr	BASEPRI, r3
}
 800d0b8:	bf00      	nop
 800d0ba:	3720      	adds	r7, #32
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	2000446c 	.word	0x2000446c
 800d0c4:	2000443c 	.word	0x2000443c

0800d0c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d0d0:	f3ef 8311 	mrs	r3, BASEPRI
 800d0d4:	f04f 0120 	mov.w	r1, #32
 800d0d8:	f381 8811 	msr	BASEPRI, r1
 800d0dc:	617b      	str	r3, [r7, #20]
 800d0de:	4819      	ldr	r0, [pc, #100]	; (800d144 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d0e0:	f7ff f86c 	bl	800c1bc <_PreparePacket>
 800d0e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d0ea:	4b17      	ldr	r3, [pc, #92]	; (800d148 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	61fb      	str	r3, [r7, #28]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	61bb      	str	r3, [r7, #24]
 800d0fc:	e00b      	b.n	800d116 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	b2da      	uxtb	r2, r3
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	1c59      	adds	r1, r3, #1
 800d106:	61f9      	str	r1, [r7, #28]
 800d108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d10c:	b2d2      	uxtb	r2, r2
 800d10e:	701a      	strb	r2, [r3, #0]
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	09db      	lsrs	r3, r3, #7
 800d114:	61bb      	str	r3, [r7, #24]
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	2b7f      	cmp	r3, #127	; 0x7f
 800d11a:	d8f0      	bhi.n	800d0fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	61fa      	str	r2, [r7, #28]
 800d122:	69ba      	ldr	r2, [r7, #24]
 800d124:	b2d2      	uxtb	r2, r2
 800d126:	701a      	strb	r2, [r3, #0]
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d12c:	2204      	movs	r2, #4
 800d12e:	68f9      	ldr	r1, [r7, #12]
 800d130:	6938      	ldr	r0, [r7, #16]
 800d132:	f7ff f933 	bl	800c39c <_SendPacket>
  RECORD_END();
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f383 8811 	msr	BASEPRI, r3
}
 800d13c:	bf00      	nop
 800d13e:	3720      	adds	r7, #32
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	2000446c 	.word	0x2000446c
 800d148:	2000443c 	.word	0x2000443c

0800d14c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d154:	f3ef 8311 	mrs	r3, BASEPRI
 800d158:	f04f 0120 	mov.w	r1, #32
 800d15c:	f381 8811 	msr	BASEPRI, r1
 800d160:	617b      	str	r3, [r7, #20]
 800d162:	4819      	ldr	r0, [pc, #100]	; (800d1c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d164:	f7ff f82a 	bl	800c1bc <_PreparePacket>
 800d168:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d16e:	4b17      	ldr	r3, [pc, #92]	; (800d1cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	1ad3      	subs	r3, r2, r3
 800d176:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	61fb      	str	r3, [r7, #28]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	61bb      	str	r3, [r7, #24]
 800d180:	e00b      	b.n	800d19a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	b2da      	uxtb	r2, r3
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	1c59      	adds	r1, r3, #1
 800d18a:	61f9      	str	r1, [r7, #28]
 800d18c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d190:	b2d2      	uxtb	r2, r2
 800d192:	701a      	strb	r2, [r3, #0]
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	09db      	lsrs	r3, r3, #7
 800d198:	61bb      	str	r3, [r7, #24]
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	2b7f      	cmp	r3, #127	; 0x7f
 800d19e:	d8f0      	bhi.n	800d182 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	61fa      	str	r2, [r7, #28]
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	b2d2      	uxtb	r2, r2
 800d1aa:	701a      	strb	r2, [r3, #0]
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d1b0:	2206      	movs	r2, #6
 800d1b2:	68f9      	ldr	r1, [r7, #12]
 800d1b4:	6938      	ldr	r0, [r7, #16]
 800d1b6:	f7ff f8f1 	bl	800c39c <_SendPacket>
  RECORD_END();
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f383 8811 	msr	BASEPRI, r3
}
 800d1c0:	bf00      	nop
 800d1c2:	3720      	adds	r7, #32
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	2000446c 	.word	0x2000446c
 800d1cc:	2000443c 	.word	0x2000443c

0800d1d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08a      	sub	sp, #40	; 0x28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d1da:	f3ef 8311 	mrs	r3, BASEPRI
 800d1de:	f04f 0120 	mov.w	r1, #32
 800d1e2:	f381 8811 	msr	BASEPRI, r1
 800d1e6:	617b      	str	r3, [r7, #20]
 800d1e8:	4827      	ldr	r0, [pc, #156]	; (800d288 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d1ea:	f7fe ffe7 	bl	800c1bc <_PreparePacket>
 800d1ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d1f4:	4b25      	ldr	r3, [pc, #148]	; (800d28c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	627b      	str	r3, [r7, #36]	; 0x24
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	623b      	str	r3, [r7, #32]
 800d206:	e00b      	b.n	800d220 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	1c59      	adds	r1, r3, #1
 800d210:	6279      	str	r1, [r7, #36]	; 0x24
 800d212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d216:	b2d2      	uxtb	r2, r2
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	09db      	lsrs	r3, r3, #7
 800d21e:	623b      	str	r3, [r7, #32]
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	2b7f      	cmp	r3, #127	; 0x7f
 800d224:	d8f0      	bhi.n	800d208 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	1c5a      	adds	r2, r3, #1
 800d22a:	627a      	str	r2, [r7, #36]	; 0x24
 800d22c:	6a3a      	ldr	r2, [r7, #32]
 800d22e:	b2d2      	uxtb	r2, r2
 800d230:	701a      	strb	r2, [r3, #0]
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	61fb      	str	r3, [r7, #28]
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	e00b      	b.n	800d258 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	b2da      	uxtb	r2, r3
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	1c59      	adds	r1, r3, #1
 800d248:	61f9      	str	r1, [r7, #28]
 800d24a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d24e:	b2d2      	uxtb	r2, r2
 800d250:	701a      	strb	r2, [r3, #0]
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	09db      	lsrs	r3, r3, #7
 800d256:	61bb      	str	r3, [r7, #24]
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	2b7f      	cmp	r3, #127	; 0x7f
 800d25c:	d8f0      	bhi.n	800d240 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	61fa      	str	r2, [r7, #28]
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	b2d2      	uxtb	r2, r2
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d26e:	2207      	movs	r2, #7
 800d270:	68f9      	ldr	r1, [r7, #12]
 800d272:	6938      	ldr	r0, [r7, #16]
 800d274:	f7ff f892 	bl	800c39c <_SendPacket>
  RECORD_END();
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	f383 8811 	msr	BASEPRI, r3
}
 800d27e:	bf00      	nop
 800d280:	3728      	adds	r7, #40	; 0x28
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	2000446c 	.word	0x2000446c
 800d28c:	2000443c 	.word	0x2000443c

0800d290 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d298:	4b04      	ldr	r3, [pc, #16]	; (800d2ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	1ad3      	subs	r3, r2, r3
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	2000443c 	.word	0x2000443c

0800d2b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08c      	sub	sp, #48	; 0x30
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d2ba:	4b3b      	ldr	r3, [pc, #236]	; (800d3a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d06d      	beq.n	800d39e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d2c2:	4b39      	ldr	r3, [pc, #228]	; (800d3a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2cc:	e008      	b.n	800d2e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d007      	beq.n	800d2ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	3301      	adds	r3, #1
 800d2de:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d3f2      	bcc.n	800d2ce <SEGGER_SYSVIEW_SendModule+0x1e>
 800d2e8:	e000      	b.n	800d2ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d2ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d055      	beq.n	800d39e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d2f2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2f6:	f04f 0120 	mov.w	r1, #32
 800d2fa:	f381 8811 	msr	BASEPRI, r1
 800d2fe:	617b      	str	r3, [r7, #20]
 800d300:	482a      	ldr	r0, [pc, #168]	; (800d3ac <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d302:	f7fe ff5b 	bl	800c1bc <_PreparePacket>
 800d306:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	627b      	str	r3, [r7, #36]	; 0x24
 800d310:	79fb      	ldrb	r3, [r7, #7]
 800d312:	623b      	str	r3, [r7, #32]
 800d314:	e00b      	b.n	800d32e <SEGGER_SYSVIEW_SendModule+0x7e>
 800d316:	6a3b      	ldr	r3, [r7, #32]
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	1c59      	adds	r1, r3, #1
 800d31e:	6279      	str	r1, [r7, #36]	; 0x24
 800d320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	701a      	strb	r2, [r3, #0]
 800d328:	6a3b      	ldr	r3, [r7, #32]
 800d32a:	09db      	lsrs	r3, r3, #7
 800d32c:	623b      	str	r3, [r7, #32]
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	2b7f      	cmp	r3, #127	; 0x7f
 800d332:	d8f0      	bhi.n	800d316 <SEGGER_SYSVIEW_SendModule+0x66>
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	627a      	str	r2, [r7, #36]	; 0x24
 800d33a:	6a3a      	ldr	r2, [r7, #32]
 800d33c:	b2d2      	uxtb	r2, r2
 800d33e:	701a      	strb	r2, [r3, #0]
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	61fb      	str	r3, [r7, #28]
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	61bb      	str	r3, [r7, #24]
 800d34e:	e00b      	b.n	800d368 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	b2da      	uxtb	r2, r3
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	1c59      	adds	r1, r3, #1
 800d358:	61f9      	str	r1, [r7, #28]
 800d35a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d35e:	b2d2      	uxtb	r2, r2
 800d360:	701a      	strb	r2, [r3, #0]
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	09db      	lsrs	r3, r3, #7
 800d366:	61bb      	str	r3, [r7, #24]
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	2b7f      	cmp	r3, #127	; 0x7f
 800d36c:	d8f0      	bhi.n	800d350 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	1c5a      	adds	r2, r3, #1
 800d372:	61fa      	str	r2, [r7, #28]
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	b2d2      	uxtb	r2, r2
 800d378:	701a      	strb	r2, [r3, #0]
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2280      	movs	r2, #128	; 0x80
 800d384:	4619      	mov	r1, r3
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f7fe fec8 	bl	800c11c <_EncodeStr>
 800d38c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d38e:	2216      	movs	r2, #22
 800d390:	68f9      	ldr	r1, [r7, #12]
 800d392:	6938      	ldr	r0, [r7, #16]
 800d394:	f7ff f802 	bl	800c39c <_SendPacket>
      RECORD_END();
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d39e:	bf00      	nop
 800d3a0:	3730      	adds	r7, #48	; 0x30
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20004464 	.word	0x20004464
 800d3ac:	2000446c 	.word	0x2000446c

0800d3b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00f      	beq.n	800d3de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d3be:	4b0a      	ldr	r3, [pc, #40]	; (800d3e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1f2      	bne.n	800d3c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d3de:	bf00      	nop
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	20004464 	.word	0x20004464

0800d3ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d3f2:	f3ef 8311 	mrs	r3, BASEPRI
 800d3f6:	f04f 0120 	mov.w	r1, #32
 800d3fa:	f381 8811 	msr	BASEPRI, r1
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	4817      	ldr	r0, [pc, #92]	; (800d460 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d402:	f7fe fedb 	bl	800c1bc <_PreparePacket>
 800d406:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	617b      	str	r3, [r7, #20]
 800d410:	4b14      	ldr	r3, [pc, #80]	; (800d464 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	613b      	str	r3, [r7, #16]
 800d416:	e00b      	b.n	800d430 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	1c59      	adds	r1, r3, #1
 800d420:	6179      	str	r1, [r7, #20]
 800d422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d426:	b2d2      	uxtb	r2, r2
 800d428:	701a      	strb	r2, [r3, #0]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	09db      	lsrs	r3, r3, #7
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2b7f      	cmp	r3, #127	; 0x7f
 800d434:	d8f0      	bhi.n	800d418 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	617a      	str	r2, [r7, #20]
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	b2d2      	uxtb	r2, r2
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d446:	221b      	movs	r2, #27
 800d448:	6879      	ldr	r1, [r7, #4]
 800d44a:	68b8      	ldr	r0, [r7, #8]
 800d44c:	f7fe ffa6 	bl	800c39c <_SendPacket>
  RECORD_END();
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f383 8811 	msr	BASEPRI, r3
}
 800d456:	bf00      	nop
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	2000446c 	.word	0x2000446c
 800d464:	20004468 	.word	0x20004468

0800d468 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	; 0x28
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d470:	f3ef 8311 	mrs	r3, BASEPRI
 800d474:	f04f 0120 	mov.w	r1, #32
 800d478:	f381 8811 	msr	BASEPRI, r1
 800d47c:	617b      	str	r3, [r7, #20]
 800d47e:	4827      	ldr	r0, [pc, #156]	; (800d51c <SEGGER_SYSVIEW_Warn+0xb4>)
 800d480:	f7fe fe9c 	bl	800c1bc <_PreparePacket>
 800d484:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d486:	2280      	movs	r2, #128	; 0x80
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	6938      	ldr	r0, [r7, #16]
 800d48c:	f7fe fe46 	bl	800c11c <_EncodeStr>
 800d490:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
 800d496:	2301      	movs	r3, #1
 800d498:	623b      	str	r3, [r7, #32]
 800d49a:	e00b      	b.n	800d4b4 <SEGGER_SYSVIEW_Warn+0x4c>
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	1c59      	adds	r1, r3, #1
 800d4a4:	6279      	str	r1, [r7, #36]	; 0x24
 800d4a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4aa:	b2d2      	uxtb	r2, r2
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	6a3b      	ldr	r3, [r7, #32]
 800d4b0:	09db      	lsrs	r3, r3, #7
 800d4b2:	623b      	str	r3, [r7, #32]
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d4b8:	d8f0      	bhi.n	800d49c <SEGGER_SYSVIEW_Warn+0x34>
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	627a      	str	r2, [r7, #36]	; 0x24
 800d4c0:	6a3a      	ldr	r2, [r7, #32]
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	61fb      	str	r3, [r7, #28]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	61bb      	str	r3, [r7, #24]
 800d4d2:	e00b      	b.n	800d4ec <SEGGER_SYSVIEW_Warn+0x84>
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	1c59      	adds	r1, r3, #1
 800d4dc:	61f9      	str	r1, [r7, #28]
 800d4de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4e2:	b2d2      	uxtb	r2, r2
 800d4e4:	701a      	strb	r2, [r3, #0]
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	09db      	lsrs	r3, r3, #7
 800d4ea:	61bb      	str	r3, [r7, #24]
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	2b7f      	cmp	r3, #127	; 0x7f
 800d4f0:	d8f0      	bhi.n	800d4d4 <SEGGER_SYSVIEW_Warn+0x6c>
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	61fa      	str	r2, [r7, #28]
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	b2d2      	uxtb	r2, r2
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d502:	221a      	movs	r2, #26
 800d504:	68f9      	ldr	r1, [r7, #12]
 800d506:	6938      	ldr	r0, [r7, #16]
 800d508:	f7fe ff48 	bl	800c39c <_SendPacket>
  RECORD_END();
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f383 8811 	msr	BASEPRI, r3
}
 800d512:	bf00      	nop
 800d514:	3728      	adds	r7, #40	; 0x28
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	2000446c 	.word	0x2000446c

0800d520 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800d520:	b580      	push	{r7, lr}
 800d522:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800d524:	4803      	ldr	r0, [pc, #12]	; (800d534 <_cbSendSystemDesc+0x14>)
 800d526:	f7ff fca1 	bl	800ce6c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800d52a:	4803      	ldr	r0, [pc, #12]	; (800d538 <_cbSendSystemDesc+0x18>)
 800d52c:	f7ff fc9e 	bl	800ce6c <SEGGER_SYSVIEW_SendSysDesc>
}
 800d530:	bf00      	nop
 800d532:	bd80      	pop	{r7, pc}
 800d534:	08013dd4 	.word	0x08013dd4
 800d538:	08013e08 	.word	0x08013e08

0800d53c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800d540:	4b06      	ldr	r3, [pc, #24]	; (800d55c <SEGGER_SYSVIEW_Conf+0x20>)
 800d542:	6818      	ldr	r0, [r3, #0]
 800d544:	4b05      	ldr	r3, [pc, #20]	; (800d55c <SEGGER_SYSVIEW_Conf+0x20>)
 800d546:	6819      	ldr	r1, [r3, #0]
 800d548:	4b05      	ldr	r3, [pc, #20]	; (800d560 <SEGGER_SYSVIEW_Conf+0x24>)
 800d54a:	4a06      	ldr	r2, [pc, #24]	; (800d564 <SEGGER_SYSVIEW_Conf+0x28>)
 800d54c:	f7ff f80c 	bl	800c568 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800d550:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d554:	f7ff f84c 	bl	800c5f0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800d558:	bf00      	nop
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20000014 	.word	0x20000014
 800d560:	0800d521 	.word	0x0800d521
 800d564:	08014648 	.word	0x08014648

0800d568 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800d568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800d56e:	2300      	movs	r3, #0
 800d570:	607b      	str	r3, [r7, #4]
 800d572:	e048      	b.n	800d606 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800d574:	4929      	ldr	r1, [pc, #164]	; (800d61c <_cbSendTaskList+0xb4>)
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	440b      	add	r3, r1
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4618      	mov	r0, r3
 800d586:	f7fd fcc5 	bl	800af14 <uxTaskGetStackHighWaterMark>
 800d58a:	4601      	mov	r1, r0
 800d58c:	4823      	ldr	r0, [pc, #140]	; (800d61c <_cbSendTaskList+0xb4>)
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	4613      	mov	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4403      	add	r3, r0
 800d59a:	3310      	adds	r3, #16
 800d59c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800d59e:	491f      	ldr	r1, [pc, #124]	; (800d61c <_cbSendTaskList+0xb4>)
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	440b      	add	r3, r1
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	491b      	ldr	r1, [pc, #108]	; (800d61c <_cbSendTaskList+0xb4>)
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	440b      	add	r3, r1
 800d5bc:	3304      	adds	r3, #4
 800d5be:	6819      	ldr	r1, [r3, #0]
 800d5c0:	4c16      	ldr	r4, [pc, #88]	; (800d61c <_cbSendTaskList+0xb4>)
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	4413      	add	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4423      	add	r3, r4
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	681c      	ldr	r4, [r3, #0]
 800d5d2:	4d12      	ldr	r5, [pc, #72]	; (800d61c <_cbSendTaskList+0xb4>)
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	442b      	add	r3, r5
 800d5e0:	330c      	adds	r3, #12
 800d5e2:	681d      	ldr	r5, [r3, #0]
 800d5e4:	4e0d      	ldr	r6, [pc, #52]	; (800d61c <_cbSendTaskList+0xb4>)
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4433      	add	r3, r6
 800d5f2:	3310      	adds	r3, #16
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	462b      	mov	r3, r5
 800d5fa:	4622      	mov	r2, r4
 800d5fc:	f000 f97a 	bl	800d8f4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3301      	adds	r3, #1
 800d604:	607b      	str	r3, [r7, #4]
 800d606:	4b06      	ldr	r3, [pc, #24]	; (800d620 <_cbSendTaskList+0xb8>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d3b1      	bcc.n	800d574 <_cbSendTaskList+0xc>
  }
}
 800d610:	bf00      	nop
 800d612:	bf00      	nop
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20004550 	.word	0x20004550
 800d620:	200045f0 	.word	0x200045f0

0800d624 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800d624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d628:	b082      	sub	sp, #8
 800d62a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800d62c:	f7fd f92c 	bl	800a888 <xTaskGetTickCountFromISR>
 800d630:	4603      	mov	r3, r0
 800d632:	2200      	movs	r2, #0
 800d634:	469a      	mov	sl, r3
 800d636:	4693      	mov	fp, r2
 800d638:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800d63c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d640:	4602      	mov	r2, r0
 800d642:	460b      	mov	r3, r1
 800d644:	f04f 0a00 	mov.w	sl, #0
 800d648:	f04f 0b00 	mov.w	fp, #0
 800d64c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800d650:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800d654:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800d658:	4652      	mov	r2, sl
 800d65a:	465b      	mov	r3, fp
 800d65c:	1a14      	subs	r4, r2, r0
 800d65e:	eb63 0501 	sbc.w	r5, r3, r1
 800d662:	f04f 0200 	mov.w	r2, #0
 800d666:	f04f 0300 	mov.w	r3, #0
 800d66a:	00ab      	lsls	r3, r5, #2
 800d66c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d670:	00a2      	lsls	r2, r4, #2
 800d672:	4614      	mov	r4, r2
 800d674:	461d      	mov	r5, r3
 800d676:	eb14 0800 	adds.w	r8, r4, r0
 800d67a:	eb45 0901 	adc.w	r9, r5, r1
 800d67e:	f04f 0200 	mov.w	r2, #0
 800d682:	f04f 0300 	mov.w	r3, #0
 800d686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d68a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d68e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d692:	4690      	mov	r8, r2
 800d694:	4699      	mov	r9, r3
 800d696:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800d69a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800d69e:	4610      	mov	r0, r2
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d6ac <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800d6ba:	2205      	movs	r2, #5
 800d6bc:	492b      	ldr	r1, [pc, #172]	; (800d76c <SYSVIEW_AddTask+0xc0>)
 800d6be:	68b8      	ldr	r0, [r7, #8]
 800d6c0:	f005 fe48 	bl	8013354 <memcmp>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d04b      	beq.n	800d762 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800d6ca:	4b29      	ldr	r3, [pc, #164]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b07      	cmp	r3, #7
 800d6d0:	d903      	bls.n	800d6da <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800d6d2:	4828      	ldr	r0, [pc, #160]	; (800d774 <SYSVIEW_AddTask+0xc8>)
 800d6d4:	f7ff fec8 	bl	800d468 <SEGGER_SYSVIEW_Warn>
    return;
 800d6d8:	e044      	b.n	800d764 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800d6da:	4b25      	ldr	r3, [pc, #148]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	4926      	ldr	r1, [pc, #152]	; (800d778 <SYSVIEW_AddTask+0xcc>)
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	4413      	add	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	440b      	add	r3, r1
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800d6ee:	4b20      	ldr	r3, [pc, #128]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	4921      	ldr	r1, [pc, #132]	; (800d778 <SYSVIEW_AddTask+0xcc>)
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4413      	add	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	440b      	add	r3, r1
 800d6fe:	3304      	adds	r3, #4
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800d704:	4b1a      	ldr	r3, [pc, #104]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	491b      	ldr	r1, [pc, #108]	; (800d778 <SYSVIEW_AddTask+0xcc>)
 800d70a:	4613      	mov	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	440b      	add	r3, r1
 800d714:	3308      	adds	r3, #8
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800d71a:	4b15      	ldr	r3, [pc, #84]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	4916      	ldr	r1, [pc, #88]	; (800d778 <SYSVIEW_AddTask+0xcc>)
 800d720:	4613      	mov	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	440b      	add	r3, r1
 800d72a:	330c      	adds	r3, #12
 800d72c:	683a      	ldr	r2, [r7, #0]
 800d72e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800d730:	4b0f      	ldr	r3, [pc, #60]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	4910      	ldr	r1, [pc, #64]	; (800d778 <SYSVIEW_AddTask+0xcc>)
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	440b      	add	r3, r1
 800d740:	3310      	adds	r3, #16
 800d742:	69ba      	ldr	r2, [r7, #24]
 800d744:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800d746:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3301      	adds	r3, #1
 800d74c:	4a08      	ldr	r2, [pc, #32]	; (800d770 <SYSVIEW_AddTask+0xc4>)
 800d74e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f000 f8ca 	bl	800d8f4 <SYSVIEW_SendTaskInfo>
 800d760:	e000      	b.n	800d764 <SYSVIEW_AddTask+0xb8>
    return;
 800d762:	bf00      	nop

}
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	08013e18 	.word	0x08013e18
 800d770:	200045f0 	.word	0x200045f0
 800d774:	08013e20 	.word	0x08013e20
 800d778:	20004550 	.word	0x20004550

0800d77c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800d784:	4b59      	ldr	r3, [pc, #356]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 80ab 	beq.w	800d8e4 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800d78e:	2300      	movs	r3, #0
 800d790:	60fb      	str	r3, [r7, #12]
 800d792:	e00d      	b.n	800d7b0 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800d794:	4956      	ldr	r1, [pc, #344]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	440b      	add	r3, r1
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d008      	beq.n	800d7bc <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	60fb      	str	r3, [r7, #12]
 800d7b0:	4b4e      	ldr	r3, [pc, #312]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d3ec      	bcc.n	800d794 <SYSVIEW_DeleteTask+0x18>
 800d7ba:	e000      	b.n	800d7be <SYSVIEW_DeleteTask+0x42>
      break;
 800d7bc:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800d7be:	4b4b      	ldr	r3, [pc, #300]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d111      	bne.n	800d7ee <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	4a46      	ldr	r2, [pc, #280]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d7d6:	4413      	add	r3, r2
 800d7d8:	2214      	movs	r2, #20
 800d7da:	2100      	movs	r1, #0
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f005 fdd7 	bl	8013390 <memset>
    _NumTasks--;
 800d7e2:	4b42      	ldr	r3, [pc, #264]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	4a40      	ldr	r2, [pc, #256]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d7ea:	6013      	str	r3, [r2, #0]
 800d7ec:	e07b      	b.n	800d8e6 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800d7ee:	4b3f      	ldr	r3, [pc, #252]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d276      	bcs.n	800d8e6 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800d7f8:	4b3c      	ldr	r3, [pc, #240]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	1e5a      	subs	r2, r3, #1
 800d7fe:	493c      	ldr	r1, [pc, #240]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d800:	4613      	mov	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	440b      	add	r3, r1
 800d80a:	6819      	ldr	r1, [r3, #0]
 800d80c:	4838      	ldr	r0, [pc, #224]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	4613      	mov	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4403      	add	r3, r0
 800d81a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800d81c:	4b33      	ldr	r3, [pc, #204]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	1e5a      	subs	r2, r3, #1
 800d822:	4933      	ldr	r1, [pc, #204]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	440b      	add	r3, r1
 800d82e:	3304      	adds	r3, #4
 800d830:	6819      	ldr	r1, [r3, #0]
 800d832:	482f      	ldr	r0, [pc, #188]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4613      	mov	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4413      	add	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4403      	add	r3, r0
 800d840:	3304      	adds	r3, #4
 800d842:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800d844:	4b29      	ldr	r3, [pc, #164]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	1e5a      	subs	r2, r3, #1
 800d84a:	4929      	ldr	r1, [pc, #164]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	440b      	add	r3, r1
 800d856:	3308      	adds	r3, #8
 800d858:	6819      	ldr	r1, [r3, #0]
 800d85a:	4825      	ldr	r0, [pc, #148]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	4613      	mov	r3, r2
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4413      	add	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4403      	add	r3, r0
 800d868:	3308      	adds	r3, #8
 800d86a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800d86c:	4b1f      	ldr	r3, [pc, #124]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	1e5a      	subs	r2, r3, #1
 800d872:	491f      	ldr	r1, [pc, #124]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d874:	4613      	mov	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	440b      	add	r3, r1
 800d87e:	330c      	adds	r3, #12
 800d880:	6819      	ldr	r1, [r3, #0]
 800d882:	481b      	ldr	r0, [pc, #108]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	4613      	mov	r3, r2
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	4413      	add	r3, r2
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4403      	add	r3, r0
 800d890:	330c      	adds	r3, #12
 800d892:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800d894:	4b15      	ldr	r3, [pc, #84]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	1e5a      	subs	r2, r3, #1
 800d89a:	4915      	ldr	r1, [pc, #84]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d89c:	4613      	mov	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	440b      	add	r3, r1
 800d8a6:	3310      	adds	r3, #16
 800d8a8:	6819      	ldr	r1, [r3, #0]
 800d8aa:	4811      	ldr	r0, [pc, #68]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	4413      	add	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4403      	add	r3, r0
 800d8b8:	3310      	adds	r3, #16
 800d8ba:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800d8bc:	4b0b      	ldr	r3, [pc, #44]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	1e5a      	subs	r2, r3, #1
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4413      	add	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4a09      	ldr	r2, [pc, #36]	; (800d8f0 <SYSVIEW_DeleteTask+0x174>)
 800d8cc:	4413      	add	r3, r2
 800d8ce:	2214      	movs	r2, #20
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f005 fd5c 	bl	8013390 <memset>
    _NumTasks--;
 800d8d8:	4b04      	ldr	r3, [pc, #16]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	4a03      	ldr	r2, [pc, #12]	; (800d8ec <SYSVIEW_DeleteTask+0x170>)
 800d8e0:	6013      	str	r3, [r2, #0]
 800d8e2:	e000      	b.n	800d8e6 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800d8e4:	bf00      	nop
  }
}
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	200045f0 	.word	0x200045f0
 800d8f0:	20004550 	.word	0x20004550

0800d8f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08a      	sub	sp, #40	; 0x28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800d902:	f107 0314 	add.w	r3, r7, #20
 800d906:	2214      	movs	r2, #20
 800d908:	2100      	movs	r1, #0
 800d90a:	4618      	mov	r0, r3
 800d90c:	f005 fd40 	bl	8013390 <memset>
  TaskInfo.TaskID     = TaskID;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800d924:	f107 0314 	add.w	r3, r7, #20
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff f9a7 	bl	800cc7c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800d92e:	bf00      	nop
 800d930:	3728      	adds	r7, #40	; 0x28
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800d936:	b480      	push	{r7}
 800d938:	b083      	sub	sp, #12
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	460b      	mov	r3, r1
 800d940:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	78fa      	ldrb	r2, [r7, #3]
 800d946:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800d94a:	bf00      	nop
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b086      	sub	sp, #24
 800d95a:	af02      	add	r7, sp, #8
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	4608      	mov	r0, r1
 800d960:	4611      	mov	r1, r2
 800d962:	461a      	mov	r2, r3
 800d964:	4603      	mov	r3, r0
 800d966:	70fb      	strb	r3, [r7, #3]
 800d968:	460b      	mov	r3, r1
 800d96a:	70bb      	strb	r3, [r7, #2]
 800d96c:	4613      	mov	r3, r2
 800d96e:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800d976:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800d978:	7bbb      	ldrb	r3, [r7, #14]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bf0c      	ite	eq
 800d97e:	2301      	moveq	r3, #1
 800d980:	2300      	movne	r3, #0
 800d982:	b2db      	uxtb	r3, r3
 800d984:	737b      	strb	r3, [r7, #13]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800d986:	78fa      	ldrb	r2, [r7, #3]
 800d988:	787b      	ldrb	r3, [r7, #1]
 800d98a:	4413      	add	r3, r2
 800d98c:	b2d8      	uxtb	r0, r3
 800d98e:	78bb      	ldrb	r3, [r7, #2]
 800d990:	3301      	adds	r3, #1
 800d992:	b2db      	uxtb	r3, r3
 800d994:	78ba      	ldrb	r2, [r7, #2]
 800d996:	78f9      	ldrb	r1, [r7, #3]
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	4603      	mov	r3, r0
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fac5 	bl	800df2c <u8g2_IsIntersection>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d040      	beq.n	800da2a <u8g2_DrawHorizontalBitmap+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 800d9a8:	2380      	movs	r3, #128	; 0x80
 800d9aa:	73fb      	strb	r3, [r7, #15]
  while(len > 0)
 800d9ac:	e035      	b.n	800da1a <u8g2_DrawHorizontalBitmap+0xc4>
  {
    if ( *b & mask ) {
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	781a      	ldrb	r2, [r3, #0]
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00c      	beq.n	800d9d6 <u8g2_DrawHorizontalBitmap+0x80>
      u8g2->draw_color = color;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7bba      	ldrb	r2, [r7, #14]
 800d9c0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800d9c4:	78ba      	ldrb	r2, [r7, #2]
 800d9c6:	78f9      	ldrb	r1, [r7, #3]
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f9df 	bl	800dd92 <u8g2_DrawHVLine>
 800d9d4:	e010      	b.n	800d9f8 <u8g2_DrawHorizontalBitmap+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10b      	bne.n	800d9f8 <u8g2_DrawHorizontalBitmap+0xa2>
      u8g2->draw_color = ncolor;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7b7a      	ldrb	r2, [r7, #13]
 800d9e4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800d9e8:	78ba      	ldrb	r2, [r7, #2]
 800d9ea:	78f9      	ldrb	r1, [r7, #3]
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f9cd 	bl	800dd92 <u8g2_DrawHVLine>
    }

    x++;
 800d9f8:	78fb      	ldrb	r3, [r7, #3]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	70fb      	strb	r3, [r7, #3]
    mask >>= 1;
 800d9fe:	7bfb      	ldrb	r3, [r7, #15]
 800da00:	085b      	lsrs	r3, r3, #1
 800da02:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d104      	bne.n	800da14 <u8g2_DrawHorizontalBitmap+0xbe>
    {
      mask = 128;
 800da0a:	2380      	movs	r3, #128	; 0x80
 800da0c:	73fb      	strb	r3, [r7, #15]
      b++;
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	3301      	adds	r3, #1
 800da12:	61bb      	str	r3, [r7, #24]
    }
    len--;
 800da14:	787b      	ldrb	r3, [r7, #1]
 800da16:	3b01      	subs	r3, #1
 800da18:	707b      	strb	r3, [r7, #1]
  while(len > 0)
 800da1a:	787b      	ldrb	r3, [r7, #1]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1c6      	bne.n	800d9ae <u8g2_DrawHorizontalBitmap+0x58>
  }
  u8g2->draw_color = color;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	7bba      	ldrb	r2, [r7, #14]
 800da24:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 800da28:	e000      	b.n	800da2c <u8g2_DrawHorizontalBitmap+0xd6>
    return;
 800da2a:	bf00      	nop
}
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b086      	sub	sp, #24
 800da36:	af02      	add	r7, sp, #8
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	4608      	mov	r0, r1
 800da3c:	4611      	mov	r1, r2
 800da3e:	461a      	mov	r2, r3
 800da40:	4603      	mov	r3, r0
 800da42:	70fb      	strb	r3, [r7, #3]
 800da44:	460b      	mov	r3, r1
 800da46:	70bb      	strb	r3, [r7, #2]
 800da48:	4613      	mov	r3, r2
 800da4a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t w;
  w = cnt;
 800da4c:	787b      	ldrb	r3, [r7, #1]
 800da4e:	73fb      	strb	r3, [r7, #15]
  w *= 8;
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	00db      	lsls	r3, r3, #3
 800da54:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800da56:	78fa      	ldrb	r2, [r7, #3]
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	4413      	add	r3, r2
 800da5c:	b2d8      	uxtb	r0, r3
 800da5e:	78ba      	ldrb	r2, [r7, #2]
 800da60:	7e3b      	ldrb	r3, [r7, #24]
 800da62:	4413      	add	r3, r2
 800da64:	b2db      	uxtb	r3, r3
 800da66:	78ba      	ldrb	r2, [r7, #2]
 800da68:	78f9      	ldrb	r1, [r7, #3]
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	4603      	mov	r3, r0
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fa5c 	bl	800df2c <u8g2_IsIntersection>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d017      	beq.n	800daaa <u8g2_DrawBitmap+0x78>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800da7a:	e012      	b.n	800daa2 <u8g2_DrawBitmap+0x70>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 800da7c:	7bf8      	ldrb	r0, [r7, #15]
 800da7e:	78ba      	ldrb	r2, [r7, #2]
 800da80:	78f9      	ldrb	r1, [r7, #3]
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	4603      	mov	r3, r0
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff ff64 	bl	800d956 <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 800da8e:	787b      	ldrb	r3, [r7, #1]
 800da90:	69fa      	ldr	r2, [r7, #28]
 800da92:	4413      	add	r3, r2
 800da94:	61fb      	str	r3, [r7, #28]
    y++;
 800da96:	78bb      	ldrb	r3, [r7, #2]
 800da98:	3301      	adds	r3, #1
 800da9a:	70bb      	strb	r3, [r7, #2]
    h--;
 800da9c:	7e3b      	ldrb	r3, [r7, #24]
 800da9e:	3b01      	subs	r3, #1
 800daa0:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 800daa2:	7e3b      	ldrb	r3, [r7, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1e9      	bne.n	800da7c <u8g2_DrawBitmap+0x4a>
 800daa8:	e000      	b.n	800daac <u8g2_DrawBitmap+0x7a>
    return;
 800daaa:	bf00      	nop
  }
}
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	7c1b      	ldrb	r3, [r3, #16]
 800dac0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dac8:	461a      	mov	r2, r3
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	fb02 f303 	mul.w	r3, r2, r3
 800dad0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	00db      	lsls	r3, r3, #3
 800dad6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	2100      	movs	r1, #0
 800dae0:	4618      	mov	r0, r3
 800dae2:	f005 fc55 	bl	8013390 <memset>
}
 800dae6:	bf00      	nop
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b086      	sub	sp, #24
 800daf2:	af02      	add	r7, sp, #8
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	460b      	mov	r3, r1
 800daf8:	70fb      	strb	r3, [r7, #3]
 800dafa:	4613      	mov	r3, r2
 800dafc:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	7c1b      	ldrb	r3, [r3, #16]
 800db04:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800db06:	78fb      	ldrb	r3, [r7, #3]
 800db08:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800db10:	7bfb      	ldrb	r3, [r7, #15]
 800db12:	b29b      	uxth	r3, r3
 800db14:	89ba      	ldrh	r2, [r7, #12]
 800db16:	fb12 f303 	smulbb	r3, r2, r3
 800db1a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800db1c:	89bb      	ldrh	r3, [r7, #12]
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800db22:	89bb      	ldrh	r3, [r7, #12]
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	4413      	add	r3, r2
 800db28:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800db2a:	7bf9      	ldrb	r1, [r7, #15]
 800db2c:	78ba      	ldrb	r2, [r7, #2]
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	460b      	mov	r3, r1
 800db34:	2100      	movs	r1, #0
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fe83 	bl	800e842 <u8x8_DrawTile>
}
 800db3c:	bf00      	nop
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db56:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db5e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	7c5b      	ldrb	r3, [r3, #17]
 800db66:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800db68:	7bba      	ldrb	r2, [r7, #14]
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff ffbd 	bl	800daee <u8g2_send_tile_row>
    src_row++;
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	3301      	adds	r3, #1
 800db78:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
 800db7c:	3301      	adds	r3, #1
 800db7e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800db80:	7bfa      	ldrb	r2, [r7, #15]
 800db82:	7b7b      	ldrb	r3, [r7, #13]
 800db84:	429a      	cmp	r2, r3
 800db86:	d203      	bcs.n	800db90 <u8g2_send_buffer+0x4c>
 800db88:	7bba      	ldrb	r2, [r7, #14]
 800db8a:	7b3b      	ldrb	r3, [r7, #12]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d3eb      	bcc.n	800db68 <u8g2_send_buffer+0x24>
}
 800db90:	bf00      	nop
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff ffcf 	bl	800db44 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fe9c 	bl	800e8e4 <u8x8_RefreshDisplay>
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	78fa      	ldrb	r2, [r7, #3]
 800dbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	4798      	blx	r3
}
 800dbdc:	bf00      	nop
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d002      	beq.n	800dbfc <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff ff5b 	bl	800dab2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff ffd8 	bl	800dbb4 <u8g2_SetBufferCurrTileRow>
}
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2208      	movs	r2, #8
 800dc18:	701a      	strb	r2, [r3, #0]
  return buf;
 800dc1a:	4b03      	ldr	r3, [pc, #12]	; (800dc28 <u8g2_m_16_8_f+0x1c>)
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	200045f4 	.word	0x200045f4

0800dc2c <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4a0b      	ldr	r2, [pc, #44]	; (800dc70 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800dc42:	490c      	ldr	r1, [pc, #48]	; (800dc74 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f000 feb1 	bl	800e9ac <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800dc4a:	f107 0313 	add.w	r3, r7, #19
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff ffdc 	bl	800dc0c <u8g2_m_16_8_f>
 800dc54:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800dc56:	7cfa      	ldrb	r2, [r7, #19]
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800dc5e:	6979      	ldr	r1, [r7, #20]
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f000 fa4c 	bl	800e0fe <u8g2_SetupBuffer>
}
 800dc66:	bf00      	nop
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	0800e565 	.word	0x0800e565
 800dc74:	0800e73d 	.word	0x0800e73d
 800dc78:	0800df83 	.word	0x0800df83

0800dc7c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  return 0;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
	...

0800dc94 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a04      	ldr	r2, [pc, #16]	; (800dcb0 <u8g2_SetFontPosBaseline+0x1c>)
 800dca0:	655a      	str	r2, [r3, #84]	; 0x54
}
 800dca2:	bf00      	nop
 800dca4:	370c      	adds	r7, #12
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	0800dc7d 	.word	0x0800dc7d

0800dcb4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b087      	sub	sp, #28
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	71fb      	strb	r3, [r7, #7]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
 800dcd2:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	781a      	ldrb	r2, [r3, #0]
 800dcd8:	7dbb      	ldrb	r3, [r7, #22]
 800dcda:	4413      	add	r3, r2
 800dcdc:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800dcde:	7dfa      	ldrb	r2, [r7, #23]
 800dce0:	7dbb      	ldrb	r3, [r7, #22]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d90b      	bls.n	800dcfe <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800dce6:	7dfa      	ldrb	r2, [r7, #23]
 800dce8:	79bb      	ldrb	r3, [r7, #6]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d205      	bcs.n	800dcfa <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800dcee:	79bb      	ldrb	r3, [r7, #6]
 800dcf0:	75bb      	strb	r3, [r7, #22]
      b--;
 800dcf2:	7dbb      	ldrb	r3, [r7, #22]
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	75bb      	strb	r3, [r7, #22]
 800dcf8:	e001      	b.n	800dcfe <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800dcfe:	7dfa      	ldrb	r2, [r7, #23]
 800dd00:	79bb      	ldrb	r3, [r7, #6]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d301      	bcc.n	800dd0a <u8g2_clip_intersection2+0x56>
    return 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	e01c      	b.n	800dd44 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800dd0a:	7dba      	ldrb	r2, [r7, #22]
 800dd0c:	79fb      	ldrb	r3, [r7, #7]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d801      	bhi.n	800dd16 <u8g2_clip_intersection2+0x62>
    return 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e016      	b.n	800dd44 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800dd16:	7dfa      	ldrb	r2, [r7, #23]
 800dd18:	79fb      	ldrb	r3, [r7, #7]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d201      	bcs.n	800dd22 <u8g2_clip_intersection2+0x6e>
    a = c;
 800dd1e:	79fb      	ldrb	r3, [r7, #7]
 800dd20:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800dd22:	7dba      	ldrb	r2, [r7, #22]
 800dd24:	79bb      	ldrb	r3, [r7, #6]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d901      	bls.n	800dd2e <u8g2_clip_intersection2+0x7a>
    b = d;
 800dd2a:	79bb      	ldrb	r3, [r7, #6]
 800dd2c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	7dfa      	ldrb	r2, [r7, #23]
 800dd32:	701a      	strb	r2, [r3, #0]
  b -= a;
 800dd34:	7dba      	ldrb	r2, [r7, #22]
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	7dba      	ldrb	r2, [r7, #22]
 800dd40:	701a      	strb	r2, [r3, #0]
  return 1;
 800dd42:	2301      	movs	r3, #1
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	371c      	adds	r7, #28
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800dd50:	b590      	push	{r4, r7, lr}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af02      	add	r7, sp, #8
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	4608      	mov	r0, r1
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	4603      	mov	r3, r0
 800dd60:	70fb      	strb	r3, [r7, #3]
 800dd62:	460b      	mov	r3, r1
 800dd64:	70bb      	strb	r3, [r7, #2]
 800dd66:	4613      	mov	r3, r2
 800dd68:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd70:	78ba      	ldrb	r2, [r7, #2]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800dd7a:	7878      	ldrb	r0, [r7, #1]
 800dd7c:	78ba      	ldrb	r2, [r7, #2]
 800dd7e:	78f9      	ldrb	r1, [r7, #3]
 800dd80:	7e3b      	ldrb	r3, [r7, #24]
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	4603      	mov	r3, r0
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	47a0      	blx	r4
}
 800dd8a:	bf00      	nop
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd90      	pop	{r4, r7, pc}

0800dd92 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800dd92:	b590      	push	{r4, r7, lr}
 800dd94:	b085      	sub	sp, #20
 800dd96:	af02      	add	r7, sp, #8
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	4608      	mov	r0, r1
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	461a      	mov	r2, r3
 800dda0:	4603      	mov	r3, r0
 800dda2:	70fb      	strb	r3, [r7, #3]
 800dda4:	460b      	mov	r3, r1
 800dda6:	70bb      	strb	r3, [r7, #2]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d06d      	beq.n	800de92 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800ddb6:	787b      	ldrb	r3, [r7, #1]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d06a      	beq.n	800de92 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800ddbc:	787b      	ldrb	r3, [r7, #1]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d918      	bls.n	800ddf4 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800ddc2:	7e3b      	ldrb	r3, [r7, #24]
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d109      	bne.n	800dddc <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800ddc8:	78fa      	ldrb	r2, [r7, #3]
 800ddca:	787b      	ldrb	r3, [r7, #1]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	70fb      	strb	r3, [r7, #3]
	  x++;
 800ddd2:	78fb      	ldrb	r3, [r7, #3]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	70fb      	strb	r3, [r7, #3]
 800ddda:	e00b      	b.n	800ddf4 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800dddc:	7e3b      	ldrb	r3, [r7, #24]
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	d108      	bne.n	800ddf4 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800dde2:	78ba      	ldrb	r2, [r7, #2]
 800dde4:	787b      	ldrb	r3, [r7, #1]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	70bb      	strb	r3, [r7, #2]
	  y++;
 800ddec:	78bb      	ldrb	r3, [r7, #2]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800ddf4:	7e3b      	ldrb	r3, [r7, #24]
 800ddf6:	f003 0301 	and.w	r3, r3, #1
 800ddfa:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800ddfc:	7e3b      	ldrb	r3, [r7, #24]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d119      	bne.n	800de36 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800de08:	78bb      	ldrb	r3, [r7, #2]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d838      	bhi.n	800de80 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800de14:	78bb      	ldrb	r3, [r7, #2]
 800de16:	429a      	cmp	r2, r3
 800de18:	d934      	bls.n	800de84 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800de26:	1c79      	adds	r1, r7, #1
 800de28:	1cf8      	adds	r0, r7, #3
 800de2a:	f7ff ff43 	bl	800dcb4 <u8g2_clip_intersection2>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d119      	bne.n	800de68 <u8g2_DrawHVLine+0xd6>
	  return;
 800de34:	e02d      	b.n	800de92 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800de3c:	78fb      	ldrb	r3, [r7, #3]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d822      	bhi.n	800de88 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800de48:	78fb      	ldrb	r3, [r7, #3]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d91e      	bls.n	800de8c <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800de5a:	1c79      	adds	r1, r7, #1
 800de5c:	1cb8      	adds	r0, r7, #2
 800de5e:	f7ff ff29 	bl	800dcb4 <u8g2_clip_intersection2>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d013      	beq.n	800de90 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6c:	689c      	ldr	r4, [r3, #8]
 800de6e:	78f9      	ldrb	r1, [r7, #3]
 800de70:	78ba      	ldrb	r2, [r7, #2]
 800de72:	7878      	ldrb	r0, [r7, #1]
 800de74:	7e3b      	ldrb	r3, [r7, #24]
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	4603      	mov	r3, r0
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	47a0      	blx	r4
 800de7e:	e008      	b.n	800de92 <u8g2_DrawHVLine+0x100>
	  return;
 800de80:	bf00      	nop
 800de82:	e006      	b.n	800de92 <u8g2_DrawHVLine+0x100>
	  return;
 800de84:	bf00      	nop
 800de86:	e004      	b.n	800de92 <u8g2_DrawHVLine+0x100>
	  return;
 800de88:	bf00      	nop
 800de8a:	e002      	b.n	800de92 <u8g2_DrawHVLine+0x100>
	  return;
 800de8c:	bf00      	nop
 800de8e:	e000      	b.n	800de92 <u8g2_DrawHVLine+0x100>
	  return;
 800de90:	bf00      	nop
    }
}
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	bd90      	pop	{r4, r7, pc}

0800de98 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	78fa      	ldrb	r2, [r7, #3]
 800dea8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 800deac:	78fb      	ldrb	r3, [r7, #3]
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d903      	bls.n	800deba <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2201      	movs	r2, #1
 800deb6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800dec6:	b490      	push	{r4, r7}
 800dec8:	b082      	sub	sp, #8
 800deca:	af00      	add	r7, sp, #0
 800decc:	4604      	mov	r4, r0
 800dece:	4608      	mov	r0, r1
 800ded0:	4611      	mov	r1, r2
 800ded2:	461a      	mov	r2, r3
 800ded4:	4623      	mov	r3, r4
 800ded6:	71fb      	strb	r3, [r7, #7]
 800ded8:	4603      	mov	r3, r0
 800deda:	71bb      	strb	r3, [r7, #6]
 800dedc:	460b      	mov	r3, r1
 800dede:	717b      	strb	r3, [r7, #5]
 800dee0:	4613      	mov	r3, r2
 800dee2:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800dee4:	797a      	ldrb	r2, [r7, #5]
 800dee6:	79bb      	ldrb	r3, [r7, #6]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d20d      	bcs.n	800df08 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800deec:	793a      	ldrb	r2, [r7, #4]
 800deee:	79fb      	ldrb	r3, [r7, #7]
 800def0:	429a      	cmp	r2, r3
 800def2:	d901      	bls.n	800def8 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800def4:	2301      	movs	r3, #1
 800def6:	e014      	b.n	800df22 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800def8:	797a      	ldrb	r2, [r7, #5]
 800defa:	793b      	ldrb	r3, [r7, #4]
 800defc:	429a      	cmp	r2, r3
 800defe:	d901      	bls.n	800df04 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800df00:	2301      	movs	r3, #1
 800df02:	e00e      	b.n	800df22 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800df04:	2300      	movs	r3, #0
 800df06:	e00c      	b.n	800df22 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800df08:	793a      	ldrb	r2, [r7, #4]
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d907      	bls.n	800df20 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800df10:	797a      	ldrb	r2, [r7, #5]
 800df12:	793b      	ldrb	r3, [r7, #4]
 800df14:	429a      	cmp	r2, r3
 800df16:	d901      	bls.n	800df1c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800df18:	2301      	movs	r3, #1
 800df1a:	e002      	b.n	800df22 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	e000      	b.n	800df22 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800df20:	2300      	movs	r3, #0
    }
  }
}
 800df22:	4618      	mov	r0, r3
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bc90      	pop	{r4, r7}
 800df2a:	4770      	bx	lr

0800df2c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	4608      	mov	r0, r1
 800df36:	4611      	mov	r1, r2
 800df38:	461a      	mov	r2, r3
 800df3a:	4603      	mov	r3, r0
 800df3c:	70fb      	strb	r3, [r7, #3]
 800df3e:	460b      	mov	r3, r1
 800df40:	70bb      	strb	r3, [r7, #2]
 800df42:	4613      	mov	r3, r2
 800df44:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800df52:	7c3b      	ldrb	r3, [r7, #16]
 800df54:	78ba      	ldrb	r2, [r7, #2]
 800df56:	f7ff ffb6 	bl	800dec6 <u8g2_is_intersection_decision_tree>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <u8g2_IsIntersection+0x38>
    return 0; 
 800df60:	2300      	movs	r3, #0
 800df62:	e00a      	b.n	800df7a <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800df70:	787b      	ldrb	r3, [r7, #1]
 800df72:	78fa      	ldrb	r2, [r7, #3]
 800df74:	f7ff ffa7 	bl	800dec6 <u8g2_is_intersection_decision_tree>
 800df78:	4603      	mov	r3, r0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800df82:	b480      	push	{r7}
 800df84:	b087      	sub	sp, #28
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	4608      	mov	r0, r1
 800df8c:	4611      	mov	r1, r2
 800df8e:	461a      	mov	r2, r3
 800df90:	4603      	mov	r3, r0
 800df92:	70fb      	strb	r3, [r7, #3]
 800df94:	460b      	mov	r3, r1
 800df96:	70bb      	strb	r3, [r7, #2]
 800df98:	4613      	mov	r3, r2
 800df9a:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800df9c:	78bb      	ldrb	r3, [r7, #2]
 800df9e:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800dfa0:	7cfb      	ldrb	r3, [r7, #19]
 800dfa2:	f003 0307 	and.w	r3, r3, #7
 800dfa6:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800dfac:	7c3a      	ldrb	r2, [r7, #16]
 800dfae:	7cfb      	ldrb	r3, [r7, #19]
 800dfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800dfb4:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d801      	bhi.n	800dfcc <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800dfc8:	7c3b      	ldrb	r3, [r7, #16]
 800dfca:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d001      	beq.n	800dfda <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800dfd6:	7c3b      	ldrb	r3, [r7, #16]
 800dfd8:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800dfda:	78bb      	ldrb	r3, [r7, #2]
 800dfdc:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800dfde:	89fb      	ldrh	r3, [r7, #14]
 800dfe0:	f023 0307 	bic.w	r3, r3, #7
 800dfe4:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	7c1b      	ldrb	r3, [r3, #16]
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	89fa      	ldrh	r2, [r7, #14]
 800dff0:	fb12 f303 	smulbb	r3, r2, r3
 800dff4:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800dffc:	89fb      	ldrh	r3, [r7, #14]
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	4413      	add	r3, r2
 800e002:	617b      	str	r3, [r7, #20]
  ptr += x;
 800e004:	78fb      	ldrb	r3, [r7, #3]
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	4413      	add	r3, r2
 800e00a:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800e00c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d117      	bne.n	800e044 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	781a      	ldrb	r2, [r3, #0]
 800e018:	7cbb      	ldrb	r3, [r7, #18]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	781a      	ldrb	r2, [r3, #0]
 800e026:	7c7b      	ldrb	r3, [r7, #17]
 800e028:	4053      	eors	r3, r2
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	701a      	strb	r2, [r3, #0]
	ptr++;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	3301      	adds	r3, #1
 800e034:	617b      	str	r3, [r7, #20]
	len--;
 800e036:	787b      	ldrb	r3, [r7, #1]
 800e038:	3b01      	subs	r3, #1
 800e03a:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800e03c:	787b      	ldrb	r3, [r7, #1]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1e8      	bne.n	800e014 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800e042:	e039      	b.n	800e0b8 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	7cbb      	ldrb	r3, [r7, #18]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	b2da      	uxtb	r2, r3
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	781a      	ldrb	r2, [r3, #0]
 800e056:	7c7b      	ldrb	r3, [r7, #17]
 800e058:	4053      	eors	r3, r2
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800e060:	7cfb      	ldrb	r3, [r7, #19]
 800e062:	3301      	adds	r3, #1
 800e064:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800e066:	7cfb      	ldrb	r3, [r7, #19]
 800e068:	f003 0307 	and.w	r3, r3, #7
 800e06c:	74fb      	strb	r3, [r7, #19]
      len--;
 800e06e:	787b      	ldrb	r3, [r7, #1]
 800e070:	3b01      	subs	r3, #1
 800e072:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800e074:	7cfb      	ldrb	r3, [r7, #19]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d115      	bne.n	800e0a6 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e080:	461a      	mov	r2, r3
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	4413      	add	r3, r2
 800e086:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d801      	bhi.n	800e096 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800e092:	2301      	movs	r3, #1
 800e094:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d008      	beq.n	800e0b2 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	747b      	strb	r3, [r7, #17]
 800e0a4:	e005      	b.n	800e0b2 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800e0a6:	7cbb      	ldrb	r3, [r7, #18]
 800e0a8:	005b      	lsls	r3, r3, #1
 800e0aa:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800e0ac:	7c7b      	ldrb	r3, [r7, #17]
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800e0b2:	787b      	ldrb	r3, [r7, #1]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1c5      	bne.n	800e044 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800e0b8:	bf00      	nop
 800e0ba:	371c      	adds	r7, #28
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	22ff      	movs	r2, #255	; 0xff
 800e0e0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	22ff      	movs	r2, #255	; 0xff
 800e0e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	4798      	blx	r3
}
 800e0f6:	bf00      	nop
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b084      	sub	sp, #16
 800e102:	af00      	add	r7, sp, #0
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	603b      	str	r3, [r7, #0]
 800e10a:	4613      	mov	r3, r2
 800e10c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	79fa      	ldrb	r2, [r7, #7]
 800e124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	69ba      	ldr	r2, [r7, #24]
 800e154:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7ff ffaf 	bl	800e0c4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7ff fd94 	bl	800dc94 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800e174:	bf00      	nop
 800e176:	3710      	adds	r7, #16
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e190:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	00db      	lsls	r3, r3, #3
 800e196:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	7bfa      	ldrb	r2, [r7, #15]
 800e19c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	7c1b      	ldrb	r3, [r3, #16]
 800e1a4:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800e1a6:	7bfb      	ldrb	r3, [r7, #15]
 800e1a8:	2b1f      	cmp	r3, #31
 800e1aa:	d901      	bls.n	800e1b0 <u8g2_update_dimension_common+0x34>
    t = 31;
 800e1ac:	231f      	movs	r3, #31
 800e1ae:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800e1b0:	7bfb      	ldrb	r3, [r7, #15]
 800e1b2:	00db      	lsls	r3, r3, #3
 800e1b4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	7bfa      	ldrb	r2, [r7, #15]
 800e1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1c4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	7bfa      	ldrb	r2, [r7, #15]
 800e1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1da:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800e1e4:	4413      	add	r3, r2
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	7c52      	ldrb	r2, [r2, #17]
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	dd06      	ble.n	800e1fc <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	7c5a      	ldrb	r2, [r3, #17]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800e1fc:	7bfb      	ldrb	r3, [r7, #15]
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800e220:	7bfb      	ldrb	r3, [r7, #15]
 800e222:	4413      	add	r3, r2
 800e224:	b2da      	uxtb	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	22f0      	movs	r2, #240	; 0xf0
 800e230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	8a9b      	ldrh	r3, [r3, #20]
 800e238:	2bf0      	cmp	r3, #240	; 0xf0
 800e23a:	d805      	bhi.n	800e248 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	8a9b      	ldrh	r3, [r3, #20]
 800e240:	b2da      	uxtb	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	8adb      	ldrh	r3, [r3, #22]
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800e254:	bf00      	nop
 800e256:	3714      	adds	r7, #20
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af02      	add	r7, sp, #8
 800e266:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	4603      	mov	r3, r0
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff fe51 	bl	800df2c <u8g2_IsIntersection>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d104      	bne.n	800e29a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800e298:	e03b      	b.n	800e312 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d205      	bcs.n	800e2be <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d905      	bls.n	800e2da <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d205      	bcs.n	800e2f6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e302:	429a      	cmp	r2, r3
 800e304:	d905      	bls.n	800e312 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800e312:	bf00      	nop
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7ff ff2a 	bl	800e17c <u8g2_update_dimension_common>
}
 800e328:	bf00      	nop
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7ff ff7b 	bl	800e260 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af02      	add	r7, sp, #8
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	4608      	mov	r0, r1
 800e37c:	4611      	mov	r1, r2
 800e37e:	461a      	mov	r2, r3
 800e380:	4603      	mov	r3, r0
 800e382:	70fb      	strb	r3, [r7, #3]
 800e384:	460b      	mov	r3, r1
 800e386:	70bb      	strb	r3, [r7, #2]
 800e388:	4613      	mov	r3, r2
 800e38a:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800e38c:	7878      	ldrb	r0, [r7, #1]
 800e38e:	78ba      	ldrb	r2, [r7, #2]
 800e390:	78f9      	ldrb	r1, [r7, #3]
 800e392:	7c3b      	ldrb	r3, [r7, #16]
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	4603      	mov	r3, r0
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7ff fcd9 	bl	800dd50 <u8g2_draw_hv_line_2dir>
}
 800e39e:	bf00      	nop
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800e3a6:	b590      	push	{r4, r7, lr}
 800e3a8:	b083      	sub	sp, #12
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	691c      	ldr	r4, [r3, #16]
 800e3b6:	78fa      	ldrb	r2, [r7, #3]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	2120      	movs	r1, #32
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	47a0      	blx	r4
 800e3c0:	4603      	mov	r3, r0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	370c      	adds	r7, #12
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd90      	pop	{r4, r7, pc}

0800e3ca <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800e3ca:	b590      	push	{r4, r7, lr}
 800e3cc:	b085      	sub	sp, #20
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	60f8      	str	r0, [r7, #12]
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	607a      	str	r2, [r7, #4]
 800e3d6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	691c      	ldr	r4, [r3, #16]
 800e3dc:	7afa      	ldrb	r2, [r7, #11]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2117      	movs	r1, #23
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	47a0      	blx	r4
 800e3e6:	4603      	mov	r3, r0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd90      	pop	{r4, r7, pc}

0800e3f0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800e3fc:	1cfb      	adds	r3, r7, #3
 800e3fe:	461a      	mov	r2, r3
 800e400:	2101      	movs	r1, #1
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff ffe1 	bl	800e3ca <u8x8_byte_SendBytes>
 800e408:	4603      	mov	r3, r0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800e412:	b590      	push	{r4, r7, lr}
 800e414:	b083      	sub	sp, #12
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	460b      	mov	r3, r1
 800e41c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68dc      	ldr	r4, [r3, #12]
 800e422:	78fa      	ldrb	r2, [r7, #3]
 800e424:	2300      	movs	r3, #0
 800e426:	2115      	movs	r1, #21
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	47a0      	blx	r4
 800e42c:	4603      	mov	r3, r0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	bd90      	pop	{r4, r7, pc}

0800e436 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800e436:	b590      	push	{r4, r7, lr}
 800e438:	b083      	sub	sp, #12
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
 800e43e:	460b      	mov	r3, r1
 800e440:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	68dc      	ldr	r4, [r3, #12]
 800e446:	78fa      	ldrb	r2, [r7, #3]
 800e448:	2300      	movs	r3, #0
 800e44a:	2116      	movs	r1, #22
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	47a0      	blx	r4
 800e450:	4603      	mov	r3, r0
}
 800e452:	4618      	mov	r0, r3
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	bd90      	pop	{r4, r7, pc}

0800e45a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800e45a:	b590      	push	{r4, r7, lr}
 800e45c:	b085      	sub	sp, #20
 800e45e:	af00      	add	r7, sp, #0
 800e460:	60f8      	str	r0, [r7, #12]
 800e462:	460b      	mov	r3, r1
 800e464:	607a      	str	r2, [r7, #4]
 800e466:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	68dc      	ldr	r4, [r3, #12]
 800e46c:	7afa      	ldrb	r2, [r7, #11]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2117      	movs	r1, #23
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	47a0      	blx	r4
 800e476:	4603      	mov	r3, r0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd90      	pop	{r4, r7, pc}

0800e480 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800e480:	b590      	push	{r4, r7, lr}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	68dc      	ldr	r4, [r3, #12]
 800e48c:	2300      	movs	r3, #0
 800e48e:	2200      	movs	r2, #0
 800e490:	2118      	movs	r1, #24
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	47a0      	blx	r4
 800e496:	4603      	mov	r3, r0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd90      	pop	{r4, r7, pc}

0800e4a0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800e4a0:	b590      	push	{r4, r7, lr}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68dc      	ldr	r4, [r3, #12]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	2119      	movs	r1, #25
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	47a0      	blx	r4
 800e4b6:	4603      	mov	r3, r0
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd90      	pop	{r4, r7, pc}

0800e4c0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800e4c0:	b590      	push	{r4, r7, lr}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	73fb      	strb	r3, [r7, #15]
    data++;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
 800e4d8:	2bfe      	cmp	r3, #254	; 0xfe
 800e4da:	d031      	beq.n	800e540 <u8x8_cad_SendSequence+0x80>
 800e4dc:	2bfe      	cmp	r3, #254	; 0xfe
 800e4de:	dc3d      	bgt.n	800e55c <u8x8_cad_SendSequence+0x9c>
 800e4e0:	2b19      	cmp	r3, #25
 800e4e2:	dc3b      	bgt.n	800e55c <u8x8_cad_SendSequence+0x9c>
 800e4e4:	2b18      	cmp	r3, #24
 800e4e6:	da23      	bge.n	800e530 <u8x8_cad_SendSequence+0x70>
 800e4e8:	2b16      	cmp	r3, #22
 800e4ea:	dc02      	bgt.n	800e4f2 <u8x8_cad_SendSequence+0x32>
 800e4ec:	2b15      	cmp	r3, #21
 800e4ee:	da03      	bge.n	800e4f8 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800e4f0:	e034      	b.n	800e55c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800e4f2:	2b17      	cmp	r3, #23
 800e4f4:	d00e      	beq.n	800e514 <u8x8_cad_SendSequence+0x54>
	return;
 800e4f6:	e031      	b.n	800e55c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	68dc      	ldr	r4, [r3, #12]
 800e502:	7bba      	ldrb	r2, [r7, #14]
 800e504:	7bf9      	ldrb	r1, [r7, #15]
 800e506:	2300      	movs	r3, #0
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	47a0      	blx	r4
	  data++;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	3301      	adds	r3, #1
 800e510:	603b      	str	r3, [r7, #0]
	  break;
 800e512:	e022      	b.n	800e55a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800e51a:	f107 030e 	add.w	r3, r7, #14
 800e51e:	461a      	mov	r2, r3
 800e520:	2101      	movs	r1, #1
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7ff ff99 	bl	800e45a <u8x8_cad_SendData>
	  data++;
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	3301      	adds	r3, #1
 800e52c:	603b      	str	r3, [r7, #0]
	  break;
 800e52e:	e014      	b.n	800e55a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	68dc      	ldr	r4, [r3, #12]
 800e534:	7bf9      	ldrb	r1, [r7, #15]
 800e536:	2300      	movs	r3, #0
 800e538:	2200      	movs	r2, #0
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	47a0      	blx	r4
	  break;
 800e53e:	e00c      	b.n	800e55a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800e546:	7bbb      	ldrb	r3, [r7, #14]
 800e548:	461a      	mov	r2, r3
 800e54a:	2129      	movs	r1, #41	; 0x29
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f9d8 	bl	800e902 <u8x8_gpio_call>
	  data++;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	3301      	adds	r3, #1
 800e556:	603b      	str	r3, [r7, #0]
	  break;
 800e558:	bf00      	nop
    cmd = *data;
 800e55a:	e7b6      	b.n	800e4ca <u8x8_cad_SendSequence+0xa>
	return;
 800e55c:	bf00      	nop
    }
  }
}
 800e55e:	3714      	adds	r7, #20
 800e560:	46bd      	mov	sp, r7
 800e562:	bd90      	pop	{r4, r7, pc}

0800e564 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e564:	b590      	push	{r4, r7, lr}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	607b      	str	r3, [r7, #4]
 800e56e:	460b      	mov	r3, r1
 800e570:	72fb      	strb	r3, [r7, #11]
 800e572:	4613      	mov	r3, r2
 800e574:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800e576:	7afb      	ldrb	r3, [r7, #11]
 800e578:	3b14      	subs	r3, #20
 800e57a:	2b05      	cmp	r3, #5
 800e57c:	d82f      	bhi.n	800e5de <u8x8_cad_001+0x7a>
 800e57e:	a201      	add	r2, pc, #4	; (adr r2, 800e584 <u8x8_cad_001+0x20>)
 800e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e584:	0800e5cd 	.word	0x0800e5cd
 800e588:	0800e59d 	.word	0x0800e59d
 800e58c:	0800e5b1 	.word	0x0800e5b1
 800e590:	0800e5c5 	.word	0x0800e5c5
 800e594:	0800e5cd 	.word	0x0800e5cd
 800e598:	0800e5cd 	.word	0x0800e5cd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800e59c:	2100      	movs	r1, #0
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f7ff ff01 	bl	800e3a6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800e5a4:	7abb      	ldrb	r3, [r7, #10]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f7ff ff21 	bl	800e3f0 <u8x8_byte_SendByte>
      break;
 800e5ae:	e018      	b.n	800e5e2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	f7ff fef7 	bl	800e3a6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800e5b8:	7abb      	ldrb	r3, [r7, #10]
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff ff17 	bl	800e3f0 <u8x8_byte_SendByte>
      break;
 800e5c2:	e00e      	b.n	800e5e2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800e5c4:	2101      	movs	r1, #1
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f7ff feed 	bl	800e3a6 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	691c      	ldr	r4, [r3, #16]
 800e5d0:	7aba      	ldrb	r2, [r7, #10]
 800e5d2:	7af9      	ldrb	r1, [r7, #11]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	47a0      	blx	r4
 800e5da:	4603      	mov	r3, r0
 800e5dc:	e002      	b.n	800e5e4 <u8x8_cad_001+0x80>
    default:
      return 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	e000      	b.n	800e5e4 <u8x8_cad_001+0x80>
  }
  return 1;
 800e5e2:	2301      	movs	r3, #1
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3714      	adds	r7, #20
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd90      	pop	{r4, r7, pc}

0800e5ec <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	607b      	str	r3, [r7, #4]
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	72fb      	strb	r3, [r7, #11]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800e5fe:	7afb      	ldrb	r3, [r7, #11]
 800e600:	3b0b      	subs	r3, #11
 800e602:	2b04      	cmp	r3, #4
 800e604:	f200 808a 	bhi.w	800e71c <u8x8_d_ssd1306_sh1106_generic+0x130>
 800e608:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800e60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60e:	bf00      	nop
 800e610:	0800e625 	.word	0x0800e625
 800e614:	0800e71d 	.word	0x0800e71d
 800e618:	0800e63f 	.word	0x0800e63f
 800e61c:	0800e671 	.word	0x0800e671
 800e620:	0800e691 	.word	0x0800e691
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800e624:	7abb      	ldrb	r3, [r7, #10]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d104      	bne.n	800e634 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800e62a:	4940      	ldr	r1, [pc, #256]	; (800e72c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f7ff ff47 	bl	800e4c0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800e632:	e075      	b.n	800e720 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800e634:	493e      	ldr	r1, [pc, #248]	; (800e730 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7ff ff42 	bl	800e4c0 <u8x8_cad_SendSequence>
      break;
 800e63c:	e070      	b.n	800e720 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800e63e:	7abb      	ldrb	r3, [r7, #10]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10a      	bne.n	800e65a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800e644:	493b      	ldr	r1, [pc, #236]	; (800e734 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f7ff ff3a 	bl	800e4c0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	7c9a      	ldrb	r2, [r3, #18]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800e658:	e062      	b.n	800e720 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800e65a:	4937      	ldr	r1, [pc, #220]	; (800e738 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f7ff ff2f 	bl	800e4c0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	7cda      	ldrb	r2, [r3, #19]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800e66e:	e057      	b.n	800e720 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f7ff ff05 	bl	800e480 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800e676:	2181      	movs	r1, #129	; 0x81
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	f7ff feca 	bl	800e412 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800e67e:	7abb      	ldrb	r3, [r7, #10]
 800e680:	4619      	mov	r1, r3
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f7ff fed7 	bl	800e436 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f7ff ff09 	bl	800e4a0 <u8x8_cad_EndTransfer>
      break;
 800e68e:	e047      	b.n	800e720 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f7ff fef5 	bl	800e480 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	795b      	ldrb	r3, [r3, #5]
 800e69a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800e69c:	7dfb      	ldrb	r3, [r7, #23]
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800e6a8:	7dfb      	ldrb	r3, [r7, #23]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800e6ae:	2140      	movs	r1, #64	; 0x40
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f7ff feae 	bl	800e412 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800e6b6:	7dfb      	ldrb	r3, [r7, #23]
 800e6b8:	091b      	lsrs	r3, r3, #4
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	f043 0310 	orr.w	r3, r3, #16
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f7ff fea4 	bl	800e412 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	f003 030f 	and.w	r3, r3, #15
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f7ff feae 	bl	800e436 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	799b      	ldrb	r3, [r3, #6]
 800e6de:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f7ff fea5 	bl	800e436 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	791b      	ldrb	r3, [r3, #4]
 800e6f0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800e6f8:	7dbb      	ldrb	r3, [r7, #22]
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	693a      	ldr	r2, [r7, #16]
 800e700:	4619      	mov	r1, r3
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f7ff fea9 	bl	800e45a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800e708:	7abb      	ldrb	r3, [r7, #10]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800e70e:	7abb      	ldrb	r3, [r7, #10]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1eb      	bne.n	800e6ec <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7ff fec3 	bl	800e4a0 <u8x8_cad_EndTransfer>
      break;
 800e71a:	e001      	b.n	800e720 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800e71c:	2300      	movs	r3, #0
 800e71e:	e000      	b.n	800e722 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800e720:	2301      	movs	r3, #1
}
 800e722:	4618      	mov	r0, r3
 800e724:	3718      	adds	r7, #24
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	08014694 	.word	0x08014694
 800e730:	0801469c 	.word	0x0801469c
 800e734:	080146a4 	.word	0x080146a4
 800e738:	080146ac 	.word	0x080146ac

0800e73c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	607b      	str	r3, [r7, #4]
 800e746:	460b      	mov	r3, r1
 800e748:	72fb      	strb	r3, [r7, #11]
 800e74a:	4613      	mov	r3, r2
 800e74c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800e74e:	7aba      	ldrb	r2, [r7, #10]
 800e750:	7af9      	ldrb	r1, [r7, #11]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff ff49 	bl	800e5ec <u8x8_d_ssd1306_sh1106_generic>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d001      	beq.n	800e764 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800e760:	2301      	movs	r3, #1
 800e762:	e014      	b.n	800e78e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800e764:	7afb      	ldrb	r3, [r7, #11]
 800e766:	2b09      	cmp	r3, #9
 800e768:	d009      	beq.n	800e77e <u8x8_d_ssd1306_128x64_noname+0x42>
 800e76a:	2b0a      	cmp	r3, #10
 800e76c:	d10c      	bne.n	800e788 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f000 f82a 	bl	800e7c8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800e774:	4908      	ldr	r1, [pc, #32]	; (800e798 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff fea2 	bl	800e4c0 <u8x8_cad_SendSequence>
      break;
 800e77c:	e006      	b.n	800e78c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800e77e:	4907      	ldr	r1, [pc, #28]	; (800e79c <u8x8_d_ssd1306_128x64_noname+0x60>)
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 f80d 	bl	800e7a0 <u8x8_d_helper_display_setup_memory>
      break;
 800e786:	e001      	b.n	800e78c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800e788:	2300      	movs	r3, #0
 800e78a:	e000      	b.n	800e78e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800e78c:	2301      	movs	r3, #1
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	0801465c 	.word	0x0801465c
 800e79c:	080146b4 	.word	0x080146b4

0800e7a0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	7c9a      	ldrb	r2, [r3, #18]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800e7c8:	b590      	push	{r4, r7, lr}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	695c      	ldr	r4, [r3, #20]
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	2128      	movs	r1, #40	; 0x28
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	68dc      	ldr	r4, [r3, #12]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	2114      	movs	r1, #20
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	214b      	movs	r1, #75	; 0x4b
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f886 	bl	800e902 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	791b      	ldrb	r3, [r3, #4]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	2129      	movs	r1, #41	; 0x29
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f87e 	bl	800e902 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800e806:	2200      	movs	r2, #0
 800e808:	214b      	movs	r1, #75	; 0x4b
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f879 	bl	800e902 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	791b      	ldrb	r3, [r3, #4]
 800e816:	461a      	mov	r2, r3
 800e818:	2129      	movs	r1, #41	; 0x29
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f871 	bl	800e902 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800e820:	2201      	movs	r2, #1
 800e822:	214b      	movs	r1, #75	; 0x4b
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 f86c 	bl	800e902 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	795b      	ldrb	r3, [r3, #5]
 800e830:	461a      	mov	r2, r3
 800e832:	2129      	movs	r1, #41	; 0x29
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 f864 	bl	800e902 <u8x8_gpio_call>
}    
 800e83a:	bf00      	nop
 800e83c:	370c      	adds	r7, #12
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd90      	pop	{r4, r7, pc}

0800e842 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800e842:	b590      	push	{r4, r7, lr}
 800e844:	b085      	sub	sp, #20
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	4608      	mov	r0, r1
 800e84c:	4611      	mov	r1, r2
 800e84e:	461a      	mov	r2, r3
 800e850:	4603      	mov	r3, r0
 800e852:	70fb      	strb	r3, [r7, #3]
 800e854:	460b      	mov	r3, r1
 800e856:	70bb      	strb	r3, [r7, #2]
 800e858:	4613      	mov	r3, r2
 800e85a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800e85c:	78fb      	ldrb	r3, [r7, #3]
 800e85e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800e860:	78bb      	ldrb	r3, [r7, #2]
 800e862:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800e864:	787b      	ldrb	r3, [r7, #1]
 800e866:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800e868:	6a3b      	ldr	r3, [r7, #32]
 800e86a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	689c      	ldr	r4, [r3, #8]
 800e870:	f107 0308 	add.w	r3, r7, #8
 800e874:	2201      	movs	r2, #1
 800e876:	210f      	movs	r1, #15
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	47a0      	blx	r4
 800e87c:	4603      	mov	r3, r0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	bd90      	pop	{r4, r7, pc}

0800e886 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800e886:	b590      	push	{r4, r7, lr}
 800e888:	b083      	sub	sp, #12
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	689c      	ldr	r4, [r3, #8]
 800e892:	2300      	movs	r3, #0
 800e894:	2200      	movs	r2, #0
 800e896:	2109      	movs	r1, #9
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	47a0      	blx	r4
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd90      	pop	{r4, r7, pc}

0800e8a4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800e8a4:	b590      	push	{r4, r7, lr}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	689c      	ldr	r4, [r3, #8]
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	210a      	movs	r1, #10
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	47a0      	blx	r4
}
 800e8ba:	bf00      	nop
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd90      	pop	{r4, r7, pc}

0800e8c2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800e8c2:	b590      	push	{r4, r7, lr}
 800e8c4:	b083      	sub	sp, #12
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	689c      	ldr	r4, [r3, #8]
 800e8d2:	78fa      	ldrb	r2, [r7, #3]
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	210b      	movs	r1, #11
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	47a0      	blx	r4
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd90      	pop	{r4, r7, pc}

0800e8e4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800e8e4:	b590      	push	{r4, r7, lr}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	689c      	ldr	r4, [r3, #8]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	2110      	movs	r1, #16
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	47a0      	blx	r4
}
 800e8fa:	bf00      	nop
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd90      	pop	{r4, r7, pc}

0800e902 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800e902:	b590      	push	{r4, r7, lr}
 800e904:	b083      	sub	sp, #12
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	460b      	mov	r3, r1
 800e90c:	70fb      	strb	r3, [r7, #3]
 800e90e:	4613      	mov	r3, r2
 800e910:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	695c      	ldr	r4, [r3, #20]
 800e916:	78ba      	ldrb	r2, [r7, #2]
 800e918:	78f9      	ldrb	r1, [r7, #3]
 800e91a:	2300      	movs	r3, #0
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	47a0      	blx	r4
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	bd90      	pop	{r4, r7, pc}

0800e928 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	607b      	str	r3, [r7, #4]
 800e932:	460b      	mov	r3, r1
 800e934:	72fb      	strb	r3, [r7, #11]
 800e936:	4613      	mov	r3, r2
 800e938:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a13      	ldr	r2, [pc, #76]	; (800e9a8 <u8x8_SetupDefaults+0x60>)
 800e95a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a12      	ldr	r2, [pc, #72]	; (800e9a8 <u8x8_SetupDefaults+0x60>)
 800e960:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a10      	ldr	r2, [pc, #64]	; (800e9a8 <u8x8_SetupDefaults+0x60>)
 800e966:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4a0f      	ldr	r2, [pc, #60]	; (800e9a8 <u8x8_SetupDefaults+0x60>)
 800e96c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	22ff      	movs	r2, #255	; 0xff
 800e990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	22ff      	movs	r2, #255	; 0xff
 800e998:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800e99c:	bf00      	nop
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	0800e929 	.word	0x0800e929

0800e9ac <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f7ff ffc4 	bl	800e948 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	68ba      	ldr	r2, [r7, #8]
 800e9c4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	69ba      	ldr	r2, [r7, #24]
 800e9d6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff ff54 	bl	800e886 <u8x8_SetupMemory>
}
 800e9de:	bf00      	nop
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <LL_ADC_REG_SetSequencerRanks>:
{
 800e9e6:	b480      	push	{r7}
 800e9e8:	b089      	sub	sp, #36	; 0x24
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	60f8      	str	r0, [r7, #12]
 800e9ee:	60b9      	str	r1, [r7, #8]
 800e9f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	332c      	adds	r3, #44	; 0x2c
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ea02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	fa92 f2a2 	rbit	r2, r2
 800ea0a:	617a      	str	r2, [r7, #20]
  return result;
 800ea0c:	697a      	ldr	r2, [r7, #20]
 800ea0e:	fab2 f282 	clz	r2, r2
 800ea12:	b2d2      	uxtb	r2, r2
 800ea14:	40d3      	lsrs	r3, r2
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	440b      	add	r3, r1
 800ea1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	f003 031f 	and.w	r3, r3, #31
 800ea26:	211f      	movs	r1, #31
 800ea28:	fa01 f303 	lsl.w	r3, r1, r3
 800ea2c:	43db      	mvns	r3, r3
 800ea2e:	401a      	ands	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f003 011f 	and.w	r1, r3, #31
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	f003 031f 	and.w	r3, r3, #31
 800ea3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea40:	431a      	orrs	r2, r3
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	601a      	str	r2, [r3, #0]
}
 800ea46:	bf00      	nop
 800ea48:	3724      	adds	r7, #36	; 0x24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800ea52:	b480      	push	{r7}
 800ea54:	b083      	sub	sp, #12
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	431a      	orrs	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	609a      	str	r2, [r3, #8]
}
 800ea6c:	bf00      	nop
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <LL_ADC_SetChannelSamplingTime>:
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b08d      	sub	sp, #52	; 0x34
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	330c      	adds	r3, #12
 800ea88:	4619      	mov	r1, r3
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ea94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea96:	69ba      	ldr	r2, [r7, #24]
 800ea98:	fa92 f2a2 	rbit	r2, r2
 800ea9c:	617a      	str	r2, [r7, #20]
  return result;
 800ea9e:	697a      	ldr	r2, [r7, #20]
 800eaa0:	fab2 f282 	clz	r2, r2
 800eaa4:	b2d2      	uxtb	r2, r2
 800eaa6:	40d3      	lsrs	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	440b      	add	r3, r1
 800eaac:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 800eaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800eab8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800eabc:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eabe:	6a39      	ldr	r1, [r7, #32]
 800eac0:	fa91 f1a1 	rbit	r1, r1
 800eac4:	61f9      	str	r1, [r7, #28]
  return result;
 800eac6:	69f9      	ldr	r1, [r7, #28]
 800eac8:	fab1 f181 	clz	r1, r1
 800eacc:	b2c9      	uxtb	r1, r1
 800eace:	40cb      	lsrs	r3, r1
 800ead0:	2107      	movs	r1, #7
 800ead2:	fa01 f303 	lsl.w	r3, r1, r3
 800ead6:	43db      	mvns	r3, r3
 800ead8:	401a      	ands	r2, r3
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800eae0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800eae4:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eae8:	fa91 f1a1 	rbit	r1, r1
 800eaec:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800eaee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eaf0:	fab1 f181 	clz	r1, r1
 800eaf4:	b2c9      	uxtb	r1, r1
 800eaf6:	40cb      	lsrs	r3, r1
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	fa01 f303 	lsl.w	r3, r1, r3
 800eafe:	431a      	orrs	r2, r3
 800eb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb02:	601a      	str	r2, [r3, #0]
}
 800eb04:	bf00      	nop
 800eb06:	3734      	adds	r7, #52	; 0x34
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <LL_ADC_Enable>:
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	f043 0201 	orr.w	r2, r3, #1
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	609a      	str	r2, [r3, #8]
}
 800eb24:	bf00      	nop
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	609a      	str	r2, [r3, #8]
}
 800eb44:	bf00      	nop
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb5c:	b29b      	uxth	r3, r3
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800eb6a:	b480      	push	{r7}
 800eb6c:	b083      	sub	sp, #12
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f003 0302 	and.w	r3, r3, #2
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	bf0c      	ite	eq
 800eb7e:	2301      	moveq	r3, #1
 800eb80:	2300      	movne	r3, #0
 800eb82:	b2db      	uxtb	r3, r3
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <adc_init>:

#define ADC1_CONVERSION_TIMEOUT 1000

static void adc1_init(void);

void adc_init(AdcID id) {
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	4603      	mov	r3, r0
 800eb98:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 800eb9a:	79fb      	ldrb	r3, [r7, #7]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d108      	bne.n	800ebb2 <adc_init+0x22>
	case AdcId1:
		adc1_init();
 800eba0:	f000 f85c 	bl	800ec5c <adc1_init>
		LL_ADC_Enable(ADC1);
 800eba4:	4808      	ldr	r0, [pc, #32]	; (800ebc8 <adc_init+0x38>)
 800eba6:	f7ff ffb3 	bl	800eb10 <LL_ADC_Enable>
		hal_cli_printf("adc1 init");
 800ebaa:	4808      	ldr	r0, [pc, #32]	; (800ebcc <adc_init+0x3c>)
 800ebac:	f000 f99e 	bl	800eeec <hal_cli_printf>
		break;
 800ebb0:	e005      	b.n	800ebbe <adc_init+0x2e>

	default:
		hal_cli_printf("adc%d not exist",id);
 800ebb2:	79fb      	ldrb	r3, [r7, #7]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4806      	ldr	r0, [pc, #24]	; (800ebd0 <adc_init+0x40>)
 800ebb8:	f000 f998 	bl	800eeec <hal_cli_printf>
		break;
 800ebbc:	bf00      	nop
	}
}
 800ebbe:	bf00      	nop
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	40012000 	.word	0x40012000
 800ebcc:	08013e70 	.word	0x08013e70
 800ebd0:	08013e7c 	.word	0x08013e7c

0800ebd4 <hal_adc_getdata>:

bool hal_adc_getdata(AdcID id, uint32_t* data) {
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4603      	mov	r3, r0
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	73fb      	strb	r3, [r7, #15]
	coretex_timer timer;
	timer = hal_get_delay_timer(ADC1_CONVERSION_TIMEOUT);
 800ebe0:	463b      	mov	r3, r7
 800ebe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 fc62 	bl	800f4b0 <hal_get_delay_timer>
 800ebec:	f107 0310 	add.w	r3, r7, #16
 800ebf0:	463a      	mov	r2, r7
 800ebf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebf6:	e883 0003 	stmia.w	r3, {r0, r1}

	switch(id) {
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d11d      	bne.n	800ec3c <hal_adc_getdata+0x68>
		case AdcId1:
			LL_ADC_REG_StartConversionSWStart(ADC1);
 800ec00:	4813      	ldr	r0, [pc, #76]	; (800ec50 <hal_adc_getdata+0x7c>)
 800ec02:	f7ff ff95 	bl	800eb30 <LL_ADC_REG_StartConversionSWStart>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800ec06:	e009      	b.n	800ec1c <hal_adc_getdata+0x48>
				if(hal_delay_timer_is_expired(&timer))
 800ec08:	f107 0310 	add.w	r3, r7, #16
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 fc75 	bl	800f4fc <hal_delay_timer_is_expired>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <hal_adc_getdata+0x48>
					return false;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e015      	b.n	800ec48 <hal_adc_getdata+0x74>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800ec1c:	480c      	ldr	r0, [pc, #48]	; (800ec50 <hal_adc_getdata+0x7c>)
 800ec1e:	f7ff ffa4 	bl	800eb6a <LL_ADC_IsActiveFlag_EOCS>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d0ef      	beq.n	800ec08 <hal_adc_getdata+0x34>
			}
			*data = LL_ADC_REG_ReadConversionData12(ADC1);
 800ec28:	4809      	ldr	r0, [pc, #36]	; (800ec50 <hal_adc_getdata+0x7c>)
 800ec2a:	f7ff ff91 	bl	800eb50 <LL_ADC_REG_ReadConversionData12>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	461a      	mov	r2, r3
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	601a      	str	r2, [r3, #0]
			break;
 800ec36:	bf00      	nop
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
			return false;
			break;
	}

	return true;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e005      	b.n	800ec48 <hal_adc_getdata+0x74>
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
 800ec3c:	2229      	movs	r2, #41	; 0x29
 800ec3e:	4905      	ldr	r1, [pc, #20]	; (800ec54 <hal_adc_getdata+0x80>)
 800ec40:	4805      	ldr	r0, [pc, #20]	; (800ec58 <hal_adc_getdata+0x84>)
 800ec42:	f000 f953 	bl	800eeec <hal_cli_printf>
			return false;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3718      	adds	r7, #24
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	40012000 	.word	0x40012000
 800ec54:	08013e8c 	.word	0x08013e8c
 800ec58:	08013e9c 	.word	0x08013e9c

0800ec5c <adc1_init>:

static void adc1_init(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b08c      	sub	sp, #48	; 0x30
 800ec60:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800ec62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec66:	2200      	movs	r2, #0
 800ec68:	601a      	str	r2, [r3, #0]
 800ec6a:	605a      	str	r2, [r3, #4]
 800ec6c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800ec6e:	f107 0310 	add.w	r3, r7, #16
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	605a      	str	r2, [r3, #4]
 800ec78:	609a      	str	r2, [r3, #8]
 800ec7a:	60da      	str	r2, [r3, #12]
 800ec7c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800ec7e:	463b      	mov	r3, r7
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	605a      	str	r2, [r3, #4]
 800ec86:	609a      	str	r2, [r3, #8]
 800ec88:	60da      	str	r2, [r3, #12]

  hal_gpio_init(&gpio_adc1_channel7, GpioModeAnalog, GpioPullNo, GpioSpeedFreqLow);
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	2105      	movs	r1, #5
 800ec90:	481e      	ldr	r0, [pc, #120]	; (800ed0c <adc1_init+0xb0>)
 800ec92:	f000 fe81 	bl	800f998 <hal_gpio_init>

  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800ec96:	2300      	movs	r3, #0
 800ec98:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800eca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eca6:	4619      	mov	r1, r3
 800eca8:	4819      	ldr	r0, [pc, #100]	; (800ed10 <adc1_init+0xb4>)
 800ecaa:	f7f4 fd25 	bl	80036f8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800ecc2:	f107 0310 	add.w	r3, r7, #16
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4811      	ldr	r0, [pc, #68]	; (800ed10 <adc1_init+0xb4>)
 800ecca:	f7f4 fd41 	bl	8003750 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800ecce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ecd2:	480f      	ldr	r0, [pc, #60]	; (800ed10 <adc1_init+0xb4>)
 800ecd4:	f7ff febd 	bl	800ea52 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800ecd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ecdc:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800ecde:	2300      	movs	r3, #0
 800ece0:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800ece2:	463b      	mov	r3, r7
 800ece4:	4619      	mov	r1, r3
 800ece6:	480b      	ldr	r0, [pc, #44]	; (800ed14 <adc1_init+0xb8>)
 800ece8:	f7f4 fcbe 	bl	8003668 <LL_ADC_CommonInit>


  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800ecec:	4a0a      	ldr	r2, [pc, #40]	; (800ed18 <adc1_init+0xbc>)
 800ecee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ecf2:	4807      	ldr	r0, [pc, #28]	; (800ed10 <adc1_init+0xb4>)
 800ecf4:	f7ff fe77 	bl	800e9e6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	4907      	ldr	r1, [pc, #28]	; (800ed18 <adc1_init+0xbc>)
 800ecfc:	4804      	ldr	r0, [pc, #16]	; (800ed10 <adc1_init+0xb4>)
 800ecfe:	f7ff febb 	bl	800ea78 <LL_ADC_SetChannelSamplingTime>
}
 800ed02:	bf00      	nop
 800ed04:	3730      	adds	r7, #48	; 0x30
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	08014714 	.word	0x08014714
 800ed10:	40012000 	.word	0x40012000
 800ed14:	40012300 	.word	0x40012300
 800ed18:	03500007 	.word	0x03500007

0800ed1c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b089      	sub	sp, #36	; 0x24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	330c      	adds	r3, #12
 800ed28:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	e853 3f00 	ldrex	r3, [r3]
 800ed30:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f043 0310 	orr.w	r3, r3, #16
 800ed38:	61fb      	str	r3, [r7, #28]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	330c      	adds	r3, #12
 800ed3e:	69fa      	ldr	r2, [r7, #28]
 800ed40:	61ba      	str	r2, [r7, #24]
 800ed42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6979      	ldr	r1, [r7, #20]
 800ed46:	69ba      	ldr	r2, [r7, #24]
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e7      	bne.n	800ed24 <LL_USART_EnableIT_IDLE+0x8>
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	3724      	adds	r7, #36	; 0x24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr

0800ed62 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800ed62:	b480      	push	{r7}
 800ed64:	b089      	sub	sp, #36	; 0x24
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3314      	adds	r3, #20
 800ed6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	e853 3f00 	ldrex	r3, [r3]
 800ed76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed7e:	61fb      	str	r3, [r7, #28]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	3314      	adds	r3, #20
 800ed84:	69fa      	ldr	r2, [r7, #28]
 800ed86:	61ba      	str	r2, [r7, #24]
 800ed88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8a:	6979      	ldr	r1, [r7, #20]
 800ed8c:	69ba      	ldr	r2, [r7, #24]
 800ed8e:	e841 2300 	strex	r3, r2, [r1]
 800ed92:	613b      	str	r3, [r7, #16]
   return(result);
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d1e7      	bne.n	800ed6a <LL_USART_EnableDMAReq_RX+0x8>
}
 800ed9a:	bf00      	nop
 800ed9c:	bf00      	nop
 800ed9e:	3724      	adds	r7, #36	; 0x24
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800edb2:	4a0c      	ldr	r2, [pc, #48]	; (800ede4 <LL_DMA_EnableStream+0x3c>)
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	4413      	add	r3, r2
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4413      	add	r3, r2
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4908      	ldr	r1, [pc, #32]	; (800ede4 <LL_DMA_EnableStream+0x3c>)
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	440a      	add	r2, r1
 800edc8:	7812      	ldrb	r2, [r2, #0]
 800edca:	4611      	mov	r1, r2
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	440a      	add	r2, r1
 800edd0:	f043 0301 	orr.w	r3, r3, #1
 800edd4:	6013      	str	r3, [r2, #0]
}
 800edd6:	bf00      	nop
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	080146cc 	.word	0x080146cc

0800ede8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800ede8:	b480      	push	{r7}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800edf4:	4a0d      	ldr	r2, [pc, #52]	; (800ee2c <LL_DMA_SetDataLength+0x44>)
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	4413      	add	r3, r2
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	461a      	mov	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	4413      	add	r3, r2
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	0c1b      	lsrs	r3, r3, #16
 800ee06:	041b      	lsls	r3, r3, #16
 800ee08:	4908      	ldr	r1, [pc, #32]	; (800ee2c <LL_DMA_SetDataLength+0x44>)
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	440a      	add	r2, r1
 800ee0e:	7812      	ldrb	r2, [r2, #0]
 800ee10:	4611      	mov	r1, r2
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	440a      	add	r2, r1
 800ee16:	4611      	mov	r1, r2
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	604b      	str	r3, [r1, #4]
}
 800ee1e:	bf00      	nop
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	080146cc 	.word	0x080146cc

0800ee30 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800ee3c:	4a07      	ldr	r2, [pc, #28]	; (800ee5c <LL_DMA_SetMemoryAddress+0x2c>)
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	4413      	add	r3, r2
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	461a      	mov	r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	4413      	add	r3, r2
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	60d3      	str	r3, [r2, #12]
}
 800ee50:	bf00      	nop
 800ee52:	3714      	adds	r7, #20
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	080146cc 	.word	0x080146cc

0800ee60 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800ee6c:	4a07      	ldr	r2, [pc, #28]	; (800ee8c <LL_DMA_SetPeriphAddress+0x2c>)
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	4413      	add	r3, r2
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	461a      	mov	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	4413      	add	r3, r2
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6093      	str	r3, [r2, #8]
}
 800ee80:	bf00      	nop
 800ee82:	3714      	adds	r7, #20
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	080146cc 	.word	0x080146cc

0800ee90 <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 800ee96:	f7fb fce7 	bl	800a868 <xTaskGetTickCount>
 800ee9a:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	4a10      	ldr	r2, [pc, #64]	; (800eee0 <print_boottime+0x50>)
 800eea0:	fba2 2303 	umull	r2, r3, r2, r3
 800eea4:	099b      	lsrs	r3, r3, #6
 800eea6:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	4a0d      	ldr	r2, [pc, #52]	; (800eee0 <print_boottime+0x50>)
 800eeac:	fba2 1203 	umull	r1, r2, r2, r3
 800eeb0:	0992      	lsrs	r2, r2, #6
 800eeb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eeb6:	fb01 f202 	mul.w	r2, r1, r2
 800eeba:	1a9b      	subs	r3, r3, r2
 800eebc:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	4908      	ldr	r1, [pc, #32]	; (800eee4 <print_boottime+0x54>)
 800eec4:	4808      	ldr	r0, [pc, #32]	; (800eee8 <print_boottime+0x58>)
 800eec6:	f004 fa6b 	bl	80133a0 <siprintf>
 800eeca:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	461a      	mov	r2, r3
 800eed0:	4905      	ldr	r1, [pc, #20]	; (800eee8 <print_boottime+0x58>)
 800eed2:	2000      	movs	r0, #0
 800eed4:	f003 feec 	bl	8012cb0 <hal_uart_transfer>
}
 800eed8:	bf00      	nop
 800eeda:	3710      	adds	r7, #16
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	10624dd3 	.word	0x10624dd3
 800eee4:	08013eac 	.word	0x08013eac
 800eee8:	200049f8 	.word	0x200049f8

0800eeec <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 800eeec:	b40f      	push	{r0, r1, r2, r3}
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b082      	sub	sp, #8
 800eef2:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 800eef4:	4b17      	ldr	r3, [pc, #92]	; (800ef54 <hal_cli_printf+0x68>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fa fe35 	bl	8009b6c <xQueueSemaphoreTake>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d11d      	bne.n	800ef44 <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 800ef08:	f7ff ffc2 	bl	800ee90 <print_boottime>

	va_start(valist, fmt);
 800ef0c:	f107 0314 	add.w	r3, r7, #20
 800ef10:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 800ef12:	683a      	ldr	r2, [r7, #0]
 800ef14:	6939      	ldr	r1, [r7, #16]
 800ef16:	4810      	ldr	r0, [pc, #64]	; (800ef58 <hal_cli_printf+0x6c>)
 800ef18:	f004 fa78 	bl	801340c <vsiprintf>
 800ef1c:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	461a      	mov	r2, r3
 800ef22:	490d      	ldr	r1, [pc, #52]	; (800ef58 <hal_cli_printf+0x6c>)
 800ef24:	2000      	movs	r0, #0
 800ef26:	f003 fec3 	bl	8012cb0 <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	490b      	ldr	r1, [pc, #44]	; (800ef5c <hal_cli_printf+0x70>)
 800ef2e:	2000      	movs	r0, #0
 800ef30:	f003 febe 	bl	8012cb0 <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 800ef34:	4b07      	ldr	r3, [pc, #28]	; (800ef54 <hal_cli_printf+0x68>)
 800ef36:	6818      	ldr	r0, [r3, #0]
 800ef38:	2300      	movs	r3, #0
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	f7fa fb21 	bl	8009584 <xQueueGenericSend>
 800ef42:	e000      	b.n	800ef46 <hal_cli_printf+0x5a>
		return;
 800ef44:	bf00      	nop
}
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef4e:	b004      	add	sp, #16
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	200049f4 	.word	0x200049f4
 800ef58:	200049f8 	.word	0x200049f8
 800ef5c:	08013eb8 	.word	0x08013eb8

0800ef60 <hal_cli_init>:

void hal_cli_init(void) {
 800ef60:	b580      	push	{r7, lr}
 800ef62:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 800ef64:	4b17      	ldr	r3, [pc, #92]	; (800efc4 <hal_cli_init+0x64>)
 800ef66:	2200      	movs	r2, #0
 800ef68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 800ef6c:	4b15      	ldr	r3, [pc, #84]	; (800efc4 <hal_cli_init+0x64>)
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 800ef74:	4b13      	ldr	r3, [pc, #76]	; (800efc4 <hal_cli_init+0x64>)
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	f7fa fae9 	bl	8009554 <xQueueCreateMutex>
 800ef82:	4603      	mov	r3, r0
 800ef84:	4a10      	ldr	r2, [pc, #64]	; (800efc8 <hal_cli_init+0x68>)
 800ef86:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 800ef88:	4b10      	ldr	r3, [pc, #64]	; (800efcc <hal_cli_init+0x6c>)
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	2102      	movs	r1, #2
 800ef8e:	4810      	ldr	r0, [pc, #64]	; (800efd0 <hal_cli_init+0x70>)
 800ef90:	f7ff ff4e 	bl	800ee30 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800ef94:	4a0f      	ldr	r2, [pc, #60]	; (800efd4 <hal_cli_init+0x74>)
 800ef96:	2102      	movs	r1, #2
 800ef98:	480d      	ldr	r0, [pc, #52]	; (800efd0 <hal_cli_init+0x70>)
 800ef9a:	f7ff ff61 	bl	800ee60 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 800ef9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efa2:	2102      	movs	r1, #2
 800efa4:	480a      	ldr	r0, [pc, #40]	; (800efd0 <hal_cli_init+0x70>)
 800efa6:	f7ff ff1f 	bl	800ede8 <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 800efaa:	480b      	ldr	r0, [pc, #44]	; (800efd8 <hal_cli_init+0x78>)
 800efac:	f7ff fed9 	bl	800ed62 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800efb0:	2102      	movs	r1, #2
 800efb2:	4807      	ldr	r0, [pc, #28]	; (800efd0 <hal_cli_init+0x70>)
 800efb4:	f7ff fef8 	bl	800eda8 <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 800efb8:	4807      	ldr	r0, [pc, #28]	; (800efd8 <hal_cli_init+0x78>)
 800efba:	f7ff feaf 	bl	800ed1c <LL_USART_EnableIT_IDLE>
}
 800efbe:	bf00      	nop
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	200049f8 	.word	0x200049f8
 800efc8:	200049f4 	.word	0x200049f4
 800efcc:	20004af8 	.word	0x20004af8
 800efd0:	40026400 	.word	0x40026400
 800efd4:	40011004 	.word	0x40011004
 800efd8:	40011000 	.word	0x40011000

0800efdc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800efe4:	4b08      	ldr	r3, [pc, #32]	; (800f008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800efe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efe8:	4907      	ldr	r1, [pc, #28]	; (800f008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4313      	orrs	r3, r2
 800efee:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800eff0:	4b05      	ldr	r3, [pc, #20]	; (800f008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800eff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4013      	ands	r3, r2
 800eff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800effa:	68fb      	ldr	r3, [r7, #12]
}
 800effc:	bf00      	nop
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	40023800 	.word	0x40023800

0800f00c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b085      	sub	sp, #20
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800f014:	4b08      	ldr	r3, [pc, #32]	; (800f038 <LL_APB1_GRP1_EnableClock+0x2c>)
 800f016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f018:	4907      	ldr	r1, [pc, #28]	; (800f038 <LL_APB1_GRP1_EnableClock+0x2c>)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800f020:	4b05      	ldr	r3, [pc, #20]	; (800f038 <LL_APB1_GRP1_EnableClock+0x2c>)
 800f022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4013      	ands	r3, r2
 800f028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f02a:	68fb      	ldr	r3, [r7, #12]
}
 800f02c:	bf00      	nop
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	40023800 	.word	0x40023800

0800f03c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800f044:	4b08      	ldr	r3, [pc, #32]	; (800f068 <LL_APB2_GRP1_EnableClock+0x2c>)
 800f046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f048:	4907      	ldr	r1, [pc, #28]	; (800f068 <LL_APB2_GRP1_EnableClock+0x2c>)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4313      	orrs	r3, r2
 800f04e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800f050:	4b05      	ldr	r3, [pc, #20]	; (800f068 <LL_APB2_GRP1_EnableClock+0x2c>)
 800f052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4013      	ands	r3, r2
 800f058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f05a:	68fb      	ldr	r3, [r7, #12]
}
 800f05c:	bf00      	nop
 800f05e:	3714      	adds	r7, #20
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr
 800f068:	40023800 	.word	0x40023800

0800f06c <LL_RCC_HSE_Enable>:
{
 800f06c:	b480      	push	{r7}
 800f06e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800f070:	4b05      	ldr	r3, [pc, #20]	; (800f088 <LL_RCC_HSE_Enable+0x1c>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4a04      	ldr	r2, [pc, #16]	; (800f088 <LL_RCC_HSE_Enable+0x1c>)
 800f076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f07a:	6013      	str	r3, [r2, #0]
}
 800f07c:	bf00      	nop
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop
 800f088:	40023800 	.word	0x40023800

0800f08c <LL_RCC_HSE_IsReady>:
{
 800f08c:	b480      	push	{r7}
 800f08e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800f090:	4b07      	ldr	r3, [pc, #28]	; (800f0b0 <LL_RCC_HSE_IsReady+0x24>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f09c:	bf0c      	ite	eq
 800f09e:	2301      	moveq	r3, #1
 800f0a0:	2300      	movne	r3, #0
 800f0a2:	b2db      	uxtb	r3, r3
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	40023800 	.word	0x40023800

0800f0b4 <LL_RCC_SetSysClkSource>:
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f0bc:	4b06      	ldr	r3, [pc, #24]	; (800f0d8 <LL_RCC_SetSysClkSource+0x24>)
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	f023 0203 	bic.w	r2, r3, #3
 800f0c4:	4904      	ldr	r1, [pc, #16]	; (800f0d8 <LL_RCC_SetSysClkSource+0x24>)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	608b      	str	r3, [r1, #8]
}
 800f0cc:	bf00      	nop
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	40023800 	.word	0x40023800

0800f0dc <LL_RCC_GetSysClkSource>:
{
 800f0dc:	b480      	push	{r7}
 800f0de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f0e0:	4b04      	ldr	r3, [pc, #16]	; (800f0f4 <LL_RCC_GetSysClkSource+0x18>)
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	f003 030c 	and.w	r3, r3, #12
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	40023800 	.word	0x40023800

0800f0f8 <LL_RCC_SetAHBPrescaler>:
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f100:	4b06      	ldr	r3, [pc, #24]	; (800f11c <LL_RCC_SetAHBPrescaler+0x24>)
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f108:	4904      	ldr	r1, [pc, #16]	; (800f11c <LL_RCC_SetAHBPrescaler+0x24>)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	608b      	str	r3, [r1, #8]
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr
 800f11c:	40023800 	.word	0x40023800

0800f120 <LL_RCC_SetAPB1Prescaler>:
{
 800f120:	b480      	push	{r7}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f128:	4b06      	ldr	r3, [pc, #24]	; (800f144 <LL_RCC_SetAPB1Prescaler+0x24>)
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f130:	4904      	ldr	r1, [pc, #16]	; (800f144 <LL_RCC_SetAPB1Prescaler+0x24>)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4313      	orrs	r3, r2
 800f136:	608b      	str	r3, [r1, #8]
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr
 800f144:	40023800 	.word	0x40023800

0800f148 <LL_RCC_SetAPB2Prescaler>:
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f150:	4b06      	ldr	r3, [pc, #24]	; (800f16c <LL_RCC_SetAPB2Prescaler+0x24>)
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f158:	4904      	ldr	r1, [pc, #16]	; (800f16c <LL_RCC_SetAPB2Prescaler+0x24>)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4313      	orrs	r3, r2
 800f15e:	608b      	str	r3, [r1, #8]
}
 800f160:	bf00      	nop
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr
 800f16c:	40023800 	.word	0x40023800

0800f170 <LL_RCC_SetTIMPrescaler>:
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800f178:	4b07      	ldr	r3, [pc, #28]	; (800f198 <LL_RCC_SetTIMPrescaler+0x28>)
 800f17a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f17e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f182:	4905      	ldr	r1, [pc, #20]	; (800f198 <LL_RCC_SetTIMPrescaler+0x28>)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4313      	orrs	r3, r2
 800f188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr
 800f198:	40023800 	.word	0x40023800

0800f19c <LL_RCC_PLL_Enable>:
{
 800f19c:	b480      	push	{r7}
 800f19e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f1a0:	4b05      	ldr	r3, [pc, #20]	; (800f1b8 <LL_RCC_PLL_Enable+0x1c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a04      	ldr	r2, [pc, #16]	; (800f1b8 <LL_RCC_PLL_Enable+0x1c>)
 800f1a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f1aa:	6013      	str	r3, [r2, #0]
}
 800f1ac:	bf00      	nop
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	40023800 	.word	0x40023800

0800f1bc <LL_RCC_PLL_IsReady>:
{
 800f1bc:	b480      	push	{r7}
 800f1be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800f1c0:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <LL_RCC_PLL_IsReady+0x24>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1cc:	bf0c      	ite	eq
 800f1ce:	2301      	moveq	r3, #1
 800f1d0:	2300      	movne	r3, #0
 800f1d2:	b2db      	uxtb	r3, r3
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	40023800 	.word	0x40023800

0800f1e4 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
 800f1f0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800f1f2:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f1f4:	685a      	ldr	r2, [r3, #4]
 800f1f6:	4b0d      	ldr	r3, [pc, #52]	; (800f22c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800f1f8:	4013      	ands	r3, r2
 800f1fa:	68f9      	ldr	r1, [r7, #12]
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	4311      	orrs	r1, r2
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	0192      	lsls	r2, r2, #6
 800f204:	430a      	orrs	r2, r1
 800f206:	4908      	ldr	r1, [pc, #32]	; (800f228 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f208:	4313      	orrs	r3, r2
 800f20a:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800f20c:	4b06      	ldr	r3, [pc, #24]	; (800f228 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f214:	4904      	ldr	r1, [pc, #16]	; (800f228 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	4313      	orrs	r3, r2
 800f21a:	604b      	str	r3, [r1, #4]
}
 800f21c:	bf00      	nop
 800f21e:	3714      	adds	r7, #20
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr
 800f228:	40023800 	.word	0x40023800
 800f22c:	ffbf8000 	.word	0xffbf8000

0800f230 <LL_RCC_PLL_ConfigDomain_48M>:
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
 800f23c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800f23e:	4b0a      	ldr	r3, [pc, #40]	; (800f268 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800f240:	685a      	ldr	r2, [r3, #4]
 800f242:	4b0a      	ldr	r3, [pc, #40]	; (800f26c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 800f244:	4013      	ands	r3, r2
 800f246:	68f9      	ldr	r1, [r7, #12]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	4311      	orrs	r1, r2
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	0192      	lsls	r2, r2, #6
 800f250:	4311      	orrs	r1, r2
 800f252:	683a      	ldr	r2, [r7, #0]
 800f254:	430a      	orrs	r2, r1
 800f256:	4904      	ldr	r1, [pc, #16]	; (800f268 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800f258:	4313      	orrs	r3, r2
 800f25a:	604b      	str	r3, [r1, #4]
}
 800f25c:	bf00      	nop
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr
 800f268:	40023800 	.word	0x40023800
 800f26c:	f0bf8000 	.word	0xf0bf8000

0800f270 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800f278:	4b06      	ldr	r3, [pc, #24]	; (800f294 <LL_FLASH_SetLatency+0x24>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f023 020f 	bic.w	r2, r3, #15
 800f280:	4904      	ldr	r1, [pc, #16]	; (800f294 <LL_FLASH_SetLatency+0x24>)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4313      	orrs	r3, r2
 800f286:	600b      	str	r3, [r1, #0]
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr
 800f294:	40023c00 	.word	0x40023c00

0800f298 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800f298:	b480      	push	{r7}
 800f29a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800f29c:	4b04      	ldr	r3, [pc, #16]	; (800f2b0 <LL_FLASH_GetLatency+0x18>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f003 030f 	and.w	r3, r3, #15
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	40023c00 	.word	0x40023c00

0800f2b4 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800f2b8:	4b05      	ldr	r3, [pc, #20]	; (800f2d0 <LL_PWR_EnableOverDriveMode+0x1c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a04      	ldr	r2, [pc, #16]	; (800f2d0 <LL_PWR_EnableOverDriveMode+0x1c>)
 800f2be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f2c2:	6013      	str	r3, [r2, #0]
}
 800f2c4:	bf00      	nop
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop
 800f2d0:	40007000 	.word	0x40007000

0800f2d4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800f2dc:	4b06      	ldr	r3, [pc, #24]	; (800f2f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f2e4:	4904      	ldr	r1, [pc, #16]	; (800f2f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	600b      	str	r3, [r1, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	40007000 	.word	0x40007000

0800f2fc <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800f300:	2001      	movs	r0, #1
 800f302:	f7ff fe6b 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800f306:	2002      	movs	r0, #2
 800f308:	f7ff fe68 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800f30c:	2004      	movs	r0, #4
 800f30e:	f7ff fe65 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800f312:	2008      	movs	r0, #8
 800f314:	f7ff fe62 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800f318:	2010      	movs	r0, #16
 800f31a:	f7ff fe5f 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800f31e:	2020      	movs	r0, #32
 800f320:	f7ff fe5c 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800f324:	2040      	movs	r0, #64	; 0x40
 800f326:	f7ff fe59 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800f32a:	2080      	movs	r0, #128	; 0x80
 800f32c:	f7ff fe56 	bl	800efdc <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800f330:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f334:	f7ff fe52 	bl	800efdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800f338:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f33c:	f7ff fe4e 	bl	800efdc <LL_AHB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800f340:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f344:	f7ff fe7a 	bl	800f03c <LL_APB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800f348:	2004      	movs	r0, #4
 800f34a:	f7ff fe5f 	bl	800f00c <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800f34e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f352:	f7ff fe5b 	bl	800f00c <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800f356:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f35a:	f7ff fe57 	bl	800f00c <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800f35e:	2010      	movs	r0, #16
 800f360:	f7ff fe6c 	bl	800f03c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800f364:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f368:	f7ff fe50 	bl	800f00c <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800f36c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f370:	f7ff fe4c 	bl	800f00c <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 800f374:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f378:	f7ff fe60 	bl	800f03c <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 800f37c:	bf00      	nop
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800f386:	2005      	movs	r0, #5
 800f388:	f7ff ff72 	bl	800f270 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800f38c:	bf00      	nop
 800f38e:	f7ff ff83 	bl	800f298 <LL_FLASH_GetLatency>
 800f392:	4603      	mov	r3, r0
 800f394:	2b05      	cmp	r3, #5
 800f396:	d1fa      	bne.n	800f38e <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800f398:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800f39c:	f7ff ff9a 	bl	800f2d4 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800f3a0:	f7ff ff88 	bl	800f2b4 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800f3a4:	f7ff fe62 	bl	800f06c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800f3a8:	bf00      	nop
 800f3aa:	f7ff fe6f 	bl	800f08c <LL_RCC_HSE_IsReady>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d1fa      	bne.n	800f3aa <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	22b4      	movs	r2, #180	; 0xb4
 800f3b8:	2104      	movs	r1, #4
 800f3ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f3be:	f7ff ff11 	bl	800f1e4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 800f3c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f3c6:	22b4      	movs	r2, #180	; 0xb4
 800f3c8:	2104      	movs	r1, #4
 800f3ca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f3ce:	f7ff ff2f 	bl	800f230 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 800f3d2:	f7ff fee3 	bl	800f19c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800f3d6:	bf00      	nop
 800f3d8:	f7ff fef0 	bl	800f1bc <LL_RCC_PLL_IsReady>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d1fa      	bne.n	800f3d8 <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	f7ff fe88 	bl	800f0f8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800f3e8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800f3ec:	f7ff fe98 	bl	800f120 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800f3f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f3f4:	f7ff fea8 	bl	800f148 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800f3f8:	2002      	movs	r0, #2
 800f3fa:	f7ff fe5b 	bl	800f0b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800f3fe:	bf00      	nop
 800f400:	f7ff fe6c 	bl	800f0dc <LL_RCC_GetSysClkSource>
 800f404:	4603      	mov	r3, r0
 800f406:	2b08      	cmp	r3, #8
 800f408:	d1fa      	bne.n	800f400 <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 800f40a:	4808      	ldr	r0, [pc, #32]	; (800f42c <hal_clock_init_early+0xac>)
 800f40c:	f7f5 ff74 	bl	80052f8 <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800f410:	463b      	mov	r3, r7
 800f412:	4618      	mov	r0, r3
 800f414:	f7f4 fd0c 	bl	8003e30 <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800f418:	2005      	movs	r0, #5
 800f41a:	f002 feb1 	bl	8012180 <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800f41e:	2000      	movs	r0, #0
 800f420:	f7ff fea6 	bl	800f170 <LL_RCC_SetTIMPrescaler>
}
 800f424:	bf00      	nop
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	0aba9500 	.word	0x0aba9500

0800f430 <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 800f430:	b480      	push	{r7}
 800f432:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800f434:	4b09      	ldr	r3, [pc, #36]	; (800f45c <hal_dwt_init_early+0x2c>)
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	4a08      	ldr	r2, [pc, #32]	; (800f45c <hal_dwt_init_early+0x2c>)
 800f43a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f43e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800f440:	4b07      	ldr	r3, [pc, #28]	; (800f460 <hal_dwt_init_early+0x30>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a06      	ldr	r2, [pc, #24]	; (800f460 <hal_dwt_init_early+0x30>)
 800f446:	f043 0301 	orr.w	r3, r3, #1
 800f44a:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 800f44c:	4b04      	ldr	r3, [pc, #16]	; (800f460 <hal_dwt_init_early+0x30>)
 800f44e:	2200      	movs	r2, #0
 800f450:	605a      	str	r2, [r3, #4]
}
 800f452:	bf00      	nop
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr
 800f45c:	e000edf0 	.word	0xe000edf0
 800f460:	e0001000 	.word	0xe0001000

0800f464 <hal_delay_us>:
#include "delay.h"
#include <stdbool.h>

void hal_delay_us(uint32_t microseconds) {
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800f46c:	4b0d      	ldr	r3, [pc, #52]	; (800f4a4 <hal_delay_us+0x40>)
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	60fb      	str	r3, [r7, #12]
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
 800f472:	4b0d      	ldr	r3, [pc, #52]	; (800f4a8 <hal_delay_us+0x44>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4a0d      	ldr	r2, [pc, #52]	; (800f4ac <hal_delay_us+0x48>)
 800f478:	fba2 2303 	umull	r2, r3, r2, r3
 800f47c:	0c9a      	lsrs	r2, r3, #18
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	fb02 f303 	mul.w	r3, r2, r3
 800f484:	60bb      	str	r3, [r7, #8]
    while((DWT->CYCCNT - start) < time_ticks) {
 800f486:	bf00      	nop
 800f488:	4b06      	ldr	r3, [pc, #24]	; (800f4a4 <hal_delay_us+0x40>)
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	429a      	cmp	r2, r3
 800f494:	d8f8      	bhi.n	800f488 <hal_delay_us+0x24>
    };
}
 800f496:	bf00      	nop
 800f498:	bf00      	nop
 800f49a:	3714      	adds	r7, #20
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	e0001000 	.word	0xe0001000
 800f4a8:	20000014 	.word	0x20000014
 800f4ac:	431bde83 	.word	0x431bde83

0800f4b0 <hal_get_delay_timer>:

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 800f4b0:	b480      	push	{r7}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 800f4ba:	4b0d      	ldr	r3, [pc, #52]	; (800f4f0 <hal_get_delay_timer+0x40>)
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000) * timeout;
 800f4c0:	4b0c      	ldr	r3, [pc, #48]	; (800f4f4 <hal_get_delay_timer+0x44>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4a0c      	ldr	r2, [pc, #48]	; (800f4f8 <hal_get_delay_timer+0x48>)
 800f4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f4ca:	099b      	lsrs	r3, r3, #6
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	fb02 f303 	mul.w	r3, r2, r3
 800f4d2:	60fb      	str	r3, [r7, #12]
	return tmp;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	f107 0308 	add.w	r3, r7, #8
 800f4dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4e0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	3714      	adds	r7, #20
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	e0001000 	.word	0xe0001000
 800f4f4:	20000014 	.word	0x20000014
 800f4f8:	10624dd3 	.word	0x10624dd3

0800f4fc <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 800f504:	4b08      	ldr	r3, [pc, #32]	; (800f528 <hal_delay_timer_is_expired+0x2c>)
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	1ad2      	subs	r2, r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	429a      	cmp	r2, r3
 800f514:	bf2c      	ite	cs
 800f516:	2301      	movcs	r3, #1
 800f518:	2300      	movcc	r3, #0
 800f51a:	b2db      	uxtb	r3, r3
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	e0001000 	.word	0xe0001000

0800f52c <LL_GPIO_SetPinMode>:
{
 800f52c:	b480      	push	{r7}
 800f52e:	b089      	sub	sp, #36	; 0x24
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	fa93 f3a3 	rbit	r3, r3
 800f546:	613b      	str	r3, [r7, #16]
  return result;
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	fab3 f383 	clz	r3, r3
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	005b      	lsls	r3, r3, #1
 800f552:	2103      	movs	r1, #3
 800f554:	fa01 f303 	lsl.w	r3, r1, r3
 800f558:	43db      	mvns	r3, r3
 800f55a:	401a      	ands	r2, r3
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	fa93 f3a3 	rbit	r3, r3
 800f566:	61bb      	str	r3, [r7, #24]
  return result;
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	fab3 f383 	clz	r3, r3
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	005b      	lsls	r3, r3, #1
 800f572:	6879      	ldr	r1, [r7, #4]
 800f574:	fa01 f303 	lsl.w	r3, r1, r3
 800f578:	431a      	orrs	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	601a      	str	r2, [r3, #0]
}
 800f57e:	bf00      	nop
 800f580:	3724      	adds	r7, #36	; 0x24
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr

0800f58a <LL_GPIO_SetPinOutputType>:
{
 800f58a:	b480      	push	{r7}
 800f58c:	b085      	sub	sp, #20
 800f58e:	af00      	add	r7, sp, #0
 800f590:	60f8      	str	r0, [r7, #12]
 800f592:	60b9      	str	r1, [r7, #8]
 800f594:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	43db      	mvns	r3, r3
 800f59e:	401a      	ands	r2, r3
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	6879      	ldr	r1, [r7, #4]
 800f5a4:	fb01 f303 	mul.w	r3, r1, r3
 800f5a8:	431a      	orrs	r2, r3
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	605a      	str	r2, [r3, #4]
}
 800f5ae:	bf00      	nop
 800f5b0:	3714      	adds	r7, #20
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <LL_GPIO_SetPinSpeed>:
{
 800f5ba:	b480      	push	{r7}
 800f5bc:	b089      	sub	sp, #36	; 0x24
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	60f8      	str	r0, [r7, #12]
 800f5c2:	60b9      	str	r1, [r7, #8]
 800f5c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	689a      	ldr	r2, [r3, #8]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	fa93 f3a3 	rbit	r3, r3
 800f5d4:	613b      	str	r3, [r7, #16]
  return result;
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	fab3 f383 	clz	r3, r3
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	005b      	lsls	r3, r3, #1
 800f5e0:	2103      	movs	r1, #3
 800f5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5e6:	43db      	mvns	r3, r3
 800f5e8:	401a      	ands	r2, r3
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	fa93 f3a3 	rbit	r3, r3
 800f5f4:	61bb      	str	r3, [r7, #24]
  return result;
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	fab3 f383 	clz	r3, r3
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	005b      	lsls	r3, r3, #1
 800f600:	6879      	ldr	r1, [r7, #4]
 800f602:	fa01 f303 	lsl.w	r3, r1, r3
 800f606:	431a      	orrs	r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	609a      	str	r2, [r3, #8]
}
 800f60c:	bf00      	nop
 800f60e:	3724      	adds	r7, #36	; 0x24
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <LL_GPIO_SetPinPull>:
{
 800f618:	b480      	push	{r7}
 800f61a:	b089      	sub	sp, #36	; 0x24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	68da      	ldr	r2, [r3, #12]
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	fa93 f3a3 	rbit	r3, r3
 800f632:	613b      	str	r3, [r7, #16]
  return result;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	fab3 f383 	clz	r3, r3
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	2103      	movs	r1, #3
 800f640:	fa01 f303 	lsl.w	r3, r1, r3
 800f644:	43db      	mvns	r3, r3
 800f646:	401a      	ands	r2, r3
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	fa93 f3a3 	rbit	r3, r3
 800f652:	61bb      	str	r3, [r7, #24]
  return result;
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	fab3 f383 	clz	r3, r3
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	6879      	ldr	r1, [r7, #4]
 800f660:	fa01 f303 	lsl.w	r3, r1, r3
 800f664:	431a      	orrs	r2, r3
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	60da      	str	r2, [r3, #12]
}
 800f66a:	bf00      	nop
 800f66c:	3724      	adds	r7, #36	; 0x24
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <LL_GPIO_SetAFPin_0_7>:
{
 800f676:	b480      	push	{r7}
 800f678:	b089      	sub	sp, #36	; 0x24
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	60f8      	str	r0, [r7, #12]
 800f67e:	60b9      	str	r1, [r7, #8]
 800f680:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6a1a      	ldr	r2, [r3, #32]
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	fa93 f3a3 	rbit	r3, r3
 800f690:	613b      	str	r3, [r7, #16]
  return result;
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	fab3 f383 	clz	r3, r3
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	210f      	movs	r1, #15
 800f69e:	fa01 f303 	lsl.w	r3, r1, r3
 800f6a2:	43db      	mvns	r3, r3
 800f6a4:	401a      	ands	r2, r3
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	fa93 f3a3 	rbit	r3, r3
 800f6b0:	61bb      	str	r3, [r7, #24]
  return result;
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	fab3 f383 	clz	r3, r3
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	6879      	ldr	r1, [r7, #4]
 800f6be:	fa01 f303 	lsl.w	r3, r1, r3
 800f6c2:	431a      	orrs	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	621a      	str	r2, [r3, #32]
}
 800f6c8:	bf00      	nop
 800f6ca:	3724      	adds	r7, #36	; 0x24
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <LL_GPIO_SetAFPin_8_15>:
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b089      	sub	sp, #36	; 0x24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	0a1b      	lsrs	r3, r3, #8
 800f6e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	fa93 f3a3 	rbit	r3, r3
 800f6f0:	613b      	str	r3, [r7, #16]
  return result;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	fab3 f383 	clz	r3, r3
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	210f      	movs	r1, #15
 800f6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f702:	43db      	mvns	r3, r3
 800f704:	401a      	ands	r2, r3
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	0a1b      	lsrs	r3, r3, #8
 800f70a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	fa93 f3a3 	rbit	r3, r3
 800f712:	61bb      	str	r3, [r7, #24]
  return result;
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	fab3 f383 	clz	r3, r3
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	6879      	ldr	r1, [r7, #4]
 800f720:	fa01 f303 	lsl.w	r3, r1, r3
 800f724:	431a      	orrs	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f72a:	bf00      	nop
 800f72c:	3724      	adds	r7, #36	; 0x24
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
	...

0800f738 <LL_SYSCFG_SetEXTISource>:
{
 800f738:	b480      	push	{r7}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800f742:	4a13      	ldr	r2, [pc, #76]	; (800f790 <LL_SYSCFG_SetEXTISource+0x58>)
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	b2db      	uxtb	r3, r3
 800f748:	3302      	adds	r3, #2
 800f74a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	0c1b      	lsrs	r3, r3, #16
 800f752:	43db      	mvns	r3, r3
 800f754:	ea02 0103 	and.w	r1, r2, r3
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	0c1b      	lsrs	r3, r3, #16
 800f75c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	fa93 f3a3 	rbit	r3, r3
 800f764:	60bb      	str	r3, [r7, #8]
  return result;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	fab3 f383 	clz	r3, r3
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	461a      	mov	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	fa03 f202 	lsl.w	r2, r3, r2
 800f776:	4806      	ldr	r0, [pc, #24]	; (800f790 <LL_SYSCFG_SetEXTISource+0x58>)
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	430a      	orrs	r2, r1
 800f77e:	3302      	adds	r3, #2
 800f780:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800f784:	bf00      	nop
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	40013800 	.word	0x40013800

0800f794 <LL_SYSCFG_GetEXTISource>:
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800f79c:	4a0d      	ldr	r2, [pc, #52]	; (800f7d4 <LL_SYSCFG_GetEXTISource+0x40>)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	3302      	adds	r3, #2
 800f7a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	0c1b      	lsrs	r3, r3, #16
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	687a      	ldr	r2, [r7, #4]
 800f7b0:	0c12      	lsrs	r2, r2, #16
 800f7b2:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	fa92 f2a2 	rbit	r2, r2
 800f7ba:	60ba      	str	r2, [r7, #8]
  return result;
 800f7bc:	68ba      	ldr	r2, [r7, #8]
 800f7be:	fab2 f282 	clz	r2, r2
 800f7c2:	b2d2      	uxtb	r2, r2
 800f7c4:	40d3      	lsrs	r3, r2
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3714      	adds	r7, #20
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	40013800 	.word	0x40013800

0800f7d8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800f7e0:	4b05      	ldr	r3, [pc, #20]	; (800f7f8 <LL_EXTI_EnableIT_0_31+0x20>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	4904      	ldr	r1, [pc, #16]	; (800f7f8 <LL_EXTI_EnableIT_0_31+0x20>)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	600b      	str	r3, [r1, #0]
}
 800f7ec:	bf00      	nop
 800f7ee:	370c      	adds	r7, #12
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr
 800f7f8:	40013c00 	.word	0x40013c00

0800f7fc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800f804:	4b06      	ldr	r3, [pc, #24]	; (800f820 <LL_EXTI_DisableIT_0_31+0x24>)
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	43db      	mvns	r3, r3
 800f80c:	4904      	ldr	r1, [pc, #16]	; (800f820 <LL_EXTI_DisableIT_0_31+0x24>)
 800f80e:	4013      	ands	r3, r2
 800f810:	600b      	str	r3, [r1, #0]
}
 800f812:	bf00      	nop
 800f814:	370c      	adds	r7, #12
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	40013c00 	.word	0x40013c00

0800f824 <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 800f82c:	4b07      	ldr	r3, [pc, #28]	; (800f84c <LL_EXTI_IsEnabledIT_0_31+0x28>)
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4013      	ands	r3, r2
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	429a      	cmp	r2, r3
 800f838:	bf0c      	ite	eq
 800f83a:	2301      	moveq	r3, #1
 800f83c:	2300      	movne	r3, #0
 800f83e:	b2db      	uxtb	r3, r3
}
 800f840:	4618      	mov	r0, r3
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	40013c00 	.word	0x40013c00

0800f850 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800f858:	4b05      	ldr	r3, [pc, #20]	; (800f870 <LL_EXTI_EnableEvent_0_31+0x20>)
 800f85a:	685a      	ldr	r2, [r3, #4]
 800f85c:	4904      	ldr	r1, [pc, #16]	; (800f870 <LL_EXTI_EnableEvent_0_31+0x20>)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4313      	orrs	r3, r2
 800f862:	604b      	str	r3, [r1, #4]

}
 800f864:	bf00      	nop
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	40013c00 	.word	0x40013c00

0800f874 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800f87c:	4b05      	ldr	r3, [pc, #20]	; (800f894 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800f87e:	689a      	ldr	r2, [r3, #8]
 800f880:	4904      	ldr	r1, [pc, #16]	; (800f894 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4313      	orrs	r3, r2
 800f886:	608b      	str	r3, [r1, #8]

}
 800f888:	bf00      	nop
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	40013c00 	.word	0x40013c00

0800f898 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800f8a0:	4b06      	ldr	r3, [pc, #24]	; (800f8bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800f8a2:	689a      	ldr	r2, [r3, #8]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	43db      	mvns	r3, r3
 800f8a8:	4904      	ldr	r1, [pc, #16]	; (800f8bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800f8aa:	4013      	ands	r3, r2
 800f8ac:	608b      	str	r3, [r1, #8]

}
 800f8ae:	bf00      	nop
 800f8b0:	370c      	adds	r7, #12
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	40013c00 	.word	0x40013c00

0800f8c0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800f8c8:	4b05      	ldr	r3, [pc, #20]	; (800f8e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800f8ca:	68da      	ldr	r2, [r3, #12]
 800f8cc:	4904      	ldr	r1, [pc, #16]	; (800f8e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	60cb      	str	r3, [r1, #12]
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	40013c00 	.word	0x40013c00

0800f8e4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800f8ec:	4b06      	ldr	r3, [pc, #24]	; (800f908 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800f8ee:	68da      	ldr	r2, [r3, #12]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	43db      	mvns	r3, r3
 800f8f4:	4904      	ldr	r1, [pc, #16]	; (800f908 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800f8f6:	4013      	ands	r3, r2
 800f8f8:	60cb      	str	r3, [r1, #12]
}
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop
 800f908:	40013c00 	.word	0x40013c00

0800f90c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800f914:	4b07      	ldr	r3, [pc, #28]	; (800f934 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800f916:	695a      	ldr	r2, [r3, #20]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4013      	ands	r3, r2
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	429a      	cmp	r2, r3
 800f920:	bf0c      	ite	eq
 800f922:	2301      	moveq	r3, #1
 800f924:	2300      	movne	r3, #0
 800f926:	b2db      	uxtb	r3, r3
}
 800f928:	4618      	mov	r0, r3
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr
 800f934:	40013c00 	.word	0x40013c00

0800f938 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800f940:	4a04      	ldr	r2, [pc, #16]	; (800f954 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6153      	str	r3, [r2, #20]
}
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	40013c00 	.word	0x40013c00

0800f958 <hal_gpio_get_pin_number>:
static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio);
static void hal_gpio_exti_call(uint16_t pin_num);

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 800f958:	b480      	push	{r7}
 800f95a:	b085      	sub	sp, #20
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800f960:	2300      	movs	r3, #0
 800f962:	73fb      	strb	r3, [r7, #15]
 800f964:	e00c      	b.n	800f980 <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	889b      	ldrh	r3, [r3, #4]
 800f96a:	461a      	mov	r2, r3
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
 800f96e:	fa42 f303 	asr.w	r3, r2, r3
 800f972:	f003 0301 	and.w	r3, r3, #1
 800f976:	2b00      	cmp	r3, #0
 800f978:	d106      	bne.n	800f988 <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
 800f97c:	3301      	adds	r3, #1
 800f97e:	73fb      	strb	r3, [r7, #15]
 800f980:	7bfb      	ldrb	r3, [r7, #15]
 800f982:	2b0f      	cmp	r3, #15
 800f984:	d9ef      	bls.n	800f966 <hal_gpio_get_pin_number+0xe>
 800f986:	e000      	b.n	800f98a <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 800f988:	bf00      	nop
	}
	return pin_number;
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3714      	adds	r7, #20
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af02      	add	r7, sp, #8
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	4608      	mov	r0, r1
 800f9a2:	4611      	mov	r1, r2
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	70fb      	strb	r3, [r7, #3]
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	70bb      	strb	r3, [r7, #2]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 800f9b2:	787b      	ldrb	r3, [r7, #1]
 800f9b4:	78ba      	ldrb	r2, [r7, #2]
 800f9b6:	78f9      	ldrb	r1, [r7, #3]
 800f9b8:	2010      	movs	r0, #16
 800f9ba:	9000      	str	r0, [sp, #0]
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 f805 	bl	800f9cc <hal_gpio_init_alt>
}
 800f9c2:	bf00      	nop
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
	...

0800f9cc <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	4608      	mov	r0, r1
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	461a      	mov	r2, r3
 800f9da:	4603      	mov	r3, r0
 800f9dc:	70fb      	strb	r3, [r7, #3]
 800f9de:	460b      	mov	r3, r1
 800f9e0:	70bb      	strb	r3, [r7, #2]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a8d      	ldr	r2, [pc, #564]	; (800fc20 <hal_gpio_init_alt+0x254>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d02b      	beq.n	800fa48 <hal_gpio_init_alt+0x7c>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a8b      	ldr	r2, [pc, #556]	; (800fc24 <hal_gpio_init_alt+0x258>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d024      	beq.n	800fa44 <hal_gpio_init_alt+0x78>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4a8a      	ldr	r2, [pc, #552]	; (800fc28 <hal_gpio_init_alt+0x25c>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d01d      	beq.n	800fa40 <hal_gpio_init_alt+0x74>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a88      	ldr	r2, [pc, #544]	; (800fc2c <hal_gpio_init_alt+0x260>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d016      	beq.n	800fa3c <hal_gpio_init_alt+0x70>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4a87      	ldr	r2, [pc, #540]	; (800fc30 <hal_gpio_init_alt+0x264>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d00f      	beq.n	800fa38 <hal_gpio_init_alt+0x6c>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a85      	ldr	r2, [pc, #532]	; (800fc34 <hal_gpio_init_alt+0x268>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d008      	beq.n	800fa34 <hal_gpio_init_alt+0x68>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a84      	ldr	r2, [pc, #528]	; (800fc38 <hal_gpio_init_alt+0x26c>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d101      	bne.n	800fa30 <hal_gpio_init_alt+0x64>
 800fa2c:	2306      	movs	r3, #6
 800fa2e:	e00c      	b.n	800fa4a <hal_gpio_init_alt+0x7e>
 800fa30:	2307      	movs	r3, #7
 800fa32:	e00a      	b.n	800fa4a <hal_gpio_init_alt+0x7e>
 800fa34:	2305      	movs	r3, #5
 800fa36:	e008      	b.n	800fa4a <hal_gpio_init_alt+0x7e>
 800fa38:	2304      	movs	r3, #4
 800fa3a:	e006      	b.n	800fa4a <hal_gpio_init_alt+0x7e>
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	e004      	b.n	800fa4a <hal_gpio_init_alt+0x7e>
 800fa40:	2302      	movs	r3, #2
 800fa42:	e002      	b.n	800fa4a <hal_gpio_init_alt+0x7e>
 800fa44:	2301      	movs	r3, #1
 800fa46:	e000      	b.n	800fa4a <hal_gpio_init_alt+0x7e>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	889b      	ldrh	r3, [r3, #4]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d05f      	beq.n	800fb14 <hal_gpio_init_alt+0x148>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	889b      	ldrh	r3, [r3, #4]
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d058      	beq.n	800fb0e <hal_gpio_init_alt+0x142>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	889b      	ldrh	r3, [r3, #4]
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	d051      	beq.n	800fb08 <hal_gpio_init_alt+0x13c>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	889b      	ldrh	r3, [r3, #4]
 800fa68:	2b08      	cmp	r3, #8
 800fa6a:	d04a      	beq.n	800fb02 <hal_gpio_init_alt+0x136>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	889b      	ldrh	r3, [r3, #4]
 800fa70:	2b10      	cmp	r3, #16
 800fa72:	d044      	beq.n	800fafe <hal_gpio_init_alt+0x132>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	889b      	ldrh	r3, [r3, #4]
 800fa78:	2b20      	cmp	r3, #32
 800fa7a:	d03e      	beq.n	800fafa <hal_gpio_init_alt+0x12e>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	889b      	ldrh	r3, [r3, #4]
 800fa80:	2b40      	cmp	r3, #64	; 0x40
 800fa82:	d038      	beq.n	800faf6 <hal_gpio_init_alt+0x12a>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	889b      	ldrh	r3, [r3, #4]
 800fa88:	2b80      	cmp	r3, #128	; 0x80
 800fa8a:	d032      	beq.n	800faf2 <hal_gpio_init_alt+0x126>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	889b      	ldrh	r3, [r3, #4]
 800fa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa94:	d02b      	beq.n	800faee <hal_gpio_init_alt+0x122>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	889b      	ldrh	r3, [r3, #4]
 800fa9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa9e:	d024      	beq.n	800faea <hal_gpio_init_alt+0x11e>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	889b      	ldrh	r3, [r3, #4]
 800faa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faa8:	d01d      	beq.n	800fae6 <hal_gpio_init_alt+0x11a>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	889b      	ldrh	r3, [r3, #4]
 800faae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fab2:	d016      	beq.n	800fae2 <hal_gpio_init_alt+0x116>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	889b      	ldrh	r3, [r3, #4]
 800fab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fabc:	d00f      	beq.n	800fade <hal_gpio_init_alt+0x112>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	889b      	ldrh	r3, [r3, #4]
 800fac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fac6:	d008      	beq.n	800fada <hal_gpio_init_alt+0x10e>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	889b      	ldrh	r3, [r3, #4]
 800facc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fad0:	d101      	bne.n	800fad6 <hal_gpio_init_alt+0x10a>
 800fad2:	4b5a      	ldr	r3, [pc, #360]	; (800fc3c <hal_gpio_init_alt+0x270>)
 800fad4:	e020      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fad6:	4b5a      	ldr	r3, [pc, #360]	; (800fc40 <hal_gpio_init_alt+0x274>)
 800fad8:	e01e      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fada:	4b5a      	ldr	r3, [pc, #360]	; (800fc44 <hal_gpio_init_alt+0x278>)
 800fadc:	e01c      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fade:	4b5a      	ldr	r3, [pc, #360]	; (800fc48 <hal_gpio_init_alt+0x27c>)
 800fae0:	e01a      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fae2:	4b5a      	ldr	r3, [pc, #360]	; (800fc4c <hal_gpio_init_alt+0x280>)
 800fae4:	e018      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fae6:	4b5a      	ldr	r3, [pc, #360]	; (800fc50 <hal_gpio_init_alt+0x284>)
 800fae8:	e016      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800faea:	4b5a      	ldr	r3, [pc, #360]	; (800fc54 <hal_gpio_init_alt+0x288>)
 800faec:	e014      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800faee:	4b5a      	ldr	r3, [pc, #360]	; (800fc58 <hal_gpio_init_alt+0x28c>)
 800faf0:	e012      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800faf2:	4b5a      	ldr	r3, [pc, #360]	; (800fc5c <hal_gpio_init_alt+0x290>)
 800faf4:	e010      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800faf6:	4b5a      	ldr	r3, [pc, #360]	; (800fc60 <hal_gpio_init_alt+0x294>)
 800faf8:	e00e      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fafa:	4b5a      	ldr	r3, [pc, #360]	; (800fc64 <hal_gpio_init_alt+0x298>)
 800fafc:	e00c      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fafe:	4b5a      	ldr	r3, [pc, #360]	; (800fc68 <hal_gpio_init_alt+0x29c>)
 800fb00:	e00a      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fb02:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800fb06:	e007      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fb08:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800fb0c:	e004      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fb0e:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800fb12:	e001      	b.n	800fb18 <hal_gpio_init_alt+0x14c>
 800fb14:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800fb18:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	889b      	ldrh	r3, [r3, #4]
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d064      	beq.n	800fbec <hal_gpio_init_alt+0x220>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	889b      	ldrh	r3, [r3, #4]
 800fb26:	2b02      	cmp	r3, #2
 800fb28:	d05e      	beq.n	800fbe8 <hal_gpio_init_alt+0x21c>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	889b      	ldrh	r3, [r3, #4]
 800fb2e:	2b04      	cmp	r3, #4
 800fb30:	d058      	beq.n	800fbe4 <hal_gpio_init_alt+0x218>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	889b      	ldrh	r3, [r3, #4]
 800fb36:	2b08      	cmp	r3, #8
 800fb38:	d052      	beq.n	800fbe0 <hal_gpio_init_alt+0x214>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	889b      	ldrh	r3, [r3, #4]
 800fb3e:	2b10      	cmp	r3, #16
 800fb40:	d04c      	beq.n	800fbdc <hal_gpio_init_alt+0x210>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	889b      	ldrh	r3, [r3, #4]
 800fb46:	2b20      	cmp	r3, #32
 800fb48:	d046      	beq.n	800fbd8 <hal_gpio_init_alt+0x20c>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	889b      	ldrh	r3, [r3, #4]
 800fb4e:	2b40      	cmp	r3, #64	; 0x40
 800fb50:	d040      	beq.n	800fbd4 <hal_gpio_init_alt+0x208>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	889b      	ldrh	r3, [r3, #4]
 800fb56:	2b80      	cmp	r3, #128	; 0x80
 800fb58:	d03a      	beq.n	800fbd0 <hal_gpio_init_alt+0x204>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	889b      	ldrh	r3, [r3, #4]
 800fb5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb62:	d032      	beq.n	800fbca <hal_gpio_init_alt+0x1fe>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	889b      	ldrh	r3, [r3, #4]
 800fb68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb6c:	d02a      	beq.n	800fbc4 <hal_gpio_init_alt+0x1f8>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	889b      	ldrh	r3, [r3, #4]
 800fb72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb76:	d022      	beq.n	800fbbe <hal_gpio_init_alt+0x1f2>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	889b      	ldrh	r3, [r3, #4]
 800fb7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb80:	d01a      	beq.n	800fbb8 <hal_gpio_init_alt+0x1ec>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	889b      	ldrh	r3, [r3, #4]
 800fb86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb8a:	d012      	beq.n	800fbb2 <hal_gpio_init_alt+0x1e6>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	889b      	ldrh	r3, [r3, #4]
 800fb90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb94:	d00a      	beq.n	800fbac <hal_gpio_init_alt+0x1e0>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	889b      	ldrh	r3, [r3, #4]
 800fb9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fb9e:	d102      	bne.n	800fba6 <hal_gpio_init_alt+0x1da>
 800fba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fba4:	e023      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbaa:	e020      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbb0:	e01d      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbb6:	e01a      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fbbc:	e017      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbc2:	e014      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbc8:	e011      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbce:	e00e      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbd0:	2380      	movs	r3, #128	; 0x80
 800fbd2:	e00c      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbd4:	2340      	movs	r3, #64	; 0x40
 800fbd6:	e00a      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbd8:	2320      	movs	r3, #32
 800fbda:	e008      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbdc:	2310      	movs	r3, #16
 800fbde:	e006      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbe0:	2308      	movs	r3, #8
 800fbe2:	e004      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbe4:	2304      	movs	r3, #4
 800fbe6:	e002      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbe8:	2302      	movs	r3, #2
 800fbea:	e000      	b.n	800fbee <hal_gpio_init_alt+0x222>
 800fbec:	2301      	movs	r3, #1
 800fbee:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 800fbf0:	787b      	ldrb	r3, [r7, #1]
 800fbf2:	2b03      	cmp	r3, #3
 800fbf4:	d855      	bhi.n	800fca2 <hal_gpio_init_alt+0x2d6>
 800fbf6:	a201      	add	r2, pc, #4	; (adr r2, 800fbfc <hal_gpio_init_alt+0x230>)
 800fbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbfc:	0800fc0d 	.word	0x0800fc0d
 800fc00:	0800fc6d 	.word	0x0800fc6d
 800fc04:	0800fc7f 	.word	0x0800fc7f
 800fc08:	0800fc91 	.word	0x0800fc91
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6818      	ldr	r0, [r3, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	889b      	ldrh	r3, [r3, #4]
 800fc14:	2200      	movs	r2, #0
 800fc16:	4619      	mov	r1, r3
 800fc18:	f7ff fccf 	bl	800f5ba <LL_GPIO_SetPinSpeed>
		break;
 800fc1c:	e041      	b.n	800fca2 <hal_gpio_init_alt+0x2d6>
 800fc1e:	bf00      	nop
 800fc20:	40020000 	.word	0x40020000
 800fc24:	40020400 	.word	0x40020400
 800fc28:	40020800 	.word	0x40020800
 800fc2c:	40020c00 	.word	0x40020c00
 800fc30:	40021000 	.word	0x40021000
 800fc34:	40021400 	.word	0x40021400
 800fc38:	40021800 	.word	0x40021800
 800fc3c:	0f000003 	.word	0x0f000003
 800fc40:	f0000003 	.word	0xf0000003
 800fc44:	00f00003 	.word	0x00f00003
 800fc48:	000f0003 	.word	0x000f0003
 800fc4c:	f0000002 	.word	0xf0000002
 800fc50:	0f000002 	.word	0x0f000002
 800fc54:	00f00002 	.word	0x00f00002
 800fc58:	000f0002 	.word	0x000f0002
 800fc5c:	f0000001 	.word	0xf0000001
 800fc60:	0f000001 	.word	0x0f000001
 800fc64:	00f00001 	.word	0x00f00001
 800fc68:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6818      	ldr	r0, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	889b      	ldrh	r3, [r3, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	4619      	mov	r1, r3
 800fc78:	f7ff fc9f 	bl	800f5ba <LL_GPIO_SetPinSpeed>
		break;
 800fc7c:	e011      	b.n	800fca2 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6818      	ldr	r0, [r3, #0]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	889b      	ldrh	r3, [r3, #4]
 800fc86:	2202      	movs	r2, #2
 800fc88:	4619      	mov	r1, r3
 800fc8a:	f7ff fc96 	bl	800f5ba <LL_GPIO_SetPinSpeed>
		break;
 800fc8e:	e008      	b.n	800fca2 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6818      	ldr	r0, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	889b      	ldrh	r3, [r3, #4]
 800fc98:	2203      	movs	r2, #3
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	f7ff fc8d 	bl	800f5ba <LL_GPIO_SetPinSpeed>
		break;
 800fca0:	bf00      	nop
	}

	switch(pull) {
 800fca2:	78bb      	ldrb	r3, [r7, #2]
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	d018      	beq.n	800fcda <hal_gpio_init_alt+0x30e>
 800fca8:	2b02      	cmp	r3, #2
 800fcaa:	dc1f      	bgt.n	800fcec <hal_gpio_init_alt+0x320>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d002      	beq.n	800fcb6 <hal_gpio_init_alt+0x2ea>
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d009      	beq.n	800fcc8 <hal_gpio_init_alt+0x2fc>
 800fcb4:	e01a      	b.n	800fcec <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6818      	ldr	r0, [r3, #0]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	889b      	ldrh	r3, [r3, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	f7ff fca9 	bl	800f618 <LL_GPIO_SetPinPull>
		break;
 800fcc6:	e011      	b.n	800fcec <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6818      	ldr	r0, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	889b      	ldrh	r3, [r3, #4]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	f7ff fca0 	bl	800f618 <LL_GPIO_SetPinPull>
		break;
 800fcd8:	e008      	b.n	800fcec <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6818      	ldr	r0, [r3, #0]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	889b      	ldrh	r3, [r3, #4]
 800fce2:	2202      	movs	r2, #2
 800fce4:	4619      	mov	r1, r3
 800fce6:	f7ff fc97 	bl	800f618 <LL_GPIO_SetPinPull>
		break;
 800fcea:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 800fcec:	78fb      	ldrb	r3, [r7, #3]
 800fcee:	2b05      	cmp	r3, #5
 800fcf0:	d93d      	bls.n	800fd6e <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	889b      	ldrh	r3, [r3, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	f7ff fc15 	bl	800f52c <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 800fd02:	6939      	ldr	r1, [r7, #16]
 800fd04:	6978      	ldr	r0, [r7, #20]
 800fd06:	f7ff fd17 	bl	800f738 <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 800fd0a:	78fb      	ldrb	r3, [r7, #3]
 800fd0c:	2b06      	cmp	r3, #6
 800fd0e:	d002      	beq.n	800fd16 <hal_gpio_init_alt+0x34a>
 800fd10:	78fb      	ldrb	r3, [r7, #3]
 800fd12:	2b08      	cmp	r3, #8
 800fd14:	d105      	bne.n	800fd22 <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7ff fd5e 	bl	800f7d8 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f7ff fda9 	bl	800f874 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 800fd22:	78fb      	ldrb	r3, [r7, #3]
 800fd24:	2b07      	cmp	r3, #7
 800fd26:	d002      	beq.n	800fd2e <hal_gpio_init_alt+0x362>
 800fd28:	78fb      	ldrb	r3, [r7, #3]
 800fd2a:	2b08      	cmp	r3, #8
 800fd2c:	d105      	bne.n	800fd3a <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f7ff fd52 	bl	800f7d8 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f7ff fdc3 	bl	800f8c0 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 800fd3a:	78fb      	ldrb	r3, [r7, #3]
 800fd3c:	2b09      	cmp	r3, #9
 800fd3e:	d002      	beq.n	800fd46 <hal_gpio_init_alt+0x37a>
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	2b0b      	cmp	r3, #11
 800fd44:	d105      	bne.n	800fd52 <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 800fd46:	68f8      	ldr	r0, [r7, #12]
 800fd48:	f7ff fd82 	bl	800f850 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f7ff fd91 	bl	800f874 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 800fd52:	78fb      	ldrb	r3, [r7, #3]
 800fd54:	2b0a      	cmp	r3, #10
 800fd56:	d003      	beq.n	800fd60 <hal_gpio_init_alt+0x394>
 800fd58:	78fb      	ldrb	r3, [r7, #3]
 800fd5a:	2b0b      	cmp	r3, #11
 800fd5c:	f040 80a7 	bne.w	800feae <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f7ff fd39 	bl	800f7d8 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f7ff fdaa 	bl	800f8c0 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 800fd6c:	e09f      	b.n	800feae <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800fd6e:	6938      	ldr	r0, [r7, #16]
 800fd70:	f7ff fd10 	bl	800f794 <LL_SYSCFG_GetEXTISource>
 800fd74:	4602      	mov	r2, r0
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d10e      	bne.n	800fd9a <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f7ff fd51 	bl	800f824 <LL_EXTI_IsEnabledIT_0_31>
 800fd82:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d008      	beq.n	800fd9a <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f7ff fd37 	bl	800f7fc <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f7ff fda8 	bl	800f8e4 <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f7ff fd7f 	bl	800f898 <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 800fd9a:	78fb      	ldrb	r3, [r7, #3]
 800fd9c:	2b03      	cmp	r3, #3
 800fd9e:	d002      	beq.n	800fda6 <hal_gpio_init_alt+0x3da>
 800fda0:	78fb      	ldrb	r3, [r7, #3]
 800fda2:	2b04      	cmp	r3, #4
 800fda4:	d11a      	bne.n	800fddc <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7ff fdd6 	bl	800f958 <hal_gpio_get_pin_number>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b07      	cmp	r3, #7
 800fdb0:	d80a      	bhi.n	800fdc8 <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6818      	ldr	r0, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	889b      	ldrh	r3, [r3, #4]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	f7ff fc58 	bl	800f676 <LL_GPIO_SetAFPin_0_7>
 800fdc6:	e009      	b.n	800fddc <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6818      	ldr	r0, [r3, #0]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	889b      	ldrh	r3, [r3, #4]
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	f7ff fc7c 	bl	800f6d4 <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 800fddc:	78fb      	ldrb	r3, [r7, #3]
 800fdde:	2b05      	cmp	r3, #5
 800fde0:	d864      	bhi.n	800feac <hal_gpio_init_alt+0x4e0>
 800fde2:	a201      	add	r2, pc, #4	; (adr r2, 800fde8 <hal_gpio_init_alt+0x41c>)
 800fde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde8:	0800fe01 	.word	0x0800fe01
 800fdec:	0800fe13 	.word	0x0800fe13
 800fdf0:	0800fe35 	.word	0x0800fe35
 800fdf4:	0800fe57 	.word	0x0800fe57
 800fdf8:	0800fe79 	.word	0x0800fe79
 800fdfc:	0800fe9b 	.word	0x0800fe9b
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6818      	ldr	r0, [r3, #0]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	889b      	ldrh	r3, [r3, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	f7ff fb8e 	bl	800f52c <LL_GPIO_SetPinMode>
			break;
 800fe10:	e04d      	b.n	800feae <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6818      	ldr	r0, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	889b      	ldrh	r3, [r3, #4]
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	f7ff fb85 	bl	800f52c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6818      	ldr	r0, [r3, #0]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	889b      	ldrh	r3, [r3, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	f7ff fbac 	bl	800f58a <LL_GPIO_SetPinOutputType>
			break;
 800fe32:	e03c      	b.n	800feae <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6818      	ldr	r0, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	889b      	ldrh	r3, [r3, #4]
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	4619      	mov	r1, r3
 800fe40:	f7ff fb74 	bl	800f52c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6818      	ldr	r0, [r3, #0]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	889b      	ldrh	r3, [r3, #4]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	4619      	mov	r1, r3
 800fe50:	f7ff fb9b 	bl	800f58a <LL_GPIO_SetPinOutputType>
			break;
 800fe54:	e02b      	b.n	800feae <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6818      	ldr	r0, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	889b      	ldrh	r3, [r3, #4]
 800fe5e:	2202      	movs	r2, #2
 800fe60:	4619      	mov	r1, r3
 800fe62:	f7ff fb63 	bl	800f52c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6818      	ldr	r0, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	889b      	ldrh	r3, [r3, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	4619      	mov	r1, r3
 800fe72:	f7ff fb8a 	bl	800f58a <LL_GPIO_SetPinOutputType>
			break;
 800fe76:	e01a      	b.n	800feae <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6818      	ldr	r0, [r3, #0]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	889b      	ldrh	r3, [r3, #4]
 800fe80:	2202      	movs	r2, #2
 800fe82:	4619      	mov	r1, r3
 800fe84:	f7ff fb52 	bl	800f52c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6818      	ldr	r0, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	889b      	ldrh	r3, [r3, #4]
 800fe90:	2201      	movs	r2, #1
 800fe92:	4619      	mov	r1, r3
 800fe94:	f7ff fb79 	bl	800f58a <LL_GPIO_SetPinOutputType>
			break;
 800fe98:	e009      	b.n	800feae <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6818      	ldr	r0, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	889b      	ldrh	r3, [r3, #4]
 800fea2:	2203      	movs	r2, #3
 800fea4:	4619      	mov	r1, r3
 800fea6:	f7ff fb41 	bl	800f52c <LL_GPIO_SetPinMode>
			break;
 800feaa:	e000      	b.n	800feae <hal_gpio_init_alt+0x4e2>
			break;
 800feac:	bf00      	nop
}
 800feae:	bf00      	nop
 800feb0:	3718      	adds	r7, #24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop

0800feb8 <hal_gpio_exti_call>:
	gpio_interrupt[pin].context = context;
	gpio_interrupt[pin].ready = true;
	taskEXIT_CRITICAL();
}

static void hal_gpio_exti_call(uint16_t pin_num) {
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	4603      	mov	r3, r0
 800fec0:	80fb      	strh	r3, [r7, #6]
	if(gpio_interrupt[pin_num].callback && gpio_interrupt[pin_num].ready) {
 800fec2:	88fa      	ldrh	r2, [r7, #6]
 800fec4:	4915      	ldr	r1, [pc, #84]	; (800ff1c <hal_gpio_exti_call+0x64>)
 800fec6:	4613      	mov	r3, r2
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	4413      	add	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	440b      	add	r3, r1
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d01e      	beq.n	800ff14 <hal_gpio_exti_call+0x5c>
 800fed6:	88fa      	ldrh	r2, [r7, #6]
 800fed8:	4910      	ldr	r1, [pc, #64]	; (800ff1c <hal_gpio_exti_call+0x64>)
 800feda:	4613      	mov	r3, r2
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	4413      	add	r3, r2
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	440b      	add	r3, r1
 800fee4:	3308      	adds	r3, #8
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	2b00      	cmp	r3, #0
 800feec:	d012      	beq.n	800ff14 <hal_gpio_exti_call+0x5c>
		gpio_interrupt[pin_num].callback(gpio_interrupt[pin_num].context);
 800feee:	88fa      	ldrh	r2, [r7, #6]
 800fef0:	490a      	ldr	r1, [pc, #40]	; (800ff1c <hal_gpio_exti_call+0x64>)
 800fef2:	4613      	mov	r3, r2
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	4413      	add	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	440b      	add	r3, r1
 800fefc:	6819      	ldr	r1, [r3, #0]
 800fefe:	88fa      	ldrh	r2, [r7, #6]
 800ff00:	4806      	ldr	r0, [pc, #24]	; (800ff1c <hal_gpio_exti_call+0x64>)
 800ff02:	4613      	mov	r3, r2
 800ff04:	005b      	lsls	r3, r3, #1
 800ff06:	4413      	add	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	4403      	add	r3, r0
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4618      	mov	r0, r3
 800ff12:	4788      	blx	r1
	}
}
 800ff14:	bf00      	nop
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	20004c0c 	.word	0x20004c0c

0800ff20 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 800ff20:	b580      	push	{r7, lr}
 800ff22:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0)) {
 800ff24:	2001      	movs	r0, #1
 800ff26:	f7ff fcf1 	bl	800f90c <LL_EXTI_IsActiveFlag_0_31>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d005      	beq.n	800ff3c <EXTI0_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800ff30:	2001      	movs	r0, #1
 800ff32:	f7ff fd01 	bl	800f938 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(0);
 800ff36:	2000      	movs	r0, #0
 800ff38:	f7ff ffbe 	bl	800feb8 <hal_gpio_exti_call>
    }
}
 800ff3c:	bf00      	nop
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 800ff40:	b580      	push	{r7, lr}
 800ff42:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1)) {
 800ff44:	2002      	movs	r0, #2
 800ff46:	f7ff fce1 	bl	800f90c <LL_EXTI_IsActiveFlag_0_31>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d005      	beq.n	800ff5c <EXTI1_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800ff50:	2002      	movs	r0, #2
 800ff52:	f7ff fcf1 	bl	800f938 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(1);
 800ff56:	2001      	movs	r0, #1
 800ff58:	f7ff ffae 	bl	800feb8 <hal_gpio_exti_call>
    }
}
 800ff5c:	bf00      	nop
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 800ff60:	b580      	push	{r7, lr}
 800ff62:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2)) {
 800ff64:	2004      	movs	r0, #4
 800ff66:	f7ff fcd1 	bl	800f90c <LL_EXTI_IsActiveFlag_0_31>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d005      	beq.n	800ff7c <EXTI2_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800ff70:	2004      	movs	r0, #4
 800ff72:	f7ff fce1 	bl	800f938 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(2);
 800ff76:	2002      	movs	r0, #2
 800ff78:	f7ff ff9e 	bl	800feb8 <hal_gpio_exti_call>
    }
}
 800ff7c:	bf00      	nop
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 800ff80:	b580      	push	{r7, lr}
 800ff82:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3)) {
 800ff84:	2008      	movs	r0, #8
 800ff86:	f7ff fcc1 	bl	800f90c <LL_EXTI_IsActiveFlag_0_31>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d005      	beq.n	800ff9c <EXTI3_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800ff90:	2008      	movs	r0, #8
 800ff92:	f7ff fcd1 	bl	800f938 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(3);
 800ff96:	2003      	movs	r0, #3
 800ff98:	f7ff ff8e 	bl	800feb8 <hal_gpio_exti_call>
    }
}
 800ff9c:	bf00      	nop
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4)) {
 800ffa4:	2010      	movs	r0, #16
 800ffa6:	f7ff fcb1 	bl	800f90c <LL_EXTI_IsActiveFlag_0_31>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d005      	beq.n	800ffbc <EXTI4_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800ffb0:	2010      	movs	r0, #16
 800ffb2:	f7ff fcc1 	bl	800f938 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(4);
 800ffb6:	2004      	movs	r0, #4
 800ffb8:	f7ff ff7e 	bl	800feb8 <hal_gpio_exti_call>
    }
}
 800ffbc:	bf00      	nop
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8)) {
 800ffc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ffc8:	f7ff fca0 	bl	800f90c <LL_EXTI_IsActiveFlag_0_31>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d006      	beq.n	800ffe0 <EXTI9_5_IRQHandler+0x20>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 800ffd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ffd6:	f7ff fcaf 	bl	800f938 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(8);
 800ffda:	2008      	movs	r0, #8
 800ffdc:	f7ff ff6c 	bl	800feb8 <hal_gpio_exti_call>
    }
}
 800ffe0:	bf00      	nop
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
        __asm volatile
 800ffea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffee:	f383 8811 	msr	BASEPRI, r3
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	f3bf 8f4f 	dsb	sy
 800fffa:	607b      	str	r3, [r7, #4]
    }
 800fffc:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800fffe:	e7fe      	b.n	800fffe <vApplicationMallocFailedHook+0x1a>

08010000 <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
        __asm volatile
 801000a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801000e:	f383 8811 	msr	BASEPRI, r3
 8010012:	f3bf 8f6f 	isb	sy
 8010016:	f3bf 8f4f 	dsb	sy
 801001a:	60fb      	str	r3, [r7, #12]
    }
 801001c:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 801001e:	e7fe      	b.n	801001e <vApplicationStackOverflowHook+0x1e>

08010020 <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	4a07      	ldr	r2, [pc, #28]	; (801004c <vApplicationGetIdleTaskMemory+0x2c>)
 8010030:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	4a06      	ldr	r2, [pc, #24]	; (8010050 <vApplicationGetIdleTaskMemory+0x30>)
 8010036:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801003e:	601a      	str	r2, [r3, #0]
}
 8010040:	bf00      	nop
 8010042:	3714      	adds	r7, #20
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	20004ccc 	.word	0x20004ccc
 8010050:	20004d28 	.word	0x20004d28

08010054 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	4a07      	ldr	r2, [pc, #28]	; (8010080 <vApplicationGetTimerTaskMemory+0x2c>)
 8010064:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	4a06      	ldr	r2, [pc, #24]	; (8010084 <vApplicationGetTimerTaskMemory+0x30>)
 801006a:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010072:	601a      	str	r2, [r3, #0]
}
 8010074:	bf00      	nop
 8010076:	3714      	adds	r7, #20
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr
 8010080:	20005528 	.word	0x20005528
 8010084:	20005584 	.word	0x20005584

08010088 <__NVIC_GetPriorityGrouping>:
{
 8010088:	b480      	push	{r7}
 801008a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801008c:	4b04      	ldr	r3, [pc, #16]	; (80100a0 <__NVIC_GetPriorityGrouping+0x18>)
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	0a1b      	lsrs	r3, r3, #8
 8010092:	f003 0307 	and.w	r3, r3, #7
}
 8010096:	4618      	mov	r0, r3
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr
 80100a0:	e000ed00 	.word	0xe000ed00

080100a4 <__NVIC_EnableIRQ>:
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	4603      	mov	r3, r0
 80100ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80100ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	db0b      	blt.n	80100ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80100b6:	79fb      	ldrb	r3, [r7, #7]
 80100b8:	f003 021f 	and.w	r2, r3, #31
 80100bc:	4907      	ldr	r1, [pc, #28]	; (80100dc <__NVIC_EnableIRQ+0x38>)
 80100be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100c2:	095b      	lsrs	r3, r3, #5
 80100c4:	2001      	movs	r0, #1
 80100c6:	fa00 f202 	lsl.w	r2, r0, r2
 80100ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80100ce:	bf00      	nop
 80100d0:	370c      	adds	r7, #12
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr
 80100da:	bf00      	nop
 80100dc:	e000e100 	.word	0xe000e100

080100e0 <__NVIC_SetPriority>:
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	4603      	mov	r3, r0
 80100e8:	6039      	str	r1, [r7, #0]
 80100ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80100ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	db0a      	blt.n	801010a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	b2da      	uxtb	r2, r3
 80100f8:	490c      	ldr	r1, [pc, #48]	; (801012c <__NVIC_SetPriority+0x4c>)
 80100fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100fe:	0112      	lsls	r2, r2, #4
 8010100:	b2d2      	uxtb	r2, r2
 8010102:	440b      	add	r3, r1
 8010104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010108:	e00a      	b.n	8010120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	b2da      	uxtb	r2, r3
 801010e:	4908      	ldr	r1, [pc, #32]	; (8010130 <__NVIC_SetPriority+0x50>)
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	f003 030f 	and.w	r3, r3, #15
 8010116:	3b04      	subs	r3, #4
 8010118:	0112      	lsls	r2, r2, #4
 801011a:	b2d2      	uxtb	r2, r2
 801011c:	440b      	add	r3, r1
 801011e:	761a      	strb	r2, [r3, #24]
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	e000e100 	.word	0xe000e100
 8010130:	e000ed00 	.word	0xe000ed00

08010134 <NVIC_EncodePriority>:
{
 8010134:	b480      	push	{r7}
 8010136:	b089      	sub	sp, #36	; 0x24
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f003 0307 	and.w	r3, r3, #7
 8010146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	f1c3 0307 	rsb	r3, r3, #7
 801014e:	2b04      	cmp	r3, #4
 8010150:	bf28      	it	cs
 8010152:	2304      	movcs	r3, #4
 8010154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	3304      	adds	r3, #4
 801015a:	2b06      	cmp	r3, #6
 801015c:	d902      	bls.n	8010164 <NVIC_EncodePriority+0x30>
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	3b03      	subs	r3, #3
 8010162:	e000      	b.n	8010166 <NVIC_EncodePriority+0x32>
 8010164:	2300      	movs	r3, #0
 8010166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	fa02 f303 	lsl.w	r3, r2, r3
 8010172:	43da      	mvns	r2, r3
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	401a      	ands	r2, r3
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801017c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	fa01 f303 	lsl.w	r3, r1, r3
 8010186:	43d9      	mvns	r1, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801018c:	4313      	orrs	r3, r2
}
 801018e:	4618      	mov	r0, r3
 8010190:	3724      	adds	r7, #36	; 0x24
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr

0801019a <LL_I2C_EnableClockStretching>:
{
 801019a:	b480      	push	{r7}
 801019c:	b083      	sub	sp, #12
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	601a      	str	r2, [r3, #0]
}
 80101ae:	bf00      	nop
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <LL_I2C_DisableGeneralCall>:
{
 80101ba:	b480      	push	{r7}
 80101bc:	b083      	sub	sp, #12
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	601a      	str	r2, [r3, #0]
}
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr

080101da <LL_I2C_SetOwnAddress2>:
{
 80101da:	b480      	push	{r7}
 80101dc:	b083      	sub	sp, #12
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	431a      	orrs	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	60da      	str	r2, [r3, #12]
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <LL_I2C_DisableOwnAddress2>:
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	f023 0201 	bic.w	r2, r3, #1
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	60da      	str	r2, [r3, #12]
}
 8010214:	bf00      	nop
 8010216:	370c      	adds	r7, #12
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <LL_I2C_IsActiveFlag_TXE>:
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	695b      	ldr	r3, [r3, #20]
 801022c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010230:	2b80      	cmp	r3, #128	; 0x80
 8010232:	bf0c      	ite	eq
 8010234:	2301      	moveq	r3, #1
 8010236:	2300      	movne	r3, #0
 8010238:	b2db      	uxtb	r3, r3
}
 801023a:	4618      	mov	r0, r3
 801023c:	370c      	adds	r7, #12
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <LL_I2C_IsActiveFlag_BTF>:
{
 8010246:	b480      	push	{r7}
 8010248:	b083      	sub	sp, #12
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	f003 0304 	and.w	r3, r3, #4
 8010256:	2b04      	cmp	r3, #4
 8010258:	bf0c      	ite	eq
 801025a:	2301      	moveq	r3, #1
 801025c:	2300      	movne	r3, #0
 801025e:	b2db      	uxtb	r3, r3
}
 8010260:	4618      	mov	r0, r3
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <LL_I2C_IsActiveFlag_RXNE>:
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	695b      	ldr	r3, [r3, #20]
 8010278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801027c:	2b40      	cmp	r3, #64	; 0x40
 801027e:	bf0c      	ite	eq
 8010280:	2301      	moveq	r3, #1
 8010282:	2300      	movne	r3, #0
 8010284:	b2db      	uxtb	r3, r3
}
 8010286:	4618      	mov	r0, r3
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr

08010292 <LL_I2C_IsActiveFlag_SB>:
{
 8010292:	b480      	push	{r7}
 8010294:	b083      	sub	sp, #12
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	695b      	ldr	r3, [r3, #20]
 801029e:	f003 0301 	and.w	r3, r3, #1
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	bf0c      	ite	eq
 80102a6:	2301      	moveq	r3, #1
 80102a8:	2300      	movne	r3, #0
 80102aa:	b2db      	uxtb	r3, r3
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <LL_I2C_IsActiveFlag_ADDR>:
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	695b      	ldr	r3, [r3, #20]
 80102c4:	f003 0302 	and.w	r3, r3, #2
 80102c8:	2b02      	cmp	r3, #2
 80102ca:	bf0c      	ite	eq
 80102cc:	2301      	moveq	r3, #1
 80102ce:	2300      	movne	r3, #0
 80102d0:	b2db      	uxtb	r3, r3
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <LL_I2C_IsActiveFlag_BUSY>:
{
 80102de:	b480      	push	{r7}
 80102e0:	b083      	sub	sp, #12
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	699b      	ldr	r3, [r3, #24]
 80102ea:	f003 0302 	and.w	r3, r3, #2
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	bf0c      	ite	eq
 80102f2:	2301      	moveq	r3, #1
 80102f4:	2300      	movne	r3, #0
 80102f6:	b2db      	uxtb	r3, r3
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <LL_I2C_ClearFlag_ADDR>:
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	695b      	ldr	r3, [r3, #20]
 8010310:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8010312:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 801031a:	68fb      	ldr	r3, [r7, #12]
}
 801031c:	bf00      	nop
 801031e:	3714      	adds	r7, #20
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <LL_I2C_AcknowledgeNextData>:
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	431a      	orrs	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	601a      	str	r2, [r3, #0]
}
 8010342:	bf00      	nop
 8010344:	370c      	adds	r7, #12
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 801034e:	b480      	push	{r7}
 8010350:	b083      	sub	sp, #12
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	601a      	str	r2, [r3, #0]
}
 8010362:	bf00      	nop
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 801036e:	b480      	push	{r7}
 8010370:	b083      	sub	sp, #12
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	601a      	str	r2, [r3, #0]
}
 8010382:	bf00      	nop
 8010384:	370c      	adds	r7, #12
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr

0801038e <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 801038e:	b480      	push	{r7}
 8010390:	b083      	sub	sp, #12
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	b2db      	uxtb	r3, r3
}
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	460b      	mov	r3, r1
 80103b2:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	691b      	ldr	r3, [r3, #16]
 80103b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80103bc:	78fb      	ldrb	r3, [r7, #3]
 80103be:	431a      	orrs	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	611a      	str	r2, [r3, #16]
}
 80103c4:	bf00      	nop
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <LL_DMA_SetDataTransferDirection>:
{
 80103d0:	b480      	push	{r7}
 80103d2:	b085      	sub	sp, #20
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80103dc:	4a0d      	ldr	r2, [pc, #52]	; (8010414 <LL_DMA_SetDataTransferDirection+0x44>)
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	4413      	add	r3, r2
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	461a      	mov	r2, r3
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	4413      	add	r3, r2
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80103f0:	4908      	ldr	r1, [pc, #32]	; (8010414 <LL_DMA_SetDataTransferDirection+0x44>)
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	440b      	add	r3, r1
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	4619      	mov	r1, r3
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	440b      	add	r3, r1
 80103fe:	4619      	mov	r1, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4313      	orrs	r3, r2
 8010404:	600b      	str	r3, [r1, #0]
}
 8010406:	bf00      	nop
 8010408:	3714      	adds	r7, #20
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	080146d4 	.word	0x080146d4

08010418 <LL_DMA_SetMode>:
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8010424:	4a0d      	ldr	r2, [pc, #52]	; (801045c <LL_DMA_SetMode+0x44>)
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	4413      	add	r3, r2
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	461a      	mov	r2, r3
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	4413      	add	r3, r2
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8010438:	4908      	ldr	r1, [pc, #32]	; (801045c <LL_DMA_SetMode+0x44>)
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	440b      	add	r3, r1
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	4619      	mov	r1, r3
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	440b      	add	r3, r1
 8010446:	4619      	mov	r1, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4313      	orrs	r3, r2
 801044c:	600b      	str	r3, [r1, #0]
}
 801044e:	bf00      	nop
 8010450:	3714      	adds	r7, #20
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	080146d4 	.word	0x080146d4

08010460 <LL_DMA_SetPeriphIncMode>:
{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	60f8      	str	r0, [r7, #12]
 8010468:	60b9      	str	r1, [r7, #8]
 801046a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 801046c:	4a0d      	ldr	r2, [pc, #52]	; (80104a4 <LL_DMA_SetPeriphIncMode+0x44>)
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	4413      	add	r3, r2
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	461a      	mov	r2, r3
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	4413      	add	r3, r2
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010480:	4908      	ldr	r1, [pc, #32]	; (80104a4 <LL_DMA_SetPeriphIncMode+0x44>)
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	440b      	add	r3, r1
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	4619      	mov	r1, r3
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	440b      	add	r3, r1
 801048e:	4619      	mov	r1, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	4313      	orrs	r3, r2
 8010494:	600b      	str	r3, [r1, #0]
}
 8010496:	bf00      	nop
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	080146d4 	.word	0x080146d4

080104a8 <LL_DMA_SetMemoryIncMode>:
{
 80104a8:	b480      	push	{r7}
 80104aa:	b085      	sub	sp, #20
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80104b4:	4a0d      	ldr	r2, [pc, #52]	; (80104ec <LL_DMA_SetMemoryIncMode+0x44>)
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	4413      	add	r3, r2
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	461a      	mov	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	4413      	add	r3, r2
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80104c8:	4908      	ldr	r1, [pc, #32]	; (80104ec <LL_DMA_SetMemoryIncMode+0x44>)
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	440b      	add	r3, r1
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	4619      	mov	r1, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	440b      	add	r3, r1
 80104d6:	4619      	mov	r1, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4313      	orrs	r3, r2
 80104dc:	600b      	str	r3, [r1, #0]
}
 80104de:	bf00      	nop
 80104e0:	3714      	adds	r7, #20
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	080146d4 	.word	0x080146d4

080104f0 <LL_DMA_SetPeriphSize>:
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80104fc:	4a0d      	ldr	r2, [pc, #52]	; (8010534 <LL_DMA_SetPeriphSize+0x44>)
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	4413      	add	r3, r2
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	461a      	mov	r2, r3
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	4413      	add	r3, r2
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010510:	4908      	ldr	r1, [pc, #32]	; (8010534 <LL_DMA_SetPeriphSize+0x44>)
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	440b      	add	r3, r1
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	4619      	mov	r1, r3
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	440b      	add	r3, r1
 801051e:	4619      	mov	r1, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4313      	orrs	r3, r2
 8010524:	600b      	str	r3, [r1, #0]
}
 8010526:	bf00      	nop
 8010528:	3714      	adds	r7, #20
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	080146d4 	.word	0x080146d4

08010538 <LL_DMA_SetMemorySize>:
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8010544:	4a0d      	ldr	r2, [pc, #52]	; (801057c <LL_DMA_SetMemorySize+0x44>)
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	4413      	add	r3, r2
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	461a      	mov	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	4413      	add	r3, r2
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8010558:	4908      	ldr	r1, [pc, #32]	; (801057c <LL_DMA_SetMemorySize+0x44>)
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	440b      	add	r3, r1
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	4619      	mov	r1, r3
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	440b      	add	r3, r1
 8010566:	4619      	mov	r1, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4313      	orrs	r3, r2
 801056c:	600b      	str	r3, [r1, #0]
}
 801056e:	bf00      	nop
 8010570:	3714      	adds	r7, #20
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	080146d4 	.word	0x080146d4

08010580 <LL_DMA_SetStreamPriorityLevel>:
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 801058c:	4a0d      	ldr	r2, [pc, #52]	; (80105c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	4413      	add	r3, r2
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	461a      	mov	r2, r3
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	4413      	add	r3, r2
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80105a0:	4908      	ldr	r1, [pc, #32]	; (80105c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	440b      	add	r3, r1
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	4619      	mov	r1, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	440b      	add	r3, r1
 80105ae:	4619      	mov	r1, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	600b      	str	r3, [r1, #0]
}
 80105b6:	bf00      	nop
 80105b8:	3714      	adds	r7, #20
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	080146d4 	.word	0x080146d4

080105c8 <LL_DMA_SetChannelSelection>:
{
 80105c8:	b480      	push	{r7}
 80105ca:	b085      	sub	sp, #20
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80105d4:	4a0d      	ldr	r2, [pc, #52]	; (801060c <LL_DMA_SetChannelSelection+0x44>)
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	4413      	add	r3, r2
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	461a      	mov	r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	4413      	add	r3, r2
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80105e8:	4908      	ldr	r1, [pc, #32]	; (801060c <LL_DMA_SetChannelSelection+0x44>)
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	440b      	add	r3, r1
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	4619      	mov	r1, r3
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	440b      	add	r3, r1
 80105f6:	4619      	mov	r1, r3
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4313      	orrs	r3, r2
 80105fc:	600b      	str	r3, [r1, #0]
}
 80105fe:	bf00      	nop
 8010600:	3714      	adds	r7, #20
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	080146d4 	.word	0x080146d4

08010610 <LL_DMA_DisableFifoMode>:
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 801061a:	4a0c      	ldr	r2, [pc, #48]	; (801064c <LL_DMA_DisableFifoMode+0x3c>)
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	4413      	add	r3, r2
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	4413      	add	r3, r2
 8010628:	695b      	ldr	r3, [r3, #20]
 801062a:	4908      	ldr	r1, [pc, #32]	; (801064c <LL_DMA_DisableFifoMode+0x3c>)
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	440a      	add	r2, r1
 8010630:	7812      	ldrb	r2, [r2, #0]
 8010632:	4611      	mov	r1, r2
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	440a      	add	r2, r1
 8010638:	f023 0304 	bic.w	r3, r3, #4
 801063c:	6153      	str	r3, [r2, #20]
}
 801063e:	bf00      	nop
 8010640:	370c      	adds	r7, #12
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	080146d4 	.word	0x080146d4

08010650 <i2c_init>:

#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	4603      	mov	r3, r0
 8010658:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 801065a:	f7f8 fc85 	bl	8008f68 <vPortEnterCritical>

	switch(i2c_id) {
 801065e:	79fb      	ldrb	r3, [r7, #7]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d002      	beq.n	801066a <i2c_init+0x1a>
 8010664:	2b03      	cmp	r3, #3
 8010666:	d00f      	beq.n	8010688 <i2c_init+0x38>
 8010668:	e01d      	b.n	80106a6 <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 801066a:	f000 faab 	bl	8010bc4 <i2c1_init>
		i2c1drv.i2c = I2C1;
 801066e:	4b13      	ldr	r3, [pc, #76]	; (80106bc <i2c_init+0x6c>)
 8010670:	4a13      	ldr	r2, [pc, #76]	; (80106c0 <i2c_init+0x70>)
 8010672:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 8010674:	2001      	movs	r0, #1
 8010676:	f7f8 ff6d 	bl	8009554 <xQueueCreateMutex>
 801067a:	4603      	mov	r3, r0
 801067c:	4a0f      	ldr	r2, [pc, #60]	; (80106bc <i2c_init+0x6c>)
 801067e:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 8010680:	4810      	ldr	r0, [pc, #64]	; (80106c4 <i2c_init+0x74>)
 8010682:	f7fe fc33 	bl	800eeec <hal_cli_printf>
		break;
 8010686:	e012      	b.n	80106ae <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 8010688:	f000 fb64 	bl	8010d54 <i2c3_init>
		i2c3drv.i2c = I2C3;
 801068c:	4b0e      	ldr	r3, [pc, #56]	; (80106c8 <i2c_init+0x78>)
 801068e:	4a0f      	ldr	r2, [pc, #60]	; (80106cc <i2c_init+0x7c>)
 8010690:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 8010692:	2001      	movs	r0, #1
 8010694:	f7f8 ff5e 	bl	8009554 <xQueueCreateMutex>
 8010698:	4603      	mov	r3, r0
 801069a:	4a0b      	ldr	r2, [pc, #44]	; (80106c8 <i2c_init+0x78>)
 801069c:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 801069e:	480c      	ldr	r0, [pc, #48]	; (80106d0 <i2c_init+0x80>)
 80106a0:	f7fe fc24 	bl	800eeec <hal_cli_printf>
		break;
 80106a4:	e003      	b.n	80106ae <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 80106a6:	480b      	ldr	r0, [pc, #44]	; (80106d4 <i2c_init+0x84>)
 80106a8:	f7fe fc20 	bl	800eeec <hal_cli_printf>
		break;
 80106ac:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 80106ae:	f7f8 fc8b 	bl	8008fc8 <vPortExitCritical>
}
 80106b2:	bf00      	nop
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	20005984 	.word	0x20005984
 80106c0:	40005400 	.word	0x40005400
 80106c4:	08013ebc 	.word	0x08013ebc
 80106c8:	2000598c 	.word	0x2000598c
 80106cc:	40005c00 	.word	0x40005c00
 80106d0:	08013ec8 	.word	0x08013ec8
 80106d4:	08013ed4 	.word	0x08013ed4

080106d8 <hal_i2c_transfer>:

bool hal_i2c_transfer(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b08a      	sub	sp, #40	; 0x28
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6178      	str	r0, [r7, #20]
 80106e0:	60fa      	str	r2, [r7, #12]
 80106e2:	60bb      	str	r3, [r7, #8]
 80106e4:	460b      	mov	r3, r1
 80106e6:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	627b      	str	r3, [r7, #36]	; 0x24

	timeout *= 1000;
 80106ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80106f2:	fb02 f303 	mul.w	r3, r2, r3
 80106f6:	637b      	str	r3, [r7, #52]	; 0x34

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010700:	4618      	mov	r0, r3
 8010702:	f7f9 fa33 	bl	8009b6c <xQueueSemaphoreTake>
 8010706:	4603      	mov	r3, r0
 8010708:	2b01      	cmp	r3, #1
 801070a:	d004      	beq.n	8010716 <hal_i2c_transfer+0x3e>
		hal_cli_printf("i2c semaphore take timeout");
 801070c:	4899      	ldr	r0, [pc, #612]	; (8010974 <hal_i2c_transfer+0x29c>)
 801070e:	f7fe fbed 	bl	800eeec <hal_cli_printf>
		return false;
 8010712:	2300      	movs	r3, #0
 8010714:	e129      	b.n	801096a <hal_i2c_transfer+0x292>
	}

	timer = hal_get_delay_timer(timeout);
 8010716:	463b      	mov	r3, r7
 8010718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801071a:	4618      	mov	r0, r3
 801071c:	f7fe fec8 	bl	800f4b0 <hal_get_delay_timer>
 8010720:	f107 031c 	add.w	r3, r7, #28
 8010724:	463a      	mov	r2, r7
 8010726:	e892 0003 	ldmia.w	r2, {r0, r1}
 801072a:	e883 0003 	stmia.w	r3, {r0, r1}

	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 801072e:	e013      	b.n	8010758 <hal_i2c_transfer+0x80>
		if(hal_delay_timer_is_expired(&timer)) {
 8010730:	f107 031c 	add.w	r3, r7, #28
 8010734:	4618      	mov	r0, r3
 8010736:	f7fe fee1 	bl	800f4fc <hal_delay_timer_is_expired>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d00b      	beq.n	8010758 <hal_i2c_transfer+0x80>
			xSemaphoreGive(drv->mutex);
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	6858      	ldr	r0, [r3, #4]
 8010744:	2300      	movs	r3, #0
 8010746:	2200      	movs	r2, #0
 8010748:	2100      	movs	r1, #0
 801074a:	f7f8 ff1b 	bl	8009584 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 801074e:	488a      	ldr	r0, [pc, #552]	; (8010978 <hal_i2c_transfer+0x2a0>)
 8010750:	f7fe fbcc 	bl	800eeec <hal_cli_printf>
			return false;
 8010754:	2300      	movs	r3, #0
 8010756:	e108      	b.n	801096a <hal_i2c_transfer+0x292>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff fdbe 	bl	80102de <LL_I2C_IsActiveFlag_BUSY>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d1e3      	bne.n	8010730 <hal_i2c_transfer+0x58>
		}
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff fdee 	bl	801034e <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8010772:	e018      	b.n	80107a6 <hal_i2c_transfer+0xce>
		if(hal_delay_timer_is_expired(&timer)) {
 8010774:	f107 031c 	add.w	r3, r7, #28
 8010778:	4618      	mov	r0, r3
 801077a:	f7fe febf 	bl	800f4fc <hal_delay_timer_is_expired>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d010      	beq.n	80107a6 <hal_i2c_transfer+0xce>
			xSemaphoreGive(drv->mutex);
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	6858      	ldr	r0, [r3, #4]
 8010788:	2300      	movs	r3, #0
 801078a:	2200      	movs	r2, #0
 801078c:	2100      	movs	r1, #0
 801078e:	f7f8 fef9 	bl	8009584 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4618      	mov	r0, r3
 8010798:	f7ff fde9 	bl	801036e <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 801079c:	4877      	ldr	r0, [pc, #476]	; (801097c <hal_i2c_transfer+0x2a4>)
 801079e:	f7fe fba5 	bl	800eeec <hal_cli_printf>
			return false;
 80107a2:	2300      	movs	r3, #0
 80107a4:	e0e1      	b.n	801096a <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7ff fd71 	bl	8010292 <LL_I2C_IsActiveFlag_SB>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d0de      	beq.n	8010774 <hal_i2c_transfer+0x9c>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr);
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	7cfa      	ldrb	r2, [r7, #19]
 80107bc:	4611      	mov	r1, r2
 80107be:	4618      	mov	r0, r3
 80107c0:	f7ff fdf2 	bl	80103a8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80107c4:	e018      	b.n	80107f8 <hal_i2c_transfer+0x120>
		if(hal_delay_timer_is_expired(&timer)) {
 80107c6:	f107 031c 	add.w	r3, r7, #28
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fe fe96 	bl	800f4fc <hal_delay_timer_is_expired>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d010      	beq.n	80107f8 <hal_i2c_transfer+0x120>
			xSemaphoreGive(drv->mutex);
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	6858      	ldr	r0, [r3, #4]
 80107da:	2300      	movs	r3, #0
 80107dc:	2200      	movs	r2, #0
 80107de:	2100      	movs	r1, #0
 80107e0:	f7f8 fed0 	bl	8009584 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7ff fdc0 	bl	801036e <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 80107ee:	4864      	ldr	r0, [pc, #400]	; (8010980 <hal_i2c_transfer+0x2a8>)
 80107f0:	f7fe fb7c 	bl	800eeec <hal_cli_printf>
			return false;
 80107f4:	2300      	movs	r3, #0
 80107f6:	e0b8      	b.n	801096a <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fd5b 	bl	80102b8 <LL_I2C_IsActiveFlag_ADDR>
 8010802:	4603      	mov	r3, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	d0de      	beq.n	80107c6 <hal_i2c_transfer+0xee>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4618      	mov	r0, r3
 801080e:	f7ff fd79 	bl	8010304 <LL_I2C_ClearFlag_ADDR>

	/* register address transfer */
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8010812:	e018      	b.n	8010846 <hal_i2c_transfer+0x16e>
		if(hal_delay_timer_is_expired(&timer)) {
 8010814:	f107 031c 	add.w	r3, r7, #28
 8010818:	4618      	mov	r0, r3
 801081a:	f7fe fe6f 	bl	800f4fc <hal_delay_timer_is_expired>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d010      	beq.n	8010846 <hal_i2c_transfer+0x16e>
			xSemaphoreGive(drv->mutex);
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	6858      	ldr	r0, [r3, #4]
 8010828:	2300      	movs	r3, #0
 801082a:	2200      	movs	r2, #0
 801082c:	2100      	movs	r1, #0
 801082e:	f7f8 fea9 	bl	8009584 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4618      	mov	r0, r3
 8010838:	f7ff fd99 	bl	801036e <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c register address transmit timeout");
 801083c:	4851      	ldr	r0, [pc, #324]	; (8010984 <hal_i2c_transfer+0x2ac>)
 801083e:	f7fe fb55 	bl	800eeec <hal_cli_printf>
			return false;
 8010842:	2300      	movs	r3, #0
 8010844:	e091      	b.n	801096a <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff fce8 	bl	8010220 <LL_I2C_IsActiveFlag_TXE>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d0de      	beq.n	8010814 <hal_i2c_transfer+0x13c>
		}
	}
	LL_I2C_TransmitData8(drv->i2c, regaddr);
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	68fa      	ldr	r2, [r7, #12]
 801085c:	b2d2      	uxtb	r2, r2
 801085e:	4611      	mov	r1, r2
 8010860:	4618      	mov	r0, r3
 8010862:	f7ff fda1 	bl	80103a8 <LL_I2C_TransmitData8>


	while(index < size) {
 8010866:	e02b      	b.n	80108c0 <hal_i2c_transfer+0x1e8>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8010868:	f107 031c 	add.w	r3, r7, #28
 801086c:	4618      	mov	r0, r3
 801086e:	f7fe fe45 	bl	800f4fc <hal_delay_timer_is_expired>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d010      	beq.n	801089a <hal_i2c_transfer+0x1c2>
				xSemaphoreGive(drv->mutex);
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	6858      	ldr	r0, [r3, #4]
 801087c:	2300      	movs	r3, #0
 801087e:	2200      	movs	r2, #0
 8010880:	2100      	movs	r1, #0
 8010882:	f7f8 fe7f 	bl	8009584 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4618      	mov	r0, r3
 801088c:	f7ff fd6f 	bl	801036e <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c TXE flag timeout");
 8010890:	483d      	ldr	r0, [pc, #244]	; (8010988 <hal_i2c_transfer+0x2b0>)
 8010892:	f7fe fb2b 	bl	800eeec <hal_cli_printf>
				return false;
 8010896:	2300      	movs	r3, #0
 8010898:	e067      	b.n	801096a <hal_i2c_transfer+0x292>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4618      	mov	r0, r3
 80108a0:	f7ff fcbe 	bl	8010220 <LL_I2C_IsActiveFlag_TXE>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d0de      	beq.n	8010868 <hal_i2c_transfer+0x190>
			}
		}

		LL_I2C_TransmitData8(drv->i2c, buf[index++]);
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	6818      	ldr	r0, [r3, #0]
 80108ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	627a      	str	r2, [r7, #36]	; 0x24
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	4413      	add	r3, r2
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	4619      	mov	r1, r3
 80108bc:	f7ff fd74 	bl	80103a8 <LL_I2C_TransmitData8>
	while(index < size) {
 80108c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d3e8      	bcc.n	801089a <hal_i2c_transfer+0x1c2>
	}


	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80108c8:	e018      	b.n	80108fc <hal_i2c_transfer+0x224>
		if(hal_delay_timer_is_expired(&timer)) {
 80108ca:	f107 031c 	add.w	r3, r7, #28
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fe fe14 	bl	800f4fc <hal_delay_timer_is_expired>
 80108d4:	4603      	mov	r3, r0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d010      	beq.n	80108fc <hal_i2c_transfer+0x224>
			xSemaphoreGive(drv->mutex);
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	6858      	ldr	r0, [r3, #4]
 80108de:	2300      	movs	r3, #0
 80108e0:	2200      	movs	r2, #0
 80108e2:	2100      	movs	r1, #0
 80108e4:	f7f8 fe4e 	bl	8009584 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ff fd3e 	bl	801036e <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c TXE flag timeout");
 80108f2:	4825      	ldr	r0, [pc, #148]	; (8010988 <hal_i2c_transfer+0x2b0>)
 80108f4:	f7fe fafa 	bl	800eeec <hal_cli_printf>
			return false;
 80108f8:	2300      	movs	r3, #0
 80108fa:	e036      	b.n	801096a <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4618      	mov	r0, r3
 8010902:	f7ff fc8d 	bl	8010220 <LL_I2C_IsActiveFlag_TXE>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	d0de      	beq.n	80108ca <hal_i2c_transfer+0x1f2>
		}
	}

	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 801090c:	e018      	b.n	8010940 <hal_i2c_transfer+0x268>
		if(hal_delay_timer_is_expired(&timer)) {
 801090e:	f107 031c 	add.w	r3, r7, #28
 8010912:	4618      	mov	r0, r3
 8010914:	f7fe fdf2 	bl	800f4fc <hal_delay_timer_is_expired>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d010      	beq.n	8010940 <hal_i2c_transfer+0x268>
			xSemaphoreGive(drv->mutex);
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	6858      	ldr	r0, [r3, #4]
 8010922:	2300      	movs	r3, #0
 8010924:	2200      	movs	r2, #0
 8010926:	2100      	movs	r1, #0
 8010928:	f7f8 fe2c 	bl	8009584 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4618      	mov	r0, r3
 8010932:	f7ff fd1c 	bl	801036e <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c BTF flag timeout");
 8010936:	4815      	ldr	r0, [pc, #84]	; (801098c <hal_i2c_transfer+0x2b4>)
 8010938:	f7fe fad8 	bl	800eeec <hal_cli_printf>
			return false;
 801093c:	2300      	movs	r3, #0
 801093e:	e014      	b.n	801096a <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4618      	mov	r0, r3
 8010946:	f7ff fc7e 	bl	8010246 <LL_I2C_IsActiveFlag_BTF>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d0de      	beq.n	801090e <hal_i2c_transfer+0x236>
		}
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4618      	mov	r0, r3
 8010956:	f7ff fd0a 	bl	801036e <LL_I2C_GenerateStopCondition>
	xSemaphoreGive(drv->mutex);
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	6858      	ldr	r0, [r3, #4]
 801095e:	2300      	movs	r3, #0
 8010960:	2200      	movs	r2, #0
 8010962:	2100      	movs	r1, #0
 8010964:	f7f8 fe0e 	bl	8009584 <xQueueGenericSend>

	return true;
 8010968:	2301      	movs	r3, #1
}
 801096a:	4618      	mov	r0, r3
 801096c:	3728      	adds	r7, #40	; 0x28
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	08013ee8 	.word	0x08013ee8
 8010978:	08013f04 	.word	0x08013f04
 801097c:	08013f1c 	.word	0x08013f1c
 8010980:	08013f38 	.word	0x08013f38
 8010984:	08013f58 	.word	0x08013f58
 8010988:	08013f80 	.word	0x08013f80
 801098c:	08013f98 	.word	0x08013f98

08010990 <hal_i2c_receive>:


bool hal_i2c_receive(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 8010990:	b590      	push	{r4, r7, lr}
 8010992:	b08d      	sub	sp, #52	; 0x34
 8010994:	af02      	add	r7, sp, #8
 8010996:	6178      	str	r0, [r7, #20]
 8010998:	60fa      	str	r2, [r7, #12]
 801099a:	60bb      	str	r3, [r7, #8]
 801099c:	460b      	mov	r3, r1
 801099e:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	627b      	str	r3, [r7, #36]	; 0x24

	if(hal_i2c_transfer(drv,addr,regaddr,NULL,0,timeout) == false) {
 80109a4:	7cf9      	ldrb	r1, [r7, #19]
 80109a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a8:	9301      	str	r3, [sp, #4]
 80109aa:	2300      	movs	r3, #0
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	2300      	movs	r3, #0
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	6978      	ldr	r0, [r7, #20]
 80109b4:	f7ff fe90 	bl	80106d8 <hal_i2c_transfer>
 80109b8:	4603      	mov	r3, r0
 80109ba:	f083 0301 	eor.w	r3, r3, #1
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d004      	beq.n	80109ce <hal_i2c_receive+0x3e>
		hal_cli_printf("i2c transfer error");
 80109c4:	4879      	ldr	r0, [pc, #484]	; (8010bac <hal_i2c_receive+0x21c>)
 80109c6:	f7fe fa91 	bl	800eeec <hal_cli_printf>
		return false;
 80109ca:	2300      	movs	r3, #0
 80109cc:	e0ea      	b.n	8010ba4 <hal_i2c_receive+0x214>
	}

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7f9 f8c8 	bl	8009b6c <xQueueSemaphoreTake>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d004      	beq.n	80109ec <hal_i2c_receive+0x5c>
		hal_cli_printf("i2c semaphore take timeout");
 80109e2:	4873      	ldr	r0, [pc, #460]	; (8010bb0 <hal_i2c_receive+0x220>)
 80109e4:	f7fe fa82 	bl	800eeec <hal_cli_printf>
		return false;
 80109e8:	2300      	movs	r3, #0
 80109ea:	e0db      	b.n	8010ba4 <hal_i2c_receive+0x214>
	}

	timer = hal_get_delay_timer(timeout);
 80109ec:	463b      	mov	r3, r7
 80109ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fe fd5d 	bl	800f4b0 <hal_get_delay_timer>
 80109f6:	f107 031c 	add.w	r3, r7, #28
 80109fa:	463a      	mov	r2, r7
 80109fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a00:	e883 0003 	stmia.w	r3, {r0, r1}


	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8010a04:	e013      	b.n	8010a2e <hal_i2c_receive+0x9e>
		if(hal_delay_timer_is_expired(&timer)) {
 8010a06:	f107 031c 	add.w	r3, r7, #28
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fe fd76 	bl	800f4fc <hal_delay_timer_is_expired>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00b      	beq.n	8010a2e <hal_i2c_receive+0x9e>
			xSemaphoreGive(drv->mutex);
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	6858      	ldr	r0, [r3, #4]
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	2100      	movs	r1, #0
 8010a20:	f7f8 fdb0 	bl	8009584 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 8010a24:	4863      	ldr	r0, [pc, #396]	; (8010bb4 <hal_i2c_receive+0x224>)
 8010a26:	f7fe fa61 	bl	800eeec <hal_cli_printf>
			return false;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	e0ba      	b.n	8010ba4 <hal_i2c_receive+0x214>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7ff fc53 	bl	80102de <LL_I2C_IsActiveFlag_BUSY>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1e3      	bne.n	8010a06 <hal_i2c_receive+0x76>
		}
	}

	if(size == 1) {
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a40:	2b01      	cmp	r3, #1
 8010a42:	d106      	bne.n	8010a52 <hal_i2c_receive+0xc2>
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2100      	movs	r1, #0
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff fc6c 	bl	8010328 <LL_I2C_AcknowledgeNextData>
 8010a50:	e006      	b.n	8010a60 <hal_i2c_receive+0xd0>
	} else {
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_ACK);
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7ff fc64 	bl	8010328 <LL_I2C_AcknowledgeNextData>
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7ff fc72 	bl	801034e <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8010a6a:	e018      	b.n	8010a9e <hal_i2c_receive+0x10e>
		if(hal_delay_timer_is_expired(&timer)) {
 8010a6c:	f107 031c 	add.w	r3, r7, #28
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7fe fd43 	bl	800f4fc <hal_delay_timer_is_expired>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d010      	beq.n	8010a9e <hal_i2c_receive+0x10e>
			xSemaphoreGive(drv->mutex);
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	6858      	ldr	r0, [r3, #4]
 8010a80:	2300      	movs	r3, #0
 8010a82:	2200      	movs	r2, #0
 8010a84:	2100      	movs	r1, #0
 8010a86:	f7f8 fd7d 	bl	8009584 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7ff fc6d 	bl	801036e <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 8010a94:	4848      	ldr	r0, [pc, #288]	; (8010bb8 <hal_i2c_receive+0x228>)
 8010a96:	f7fe fa29 	bl	800eeec <hal_cli_printf>
			return false;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	e082      	b.n	8010ba4 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7ff fbf5 	bl	8010292 <LL_I2C_IsActiveFlag_SB>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d0de      	beq.n	8010a6c <hal_i2c_receive+0xdc>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr | 0x01);
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	681a      	ldr	r2, [r3, #0]
 8010ab2:	7cfb      	ldrb	r3, [r7, #19]
 8010ab4:	f043 0301 	orr.w	r3, r3, #1
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	4619      	mov	r1, r3
 8010abc:	4610      	mov	r0, r2
 8010abe:	f7ff fc73 	bl	80103a8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8010ac2:	e018      	b.n	8010af6 <hal_i2c_receive+0x166>
		if(hal_delay_timer_is_expired(&timer)) {
 8010ac4:	f107 031c 	add.w	r3, r7, #28
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fe fd17 	bl	800f4fc <hal_delay_timer_is_expired>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d010      	beq.n	8010af6 <hal_i2c_receive+0x166>
			xSemaphoreGive(drv->mutex);
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	6858      	ldr	r0, [r3, #4]
 8010ad8:	2300      	movs	r3, #0
 8010ada:	2200      	movs	r2, #0
 8010adc:	2100      	movs	r1, #0
 8010ade:	f7f8 fd51 	bl	8009584 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7ff fc41 	bl	801036e <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 8010aec:	4833      	ldr	r0, [pc, #204]	; (8010bbc <hal_i2c_receive+0x22c>)
 8010aee:	f7fe f9fd 	bl	800eeec <hal_cli_printf>
			return false;
 8010af2:	2300      	movs	r3, #0
 8010af4:	e056      	b.n	8010ba4 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7ff fbdc 	bl	80102b8 <LL_I2C_IsActiveFlag_ADDR>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d0de      	beq.n	8010ac4 <hal_i2c_receive+0x134>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7ff fbfa 	bl	8010304 <LL_I2C_ClearFlag_ADDR>

	while(index < size) {
 8010b10:	e037      	b.n	8010b82 <hal_i2c_receive+0x1f2>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8010b12:	f107 031c 	add.w	r3, r7, #28
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fe fcf0 	bl	800f4fc <hal_delay_timer_is_expired>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d010      	beq.n	8010b44 <hal_i2c_receive+0x1b4>
				xSemaphoreGive(drv->mutex);
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	6858      	ldr	r0, [r3, #4]
 8010b26:	2300      	movs	r3, #0
 8010b28:	2200      	movs	r2, #0
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	f7f8 fd2a 	bl	8009584 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7ff fc1a 	bl	801036e <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c RXNE flag timeout");
 8010b3a:	4821      	ldr	r0, [pc, #132]	; (8010bc0 <hal_i2c_receive+0x230>)
 8010b3c:	f7fe f9d6 	bl	800eeec <hal_cli_printf>
				return false;
 8010b40:	2300      	movs	r3, #0
 8010b42:	e02f      	b.n	8010ba4 <hal_i2c_receive+0x214>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7ff fb8f 	bl	801026c <LL_I2C_IsActiveFlag_RXNE>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d0de      	beq.n	8010b12 <hal_i2c_receive+0x182>
			}
		}
		buf[index++] = LL_I2C_ReceiveData8(drv->i2c);
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	6819      	ldr	r1, [r3, #0]
 8010b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5a:	1c5a      	adds	r2, r3, #1
 8010b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	18d4      	adds	r4, r2, r3
 8010b62:	4608      	mov	r0, r1
 8010b64:	f7ff fc13 	bl	801038e <LL_I2C_ReceiveData8>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	7023      	strb	r3, [r4, #0]

		if(index == size - 1)
 8010b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d105      	bne.n	8010b82 <hal_i2c_receive+0x1f2>
			LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7ff fbd3 	bl	8010328 <LL_I2C_AcknowledgeNextData>
	while(index < size) {
 8010b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d3dc      	bcc.n	8010b44 <hal_i2c_receive+0x1b4>
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7ff fbed 	bl	801036e <LL_I2C_GenerateStopCondition>

	xSemaphoreGive(drv->mutex);
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	6858      	ldr	r0, [r3, #4]
 8010b98:	2300      	movs	r3, #0
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	2100      	movs	r1, #0
 8010b9e:	f7f8 fcf1 	bl	8009584 <xQueueGenericSend>

	return true;
 8010ba2:	2301      	movs	r3, #1
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	372c      	adds	r7, #44	; 0x2c
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd90      	pop	{r4, r7, pc}
 8010bac:	08013fb0 	.word	0x08013fb0
 8010bb0:	08013ee8 	.word	0x08013ee8
 8010bb4:	08013f04 	.word	0x08013f04
 8010bb8:	08013f1c 	.word	0x08013f1c
 8010bbc:	08013f38 	.word	0x08013f38
 8010bc0:	08013fc4 	.word	0x08013fc4

08010bc4 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b08a      	sub	sp, #40	; 0x28
 8010bc8:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8010bca:	463b      	mov	r3, r7
 8010bcc:	2220      	movs	r2, #32
 8010bce:	2100      	movs	r1, #0
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f002 fbdd 	bl	8013390 <memset>

	hal_gpio_init_alt(
 8010bd6:	2304      	movs	r3, #4
 8010bd8:	9300      	str	r3, [sp, #0]
 8010bda:	2303      	movs	r3, #3
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2104      	movs	r1, #4
 8010be0:	4857      	ldr	r0, [pc, #348]	; (8010d40 <i2c1_init+0x17c>)
 8010be2:	f7fe fef3 	bl	800f9cc <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 8010be6:	2304      	movs	r3, #4
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	2303      	movs	r3, #3
 8010bec:	2200      	movs	r2, #0
 8010bee:	2104      	movs	r1, #4
 8010bf0:	4854      	ldr	r0, [pc, #336]	; (8010d44 <i2c1_init+0x180>)
 8010bf2:	f7fe feeb 	bl	800f9cc <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_TX_STREAM, DMA_I2C1_TX_CHANNEL);
 8010bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010bfa:	2106      	movs	r1, #6
 8010bfc:	4852      	ldr	r0, [pc, #328]	; (8010d48 <i2c1_init+0x184>)
 8010bfe:	f7ff fce3 	bl	80105c8 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8010c02:	2240      	movs	r2, #64	; 0x40
 8010c04:	2106      	movs	r1, #6
 8010c06:	4850      	ldr	r0, [pc, #320]	; (8010d48 <i2c1_init+0x184>)
 8010c08:	f7ff fbe2 	bl	80103d0 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	2106      	movs	r1, #6
 8010c10:	484d      	ldr	r0, [pc, #308]	; (8010d48 <i2c1_init+0x184>)
 8010c12:	f7ff fcb5 	bl	8010580 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8010c16:	2200      	movs	r2, #0
 8010c18:	2106      	movs	r1, #6
 8010c1a:	484b      	ldr	r0, [pc, #300]	; (8010d48 <i2c1_init+0x184>)
 8010c1c:	f7ff fbfc 	bl	8010418 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8010c20:	2200      	movs	r2, #0
 8010c22:	2106      	movs	r1, #6
 8010c24:	4848      	ldr	r0, [pc, #288]	; (8010d48 <i2c1_init+0x184>)
 8010c26:	f7ff fc1b 	bl	8010460 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8010c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010c2e:	2106      	movs	r1, #6
 8010c30:	4845      	ldr	r0, [pc, #276]	; (8010d48 <i2c1_init+0x184>)
 8010c32:	f7ff fc39 	bl	80104a8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8010c36:	2200      	movs	r2, #0
 8010c38:	2106      	movs	r1, #6
 8010c3a:	4843      	ldr	r0, [pc, #268]	; (8010d48 <i2c1_init+0x184>)
 8010c3c:	f7ff fc58 	bl	80104f0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8010c40:	2200      	movs	r2, #0
 8010c42:	2106      	movs	r1, #6
 8010c44:	4840      	ldr	r0, [pc, #256]	; (8010d48 <i2c1_init+0x184>)
 8010c46:	f7ff fc77 	bl	8010538 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_TX_STREAM);
 8010c4a:	2106      	movs	r1, #6
 8010c4c:	483e      	ldr	r0, [pc, #248]	; (8010d48 <i2c1_init+0x184>)
 8010c4e:	f7ff fcdf 	bl	8010610 <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_RX_STREAM, DMA_I2C1_RX_CHANNEL);
 8010c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010c56:	2100      	movs	r1, #0
 8010c58:	483b      	ldr	r0, [pc, #236]	; (8010d48 <i2c1_init+0x184>)
 8010c5a:	f7ff fcb5 	bl	80105c8 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8010c5e:	2200      	movs	r2, #0
 8010c60:	2100      	movs	r1, #0
 8010c62:	4839      	ldr	r0, [pc, #228]	; (8010d48 <i2c1_init+0x184>)
 8010c64:	f7ff fbb4 	bl	80103d0 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8010c68:	2200      	movs	r2, #0
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	4836      	ldr	r0, [pc, #216]	; (8010d48 <i2c1_init+0x184>)
 8010c6e:	f7ff fc87 	bl	8010580 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MODE_NORMAL);
 8010c72:	2200      	movs	r2, #0
 8010c74:	2100      	movs	r1, #0
 8010c76:	4834      	ldr	r0, [pc, #208]	; (8010d48 <i2c1_init+0x184>)
 8010c78:	f7ff fbce 	bl	8010418 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	2100      	movs	r1, #0
 8010c80:	4831      	ldr	r0, [pc, #196]	; (8010d48 <i2c1_init+0x184>)
 8010c82:	f7ff fbed 	bl	8010460 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8010c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	482e      	ldr	r0, [pc, #184]	; (8010d48 <i2c1_init+0x184>)
 8010c8e:	f7ff fc0b 	bl	80104a8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8010c92:	2200      	movs	r2, #0
 8010c94:	2100      	movs	r1, #0
 8010c96:	482c      	ldr	r0, [pc, #176]	; (8010d48 <i2c1_init+0x184>)
 8010c98:	f7ff fc2a 	bl	80104f0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	4829      	ldr	r0, [pc, #164]	; (8010d48 <i2c1_init+0x184>)
 8010ca2:	f7ff fc49 	bl	8010538 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_RX_STREAM);
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	4827      	ldr	r0, [pc, #156]	; (8010d48 <i2c1_init+0x184>)
 8010caa:	f7ff fcb1 	bl	8010610 <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010cae:	f7ff f9eb 	bl	8010088 <__NVIC_GetPriorityGrouping>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	2105      	movs	r1, #5
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff fa3b 	bl	8010134 <NVIC_EncodePriority>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	201f      	movs	r0, #31
 8010cc4:	f7ff fa0c 	bl	80100e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8010cc8:	201f      	movs	r0, #31
 8010cca:	f7ff f9eb 	bl	80100a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010cce:	f7ff f9db 	bl	8010088 <__NVIC_GetPriorityGrouping>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	2105      	movs	r1, #5
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7ff fa2b 	bl	8010134 <NVIC_EncodePriority>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	2020      	movs	r0, #32
 8010ce4:	f7ff f9fc 	bl	80100e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8010ce8:	2020      	movs	r0, #32
 8010cea:	f7ff f9db 	bl	80100a4 <__NVIC_EnableIRQ>

  /* I2C Initialization */
  LL_I2C_DisableOwnAddress2(I2C1);
 8010cee:	4817      	ldr	r0, [pc, #92]	; (8010d4c <i2c1_init+0x188>)
 8010cf0:	f7ff fa86 	bl	8010200 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8010cf4:	4815      	ldr	r0, [pc, #84]	; (8010d4c <i2c1_init+0x188>)
 8010cf6:	f7ff fa60 	bl	80101ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8010cfa:	4814      	ldr	r0, [pc, #80]	; (8010d4c <i2c1_init+0x188>)
 8010cfc:	f7ff fa4d 	bl	801019a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8010d00:	2300      	movs	r3, #0
 8010d02:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 400000;
 8010d04:	4b12      	ldr	r3, [pc, #72]	; (8010d50 <i2c1_init+0x18c>)
 8010d06:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8010d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d1c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8010d1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d22:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8010d24:	463b      	mov	r3, r7
 8010d26:	4619      	mov	r1, r3
 8010d28:	4808      	ldr	r0, [pc, #32]	; (8010d4c <i2c1_init+0x188>)
 8010d2a:	f7f2 ffd7 	bl	8003cdc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8010d2e:	2100      	movs	r1, #0
 8010d30:	4806      	ldr	r0, [pc, #24]	; (8010d4c <i2c1_init+0x188>)
 8010d32:	f7ff fa52 	bl	80101da <LL_I2C_SetOwnAddress2>
}
 8010d36:	bf00      	nop
 8010d38:	3720      	adds	r7, #32
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	0801472c 	.word	0x0801472c
 8010d44:	08014734 	.word	0x08014734
 8010d48:	40026000 	.word	0x40026000
 8010d4c:	40005400 	.word	0x40005400
 8010d50:	00061a80 	.word	0x00061a80

08010d54 <i2c3_init>:

static void i2c3_init(void)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b08a      	sub	sp, #40	; 0x28
 8010d58:	af02      	add	r7, sp, #8
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8010d5a:	463b      	mov	r3, r7
 8010d5c:	2220      	movs	r2, #32
 8010d5e:	2100      	movs	r1, #0
 8010d60:	4618      	mov	r0, r3
 8010d62:	f002 fb15 	bl	8013390 <memset>

	hal_gpio_init_alt(
 8010d66:	2304      	movs	r3, #4
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	2104      	movs	r1, #4
 8010d70:	4829      	ldr	r0, [pc, #164]	; (8010e18 <i2c3_init+0xc4>)
 8010d72:	f7fe fe2b 	bl	800f9cc <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

	hal_gpio_init_alt(
 8010d76:	2304      	movs	r3, #4
 8010d78:	9300      	str	r3, [sp, #0]
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	2104      	movs	r1, #4
 8010d80:	4826      	ldr	r0, [pc, #152]	; (8010e1c <i2c3_init+0xc8>)
 8010d82:	f7fe fe23 	bl	800f9cc <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010d86:	f7ff f97f 	bl	8010088 <__NVIC_GetPriorityGrouping>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	2105      	movs	r1, #5
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7ff f9cf 	bl	8010134 <NVIC_EncodePriority>
 8010d96:	4603      	mov	r3, r0
 8010d98:	4619      	mov	r1, r3
 8010d9a:	2048      	movs	r0, #72	; 0x48
 8010d9c:	f7ff f9a0 	bl	80100e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 8010da0:	2048      	movs	r0, #72	; 0x48
 8010da2:	f7ff f97f 	bl	80100a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010da6:	f7ff f96f 	bl	8010088 <__NVIC_GetPriorityGrouping>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2200      	movs	r2, #0
 8010dae:	2105      	movs	r1, #5
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff f9bf 	bl	8010134 <NVIC_EncodePriority>
 8010db6:	4603      	mov	r3, r0
 8010db8:	4619      	mov	r1, r3
 8010dba:	2049      	movs	r0, #73	; 0x49
 8010dbc:	f7ff f990 	bl	80100e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 8010dc0:	2049      	movs	r0, #73	; 0x49
 8010dc2:	f7ff f96f 	bl	80100a4 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8010dc6:	4816      	ldr	r0, [pc, #88]	; (8010e20 <i2c3_init+0xcc>)
 8010dc8:	f7ff fa1a 	bl	8010200 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8010dcc:	4814      	ldr	r0, [pc, #80]	; (8010e20 <i2c3_init+0xcc>)
 8010dce:	f7ff f9f4 	bl	80101ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8010dd2:	4813      	ldr	r0, [pc, #76]	; (8010e20 <i2c3_init+0xcc>)
 8010dd4:	f7ff f9e1 	bl	801019a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 8010ddc:	4b11      	ldr	r3, [pc, #68]	; (8010e24 <i2c3_init+0xd0>)
 8010dde:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8010de0:	2300      	movs	r3, #0
 8010de2:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8010de4:	2300      	movs	r3, #0
 8010de6:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8010de8:	2300      	movs	r3, #0
 8010dea:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8010dec:	2300      	movs	r3, #0
 8010dee:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8010df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010df4:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8010df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dfa:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8010dfc:	463b      	mov	r3, r7
 8010dfe:	4619      	mov	r1, r3
 8010e00:	4807      	ldr	r0, [pc, #28]	; (8010e20 <i2c3_init+0xcc>)
 8010e02:	f7f2 ff6b 	bl	8003cdc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8010e06:	2100      	movs	r1, #0
 8010e08:	4805      	ldr	r0, [pc, #20]	; (8010e20 <i2c3_init+0xcc>)
 8010e0a:	f7ff f9e6 	bl	80101da <LL_I2C_SetOwnAddress2>
}
 8010e0e:	bf00      	nop
 8010e10:	3720      	adds	r7, #32
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	0801473c 	.word	0x0801473c
 8010e1c:	08014744 	.word	0x08014744
 8010e20:	40005c00 	.word	0x40005c00
 8010e24:	000186a0 	.word	0x000186a0

08010e28 <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	af00      	add	r7, sp, #0

}
 8010e2c:	bf00      	nop
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8010e36:	b480      	push	{r7}
 8010e38:	af00      	add	r7, sp, #0

}
 8010e3a:	bf00      	nop
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8010e44:	b480      	push	{r7}
 8010e46:	af00      	add	r7, sp, #0

}
 8010e48:	bf00      	nop
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr

08010e52 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8010e52:	b480      	push	{r7}
 8010e54:	af00      	add	r7, sp, #0

}
 8010e56:	bf00      	nop
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 8010e60:	b480      	push	{r7}
 8010e62:	af00      	add	r7, sp, #0

}
 8010e64:	bf00      	nop
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr

08010e6e <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 8010e6e:	b480      	push	{r7}
 8010e70:	af00      	add	r7, sp, #0

}
 8010e72:	bf00      	nop
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr

08010e7c <initThread>:
/* application */
#include "mp3_app.h"
#include "display_app.h"


static void initThread(void* param) {
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af02      	add	r7, sp, #8
 8010e82:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter initThread");
 8010e84:	481d      	ldr	r0, [pc, #116]	; (8010efc <initThread+0x80>)
 8010e86:	f7fe f831 	bl	800eeec <hal_cli_printf>

	sdio_init();
 8010e8a:	f000 f9ff 	bl	801128c <sdio_init>
	MX_FATFS_Init();
 8010e8e:	f7f4 fc43 	bl	8005718 <MX_FATFS_Init>

	i2c_init(I2cId1);
 8010e92:	2001      	movs	r0, #1
 8010e94:	f7ff fbdc 	bl	8010650 <i2c_init>
	i2c_init(I2cId3);
 8010e98:	2003      	movs	r0, #3
 8010e9a:	f7ff fbd9 	bl	8010650 <i2c_init>

	spi_init(SpiId2);
 8010e9e:	2002      	movs	r0, #2
 8010ea0:	f000 fd5a 	bl	8011958 <spi_init>
	spi_init(SpiId4);
 8010ea4:	2004      	movs	r0, #4
 8010ea6:	f000 fd57 	bl	8011958 <spi_init>

	adc_init(AdcId1);
 8010eaa:	2001      	movs	r0, #1
 8010eac:	f7fd fe70 	bl	800eb90 <adc_init>

	tim_init(TimId4);
 8010eb0:	2004      	movs	r0, #4
 8010eb2:	f001 fb17 	bl	80124e4 <tim_init>

	hal_resources_init();
 8010eb6:	f000 f91d 	bl	80110f4 <hal_resources_init>

	xTaskCreate(mp3Thread, "mp3_app", 512, NULL, 4, NULL);
 8010eba:	2300      	movs	r3, #0
 8010ebc:	9301      	str	r3, [sp, #4]
 8010ebe:	2304      	movs	r3, #4
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ec8:	490d      	ldr	r1, [pc, #52]	; (8010f00 <initThread+0x84>)
 8010eca:	480e      	ldr	r0, [pc, #56]	; (8010f04 <initThread+0x88>)
 8010ecc:	f7f9 f975 	bl	800a1ba <xTaskCreate>
	xTaskCreate(displayThread, "display", 512, NULL, 3, NULL);
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	9301      	str	r3, [sp, #4]
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ede:	490a      	ldr	r1, [pc, #40]	; (8010f08 <initThread+0x8c>)
 8010ee0:	480a      	ldr	r0, [pc, #40]	; (8010f0c <initThread+0x90>)
 8010ee2:	f7f9 f96a 	bl	800a1ba <xTaskCreate>

	hal_cli_printf("exit initThread");
 8010ee6:	480a      	ldr	r0, [pc, #40]	; (8010f10 <initThread+0x94>)
 8010ee8:	f7fe f800 	bl	800eeec <hal_cli_printf>

	vTaskDelete(NULL);
 8010eec:	2000      	movs	r0, #0
 8010eee:	f7f9 facd 	bl	800a48c <vTaskDelete>
}
 8010ef2:	bf00      	nop
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	08013fdc 	.word	0x08013fdc
 8010f00:	08013ff0 	.word	0x08013ff0
 8010f04:	08012fd9 	.word	0x08012fd9
 8010f08:	08013ff8 	.word	0x08013ff8
 8010f0c:	08012da9 	.word	0x08012da9
 8010f10:	08014000 	.word	0x08014000

08010f14 <main>:

int main(void) {
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af02      	add	r7, sp, #8
	HAL_Init();
 8010f1a:	f7f0 f8bd 	bl	8001098 <HAL_Init>

	hal_bus_init_early();
 8010f1e:	f7fe f9ed 	bl	800f2fc <hal_bus_init_early>
	hal_clock_init_early();
 8010f22:	f7fe fa2d 	bl	800f380 <hal_clock_init_early>
	hal_dwt_init_early();
 8010f26:	f7fe fa83 	bl	800f430 <hal_dwt_init_early>

	hal_resources_init_early();
 8010f2a:	f000 f8c7 	bl	80110bc <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 8010f2e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8010f32:	2000      	movs	r0, #0
 8010f34:	f001 feac 	bl	8012c90 <hal_uart_init>
	hal_cli_init();
 8010f38:	f7fe f812 	bl	800ef60 <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 8010f3c:	4809      	ldr	r0, [pc, #36]	; (8010f64 <main+0x50>)
 8010f3e:	f7fd ffd5 	bl	800eeec <hal_cli_printf>

	traceSTART();
 8010f42:	f7fc fafb 	bl	800d53c <SEGGER_SYSVIEW_Conf>
	xTaskCreate(initThread, "init", 256, NULL, 3, NULL);
 8010f46:	2300      	movs	r3, #0
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	2300      	movs	r3, #0
 8010f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f54:	4904      	ldr	r1, [pc, #16]	; (8010f68 <main+0x54>)
 8010f56:	4805      	ldr	r0, [pc, #20]	; (8010f6c <main+0x58>)
 8010f58:	f7f9 f92f 	bl	800a1ba <xTaskCreate>
	vTaskStartScheduler();
 8010f5c:	f7f9 fb5a 	bl	800a614 <vTaskStartScheduler>

	for(;;);
 8010f60:	e7fe      	b.n	8010f60 <main+0x4c>
 8010f62:	bf00      	nop
 8010f64:	08014010 	.word	0x08014010
 8010f68:	08014028 	.word	0x08014028
 8010f6c:	08010e7d 	.word	0x08010e7d

08010f70 <__NVIC_GetPriorityGrouping>:
{
 8010f70:	b480      	push	{r7}
 8010f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010f74:	4b04      	ldr	r3, [pc, #16]	; (8010f88 <__NVIC_GetPriorityGrouping+0x18>)
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	0a1b      	lsrs	r3, r3, #8
 8010f7a:	f003 0307 	and.w	r3, r3, #7
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr
 8010f88:	e000ed00 	.word	0xe000ed00

08010f8c <__NVIC_EnableIRQ>:
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	4603      	mov	r3, r0
 8010f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	db0b      	blt.n	8010fb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f9e:	79fb      	ldrb	r3, [r7, #7]
 8010fa0:	f003 021f 	and.w	r2, r3, #31
 8010fa4:	4907      	ldr	r1, [pc, #28]	; (8010fc4 <__NVIC_EnableIRQ+0x38>)
 8010fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010faa:	095b      	lsrs	r3, r3, #5
 8010fac:	2001      	movs	r0, #1
 8010fae:	fa00 f202 	lsl.w	r2, r0, r2
 8010fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010fb6:	bf00      	nop
 8010fb8:	370c      	adds	r7, #12
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	e000e100 	.word	0xe000e100

08010fc8 <__NVIC_SetPriority>:
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	4603      	mov	r3, r0
 8010fd0:	6039      	str	r1, [r7, #0]
 8010fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	db0a      	blt.n	8010ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	490c      	ldr	r1, [pc, #48]	; (8011014 <__NVIC_SetPriority+0x4c>)
 8010fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fe6:	0112      	lsls	r2, r2, #4
 8010fe8:	b2d2      	uxtb	r2, r2
 8010fea:	440b      	add	r3, r1
 8010fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010ff0:	e00a      	b.n	8011008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	b2da      	uxtb	r2, r3
 8010ff6:	4908      	ldr	r1, [pc, #32]	; (8011018 <__NVIC_SetPriority+0x50>)
 8010ff8:	79fb      	ldrb	r3, [r7, #7]
 8010ffa:	f003 030f 	and.w	r3, r3, #15
 8010ffe:	3b04      	subs	r3, #4
 8011000:	0112      	lsls	r2, r2, #4
 8011002:	b2d2      	uxtb	r2, r2
 8011004:	440b      	add	r3, r1
 8011006:	761a      	strb	r2, [r3, #24]
}
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	e000e100 	.word	0xe000e100
 8011018:	e000ed00 	.word	0xe000ed00

0801101c <NVIC_EncodePriority>:
{
 801101c:	b480      	push	{r7}
 801101e:	b089      	sub	sp, #36	; 0x24
 8011020:	af00      	add	r7, sp, #0
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f003 0307 	and.w	r3, r3, #7
 801102e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	f1c3 0307 	rsb	r3, r3, #7
 8011036:	2b04      	cmp	r3, #4
 8011038:	bf28      	it	cs
 801103a:	2304      	movcs	r3, #4
 801103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	3304      	adds	r3, #4
 8011042:	2b06      	cmp	r3, #6
 8011044:	d902      	bls.n	801104c <NVIC_EncodePriority+0x30>
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	3b03      	subs	r3, #3
 801104a:	e000      	b.n	801104e <NVIC_EncodePriority+0x32>
 801104c:	2300      	movs	r3, #0
 801104e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	fa02 f303 	lsl.w	r3, r2, r3
 801105a:	43da      	mvns	r2, r3
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	401a      	ands	r2, r3
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011064:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	fa01 f303 	lsl.w	r3, r1, r3
 801106e:	43d9      	mvns	r1, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011074:	4313      	orrs	r3, r2
}
 8011076:	4618      	mov	r0, r3
 8011078:	3724      	adds	r7, #36	; 0x24
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8011082:	b480      	push	{r7}
 8011084:	b083      	sub	sp, #12
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	460b      	mov	r3, r1
 801108c:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 801108e:	78fb      	ldrb	r3, [r7, #3]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d005      	beq.n	80110a0 <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	889a      	ldrh	r2, [r3, #4]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 801109e:	e006      	b.n	80110ae <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	889b      	ldrh	r3, [r3, #4]
 80110a4:	461a      	mov	r2, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	0412      	lsls	r2, r2, #16
 80110ac:	619a      	str	r2, [r3, #24]
}
 80110ae:	bf00      	nop
 80110b0:	370c      	adds	r7, #12
 80110b2:	46bd      	mov	sp, r7
 80110b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b8:	4770      	bx	lr
	...

080110bc <hal_resources_init_early>:
const GpioPin gpio_vs1053_dcs = {.port = VS1053_DCS_GPIO_PORT, .pin = VS1053_DCS_PIN};
const GpioPin gpio_vs1053_rst = {.port = VS1053_RST_GPIO_PORT, .pin = VS1053_RST_PIN};
const GpioPin gpio_vs1053_dreq = {.port = VS1053_DREQ_GPIO_PORT, .pin = VS1053_DREQ_PIN};


void hal_resources_init_early(void) {
 80110bc:	b580      	push	{r7, lr}
 80110be:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80110c0:	2300      	movs	r3, #0
 80110c2:	2201      	movs	r2, #1
 80110c4:	2101      	movs	r1, #1
 80110c6:	4809      	ldr	r0, [pc, #36]	; (80110ec <hal_resources_init_early+0x30>)
 80110c8:	f7fe fc66 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 80110cc:	2101      	movs	r1, #1
 80110ce:	4807      	ldr	r0, [pc, #28]	; (80110ec <hal_resources_init_early+0x30>)
 80110d0:	f7ff ffd7 	bl	8011082 <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80110d4:	2300      	movs	r3, #0
 80110d6:	2201      	movs	r2, #1
 80110d8:	2101      	movs	r1, #1
 80110da:	4805      	ldr	r0, [pc, #20]	; (80110f0 <hal_resources_init_early+0x34>)
 80110dc:	f7fe fc5c 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 80110e0:	2101      	movs	r1, #1
 80110e2:	4803      	ldr	r0, [pc, #12]	; (80110f0 <hal_resources_init_early+0x34>)
 80110e4:	f7ff ffcd 	bl	8011082 <hal_gpio_write>
}
 80110e8:	bf00      	nop
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	080146dc 	.word	0x080146dc
 80110f0:	080146e4 	.word	0x080146e4

080110f4 <hal_resources_init>:

void hal_resources_init(void) {
 80110f4:	b580      	push	{r7, lr}
 80110f6:	af00      	add	r7, sp, #0
	/* button */
	hal_gpio_init(&gpio_button_left, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 80110f8:	2300      	movs	r3, #0
 80110fa:	2201      	movs	r2, #1
 80110fc:	2107      	movs	r1, #7
 80110fe:	4857      	ldr	r0, [pc, #348]	; (801125c <hal_resources_init+0x168>)
 8011100:	f7fe fc4a 	bl	800f998 <hal_gpio_init>
	hal_gpio_init(&gpio_button_right, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011104:	2300      	movs	r3, #0
 8011106:	2201      	movs	r2, #1
 8011108:	2107      	movs	r1, #7
 801110a:	4855      	ldr	r0, [pc, #340]	; (8011260 <hal_resources_init+0x16c>)
 801110c:	f7fe fc44 	bl	800f998 <hal_gpio_init>
	hal_gpio_init(&gpio_button_center, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011110:	2300      	movs	r3, #0
 8011112:	2201      	movs	r2, #1
 8011114:	2107      	movs	r1, #7
 8011116:	4853      	ldr	r0, [pc, #332]	; (8011264 <hal_resources_init+0x170>)
 8011118:	f7fe fc3e 	bl	800f998 <hal_gpio_init>
	hal_gpio_init(&gpio_button_up, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 801111c:	2300      	movs	r3, #0
 801111e:	2201      	movs	r2, #1
 8011120:	2107      	movs	r1, #7
 8011122:	4851      	ldr	r0, [pc, #324]	; (8011268 <hal_resources_init+0x174>)
 8011124:	f7fe fc38 	bl	800f998 <hal_gpio_init>
	hal_gpio_init(&gpio_button_down, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8011128:	2300      	movs	r3, #0
 801112a:	2201      	movs	r2, #1
 801112c:	2107      	movs	r1, #7
 801112e:	484f      	ldr	r0, [pc, #316]	; (801126c <hal_resources_init+0x178>)
 8011130:	f7fe fc32 	bl	800f998 <hal_gpio_init>

	NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011134:	f7ff ff1c 	bl	8010f70 <__NVIC_GetPriorityGrouping>
 8011138:	4603      	mov	r3, r0
 801113a:	2200      	movs	r2, #0
 801113c:	2105      	movs	r1, #5
 801113e:	4618      	mov	r0, r3
 8011140:	f7ff ff6c 	bl	801101c <NVIC_EncodePriority>
 8011144:	4603      	mov	r3, r0
 8011146:	4619      	mov	r1, r3
 8011148:	2006      	movs	r0, #6
 801114a:	f7ff ff3d 	bl	8010fc8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 801114e:	2006      	movs	r0, #6
 8011150:	f7ff ff1c 	bl	8010f8c <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011154:	f7ff ff0c 	bl	8010f70 <__NVIC_GetPriorityGrouping>
 8011158:	4603      	mov	r3, r0
 801115a:	2200      	movs	r2, #0
 801115c:	2105      	movs	r1, #5
 801115e:	4618      	mov	r0, r3
 8011160:	f7ff ff5c 	bl	801101c <NVIC_EncodePriority>
 8011164:	4603      	mov	r3, r0
 8011166:	4619      	mov	r1, r3
 8011168:	2007      	movs	r0, #7
 801116a:	f7ff ff2d 	bl	8010fc8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI1_IRQn);
 801116e:	2007      	movs	r0, #7
 8011170:	f7ff ff0c 	bl	8010f8c <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011174:	f7ff fefc 	bl	8010f70 <__NVIC_GetPriorityGrouping>
 8011178:	4603      	mov	r3, r0
 801117a:	2200      	movs	r2, #0
 801117c:	2105      	movs	r1, #5
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff ff4c 	bl	801101c <NVIC_EncodePriority>
 8011184:	4603      	mov	r3, r0
 8011186:	4619      	mov	r1, r3
 8011188:	2008      	movs	r0, #8
 801118a:	f7ff ff1d 	bl	8010fc8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_IRQn);
 801118e:	2008      	movs	r0, #8
 8011190:	f7ff fefc 	bl	8010f8c <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011194:	f7ff feec 	bl	8010f70 <__NVIC_GetPriorityGrouping>
 8011198:	4603      	mov	r3, r0
 801119a:	2200      	movs	r2, #0
 801119c:	2105      	movs	r1, #5
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ff ff3c 	bl	801101c <NVIC_EncodePriority>
 80111a4:	4603      	mov	r3, r0
 80111a6:	4619      	mov	r1, r3
 80111a8:	2009      	movs	r0, #9
 80111aa:	f7ff ff0d 	bl	8010fc8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI3_IRQn);
 80111ae:	2009      	movs	r0, #9
 80111b0:	f7ff feec 	bl	8010f8c <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80111b4:	f7ff fedc 	bl	8010f70 <__NVIC_GetPriorityGrouping>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2200      	movs	r2, #0
 80111bc:	2105      	movs	r1, #5
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff ff2c 	bl	801101c <NVIC_EncodePriority>
 80111c4:	4603      	mov	r3, r0
 80111c6:	4619      	mov	r1, r3
 80111c8:	200a      	movs	r0, #10
 80111ca:	f7ff fefd 	bl	8010fc8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn);
 80111ce:	200a      	movs	r0, #10
 80111d0:	f7ff fedc 	bl	8010f8c <__NVIC_EnableIRQ>

	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80111d4:	2300      	movs	r3, #0
 80111d6:	2201      	movs	r2, #1
 80111d8:	2101      	movs	r1, #1
 80111da:	4825      	ldr	r0, [pc, #148]	; (8011270 <hal_resources_init+0x17c>)
 80111dc:	f7fe fbdc 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 80111e0:	2101      	movs	r1, #1
 80111e2:	4823      	ldr	r0, [pc, #140]	; (8011270 <hal_resources_init+0x17c>)
 80111e4:	f7ff ff4d 	bl	8011082 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80111e8:	2300      	movs	r3, #0
 80111ea:	2201      	movs	r2, #1
 80111ec:	2101      	movs	r1, #1
 80111ee:	4821      	ldr	r0, [pc, #132]	; (8011274 <hal_resources_init+0x180>)
 80111f0:	f7fe fbd2 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 80111f4:	2101      	movs	r1, #1
 80111f6:	481f      	ldr	r0, [pc, #124]	; (8011274 <hal_resources_init+0x180>)
 80111f8:	f7ff ff43 	bl	8011082 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 80111fc:	2300      	movs	r3, #0
 80111fe:	2201      	movs	r2, #1
 8011200:	2101      	movs	r1, #1
 8011202:	481d      	ldr	r0, [pc, #116]	; (8011278 <hal_resources_init+0x184>)
 8011204:	f7fe fbc8 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 8011208:	2101      	movs	r1, #1
 801120a:	481b      	ldr	r0, [pc, #108]	; (8011278 <hal_resources_init+0x184>)
 801120c:	f7ff ff39 	bl	8011082 <hal_gpio_write>

	/* vs1053 */
	hal_gpio_init(&gpio_vs1053_cs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8011210:	2300      	movs	r3, #0
 8011212:	2200      	movs	r2, #0
 8011214:	2101      	movs	r1, #1
 8011216:	4819      	ldr	r0, [pc, #100]	; (801127c <hal_resources_init+0x188>)
 8011218:	f7fe fbbe 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 801121c:	2101      	movs	r1, #1
 801121e:	4818      	ldr	r0, [pc, #96]	; (8011280 <hal_resources_init+0x18c>)
 8011220:	f7ff ff2f 	bl	8011082 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dcs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8011224:	2300      	movs	r3, #0
 8011226:	2200      	movs	r2, #0
 8011228:	2101      	movs	r1, #1
 801122a:	4815      	ldr	r0, [pc, #84]	; (8011280 <hal_resources_init+0x18c>)
 801122c:	f7fe fbb4 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 8011230:	2101      	movs	r1, #1
 8011232:	4813      	ldr	r0, [pc, #76]	; (8011280 <hal_resources_init+0x18c>)
 8011234:	f7ff ff25 	bl	8011082 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_rst, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8011238:	2300      	movs	r3, #0
 801123a:	2200      	movs	r2, #0
 801123c:	2101      	movs	r1, #1
 801123e:	4811      	ldr	r0, [pc, #68]	; (8011284 <hal_resources_init+0x190>)
 8011240:	f7fe fbaa 	bl	800f998 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_rst, 1);
 8011244:	2101      	movs	r1, #1
 8011246:	480f      	ldr	r0, [pc, #60]	; (8011284 <hal_resources_init+0x190>)
 8011248:	f7ff ff1b 	bl	8011082 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dreq, GpioModeInput, GpioPullNo, GpioSpeedFreqLow);
 801124c:	2300      	movs	r3, #0
 801124e:	2200      	movs	r2, #0
 8011250:	2100      	movs	r1, #0
 8011252:	480d      	ldr	r0, [pc, #52]	; (8011288 <hal_resources_init+0x194>)
 8011254:	f7fe fba0 	bl	800f998 <hal_gpio_init>

//	NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
//	NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8011258:	bf00      	nop
 801125a:	bd80      	pop	{r7, pc}
 801125c:	080146ec 	.word	0x080146ec
 8011260:	080146f4 	.word	0x080146f4
 8011264:	080146fc 	.word	0x080146fc
 8011268:	08014704 	.word	0x08014704
 801126c:	0801470c 	.word	0x0801470c
 8011270:	08014774 	.word	0x08014774
 8011274:	0801477c 	.word	0x0801477c
 8011278:	08014784 	.word	0x08014784
 801127c:	0801478c 	.word	0x0801478c
 8011280:	08014794 	.word	0x08014794
 8011284:	0801479c 	.word	0x0801479c
 8011288:	080147a4 	.word	0x080147a4

0801128c <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 801128c:	b480      	push	{r7}
 801128e:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 8011290:	4b0c      	ldr	r3, [pc, #48]	; (80112c4 <sdio_init+0x38>)
 8011292:	4a0d      	ldr	r2, [pc, #52]	; (80112c8 <sdio_init+0x3c>)
 8011294:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8011296:	4b0b      	ldr	r3, [pc, #44]	; (80112c4 <sdio_init+0x38>)
 8011298:	2200      	movs	r2, #0
 801129a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 801129c:	4b09      	ldr	r3, [pc, #36]	; (80112c4 <sdio_init+0x38>)
 801129e:	2200      	movs	r2, #0
 80112a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80112a2:	4b08      	ldr	r3, [pc, #32]	; (80112c4 <sdio_init+0x38>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80112a8:	4b06      	ldr	r3, [pc, #24]	; (80112c4 <sdio_init+0x38>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80112ae:	4b05      	ldr	r3, [pc, #20]	; (80112c4 <sdio_init+0x38>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 80112b4:	4b03      	ldr	r3, [pc, #12]	; (80112c4 <sdio_init+0x38>)
 80112b6:	2200      	movs	r2, #0
 80112b8:	619a      	str	r2, [r3, #24]
}
 80112ba:	bf00      	nop
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	20005994 	.word	0x20005994
 80112c8:	40012c00 	.word	0x40012c00

080112cc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b08c      	sub	sp, #48	; 0x30
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80112d4:	2300      	movs	r3, #0
 80112d6:	61bb      	str	r3, [r7, #24]
 80112d8:	4b60      	ldr	r3, [pc, #384]	; (801145c <HAL_SD_MspInit+0x190>)
 80112da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112dc:	4a5f      	ldr	r2, [pc, #380]	; (801145c <HAL_SD_MspInit+0x190>)
 80112de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80112e2:	6313      	str	r3, [r2, #48]	; 0x30
 80112e4:	4b5d      	ldr	r3, [pc, #372]	; (801145c <HAL_SD_MspInit+0x190>)
 80112e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80112ec:	61bb      	str	r3, [r7, #24]
 80112ee:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80112f0:	2200      	movs	r2, #0
 80112f2:	2105      	movs	r1, #5
 80112f4:	203b      	movs	r0, #59	; 0x3b
 80112f6:	f7ef ffed 	bl	80012d4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80112fa:	203b      	movs	r0, #59	; 0x3b
 80112fc:	f7f0 f806 	bl	800130c <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011300:	f107 031c 	add.w	r3, r7, #28
 8011304:	2200      	movs	r2, #0
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	605a      	str	r2, [r3, #4]
 801130a:	609a      	str	r2, [r3, #8]
 801130c:	60da      	str	r2, [r3, #12]
 801130e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a52      	ldr	r2, [pc, #328]	; (8011460 <HAL_SD_MspInit+0x194>)
 8011316:	4293      	cmp	r3, r2
 8011318:	f040 809c 	bne.w	8011454 <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 801131c:	2300      	movs	r3, #0
 801131e:	617b      	str	r3, [r7, #20]
 8011320:	4b4e      	ldr	r3, [pc, #312]	; (801145c <HAL_SD_MspInit+0x190>)
 8011322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011324:	4a4d      	ldr	r2, [pc, #308]	; (801145c <HAL_SD_MspInit+0x190>)
 8011326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801132a:	6453      	str	r3, [r2, #68]	; 0x44
 801132c:	4b4b      	ldr	r3, [pc, #300]	; (801145c <HAL_SD_MspInit+0x190>)
 801132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011334:	617b      	str	r3, [r7, #20]
 8011336:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011338:	2300      	movs	r3, #0
 801133a:	613b      	str	r3, [r7, #16]
 801133c:	4b47      	ldr	r3, [pc, #284]	; (801145c <HAL_SD_MspInit+0x190>)
 801133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011340:	4a46      	ldr	r2, [pc, #280]	; (801145c <HAL_SD_MspInit+0x190>)
 8011342:	f043 0304 	orr.w	r3, r3, #4
 8011346:	6313      	str	r3, [r2, #48]	; 0x30
 8011348:	4b44      	ldr	r3, [pc, #272]	; (801145c <HAL_SD_MspInit+0x190>)
 801134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134c:	f003 0304 	and.w	r3, r3, #4
 8011350:	613b      	str	r3, [r7, #16]
 8011352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011354:	2300      	movs	r3, #0
 8011356:	60fb      	str	r3, [r7, #12]
 8011358:	4b40      	ldr	r3, [pc, #256]	; (801145c <HAL_SD_MspInit+0x190>)
 801135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801135c:	4a3f      	ldr	r2, [pc, #252]	; (801145c <HAL_SD_MspInit+0x190>)
 801135e:	f043 0308 	orr.w	r3, r3, #8
 8011362:	6313      	str	r3, [r2, #48]	; 0x30
 8011364:	4b3d      	ldr	r3, [pc, #244]	; (801145c <HAL_SD_MspInit+0x190>)
 8011366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011368:	f003 0308 	and.w	r3, r3, #8
 801136c:	60fb      	str	r3, [r7, #12]
 801136e:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8011370:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8011374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011376:	2302      	movs	r3, #2
 8011378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801137a:	2300      	movs	r3, #0
 801137c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801137e:	2303      	movs	r3, #3
 8011380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8011382:	230c      	movs	r3, #12
 8011384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011386:	f107 031c 	add.w	r3, r7, #28
 801138a:	4619      	mov	r1, r3
 801138c:	4835      	ldr	r0, [pc, #212]	; (8011464 <HAL_SD_MspInit+0x198>)
 801138e:	f7f0 fb69 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011392:	2304      	movs	r3, #4
 8011394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011396:	2302      	movs	r3, #2
 8011398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801139a:	2300      	movs	r3, #0
 801139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801139e:	2303      	movs	r3, #3
 80113a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80113a2:	230c      	movs	r3, #12
 80113a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80113a6:	f107 031c 	add.w	r3, r7, #28
 80113aa:	4619      	mov	r1, r3
 80113ac:	482e      	ldr	r0, [pc, #184]	; (8011468 <HAL_SD_MspInit+0x19c>)
 80113ae:	f7f0 fb59 	bl	8001a64 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80113b2:	2200      	movs	r2, #0
 80113b4:	2105      	movs	r1, #5
 80113b6:	203b      	movs	r0, #59	; 0x3b
 80113b8:	f7ef ff8c 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80113bc:	203b      	movs	r0, #59	; 0x3b
 80113be:	f7ef ffa5 	bl	800130c <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 80113c2:	4b2a      	ldr	r3, [pc, #168]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113c4:	4a2a      	ldr	r2, [pc, #168]	; (8011470 <HAL_SD_MspInit+0x1a4>)
 80113c6:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 80113c8:	4b28      	ldr	r3, [pc, #160]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80113ce:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80113d0:	4b26      	ldr	r3, [pc, #152]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 80113d6:	4b25      	ldr	r3, [pc, #148]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113d8:	2200      	movs	r2, #0
 80113da:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 80113dc:	4b23      	ldr	r3, [pc, #140]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80113e2:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80113e4:	4b21      	ldr	r3, [pc, #132]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80113ea:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80113ec:	4b1f      	ldr	r3, [pc, #124]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80113f2:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 80113f4:	4b1d      	ldr	r3, [pc, #116]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113f6:	2220      	movs	r2, #32
 80113f8:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 80113fa:	4b1c      	ldr	r3, [pc, #112]	; (801146c <HAL_SD_MspInit+0x1a0>)
 80113fc:	2200      	movs	r2, #0
 80113fe:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8011400:	4b1a      	ldr	r3, [pc, #104]	; (801146c <HAL_SD_MspInit+0x1a0>)
 8011402:	2204      	movs	r2, #4
 8011404:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8011406:	4b19      	ldr	r3, [pc, #100]	; (801146c <HAL_SD_MspInit+0x1a0>)
 8011408:	2203      	movs	r2, #3
 801140a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 801140c:	4b17      	ldr	r3, [pc, #92]	; (801146c <HAL_SD_MspInit+0x1a0>)
 801140e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011412:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8011414:	4b15      	ldr	r3, [pc, #84]	; (801146c <HAL_SD_MspInit+0x1a0>)
 8011416:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801141a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 801141c:	4813      	ldr	r0, [pc, #76]	; (801146c <HAL_SD_MspInit+0x1a0>)
 801141e:	f7ef ff83 	bl	8001328 <HAL_DMA_Init>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d001      	beq.n	801142c <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 8011428:	f001 ff3c 	bl	80132a4 <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4a0f      	ldr	r2, [pc, #60]	; (801146c <HAL_SD_MspInit+0x1a0>)
 8011430:	641a      	str	r2, [r3, #64]	; 0x40
 8011432:	4a0e      	ldr	r2, [pc, #56]	; (801146c <HAL_SD_MspInit+0x1a0>)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4a0c      	ldr	r2, [pc, #48]	; (801146c <HAL_SD_MspInit+0x1a0>)
 801143c:	63da      	str	r2, [r3, #60]	; 0x3c
 801143e:	4a0b      	ldr	r2, [pc, #44]	; (801146c <HAL_SD_MspInit+0x1a0>)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8011444:	2200      	movs	r2, #0
 8011446:	2105      	movs	r1, #5
 8011448:	2031      	movs	r0, #49	; 0x31
 801144a:	f7ef ff43 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 801144e:	2031      	movs	r0, #49	; 0x31
 8011450:	f7ef ff5c 	bl	800130c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8011454:	bf00      	nop
 8011456:	3730      	adds	r7, #48	; 0x30
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	40023800 	.word	0x40023800
 8011460:	40012c00 	.word	0x40012c00
 8011464:	40020800 	.word	0x40020800
 8011468:	40020c00 	.word	0x40020c00
 801146c:	20005a18 	.word	0x20005a18
 8011470:	40026458 	.word	0x40026458

08011474 <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 8011478:	4802      	ldr	r0, [pc, #8]	; (8011484 <DMA2_Stream3_IRQHandler+0x10>)
 801147a:	f7f0 f87d 	bl	8001578 <HAL_DMA_IRQHandler>
}
 801147e:	bf00      	nop
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	20005a18 	.word	0x20005a18

08011488 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 801148c:	4802      	ldr	r0, [pc, #8]	; (8011498 <SDIO_IRQHandler+0x10>)
 801148e:	f7f0 ff5f 	bl	8002350 <HAL_SD_IRQHandler>
}
 8011492:	bf00      	nop
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	20005994 	.word	0x20005994

0801149c <__NVIC_GetPriorityGrouping>:
{
 801149c:	b480      	push	{r7}
 801149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80114a0:	4b04      	ldr	r3, [pc, #16]	; (80114b4 <__NVIC_GetPriorityGrouping+0x18>)
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	0a1b      	lsrs	r3, r3, #8
 80114a6:	f003 0307 	and.w	r3, r3, #7
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr
 80114b4:	e000ed00 	.word	0xe000ed00

080114b8 <__NVIC_EnableIRQ>:
{
 80114b8:	b480      	push	{r7}
 80114ba:	b083      	sub	sp, #12
 80114bc:	af00      	add	r7, sp, #0
 80114be:	4603      	mov	r3, r0
 80114c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	db0b      	blt.n	80114e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80114ca:	79fb      	ldrb	r3, [r7, #7]
 80114cc:	f003 021f 	and.w	r2, r3, #31
 80114d0:	4907      	ldr	r1, [pc, #28]	; (80114f0 <__NVIC_EnableIRQ+0x38>)
 80114d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114d6:	095b      	lsrs	r3, r3, #5
 80114d8:	2001      	movs	r0, #1
 80114da:	fa00 f202 	lsl.w	r2, r0, r2
 80114de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80114e2:	bf00      	nop
 80114e4:	370c      	adds	r7, #12
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop
 80114f0:	e000e100 	.word	0xe000e100

080114f4 <__NVIC_SetPriority>:
{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	4603      	mov	r3, r0
 80114fc:	6039      	str	r1, [r7, #0]
 80114fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011504:	2b00      	cmp	r3, #0
 8011506:	db0a      	blt.n	801151e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	b2da      	uxtb	r2, r3
 801150c:	490c      	ldr	r1, [pc, #48]	; (8011540 <__NVIC_SetPriority+0x4c>)
 801150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011512:	0112      	lsls	r2, r2, #4
 8011514:	b2d2      	uxtb	r2, r2
 8011516:	440b      	add	r3, r1
 8011518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801151c:	e00a      	b.n	8011534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	b2da      	uxtb	r2, r3
 8011522:	4908      	ldr	r1, [pc, #32]	; (8011544 <__NVIC_SetPriority+0x50>)
 8011524:	79fb      	ldrb	r3, [r7, #7]
 8011526:	f003 030f 	and.w	r3, r3, #15
 801152a:	3b04      	subs	r3, #4
 801152c:	0112      	lsls	r2, r2, #4
 801152e:	b2d2      	uxtb	r2, r2
 8011530:	440b      	add	r3, r1
 8011532:	761a      	strb	r2, [r3, #24]
}
 8011534:	bf00      	nop
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	e000e100 	.word	0xe000e100
 8011544:	e000ed00 	.word	0xe000ed00

08011548 <NVIC_EncodePriority>:
{
 8011548:	b480      	push	{r7}
 801154a:	b089      	sub	sp, #36	; 0x24
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f003 0307 	and.w	r3, r3, #7
 801155a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	f1c3 0307 	rsb	r3, r3, #7
 8011562:	2b04      	cmp	r3, #4
 8011564:	bf28      	it	cs
 8011566:	2304      	movcs	r3, #4
 8011568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	3304      	adds	r3, #4
 801156e:	2b06      	cmp	r3, #6
 8011570:	d902      	bls.n	8011578 <NVIC_EncodePriority+0x30>
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	3b03      	subs	r3, #3
 8011576:	e000      	b.n	801157a <NVIC_EncodePriority+0x32>
 8011578:	2300      	movs	r3, #0
 801157a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801157c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	fa02 f303 	lsl.w	r3, r2, r3
 8011586:	43da      	mvns	r2, r3
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	401a      	ands	r2, r3
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	fa01 f303 	lsl.w	r3, r1, r3
 801159a:	43d9      	mvns	r1, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80115a0:	4313      	orrs	r3, r2
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3724      	adds	r7, #36	; 0x24
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr

080115ae <LL_SPI_Enable>:
{
 80115ae:	b480      	push	{r7}
 80115b0:	b083      	sub	sp, #12
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	601a      	str	r2, [r3, #0]
}
 80115c2:	bf00      	nop
 80115c4:	370c      	adds	r7, #12
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr

080115ce <LL_SPI_SetStandard>:
{
 80115ce:	b480      	push	{r7}
 80115d0:	b083      	sub	sp, #12
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
 80115d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	f023 0210 	bic.w	r2, r3, #16
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	431a      	orrs	r2, r3
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	605a      	str	r2, [r3, #4]
}
 80115e8:	bf00      	nop
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr

080115f4 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	f003 0301 	and.w	r3, r3, #1
 8011604:	2b01      	cmp	r3, #1
 8011606:	d101      	bne.n	801160c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8011608:	2301      	movs	r3, #1
 801160a:	e000      	b.n	801160e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 801160c:	2300      	movs	r3, #0
}
 801160e:	4618      	mov	r0, r3
 8011610:	370c      	adds	r7, #12
 8011612:	46bd      	mov	sp, r7
 8011614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011618:	4770      	bx	lr

0801161a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 801161a:	b480      	push	{r7}
 801161c:	b083      	sub	sp, #12
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	f003 0302 	and.w	r3, r3, #2
 801162a:	2b02      	cmp	r3, #2
 801162c:	d101      	bne.n	8011632 <LL_SPI_IsActiveFlag_TXE+0x18>
 801162e:	2301      	movs	r3, #1
 8011630:	e000      	b.n	8011634 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8011632:	2300      	movs	r3, #0
}
 8011634:	4618      	mov	r0, r3
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	689b      	ldr	r3, [r3, #8]
 801164c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011650:	2b80      	cmp	r3, #128	; 0x80
 8011652:	d101      	bne.n	8011658 <LL_SPI_IsActiveFlag_BSY+0x18>
 8011654:	2301      	movs	r3, #1
 8011656:	e000      	b.n	801165a <LL_SPI_IsActiveFlag_BSY+0x1a>
 8011658:	2300      	movs	r3, #0
}
 801165a:	4618      	mov	r0, r3
 801165c:	370c      	adds	r7, #12
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr

08011666 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8011666:	b480      	push	{r7}
 8011668:	b083      	sub	sp, #12
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	330c      	adds	r3, #12
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	b2db      	uxtb	r3, r3
}
 8011676:	4618      	mov	r0, r3
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8011682:	b480      	push	{r7}
 8011684:	b085      	sub	sp, #20
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	460b      	mov	r3, r1
 801168c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	330c      	adds	r3, #12
 8011692:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	78fa      	ldrb	r2, [r7, #3]
 8011698:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 801169a:	bf00      	nop
 801169c:	3714      	adds	r7, #20
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr
	...

080116a8 <LL_DMA_SetDataTransferDirection>:
{
 80116a8:	b480      	push	{r7}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80116b4:	4a0d      	ldr	r2, [pc, #52]	; (80116ec <LL_DMA_SetDataTransferDirection+0x44>)
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	4413      	add	r3, r2
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	461a      	mov	r2, r3
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	4413      	add	r3, r2
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80116c8:	4908      	ldr	r1, [pc, #32]	; (80116ec <LL_DMA_SetDataTransferDirection+0x44>)
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	440b      	add	r3, r1
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	4619      	mov	r1, r3
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	440b      	add	r3, r1
 80116d6:	4619      	mov	r1, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	4313      	orrs	r3, r2
 80116dc:	600b      	str	r3, [r1, #0]
}
 80116de:	bf00      	nop
 80116e0:	3714      	adds	r7, #20
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	080147ac 	.word	0x080147ac

080116f0 <LL_DMA_SetMode>:
{
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80116fc:	4a0d      	ldr	r2, [pc, #52]	; (8011734 <LL_DMA_SetMode+0x44>)
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	4413      	add	r3, r2
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	461a      	mov	r2, r3
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	4413      	add	r3, r2
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8011710:	4908      	ldr	r1, [pc, #32]	; (8011734 <LL_DMA_SetMode+0x44>)
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	440b      	add	r3, r1
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	4619      	mov	r1, r3
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	440b      	add	r3, r1
 801171e:	4619      	mov	r1, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4313      	orrs	r3, r2
 8011724:	600b      	str	r3, [r1, #0]
}
 8011726:	bf00      	nop
 8011728:	3714      	adds	r7, #20
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop
 8011734:	080147ac 	.word	0x080147ac

08011738 <LL_DMA_SetPeriphIncMode>:
{
 8011738:	b480      	push	{r7}
 801173a:	b085      	sub	sp, #20
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8011744:	4a0d      	ldr	r2, [pc, #52]	; (801177c <LL_DMA_SetPeriphIncMode+0x44>)
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	4413      	add	r3, r2
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	461a      	mov	r2, r3
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	4413      	add	r3, r2
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011758:	4908      	ldr	r1, [pc, #32]	; (801177c <LL_DMA_SetPeriphIncMode+0x44>)
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	440b      	add	r3, r1
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	4619      	mov	r1, r3
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	440b      	add	r3, r1
 8011766:	4619      	mov	r1, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	4313      	orrs	r3, r2
 801176c:	600b      	str	r3, [r1, #0]
}
 801176e:	bf00      	nop
 8011770:	3714      	adds	r7, #20
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	080147ac 	.word	0x080147ac

08011780 <LL_DMA_SetMemoryIncMode>:
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 801178c:	4a0d      	ldr	r2, [pc, #52]	; (80117c4 <LL_DMA_SetMemoryIncMode+0x44>)
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	4413      	add	r3, r2
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	461a      	mov	r2, r3
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	4413      	add	r3, r2
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80117a0:	4908      	ldr	r1, [pc, #32]	; (80117c4 <LL_DMA_SetMemoryIncMode+0x44>)
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	440b      	add	r3, r1
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	4619      	mov	r1, r3
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	440b      	add	r3, r1
 80117ae:	4619      	mov	r1, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	600b      	str	r3, [r1, #0]
}
 80117b6:	bf00      	nop
 80117b8:	3714      	adds	r7, #20
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	080147ac 	.word	0x080147ac

080117c8 <LL_DMA_SetPeriphSize>:
{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80117d4:	4a0d      	ldr	r2, [pc, #52]	; (801180c <LL_DMA_SetPeriphSize+0x44>)
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	4413      	add	r3, r2
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	461a      	mov	r2, r3
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	4413      	add	r3, r2
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80117e8:	4908      	ldr	r1, [pc, #32]	; (801180c <LL_DMA_SetPeriphSize+0x44>)
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	440b      	add	r3, r1
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	4619      	mov	r1, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	440b      	add	r3, r1
 80117f6:	4619      	mov	r1, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4313      	orrs	r3, r2
 80117fc:	600b      	str	r3, [r1, #0]
}
 80117fe:	bf00      	nop
 8011800:	3714      	adds	r7, #20
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop
 801180c:	080147ac 	.word	0x080147ac

08011810 <LL_DMA_SetMemorySize>:
{
 8011810:	b480      	push	{r7}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 801181c:	4a0d      	ldr	r2, [pc, #52]	; (8011854 <LL_DMA_SetMemorySize+0x44>)
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	4413      	add	r3, r2
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	461a      	mov	r2, r3
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	4413      	add	r3, r2
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8011830:	4908      	ldr	r1, [pc, #32]	; (8011854 <LL_DMA_SetMemorySize+0x44>)
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	440b      	add	r3, r1
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	4619      	mov	r1, r3
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	440b      	add	r3, r1
 801183e:	4619      	mov	r1, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4313      	orrs	r3, r2
 8011844:	600b      	str	r3, [r1, #0]
}
 8011846:	bf00      	nop
 8011848:	3714      	adds	r7, #20
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop
 8011854:	080147ac 	.word	0x080147ac

08011858 <LL_DMA_SetStreamPriorityLevel>:
{
 8011858:	b480      	push	{r7}
 801185a:	b085      	sub	sp, #20
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8011864:	4a0d      	ldr	r2, [pc, #52]	; (801189c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	4413      	add	r3, r2
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	461a      	mov	r2, r3
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	4413      	add	r3, r2
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011878:	4908      	ldr	r1, [pc, #32]	; (801189c <LL_DMA_SetStreamPriorityLevel+0x44>)
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	440b      	add	r3, r1
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	4619      	mov	r1, r3
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	440b      	add	r3, r1
 8011886:	4619      	mov	r1, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4313      	orrs	r3, r2
 801188c:	600b      	str	r3, [r1, #0]
}
 801188e:	bf00      	nop
 8011890:	3714      	adds	r7, #20
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop
 801189c:	080147ac 	.word	0x080147ac

080118a0 <LL_DMA_SetChannelSelection>:
{
 80118a0:	b480      	push	{r7}
 80118a2:	b085      	sub	sp, #20
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80118ac:	4a0d      	ldr	r2, [pc, #52]	; (80118e4 <LL_DMA_SetChannelSelection+0x44>)
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	4413      	add	r3, r2
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	461a      	mov	r2, r3
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	4413      	add	r3, r2
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80118c0:	4908      	ldr	r1, [pc, #32]	; (80118e4 <LL_DMA_SetChannelSelection+0x44>)
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	440b      	add	r3, r1
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	4619      	mov	r1, r3
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	440b      	add	r3, r1
 80118ce:	4619      	mov	r1, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	4313      	orrs	r3, r2
 80118d4:	600b      	str	r3, [r1, #0]
}
 80118d6:	bf00      	nop
 80118d8:	3714      	adds	r7, #20
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	080147ac 	.word	0x080147ac

080118e8 <LL_DMA_DisableFifoMode>:
{
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80118f2:	4a0c      	ldr	r2, [pc, #48]	; (8011924 <LL_DMA_DisableFifoMode+0x3c>)
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	4413      	add	r3, r2
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	461a      	mov	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4413      	add	r3, r2
 8011900:	695b      	ldr	r3, [r3, #20]
 8011902:	4908      	ldr	r1, [pc, #32]	; (8011924 <LL_DMA_DisableFifoMode+0x3c>)
 8011904:	683a      	ldr	r2, [r7, #0]
 8011906:	440a      	add	r2, r1
 8011908:	7812      	ldrb	r2, [r2, #0]
 801190a:	4611      	mov	r1, r2
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	440a      	add	r2, r1
 8011910:	f023 0304 	bic.w	r3, r3, #4
 8011914:	6153      	str	r3, [r2, #20]
}
 8011916:	bf00      	nop
 8011918:	370c      	adds	r7, #12
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	080147ac 	.word	0x080147ac

08011928 <LL_APB2_GRP1_EnableClock>:
{
 8011928:	b480      	push	{r7}
 801192a:	b085      	sub	sp, #20
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8011930:	4b08      	ldr	r3, [pc, #32]	; (8011954 <LL_APB2_GRP1_EnableClock+0x2c>)
 8011932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011934:	4907      	ldr	r1, [pc, #28]	; (8011954 <LL_APB2_GRP1_EnableClock+0x2c>)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4313      	orrs	r3, r2
 801193a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801193c:	4b05      	ldr	r3, [pc, #20]	; (8011954 <LL_APB2_GRP1_EnableClock+0x2c>)
 801193e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	4013      	ands	r3, r2
 8011944:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011946:	68fb      	ldr	r3, [r7, #12]
}
 8011948:	bf00      	nop
 801194a:	3714      	adds	r7, #20
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	40023800 	.word	0x40023800

08011958 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 8011962:	f7f7 fb01 	bl	8008f68 <vPortEnterCritical>

	switch(spi_id) {
 8011966:	79fb      	ldrb	r3, [r7, #7]
 8011968:	2b05      	cmp	r3, #5
 801196a:	d014      	beq.n	8011996 <spi_init+0x3e>
 801196c:	2b05      	cmp	r3, #5
 801196e:	dc19      	bgt.n	80119a4 <spi_init+0x4c>
 8011970:	2b02      	cmp	r3, #2
 8011972:	d002      	beq.n	801197a <spi_init+0x22>
 8011974:	2b04      	cmp	r3, #4
 8011976:	d007      	beq.n	8011988 <spi_init+0x30>
 8011978:	e014      	b.n	80119a4 <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 801197a:	480f      	ldr	r0, [pc, #60]	; (80119b8 <spi_init+0x60>)
 801197c:	f000 f900 	bl	8011b80 <spi2_init>
		hal_cli_printf("spi2 init");
 8011980:	480e      	ldr	r0, [pc, #56]	; (80119bc <spi_init+0x64>)
 8011982:	f7fd fab3 	bl	800eeec <hal_cli_printf>
		break;
 8011986:	e011      	b.n	80119ac <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 8011988:	480d      	ldr	r0, [pc, #52]	; (80119c0 <spi_init+0x68>)
 801198a:	f000 f921 	bl	8011bd0 <spi4_init>
		hal_cli_printf("spi4 init");
 801198e:	480d      	ldr	r0, [pc, #52]	; (80119c4 <spi_init+0x6c>)
 8011990:	f7fd faac 	bl	800eeec <hal_cli_printf>
		break;
 8011994:	e00a      	b.n	80119ac <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 8011996:	480c      	ldr	r0, [pc, #48]	; (80119c8 <spi_init+0x70>)
 8011998:	f000 f942 	bl	8011c20 <spi5_init>
		hal_cli_printf("spi5 init");
 801199c:	480b      	ldr	r0, [pc, #44]	; (80119cc <spi_init+0x74>)
 801199e:	f7fd faa5 	bl	800eeec <hal_cli_printf>
		break;
 80119a2:	e003      	b.n	80119ac <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 80119a4:	480a      	ldr	r0, [pc, #40]	; (80119d0 <spi_init+0x78>)
 80119a6:	f7fd faa1 	bl	800eeec <hal_cli_printf>
		break;
 80119aa:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 80119ac:	f7f7 fb0c 	bl	8008fc8 <vPortExitCritical>
}
 80119b0:	bf00      	nop
 80119b2:	3708      	adds	r7, #8
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	20005a78 	.word	0x20005a78
 80119bc:	08014030 	.word	0x08014030
 80119c0:	20005a8c 	.word	0x20005a8c
 80119c4:	0801403c 	.word	0x0801403c
 80119c8:	20005aa0 	.word	0x20005aa0
 80119cc:	08014048 	.word	0x08014048
 80119d0:	08014054 	.word	0x08014054

080119d4 <hal_spi_transfer>:

bool hal_spi_transfer(spidrv_t* drv, uint8_t* data, uint32_t size, uint32_t timeout)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b088      	sub	sp, #32
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6178      	str	r0, [r7, #20]
 80119dc:	6139      	str	r1, [r7, #16]
 80119de:	60fa      	str	r2, [r7, #12]
 80119e0:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 80119e2:	463b      	mov	r3, r7
 80119e4:	68b9      	ldr	r1, [r7, #8]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fd fd62 	bl	800f4b0 <hal_get_delay_timer>
 80119ec:	f107 0318 	add.w	r3, r7, #24
 80119f0:	463a      	mov	r2, r7
 80119f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119f6:	e883 0003 	stmia.w	r3, {r0, r1}

	while(size > 0) {
 80119fa:	e023      	b.n	8011a44 <hal_spi_transfer+0x70>
		LL_SPI_TransmitData8(drv->spi, *data);
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	681a      	ldr	r2, [r3, #0]
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	4619      	mov	r1, r3
 8011a06:	4610      	mov	r0, r2
 8011a08:	f7ff fe3b 	bl	8011682 <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8011a0c:	e00c      	b.n	8011a28 <hal_spi_transfer+0x54>
			if(hal_delay_timer_is_expired(&timer)) {
 8011a0e:	f107 0318 	add.w	r3, r7, #24
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fd fd72 	bl	800f4fc <hal_delay_timer_is_expired>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d004      	beq.n	8011a28 <hal_spi_transfer+0x54>
				hal_cli_printf("spi txe flag failed");
 8011a1e:	4818      	ldr	r0, [pc, #96]	; (8011a80 <hal_spi_transfer+0xac>)
 8011a20:	f7fd fa64 	bl	800eeec <hal_cli_printf>
				return false;
 8011a24:	2300      	movs	r3, #0
 8011a26:	e027      	b.n	8011a78 <hal_spi_transfer+0xa4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7ff fdf4 	bl	801161a <LL_SPI_IsActiveFlag_TXE>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d0ea      	beq.n	8011a0e <hal_spi_transfer+0x3a>
			}
		}
		size--;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	3b01      	subs	r3, #1
 8011a3c:	60fb      	str	r3, [r7, #12]
		data++;
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	3301      	adds	r3, #1
 8011a42:	613b      	str	r3, [r7, #16]
	while(size > 0) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1d8      	bne.n	80119fc <hal_spi_transfer+0x28>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011a4a:	e00c      	b.n	8011a66 <hal_spi_transfer+0x92>
		if(hal_delay_timer_is_expired(&timer)) {
 8011a4c:	f107 0318 	add.w	r3, r7, #24
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fd fd53 	bl	800f4fc <hal_delay_timer_is_expired>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d004      	beq.n	8011a66 <hal_spi_transfer+0x92>
			hal_cli_printf("spi busy flag failed");
 8011a5c:	4809      	ldr	r0, [pc, #36]	; (8011a84 <hal_spi_transfer+0xb0>)
 8011a5e:	f7fd fa45 	bl	800eeec <hal_cli_printf>
			return false;
 8011a62:	2300      	movs	r3, #0
 8011a64:	e008      	b.n	8011a78 <hal_spi_transfer+0xa4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7ff fde8 	bl	8011640 <LL_SPI_IsActiveFlag_BSY>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d1ea      	bne.n	8011a4c <hal_spi_transfer+0x78>
		}
	}

	return true;
 8011a76:	2301      	movs	r3, #1
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3720      	adds	r7, #32
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	08014068 	.word	0x08014068
 8011a84:	0801407c 	.word	0x0801407c

08011a88 <hal_spi_txrx>:

	return true;
}

bool hal_spi_txrx(spidrv_t* drv, uint8_t* tx, uint8_t* rx, uint32_t size, uint32_t timeout)
{
 8011a88:	b590      	push	{r4, r7, lr}
 8011a8a:	b08b      	sub	sp, #44	; 0x2c
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6178      	str	r0, [r7, #20]
 8011a90:	6139      	str	r1, [r7, #16]
 8011a92:	60fa      	str	r2, [r7, #12]
 8011a94:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 8011a96:	463b      	mov	r3, r7
 8011a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fd fd08 	bl	800f4b0 <hal_get_delay_timer>
 8011aa0:	f107 031c 	add.w	r3, r7, #28
 8011aa4:	463a      	mov	r2, r7
 8011aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011aaa:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int i = 0; i < size; i++) {
 8011aae:	2300      	movs	r3, #0
 8011ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ab2:	e040      	b.n	8011b36 <hal_spi_txrx+0xae>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8011ab4:	f107 031c 	add.w	r3, r7, #28
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fd fd1f 	bl	800f4fc <hal_delay_timer_is_expired>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d004      	beq.n	8011ace <hal_spi_txrx+0x46>
				hal_cli_printf("spi txe flag failed");
 8011ac4:	482b      	ldr	r0, [pc, #172]	; (8011b74 <hal_spi_txrx+0xec>)
 8011ac6:	f7fd fa11 	bl	800eeec <hal_cli_printf>
				return false;
 8011aca:	2300      	movs	r3, #0
 8011acc:	e04e      	b.n	8011b6c <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7ff fda1 	bl	801161a <LL_SPI_IsActiveFlag_TXE>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d0ea      	beq.n	8011ab4 <hal_spi_txrx+0x2c>
			}
		}
		LL_SPI_TransmitData8(drv->spi, tx[i]);
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	6818      	ldr	r0, [r3, #0]
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae4:	693a      	ldr	r2, [r7, #16]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	4619      	mov	r1, r3
 8011aec:	f7ff fdc9 	bl	8011682 <LL_SPI_TransmitData8>

		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 8011af0:	e00c      	b.n	8011b0c <hal_spi_txrx+0x84>
			if(hal_delay_timer_is_expired(&timer)) {
 8011af2:	f107 031c 	add.w	r3, r7, #28
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fd fd00 	bl	800f4fc <hal_delay_timer_is_expired>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d004      	beq.n	8011b0c <hal_spi_txrx+0x84>
				hal_cli_printf("spi rxne flag failed");
 8011b02:	481d      	ldr	r0, [pc, #116]	; (8011b78 <hal_spi_txrx+0xf0>)
 8011b04:	f7fd f9f2 	bl	800eeec <hal_cli_printf>
				return false;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	e02f      	b.n	8011b6c <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff fd6f 	bl	80115f4 <LL_SPI_IsActiveFlag_RXNE>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d0ea      	beq.n	8011af2 <hal_spi_txrx+0x6a>
			}
		}
		rx[i] = LL_SPI_ReceiveData8(drv->spi);
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	6819      	ldr	r1, [r3, #0]
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	68fa      	ldr	r2, [r7, #12]
 8011b24:	18d4      	adds	r4, r2, r3
 8011b26:	4608      	mov	r0, r1
 8011b28:	f7ff fd9d 	bl	8011666 <LL_SPI_ReceiveData8>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < size; i++) {
 8011b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b32:	3301      	adds	r3, #1
 8011b34:	627b      	str	r3, [r7, #36]	; 0x24
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	68ba      	ldr	r2, [r7, #8]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d8c7      	bhi.n	8011ace <hal_spi_txrx+0x46>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011b3e:	e00c      	b.n	8011b5a <hal_spi_txrx+0xd2>
		if(hal_delay_timer_is_expired(&timer)) {
 8011b40:	f107 031c 	add.w	r3, r7, #28
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fd fcd9 	bl	800f4fc <hal_delay_timer_is_expired>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d004      	beq.n	8011b5a <hal_spi_txrx+0xd2>
			hal_cli_printf("spi busy flag failed");
 8011b50:	480a      	ldr	r0, [pc, #40]	; (8011b7c <hal_spi_txrx+0xf4>)
 8011b52:	f7fd f9cb 	bl	800eeec <hal_cli_printf>
			return false;
 8011b56:	2300      	movs	r3, #0
 8011b58:	e008      	b.n	8011b6c <hal_spi_txrx+0xe4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7ff fd6e 	bl	8011640 <LL_SPI_IsActiveFlag_BSY>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1ea      	bne.n	8011b40 <hal_spi_txrx+0xb8>
		}
	}
	return true;
 8011b6a:	2301      	movs	r3, #1
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	372c      	adds	r7, #44	; 0x2c
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd90      	pop	{r4, r7, pc}
 8011b74:	08014068 	.word	0x08014068
 8011b78:	08014094 	.word	0x08014094
 8011b7c:	0801407c 	.word	0x0801407c

08011b80 <spi2_init>:


static void spi2_init(spidrv_t* drv)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 8011b88:	f000 f872 	bl	8011c70 <spi2_pin_conf>
	spi2_dma_init();
 8011b8c:	f000 f88a 	bl	8011ca4 <spi2_dma_init>
	spi2_config();
 8011b90:	f000 f8cc 	bl	8011d2c <spi2_config>

	LL_SPI_Enable(SPI2);
 8011b94:	480c      	ldr	r0, [pc, #48]	; (8011bc8 <spi2_init+0x48>)
 8011b96:	f7ff fd0a 	bl	80115ae <LL_SPI_Enable>

	drv->spi = SPI2;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4a0a      	ldr	r2, [pc, #40]	; (8011bc8 <spi2_init+0x48>)
 8011b9e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	4a0a      	ldr	r2, [pc, #40]	; (8011bcc <spi2_init+0x4c>)
 8011ba4:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2204      	movs	r2, #4
 8011baa:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	f7f7 fcce 	bl	8009554 <xQueueCreateMutex>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	605a      	str	r2, [r3, #4]
}
 8011bbe:	bf00      	nop
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	40003800 	.word	0x40003800
 8011bcc:	40026000 	.word	0x40026000

08011bd0 <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 8011bd8:	f000 f8e6 	bl	8011da8 <spi4_pin_conf>
	spi4_dma_init();
 8011bdc:	f000 f908 	bl	8011df0 <spi4_dma_init>
	spi4_config();
 8011be0:	f000 f988 	bl	8011ef4 <spi4_config>

	LL_SPI_Enable(SPI4);
 8011be4:	480c      	ldr	r0, [pc, #48]	; (8011c18 <spi4_init+0x48>)
 8011be6:	f7ff fce2 	bl	80115ae <LL_SPI_Enable>

	drv->spi = SPI4;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	4a0a      	ldr	r2, [pc, #40]	; (8011c18 <spi4_init+0x48>)
 8011bee:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	4a0a      	ldr	r2, [pc, #40]	; (8011c1c <spi4_init+0x4c>)
 8011bf4:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011c02:	2001      	movs	r0, #1
 8011c04:	f7f7 fca6 	bl	8009554 <xQueueCreateMutex>
 8011c08:	4602      	mov	r2, r0
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	605a      	str	r2, [r3, #4]
}
 8011c0e:	bf00      	nop
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	40013400 	.word	0x40013400
 8011c1c:	40026400 	.word	0x40026400

08011c20 <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 8011c28:	f000 f9a2 	bl	8011f70 <spi5_pin_conf>
	spi5_dma_init();
 8011c2c:	f000 f9c4 	bl	8011fb8 <spi5_dma_init>
	spi5_config();
 8011c30:	f000 fa06 	bl	8012040 <spi5_config>

	LL_SPI_Enable(SPI5);
 8011c34:	480c      	ldr	r0, [pc, #48]	; (8011c68 <spi5_init+0x48>)
 8011c36:	f7ff fcba 	bl	80115ae <LL_SPI_Enable>

	drv->spi = SPI5;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4a0a      	ldr	r2, [pc, #40]	; (8011c68 <spi5_init+0x48>)
 8011c3e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	4a0a      	ldr	r2, [pc, #40]	; (8011c6c <spi5_init+0x4c>)
 8011c44:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2204      	movs	r2, #4
 8011c4a:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011c52:	2001      	movs	r0, #1
 8011c54:	f7f7 fc7e 	bl	8009554 <xQueueCreateMutex>
 8011c58:	4602      	mov	r2, r0
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	605a      	str	r2, [r3, #4]
}
 8011c5e:	bf00      	nop
 8011c60:	3708      	adds	r7, #8
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	40015000 	.word	0x40015000
 8011c6c:	40026400 	.word	0x40026400

08011c70 <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8011c76:	2305      	movs	r3, #5
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	2303      	movs	r3, #3
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2103      	movs	r1, #3
 8011c80:	4806      	ldr	r0, [pc, #24]	; (8011c9c <spi2_pin_conf+0x2c>)
 8011c82:	f7fd fea3 	bl	800f9cc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011c86:	2305      	movs	r3, #5
 8011c88:	9300      	str	r3, [sp, #0]
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	2103      	movs	r1, #3
 8011c90:	4803      	ldr	r0, [pc, #12]	; (8011ca0 <spi2_pin_conf+0x30>)
 8011c92:	f7fd fe9b 	bl	800f9cc <hal_gpio_init_alt>
		&gpio_spi2_mosi,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8011c96:	bf00      	nop
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	0801474c 	.word	0x0801474c
 8011ca0:	08014754 	.word	0x08014754

08011ca4 <spi2_dma_init>:

static void spi2_dma_init(void)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011ca8:	f7ff fbf8 	bl	801149c <__NVIC_GetPriorityGrouping>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2200      	movs	r2, #0
 8011cb0:	2105      	movs	r1, #5
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ff fc48 	bl	8011548 <NVIC_EncodePriority>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	4619      	mov	r1, r3
 8011cbc:	200f      	movs	r0, #15
 8011cbe:	f7ff fc19 	bl	80114f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8011cc2:	200f      	movs	r0, #15
 8011cc4:	f7ff fbf8 	bl	80114b8 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, DMA_SPI2_TX_STREAM, DMA_SPI2_TX_CHANNEL);
 8011cc8:	2200      	movs	r2, #0
 8011cca:	2104      	movs	r1, #4
 8011ccc:	4816      	ldr	r0, [pc, #88]	; (8011d28 <spi2_dma_init+0x84>)
 8011cce:	f7ff fde7 	bl	80118a0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011cd2:	2240      	movs	r2, #64	; 0x40
 8011cd4:	2104      	movs	r1, #4
 8011cd6:	4814      	ldr	r0, [pc, #80]	; (8011d28 <spi2_dma_init+0x84>)
 8011cd8:	f7ff fce6 	bl	80116a8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011cdc:	2200      	movs	r2, #0
 8011cde:	2104      	movs	r1, #4
 8011ce0:	4811      	ldr	r0, [pc, #68]	; (8011d28 <spi2_dma_init+0x84>)
 8011ce2:	f7ff fdb9 	bl	8011858 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	2104      	movs	r1, #4
 8011cea:	480f      	ldr	r0, [pc, #60]	; (8011d28 <spi2_dma_init+0x84>)
 8011cec:	f7ff fd00 	bl	80116f0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	2104      	movs	r1, #4
 8011cf4:	480c      	ldr	r0, [pc, #48]	; (8011d28 <spi2_dma_init+0x84>)
 8011cf6:	f7ff fd1f 	bl	8011738 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011cfe:	2104      	movs	r1, #4
 8011d00:	4809      	ldr	r0, [pc, #36]	; (8011d28 <spi2_dma_init+0x84>)
 8011d02:	f7ff fd3d 	bl	8011780 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011d06:	2200      	movs	r2, #0
 8011d08:	2104      	movs	r1, #4
 8011d0a:	4807      	ldr	r0, [pc, #28]	; (8011d28 <spi2_dma_init+0x84>)
 8011d0c:	f7ff fd5c 	bl	80117c8 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011d10:	2200      	movs	r2, #0
 8011d12:	2104      	movs	r1, #4
 8011d14:	4804      	ldr	r0, [pc, #16]	; (8011d28 <spi2_dma_init+0x84>)
 8011d16:	f7ff fd7b 	bl	8011810 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, DMA_SPI2_TX_STREAM);
 8011d1a:	2104      	movs	r1, #4
 8011d1c:	4802      	ldr	r0, [pc, #8]	; (8011d28 <spi2_dma_init+0x84>)
 8011d1e:	f7ff fde3 	bl	80118e8 <LL_DMA_DisableFifoMode>
}
 8011d22:	bf00      	nop
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	40026000 	.word	0x40026000

08011d2c <spi2_config>:

static void spi2_config(void)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b08a      	sub	sp, #40	; 0x28
 8011d30:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011d32:	463b      	mov	r3, r7
 8011d34:	2228      	movs	r2, #40	; 0x28
 8011d36:	2100      	movs	r1, #0
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f001 fb29 	bl	8013390 <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011d3e:	f7ff fbad 	bl	801149c <__NVIC_GetPriorityGrouping>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2200      	movs	r2, #0
 8011d46:	2105      	movs	r1, #5
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7ff fbfd 	bl	8011548 <NVIC_EncodePriority>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	4619      	mov	r1, r3
 8011d52:	2024      	movs	r0, #36	; 0x24
 8011d54:	f7ff fbce 	bl	80114f4 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 8011d58:	2024      	movs	r0, #36	; 0x24
 8011d5a:	f7ff fbad 	bl	80114b8 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011d62:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011d66:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011d70:	2300      	movs	r3, #0
 8011d72:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d78:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8011d7a:	2318      	movs	r3, #24
 8011d7c:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011d82:	2300      	movs	r3, #0
 8011d84:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 8011d86:	230a      	movs	r3, #10
 8011d88:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 8011d8a:	463b      	mov	r3, r7
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	4805      	ldr	r0, [pc, #20]	; (8011da4 <spi2_config+0x78>)
 8011d90:	f7f2 fe6d 	bl	8004a6e <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8011d94:	2100      	movs	r1, #0
 8011d96:	4803      	ldr	r0, [pc, #12]	; (8011da4 <spi2_config+0x78>)
 8011d98:	f7ff fc19 	bl	80115ce <LL_SPI_SetStandard>
}
 8011d9c:	bf00      	nop
 8011d9e:	3728      	adds	r7, #40	; 0x28
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	40003800 	.word	0x40003800

08011da8 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8011dae:	2305      	movs	r3, #5
 8011db0:	9300      	str	r3, [sp, #0]
 8011db2:	2303      	movs	r3, #3
 8011db4:	2200      	movs	r2, #0
 8011db6:	2103      	movs	r1, #3
 8011db8:	480a      	ldr	r0, [pc, #40]	; (8011de4 <spi4_pin_conf+0x3c>)
 8011dba:	f7fd fe07 	bl	800f9cc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011dbe:	2305      	movs	r3, #5
 8011dc0:	9300      	str	r3, [sp, #0]
 8011dc2:	2303      	movs	r3, #3
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	2103      	movs	r1, #3
 8011dc8:	4807      	ldr	r0, [pc, #28]	; (8011de8 <spi4_pin_conf+0x40>)
 8011dca:	f7fd fdff 	bl	800f9cc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011dce:	2305      	movs	r3, #5
 8011dd0:	9300      	str	r3, [sp, #0]
 8011dd2:	2303      	movs	r3, #3
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	2103      	movs	r1, #3
 8011dd8:	4804      	ldr	r0, [pc, #16]	; (8011dec <spi4_pin_conf+0x44>)
 8011dda:	f7fd fdf7 	bl	800f9cc <hal_gpio_init_alt>
		&gpio_spi4_miso,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8011dde:	bf00      	nop
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	0801475c 	.word	0x0801475c
 8011de8:	08014764 	.word	0x08014764
 8011dec:	0801476c 	.word	0x0801476c

08011df0 <spi4_dma_init>:

static void spi4_dma_init(void)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011df4:	f7ff fb52 	bl	801149c <__NVIC_GetPriorityGrouping>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	2105      	movs	r1, #5
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ff fba2 	bl	8011548 <NVIC_EncodePriority>
 8011e04:	4603      	mov	r3, r0
 8011e06:	4619      	mov	r1, r3
 8011e08:	2038      	movs	r0, #56	; 0x38
 8011e0a:	f7ff fb73 	bl	80114f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8011e0e:	2038      	movs	r0, #56	; 0x38
 8011e10:	f7ff fb52 	bl	80114b8 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011e14:	f7ff fb42 	bl	801149c <__NVIC_GetPriorityGrouping>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	2105      	movs	r1, #5
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7ff fb92 	bl	8011548 <NVIC_EncodePriority>
 8011e24:	4603      	mov	r3, r0
 8011e26:	4619      	mov	r1, r3
 8011e28:	2039      	movs	r0, #57	; 0x39
 8011e2a:	f7ff fb63 	bl	80114f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8011e2e:	2039      	movs	r0, #57	; 0x39
 8011e30:	f7ff fb42 	bl	80114b8 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_RX_STREAM, DMA_SPI4_RX_CHANNEL);
 8011e34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011e38:	2100      	movs	r1, #0
 8011e3a:	482d      	ldr	r0, [pc, #180]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e3c:	f7ff fd30 	bl	80118a0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8011e40:	2200      	movs	r2, #0
 8011e42:	2100      	movs	r1, #0
 8011e44:	482a      	ldr	r0, [pc, #168]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e46:	f7ff fc2f 	bl	80116a8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	4828      	ldr	r0, [pc, #160]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e50:	f7ff fd02 	bl	8011858 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MODE_NORMAL);
 8011e54:	2200      	movs	r2, #0
 8011e56:	2100      	movs	r1, #0
 8011e58:	4825      	ldr	r0, [pc, #148]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e5a:	f7ff fc49 	bl	80116f0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011e5e:	2200      	movs	r2, #0
 8011e60:	2100      	movs	r1, #0
 8011e62:	4823      	ldr	r0, [pc, #140]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e64:	f7ff fc68 	bl	8011738 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	4820      	ldr	r0, [pc, #128]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e70:	f7ff fc86 	bl	8011780 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011e74:	2200      	movs	r2, #0
 8011e76:	2100      	movs	r1, #0
 8011e78:	481d      	ldr	r0, [pc, #116]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e7a:	f7ff fca5 	bl	80117c8 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011e7e:	2200      	movs	r2, #0
 8011e80:	2100      	movs	r1, #0
 8011e82:	481b      	ldr	r0, [pc, #108]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e84:	f7ff fcc4 	bl	8011810 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_RX_STREAM);
 8011e88:	2100      	movs	r1, #0
 8011e8a:	4819      	ldr	r0, [pc, #100]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e8c:	f7ff fd2c 	bl	80118e8 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_TX_STREAM, DMA_SPI4_TX_CHANNEL);
 8011e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011e94:	2101      	movs	r1, #1
 8011e96:	4816      	ldr	r0, [pc, #88]	; (8011ef0 <spi4_dma_init+0x100>)
 8011e98:	f7ff fd02 	bl	80118a0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011e9c:	2240      	movs	r2, #64	; 0x40
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	4813      	ldr	r0, [pc, #76]	; (8011ef0 <spi4_dma_init+0x100>)
 8011ea2:	f7ff fc01 	bl	80116a8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	4811      	ldr	r0, [pc, #68]	; (8011ef0 <spi4_dma_init+0x100>)
 8011eac:	f7ff fcd4 	bl	8011858 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	480e      	ldr	r0, [pc, #56]	; (8011ef0 <spi4_dma_init+0x100>)
 8011eb6:	f7ff fc1b 	bl	80116f0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011eba:	2200      	movs	r2, #0
 8011ebc:	2101      	movs	r1, #1
 8011ebe:	480c      	ldr	r0, [pc, #48]	; (8011ef0 <spi4_dma_init+0x100>)
 8011ec0:	f7ff fc3a 	bl	8011738 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ec8:	2101      	movs	r1, #1
 8011eca:	4809      	ldr	r0, [pc, #36]	; (8011ef0 <spi4_dma_init+0x100>)
 8011ecc:	f7ff fc58 	bl	8011780 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	4806      	ldr	r0, [pc, #24]	; (8011ef0 <spi4_dma_init+0x100>)
 8011ed6:	f7ff fc77 	bl	80117c8 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011eda:	2200      	movs	r2, #0
 8011edc:	2101      	movs	r1, #1
 8011ede:	4804      	ldr	r0, [pc, #16]	; (8011ef0 <spi4_dma_init+0x100>)
 8011ee0:	f7ff fc96 	bl	8011810 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_TX_STREAM);
 8011ee4:	2101      	movs	r1, #1
 8011ee6:	4802      	ldr	r0, [pc, #8]	; (8011ef0 <spi4_dma_init+0x100>)
 8011ee8:	f7ff fcfe 	bl	80118e8 <LL_DMA_DisableFifoMode>
}
 8011eec:	bf00      	nop
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	40026400 	.word	0x40026400

08011ef4 <spi4_config>:

static void spi4_config(void)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b08a      	sub	sp, #40	; 0x28
 8011ef8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011efa:	463b      	mov	r3, r7
 8011efc:	2228      	movs	r2, #40	; 0x28
 8011efe:	2100      	movs	r1, #0
 8011f00:	4618      	mov	r0, r3
 8011f02:	f001 fa45 	bl	8013390 <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011f06:	f7ff fac9 	bl	801149c <__NVIC_GetPriorityGrouping>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	2105      	movs	r1, #5
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7ff fb19 	bl	8011548 <NVIC_EncodePriority>
 8011f16:	4603      	mov	r3, r0
 8011f18:	4619      	mov	r1, r3
 8011f1a:	2054      	movs	r0, #84	; 0x54
 8011f1c:	f7ff faea 	bl	80114f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 8011f20:	2054      	movs	r0, #84	; 0x54
 8011f22:	f7ff fac9 	bl	80114b8 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011f26:	2300      	movs	r3, #0
 8011f28:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011f2a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011f2e:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011f30:	2300      	movs	r3, #0
 8011f32:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011f34:	2300      	movs	r3, #0
 8011f36:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f40:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8011f42:	2328      	movs	r3, #40	; 0x28
 8011f44:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011f46:	2300      	movs	r3, #0
 8011f48:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8011f4e:	230a      	movs	r3, #10
 8011f50:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 8011f52:	463b      	mov	r3, r7
 8011f54:	4619      	mov	r1, r3
 8011f56:	4805      	ldr	r0, [pc, #20]	; (8011f6c <spi4_config+0x78>)
 8011f58:	f7f2 fd89 	bl	8004a6e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	4803      	ldr	r0, [pc, #12]	; (8011f6c <spi4_config+0x78>)
 8011f60:	f7ff fb35 	bl	80115ce <LL_SPI_SetStandard>
}
 8011f64:	bf00      	nop
 8011f66:	3728      	adds	r7, #40	; 0x28
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	40013400 	.word	0x40013400

08011f70 <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f76:	463b      	mov	r3, r7
 8011f78:	2200      	movs	r2, #0
 8011f7a:	601a      	str	r2, [r3, #0]
 8011f7c:	605a      	str	r2, [r3, #4]
 8011f7e:	609a      	str	r2, [r3, #8]
 8011f80:	60da      	str	r2, [r3, #12]
 8011f82:	611a      	str	r2, [r3, #16]
 8011f84:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8011f86:	f44f 7360 	mov.w	r3, #896	; 0x380
 8011f8a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011f8c:	2302      	movs	r3, #2
 8011f8e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011f90:	2303      	movs	r3, #3
 8011f92:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011f94:	2300      	movs	r3, #0
 8011f96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8011f9c:	2305      	movs	r3, #5
 8011f9e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011fa0:	463b      	mov	r3, r7
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	4803      	ldr	r0, [pc, #12]	; (8011fb4 <spi5_pin_conf+0x44>)
 8011fa6:	f7f1 fd1a 	bl	80039de <LL_GPIO_Init>
}
 8011faa:	bf00      	nop
 8011fac:	3718      	adds	r7, #24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	40021400 	.word	0x40021400

08011fb8 <spi5_dma_init>:

static void spi5_dma_init(void)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011fbc:	f7ff fa6e 	bl	801149c <__NVIC_GetPriorityGrouping>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	2105      	movs	r1, #5
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7ff fabe 	bl	8011548 <NVIC_EncodePriority>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	4619      	mov	r1, r3
 8011fd0:	203c      	movs	r0, #60	; 0x3c
 8011fd2:	f7ff fa8f 	bl	80114f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8011fd6:	203c      	movs	r0, #60	; 0x3c
 8011fd8:	f7ff fa6e 	bl	80114b8 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 8011fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011fe0:	2104      	movs	r1, #4
 8011fe2:	4816      	ldr	r0, [pc, #88]	; (801203c <spi5_dma_init+0x84>)
 8011fe4:	f7ff fc5c 	bl	80118a0 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011fe8:	2240      	movs	r2, #64	; 0x40
 8011fea:	2104      	movs	r1, #4
 8011fec:	4813      	ldr	r0, [pc, #76]	; (801203c <spi5_dma_init+0x84>)
 8011fee:	f7ff fb5b 	bl	80116a8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	2104      	movs	r1, #4
 8011ff6:	4811      	ldr	r0, [pc, #68]	; (801203c <spi5_dma_init+0x84>)
 8011ff8:	f7ff fc2e 	bl	8011858 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	2104      	movs	r1, #4
 8012000:	480e      	ldr	r0, [pc, #56]	; (801203c <spi5_dma_init+0x84>)
 8012002:	f7ff fb75 	bl	80116f0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8012006:	2200      	movs	r2, #0
 8012008:	2104      	movs	r1, #4
 801200a:	480c      	ldr	r0, [pc, #48]	; (801203c <spi5_dma_init+0x84>)
 801200c:	f7ff fb94 	bl	8011738 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8012010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012014:	2104      	movs	r1, #4
 8012016:	4809      	ldr	r0, [pc, #36]	; (801203c <spi5_dma_init+0x84>)
 8012018:	f7ff fbb2 	bl	8011780 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 801201c:	2200      	movs	r2, #0
 801201e:	2104      	movs	r1, #4
 8012020:	4806      	ldr	r0, [pc, #24]	; (801203c <spi5_dma_init+0x84>)
 8012022:	f7ff fbd1 	bl	80117c8 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8012026:	2200      	movs	r2, #0
 8012028:	2104      	movs	r1, #4
 801202a:	4804      	ldr	r0, [pc, #16]	; (801203c <spi5_dma_init+0x84>)
 801202c:	f7ff fbf0 	bl	8011810 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 8012030:	2104      	movs	r1, #4
 8012032:	4802      	ldr	r0, [pc, #8]	; (801203c <spi5_dma_init+0x84>)
 8012034:	f7ff fc58 	bl	80118e8 <LL_DMA_DisableFifoMode>
}
 8012038:	bf00      	nop
 801203a:	bd80      	pop	{r7, pc}
 801203c:	40026400 	.word	0x40026400

08012040 <spi5_config>:

static void spi5_config(void)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b08a      	sub	sp, #40	; 0x28
 8012044:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8012046:	463b      	mov	r3, r7
 8012048:	2228      	movs	r2, #40	; 0x28
 801204a:	2100      	movs	r1, #0
 801204c:	4618      	mov	r0, r3
 801204e:	f001 f99f 	bl	8013390 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 8012052:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012056:	f7ff fc67 	bl	8011928 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 801205a:	f7ff fa1f 	bl	801149c <__NVIC_GetPriorityGrouping>
 801205e:	4603      	mov	r3, r0
 8012060:	2200      	movs	r2, #0
 8012062:	2105      	movs	r1, #5
 8012064:	4618      	mov	r0, r3
 8012066:	f7ff fa6f 	bl	8011548 <NVIC_EncodePriority>
 801206a:	4603      	mov	r3, r0
 801206c:	4619      	mov	r1, r3
 801206e:	2055      	movs	r0, #85	; 0x55
 8012070:	f7ff fa40 	bl	80114f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 8012074:	2055      	movs	r0, #85	; 0x55
 8012076:	f7ff fa1f 	bl	80114b8 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 801207a:	2300      	movs	r3, #0
 801207c:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 801207e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012082:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8012084:	2300      	movs	r3, #0
 8012086:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8012088:	2300      	movs	r3, #0
 801208a:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 801208c:	2300      	movs	r3, #0
 801208e:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8012090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012094:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8012096:	2318      	movs	r3, #24
 8012098:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 801209a:	2300      	movs	r3, #0
 801209c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 801209e:	2300      	movs	r3, #0
 80120a0:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 80120a2:	230a      	movs	r3, #10
 80120a4:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 80120a6:	463b      	mov	r3, r7
 80120a8:	4619      	mov	r1, r3
 80120aa:	4805      	ldr	r0, [pc, #20]	; (80120c0 <spi5_config+0x80>)
 80120ac:	f7f2 fcdf 	bl	8004a6e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 80120b0:	2100      	movs	r1, #0
 80120b2:	4803      	ldr	r0, [pc, #12]	; (80120c0 <spi5_config+0x80>)
 80120b4:	f7ff fa8b 	bl	80115ce <LL_SPI_SetStandard>
}
 80120b8:	bf00      	nop
 80120ba:	3728      	adds	r7, #40	; 0x28
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	40015000 	.word	0x40015000

080120c4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80120c4:	b480      	push	{r7}
 80120c6:	af00      	add	r7, sp, #0

}
 80120c8:	bf00      	nop
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 80120d2:	b480      	push	{r7}
 80120d4:	af00      	add	r7, sp, #0

}
 80120d6:	bf00      	nop
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 80120e0:	b480      	push	{r7}
 80120e2:	af00      	add	r7, sp, #0

}
 80120e4:	bf00      	nop
 80120e6:	46bd      	mov	sp, r7
 80120e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ec:	4770      	bx	lr

080120ee <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 80120ee:	b480      	push	{r7}
 80120f0:	af00      	add	r7, sp, #0

}
 80120f2:	bf00      	nop
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr

080120fc <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 80120fc:	b480      	push	{r7}
 80120fe:	af00      	add	r7, sp, #0

}
 8012100:	bf00      	nop
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 801210a:	b480      	push	{r7}
 801210c:	af00      	add	r7, sp, #0

}
 801210e:	bf00      	nop
 8012110:	46bd      	mov	sp, r7
 8012112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012116:	4770      	bx	lr

08012118 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 8012118:	b480      	push	{r7}
 801211a:	af00      	add	r7, sp, #0

}
 801211c:	bf00      	nop
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr
	...

08012128 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801212e:	2300      	movs	r3, #0
 8012130:	607b      	str	r3, [r7, #4]
 8012132:	4b12      	ldr	r3, [pc, #72]	; (801217c <HAL_MspInit+0x54>)
 8012134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012136:	4a11      	ldr	r2, [pc, #68]	; (801217c <HAL_MspInit+0x54>)
 8012138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801213c:	6453      	str	r3, [r2, #68]	; 0x44
 801213e:	4b0f      	ldr	r3, [pc, #60]	; (801217c <HAL_MspInit+0x54>)
 8012140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012146:	607b      	str	r3, [r7, #4]
 8012148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801214a:	2300      	movs	r3, #0
 801214c:	603b      	str	r3, [r7, #0]
 801214e:	4b0b      	ldr	r3, [pc, #44]	; (801217c <HAL_MspInit+0x54>)
 8012150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012152:	4a0a      	ldr	r2, [pc, #40]	; (801217c <HAL_MspInit+0x54>)
 8012154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012158:	6413      	str	r3, [r2, #64]	; 0x40
 801215a:	4b08      	ldr	r3, [pc, #32]	; (801217c <HAL_MspInit+0x54>)
 801215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012162:	603b      	str	r3, [r7, #0]
 8012164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012166:	2200      	movs	r2, #0
 8012168:	210f      	movs	r1, #15
 801216a:	f06f 0001 	mvn.w	r0, #1
 801216e:	f7ef f8b1 	bl	80012d4 <HAL_NVIC_SetPriority>
}
 8012172:	bf00      	nop
 8012174:	3708      	adds	r7, #8
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	40023800 	.word	0x40023800

08012180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b08e      	sub	sp, #56	; 0x38
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8012188:	2300      	movs	r3, #0
 801218a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 801218c:	2300      	movs	r3, #0
 801218e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8012190:	2300      	movs	r3, #0
 8012192:	60fb      	str	r3, [r7, #12]
 8012194:	4b33      	ldr	r3, [pc, #204]	; (8012264 <HAL_InitTick+0xe4>)
 8012196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012198:	4a32      	ldr	r2, [pc, #200]	; (8012264 <HAL_InitTick+0xe4>)
 801219a:	f043 0310 	orr.w	r3, r3, #16
 801219e:	6413      	str	r3, [r2, #64]	; 0x40
 80121a0:	4b30      	ldr	r3, [pc, #192]	; (8012264 <HAL_InitTick+0xe4>)
 80121a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121a4:	f003 0310 	and.w	r3, r3, #16
 80121a8:	60fb      	str	r3, [r7, #12]
 80121aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80121ac:	f107 0210 	add.w	r2, r7, #16
 80121b0:	f107 0314 	add.w	r3, r7, #20
 80121b4:	4611      	mov	r1, r2
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7ef fe20 	bl	8001dfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80121bc:	6a3b      	ldr	r3, [r7, #32]
 80121be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d103      	bne.n	80121ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80121c6:	f7ef fe05 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 80121ca:	6378      	str	r0, [r7, #52]	; 0x34
 80121cc:	e004      	b.n	80121d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80121ce:	f7ef fe01 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 80121d2:	4603      	mov	r3, r0
 80121d4:	005b      	lsls	r3, r3, #1
 80121d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80121d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121da:	4a23      	ldr	r2, [pc, #140]	; (8012268 <HAL_InitTick+0xe8>)
 80121dc:	fba2 2303 	umull	r2, r3, r2, r3
 80121e0:	0c9b      	lsrs	r3, r3, #18
 80121e2:	3b01      	subs	r3, #1
 80121e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80121e6:	4b21      	ldr	r3, [pc, #132]	; (801226c <HAL_InitTick+0xec>)
 80121e8:	4a21      	ldr	r2, [pc, #132]	; (8012270 <HAL_InitTick+0xf0>)
 80121ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80121ec:	4b1f      	ldr	r3, [pc, #124]	; (801226c <HAL_InitTick+0xec>)
 80121ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80121f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80121f4:	4a1d      	ldr	r2, [pc, #116]	; (801226c <HAL_InitTick+0xec>)
 80121f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80121fa:	4b1c      	ldr	r3, [pc, #112]	; (801226c <HAL_InitTick+0xec>)
 80121fc:	2200      	movs	r2, #0
 80121fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012200:	4b1a      	ldr	r3, [pc, #104]	; (801226c <HAL_InitTick+0xec>)
 8012202:	2200      	movs	r2, #0
 8012204:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012206:	4b19      	ldr	r3, [pc, #100]	; (801226c <HAL_InitTick+0xec>)
 8012208:	2200      	movs	r2, #0
 801220a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 801220c:	4817      	ldr	r0, [pc, #92]	; (801226c <HAL_InitTick+0xec>)
 801220e:	f7f0 ff57 	bl	80030c0 <HAL_TIM_Base_Init>
 8012212:	4603      	mov	r3, r0
 8012214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8012218:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801221c:	2b00      	cmp	r3, #0
 801221e:	d11b      	bne.n	8012258 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8012220:	4812      	ldr	r0, [pc, #72]	; (801226c <HAL_InitTick+0xec>)
 8012222:	f7f0 ffa7 	bl	8003174 <HAL_TIM_Base_Start_IT>
 8012226:	4603      	mov	r3, r0
 8012228:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 801222c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012230:	2b00      	cmp	r3, #0
 8012232:	d111      	bne.n	8012258 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8012234:	2036      	movs	r0, #54	; 0x36
 8012236:	f7ef f869 	bl	800130c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2b0f      	cmp	r3, #15
 801223e:	d808      	bhi.n	8012252 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8012240:	2200      	movs	r2, #0
 8012242:	6879      	ldr	r1, [r7, #4]
 8012244:	2036      	movs	r0, #54	; 0x36
 8012246:	f7ef f845 	bl	80012d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801224a:	4a0a      	ldr	r2, [pc, #40]	; (8012274 <HAL_InitTick+0xf4>)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	e002      	b.n	8012258 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8012252:	2301      	movs	r3, #1
 8012254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8012258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801225c:	4618      	mov	r0, r3
 801225e:	3738      	adds	r7, #56	; 0x38
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}
 8012264:	40023800 	.word	0x40023800
 8012268:	431bde83 	.word	0x431bde83
 801226c:	20005ab4 	.word	0x20005ab4
 8012270:	40001000 	.word	0x40001000
 8012274:	20000004 	.word	0x20000004

08012278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012278:	b480      	push	{r7}
 801227a:	af00      	add	r7, sp, #0
  while (1)
 801227c:	e7fe      	b.n	801227c <NMI_Handler+0x4>

0801227e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801227e:	b480      	push	{r7}
 8012280:	af00      	add	r7, sp, #0
  while (1)
 8012282:	e7fe      	b.n	8012282 <HardFault_Handler+0x4>

08012284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012284:	b480      	push	{r7}
 8012286:	af00      	add	r7, sp, #0
  while (1)
 8012288:	e7fe      	b.n	8012288 <MemManage_Handler+0x4>

0801228a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801228a:	b480      	push	{r7}
 801228c:	af00      	add	r7, sp, #0
  while (1)
 801228e:	e7fe      	b.n	801228e <BusFault_Handler+0x4>

08012290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012290:	b480      	push	{r7}
 8012292:	af00      	add	r7, sp, #0
  while (1)
 8012294:	e7fe      	b.n	8012294 <UsageFault_Handler+0x4>

08012296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012296:	b480      	push	{r7}
 8012298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801229a:	bf00      	nop
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80122a8:	4802      	ldr	r0, [pc, #8]	; (80122b4 <TIM6_DAC_IRQHandler+0x10>)
 80122aa:	f7f0 ffd3 	bl	8003254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80122ae:	bf00      	nop
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	20005ab4 	.word	0x20005ab4

080122b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4a04      	ldr	r2, [pc, #16]	; (80122d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80122c6:	4293      	cmp	r3, r2
 80122c8:	d101      	bne.n	80122ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80122ca:	f7ee ff07 	bl	80010dc <HAL_IncTick>
  }
}
 80122ce:	bf00      	nop
 80122d0:	3708      	adds	r7, #8
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	40001000 	.word	0x40001000

080122dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80122dc:	b480      	push	{r7}
 80122de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80122e0:	4b06      	ldr	r3, [pc, #24]	; (80122fc <SystemInit+0x20>)
 80122e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122e6:	4a05      	ldr	r2, [pc, #20]	; (80122fc <SystemInit+0x20>)
 80122e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80122ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80122f0:	bf00      	nop
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	e000ed00 	.word	0xe000ed00

08012300 <__NVIC_GetPriorityGrouping>:
{
 8012300:	b480      	push	{r7}
 8012302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012304:	4b04      	ldr	r3, [pc, #16]	; (8012318 <__NVIC_GetPriorityGrouping+0x18>)
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	0a1b      	lsrs	r3, r3, #8
 801230a:	f003 0307 	and.w	r3, r3, #7
}
 801230e:	4618      	mov	r0, r3
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr
 8012318:	e000ed00 	.word	0xe000ed00

0801231c <__NVIC_EnableIRQ>:
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	4603      	mov	r3, r0
 8012324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801232a:	2b00      	cmp	r3, #0
 801232c:	db0b      	blt.n	8012346 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801232e:	79fb      	ldrb	r3, [r7, #7]
 8012330:	f003 021f 	and.w	r2, r3, #31
 8012334:	4907      	ldr	r1, [pc, #28]	; (8012354 <__NVIC_EnableIRQ+0x38>)
 8012336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801233a:	095b      	lsrs	r3, r3, #5
 801233c:	2001      	movs	r0, #1
 801233e:	fa00 f202 	lsl.w	r2, r0, r2
 8012342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012346:	bf00      	nop
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	e000e100 	.word	0xe000e100

08012358 <__NVIC_SetPriority>:
{
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	6039      	str	r1, [r7, #0]
 8012362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012368:	2b00      	cmp	r3, #0
 801236a:	db0a      	blt.n	8012382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	b2da      	uxtb	r2, r3
 8012370:	490c      	ldr	r1, [pc, #48]	; (80123a4 <__NVIC_SetPriority+0x4c>)
 8012372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012376:	0112      	lsls	r2, r2, #4
 8012378:	b2d2      	uxtb	r2, r2
 801237a:	440b      	add	r3, r1
 801237c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012380:	e00a      	b.n	8012398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	b2da      	uxtb	r2, r3
 8012386:	4908      	ldr	r1, [pc, #32]	; (80123a8 <__NVIC_SetPriority+0x50>)
 8012388:	79fb      	ldrb	r3, [r7, #7]
 801238a:	f003 030f 	and.w	r3, r3, #15
 801238e:	3b04      	subs	r3, #4
 8012390:	0112      	lsls	r2, r2, #4
 8012392:	b2d2      	uxtb	r2, r2
 8012394:	440b      	add	r3, r1
 8012396:	761a      	strb	r2, [r3, #24]
}
 8012398:	bf00      	nop
 801239a:	370c      	adds	r7, #12
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr
 80123a4:	e000e100 	.word	0xe000e100
 80123a8:	e000ed00 	.word	0xe000ed00

080123ac <NVIC_EncodePriority>:
{
 80123ac:	b480      	push	{r7}
 80123ae:	b089      	sub	sp, #36	; 0x24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f003 0307 	and.w	r3, r3, #7
 80123be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	f1c3 0307 	rsb	r3, r3, #7
 80123c6:	2b04      	cmp	r3, #4
 80123c8:	bf28      	it	cs
 80123ca:	2304      	movcs	r3, #4
 80123cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	3304      	adds	r3, #4
 80123d2:	2b06      	cmp	r3, #6
 80123d4:	d902      	bls.n	80123dc <NVIC_EncodePriority+0x30>
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	3b03      	subs	r3, #3
 80123da:	e000      	b.n	80123de <NVIC_EncodePriority+0x32>
 80123dc:	2300      	movs	r3, #0
 80123de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80123e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	fa02 f303 	lsl.w	r3, r2, r3
 80123ea:	43da      	mvns	r2, r3
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	401a      	ands	r2, r3
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80123f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	fa01 f303 	lsl.w	r3, r1, r3
 80123fe:	43d9      	mvns	r1, r3
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012404:	4313      	orrs	r3, r2
}
 8012406:	4618      	mov	r0, r3
 8012408:	3724      	adds	r7, #36	; 0x24
 801240a:	46bd      	mov	sp, r7
 801240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012410:	4770      	bx	lr

08012412 <LL_TIM_EnableCounter>:
{
 8012412:	b480      	push	{r7}
 8012414:	b083      	sub	sp, #12
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f043 0201 	orr.w	r2, r3, #1
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	601a      	str	r2, [r3, #0]
}
 8012426:	bf00      	nop
 8012428:	370c      	adds	r7, #12
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr

08012432 <LL_TIM_DisableARRPreload>:
{
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]
}
 8012446:	bf00      	nop
 8012448:	370c      	adds	r7, #12
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr

08012452 <LL_TIM_SetClockSource>:
{
 8012452:	b480      	push	{r7}
 8012454:	b083      	sub	sp, #12
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
 801245a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	689b      	ldr	r3, [r3, #8]
 8012460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012464:	f023 0307 	bic.w	r3, r3, #7
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	431a      	orrs	r2, r3
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	609a      	str	r2, [r3, #8]
}
 8012470:	bf00      	nop
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <LL_TIM_ClearFlag_UPDATE>:
{
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f06f 0201 	mvn.w	r2, #1
 801248a:	611a      	str	r2, [r3, #16]
}
 801248c:	bf00      	nop
 801248e:	370c      	adds	r7, #12
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr

08012498 <LL_TIM_EnableIT_UPDATE>:
{
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	f043 0201 	orr.w	r2, r3, #1
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	60da      	str	r2, [r3, #12]
}
 80124ac:	bf00      	nop
 80124ae:	370c      	adds	r7, #12
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr

080124b8 <hal_tim_start_it>:

static volatile TimInterrupt tim_interrupt[TIM_NUMBER];

static void hal_tim_int_call(uint32_t tim);

void hal_tim_start_it(TimID id) {
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4603      	mov	r3, r0
 80124c0:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 80124c2:	79fb      	ldrb	r3, [r7, #7]
 80124c4:	2b04      	cmp	r3, #4
 80124c6:	d106      	bne.n	80124d6 <hal_tim_start_it+0x1e>
	case TimId4:
		LL_TIM_EnableCounter(TIM4);
 80124c8:	4805      	ldr	r0, [pc, #20]	; (80124e0 <hal_tim_start_it+0x28>)
 80124ca:	f7ff ffa2 	bl	8012412 <LL_TIM_EnableCounter>
		LL_TIM_EnableIT_UPDATE(TIM4);
 80124ce:	4804      	ldr	r0, [pc, #16]	; (80124e0 <hal_tim_start_it+0x28>)
 80124d0:	f7ff ffe2 	bl	8012498 <LL_TIM_EnableIT_UPDATE>
		break;
 80124d4:	e000      	b.n	80124d8 <hal_tim_start_it+0x20>
	default:
		break;
 80124d6:	bf00      	nop
	}
}
 80124d8:	bf00      	nop
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	40000800 	.word	0x40000800

080124e4 <tim_init>:
		LL_TIM_DisableCounter(TIM4);
		LL_TIM_DisableIT_UPDATE(TIM4);
	}
}

void tim_init(TimID id) {
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	4603      	mov	r3, r0
 80124ec:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 80124ee:	79fb      	ldrb	r3, [r7, #7]
 80124f0:	2b04      	cmp	r3, #4
 80124f2:	d105      	bne.n	8012500 <tim_init+0x1c>
	case TimId4:
		tim4_init();
 80124f4:	f000 f810 	bl	8012518 <tim4_init>
	//	LL_TIM_EnableCounter(TIM4);
		LL_TIM_ClearFlag_UPDATE(TIM4);
 80124f8:	4805      	ldr	r0, [pc, #20]	; (8012510 <tim_init+0x2c>)
 80124fa:	f7ff ffbf 	bl	801247c <LL_TIM_ClearFlag_UPDATE>
		break;
 80124fe:	e003      	b.n	8012508 <tim_init+0x24>

	default:
		hal_cli_printf("timer init argument error");
 8012500:	4804      	ldr	r0, [pc, #16]	; (8012514 <tim_init+0x30>)
 8012502:	f7fc fcf3 	bl	800eeec <hal_cli_printf>
		break;
 8012506:	bf00      	nop
	}
}
 8012508:	bf00      	nop
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	40000800 	.word	0x40000800
 8012514:	080140ac 	.word	0x080140ac

08012518 <tim4_init>:

	return ret;
}

static void tim4_init(void)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 801251e:	1d3b      	adds	r3, r7, #4
 8012520:	2200      	movs	r2, #0
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	605a      	str	r2, [r3, #4]
 8012526:	609a      	str	r2, [r3, #8]
 8012528:	60da      	str	r2, [r3, #12]
 801252a:	611a      	str	r2, [r3, #16]
#if 0
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
#endif

	NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 801252c:	f7ff fee8 	bl	8012300 <__NVIC_GetPriorityGrouping>
 8012530:	4603      	mov	r3, r0
 8012532:	2200      	movs	r2, #0
 8012534:	2105      	movs	r1, #5
 8012536:	4618      	mov	r0, r3
 8012538:	f7ff ff38 	bl	80123ac <NVIC_EncodePriority>
 801253c:	4603      	mov	r3, r0
 801253e:	4619      	mov	r1, r3
 8012540:	201e      	movs	r0, #30
 8012542:	f7ff ff09 	bl	8012358 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 8012546:	201e      	movs	r0, #30
 8012548:	f7ff fee8 	bl	801231c <__NVIC_EnableIRQ>

	/* tim init period = 20ms */
	TIM_InitStruct.Prescaler = 180;
 801254c:	23b4      	movs	r3, #180	; 0xb4
 801254e:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8012550:	2300      	movs	r3, #0
 8012552:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 10000;
 8012554:	f242 7310 	movw	r3, #10000	; 0x2710
 8012558:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 801255a:	2300      	movs	r3, #0
 801255c:	613b      	str	r3, [r7, #16]
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 801255e:	1d3b      	adds	r3, r7, #4
 8012560:	4619      	mov	r1, r3
 8012562:	4807      	ldr	r0, [pc, #28]	; (8012580 <tim4_init+0x68>)
 8012564:	f7f2 fb10 	bl	8004b88 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM4);
 8012568:	4805      	ldr	r0, [pc, #20]	; (8012580 <tim4_init+0x68>)
 801256a:	f7ff ff62 	bl	8012432 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 801256e:	2100      	movs	r1, #0
 8012570:	4803      	ldr	r0, [pc, #12]	; (8012580 <tim4_init+0x68>)
 8012572:	f7ff ff6e 	bl	8012452 <LL_TIM_SetClockSource>
		GpioPullNo,
		GpioSpeedFreqLow,
		GpioAltFnTim4);

#endif
}
 8012576:	bf00      	nop
 8012578:	3718      	adds	r7, #24
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	40000800 	.word	0x40000800

08012584 <hal_tim_add_int_callback>:

void hal_tim_add_int_callback(uint32_t tim, TimInterruptCallback cb, void* context) {
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
	taskENTER_CRITICAL();
 8012590:	f7f6 fcea 	bl	8008f68 <vPortEnterCritical>
	tim_interrupt[tim].callback = cb;
 8012594:	4911      	ldr	r1, [pc, #68]	; (80125dc <hal_tim_add_int_callback+0x58>)
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	4613      	mov	r3, r2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	4413      	add	r3, r2
 801259e:	009b      	lsls	r3, r3, #2
 80125a0:	440b      	add	r3, r1
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	601a      	str	r2, [r3, #0]
	tim_interrupt[tim].context = context;
 80125a6:	490d      	ldr	r1, [pc, #52]	; (80125dc <hal_tim_add_int_callback+0x58>)
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	4613      	mov	r3, r2
 80125ac:	005b      	lsls	r3, r3, #1
 80125ae:	4413      	add	r3, r2
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	440b      	add	r3, r1
 80125b4:	3304      	adds	r3, #4
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	601a      	str	r2, [r3, #0]
	tim_interrupt[tim].ready = true;
 80125ba:	4908      	ldr	r1, [pc, #32]	; (80125dc <hal_tim_add_int_callback+0x58>)
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	4613      	mov	r3, r2
 80125c0:	005b      	lsls	r3, r3, #1
 80125c2:	4413      	add	r3, r2
 80125c4:	009b      	lsls	r3, r3, #2
 80125c6:	440b      	add	r3, r1
 80125c8:	3308      	adds	r3, #8
 80125ca:	2201      	movs	r2, #1
 80125cc:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 80125ce:	f7f6 fcfb 	bl	8008fc8 <vPortExitCritical>
}
 80125d2:	bf00      	nop
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	20005afc 	.word	0x20005afc

080125e0 <hal_tim_int_call>:

static void hal_tim_int_call(uint32_t tim) {
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
	if(tim_interrupt[tim].callback && tim_interrupt[tim].ready) {
 80125e8:	4916      	ldr	r1, [pc, #88]	; (8012644 <hal_tim_int_call+0x64>)
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	4613      	mov	r3, r2
 80125ee:	005b      	lsls	r3, r3, #1
 80125f0:	4413      	add	r3, r2
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	440b      	add	r3, r1
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d01e      	beq.n	801263a <hal_tim_int_call+0x5a>
 80125fc:	4911      	ldr	r1, [pc, #68]	; (8012644 <hal_tim_int_call+0x64>)
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	4613      	mov	r3, r2
 8012602:	005b      	lsls	r3, r3, #1
 8012604:	4413      	add	r3, r2
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	440b      	add	r3, r1
 801260a:	3308      	adds	r3, #8
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	b2db      	uxtb	r3, r3
 8012610:	2b00      	cmp	r3, #0
 8012612:	d012      	beq.n	801263a <hal_tim_int_call+0x5a>
		tim_interrupt[tim].callback(tim_interrupt[tim].context);
 8012614:	490b      	ldr	r1, [pc, #44]	; (8012644 <hal_tim_int_call+0x64>)
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	4613      	mov	r3, r2
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	4413      	add	r3, r2
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	440b      	add	r3, r1
 8012622:	6819      	ldr	r1, [r3, #0]
 8012624:	4807      	ldr	r0, [pc, #28]	; (8012644 <hal_tim_int_call+0x64>)
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	4613      	mov	r3, r2
 801262a:	005b      	lsls	r3, r3, #1
 801262c:	4413      	add	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	4403      	add	r3, r0
 8012632:	3304      	adds	r3, #4
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4618      	mov	r0, r3
 8012638:	4788      	blx	r1
	}
}
 801263a:	bf00      	nop
 801263c:	3708      	adds	r7, #8
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	20005afc 	.word	0x20005afc

08012648 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void) {
 8012648:	b580      	push	{r7, lr}
 801264a:	af00      	add	r7, sp, #0
	hal_tim_int_call(4);
 801264c:	2004      	movs	r0, #4
 801264e:	f7ff ffc7 	bl	80125e0 <hal_tim_int_call>
	LL_TIM_ClearFlag_UPDATE(TIM4);
 8012652:	4802      	ldr	r0, [pc, #8]	; (801265c <TIM4_IRQHandler+0x14>)
 8012654:	f7ff ff12 	bl	801247c <LL_TIM_ClearFlag_UPDATE>
}
 8012658:	bf00      	nop
 801265a:	bd80      	pop	{r7, pc}
 801265c:	40000800 	.word	0x40000800

08012660 <__NVIC_GetPriorityGrouping>:
{
 8012660:	b480      	push	{r7}
 8012662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012664:	4b04      	ldr	r3, [pc, #16]	; (8012678 <__NVIC_GetPriorityGrouping+0x18>)
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	0a1b      	lsrs	r3, r3, #8
 801266a:	f003 0307 	and.w	r3, r3, #7
}
 801266e:	4618      	mov	r0, r3
 8012670:	46bd      	mov	sp, r7
 8012672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012676:	4770      	bx	lr
 8012678:	e000ed00 	.word	0xe000ed00

0801267c <__NVIC_EnableIRQ>:
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	4603      	mov	r3, r0
 8012684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801268a:	2b00      	cmp	r3, #0
 801268c:	db0b      	blt.n	80126a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801268e:	79fb      	ldrb	r3, [r7, #7]
 8012690:	f003 021f 	and.w	r2, r3, #31
 8012694:	4907      	ldr	r1, [pc, #28]	; (80126b4 <__NVIC_EnableIRQ+0x38>)
 8012696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801269a:	095b      	lsrs	r3, r3, #5
 801269c:	2001      	movs	r0, #1
 801269e:	fa00 f202 	lsl.w	r2, r0, r2
 80126a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80126a6:	bf00      	nop
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
 80126b4:	e000e100 	.word	0xe000e100

080126b8 <__NVIC_SetPriority>:
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	4603      	mov	r3, r0
 80126c0:	6039      	str	r1, [r7, #0]
 80126c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	db0a      	blt.n	80126e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	490c      	ldr	r1, [pc, #48]	; (8012704 <__NVIC_SetPriority+0x4c>)
 80126d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126d6:	0112      	lsls	r2, r2, #4
 80126d8:	b2d2      	uxtb	r2, r2
 80126da:	440b      	add	r3, r1
 80126dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80126e0:	e00a      	b.n	80126f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	b2da      	uxtb	r2, r3
 80126e6:	4908      	ldr	r1, [pc, #32]	; (8012708 <__NVIC_SetPriority+0x50>)
 80126e8:	79fb      	ldrb	r3, [r7, #7]
 80126ea:	f003 030f 	and.w	r3, r3, #15
 80126ee:	3b04      	subs	r3, #4
 80126f0:	0112      	lsls	r2, r2, #4
 80126f2:	b2d2      	uxtb	r2, r2
 80126f4:	440b      	add	r3, r1
 80126f6:	761a      	strb	r2, [r3, #24]
}
 80126f8:	bf00      	nop
 80126fa:	370c      	adds	r7, #12
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr
 8012704:	e000e100 	.word	0xe000e100
 8012708:	e000ed00 	.word	0xe000ed00

0801270c <NVIC_EncodePriority>:
{
 801270c:	b480      	push	{r7}
 801270e:	b089      	sub	sp, #36	; 0x24
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	f003 0307 	and.w	r3, r3, #7
 801271e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	f1c3 0307 	rsb	r3, r3, #7
 8012726:	2b04      	cmp	r3, #4
 8012728:	bf28      	it	cs
 801272a:	2304      	movcs	r3, #4
 801272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	3304      	adds	r3, #4
 8012732:	2b06      	cmp	r3, #6
 8012734:	d902      	bls.n	801273c <NVIC_EncodePriority+0x30>
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	3b03      	subs	r3, #3
 801273a:	e000      	b.n	801273e <NVIC_EncodePriority+0x32>
 801273c:	2300      	movs	r3, #0
 801273e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	fa02 f303 	lsl.w	r3, r2, r3
 801274a:	43da      	mvns	r2, r3
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	401a      	ands	r2, r3
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	fa01 f303 	lsl.w	r3, r1, r3
 801275e:	43d9      	mvns	r1, r3
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012764:	4313      	orrs	r3, r2
}
 8012766:	4618      	mov	r0, r3
 8012768:	3724      	adds	r7, #36	; 0x24
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <LL_USART_Enable>:
{
 8012772:	b480      	push	{r7}
 8012774:	b083      	sub	sp, #12
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	60da      	str	r2, [r3, #12]
}
 8012786:	bf00      	nop
 8012788:	370c      	adds	r7, #12
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr

08012792 <LL_USART_IsEnabled>:
{
 8012792:	b480      	push	{r7}
 8012794:	b083      	sub	sp, #12
 8012796:	af00      	add	r7, sp, #0
 8012798:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	68db      	ldr	r3, [r3, #12]
 801279e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80127a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80127a6:	bf0c      	ite	eq
 80127a8:	2301      	moveq	r3, #1
 80127aa:	2300      	movne	r3, #0
 80127ac:	b2db      	uxtb	r3, r3
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	370c      	adds	r7, #12
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr

080127ba <LL_USART_ConfigAsyncMode>:
{
 80127ba:	b480      	push	{r7}
 80127bc:	b083      	sub	sp, #12
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	691b      	ldr	r3, [r3, #16]
 80127c6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	695b      	ldr	r3, [r3, #20]
 80127d2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	615a      	str	r2, [r3, #20]
}
 80127da:	bf00      	nop
 80127dc:	370c      	adds	r7, #12
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr

080127e6 <LL_USART_IsActiveFlag_IDLE>:
{
 80127e6:	b480      	push	{r7}
 80127e8:	b083      	sub	sp, #12
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	f003 0310 	and.w	r3, r3, #16
 80127f6:	2b10      	cmp	r3, #16
 80127f8:	bf0c      	ite	eq
 80127fa:	2301      	moveq	r3, #1
 80127fc:	2300      	movne	r3, #0
 80127fe:	b2db      	uxtb	r3, r3
}
 8012800:	4618      	mov	r0, r3
 8012802:	370c      	adds	r7, #12
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr

0801280c <LL_USART_IsActiveFlag_TXE>:
{
 801280c:	b480      	push	{r7}
 801280e:	b083      	sub	sp, #12
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801281c:	2b80      	cmp	r3, #128	; 0x80
 801281e:	bf0c      	ite	eq
 8012820:	2301      	moveq	r3, #1
 8012822:	2300      	movne	r3, #0
 8012824:	b2db      	uxtb	r3, r3
}
 8012826:	4618      	mov	r0, r3
 8012828:	370c      	adds	r7, #12
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr

08012832 <LL_USART_ClearFlag_IDLE>:
{
 8012832:	b480      	push	{r7}
 8012834:	b085      	sub	sp, #20
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8012840:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8012848:	68fb      	ldr	r3, [r7, #12]
}
 801284a:	bf00      	nop
 801284c:	3714      	adds	r7, #20
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr

08012856 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8012856:	b480      	push	{r7}
 8012858:	b083      	sub	sp, #12
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
 801285e:	460b      	mov	r3, r1
 8012860:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8012862:	78fa      	ldrb	r2, [r7, #3]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	605a      	str	r2, [r3, #4]
}
 8012868:	bf00      	nop
 801286a:	370c      	adds	r7, #12
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <LL_DMA_SetDataTransferDirection>:
{
 8012874:	b480      	push	{r7}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8012880:	4a0d      	ldr	r2, [pc, #52]	; (80128b8 <LL_DMA_SetDataTransferDirection+0x44>)
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	4413      	add	r3, r2
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	461a      	mov	r2, r3
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	4413      	add	r3, r2
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012894:	4908      	ldr	r1, [pc, #32]	; (80128b8 <LL_DMA_SetDataTransferDirection+0x44>)
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	440b      	add	r3, r1
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	4619      	mov	r1, r3
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	440b      	add	r3, r1
 80128a2:	4619      	mov	r1, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	4313      	orrs	r3, r2
 80128a8:	600b      	str	r3, [r1, #0]
}
 80128aa:	bf00      	nop
 80128ac:	3714      	adds	r7, #20
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop
 80128b8:	080147cc 	.word	0x080147cc

080128bc <LL_DMA_SetMode>:
{
 80128bc:	b480      	push	{r7}
 80128be:	b085      	sub	sp, #20
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80128c8:	4a0d      	ldr	r2, [pc, #52]	; (8012900 <LL_DMA_SetMode+0x44>)
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	4413      	add	r3, r2
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	461a      	mov	r2, r3
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	4413      	add	r3, r2
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80128dc:	4908      	ldr	r1, [pc, #32]	; (8012900 <LL_DMA_SetMode+0x44>)
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	440b      	add	r3, r1
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	4619      	mov	r1, r3
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	440b      	add	r3, r1
 80128ea:	4619      	mov	r1, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4313      	orrs	r3, r2
 80128f0:	600b      	str	r3, [r1, #0]
}
 80128f2:	bf00      	nop
 80128f4:	3714      	adds	r7, #20
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	080147cc 	.word	0x080147cc

08012904 <LL_DMA_SetPeriphIncMode>:
{
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8012910:	4a0d      	ldr	r2, [pc, #52]	; (8012948 <LL_DMA_SetPeriphIncMode+0x44>)
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	4413      	add	r3, r2
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	461a      	mov	r2, r3
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	4413      	add	r3, r2
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012924:	4908      	ldr	r1, [pc, #32]	; (8012948 <LL_DMA_SetPeriphIncMode+0x44>)
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	440b      	add	r3, r1
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	4619      	mov	r1, r3
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	440b      	add	r3, r1
 8012932:	4619      	mov	r1, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4313      	orrs	r3, r2
 8012938:	600b      	str	r3, [r1, #0]
}
 801293a:	bf00      	nop
 801293c:	3714      	adds	r7, #20
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	080147cc 	.word	0x080147cc

0801294c <LL_DMA_SetMemoryIncMode>:
{
 801294c:	b480      	push	{r7}
 801294e:	b085      	sub	sp, #20
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8012958:	4a0d      	ldr	r2, [pc, #52]	; (8012990 <LL_DMA_SetMemoryIncMode+0x44>)
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	4413      	add	r3, r2
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	461a      	mov	r2, r3
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	4413      	add	r3, r2
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801296c:	4908      	ldr	r1, [pc, #32]	; (8012990 <LL_DMA_SetMemoryIncMode+0x44>)
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	440b      	add	r3, r1
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	4619      	mov	r1, r3
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	440b      	add	r3, r1
 801297a:	4619      	mov	r1, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	4313      	orrs	r3, r2
 8012980:	600b      	str	r3, [r1, #0]
}
 8012982:	bf00      	nop
 8012984:	3714      	adds	r7, #20
 8012986:	46bd      	mov	sp, r7
 8012988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298c:	4770      	bx	lr
 801298e:	bf00      	nop
 8012990:	080147cc 	.word	0x080147cc

08012994 <LL_DMA_SetPeriphSize>:
{
 8012994:	b480      	push	{r7}
 8012996:	b085      	sub	sp, #20
 8012998:	af00      	add	r7, sp, #0
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80129a0:	4a0d      	ldr	r2, [pc, #52]	; (80129d8 <LL_DMA_SetPeriphSize+0x44>)
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	4413      	add	r3, r2
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	461a      	mov	r2, r3
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	4413      	add	r3, r2
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80129b4:	4908      	ldr	r1, [pc, #32]	; (80129d8 <LL_DMA_SetPeriphSize+0x44>)
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	440b      	add	r3, r1
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	4619      	mov	r1, r3
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	440b      	add	r3, r1
 80129c2:	4619      	mov	r1, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	4313      	orrs	r3, r2
 80129c8:	600b      	str	r3, [r1, #0]
}
 80129ca:	bf00      	nop
 80129cc:	3714      	adds	r7, #20
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	080147cc 	.word	0x080147cc

080129dc <LL_DMA_SetMemorySize>:
{
 80129dc:	b480      	push	{r7}
 80129de:	b085      	sub	sp, #20
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80129e8:	4a0d      	ldr	r2, [pc, #52]	; (8012a20 <LL_DMA_SetMemorySize+0x44>)
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	4413      	add	r3, r2
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	461a      	mov	r2, r3
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	4413      	add	r3, r2
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80129fc:	4908      	ldr	r1, [pc, #32]	; (8012a20 <LL_DMA_SetMemorySize+0x44>)
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	440b      	add	r3, r1
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	4619      	mov	r1, r3
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	440b      	add	r3, r1
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	600b      	str	r3, [r1, #0]
}
 8012a12:	bf00      	nop
 8012a14:	3714      	adds	r7, #20
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr
 8012a1e:	bf00      	nop
 8012a20:	080147cc 	.word	0x080147cc

08012a24 <LL_DMA_SetStreamPriorityLevel>:
{
 8012a24:	b480      	push	{r7}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8012a30:	4a0d      	ldr	r2, [pc, #52]	; (8012a68 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	4413      	add	r3, r2
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	461a      	mov	r2, r3
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012a44:	4908      	ldr	r1, [pc, #32]	; (8012a68 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	440b      	add	r3, r1
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	440b      	add	r3, r1
 8012a52:	4619      	mov	r1, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	4313      	orrs	r3, r2
 8012a58:	600b      	str	r3, [r1, #0]
}
 8012a5a:	bf00      	nop
 8012a5c:	3714      	adds	r7, #20
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop
 8012a68:	080147cc 	.word	0x080147cc

08012a6c <LL_DMA_GetDataLength>:
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8012a76:	4a07      	ldr	r2, [pc, #28]	; (8012a94 <LL_DMA_GetDataLength+0x28>)
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	4413      	add	r3, r2
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	461a      	mov	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	4413      	add	r3, r2
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	b29b      	uxth	r3, r3
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr
 8012a94:	080147cc 	.word	0x080147cc

08012a98 <LL_DMA_SetChannelSelection>:
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8012aa4:	4a0d      	ldr	r2, [pc, #52]	; (8012adc <LL_DMA_SetChannelSelection+0x44>)
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	461a      	mov	r2, r3
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8012ab8:	4908      	ldr	r1, [pc, #32]	; (8012adc <LL_DMA_SetChannelSelection+0x44>)
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	440b      	add	r3, r1
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	440b      	add	r3, r1
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	4313      	orrs	r3, r2
 8012acc:	600b      	str	r3, [r1, #0]
}
 8012ace:	bf00      	nop
 8012ad0:	3714      	adds	r7, #20
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
 8012ada:	bf00      	nop
 8012adc:	080147cc 	.word	0x080147cc

08012ae0 <LL_DMA_DisableFifoMode>:
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8012aea:	4a0c      	ldr	r2, [pc, #48]	; (8012b1c <LL_DMA_DisableFifoMode+0x3c>)
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	4413      	add	r3, r2
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	461a      	mov	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	4413      	add	r3, r2
 8012af8:	695b      	ldr	r3, [r3, #20]
 8012afa:	4908      	ldr	r1, [pc, #32]	; (8012b1c <LL_DMA_DisableFifoMode+0x3c>)
 8012afc:	683a      	ldr	r2, [r7, #0]
 8012afe:	440a      	add	r2, r1
 8012b00:	7812      	ldrb	r2, [r2, #0]
 8012b02:	4611      	mov	r1, r2
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	440a      	add	r2, r1
 8012b08:	f023 0304 	bic.w	r3, r3, #4
 8012b0c:	6153      	str	r3, [r2, #20]
}
 8012b0e:	bf00      	nop
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	080147cc 	.word	0x080147cc

08012b20 <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b08c      	sub	sp, #48	; 0x30
 8012b24:	af02      	add	r7, sp, #8
 8012b26:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 8012b28:	2307      	movs	r3, #7
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	2303      	movs	r3, #3
 8012b2e:	2200      	movs	r2, #0
 8012b30:	2103      	movs	r1, #3
 8012b32:	4853      	ldr	r0, [pc, #332]	; (8012c80 <hal_uart1_init+0x160>)
 8012b34:	f7fc ff4a 	bl	800f9cc <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 8012b38:	2307      	movs	r3, #7
 8012b3a:	9300      	str	r3, [sp, #0]
 8012b3c:	2303      	movs	r3, #3
 8012b3e:	2200      	movs	r2, #0
 8012b40:	2103      	movs	r1, #3
 8012b42:	4850      	ldr	r0, [pc, #320]	; (8012c84 <hal_uart1_init+0x164>)
 8012b44:	f7fc ff42 	bl	800f9cc <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8012b48:	2200      	movs	r2, #0
 8012b4a:	2105      	movs	r1, #5
 8012b4c:	203a      	movs	r0, #58	; 0x3a
 8012b4e:	f7ee fbc1 	bl	80012d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8012b52:	203a      	movs	r0, #58	; 0x3a
 8012b54:	f7ee fbda 	bl	800130c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8012b58:	2200      	movs	r2, #0
 8012b5a:	2105      	movs	r1, #5
 8012b5c:	2046      	movs	r0, #70	; 0x46
 8012b5e:	f7ee fbb9 	bl	80012d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8012b62:	2046      	movs	r0, #70	; 0x46
 8012b64:	f7ee fbd2 	bl	800130c <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 8012b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012b6c:	2102      	movs	r1, #2
 8012b6e:	4846      	ldr	r0, [pc, #280]	; (8012c88 <hal_uart1_init+0x168>)
 8012b70:	f7ff ff92 	bl	8012a98 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8012b74:	2200      	movs	r2, #0
 8012b76:	2102      	movs	r1, #2
 8012b78:	4843      	ldr	r0, [pc, #268]	; (8012c88 <hal_uart1_init+0x168>)
 8012b7a:	f7ff fe7b 	bl	8012874 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8012b7e:	2200      	movs	r2, #0
 8012b80:	2102      	movs	r1, #2
 8012b82:	4841      	ldr	r0, [pc, #260]	; (8012c88 <hal_uart1_init+0x168>)
 8012b84:	f7ff ff4e 	bl	8012a24 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 8012b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012b8c:	2102      	movs	r1, #2
 8012b8e:	483e      	ldr	r0, [pc, #248]	; (8012c88 <hal_uart1_init+0x168>)
 8012b90:	f7ff fe94 	bl	80128bc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012b94:	2200      	movs	r2, #0
 8012b96:	2102      	movs	r1, #2
 8012b98:	483b      	ldr	r0, [pc, #236]	; (8012c88 <hal_uart1_init+0x168>)
 8012b9a:	f7ff feb3 	bl	8012904 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012ba2:	2102      	movs	r1, #2
 8012ba4:	4838      	ldr	r0, [pc, #224]	; (8012c88 <hal_uart1_init+0x168>)
 8012ba6:	f7ff fed1 	bl	801294c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012baa:	2200      	movs	r2, #0
 8012bac:	2102      	movs	r1, #2
 8012bae:	4836      	ldr	r0, [pc, #216]	; (8012c88 <hal_uart1_init+0x168>)
 8012bb0:	f7ff fef0 	bl	8012994 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	2102      	movs	r1, #2
 8012bb8:	4833      	ldr	r0, [pc, #204]	; (8012c88 <hal_uart1_init+0x168>)
 8012bba:	f7ff ff0f 	bl	80129dc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 8012bbe:	2102      	movs	r1, #2
 8012bc0:	4831      	ldr	r0, [pc, #196]	; (8012c88 <hal_uart1_init+0x168>)
 8012bc2:	f7ff ff8d 	bl	8012ae0 <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 8012bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012bca:	2107      	movs	r1, #7
 8012bcc:	482e      	ldr	r0, [pc, #184]	; (8012c88 <hal_uart1_init+0x168>)
 8012bce:	f7ff ff63 	bl	8012a98 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8012bd2:	2240      	movs	r2, #64	; 0x40
 8012bd4:	2107      	movs	r1, #7
 8012bd6:	482c      	ldr	r0, [pc, #176]	; (8012c88 <hal_uart1_init+0x168>)
 8012bd8:	f7ff fe4c 	bl	8012874 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8012bdc:	2200      	movs	r2, #0
 8012bde:	2107      	movs	r1, #7
 8012be0:	4829      	ldr	r0, [pc, #164]	; (8012c88 <hal_uart1_init+0x168>)
 8012be2:	f7ff ff1f 	bl	8012a24 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8012be6:	2200      	movs	r2, #0
 8012be8:	2107      	movs	r1, #7
 8012bea:	4827      	ldr	r0, [pc, #156]	; (8012c88 <hal_uart1_init+0x168>)
 8012bec:	f7ff fe66 	bl	80128bc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	2107      	movs	r1, #7
 8012bf4:	4824      	ldr	r0, [pc, #144]	; (8012c88 <hal_uart1_init+0x168>)
 8012bf6:	f7ff fe85 	bl	8012904 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012bfe:	2107      	movs	r1, #7
 8012c00:	4821      	ldr	r0, [pc, #132]	; (8012c88 <hal_uart1_init+0x168>)
 8012c02:	f7ff fea3 	bl	801294c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012c06:	2200      	movs	r2, #0
 8012c08:	2107      	movs	r1, #7
 8012c0a:	481f      	ldr	r0, [pc, #124]	; (8012c88 <hal_uart1_init+0x168>)
 8012c0c:	f7ff fec2 	bl	8012994 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012c10:	2200      	movs	r2, #0
 8012c12:	2107      	movs	r1, #7
 8012c14:	481c      	ldr	r0, [pc, #112]	; (8012c88 <hal_uart1_init+0x168>)
 8012c16:	f7ff fee1 	bl	80129dc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 8012c1a:	2107      	movs	r1, #7
 8012c1c:	481a      	ldr	r0, [pc, #104]	; (8012c88 <hal_uart1_init+0x168>)
 8012c1e:	f7ff ff5f 	bl	8012ae0 <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8012c26:	2300      	movs	r3, #0
 8012c28:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8012c32:	230c      	movs	r3, #12
 8012c34:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8012c36:	2300      	movs	r3, #0
 8012c38:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 8012c3e:	f107 030c 	add.w	r3, r7, #12
 8012c42:	4619      	mov	r1, r3
 8012c44:	4811      	ldr	r0, [pc, #68]	; (8012c8c <hal_uart1_init+0x16c>)
 8012c46:	f7f2 fa9f 	bl	8005188 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8012c4a:	4810      	ldr	r0, [pc, #64]	; (8012c8c <hal_uart1_init+0x16c>)
 8012c4c:	f7ff fdb5 	bl	80127ba <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 8012c50:	480e      	ldr	r0, [pc, #56]	; (8012c8c <hal_uart1_init+0x16c>)
 8012c52:	f7ff fd8e 	bl	8012772 <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8012c56:	f7ff fd03 	bl	8012660 <__NVIC_GetPriorityGrouping>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	2105      	movs	r1, #5
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7ff fd53 	bl	801270c <NVIC_EncodePriority>
 8012c66:	4603      	mov	r3, r0
 8012c68:	4619      	mov	r1, r3
 8012c6a:	2025      	movs	r0, #37	; 0x25
 8012c6c:	f7ff fd24 	bl	80126b8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8012c70:	2025      	movs	r0, #37	; 0x25
 8012c72:	f7ff fd03 	bl	801267c <__NVIC_EnableIRQ>
}
 8012c76:	bf00      	nop
 8012c78:	3728      	adds	r7, #40	; 0x28
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	0801471c 	.word	0x0801471c
 8012c84:	08014724 	.word	0x08014724
 8012c88:	40026400 	.word	0x40026400
 8012c8c:	40011000 	.word	0x40011000

08012c90 <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	4603      	mov	r3, r0
 8012c98:	6039      	str	r1, [r7, #0]
 8012c9a:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 8012c9c:	79fb      	ldrb	r3, [r7, #7]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d102      	bne.n	8012ca8 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 8012ca2:	6838      	ldr	r0, [r7, #0]
 8012ca4:	f7ff ff3c 	bl	8012b20 <hal_uart1_init>
}
 8012ca8:	bf00      	nop
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
 8012cbc:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 8012cbe:	7bfb      	ldrb	r3, [r7, #15]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d11e      	bne.n	8012d02 <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8012cc4:	4810      	ldr	r0, [pc, #64]	; (8012d08 <hal_uart_transfer+0x58>)
 8012cc6:	f7ff fd64 	bl	8012792 <LL_USART_IsEnabled>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d017      	beq.n	8012d00 <hal_uart_transfer+0x50>

        while(size > 0) {
 8012cd0:	e012      	b.n	8012cf8 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 8012cd2:	bf00      	nop
 8012cd4:	480c      	ldr	r0, [pc, #48]	; (8012d08 <hal_uart_transfer+0x58>)
 8012cd6:	f7ff fd99 	bl	801280c <LL_USART_IsActiveFlag_TXE>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d0f9      	beq.n	8012cd4 <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	4808      	ldr	r0, [pc, #32]	; (8012d08 <hal_uart_transfer+0x58>)
 8012ce8:	f7ff fdb5 	bl	8012856 <LL_USART_TransmitData8>
            buf++;
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	60bb      	str	r3, [r7, #8]
            size--;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1e9      	bne.n	8012cd2 <hal_uart_transfer+0x22>
 8012cfe:	e000      	b.n	8012d02 <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8012d00:	bf00      	nop
        }
    }
}
 8012d02:	3710      	adds	r7, #16
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	40011000 	.word	0x40011000

08012d0c <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 8012d0c:	b590      	push	{r4, r7, lr}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 8012d12:	2300      	movs	r3, #0
 8012d14:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8012d16:	4813      	ldr	r0, [pc, #76]	; (8012d64 <USART1_IRQHandler+0x58>)
 8012d18:	f7ff fd65 	bl	80127e6 <LL_USART_IsActiveFlag_IDLE>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d01c      	beq.n	8012d5c <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 8012d22:	4810      	ldr	r0, [pc, #64]	; (8012d64 <USART1_IRQHandler+0x58>)
 8012d24:	f7ff fd85 	bl	8012832 <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 8012d28:	4b0f      	ldr	r3, [pc, #60]	; (8012d68 <USART1_IRQHandler+0x5c>)
 8012d2a:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8012d2e:	2102      	movs	r1, #2
 8012d30:	480e      	ldr	r0, [pc, #56]	; (8012d6c <USART1_IRQHandler+0x60>)
 8012d32:	f7ff fe9b 	bl	8012a6c <LL_DMA_GetDataLength>
 8012d36:	4603      	mov	r3, r0
 8012d38:	4423      	add	r3, r4
 8012d3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	bfb8      	it	lt
 8012d42:	425b      	neglt	r3, r3
 8012d44:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 8012d46:	4b08      	ldr	r3, [pc, #32]	; (8012d68 <USART1_IRQHandler+0x5c>)
 8012d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	4413      	add	r3, r2
 8012d50:	2bff      	cmp	r3, #255	; 0xff
 8012d52:	d903      	bls.n	8012d5c <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 8012d54:	4b04      	ldr	r3, [pc, #16]	; (8012d68 <USART1_IRQHandler+0x5c>)
 8012d56:	2201      	movs	r2, #1
 8012d58:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 8012d5c:	bf00      	nop
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd90      	pop	{r4, r7, pc}
 8012d64:	40011000 	.word	0x40011000
 8012d68:	200049f8 	.word	0x200049f8
 8012d6c:	40026400 	.word	0x40026400

08012d70 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8012d70:	b480      	push	{r7}
 8012d72:	af00      	add	r7, sp, #0

}
 8012d74:	bf00      	nop
 8012d76:	46bd      	mov	sp, r7
 8012d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7c:	4770      	bx	lr

08012d7e <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8012d7e:	b480      	push	{r7}
 8012d80:	af00      	add	r7, sp, #0

}
 8012d82:	bf00      	nop
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <refresh_rtc_timercb>:

static u8g2_t u8g2;
static ds3231_time_t ds3231_time;
static TimerHandle_t rtc_timer;

static void refresh_rtc_timercb (TimerHandle_t xTimer) {
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
	ds3231_get_time(&ds3231_time);
 8012d94:	4803      	ldr	r0, [pc, #12]	; (8012da4 <refresh_rtc_timercb+0x18>)
 8012d96:	f7ed fc5d 	bl	8000654 <ds3231_get_time>
}
 8012d9a:	bf00      	nop
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	20005c44 	.word	0x20005c44

08012da8 <displayThread>:

void displayThread(void* param) {
 8012da8:	b590      	push	{r4, r7, lr}
 8012daa:	b085      	sub	sp, #20
 8012dac:	af02      	add	r7, sp, #8
 8012dae:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8012db0:	4b25      	ldr	r3, [pc, #148]	; (8012e48 <displayThread+0xa0>)
 8012db2:	4a26      	ldr	r2, [pc, #152]	; (8012e4c <displayThread+0xa4>)
 8012db4:	4926      	ldr	r1, [pc, #152]	; (8012e50 <displayThread+0xa8>)
 8012db6:	4827      	ldr	r0, [pc, #156]	; (8012e54 <displayThread+0xac>)
 8012db8:	f7fa ff38 	bl	800dc2c <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2);
 8012dbc:	4825      	ldr	r0, [pc, #148]	; (8012e54 <displayThread+0xac>)
 8012dbe:	f7fb fd71 	bl	800e8a4 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	4823      	ldr	r0, [pc, #140]	; (8012e54 <displayThread+0xac>)
 8012dc6:	f7fb fd7c 	bl	800e8c2 <u8x8_SetPowerSave>

	ds3231_register_driver(&i2c1drv);
 8012dca:	4823      	ldr	r0, [pc, #140]	; (8012e58 <displayThread+0xb0>)
 8012dcc:	f7ed fc32 	bl	8000634 <ds3231_register_driver>

	rtc_timer = xTimerCreate("rtc",
 8012dd0:	4b22      	ldr	r3, [pc, #136]	; (8012e5c <displayThread+0xb4>)
 8012dd2:	9300      	str	r3, [sp, #0]
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012ddc:	4820      	ldr	r0, [pc, #128]	; (8012e60 <displayThread+0xb8>)
 8012dde:	f7f8 fc8d 	bl	800b6fc <xTimerCreate>
 8012de2:	4603      	mov	r3, r0
 8012de4:	4a1f      	ldr	r2, [pc, #124]	; (8012e64 <displayThread+0xbc>)
 8012de6:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(RTC_TIMER_PERIOD),
							pdTRUE,
							(void*)0,
							refresh_rtc_timercb);

	if(rtc_timer == NULL) {
 8012de8:	4b1e      	ldr	r3, [pc, #120]	; (8012e64 <displayThread+0xbc>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d103      	bne.n	8012df8 <displayThread+0x50>
		hal_cli_printf("rtc timer create failed");
 8012df0:	481d      	ldr	r0, [pc, #116]	; (8012e68 <displayThread+0xc0>)
 8012df2:	f7fc f87b 	bl	800eeec <hal_cli_printf>
		return;
 8012df6:	e024      	b.n	8012e42 <displayThread+0x9a>
	} else {
		if(xTimerStart(rtc_timer, 0) != pdPASS) {
 8012df8:	4b1a      	ldr	r3, [pc, #104]	; (8012e64 <displayThread+0xbc>)
 8012dfa:	681c      	ldr	r4, [r3, #0]
 8012dfc:	f7f7 fd34 	bl	800a868 <xTaskGetTickCount>
 8012e00:	4602      	mov	r2, r0
 8012e02:	2300      	movs	r3, #0
 8012e04:	9300      	str	r3, [sp, #0]
 8012e06:	2300      	movs	r3, #0
 8012e08:	2101      	movs	r1, #1
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f7f8 fcd2 	bl	800b7b4 <xTimerGenericCommand>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d003      	beq.n	8012e1e <displayThread+0x76>
			hal_cli_printf("rtc timer start failed");
 8012e16:	4815      	ldr	r0, [pc, #84]	; (8012e6c <displayThread+0xc4>)
 8012e18:	f7fc f868 	bl	800eeec <hal_cli_printf>
			return;
 8012e1c:	e011      	b.n	8012e42 <displayThread+0x9a>
		}
	}


	while(1) {
	    u8g2_FirstPage(&u8g2);
 8012e1e:	480d      	ldr	r0, [pc, #52]	; (8012e54 <displayThread+0xac>)
 8012e20:	f7fa fee0 	bl	800dbe4 <u8g2_FirstPage>
	    icon_draw_play(&u8g2, 0, 0);
 8012e24:	2200      	movs	r2, #0
 8012e26:	2100      	movs	r1, #0
 8012e28:	480a      	ldr	r0, [pc, #40]	; (8012e54 <displayThread+0xac>)
 8012e2a:	f7ed fcaf 	bl	800078c <icon_draw_play>
	    icon_draw_pause(&u8g2, 120, 0);
 8012e2e:	2200      	movs	r2, #0
 8012e30:	2178      	movs	r1, #120	; 0x78
 8012e32:	4808      	ldr	r0, [pc, #32]	; (8012e54 <displayThread+0xac>)
 8012e34:	f7ed fcce 	bl	80007d4 <icon_draw_pause>

#if 0
	    u8g2_SetFont(&u8g2, u8g2_font_6x13B_tf);
	    u8g2_DrawStr(&u8g2, 1, 14, "hello world!");
#endif
		vTaskDelay(1000);
 8012e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012e3c:	f7f7 fbb2 	bl	800a5a4 <vTaskDelay>
	    u8g2_FirstPage(&u8g2);
 8012e40:	e7ed      	b.n	8012e1e <displayThread+0x76>
	}
}
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd90      	pop	{r4, r7, pc}
 8012e48:	08000859 	.word	0x08000859
 8012e4c:	08000979 	.word	0x08000979
 8012e50:	08014650 	.word	0x08014650
 8012e54:	20005bbc 	.word	0x20005bbc
 8012e58:	20005984 	.word	0x20005984
 8012e5c:	08012d8d 	.word	0x08012d8d
 8012e60:	08014108 	.word	0x08014108
 8012e64:	20005c4c 	.word	0x20005c4c
 8012e68:	0801410c 	.word	0x0801410c
 8012e6c:	08014124 	.word	0x08014124

08012e70 <LL_TIM_ClearFlag_UPDATE>:
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f06f 0201 	mvn.w	r2, #1
 8012e7e:	611a      	str	r2, [r3, #16]
}
 8012e80:	bf00      	nop
 8012e82:	370c      	adds	r7, #12
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr

08012e8c <mp3_feed_notify_timcb>:

static uint8_t convert_volume_level(VolumeLevel vol);

#if 1
/* sd 카드 api 내부에 있는 hal_delay때문에 ISR 내부에서는 사용못함 */
static void mp3_feed_notify_timcb(void* context) {
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012e94:	2300      	movs	r3, #0
 8012e96:	60fb      	str	r3, [r7, #12]
	LL_TIM_ClearFlag_UPDATE(TIM4);
 8012e98:	480f      	ldr	r0, [pc, #60]	; (8012ed8 <mp3_feed_notify_timcb+0x4c>)
 8012e9a:	f7ff ffe9 	bl	8012e70 <LL_TIM_ClearFlag_UPDATE>
	vTaskNotifyGiveFromISR(mp3_taskhandle, &xHigherPriorityTaskWoken);
 8012e9e:	4b0f      	ldr	r3, [pc, #60]	; (8012edc <mp3_feed_notify_timcb+0x50>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f107 020c 	add.w	r2, r7, #12
 8012ea6:	2100      	movs	r1, #0
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7f8 fac1 	bl	800b430 <vTaskGenericNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d00a      	beq.n	8012eca <mp3_feed_notify_timcb+0x3e>
 8012eb4:	f7fa f88e 	bl	800cfd4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8012eb8:	4b09      	ldr	r3, [pc, #36]	; (8012ee0 <mp3_feed_notify_timcb+0x54>)
 8012eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ebe:	601a      	str	r2, [r3, #0]
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	f3bf 8f6f 	isb	sy
}
 8012ec8:	e001      	b.n	8012ece <mp3_feed_notify_timcb+0x42>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8012eca:	f7fa f867 	bl	800cf9c <SEGGER_SYSVIEW_RecordExitISR>
}
 8012ece:	bf00      	nop
 8012ed0:	3710      	adds	r7, #16
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	40000800 	.word	0x40000800
 8012edc:	20005c54 	.word	0x20005c54
 8012ee0:	e000ed04 	.word	0xe000ed04

08012ee4 <volume_control_timercb>:

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
#endif

static void volume_control_timercb(TimerHandle_t xTimer) {
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
	uint32_t potentiometer = 0;
 8012eec:	2300      	movs	r3, #0
 8012eee:	60bb      	str	r3, [r7, #8]
	uint8_t volume = 0xFF;
 8012ef0:	23ff      	movs	r3, #255	; 0xff
 8012ef2:	73fb      	strb	r3, [r7, #15]

	hal_adc_getdata(1, &potentiometer);
 8012ef4:	f107 0308 	add.w	r3, r7, #8
 8012ef8:	4619      	mov	r1, r3
 8012efa:	2001      	movs	r0, #1
 8012efc:	f7fb fe6a 	bl	800ebd4 <hal_adc_getdata>
	potentiometer >>= 9; // 12bit adc resolution. only refer to msb 3bit to change the volume
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	0a5b      	lsrs	r3, r3, #9
 8012f04:	60bb      	str	r3, [r7, #8]

	if(prev_volume != potentiometer) {
 8012f06:	4b11      	ldr	r3, [pc, #68]	; (8012f4c <volume_control_timercb+0x68>)
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d00c      	beq.n	8012f2c <volume_control_timercb+0x48>
		volume = convert_volume_level(potentiometer);
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	4618      	mov	r0, r3
 8012f18:	f000 f81c 	bl	8012f54 <convert_volume_level>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	73fb      	strb	r3, [r7, #15]
		VS1053_SetVolume(volume, volume);
 8012f20:	7bfa      	ldrb	r2, [r7, #15]
 8012f22:	7bfb      	ldrb	r3, [r7, #15]
 8012f24:	4611      	mov	r1, r2
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7ed fea2 	bl	8000c70 <VS1053_SetVolume>
	}

	prev_volume = potentiometer;
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	b2da      	uxtb	r2, r3
 8012f30:	4b06      	ldr	r3, [pc, #24]	; (8012f4c <volume_control_timercb+0x68>)
 8012f32:	701a      	strb	r2, [r3, #0]

	hal_cli_printf("%d", VS1053_GetDecodeTime());
 8012f34:	f7ed ff33 	bl	8000d9e <VS1053_GetDecodeTime>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	4804      	ldr	r0, [pc, #16]	; (8012f50 <volume_control_timercb+0x6c>)
 8012f3e:	f7fb ffd5 	bl	800eeec <hal_cli_printf>
}
 8012f42:	bf00      	nop
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	20005c58 	.word	0x20005c58
 8012f50:	0801413c 	.word	0x0801413c

08012f54 <convert_volume_level>:

static uint8_t convert_volume_level(VolumeLevel vol) {
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch(vol) {
 8012f5e:	79fb      	ldrb	r3, [r7, #7]
 8012f60:	2b07      	cmp	r3, #7
 8012f62:	d82b      	bhi.n	8012fbc <convert_volume_level+0x68>
 8012f64:	a201      	add	r2, pc, #4	; (adr r2, 8012f6c <convert_volume_level+0x18>)
 8012f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f6a:	bf00      	nop
 8012f6c:	08012fb7 	.word	0x08012fb7
 8012f70:	08012f8d 	.word	0x08012f8d
 8012f74:	08012f93 	.word	0x08012f93
 8012f78:	08012f99 	.word	0x08012f99
 8012f7c:	08012f9f 	.word	0x08012f9f
 8012f80:	08012fa5 	.word	0x08012fa5
 8012f84:	08012fab 	.word	0x08012fab
 8012f88:	08012fb1 	.word	0x08012fb1
	case VOLUME_LEVEL_1:
		value = 0x0C;
 8012f8c:	230c      	movs	r3, #12
 8012f8e:	73fb      	strb	r3, [r7, #15]
		break;
 8012f90:	e01a      	b.n	8012fc8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_2:
		value = 0x0A;
 8012f92:	230a      	movs	r3, #10
 8012f94:	73fb      	strb	r3, [r7, #15]
		break;
 8012f96:	e017      	b.n	8012fc8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_3:
		value = 0x08;
 8012f98:	2308      	movs	r3, #8
 8012f9a:	73fb      	strb	r3, [r7, #15]
		break;
 8012f9c:	e014      	b.n	8012fc8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_4:
		value = 0x06;
 8012f9e:	2306      	movs	r3, #6
 8012fa0:	73fb      	strb	r3, [r7, #15]
		break;
 8012fa2:	e011      	b.n	8012fc8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_5:
		value = 0x04;
 8012fa4:	2304      	movs	r3, #4
 8012fa6:	73fb      	strb	r3, [r7, #15]
		break;
 8012fa8:	e00e      	b.n	8012fc8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_6:
		value = 0x02;
 8012faa:	2302      	movs	r3, #2
 8012fac:	73fb      	strb	r3, [r7, #15]
		break;
 8012fae:	e00b      	b.n	8012fc8 <convert_volume_level+0x74>
	case VOLUME_LEVEL_7:
		value = 0x00;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	73fb      	strb	r3, [r7, #15]
		break;
 8012fb4:	e008      	b.n	8012fc8 <convert_volume_level+0x74>
	case VOLUME_OFF:
		value = 0xFF;
 8012fb6:	23ff      	movs	r3, #255	; 0xff
 8012fb8:	73fb      	strb	r3, [r7, #15]
		break;
 8012fba:	e005      	b.n	8012fc8 <convert_volume_level+0x74>
	default:
		value = 0xFF;
 8012fbc:	23ff      	movs	r3, #255	; 0xff
 8012fbe:	73fb      	strb	r3, [r7, #15]
		hal_cli_printf("volume level argument error");
 8012fc0:	4804      	ldr	r0, [pc, #16]	; (8012fd4 <convert_volume_level+0x80>)
 8012fc2:	f7fb ff93 	bl	800eeec <hal_cli_printf>
		break;
 8012fc6:	bf00      	nop
	}

	return value;
 8012fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3710      	adds	r7, #16
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	08014140 	.word	0x08014140

08012fd8 <mp3Thread>:



void mp3Thread(void* param) {
 8012fd8:	b590      	push	{r4, r7, lr}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af02      	add	r7, sp, #8
 8012fde:	6078      	str	r0, [r7, #4]
	mp3_taskhandle = xTaskGetCurrentTaskHandle();
 8012fe0:	f7f8 f800 	bl	800afe4 <xTaskGetCurrentTaskHandle>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	4a25      	ldr	r2, [pc, #148]	; (801307c <mp3Thread+0xa4>)
 8012fe8:	6013      	str	r3, [r2, #0]
	//mp3_queuehandle = xQueueCreate()

	MP3_Init();
 8012fea:	f000 f857 	bl	801309c <MP3_Init>
	MP3_Play("/mp3/Mercy.mp3");
 8012fee:	4824      	ldr	r0, [pc, #144]	; (8013080 <mp3Thread+0xa8>)
 8012ff0:	f000 f872 	bl	80130d8 <MP3_Play>

	vs1053_volume_timer = xTimerCreate(
 8012ff4:	4b23      	ldr	r3, [pc, #140]	; (8013084 <mp3Thread+0xac>)
 8012ff6:	9300      	str	r3, [sp, #0]
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013000:	4821      	ldr	r0, [pc, #132]	; (8013088 <mp3Thread+0xb0>)
 8013002:	f7f8 fb7b 	bl	800b6fc <xTimerCreate>
 8013006:	4603      	mov	r3, r0
 8013008:	4a20      	ldr	r2, [pc, #128]	; (801308c <mp3Thread+0xb4>)
 801300a:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(VS1053_VOLUME_PERIOD),
							pdTRUE,
							(void*)0,
							volume_control_timercb);

	if(!vs1053_volume_timer) {
 801300c:	4b1f      	ldr	r3, [pc, #124]	; (801308c <mp3Thread+0xb4>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d103      	bne.n	801301c <mp3Thread+0x44>
		hal_cli_printf("mp3 volume timer create failed");
 8013014:	481e      	ldr	r0, [pc, #120]	; (8013090 <mp3Thread+0xb8>)
 8013016:	f7fb ff69 	bl	800eeec <hal_cli_printf>
		return;
 801301a:	e02c      	b.n	8013076 <mp3Thread+0x9e>
	} else {
		if(xTimerStart(vs1053_volume_timer, 0) != pdPASS) {
 801301c:	4b1b      	ldr	r3, [pc, #108]	; (801308c <mp3Thread+0xb4>)
 801301e:	681c      	ldr	r4, [r3, #0]
 8013020:	f7f7 fc22 	bl	800a868 <xTaskGetTickCount>
 8013024:	4602      	mov	r2, r0
 8013026:	2300      	movs	r3, #0
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	2300      	movs	r3, #0
 801302c:	2101      	movs	r1, #1
 801302e:	4620      	mov	r0, r4
 8013030:	f7f8 fbc0 	bl	800b7b4 <xTimerGenericCommand>
 8013034:	4603      	mov	r3, r0
 8013036:	2b01      	cmp	r3, #1
 8013038:	d003      	beq.n	8013042 <mp3Thread+0x6a>
			hal_cli_printf("mp3 volume timer start failed");
 801303a:	4816      	ldr	r0, [pc, #88]	; (8013094 <mp3Thread+0xbc>)
 801303c:	f7fb ff56 	bl	800eeec <hal_cli_printf>
			return;
 8013040:	e019      	b.n	8013076 <mp3Thread+0x9e>
		}
	}

	hal_tim_add_int_callback(4, mp3_feed_notify_timcb, NULL);
 8013042:	2200      	movs	r2, #0
 8013044:	4914      	ldr	r1, [pc, #80]	; (8013098 <mp3Thread+0xc0>)
 8013046:	2004      	movs	r0, #4
 8013048:	f7ff fa9c 	bl	8012584 <hal_tim_add_int_callback>
	hal_tim_start_it(4);
 801304c:	2004      	movs	r0, #4
 801304e:	f7ff fa33 	bl	80124b8 <hal_tim_start_it>

	while(1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8013052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013056:	2101      	movs	r1, #1
 8013058:	2000      	movs	r0, #0
 801305a:	f7f8 f977 	bl	800b34c <ulTaskGenericNotifyTake>
		while(!VS1053_IsBusy()) {
 801305e:	e001      	b.n	8013064 <mp3Thread+0x8c>
			MP3_Feeder();
 8013060:	f000 f8c2 	bl	80131e8 <MP3_Feeder>
		while(!VS1053_IsBusy()) {
 8013064:	f7ed fef0 	bl	8000e48 <VS1053_IsBusy>
 8013068:	4603      	mov	r3, r0
 801306a:	f083 0301 	eor.w	r3, r3, #1
 801306e:	b2db      	uxtb	r3, r3
 8013070:	2b00      	cmp	r3, #0
 8013072:	d1f5      	bne.n	8013060 <mp3Thread+0x88>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8013074:	e7ed      	b.n	8013052 <mp3Thread+0x7a>
		}
	}
}
 8013076:	370c      	adds	r7, #12
 8013078:	46bd      	mov	sp, r7
 801307a:	bd90      	pop	{r4, r7, pc}
 801307c:	20005c54 	.word	0x20005c54
 8013080:	0801415c 	.word	0x0801415c
 8013084:	08012ee5 	.word	0x08012ee5
 8013088:	0801416c 	.word	0x0801416c
 801308c:	20005c50 	.word	0x20005c50
 8013090:	08014178 	.word	0x08014178
 8013094:	08014198 	.word	0x08014198
 8013098:	08012e8d 	.word	0x08012e8d

0801309c <MP3_Init>:
FATFS fs;
FIL mp3File;

/* Initialize VS1053 & Open a file */
bool MP3_Init()
{
 801309c:	b580      	push	{r7, lr}
 801309e:	af00      	add	r7, sp, #0
	/* Initialize VS1053 */
    if(!VS1053_Init()) return false;
 80130a0:	f7ed fd1c 	bl	8000adc <VS1053_Init>
 80130a4:	4603      	mov	r3, r0
 80130a6:	f083 0301 	eor.w	r3, r3, #1
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d001      	beq.n	80130b4 <MP3_Init+0x18>
 80130b0:	2300      	movs	r3, #0
 80130b2:	e00a      	b.n	80130ca <MP3_Init+0x2e>

    /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK) return false;
 80130b4:	2200      	movs	r2, #0
 80130b6:	4906      	ldr	r1, [pc, #24]	; (80130d0 <MP3_Init+0x34>)
 80130b8:	4806      	ldr	r0, [pc, #24]	; (80130d4 <MP3_Init+0x38>)
 80130ba:	f7f4 fc7d 	bl	80079b8 <f_mount>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <MP3_Init+0x2c>
 80130c4:	2300      	movs	r3, #0
 80130c6:	e000      	b.n	80130ca <MP3_Init+0x2e>

    return true;
 80130c8:	2301      	movs	r3, #1
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	080141b8 	.word	0x080141b8
 80130d4:	20005c88 	.word	0x20005c88

080130d8 <MP3_Play>:

bool MP3_Play(const char *filename)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
	if(isPlaying) MP3_Stop();
 80130e0:	4b25      	ldr	r3, [pc, #148]	; (8013178 <MP3_Play+0xa0>)
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d001      	beq.n	80130ec <MP3_Play+0x14>
 80130e8:	f000 f84e 	bl	8013188 <MP3_Stop>

	if(!VS1053_SetMode(0x4800)) return false;	/* SM LINE1 | SM SDINEW */
 80130ec:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80130f0:	f7ed fde1 	bl	8000cb6 <VS1053_SetMode>
 80130f4:	4603      	mov	r3, r0
 80130f6:	f083 0301 	eor.w	r3, r3, #1
 80130fa:	b2db      	uxtb	r3, r3
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <MP3_Play+0x2c>
 8013100:	2300      	movs	r3, #0
 8013102:	e035      	b.n	8013170 <MP3_Play+0x98>
	if(!VS1053_AutoResync()) return false;		/* AutoResync */
 8013104:	f7ed fe05 	bl	8000d12 <VS1053_AutoResync>
 8013108:	4603      	mov	r3, r0
 801310a:	f083 0301 	eor.w	r3, r3, #1
 801310e:	b2db      	uxtb	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d001      	beq.n	8013118 <MP3_Play+0x40>
 8013114:	2300      	movs	r3, #0
 8013116:	e02b      	b.n	8013170 <MP3_Play+0x98>
	if(!VS1053_SetDecodeTime(0)) return false;	/* Set decode time */
 8013118:	2000      	movs	r0, #0
 801311a:	f7ed fe1a 	bl	8000d52 <VS1053_SetDecodeTime>
 801311e:	4603      	mov	r3, r0
 8013120:	f083 0301 	eor.w	r3, r3, #1
 8013124:	b2db      	uxtb	r3, r3
 8013126:	2b00      	cmp	r3, #0
 8013128:	d001      	beq.n	801312e <MP3_Play+0x56>
 801312a:	2300      	movs	r3, #0
 801312c:	e020      	b.n	8013170 <MP3_Play+0x98>
	if(!VS1053_SetVolume( 0x0F, 0x0F )) return false;	/* Small number is louder */
 801312e:	210f      	movs	r1, #15
 8013130:	200f      	movs	r0, #15
 8013132:	f7ed fd9d 	bl	8000c70 <VS1053_SetVolume>
 8013136:	4603      	mov	r3, r0
 8013138:	f083 0301 	eor.w	r3, r3, #1
 801313c:	b2db      	uxtb	r3, r3
 801313e:	2b00      	cmp	r3, #0
 8013140:	d001      	beq.n	8013146 <MP3_Play+0x6e>
 8013142:	2300      	movs	r3, #0
 8013144:	e014      	b.n	8013170 <MP3_Play+0x98>

	/* Open file to read */
	if(f_open(&mp3File, filename, FA_READ) != FR_OK) return false;
 8013146:	2201      	movs	r2, #1
 8013148:	6879      	ldr	r1, [r7, #4]
 801314a:	480c      	ldr	r0, [pc, #48]	; (801317c <MP3_Play+0xa4>)
 801314c:	f7f4 fc7a 	bl	8007a44 <f_open>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d001      	beq.n	801315a <MP3_Play+0x82>
 8013156:	2300      	movs	r3, #0
 8013158:	e00a      	b.n	8013170 <MP3_Play+0x98>

	/* Get the file size */
	mp3FileSize = f_size(&mp3File);
 801315a:	4b08      	ldr	r3, [pc, #32]	; (801317c <MP3_Play+0xa4>)
 801315c:	68db      	ldr	r3, [r3, #12]
 801315e:	4a08      	ldr	r2, [pc, #32]	; (8013180 <MP3_Play+0xa8>)
 8013160:	6013      	str	r3, [r2, #0]

	/* Set flags */
	isFileOpen = true;
 8013162:	4b08      	ldr	r3, [pc, #32]	; (8013184 <MP3_Play+0xac>)
 8013164:	2201      	movs	r2, #1
 8013166:	701a      	strb	r2, [r3, #0]
	isPlaying = true;
 8013168:	4b03      	ldr	r3, [pc, #12]	; (8013178 <MP3_Play+0xa0>)
 801316a:	2201      	movs	r2, #1
 801316c:	701a      	strb	r2, [r3, #0]

    return true;
 801316e:	2301      	movs	r3, #1
}
 8013170:	4618      	mov	r0, r3
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}
 8013178:	20005c86 	.word	0x20005c86
 801317c:	20006cc0 	.word	0x20006cc0
 8013180:	20005c7c 	.word	0x20005c7c
 8013184:	20005c87 	.word	0x20005c87

08013188 <MP3_Stop>:

void MP3_Stop(void)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
	/* Refer to page 49 of VS1053 datasheet */

	uint16_t mode;
	VS1053_SendEndFill(2052);	/* send endfill bytes */
 801318e:	f640 0004 	movw	r0, #2052	; 0x804
 8013192:	f7ed fe1d 	bl	8000dd0 <VS1053_SendEndFill>
	VS1053_SetMode(0x4808);		/* SM LINE1 | SM SDINEW | SM CANCEL */
 8013196:	f644 0008 	movw	r0, #18440	; 0x4808
 801319a:	f7ed fd8c 	bl	8000cb6 <VS1053_SetMode>
	VS1053_SendEndFill(32);		/* send endfill bytes */
 801319e:	2020      	movs	r0, #32
 80131a0:	f7ed fe16 	bl	8000dd0 <VS1053_SendEndFill>
	LL_mDelay(100);
 80131a4:	2064      	movs	r0, #100	; 0x64
 80131a6:	f7f2 f881 	bl	80052ac <LL_mDelay>
	VS1053_GetMode(&mode);		/* get mode value */
 80131aa:	1dbb      	adds	r3, r7, #6
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ed fd9a 	bl	8000ce6 <VS1053_GetMode>
	if((mode & 0x08) != 0x0)	/* if SM CANCEL is not clear, soft reset */
 80131b2:	88fb      	ldrh	r3, [r7, #6]
 80131b4:	f003 0308 	and.w	r3, r3, #8
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d001      	beq.n	80131c0 <MP3_Stop+0x38>
	{
		VS1053_SoftReset();
 80131bc:	f7ed fd42 	bl	8000c44 <VS1053_SoftReset>
	}

	f_close(&mp3File);
 80131c0:	4806      	ldr	r0, [pc, #24]	; (80131dc <MP3_Stop+0x54>)
 80131c2:	f7f5 f8e4 	bl	800838e <f_close>
	isPlaying = false;			/* Stop flag */
 80131c6:	4b06      	ldr	r3, [pc, #24]	; (80131e0 <MP3_Stop+0x58>)
 80131c8:	2200      	movs	r2, #0
 80131ca:	701a      	strb	r2, [r3, #0]
	isFileOpen = false;			/* Close flag */
 80131cc:	4b05      	ldr	r3, [pc, #20]	; (80131e4 <MP3_Stop+0x5c>)
 80131ce:	2200      	movs	r2, #0
 80131d0:	701a      	strb	r2, [r3, #0]
}
 80131d2:	bf00      	nop
 80131d4:	3708      	adds	r7, #8
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	20006cc0 	.word	0x20006cc0
 80131e0:	20005c86 	.word	0x20005c86
 80131e4:	20005c87 	.word	0x20005c87

080131e8 <MP3_Feeder>:
	if(!isPlaying) isPlaying = true;
}

/* Send mp3 buffer to VS1053 */
void MP3_Feeder(void)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	af00      	add	r7, sp, #0
	if(!isPlaying || !isFileOpen) return;
 80131ec:	4b26      	ldr	r3, [pc, #152]	; (8013288 <MP3_Feeder+0xa0>)
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	f083 0301 	eor.w	r3, r3, #1
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d144      	bne.n	8013284 <MP3_Feeder+0x9c>
 80131fa:	4b24      	ldr	r3, [pc, #144]	; (801328c <MP3_Feeder+0xa4>)
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	f083 0301 	eor.w	r3, r3, #1
 8013202:	b2db      	uxtb	r3, r3
 8013204:	2b00      	cmp	r3, #0
 8013206:	d13d      	bne.n	8013284 <MP3_Feeder+0x9c>

	if(mp3FileSize > BUFFER_SIZE)
 8013208:	4b21      	ldr	r3, [pc, #132]	; (8013290 <MP3_Feeder+0xa8>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b20      	cmp	r3, #32
 801320e:	d90e      	bls.n	801322e <MP3_Feeder+0x46>
	{
		/* Fill the buffer */
		f_read(&mp3File, mp3Buffer, BUFFER_SIZE, (void*)&readBytes);
 8013210:	4b20      	ldr	r3, [pc, #128]	; (8013294 <MP3_Feeder+0xac>)
 8013212:	2220      	movs	r2, #32
 8013214:	4920      	ldr	r1, [pc, #128]	; (8013298 <MP3_Feeder+0xb0>)
 8013216:	4821      	ldr	r0, [pc, #132]	; (801329c <MP3_Feeder+0xb4>)
 8013218:	f7f4 fedc 	bl	8007fd4 <f_read>

		/* Tx buffer */
		VS1053_SdiWrite32( mp3Buffer );
 801321c:	481e      	ldr	r0, [pc, #120]	; (8013298 <MP3_Feeder+0xb0>)
 801321e:	f7ed ff0d 	bl	800103c <VS1053_SdiWrite32>

		/* bytes to send */
		mp3FileSize -= BUFFER_SIZE;
 8013222:	4b1b      	ldr	r3, [pc, #108]	; (8013290 <MP3_Feeder+0xa8>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	3b20      	subs	r3, #32
 8013228:	4a19      	ldr	r2, [pc, #100]	; (8013290 <MP3_Feeder+0xa8>)
 801322a:	6013      	str	r3, [r2, #0]
 801322c:	e02b      	b.n	8013286 <MP3_Feeder+0x9e>
	}
	else
	{
		/* Read left bytes */
		f_read(&mp3File, mp3Buffer, mp3FileSize, (void*)&readBytes);
 801322e:	4b18      	ldr	r3, [pc, #96]	; (8013290 <MP3_Feeder+0xa8>)
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	4b18      	ldr	r3, [pc, #96]	; (8013294 <MP3_Feeder+0xac>)
 8013234:	4918      	ldr	r1, [pc, #96]	; (8013298 <MP3_Feeder+0xb0>)
 8013236:	4819      	ldr	r0, [pc, #100]	; (801329c <MP3_Feeder+0xb4>)
 8013238:	f7f4 fecc 	bl	8007fd4 <f_read>

		/* Tx buffer */
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 801323c:	4b18      	ldr	r3, [pc, #96]	; (80132a0 <MP3_Feeder+0xb8>)
 801323e:	2200      	movs	r2, #0
 8013240:	801a      	strh	r2, [r3, #0]
 8013242:	e015      	b.n	8013270 <MP3_Feeder+0x88>
		{
			while(!VS1053_SdiWrite(*(mp3Buffer + cnt)));
 8013244:	bf00      	nop
 8013246:	4b16      	ldr	r3, [pc, #88]	; (80132a0 <MP3_Feeder+0xb8>)
 8013248:	881b      	ldrh	r3, [r3, #0]
 801324a:	461a      	mov	r2, r3
 801324c:	4b12      	ldr	r3, [pc, #72]	; (8013298 <MP3_Feeder+0xb0>)
 801324e:	4413      	add	r3, r2
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	4618      	mov	r0, r3
 8013254:	f7ed fec4 	bl	8000fe0 <VS1053_SdiWrite>
 8013258:	4603      	mov	r3, r0
 801325a:	f083 0301 	eor.w	r3, r3, #1
 801325e:	b2db      	uxtb	r3, r3
 8013260:	2b00      	cmp	r3, #0
 8013262:	d1f0      	bne.n	8013246 <MP3_Feeder+0x5e>
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8013264:	4b0e      	ldr	r3, [pc, #56]	; (80132a0 <MP3_Feeder+0xb8>)
 8013266:	881b      	ldrh	r3, [r3, #0]
 8013268:	3301      	adds	r3, #1
 801326a:	b29a      	uxth	r2, r3
 801326c:	4b0c      	ldr	r3, [pc, #48]	; (80132a0 <MP3_Feeder+0xb8>)
 801326e:	801a      	strh	r2, [r3, #0]
 8013270:	4b0b      	ldr	r3, [pc, #44]	; (80132a0 <MP3_Feeder+0xb8>)
 8013272:	881b      	ldrh	r3, [r3, #0]
 8013274:	461a      	mov	r2, r3
 8013276:	4b06      	ldr	r3, [pc, #24]	; (8013290 <MP3_Feeder+0xa8>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	429a      	cmp	r2, r3
 801327c:	d3e2      	bcc.n	8013244 <MP3_Feeder+0x5c>
		}

		/* Stop when played the whole file */
		MP3_Stop();
 801327e:	f7ff ff83 	bl	8013188 <MP3_Stop>
 8013282:	e000      	b.n	8013286 <MP3_Feeder+0x9e>
	if(!isPlaying || !isFileOpen) return;
 8013284:	bf00      	nop
	}
}
 8013286:	bd80      	pop	{r7, pc}
 8013288:	20005c86 	.word	0x20005c86
 801328c:	20005c87 	.word	0x20005c87
 8013290:	20005c7c 	.word	0x20005c7c
 8013294:	20005c80 	.word	0x20005c80
 8013298:	20005c5c 	.word	0x20005c5c
 801329c:	20006cc0 	.word	0x20006cc0
 80132a0:	20005c84 	.word	0x20005c84

080132a4 <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80132a8:	b672      	cpsid	i
}
 80132aa:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 80132ac:	4801      	ldr	r0, [pc, #4]	; (80132b4 <ErrorHandler+0x10>)
 80132ae:	f7fb fe1d 	bl	800eeec <hal_cli_printf>
  while (1)
 80132b2:	e7fe      	b.n	80132b2 <ErrorHandler+0xe>
 80132b4:	080141bc 	.word	0x080141bc

080132b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80132b8:	480d      	ldr	r0, [pc, #52]	; (80132f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80132ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80132bc:	f7ff f80e 	bl	80122dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80132c0:	480c      	ldr	r0, [pc, #48]	; (80132f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80132c2:	490d      	ldr	r1, [pc, #52]	; (80132f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80132c4:	4a0d      	ldr	r2, [pc, #52]	; (80132fc <LoopForever+0xe>)
  movs r3, #0
 80132c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80132c8:	e002      	b.n	80132d0 <LoopCopyDataInit>

080132ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80132ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80132cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80132ce:	3304      	adds	r3, #4

080132d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80132d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80132d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80132d4:	d3f9      	bcc.n	80132ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80132d6:	4a0a      	ldr	r2, [pc, #40]	; (8013300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80132d8:	4c0a      	ldr	r4, [pc, #40]	; (8013304 <LoopForever+0x16>)
  movs r3, #0
 80132da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80132dc:	e001      	b.n	80132e2 <LoopFillZerobss>

080132de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80132de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80132e0:	3204      	adds	r2, #4

080132e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80132e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80132e4:	d3fb      	bcc.n	80132de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80132e6:	f000 f811 	bl	801330c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80132ea:	f7fd fe13 	bl	8010f14 <main>

080132ee <LoopForever>:

LoopForever:
    b LoopForever
 80132ee:	e7fe      	b.n	80132ee <LoopForever>
  ldr   r0, =_estack
 80132f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80132f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80132f8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80132fc:	08014878 	.word	0x08014878
  ldr r2, =_sbss
 8013300:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8013304:	20007d04 	.word	0x20007d04

08013308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8013308:	e7fe      	b.n	8013308 <ADC_IRQHandler>
	...

0801330c <__libc_init_array>:
 801330c:	b570      	push	{r4, r5, r6, lr}
 801330e:	4d0d      	ldr	r5, [pc, #52]	; (8013344 <__libc_init_array+0x38>)
 8013310:	4c0d      	ldr	r4, [pc, #52]	; (8013348 <__libc_init_array+0x3c>)
 8013312:	1b64      	subs	r4, r4, r5
 8013314:	10a4      	asrs	r4, r4, #2
 8013316:	2600      	movs	r6, #0
 8013318:	42a6      	cmp	r6, r4
 801331a:	d109      	bne.n	8013330 <__libc_init_array+0x24>
 801331c:	4d0b      	ldr	r5, [pc, #44]	; (801334c <__libc_init_array+0x40>)
 801331e:	4c0c      	ldr	r4, [pc, #48]	; (8013350 <__libc_init_array+0x44>)
 8013320:	f000 fccc 	bl	8013cbc <_init>
 8013324:	1b64      	subs	r4, r4, r5
 8013326:	10a4      	asrs	r4, r4, #2
 8013328:	2600      	movs	r6, #0
 801332a:	42a6      	cmp	r6, r4
 801332c:	d105      	bne.n	801333a <__libc_init_array+0x2e>
 801332e:	bd70      	pop	{r4, r5, r6, pc}
 8013330:	f855 3b04 	ldr.w	r3, [r5], #4
 8013334:	4798      	blx	r3
 8013336:	3601      	adds	r6, #1
 8013338:	e7ee      	b.n	8013318 <__libc_init_array+0xc>
 801333a:	f855 3b04 	ldr.w	r3, [r5], #4
 801333e:	4798      	blx	r3
 8013340:	3601      	adds	r6, #1
 8013342:	e7f2      	b.n	801332a <__libc_init_array+0x1e>
 8013344:	08014870 	.word	0x08014870
 8013348:	08014870 	.word	0x08014870
 801334c:	08014870 	.word	0x08014870
 8013350:	08014874 	.word	0x08014874

08013354 <memcmp>:
 8013354:	b510      	push	{r4, lr}
 8013356:	3901      	subs	r1, #1
 8013358:	4402      	add	r2, r0
 801335a:	4290      	cmp	r0, r2
 801335c:	d101      	bne.n	8013362 <memcmp+0xe>
 801335e:	2000      	movs	r0, #0
 8013360:	e005      	b.n	801336e <memcmp+0x1a>
 8013362:	7803      	ldrb	r3, [r0, #0]
 8013364:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013368:	42a3      	cmp	r3, r4
 801336a:	d001      	beq.n	8013370 <memcmp+0x1c>
 801336c:	1b18      	subs	r0, r3, r4
 801336e:	bd10      	pop	{r4, pc}
 8013370:	3001      	adds	r0, #1
 8013372:	e7f2      	b.n	801335a <memcmp+0x6>

08013374 <memcpy>:
 8013374:	440a      	add	r2, r1
 8013376:	4291      	cmp	r1, r2
 8013378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801337c:	d100      	bne.n	8013380 <memcpy+0xc>
 801337e:	4770      	bx	lr
 8013380:	b510      	push	{r4, lr}
 8013382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013386:	f803 4f01 	strb.w	r4, [r3, #1]!
 801338a:	4291      	cmp	r1, r2
 801338c:	d1f9      	bne.n	8013382 <memcpy+0xe>
 801338e:	bd10      	pop	{r4, pc}

08013390 <memset>:
 8013390:	4402      	add	r2, r0
 8013392:	4603      	mov	r3, r0
 8013394:	4293      	cmp	r3, r2
 8013396:	d100      	bne.n	801339a <memset+0xa>
 8013398:	4770      	bx	lr
 801339a:	f803 1b01 	strb.w	r1, [r3], #1
 801339e:	e7f9      	b.n	8013394 <memset+0x4>

080133a0 <siprintf>:
 80133a0:	b40e      	push	{r1, r2, r3}
 80133a2:	b500      	push	{lr}
 80133a4:	b09c      	sub	sp, #112	; 0x70
 80133a6:	ab1d      	add	r3, sp, #116	; 0x74
 80133a8:	9002      	str	r0, [sp, #8]
 80133aa:	9006      	str	r0, [sp, #24]
 80133ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80133b0:	4809      	ldr	r0, [pc, #36]	; (80133d8 <siprintf+0x38>)
 80133b2:	9107      	str	r1, [sp, #28]
 80133b4:	9104      	str	r1, [sp, #16]
 80133b6:	4909      	ldr	r1, [pc, #36]	; (80133dc <siprintf+0x3c>)
 80133b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133bc:	9105      	str	r1, [sp, #20]
 80133be:	6800      	ldr	r0, [r0, #0]
 80133c0:	9301      	str	r3, [sp, #4]
 80133c2:	a902      	add	r1, sp, #8
 80133c4:	f000 f91e 	bl	8013604 <_svfiprintf_r>
 80133c8:	9b02      	ldr	r3, [sp, #8]
 80133ca:	2200      	movs	r2, #0
 80133cc:	701a      	strb	r2, [r3, #0]
 80133ce:	b01c      	add	sp, #112	; 0x70
 80133d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80133d4:	b003      	add	sp, #12
 80133d6:	4770      	bx	lr
 80133d8:	20000018 	.word	0x20000018
 80133dc:	ffff0208 	.word	0xffff0208

080133e0 <_vsiprintf_r>:
 80133e0:	b500      	push	{lr}
 80133e2:	b09b      	sub	sp, #108	; 0x6c
 80133e4:	9100      	str	r1, [sp, #0]
 80133e6:	9104      	str	r1, [sp, #16]
 80133e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80133ec:	9105      	str	r1, [sp, #20]
 80133ee:	9102      	str	r1, [sp, #8]
 80133f0:	4905      	ldr	r1, [pc, #20]	; (8013408 <_vsiprintf_r+0x28>)
 80133f2:	9103      	str	r1, [sp, #12]
 80133f4:	4669      	mov	r1, sp
 80133f6:	f000 f905 	bl	8013604 <_svfiprintf_r>
 80133fa:	9b00      	ldr	r3, [sp, #0]
 80133fc:	2200      	movs	r2, #0
 80133fe:	701a      	strb	r2, [r3, #0]
 8013400:	b01b      	add	sp, #108	; 0x6c
 8013402:	f85d fb04 	ldr.w	pc, [sp], #4
 8013406:	bf00      	nop
 8013408:	ffff0208 	.word	0xffff0208

0801340c <vsiprintf>:
 801340c:	4613      	mov	r3, r2
 801340e:	460a      	mov	r2, r1
 8013410:	4601      	mov	r1, r0
 8013412:	4802      	ldr	r0, [pc, #8]	; (801341c <vsiprintf+0x10>)
 8013414:	6800      	ldr	r0, [r0, #0]
 8013416:	f7ff bfe3 	b.w	80133e0 <_vsiprintf_r>
 801341a:	bf00      	nop
 801341c:	20000018 	.word	0x20000018

08013420 <__retarget_lock_acquire_recursive>:
 8013420:	4770      	bx	lr

08013422 <__retarget_lock_release_recursive>:
 8013422:	4770      	bx	lr

08013424 <sbrk_aligned>:
 8013424:	b570      	push	{r4, r5, r6, lr}
 8013426:	4e0e      	ldr	r6, [pc, #56]	; (8013460 <sbrk_aligned+0x3c>)
 8013428:	460c      	mov	r4, r1
 801342a:	6831      	ldr	r1, [r6, #0]
 801342c:	4605      	mov	r5, r0
 801342e:	b911      	cbnz	r1, 8013436 <sbrk_aligned+0x12>
 8013430:	f000 fb7c 	bl	8013b2c <_sbrk_r>
 8013434:	6030      	str	r0, [r6, #0]
 8013436:	4621      	mov	r1, r4
 8013438:	4628      	mov	r0, r5
 801343a:	f000 fb77 	bl	8013b2c <_sbrk_r>
 801343e:	1c43      	adds	r3, r0, #1
 8013440:	d00a      	beq.n	8013458 <sbrk_aligned+0x34>
 8013442:	1cc4      	adds	r4, r0, #3
 8013444:	f024 0403 	bic.w	r4, r4, #3
 8013448:	42a0      	cmp	r0, r4
 801344a:	d007      	beq.n	801345c <sbrk_aligned+0x38>
 801344c:	1a21      	subs	r1, r4, r0
 801344e:	4628      	mov	r0, r5
 8013450:	f000 fb6c 	bl	8013b2c <_sbrk_r>
 8013454:	3001      	adds	r0, #1
 8013456:	d101      	bne.n	801345c <sbrk_aligned+0x38>
 8013458:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801345c:	4620      	mov	r0, r4
 801345e:	bd70      	pop	{r4, r5, r6, pc}
 8013460:	20007cf8 	.word	0x20007cf8

08013464 <_malloc_r>:
 8013464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013468:	1ccd      	adds	r5, r1, #3
 801346a:	f025 0503 	bic.w	r5, r5, #3
 801346e:	3508      	adds	r5, #8
 8013470:	2d0c      	cmp	r5, #12
 8013472:	bf38      	it	cc
 8013474:	250c      	movcc	r5, #12
 8013476:	2d00      	cmp	r5, #0
 8013478:	4607      	mov	r7, r0
 801347a:	db01      	blt.n	8013480 <_malloc_r+0x1c>
 801347c:	42a9      	cmp	r1, r5
 801347e:	d905      	bls.n	801348c <_malloc_r+0x28>
 8013480:	230c      	movs	r3, #12
 8013482:	603b      	str	r3, [r7, #0]
 8013484:	2600      	movs	r6, #0
 8013486:	4630      	mov	r0, r6
 8013488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801348c:	4e2e      	ldr	r6, [pc, #184]	; (8013548 <_malloc_r+0xe4>)
 801348e:	f000 fb77 	bl	8013b80 <__malloc_lock>
 8013492:	6833      	ldr	r3, [r6, #0]
 8013494:	461c      	mov	r4, r3
 8013496:	bb34      	cbnz	r4, 80134e6 <_malloc_r+0x82>
 8013498:	4629      	mov	r1, r5
 801349a:	4638      	mov	r0, r7
 801349c:	f7ff ffc2 	bl	8013424 <sbrk_aligned>
 80134a0:	1c43      	adds	r3, r0, #1
 80134a2:	4604      	mov	r4, r0
 80134a4:	d14d      	bne.n	8013542 <_malloc_r+0xde>
 80134a6:	6834      	ldr	r4, [r6, #0]
 80134a8:	4626      	mov	r6, r4
 80134aa:	2e00      	cmp	r6, #0
 80134ac:	d140      	bne.n	8013530 <_malloc_r+0xcc>
 80134ae:	6823      	ldr	r3, [r4, #0]
 80134b0:	4631      	mov	r1, r6
 80134b2:	4638      	mov	r0, r7
 80134b4:	eb04 0803 	add.w	r8, r4, r3
 80134b8:	f000 fb38 	bl	8013b2c <_sbrk_r>
 80134bc:	4580      	cmp	r8, r0
 80134be:	d13a      	bne.n	8013536 <_malloc_r+0xd2>
 80134c0:	6821      	ldr	r1, [r4, #0]
 80134c2:	3503      	adds	r5, #3
 80134c4:	1a6d      	subs	r5, r5, r1
 80134c6:	f025 0503 	bic.w	r5, r5, #3
 80134ca:	3508      	adds	r5, #8
 80134cc:	2d0c      	cmp	r5, #12
 80134ce:	bf38      	it	cc
 80134d0:	250c      	movcc	r5, #12
 80134d2:	4629      	mov	r1, r5
 80134d4:	4638      	mov	r0, r7
 80134d6:	f7ff ffa5 	bl	8013424 <sbrk_aligned>
 80134da:	3001      	adds	r0, #1
 80134dc:	d02b      	beq.n	8013536 <_malloc_r+0xd2>
 80134de:	6823      	ldr	r3, [r4, #0]
 80134e0:	442b      	add	r3, r5
 80134e2:	6023      	str	r3, [r4, #0]
 80134e4:	e00e      	b.n	8013504 <_malloc_r+0xa0>
 80134e6:	6822      	ldr	r2, [r4, #0]
 80134e8:	1b52      	subs	r2, r2, r5
 80134ea:	d41e      	bmi.n	801352a <_malloc_r+0xc6>
 80134ec:	2a0b      	cmp	r2, #11
 80134ee:	d916      	bls.n	801351e <_malloc_r+0xba>
 80134f0:	1961      	adds	r1, r4, r5
 80134f2:	42a3      	cmp	r3, r4
 80134f4:	6025      	str	r5, [r4, #0]
 80134f6:	bf18      	it	ne
 80134f8:	6059      	strne	r1, [r3, #4]
 80134fa:	6863      	ldr	r3, [r4, #4]
 80134fc:	bf08      	it	eq
 80134fe:	6031      	streq	r1, [r6, #0]
 8013500:	5162      	str	r2, [r4, r5]
 8013502:	604b      	str	r3, [r1, #4]
 8013504:	4638      	mov	r0, r7
 8013506:	f104 060b 	add.w	r6, r4, #11
 801350a:	f000 fb3f 	bl	8013b8c <__malloc_unlock>
 801350e:	f026 0607 	bic.w	r6, r6, #7
 8013512:	1d23      	adds	r3, r4, #4
 8013514:	1af2      	subs	r2, r6, r3
 8013516:	d0b6      	beq.n	8013486 <_malloc_r+0x22>
 8013518:	1b9b      	subs	r3, r3, r6
 801351a:	50a3      	str	r3, [r4, r2]
 801351c:	e7b3      	b.n	8013486 <_malloc_r+0x22>
 801351e:	6862      	ldr	r2, [r4, #4]
 8013520:	42a3      	cmp	r3, r4
 8013522:	bf0c      	ite	eq
 8013524:	6032      	streq	r2, [r6, #0]
 8013526:	605a      	strne	r2, [r3, #4]
 8013528:	e7ec      	b.n	8013504 <_malloc_r+0xa0>
 801352a:	4623      	mov	r3, r4
 801352c:	6864      	ldr	r4, [r4, #4]
 801352e:	e7b2      	b.n	8013496 <_malloc_r+0x32>
 8013530:	4634      	mov	r4, r6
 8013532:	6876      	ldr	r6, [r6, #4]
 8013534:	e7b9      	b.n	80134aa <_malloc_r+0x46>
 8013536:	230c      	movs	r3, #12
 8013538:	603b      	str	r3, [r7, #0]
 801353a:	4638      	mov	r0, r7
 801353c:	f000 fb26 	bl	8013b8c <__malloc_unlock>
 8013540:	e7a1      	b.n	8013486 <_malloc_r+0x22>
 8013542:	6025      	str	r5, [r4, #0]
 8013544:	e7de      	b.n	8013504 <_malloc_r+0xa0>
 8013546:	bf00      	nop
 8013548:	20007cf4 	.word	0x20007cf4

0801354c <__ssputs_r>:
 801354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013550:	688e      	ldr	r6, [r1, #8]
 8013552:	429e      	cmp	r6, r3
 8013554:	4682      	mov	sl, r0
 8013556:	460c      	mov	r4, r1
 8013558:	4690      	mov	r8, r2
 801355a:	461f      	mov	r7, r3
 801355c:	d838      	bhi.n	80135d0 <__ssputs_r+0x84>
 801355e:	898a      	ldrh	r2, [r1, #12]
 8013560:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013564:	d032      	beq.n	80135cc <__ssputs_r+0x80>
 8013566:	6825      	ldr	r5, [r4, #0]
 8013568:	6909      	ldr	r1, [r1, #16]
 801356a:	eba5 0901 	sub.w	r9, r5, r1
 801356e:	6965      	ldr	r5, [r4, #20]
 8013570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013578:	3301      	adds	r3, #1
 801357a:	444b      	add	r3, r9
 801357c:	106d      	asrs	r5, r5, #1
 801357e:	429d      	cmp	r5, r3
 8013580:	bf38      	it	cc
 8013582:	461d      	movcc	r5, r3
 8013584:	0553      	lsls	r3, r2, #21
 8013586:	d531      	bpl.n	80135ec <__ssputs_r+0xa0>
 8013588:	4629      	mov	r1, r5
 801358a:	f7ff ff6b 	bl	8013464 <_malloc_r>
 801358e:	4606      	mov	r6, r0
 8013590:	b950      	cbnz	r0, 80135a8 <__ssputs_r+0x5c>
 8013592:	230c      	movs	r3, #12
 8013594:	f8ca 3000 	str.w	r3, [sl]
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801359e:	81a3      	strh	r3, [r4, #12]
 80135a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135a8:	6921      	ldr	r1, [r4, #16]
 80135aa:	464a      	mov	r2, r9
 80135ac:	f7ff fee2 	bl	8013374 <memcpy>
 80135b0:	89a3      	ldrh	r3, [r4, #12]
 80135b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80135b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135ba:	81a3      	strh	r3, [r4, #12]
 80135bc:	6126      	str	r6, [r4, #16]
 80135be:	6165      	str	r5, [r4, #20]
 80135c0:	444e      	add	r6, r9
 80135c2:	eba5 0509 	sub.w	r5, r5, r9
 80135c6:	6026      	str	r6, [r4, #0]
 80135c8:	60a5      	str	r5, [r4, #8]
 80135ca:	463e      	mov	r6, r7
 80135cc:	42be      	cmp	r6, r7
 80135ce:	d900      	bls.n	80135d2 <__ssputs_r+0x86>
 80135d0:	463e      	mov	r6, r7
 80135d2:	6820      	ldr	r0, [r4, #0]
 80135d4:	4632      	mov	r2, r6
 80135d6:	4641      	mov	r1, r8
 80135d8:	f000 fab8 	bl	8013b4c <memmove>
 80135dc:	68a3      	ldr	r3, [r4, #8]
 80135de:	1b9b      	subs	r3, r3, r6
 80135e0:	60a3      	str	r3, [r4, #8]
 80135e2:	6823      	ldr	r3, [r4, #0]
 80135e4:	4433      	add	r3, r6
 80135e6:	6023      	str	r3, [r4, #0]
 80135e8:	2000      	movs	r0, #0
 80135ea:	e7db      	b.n	80135a4 <__ssputs_r+0x58>
 80135ec:	462a      	mov	r2, r5
 80135ee:	f000 fb1f 	bl	8013c30 <_realloc_r>
 80135f2:	4606      	mov	r6, r0
 80135f4:	2800      	cmp	r0, #0
 80135f6:	d1e1      	bne.n	80135bc <__ssputs_r+0x70>
 80135f8:	6921      	ldr	r1, [r4, #16]
 80135fa:	4650      	mov	r0, sl
 80135fc:	f000 facc 	bl	8013b98 <_free_r>
 8013600:	e7c7      	b.n	8013592 <__ssputs_r+0x46>
	...

08013604 <_svfiprintf_r>:
 8013604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013608:	4698      	mov	r8, r3
 801360a:	898b      	ldrh	r3, [r1, #12]
 801360c:	061b      	lsls	r3, r3, #24
 801360e:	b09d      	sub	sp, #116	; 0x74
 8013610:	4607      	mov	r7, r0
 8013612:	460d      	mov	r5, r1
 8013614:	4614      	mov	r4, r2
 8013616:	d50e      	bpl.n	8013636 <_svfiprintf_r+0x32>
 8013618:	690b      	ldr	r3, [r1, #16]
 801361a:	b963      	cbnz	r3, 8013636 <_svfiprintf_r+0x32>
 801361c:	2140      	movs	r1, #64	; 0x40
 801361e:	f7ff ff21 	bl	8013464 <_malloc_r>
 8013622:	6028      	str	r0, [r5, #0]
 8013624:	6128      	str	r0, [r5, #16]
 8013626:	b920      	cbnz	r0, 8013632 <_svfiprintf_r+0x2e>
 8013628:	230c      	movs	r3, #12
 801362a:	603b      	str	r3, [r7, #0]
 801362c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013630:	e0d1      	b.n	80137d6 <_svfiprintf_r+0x1d2>
 8013632:	2340      	movs	r3, #64	; 0x40
 8013634:	616b      	str	r3, [r5, #20]
 8013636:	2300      	movs	r3, #0
 8013638:	9309      	str	r3, [sp, #36]	; 0x24
 801363a:	2320      	movs	r3, #32
 801363c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013640:	f8cd 800c 	str.w	r8, [sp, #12]
 8013644:	2330      	movs	r3, #48	; 0x30
 8013646:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80137f0 <_svfiprintf_r+0x1ec>
 801364a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801364e:	f04f 0901 	mov.w	r9, #1
 8013652:	4623      	mov	r3, r4
 8013654:	469a      	mov	sl, r3
 8013656:	f813 2b01 	ldrb.w	r2, [r3], #1
 801365a:	b10a      	cbz	r2, 8013660 <_svfiprintf_r+0x5c>
 801365c:	2a25      	cmp	r2, #37	; 0x25
 801365e:	d1f9      	bne.n	8013654 <_svfiprintf_r+0x50>
 8013660:	ebba 0b04 	subs.w	fp, sl, r4
 8013664:	d00b      	beq.n	801367e <_svfiprintf_r+0x7a>
 8013666:	465b      	mov	r3, fp
 8013668:	4622      	mov	r2, r4
 801366a:	4629      	mov	r1, r5
 801366c:	4638      	mov	r0, r7
 801366e:	f7ff ff6d 	bl	801354c <__ssputs_r>
 8013672:	3001      	adds	r0, #1
 8013674:	f000 80aa 	beq.w	80137cc <_svfiprintf_r+0x1c8>
 8013678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801367a:	445a      	add	r2, fp
 801367c:	9209      	str	r2, [sp, #36]	; 0x24
 801367e:	f89a 3000 	ldrb.w	r3, [sl]
 8013682:	2b00      	cmp	r3, #0
 8013684:	f000 80a2 	beq.w	80137cc <_svfiprintf_r+0x1c8>
 8013688:	2300      	movs	r3, #0
 801368a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801368e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013692:	f10a 0a01 	add.w	sl, sl, #1
 8013696:	9304      	str	r3, [sp, #16]
 8013698:	9307      	str	r3, [sp, #28]
 801369a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801369e:	931a      	str	r3, [sp, #104]	; 0x68
 80136a0:	4654      	mov	r4, sl
 80136a2:	2205      	movs	r2, #5
 80136a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136a8:	4851      	ldr	r0, [pc, #324]	; (80137f0 <_svfiprintf_r+0x1ec>)
 80136aa:	f7ec fdf1 	bl	8000290 <memchr>
 80136ae:	9a04      	ldr	r2, [sp, #16]
 80136b0:	b9d8      	cbnz	r0, 80136ea <_svfiprintf_r+0xe6>
 80136b2:	06d0      	lsls	r0, r2, #27
 80136b4:	bf44      	itt	mi
 80136b6:	2320      	movmi	r3, #32
 80136b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136bc:	0711      	lsls	r1, r2, #28
 80136be:	bf44      	itt	mi
 80136c0:	232b      	movmi	r3, #43	; 0x2b
 80136c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136c6:	f89a 3000 	ldrb.w	r3, [sl]
 80136ca:	2b2a      	cmp	r3, #42	; 0x2a
 80136cc:	d015      	beq.n	80136fa <_svfiprintf_r+0xf6>
 80136ce:	9a07      	ldr	r2, [sp, #28]
 80136d0:	4654      	mov	r4, sl
 80136d2:	2000      	movs	r0, #0
 80136d4:	f04f 0c0a 	mov.w	ip, #10
 80136d8:	4621      	mov	r1, r4
 80136da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136de:	3b30      	subs	r3, #48	; 0x30
 80136e0:	2b09      	cmp	r3, #9
 80136e2:	d94e      	bls.n	8013782 <_svfiprintf_r+0x17e>
 80136e4:	b1b0      	cbz	r0, 8013714 <_svfiprintf_r+0x110>
 80136e6:	9207      	str	r2, [sp, #28]
 80136e8:	e014      	b.n	8013714 <_svfiprintf_r+0x110>
 80136ea:	eba0 0308 	sub.w	r3, r0, r8
 80136ee:	fa09 f303 	lsl.w	r3, r9, r3
 80136f2:	4313      	orrs	r3, r2
 80136f4:	9304      	str	r3, [sp, #16]
 80136f6:	46a2      	mov	sl, r4
 80136f8:	e7d2      	b.n	80136a0 <_svfiprintf_r+0x9c>
 80136fa:	9b03      	ldr	r3, [sp, #12]
 80136fc:	1d19      	adds	r1, r3, #4
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	9103      	str	r1, [sp, #12]
 8013702:	2b00      	cmp	r3, #0
 8013704:	bfbb      	ittet	lt
 8013706:	425b      	neglt	r3, r3
 8013708:	f042 0202 	orrlt.w	r2, r2, #2
 801370c:	9307      	strge	r3, [sp, #28]
 801370e:	9307      	strlt	r3, [sp, #28]
 8013710:	bfb8      	it	lt
 8013712:	9204      	strlt	r2, [sp, #16]
 8013714:	7823      	ldrb	r3, [r4, #0]
 8013716:	2b2e      	cmp	r3, #46	; 0x2e
 8013718:	d10c      	bne.n	8013734 <_svfiprintf_r+0x130>
 801371a:	7863      	ldrb	r3, [r4, #1]
 801371c:	2b2a      	cmp	r3, #42	; 0x2a
 801371e:	d135      	bne.n	801378c <_svfiprintf_r+0x188>
 8013720:	9b03      	ldr	r3, [sp, #12]
 8013722:	1d1a      	adds	r2, r3, #4
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	9203      	str	r2, [sp, #12]
 8013728:	2b00      	cmp	r3, #0
 801372a:	bfb8      	it	lt
 801372c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013730:	3402      	adds	r4, #2
 8013732:	9305      	str	r3, [sp, #20]
 8013734:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013800 <_svfiprintf_r+0x1fc>
 8013738:	7821      	ldrb	r1, [r4, #0]
 801373a:	2203      	movs	r2, #3
 801373c:	4650      	mov	r0, sl
 801373e:	f7ec fda7 	bl	8000290 <memchr>
 8013742:	b140      	cbz	r0, 8013756 <_svfiprintf_r+0x152>
 8013744:	2340      	movs	r3, #64	; 0x40
 8013746:	eba0 000a 	sub.w	r0, r0, sl
 801374a:	fa03 f000 	lsl.w	r0, r3, r0
 801374e:	9b04      	ldr	r3, [sp, #16]
 8013750:	4303      	orrs	r3, r0
 8013752:	3401      	adds	r4, #1
 8013754:	9304      	str	r3, [sp, #16]
 8013756:	f814 1b01 	ldrb.w	r1, [r4], #1
 801375a:	4826      	ldr	r0, [pc, #152]	; (80137f4 <_svfiprintf_r+0x1f0>)
 801375c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013760:	2206      	movs	r2, #6
 8013762:	f7ec fd95 	bl	8000290 <memchr>
 8013766:	2800      	cmp	r0, #0
 8013768:	d038      	beq.n	80137dc <_svfiprintf_r+0x1d8>
 801376a:	4b23      	ldr	r3, [pc, #140]	; (80137f8 <_svfiprintf_r+0x1f4>)
 801376c:	bb1b      	cbnz	r3, 80137b6 <_svfiprintf_r+0x1b2>
 801376e:	9b03      	ldr	r3, [sp, #12]
 8013770:	3307      	adds	r3, #7
 8013772:	f023 0307 	bic.w	r3, r3, #7
 8013776:	3308      	adds	r3, #8
 8013778:	9303      	str	r3, [sp, #12]
 801377a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801377c:	4433      	add	r3, r6
 801377e:	9309      	str	r3, [sp, #36]	; 0x24
 8013780:	e767      	b.n	8013652 <_svfiprintf_r+0x4e>
 8013782:	fb0c 3202 	mla	r2, ip, r2, r3
 8013786:	460c      	mov	r4, r1
 8013788:	2001      	movs	r0, #1
 801378a:	e7a5      	b.n	80136d8 <_svfiprintf_r+0xd4>
 801378c:	2300      	movs	r3, #0
 801378e:	3401      	adds	r4, #1
 8013790:	9305      	str	r3, [sp, #20]
 8013792:	4619      	mov	r1, r3
 8013794:	f04f 0c0a 	mov.w	ip, #10
 8013798:	4620      	mov	r0, r4
 801379a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801379e:	3a30      	subs	r2, #48	; 0x30
 80137a0:	2a09      	cmp	r2, #9
 80137a2:	d903      	bls.n	80137ac <_svfiprintf_r+0x1a8>
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d0c5      	beq.n	8013734 <_svfiprintf_r+0x130>
 80137a8:	9105      	str	r1, [sp, #20]
 80137aa:	e7c3      	b.n	8013734 <_svfiprintf_r+0x130>
 80137ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80137b0:	4604      	mov	r4, r0
 80137b2:	2301      	movs	r3, #1
 80137b4:	e7f0      	b.n	8013798 <_svfiprintf_r+0x194>
 80137b6:	ab03      	add	r3, sp, #12
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	462a      	mov	r2, r5
 80137bc:	4b0f      	ldr	r3, [pc, #60]	; (80137fc <_svfiprintf_r+0x1f8>)
 80137be:	a904      	add	r1, sp, #16
 80137c0:	4638      	mov	r0, r7
 80137c2:	f3af 8000 	nop.w
 80137c6:	1c42      	adds	r2, r0, #1
 80137c8:	4606      	mov	r6, r0
 80137ca:	d1d6      	bne.n	801377a <_svfiprintf_r+0x176>
 80137cc:	89ab      	ldrh	r3, [r5, #12]
 80137ce:	065b      	lsls	r3, r3, #25
 80137d0:	f53f af2c 	bmi.w	801362c <_svfiprintf_r+0x28>
 80137d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137d6:	b01d      	add	sp, #116	; 0x74
 80137d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137dc:	ab03      	add	r3, sp, #12
 80137de:	9300      	str	r3, [sp, #0]
 80137e0:	462a      	mov	r2, r5
 80137e2:	4b06      	ldr	r3, [pc, #24]	; (80137fc <_svfiprintf_r+0x1f8>)
 80137e4:	a904      	add	r1, sp, #16
 80137e6:	4638      	mov	r0, r7
 80137e8:	f000 f87a 	bl	80138e0 <_printf_i>
 80137ec:	e7eb      	b.n	80137c6 <_svfiprintf_r+0x1c2>
 80137ee:	bf00      	nop
 80137f0:	08014834 	.word	0x08014834
 80137f4:	0801483e 	.word	0x0801483e
 80137f8:	00000000 	.word	0x00000000
 80137fc:	0801354d 	.word	0x0801354d
 8013800:	0801483a 	.word	0x0801483a

08013804 <_printf_common>:
 8013804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013808:	4616      	mov	r6, r2
 801380a:	4699      	mov	r9, r3
 801380c:	688a      	ldr	r2, [r1, #8]
 801380e:	690b      	ldr	r3, [r1, #16]
 8013810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013814:	4293      	cmp	r3, r2
 8013816:	bfb8      	it	lt
 8013818:	4613      	movlt	r3, r2
 801381a:	6033      	str	r3, [r6, #0]
 801381c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013820:	4607      	mov	r7, r0
 8013822:	460c      	mov	r4, r1
 8013824:	b10a      	cbz	r2, 801382a <_printf_common+0x26>
 8013826:	3301      	adds	r3, #1
 8013828:	6033      	str	r3, [r6, #0]
 801382a:	6823      	ldr	r3, [r4, #0]
 801382c:	0699      	lsls	r1, r3, #26
 801382e:	bf42      	ittt	mi
 8013830:	6833      	ldrmi	r3, [r6, #0]
 8013832:	3302      	addmi	r3, #2
 8013834:	6033      	strmi	r3, [r6, #0]
 8013836:	6825      	ldr	r5, [r4, #0]
 8013838:	f015 0506 	ands.w	r5, r5, #6
 801383c:	d106      	bne.n	801384c <_printf_common+0x48>
 801383e:	f104 0a19 	add.w	sl, r4, #25
 8013842:	68e3      	ldr	r3, [r4, #12]
 8013844:	6832      	ldr	r2, [r6, #0]
 8013846:	1a9b      	subs	r3, r3, r2
 8013848:	42ab      	cmp	r3, r5
 801384a:	dc26      	bgt.n	801389a <_printf_common+0x96>
 801384c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013850:	1e13      	subs	r3, r2, #0
 8013852:	6822      	ldr	r2, [r4, #0]
 8013854:	bf18      	it	ne
 8013856:	2301      	movne	r3, #1
 8013858:	0692      	lsls	r2, r2, #26
 801385a:	d42b      	bmi.n	80138b4 <_printf_common+0xb0>
 801385c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013860:	4649      	mov	r1, r9
 8013862:	4638      	mov	r0, r7
 8013864:	47c0      	blx	r8
 8013866:	3001      	adds	r0, #1
 8013868:	d01e      	beq.n	80138a8 <_printf_common+0xa4>
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	68e5      	ldr	r5, [r4, #12]
 801386e:	6832      	ldr	r2, [r6, #0]
 8013870:	f003 0306 	and.w	r3, r3, #6
 8013874:	2b04      	cmp	r3, #4
 8013876:	bf08      	it	eq
 8013878:	1aad      	subeq	r5, r5, r2
 801387a:	68a3      	ldr	r3, [r4, #8]
 801387c:	6922      	ldr	r2, [r4, #16]
 801387e:	bf0c      	ite	eq
 8013880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013884:	2500      	movne	r5, #0
 8013886:	4293      	cmp	r3, r2
 8013888:	bfc4      	itt	gt
 801388a:	1a9b      	subgt	r3, r3, r2
 801388c:	18ed      	addgt	r5, r5, r3
 801388e:	2600      	movs	r6, #0
 8013890:	341a      	adds	r4, #26
 8013892:	42b5      	cmp	r5, r6
 8013894:	d11a      	bne.n	80138cc <_printf_common+0xc8>
 8013896:	2000      	movs	r0, #0
 8013898:	e008      	b.n	80138ac <_printf_common+0xa8>
 801389a:	2301      	movs	r3, #1
 801389c:	4652      	mov	r2, sl
 801389e:	4649      	mov	r1, r9
 80138a0:	4638      	mov	r0, r7
 80138a2:	47c0      	blx	r8
 80138a4:	3001      	adds	r0, #1
 80138a6:	d103      	bne.n	80138b0 <_printf_common+0xac>
 80138a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b0:	3501      	adds	r5, #1
 80138b2:	e7c6      	b.n	8013842 <_printf_common+0x3e>
 80138b4:	18e1      	adds	r1, r4, r3
 80138b6:	1c5a      	adds	r2, r3, #1
 80138b8:	2030      	movs	r0, #48	; 0x30
 80138ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138be:	4422      	add	r2, r4
 80138c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138c8:	3302      	adds	r3, #2
 80138ca:	e7c7      	b.n	801385c <_printf_common+0x58>
 80138cc:	2301      	movs	r3, #1
 80138ce:	4622      	mov	r2, r4
 80138d0:	4649      	mov	r1, r9
 80138d2:	4638      	mov	r0, r7
 80138d4:	47c0      	blx	r8
 80138d6:	3001      	adds	r0, #1
 80138d8:	d0e6      	beq.n	80138a8 <_printf_common+0xa4>
 80138da:	3601      	adds	r6, #1
 80138dc:	e7d9      	b.n	8013892 <_printf_common+0x8e>
	...

080138e0 <_printf_i>:
 80138e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138e4:	7e0f      	ldrb	r7, [r1, #24]
 80138e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80138e8:	2f78      	cmp	r7, #120	; 0x78
 80138ea:	4691      	mov	r9, r2
 80138ec:	4680      	mov	r8, r0
 80138ee:	460c      	mov	r4, r1
 80138f0:	469a      	mov	sl, r3
 80138f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80138f6:	d807      	bhi.n	8013908 <_printf_i+0x28>
 80138f8:	2f62      	cmp	r7, #98	; 0x62
 80138fa:	d80a      	bhi.n	8013912 <_printf_i+0x32>
 80138fc:	2f00      	cmp	r7, #0
 80138fe:	f000 80d8 	beq.w	8013ab2 <_printf_i+0x1d2>
 8013902:	2f58      	cmp	r7, #88	; 0x58
 8013904:	f000 80a3 	beq.w	8013a4e <_printf_i+0x16e>
 8013908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801390c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013910:	e03a      	b.n	8013988 <_printf_i+0xa8>
 8013912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013916:	2b15      	cmp	r3, #21
 8013918:	d8f6      	bhi.n	8013908 <_printf_i+0x28>
 801391a:	a101      	add	r1, pc, #4	; (adr r1, 8013920 <_printf_i+0x40>)
 801391c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013920:	08013979 	.word	0x08013979
 8013924:	0801398d 	.word	0x0801398d
 8013928:	08013909 	.word	0x08013909
 801392c:	08013909 	.word	0x08013909
 8013930:	08013909 	.word	0x08013909
 8013934:	08013909 	.word	0x08013909
 8013938:	0801398d 	.word	0x0801398d
 801393c:	08013909 	.word	0x08013909
 8013940:	08013909 	.word	0x08013909
 8013944:	08013909 	.word	0x08013909
 8013948:	08013909 	.word	0x08013909
 801394c:	08013a99 	.word	0x08013a99
 8013950:	080139bd 	.word	0x080139bd
 8013954:	08013a7b 	.word	0x08013a7b
 8013958:	08013909 	.word	0x08013909
 801395c:	08013909 	.word	0x08013909
 8013960:	08013abb 	.word	0x08013abb
 8013964:	08013909 	.word	0x08013909
 8013968:	080139bd 	.word	0x080139bd
 801396c:	08013909 	.word	0x08013909
 8013970:	08013909 	.word	0x08013909
 8013974:	08013a83 	.word	0x08013a83
 8013978:	682b      	ldr	r3, [r5, #0]
 801397a:	1d1a      	adds	r2, r3, #4
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	602a      	str	r2, [r5, #0]
 8013980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013988:	2301      	movs	r3, #1
 801398a:	e0a3      	b.n	8013ad4 <_printf_i+0x1f4>
 801398c:	6820      	ldr	r0, [r4, #0]
 801398e:	6829      	ldr	r1, [r5, #0]
 8013990:	0606      	lsls	r6, r0, #24
 8013992:	f101 0304 	add.w	r3, r1, #4
 8013996:	d50a      	bpl.n	80139ae <_printf_i+0xce>
 8013998:	680e      	ldr	r6, [r1, #0]
 801399a:	602b      	str	r3, [r5, #0]
 801399c:	2e00      	cmp	r6, #0
 801399e:	da03      	bge.n	80139a8 <_printf_i+0xc8>
 80139a0:	232d      	movs	r3, #45	; 0x2d
 80139a2:	4276      	negs	r6, r6
 80139a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139a8:	485e      	ldr	r0, [pc, #376]	; (8013b24 <_printf_i+0x244>)
 80139aa:	230a      	movs	r3, #10
 80139ac:	e019      	b.n	80139e2 <_printf_i+0x102>
 80139ae:	680e      	ldr	r6, [r1, #0]
 80139b0:	602b      	str	r3, [r5, #0]
 80139b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80139b6:	bf18      	it	ne
 80139b8:	b236      	sxthne	r6, r6
 80139ba:	e7ef      	b.n	801399c <_printf_i+0xbc>
 80139bc:	682b      	ldr	r3, [r5, #0]
 80139be:	6820      	ldr	r0, [r4, #0]
 80139c0:	1d19      	adds	r1, r3, #4
 80139c2:	6029      	str	r1, [r5, #0]
 80139c4:	0601      	lsls	r1, r0, #24
 80139c6:	d501      	bpl.n	80139cc <_printf_i+0xec>
 80139c8:	681e      	ldr	r6, [r3, #0]
 80139ca:	e002      	b.n	80139d2 <_printf_i+0xf2>
 80139cc:	0646      	lsls	r6, r0, #25
 80139ce:	d5fb      	bpl.n	80139c8 <_printf_i+0xe8>
 80139d0:	881e      	ldrh	r6, [r3, #0]
 80139d2:	4854      	ldr	r0, [pc, #336]	; (8013b24 <_printf_i+0x244>)
 80139d4:	2f6f      	cmp	r7, #111	; 0x6f
 80139d6:	bf0c      	ite	eq
 80139d8:	2308      	moveq	r3, #8
 80139da:	230a      	movne	r3, #10
 80139dc:	2100      	movs	r1, #0
 80139de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139e2:	6865      	ldr	r5, [r4, #4]
 80139e4:	60a5      	str	r5, [r4, #8]
 80139e6:	2d00      	cmp	r5, #0
 80139e8:	bfa2      	ittt	ge
 80139ea:	6821      	ldrge	r1, [r4, #0]
 80139ec:	f021 0104 	bicge.w	r1, r1, #4
 80139f0:	6021      	strge	r1, [r4, #0]
 80139f2:	b90e      	cbnz	r6, 80139f8 <_printf_i+0x118>
 80139f4:	2d00      	cmp	r5, #0
 80139f6:	d04d      	beq.n	8013a94 <_printf_i+0x1b4>
 80139f8:	4615      	mov	r5, r2
 80139fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80139fe:	fb03 6711 	mls	r7, r3, r1, r6
 8013a02:	5dc7      	ldrb	r7, [r0, r7]
 8013a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013a08:	4637      	mov	r7, r6
 8013a0a:	42bb      	cmp	r3, r7
 8013a0c:	460e      	mov	r6, r1
 8013a0e:	d9f4      	bls.n	80139fa <_printf_i+0x11a>
 8013a10:	2b08      	cmp	r3, #8
 8013a12:	d10b      	bne.n	8013a2c <_printf_i+0x14c>
 8013a14:	6823      	ldr	r3, [r4, #0]
 8013a16:	07de      	lsls	r6, r3, #31
 8013a18:	d508      	bpl.n	8013a2c <_printf_i+0x14c>
 8013a1a:	6923      	ldr	r3, [r4, #16]
 8013a1c:	6861      	ldr	r1, [r4, #4]
 8013a1e:	4299      	cmp	r1, r3
 8013a20:	bfde      	ittt	le
 8013a22:	2330      	movle	r3, #48	; 0x30
 8013a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013a2c:	1b52      	subs	r2, r2, r5
 8013a2e:	6122      	str	r2, [r4, #16]
 8013a30:	f8cd a000 	str.w	sl, [sp]
 8013a34:	464b      	mov	r3, r9
 8013a36:	aa03      	add	r2, sp, #12
 8013a38:	4621      	mov	r1, r4
 8013a3a:	4640      	mov	r0, r8
 8013a3c:	f7ff fee2 	bl	8013804 <_printf_common>
 8013a40:	3001      	adds	r0, #1
 8013a42:	d14c      	bne.n	8013ade <_printf_i+0x1fe>
 8013a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a48:	b004      	add	sp, #16
 8013a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a4e:	4835      	ldr	r0, [pc, #212]	; (8013b24 <_printf_i+0x244>)
 8013a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013a54:	6829      	ldr	r1, [r5, #0]
 8013a56:	6823      	ldr	r3, [r4, #0]
 8013a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8013a5c:	6029      	str	r1, [r5, #0]
 8013a5e:	061d      	lsls	r5, r3, #24
 8013a60:	d514      	bpl.n	8013a8c <_printf_i+0x1ac>
 8013a62:	07df      	lsls	r7, r3, #31
 8013a64:	bf44      	itt	mi
 8013a66:	f043 0320 	orrmi.w	r3, r3, #32
 8013a6a:	6023      	strmi	r3, [r4, #0]
 8013a6c:	b91e      	cbnz	r6, 8013a76 <_printf_i+0x196>
 8013a6e:	6823      	ldr	r3, [r4, #0]
 8013a70:	f023 0320 	bic.w	r3, r3, #32
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	2310      	movs	r3, #16
 8013a78:	e7b0      	b.n	80139dc <_printf_i+0xfc>
 8013a7a:	6823      	ldr	r3, [r4, #0]
 8013a7c:	f043 0320 	orr.w	r3, r3, #32
 8013a80:	6023      	str	r3, [r4, #0]
 8013a82:	2378      	movs	r3, #120	; 0x78
 8013a84:	4828      	ldr	r0, [pc, #160]	; (8013b28 <_printf_i+0x248>)
 8013a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a8a:	e7e3      	b.n	8013a54 <_printf_i+0x174>
 8013a8c:	0659      	lsls	r1, r3, #25
 8013a8e:	bf48      	it	mi
 8013a90:	b2b6      	uxthmi	r6, r6
 8013a92:	e7e6      	b.n	8013a62 <_printf_i+0x182>
 8013a94:	4615      	mov	r5, r2
 8013a96:	e7bb      	b.n	8013a10 <_printf_i+0x130>
 8013a98:	682b      	ldr	r3, [r5, #0]
 8013a9a:	6826      	ldr	r6, [r4, #0]
 8013a9c:	6961      	ldr	r1, [r4, #20]
 8013a9e:	1d18      	adds	r0, r3, #4
 8013aa0:	6028      	str	r0, [r5, #0]
 8013aa2:	0635      	lsls	r5, r6, #24
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	d501      	bpl.n	8013aac <_printf_i+0x1cc>
 8013aa8:	6019      	str	r1, [r3, #0]
 8013aaa:	e002      	b.n	8013ab2 <_printf_i+0x1d2>
 8013aac:	0670      	lsls	r0, r6, #25
 8013aae:	d5fb      	bpl.n	8013aa8 <_printf_i+0x1c8>
 8013ab0:	8019      	strh	r1, [r3, #0]
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	6123      	str	r3, [r4, #16]
 8013ab6:	4615      	mov	r5, r2
 8013ab8:	e7ba      	b.n	8013a30 <_printf_i+0x150>
 8013aba:	682b      	ldr	r3, [r5, #0]
 8013abc:	1d1a      	adds	r2, r3, #4
 8013abe:	602a      	str	r2, [r5, #0]
 8013ac0:	681d      	ldr	r5, [r3, #0]
 8013ac2:	6862      	ldr	r2, [r4, #4]
 8013ac4:	2100      	movs	r1, #0
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	f7ec fbe2 	bl	8000290 <memchr>
 8013acc:	b108      	cbz	r0, 8013ad2 <_printf_i+0x1f2>
 8013ace:	1b40      	subs	r0, r0, r5
 8013ad0:	6060      	str	r0, [r4, #4]
 8013ad2:	6863      	ldr	r3, [r4, #4]
 8013ad4:	6123      	str	r3, [r4, #16]
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013adc:	e7a8      	b.n	8013a30 <_printf_i+0x150>
 8013ade:	6923      	ldr	r3, [r4, #16]
 8013ae0:	462a      	mov	r2, r5
 8013ae2:	4649      	mov	r1, r9
 8013ae4:	4640      	mov	r0, r8
 8013ae6:	47d0      	blx	sl
 8013ae8:	3001      	adds	r0, #1
 8013aea:	d0ab      	beq.n	8013a44 <_printf_i+0x164>
 8013aec:	6823      	ldr	r3, [r4, #0]
 8013aee:	079b      	lsls	r3, r3, #30
 8013af0:	d413      	bmi.n	8013b1a <_printf_i+0x23a>
 8013af2:	68e0      	ldr	r0, [r4, #12]
 8013af4:	9b03      	ldr	r3, [sp, #12]
 8013af6:	4298      	cmp	r0, r3
 8013af8:	bfb8      	it	lt
 8013afa:	4618      	movlt	r0, r3
 8013afc:	e7a4      	b.n	8013a48 <_printf_i+0x168>
 8013afe:	2301      	movs	r3, #1
 8013b00:	4632      	mov	r2, r6
 8013b02:	4649      	mov	r1, r9
 8013b04:	4640      	mov	r0, r8
 8013b06:	47d0      	blx	sl
 8013b08:	3001      	adds	r0, #1
 8013b0a:	d09b      	beq.n	8013a44 <_printf_i+0x164>
 8013b0c:	3501      	adds	r5, #1
 8013b0e:	68e3      	ldr	r3, [r4, #12]
 8013b10:	9903      	ldr	r1, [sp, #12]
 8013b12:	1a5b      	subs	r3, r3, r1
 8013b14:	42ab      	cmp	r3, r5
 8013b16:	dcf2      	bgt.n	8013afe <_printf_i+0x21e>
 8013b18:	e7eb      	b.n	8013af2 <_printf_i+0x212>
 8013b1a:	2500      	movs	r5, #0
 8013b1c:	f104 0619 	add.w	r6, r4, #25
 8013b20:	e7f5      	b.n	8013b0e <_printf_i+0x22e>
 8013b22:	bf00      	nop
 8013b24:	08014845 	.word	0x08014845
 8013b28:	08014856 	.word	0x08014856

08013b2c <_sbrk_r>:
 8013b2c:	b538      	push	{r3, r4, r5, lr}
 8013b2e:	4d06      	ldr	r5, [pc, #24]	; (8013b48 <_sbrk_r+0x1c>)
 8013b30:	2300      	movs	r3, #0
 8013b32:	4604      	mov	r4, r0
 8013b34:	4608      	mov	r0, r1
 8013b36:	602b      	str	r3, [r5, #0]
 8013b38:	f000 f8b2 	bl	8013ca0 <_sbrk>
 8013b3c:	1c43      	adds	r3, r0, #1
 8013b3e:	d102      	bne.n	8013b46 <_sbrk_r+0x1a>
 8013b40:	682b      	ldr	r3, [r5, #0]
 8013b42:	b103      	cbz	r3, 8013b46 <_sbrk_r+0x1a>
 8013b44:	6023      	str	r3, [r4, #0]
 8013b46:	bd38      	pop	{r3, r4, r5, pc}
 8013b48:	20007cfc 	.word	0x20007cfc

08013b4c <memmove>:
 8013b4c:	4288      	cmp	r0, r1
 8013b4e:	b510      	push	{r4, lr}
 8013b50:	eb01 0402 	add.w	r4, r1, r2
 8013b54:	d902      	bls.n	8013b5c <memmove+0x10>
 8013b56:	4284      	cmp	r4, r0
 8013b58:	4623      	mov	r3, r4
 8013b5a:	d807      	bhi.n	8013b6c <memmove+0x20>
 8013b5c:	1e43      	subs	r3, r0, #1
 8013b5e:	42a1      	cmp	r1, r4
 8013b60:	d008      	beq.n	8013b74 <memmove+0x28>
 8013b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b6a:	e7f8      	b.n	8013b5e <memmove+0x12>
 8013b6c:	4402      	add	r2, r0
 8013b6e:	4601      	mov	r1, r0
 8013b70:	428a      	cmp	r2, r1
 8013b72:	d100      	bne.n	8013b76 <memmove+0x2a>
 8013b74:	bd10      	pop	{r4, pc}
 8013b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b7e:	e7f7      	b.n	8013b70 <memmove+0x24>

08013b80 <__malloc_lock>:
 8013b80:	4801      	ldr	r0, [pc, #4]	; (8013b88 <__malloc_lock+0x8>)
 8013b82:	f7ff bc4d 	b.w	8013420 <__retarget_lock_acquire_recursive>
 8013b86:	bf00      	nop
 8013b88:	20007cf0 	.word	0x20007cf0

08013b8c <__malloc_unlock>:
 8013b8c:	4801      	ldr	r0, [pc, #4]	; (8013b94 <__malloc_unlock+0x8>)
 8013b8e:	f7ff bc48 	b.w	8013422 <__retarget_lock_release_recursive>
 8013b92:	bf00      	nop
 8013b94:	20007cf0 	.word	0x20007cf0

08013b98 <_free_r>:
 8013b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b9a:	2900      	cmp	r1, #0
 8013b9c:	d044      	beq.n	8013c28 <_free_r+0x90>
 8013b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ba2:	9001      	str	r0, [sp, #4]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8013baa:	bfb8      	it	lt
 8013bac:	18e4      	addlt	r4, r4, r3
 8013bae:	f7ff ffe7 	bl	8013b80 <__malloc_lock>
 8013bb2:	4a1e      	ldr	r2, [pc, #120]	; (8013c2c <_free_r+0x94>)
 8013bb4:	9801      	ldr	r0, [sp, #4]
 8013bb6:	6813      	ldr	r3, [r2, #0]
 8013bb8:	b933      	cbnz	r3, 8013bc8 <_free_r+0x30>
 8013bba:	6063      	str	r3, [r4, #4]
 8013bbc:	6014      	str	r4, [r2, #0]
 8013bbe:	b003      	add	sp, #12
 8013bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013bc4:	f7ff bfe2 	b.w	8013b8c <__malloc_unlock>
 8013bc8:	42a3      	cmp	r3, r4
 8013bca:	d908      	bls.n	8013bde <_free_r+0x46>
 8013bcc:	6825      	ldr	r5, [r4, #0]
 8013bce:	1961      	adds	r1, r4, r5
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	bf01      	itttt	eq
 8013bd4:	6819      	ldreq	r1, [r3, #0]
 8013bd6:	685b      	ldreq	r3, [r3, #4]
 8013bd8:	1949      	addeq	r1, r1, r5
 8013bda:	6021      	streq	r1, [r4, #0]
 8013bdc:	e7ed      	b.n	8013bba <_free_r+0x22>
 8013bde:	461a      	mov	r2, r3
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	b10b      	cbz	r3, 8013be8 <_free_r+0x50>
 8013be4:	42a3      	cmp	r3, r4
 8013be6:	d9fa      	bls.n	8013bde <_free_r+0x46>
 8013be8:	6811      	ldr	r1, [r2, #0]
 8013bea:	1855      	adds	r5, r2, r1
 8013bec:	42a5      	cmp	r5, r4
 8013bee:	d10b      	bne.n	8013c08 <_free_r+0x70>
 8013bf0:	6824      	ldr	r4, [r4, #0]
 8013bf2:	4421      	add	r1, r4
 8013bf4:	1854      	adds	r4, r2, r1
 8013bf6:	42a3      	cmp	r3, r4
 8013bf8:	6011      	str	r1, [r2, #0]
 8013bfa:	d1e0      	bne.n	8013bbe <_free_r+0x26>
 8013bfc:	681c      	ldr	r4, [r3, #0]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	6053      	str	r3, [r2, #4]
 8013c02:	4421      	add	r1, r4
 8013c04:	6011      	str	r1, [r2, #0]
 8013c06:	e7da      	b.n	8013bbe <_free_r+0x26>
 8013c08:	d902      	bls.n	8013c10 <_free_r+0x78>
 8013c0a:	230c      	movs	r3, #12
 8013c0c:	6003      	str	r3, [r0, #0]
 8013c0e:	e7d6      	b.n	8013bbe <_free_r+0x26>
 8013c10:	6825      	ldr	r5, [r4, #0]
 8013c12:	1961      	adds	r1, r4, r5
 8013c14:	428b      	cmp	r3, r1
 8013c16:	bf04      	itt	eq
 8013c18:	6819      	ldreq	r1, [r3, #0]
 8013c1a:	685b      	ldreq	r3, [r3, #4]
 8013c1c:	6063      	str	r3, [r4, #4]
 8013c1e:	bf04      	itt	eq
 8013c20:	1949      	addeq	r1, r1, r5
 8013c22:	6021      	streq	r1, [r4, #0]
 8013c24:	6054      	str	r4, [r2, #4]
 8013c26:	e7ca      	b.n	8013bbe <_free_r+0x26>
 8013c28:	b003      	add	sp, #12
 8013c2a:	bd30      	pop	{r4, r5, pc}
 8013c2c:	20007cf4 	.word	0x20007cf4

08013c30 <_realloc_r>:
 8013c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c34:	4680      	mov	r8, r0
 8013c36:	4614      	mov	r4, r2
 8013c38:	460e      	mov	r6, r1
 8013c3a:	b921      	cbnz	r1, 8013c46 <_realloc_r+0x16>
 8013c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c40:	4611      	mov	r1, r2
 8013c42:	f7ff bc0f 	b.w	8013464 <_malloc_r>
 8013c46:	b92a      	cbnz	r2, 8013c54 <_realloc_r+0x24>
 8013c48:	f7ff ffa6 	bl	8013b98 <_free_r>
 8013c4c:	4625      	mov	r5, r4
 8013c4e:	4628      	mov	r0, r5
 8013c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c54:	f000 f81b 	bl	8013c8e <_malloc_usable_size_r>
 8013c58:	4284      	cmp	r4, r0
 8013c5a:	4607      	mov	r7, r0
 8013c5c:	d802      	bhi.n	8013c64 <_realloc_r+0x34>
 8013c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c62:	d812      	bhi.n	8013c8a <_realloc_r+0x5a>
 8013c64:	4621      	mov	r1, r4
 8013c66:	4640      	mov	r0, r8
 8013c68:	f7ff fbfc 	bl	8013464 <_malloc_r>
 8013c6c:	4605      	mov	r5, r0
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d0ed      	beq.n	8013c4e <_realloc_r+0x1e>
 8013c72:	42bc      	cmp	r4, r7
 8013c74:	4622      	mov	r2, r4
 8013c76:	4631      	mov	r1, r6
 8013c78:	bf28      	it	cs
 8013c7a:	463a      	movcs	r2, r7
 8013c7c:	f7ff fb7a 	bl	8013374 <memcpy>
 8013c80:	4631      	mov	r1, r6
 8013c82:	4640      	mov	r0, r8
 8013c84:	f7ff ff88 	bl	8013b98 <_free_r>
 8013c88:	e7e1      	b.n	8013c4e <_realloc_r+0x1e>
 8013c8a:	4635      	mov	r5, r6
 8013c8c:	e7df      	b.n	8013c4e <_realloc_r+0x1e>

08013c8e <_malloc_usable_size_r>:
 8013c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c92:	1f18      	subs	r0, r3, #4
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	bfbc      	itt	lt
 8013c98:	580b      	ldrlt	r3, [r1, r0]
 8013c9a:	18c0      	addlt	r0, r0, r3
 8013c9c:	4770      	bx	lr
	...

08013ca0 <_sbrk>:
 8013ca0:	4a04      	ldr	r2, [pc, #16]	; (8013cb4 <_sbrk+0x14>)
 8013ca2:	6811      	ldr	r1, [r2, #0]
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	b909      	cbnz	r1, 8013cac <_sbrk+0xc>
 8013ca8:	4903      	ldr	r1, [pc, #12]	; (8013cb8 <_sbrk+0x18>)
 8013caa:	6011      	str	r1, [r2, #0]
 8013cac:	6810      	ldr	r0, [r2, #0]
 8013cae:	4403      	add	r3, r0
 8013cb0:	6013      	str	r3, [r2, #0]
 8013cb2:	4770      	bx	lr
 8013cb4:	20007d00 	.word	0x20007d00
 8013cb8:	20007d08 	.word	0x20007d08

08013cbc <_init>:
 8013cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbe:	bf00      	nop
 8013cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cc2:	bc08      	pop	{r3}
 8013cc4:	469e      	mov	lr, r3
 8013cc6:	4770      	bx	lr

08013cc8 <_fini>:
 8013cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cca:	bf00      	nop
 8013ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cce:	bc08      	pop	{r3}
 8013cd0:	469e      	mov	lr, r3
 8013cd2:	4770      	bx	lr
